void test0 ( ) throws Throwable { Main main0 = new Main ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { HashMap < CombatantSide , Set < Combatant > > hashMap0 = new HashMap < CombatantSide , Set < Combatant > > ( ) ; SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 0 , 0 ) ; Vector < Round > vector0 = new Vector < Round > ( 16716049 , 16716049 ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) vector0 ) ; CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 1867 ) ; BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 1941 ) , 16716049 ) ; RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; AllStatistics allStatistics0 = new AllStatistics ( combatantStatistic0 , battleStatistics0 , roundStatGenerator0 ) ; Fortbattle fortbattle0 = new Fortbattle ( "StatusPanel . onlinePercent" , ( Map < CombatantSide , Set < Combatant > > ) hashMap0 , ( Battlefield ) simpleBattleField0 , battleplan0 , allStatistics0 , ( Image ) null ) ; String string0 = fortbattle0 . getFortname ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFortname ( ) { return fortname ; }
void test0 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; Color color0 = combatantSide0 . color ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color color ( ) { return color ; }
void test1 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; Color color0 = combatantSide0 . darkColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color darkColor ( ) { return halfBrightness ( color ) ; }
void test0 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 899 ) , ( - 899 ) , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 899 ) , 0 , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 899 ) , ( Area ) simpleArea0 , false ) ; CombatantState combatantState1 = combatantState0 . changePosition ( ( Area ) simpleArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 899 ) , ( - 899 ) , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 899 ) , 0 , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 899 ) , ( Area ) simpleArea0 , false ) ; CombatantState combatantState1 = combatantState0 . reduceHealthBy ( ( - 899 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test2 ( ) throws Throwable { CombatantState combatantState0 = new CombatantState ( ( Area ) null , 1 , ( Area ) null , false ) ; CombatantState combatantState1 = combatantState0 . changeTarget ( ( Area ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test3 ( ) throws Throwable { CombatantState combatantState0 = new CombatantState ( ( Area ) null , 1 , ( Area ) null , false ) ; CombatantState combatantState1 = combatantState0 . setOnline ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHealth ( ) { return health ; }
void test4 ( ) throws Throwable { CombatantState combatantState0 = new CombatantState ( ( Area ) null , 1657 , ( Area ) null , true ) ; String string0 = combatantState0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGamerOnline ( ) { return isGamerOnline ; }
void test0 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( 0 , 13 , 0 ) ; String string0 = sectorBonus0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( 0 , 13 , 0 ) ; int int0 = sectorBonus0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return 13 * attackBonus + 17 * defendBonus ; }
void test2 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( ( - 1988 ) , ( - 221 ) , 0 ) ; SectorBonus sectorBonus1 = new SectorBonus ( 278 , ( - 1988 ) , 1 ) ; boolean boolean0 = sectorBonus0 . equals ( ( Object ) sectorBonus1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test3 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( 0 , 13 , 0 ) ; boolean boolean0 = sectorBonus0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test4 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( 0 , 13 , 0 ) ; boolean boolean0 = sectorBonus0 . equals ( ( Object ) "DAMAGE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test5 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( 0 , ( - 740 ) , 0 ) ; SectorBonus sectorBonus1 = new SectorBonus ( 0 , 0 , 0 ) ; boolean boolean0 = sectorBonus0 . equals ( ( Object ) sectorBonus1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test6 ( ) throws Throwable { SectorBonus sectorBonus0 = new SectorBonus ( 0 , ( - 740 ) , 0 ) ; SectorBonus sectorBonus1 = new SectorBonus ( 0 , ( - 740 ) , 0 ) ; boolean boolean0 = sectorBonus0 . equals ( ( Object ) sectorBonus1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( ( - 1945 ) , ( - 1945 ) , ( - 1945 ) , ( - 1945 ) , ( - 1945 ) , " , defense = " ) ; String string0 = jSWeaponData_WeaponGameData0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1674 , "successfully read " , 1674 , 1674 ) ; boolean boolean0 = jSWeaponData0 . hasGraphitLubricant ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasGraphitLubricant ( Weapon weapon ) ; boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test2 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 102 , "c`y' } \"Es [ TXZ90T ; J" , 102 , 225 ) ; boolean boolean0 = jSWeaponData0 . hasBayonet ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBayonet ( Weapon weapon ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has graphit lubricant * ( does more damage than normal ) * / boolean hasGraphitLubricant ( Weapon weapon ) ; boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test3 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; int int0 = jSWeaponData0 . getGoldenGoldAttBonus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGoldenGoldAttBonus ( ) ; / * * * @return the amount of dodging bonus a golden gun gives to it's sector * / int getGoldenGoldDeffBonus ( ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has a bajonett ( does * more damage than normal ) * / boolean hasBayonet ( Weapon weapon ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has graphit lubricant * ( does more damage than normal ) * / boolean hasGraphitLubricant ( Weapon weapon ) ; boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test4 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 102 , "c`y' } \"Es [ TXZ90T ; J" , 102 , 225 ) ; boolean boolean0 = jSWeaponData0 . hasShinyWeaponOil ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test5 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1674 , "successfully read " , 1674 , 1674 ) ; boolean boolean0 = jSWeaponData0 . hasFettesWeaponOil ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test6 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; int int0 = jSWeaponData0 . getGoldenGoldDmgBonus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGoldenGoldDmgBonus ( ) ; / * * * @return the amount of shooting bonus a golden gun gives to it's sector * / int getGoldenGoldAttBonus ( ) ; / * * * @return the amount of dodging bonus a golden gun gives to it's sector * / int getGoldenGoldDeffBonus ( ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has a bajonett ( does * more damage than normal ) * / boolean hasBayonet ( Weapon weapon ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has graphit lubricant * ( does more damage than normal ) * / boolean hasGraphitLubricant ( Weapon weapon ) ; boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test7 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1674 , "successfully read " , 1674 , 1674 ) ; boolean boolean0 = jSWeaponData0 . hasHipFlask ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasHipFlask ( Weapon w ) ; }
void test8 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; int int0 = jSWeaponData0 . getGoldenGoldDeffBonus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGoldenGoldDeffBonus ( ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has a bajonett ( does * more damage than normal ) * / boolean hasBayonet ( Weapon weapon ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has graphit lubricant * ( does more damage than normal ) * / boolean hasGraphitLubricant ( Weapon weapon ) ; boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test9 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1674 , "successfully read " , 1674 , 1674 ) ; boolean boolean0 = jSWeaponData0 . hasLoadingchamberOrEnhancedPatrons ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test10 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 102 , "c`y' } \"Es [ TXZ90T ; J" , 102 , 225 ) ; boolean boolean0 = jSWeaponData0 . hasSchmierendesWeaponOil ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test11 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1674 , "successfully read " , 1674 , 1674 ) ; SectorBonus . BonusType sectorBonus_BonusType0 = SectorBonus . BonusType . DEFENSE ; int int0 = simpleWeapon0 . getSectorBonus ( sectorBonus_BonusType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test12 ( ) throws Throwable { JSWeaponData jSWeaponData0 = new JSWeaponData ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 102 , "c`y' } \"Es [ TXZ90T ; J" , 102 , 225 ) ; boolean boolean0 = jSWeaponData0 . isGoldenGun ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGoldenGun ( Weapon weapon ) ; / * * * @return the amount of additional damage a golden gun gives to it's sector * / int getGoldenGoldDmgBonus ( ) ; / * * * @return the amount of shooting bonus a golden gun gives to it's sector * / int getGoldenGoldAttBonus ( ) ; / * * * @return the amount of dodging bonus a golden gun gives to it's sector * / int getGoldenGoldDeffBonus ( ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has a bajonett ( does * more damage than normal ) * / boolean hasBayonet ( Weapon weapon ) ; / * * * @param weapon * @return < code > true < / code > if the the given weapon has graphit lubricant * ( does more damage than normal ) * / boolean hasGraphitLubricant ( Weapon weapon ) ; boolean hasFettesWeaponOil ( Weapon weapon ) ; boolean hasSchmierendesWeaponOil ( Weapon weapon ) ; boolean hasShinyWeaponOil ( Weapon weapon ) ; boolean hasLoadingchamberOrEnhancedPatrons ( Weapon weapon ) ; boolean hasHipFlask ( Weapon w ) ; }
void test13 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "atZ_uMl + h7M" ) ; int int0 = jSWeaponData_WeaponGameData0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return 13 * attackBonus + 17 * defendBonus ; }
void test14 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 3 , 1425 , 1425 , 1425 , 1425 , ( String ) null ) ; int int0 = jSWeaponData_WeaponGameData0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return 13 * attackBonus + 17 * defendBonus ; }
void test15 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 0 , 1674 , 1674 , 1674 , 0 , "successfully read " ) ; JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData . WeaponGameData ( 1674 , 0 , 1674 , 1674 , 0 , "successfully read " ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) jSWeaponData_WeaponGameData1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test16 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 15 , 15 , 15 , 15 , 15 , "`OkJn" ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test17 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "atZ_uMl + h7M" ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) "DEFENSE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test18 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "atZ_uMl + h7M" ) ; JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData . WeaponGameData ( ( - 1273420336 ) , ( - 1273420336 ) , ( - 1273420336 ) , ( - 1273420336 ) , ( - 1273420336 ) , "DEFENSE" ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) jSWeaponData_WeaponGameData1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test19 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( ( - 1945 ) , ( - 1945 ) , ( - 1945 ) , ( - 1945 ) , ( - 1945 ) , " , defense = " ) ; JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData . WeaponGameData ( ( - 1945 ) , ( - 1945 ) , ( - 7 ) , ( - 7 ) , ( - 1945 ) , " , defense = " ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) jSWeaponData_WeaponGameData1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test20 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( ( - 6 ) , ( - 6 ) , ( - 6 ) , ( - 6 ) , ( - 6 ) , "\"" ) ; JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData . WeaponGameData ( ( - 6 ) , 711 , 711 , ( - 6 ) , ( - 6 ) , "\"" ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) jSWeaponData_WeaponGameData1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test21 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "atZ_uMl + h7M" ) ; JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "DEFENSE" ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) jSWeaponData_WeaponGameData1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test22 ( ) throws Throwable { JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "atZ_uMl + h7M" ) ; JSWeaponData . WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData . WeaponGameData ( 0 , 0 , 0 , 0 , 0 , "atZ_uMl + h7M" ) ; boolean boolean0 = jSWeaponData_WeaponGameData0 . equals ( ( Object ) jSWeaponData_WeaponGameData1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) ; / * * * @return the name of this weapon ( not < code > null < / code > ) * / String name ( ) ; / * * * @return the minimum damage which can be achieved with this weapon ( not * negative ) * / int minDamage ( ) ; / * * * @return the maximum possible damage which can be achieved with this * weapon ( greater or equal to { @link #minDamage ( ) }
void test1 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test2 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) ; / * * * @return the name of this weapon ( not < code > null < / code > ) * / String name ( ) ; / * * * @return the minimum damage which can be achieved with this weapon ( not * negative ) * / int minDamage ( ) ; / * * * @return the maximum possible damage which can be achieved with this * weapon ( greater or equal to { @link #minDamage ( ) }
void test3 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test8 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , " ( " , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) ; / * * * @return the name of this weapon ( not < code > null < / code > ) * / String name ( ) ; / * * * @return the minimum damage which can be achieved with this weapon ( not * negative ) * / int minDamage ( ) ; / * * * @return the maximum possible damage which can be achieved with this * weapon ( greater or equal to { @link #minDamage ( ) }
void test9 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , " ( " , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) ; / * * * @return the name of this weapon ( not < code > null < / code > ) * / String name ( ) ; / * * * @return the minimum damage which can be achieved with this weapon ( not * negative ) * / int minDamage ( ) ; / * * * @return the maximum possible damage which can be achieved with this * weapon ( greater or equal to { @link #minDamage ( ) }
void test10 ( ) throws Throwable { SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "XP [ Y : " , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) ; / * * * @return the amount of { @link Area }
void test1 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Area _getArea ( int x , int y ) throws IllegalArgumentException ; }
void test2 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( ( - 1056 ) , ( - 1056 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Area _getArea ( int x , int y ) throws IllegalArgumentException ; }
void test3 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 3 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Area _getArea ( int x , int y ) throws IllegalArgumentException ; }
void test0 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . getSectorBonus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _getMaxLP ( ) { return maxHealth ; }
void test1 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . usesBayonet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test2 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; BattleStatistics battleStatistics0 = new BattleStatistics ( 1 , 1 ) ; simpleCombatant0 . removeObserver ( ( CombatantObserver ) battleStatistics0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test3 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 18 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 18 , 18 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 18 , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 18 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; simpleCombatant0 . getCity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _getMaxLP ( ) { return maxHealth ; }
void test5 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . _state ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test6 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . aimAt ( ( Combatant ) simpleCombatant0 ) ; simpleCombatant0 . shoot ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _getMaxLP ( ) { return maxHealth ; }
void test7 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118734 , true , true , 1118734 , 1118734 , true , 1118734 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118734 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118734 , "N^kg { Al ] r ! " , 1118734 , 1118734 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118734 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; int int0 = simpleCombatant0 . _getMaxLP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test8 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; int int0 = simpleCombatant0 . _getCurrentLP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test9 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . setOnline ( true ) ; simpleCombatant0 . _setState ( combatantState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test10 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test11 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; int int0 = simpleCombatant0 . _maxHealth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test12 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1701 , true , true , 1701 , 1701 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1701 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 300 , "" , 300 , 1701 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "" , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; int int0 = simpleCombatant0 . _health ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test18 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1701 , true , true , 1701 , 1701 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1701 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 300 , "" , 300 , 1701 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "" , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; simpleCombatant0 . fireHasMoved ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test19 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . fireHasSwapped ( ( Combatant ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test20 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . fireNewTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test21 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1701 , true , true , 1701 , 1701 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1701 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 300 , "" , 300 , 1701 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "" , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; simpleCombatant0 . fireAimingAt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test22 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . fireCriticalShot ( 1118719 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _getMaxLP ( ) { return maxHealth ; }
void test23 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . _setState ( combatantState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _getMaxLP ( ) { return maxHealth ; }
void test24 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 18 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 18 , 18 ) ; CombatantState combatantState1 = new CombatantState ( ( Area ) simpleArea0 , 18 , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState1 , 18 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; simpleCombatant0 . _setState ( combatantState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test25 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 18 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 18 , 18 ) ; CombatantState combatantState1 = new CombatantState ( ( Area ) simpleArea0 , 18 , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState1 , 18 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; simpleCombatant0 . hit ( 18 ) ; simpleCombatant0 . _setState ( combatantState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test26 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118734 , true , true , 1118734 , 1118734 , true , 1118734 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118734 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118734 , "N^kg { Al ] r ! " , 1118734 , 1118734 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118734 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . setOnline ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test27 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , false , true , 1118719 , 1118719 , false , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; simpleCombatant0 . setOnline ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void isOnline ( Combatant combatant , boolean changed ) ; / * * * The { @link Combatant }
void test28 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 1 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 1 , 1 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; int int0 = simpleCombatant0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test29 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 25 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 25 , 25 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; SimpleCombatant simpleCombatant1 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test30 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1701 , true , true , 1701 , 1701 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1701 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 300 , "" , 300 , 1701 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "" , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; boolean boolean0 = simpleCombatant0 . equals ( ( Object ) "javax . swing . JCheckBoxMenuItem [ , 0 , 0 , 0x0 , invalid , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = javax . swing . plaf . metal . MetalBorders$MenuItemBorder@5fb4a70d , flags = 264 , maximumSize = , minimumSize = , preferredSize = , defaultIcon = , disabledIcon = , disabledSelectedIcon = , margin = javax . swing . plaf . InsetsUIResource [ top = 2 , left = 2 , bottom = 2 , right = 2 ] , paintBorder = true , paintFocus = false , pressedIcon = , rolloverEnabled = false , rolloverIcon = , rolloverSelectedIcon = , selectedIcon = , text = ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test31 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1701 , true , true , 1701 , 1701 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1701 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 300 , "" , 300 , 1701 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "" , characterClass0 , ( Weapon ) simpleWeapon0 , "" ) ; SimpleCombatant simpleCombatant1 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "Pvu#hr4318Hg { 5lDVV'" , characterClass0 , ( Weapon ) simpleWeapon0 , "Pvu#hr4318Hg { 5lDVV'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test32 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , true , 1118719 , 1118719 , true , 18 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1118719 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 1118719 , "N^kg { Al ] r ! " , 18 , 18 ) ; CombatantState combatantState1 = new CombatantState ( ( Area ) simpleArea0 , 18 , ( Area ) simpleArea0 , true ) ; CharacterClass characterClass1 = CharacterClass . ADVENTURER ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState1 , 18 , "N^kg { Al ] r ! " , characterClass1 , ( Weapon ) simpleWeapon0 , "" ) ; SimpleCombatant simpleCombatant1 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1118719 , "N^kg { Al ] r ! " , characterClass0 , ( Weapon ) simpleWeapon0 , "N^kg { Al ] r ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test33 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1701 , true , true , 1701 , 1701 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 1701 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 300 , "" , 300 , 1701 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "Pvu#hr4318Hg { 5lDVV'" , characterClass0 , ( Weapon ) simpleWeapon0 , "Pvu#hr4318Hg { 5lDVV'" ) ; SimpleCombatant simpleCombatant1 = new SimpleCombatant ( combatantSide0 , combatantState0 , 1701 , "Pvu#hr4318Hg { 5lDVV'" , characterClass0 , ( Weapon ) simpleWeapon0 , "f - 7'4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the additional damage this item adds to the maximum damage of a * weapon ( can also be negative ) * / int additionalMaxDamage ( ) ; / * * * @return the additional damage this item adds to the minimum damage of a * weapon ( can also be negative ) * / int additionalMinDamage ( ) ; }
void test0 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 13 , true , true , 13 , 13 , true , 13 , characterClass0 ) ; simpleSector0 . getOccupier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test1 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 13 , true , true , 13 , 13 , true , 13 , characterClass0 ) ; boolean boolean0 = simpleSector0 . isAttackerSpawn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test2 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( ( - 439 ) , true , true , ( - 439 ) , ( - 439 ) , true , ( - 439 ) , characterClass0 ) ; SectorBonus sectorBonus0 = simpleSector0 . getBonus ( characterClass0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test4 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . SOLDIER ; SimpleSector simpleSector0 = new SimpleSector ( 50 , false , false , 50 , 50 , false , 50 , characterClass0 ) ; int int0 = simpleSector0 . getHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefenderSpawn ( ) { return defenderSpawn ; }
void test5 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . SOLDIER ; SimpleSector simpleSector0 = new SimpleSector ( 50 , false , false , 50 , 50 , false , 50 , characterClass0 ) ; boolean boolean0 = simpleSector0 . isFlag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttackerSpawn ( ) { return attackerSpawn ; }
void test6 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 2 , true , true , 2 , 2 , true , 2 , characterClass0 ) ; Set < Area > set0 = simpleSector0 . getAreas ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttackerSpawn ( ) { return attackerSpawn ; }
void test7 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 31 , true , true , 31 , 31 , true , 31 , characterClass0 ) ; boolean boolean0 = simpleSector0 . isDefenderSpawn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test8 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( 1681 , true , true , 1681 , 1681 , true , 1681 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( 1681 , 1681 , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test9 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . SOLDIER ; SimpleSector simpleSector0 = new SimpleSector ( 1341 , false , false , 1341 , 1341 , false , 1341 , characterClass0 ) ; simpleSector0 . removeObserver ( ( SectorObserver ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test10 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . SOLDIER ; SimpleSector simpleSector0 = new SimpleSector ( 50 , false , false , 50 , 50 , false , 50 , characterClass0 ) ; simpleSector0 . free ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttackerSpawn ( ) { return attackerSpawn ; }
void test11 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 13 , true , true , 13 , 13 , true , 13 , characterClass0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; simpleSector0 . gainControl ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test12 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 13 , true , true , 13 , 13 , true , 13 , characterClass0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; simpleSector0 . gainControl ( combatantSide0 ) ; simpleSector0 . gainControl ( combatantSide0 ) ; simpleSector0 . free ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test13 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 2 , true , true , 2 , 2 , true , 2 , characterClass0 ) ; boolean boolean0 = simpleSector0 . isOccupied ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttackerSpawn ( ) { return attackerSpawn ; }
void test14 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 31 , true , true , 31 , 31 , true , 31 , characterClass0 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; simpleSector0 . gainControl ( combatantSide0 ) ; boolean boolean0 = simpleSector0 . isOccupied ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test15 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . SOLDIER ; SimpleSector simpleSector0 = new SimpleSector ( 1341 , false , false , 1341 , 1341 , false , 1341 , characterClass0 ) ; CharacterClass characterClass1 = CharacterClass . WORKER ; int int0 = simpleSector0 . classBonus ( characterClass1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test16 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( ( - 439 ) , true , true , ( - 439 ) , ( - 439 ) , true , ( - 439 ) , characterClass0 ) ; int int0 = simpleSector0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test17 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( ( - 710 ) , ( - 710 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test18 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . GREENHORN ; SimpleSector simpleSector0 = new SimpleSector ( ( - 439 ) , true , true , ( - 439 ) , ( - 439 ) , true , ( - 439 ) , characterClass0 ) ; boolean boolean0 = simpleSector0 . equals ( ( Object ) "SansSerif" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test19 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 31 , true , true , 31 , 31 , true , 31 , characterClass0 ) ; boolean boolean0 = simpleSector0 . equals ( ( Object ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFlag ( ) { return flag ; }
void test20 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . SOLDIER ; SimpleSector simpleSector0 = new SimpleSector ( 1838 , true , true , 1838 , 1838 , true , 1838 , characterClass0 ) ; boolean boolean0 = simpleSector0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test0 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , false , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; int int0 = simpleArea0 . getHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test1 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 532 ) , ( - 532 ) , true , ( - 532 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 742 ) , 1 , ( Sector ) simpleSector0 ) ; Combatant combatant0 = simpleArea0 . getOccupier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Combatant getOccupier ( ) ; / * * * The given { @link Combatant }
void test2 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , false , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; simpleArea0 . free ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test5 ( ) throws Throwable { JButton jButton0 = new JButton ( ) ; Point point0 = jButton0 . getLocation ( ) ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( point0 , ( Sector ) simpleSector0 ) ; Point point1 = simpleArea0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Point getLocation ( ) ; / * * * @return true if a { @link Combatant }
void test6 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 532 ) , ( - 532 ) , true , ( - 532 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 742 ) , 1 , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Combatant occupy ( Combatant occupier , Area oldPosition ) ; / * * * no combatant occupies this area * / void free ( ) ; / * * * @return the height of this area on the battlefield * / int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test7 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 532 ) , ( - 532 ) , true , ( - 532 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 742 ) , 1 , ( Sector ) simpleSector0 ) ; SimpleSector simpleSector1 = ( SimpleSector ) simpleArea0 . getSector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test8 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 532 ) , ( - 532 ) , true , ( - 532 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 742 ) , 1 , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test9 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , false , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test10 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , false , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test11 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , false , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test12 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , false , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( 0 , 0 , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test13 ( ) throws Throwable { JButton jButton0 = new JButton ( ) ; Point point0 = jButton0 . getLocation ( ) ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( point0 , ( Sector ) simpleSector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test0 ( ) throws Throwable { Level level0 = Level . FINE ; LogHelper . setGlobalLogLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { HashMap < String , Level > hashMap0 = new HashMap < String , Level > ( ) ; BackupLogLevels backupLogLevels0 = new BackupLogLevels ( ( Map < String , Level > ) hashMap0 ) ; backupLogLevels0 . applyToAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { Level level0 = Level . ALL ; GlobalLogLevelSetter globalLogLevelSetter0 = new GlobalLogLevelSetter ( level0 ) ; Logger logger0 = Logger . getAnonymousLogger ( ) ; globalLogLevelSetter0 . doWithLogger ( logger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void doWithLogger ( Logger logger ) { Level backupLevel = lastLogLevels . get ( logger . getName ( ) ) ; if ( backupLevel ! = null ) { logger . setLevel ( backupLevel ) ; } }
void test0 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 20 , 0 , 20 , 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StatusPanel ( int countAttackers , int countDefenders , int sumAttackerHP , int sumDefenderHP ) { super ( new BorderLayout ( ) ) ; count_attacker = new JProgressBar ( 0 , countAttackers ) ; count_defender = new JProgressBar ( 0 , countDefenders ) ; hp_attacker = new JProgressBar ( 0 , sumAttackerHP ) ; hp_defender = new JProgressBar ( 0 , sumDefenderHP ) ; percentOnline_attacker . setModel ( new PercentModel ( countAttackers ) ) ; percentOnline_defender . setModel ( new PercentModel ( countDefenders ) ) ; addChangeListener ( ) ; count_attacker . setValue ( countAttackers ) ; count_defender . setValue ( countDefenders ) ; hp_attacker . setValue ( sumAttackerHP ) ; hp_defender . setValue ( sumDefenderHP ) ; setBarColors ( ) ; enableLabels ( ) ; initGui ( ) ; }
void test1 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 0 , 0 , 0 ) ; statusPanel0 . hasSwappedPosition ( ( Combatant ) null , ( Combatant ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void hasSwappedPosition ( Combatant combatant , Combatant swappedWith ) ; / * * * The player wants the given combatant to move to the given destination * * @param combatant * which notified this observer * @param destination * / void newDestination ( Combatant combatant , Area destination ) ; / * * * The combatant will shoot at the given target . ( The hit is recognized at * the victim ) * * @param combatant * which notified this observer * @param target * / void aimsAt ( Combatant combatant , Combatant target ) ; / * * * The { @link Combatant }
void test2 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 0 , 0 , 0 ) ; statusPanel0 . criticalShot ( ( Combatant ) null , ( Combatant ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void criticalShot ( Combatant combatant , Combatant victim , int damage ) ; }
void test3 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 0 , 0 , 0 ) ; statusPanel0 . hasMoved ( ( Combatant ) null , ( Area ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void hasMoved ( Combatant combatant , Area newPos ) ; / * * * the last move was to a position which was already hold by another * { @link Combatant }
void test4 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 84 , 1590 , 597 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . ADVENTURER ; SimpleSector simpleSector0 = new SimpleSector ( 1118719 , true , false , 1 , 84 , false , 350 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( 597 , 1108 , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 994 ) , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 84 , " ? + w#ppZC" , 0 , 1118719 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 350 , " ? + w#ppZC" , characterClass0 , ( Weapon ) simpleWeapon0 , " ? + w#ppZC" ) ; statusPanel0 . isAlive ( ( Combatant ) simpleCombatant0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void isAlive ( Combatant combatant ) ; / * * * The player of the combatant is online . * * @param combatant * which notified this observer * @param changed * < code > true < / code > if the new state is different than the old * / void isOnline ( Combatant combatant , boolean changed ) ; / * * * The { @link Combatant }
void test5 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 0 , 0 , 0 ) ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( 0 , 0 , ( Sector ) simpleSector0 ) ; statusPanel0 . newDestination ( ( Combatant ) null , ( Area ) simpleArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void newDestination ( Combatant combatant , Area destination ) ; / * * * The combatant will shoot at the given target . ( The hit is recognized at * the victim ) * * @param combatant * which notified this observer * @param target * / void aimsAt ( Combatant combatant , Combatant target ) ; / * * * The { @link Combatant }
void test6 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 0 , 0 , 0 ) ; statusPanel0 . aimsAt ( ( Combatant ) null , ( Combatant ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void aimsAt ( Combatant combatant , Combatant target ) ; / * * * The { @link Combatant }
void test10 ( ) throws Throwable { StatusPanel statusPanel0 = new StatusPanel ( 0 , 0 , 0 , 0 ) ; statusPanel0 . isOnline ( ( Combatant ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void isOnline ( Combatant combatant , boolean changed ) ; / * * * The { @link Combatant }
void test0 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( " & z * < " ) ; PasteAction pasteAction0 = new PasteAction ( ( JTextComponent ) jTextField0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "javax . swing . JRadioButton [ , 0 , 0 , 0x0 , invalid , alignmentX = 0 . 0 , alignmentY = 0 . 5 , border = javax . swing . plaf . BorderUIResource$CompoundBorderUIResource@7601fcbd , flags = 296 , maximumSize = , minimumSize = , preferredSize = , defaultIcon = , disabledIcon = , disabledSelectedIcon = , margin = javax . swing . plaf . InsetsUIResource [ top = 2 , left = 2 , bottom = 2 , right = 2 ] , paintBorder = false , paintFocus = true , pressedIcon = , rolloverEnabled = true , rolloverIcon = , rolloverSelectedIcon = , selectedIcon = , text = & z * < ] " , ( - 1 ) , "javax . swing . JRadioButton [ , 0 , 0 , 0x0 , invalid , alignmentX = 0 . 0 , alignmentY = 0 . 5 , border = javax . swing . plaf . BorderUIResource$CompoundBorderUIResource@7601fcbd , flags = 296 , maximumSize = , minimumSize = , preferredSize = , defaultIcon = , disabledIcon = , disabledSelectedIcon = , margin = javax . swing . plaf . InsetsUIResource [ top = 2 , left = 2 , bottom = 2 , right = 2 ] , paintBorder = false , paintFocus = true , pressedIcon = , rolloverEnabled = true , rolloverIcon = , rolloverSelectedIcon = , selectedIcon = , text = & z * < ] " , ( - 1 ) ) ; pasteAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { _textField . copy ( ) ; }
void test0 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ( String ) null ) ; SelectAllOnFocus selectAllOnFocus0 = new SelectAllOnFocus ( ( JTextComponent ) jPasswordField0 ) ; FocusEvent focusEvent0 = new FocusEvent ( ( Component ) jPasswordField0 , 272 ) ; selectAllOnFocus0 . focusGained ( focusEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void focusGained ( FocusEvent e ) { super . focusGained ( e ) ; _textField . selectAll ( ) ; }
void test0 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( " & z * < " ) ; CopyAction copyAction0 = new CopyAction ( ( JTextComponent ) jTextField0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "javax . swing . JRadioButton [ , 0 , 0 , 0x0 , invalid , alignmentX = 0 . 0 , alignmentY = 0 . 5 , border = javax . swing . plaf . BorderUIResource$CompoundBorderUIResource@229757c0 , flags = 296 , maximumSize = , minimumSize = , preferredSize = , defaultIcon = , disabledIcon = , disabledSelectedIcon = , margin = javax . swing . plaf . InsetsUIResource [ top = 2 , left = 2 , bottom = 2 , right = 2 ] , paintBorder = false , paintFocus = true , pressedIcon = , rolloverEnabled = true , rolloverIcon = , rolloverSelectedIcon = , selectedIcon = , text = & z * < ] " , ( - 1 ) , "javax . swing . JRadioButton [ , 0 , 0 , 0x0 , invalid , alignmentX = 0 . 0 , alignmentY = 0 . 5 , border = javax . swing . plaf . BorderUIResource$CompoundBorderUIResource@229757c0 , flags = 296 , maximumSize = , minimumSize = , preferredSize = , defaultIcon = , disabledIcon = , disabledSelectedIcon = , margin = javax . swing . plaf . InsetsUIResource [ top = 2 , left = 2 , bottom = 2 , right = 2 ] , paintBorder = false , paintFocus = true , pressedIcon = , rolloverEnabled = true , rolloverIcon = , rolloverSelectedIcon = , selectedIcon = , text = & z * < ] " , ( - 1 ) ) ; copyAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { _textField . copy ( ) ; }
void test0 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 0 , 0 ) ; BattleFieldLayoutManager battleFieldLayoutManager0 = new BattleFieldLayoutManager ( ( Battlefield ) simpleBattleField0 ) ; JSeparator jSeparator0 = new JSeparator ( ) ; JToolTip jToolTip0 = jSeparator0 . createToolTip ( ) ; Dimension dimension0 = battleFieldLayoutManager0 . preferredLayoutSize ( ( Container ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 0 , 0 ) ; BattleFieldLayoutManager battleFieldLayoutManager0 = new BattleFieldLayoutManager ( ( Battlefield ) simpleBattleField0 ) ; JSplitPane jSplitPane0 = new JSplitPane ( 0 , false ) ; Dimension dimension0 = battleFieldLayoutManager0 . minimumLayoutSize ( ( Container ) jSplitPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test3 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 1797 , 15 ) ; BattleFieldLayoutManager battleFieldLayoutManager0 = new BattleFieldLayoutManager ( ( Battlefield ) simpleBattleField0 ) ; JRootPane jRootPane0 = new JRootPane ( ) ; battleFieldLayoutManager0 . layoutContainer ( ( Container ) jRootPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layoutContainer ( Container parent ) { Dimension cellSize = calculateCellSize ( parent ) ; ( parent . getTreeLock ( ) ) { for ( Component child : parent . getComponents ( ) ) { if ( ! child . isVisible ( ) ) { continue ; } if ( child instanceof BattlefieldCell ) { layoutCell ( cellSize , ( BattlefieldCell ) child ) ; } else if ( child instanceof PlayerDrawing ) { / / players may be childs when they are moving / / they are not layout but directly painted in MoveAnimation } else { LOG . warning ( "no BattlefieldCell - not layouting " + child ) ; } } } }
void test4 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( 1051 , 1051 ) ; BattleFieldLayoutManager battleFieldLayoutManager0 = new BattleFieldLayoutManager ( ( Battlefield ) simpleBattleField0 ) ; Box box0 = Box . createHorizontalBox ( ) ; battleFieldLayoutManager0 . removeLayoutComponent ( ( Component ) box0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeLayoutComponent ( Component comp ) { / / no components here }
void test0 ( ) throws Throwable { MoveTarget moveTarget0 = new MoveTarget ( ( Combatant ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( MouseEvent event ) { StringBuilder text = new StringBuilder ( 20 ) ; text . append ( " < html > " ) ; String ownText = super . getToolTipText ( event ) ; if ( ownText ! = null & & ownText . length ( ) > 0 ) { text . append ( ownText ) ; text . append ( " < br > " ) ; } / / TODO format and show only if requested if ( statistics ! = null ) { text . append ( statistics . toString ( ) ) ; text . append ( " < br > " ) ; } boolean first = true ; for ( Component child : getComponents ( ) ) { if ( child instanceof CellContent ) { if ( first ) { first = false ; } else { text . append ( " < br > " ) ; } text . append ( ( ( CellContent ) child ) . getDescription ( ) ) ; } } text . append ( " < / html > " ) ; return text . toString ( ) ; }
void test0 ( ) throws Throwable { AnimTest animTest0 = new AnimTest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { MoveTarget moveTarget0 = new MoveTarget ( ( Combatant ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem ( " | s ; Z ( ? q4 ismn" , false ) ; MoveTask moveTask0 = new MoveTask ( ( JComponent ) jCheckBoxMenuItem0 , ( - 1785 . 950099473218 ) , ( double ) 0 ) ; moveTask0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void run ( ) { shouldBeX + = diffX ; shouldBeY + = diffY ; Point newPos = new Point ( ( int ) shouldBeX , ( int ) shouldBeY ) ; comp . setLocation ( newPos ) ; }
void test0 ( ) throws Throwable { JRadioButton jRadioButton0 = new JRadioButton ( ) ; JLabel jLabel0 = new JLabel ( ) ; Point point0 = jLabel0 . getLocation ( ) ; MoveAnimation moveAnimation0 = new MoveAnimation ( ( JComponent ) jRadioButton0 , point0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MoveAnimation ( JComponent component , Point destination , int timeOfAnimation ) { if ( component ! = null & & destination ! = null & & timeOfAnimation > 0 ) { scheduleMoves ( component , timeOfAnimation , destination ) ; } }
void test1 ( ) throws Throwable { DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; Point point0 = defaultListCellRenderer0 . getLocation ( ) ; MoveAnimation moveAnimation0 = new MoveAnimation ( ( JComponent ) null , point0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MoveAnimation ( JComponent component , Point destination , int timeOfAnimation ) { if ( component ! = null & & destination ! = null & & timeOfAnimation > 0 ) { scheduleMoves ( component , timeOfAnimation , destination ) ; } }
void test2 ( ) throws Throwable { JCheckBox jCheckBox0 = new JCheckBox ( ( Icon ) null , true ) ; MoveAnimation moveAnimation0 = new MoveAnimation ( ( JComponent ) jCheckBox0 , ( Point ) null , 961 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MoveAnimation ( JComponent component , Point destination , int timeOfAnimation ) { if ( component ! = null & & destination ! = null & & timeOfAnimation > 0 ) { scheduleMoves ( component , timeOfAnimation , destination ) ; } }
void test3 ( ) throws Throwable { JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem ( "q`q9gL" ) ; DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; Point point0 = defaultListCellRenderer0 . getLocation ( ) ; MoveAnimation moveAnimation0 = new MoveAnimation ( ( JComponent ) jCheckBoxMenuItem0 , point0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MoveAnimation ( JComponent component , Point destination , int timeOfAnimation ) { if ( component ! = null & & destination ! = null & & timeOfAnimation > 0 ) { scheduleMoves ( component , timeOfAnimation , destination ) ; } }
void test0 ( ) throws Throwable { SimpleBattleField simpleBattleField0 = new SimpleBattleField ( ( - 820 ) , ( - 685 ) ) ; PlayerConfiguration playerConfiguration0 = new PlayerConfiguration ( ) ; BattleStatistics battleStatistics0 = new BattleStatistics ( 3000 , 0 ) ; Map < Area , AreaStatistic > map0 = battleStatistics0 . getFieldStatistics ( ) ; BattlefieldDrawing battlefieldDrawing0 = new BattlefieldDrawing ( ( Battlefield ) simpleBattleField0 , ( Image ) null , playerConfiguration0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( PlayerDrawingDB ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SearchPanel ( PlayerDrawingDB players ) { super ( new BorderLayout ( ) ) ; JTextField input = new JTextField ( ) ; SearchAndMarkPlayers searcher = new SearchAndMarkPlayers ( players , input ) ; JButton weaponButton = new JButton ( Messages . getString ( "SearchPanel . weaponButton" ) ) ; / / $NON - NLS - 1$ weaponButton . setActionCommand ( SearchAndMarkPlayers . SearchType . WEAPON . toString ( ) ) ; weaponButton . addActionListener ( searcher ) ; JButton playerButton = new JButton ( Messages . getString ( "SearchPanel . button" ) ) ; / / $NON - NLS - 1$ playerButton . setActionCommand ( SearchAndMarkPlayers . SearchType . NAME . toString ( ) ) ; playerButton . addActionListener ( searcher ) ; / / TODO use a better LayoutManager add ( input , BorderLayout . NORTH ) ; add ( playerButton , BorderLayout . CENTER ) ; add ( weaponButton , BorderLayout . SOUTH ) ; }
void test0 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 676 ) ) ; BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 676 ) , ( - 676 ) ) ; RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; AllStatistics allStatistics0 = new AllStatistics ( combatantStatistic0 , battleStatistics0 , roundStatGenerator0 ) ; StatisticsPanel statisticsPanel0 = new StatisticsPanel ( allStatistics0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StatisticsPanel ( AllStatistics stats ) { super ( new GridLayout ( 1 , 2 , 20 , 0 ) ) ; setBorder ( BorderFactory . createEmptyBorder ( 4 , 16 , 8 , 16 ) ) ; JPanel teamStats = createTeamStatsPanel ( stats ) ; JPanel playerStats = createCombatantStatsPanel ( stats ) ; add ( teamStats ) ; add ( playerStats ) ; }
void test1 ( ) throws Throwable { JTable jTable0 = new JTable ( 312 , 312 ) ; DefaultTableModel defaultTableModel0 = ( DefaultTableModel ) jTable0 . getModel ( ) ; ListPopup listPopup0 = new ListPopup ( "K1m^J6j ] J" , ( TableModel ) defaultTableModel0 , ( TableModel ) defaultTableModel0 , ( Container ) jTable0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = ( DefaultTableColumnModel ) jTable0 . getColumnModel ( ) ; listPopup0 . setColumnWidths ( ( TableColumnModel ) defaultTableColumnModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setColumnWidths ( TableColumnModel columnModel ) { for ( int i = 0 ; i < columnModel . getColumnCount ( ) ; i + + ) { columnModel . getColumn ( i ) . sizeWidthToFit ( ) ; } }
void test0 ( ) throws Throwable { CritTableModel critTableModel0 = new CritTableModel ( ( List < CriticalHit > ) null ) ; critTableModel0 . findColumn ( " > & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 6 ; }
void test1 ( ) throws Throwable { TableRowSorter < CritTableModel > tableRowSorter0 = new TableRowSorter < CritTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; CritTableModel critTableModel0 = new CritTableModel ( list0 ) ; tableRowSorter0 . setModel ( critTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 6 ; }
void test2 ( ) throws Throwable { CritTableModel critTableModel0 = new CritTableModel ( ( List < CriticalHit > ) null ) ; String string0 = critTableModel0 . getColumnName ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { String name ; switch ( column ) { case 0 : name = "" ; break ; case 1 : name = Messages . getString ( "StatisticsPanel . Crits . Round" ) ; break ; case 2 : case 4 : name = Messages . getString ( "StatisticsPanel . Swaps . Player" ) ; break ; case 3 : case 5 : name = Messages . getString ( "StatisticsPanel . Swaps . HP" ) ; break ; default : name = super . getColumnName ( column ) ; } return name ; }
void test3 ( ) throws Throwable { CritTableModel critTableModel0 = new CritTableModel ( ( List < CriticalHit > ) null ) ; Class < ? > class0 = critTableModel0 . getColumnClass ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? > getColumnClass ( int columnIndex ) { Class < ? > result ; switch ( columnIndex ) { case 0 : case 1 : case 3 : case 5 : result = Integer . class ; break ; case 2 : case 4 : result = String . class ; break ; default : result = super . getColumnClass ( columnIndex ) ; } return result ; }
void test5 ( ) throws Throwable { LinkedList < CriticalHit > linkedList0 = new LinkedList < CriticalHit > ( ) ; CritTableModel critTableModel0 = new CritTableModel ( ( List < CriticalHit > ) linkedList0 ) ; linkedList0 . add ( ( CriticalHit ) null ) ; Object object0 = critTableModel0 . getValueAt ( 0 , 1393 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int rowIndex , int columnIndex ) { PositionSwitch swap = swaps . get ( rowIndex ) ; Object result ; switch ( columnIndex ) { case 0 : result = Integer . valueOf ( rowIndex + 1 ) ; break ; case 1 : result = Integer . valueOf ( swap . round ) ; break ; case 2 : result = swap . player1 . getName ( ) ; break ; case 3 : result = swap . health1 ; break ; case 4 : result = swap . player2 . getName ( ) ; break ; case 5 : result = swap . health2 ; break ; default : result = null ; } return result ; }
void test0 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 4 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( " . T_3L" , " . T_3L" , " . T_3L" , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Icon createIcon ( ) { return new ImageIcon ( image ) ; }
void test1 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 5 ] ; String [ ] stringArray0 = new String [ 15 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , doubleArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) ; / * * * @return the name of this weapon ( not < code > null < / code > ) * / String name ( ) ; / * * * @return the minimum damage which can be achieved with this weapon ( not * negative ) * / int minDamage ( ) ; / * * * @return the maximum possible damage which can be achieved with this * weapon ( greater or equal to { @link #minDamage ( ) }
void test2 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 5 ] ; String [ ] stringArray0 = new String [ 15 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , doubleArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test3 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 5 ] ; String [ ] stringArray0 = new String [ 15 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , doubleArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test4 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 5 ] ; String [ ] stringArray0 = new String [ 15 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , doubleArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) ; / * * * @return the sector this area belongs to ( never null ) * / Sector getSector ( ) ; / * * * @param combatant * for whome the bonus should be calculated * @return the amount of bonus for the given combatant in this area * / SectorBonus getSectorBonus ( Combatant combatant ) ; }
void test5 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 5 ] ; String [ ] stringArray0 = new String [ 15 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , doubleArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test7 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 4 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( " . T_3L" , " . T_3L" , " . T_3L" , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) ; / * * * @return the amount of { @link Area }
void test8 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 5 ] ; String [ ] stringArray0 = new String [ 15 ] ; StatisticDiagramm statisticDiagramm0 = new StatisticDiagramm ( "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , "'@NO^ ? N^ < < ) 90UU ; " , doubleArray0 , stringArray0 ) ; statisticDiagramm0 . setBounds ( ( - 14 ) , ( - 14 ) , ( - 14 ) , 0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) statisticDiagramm0 , 0 , ( long ) 0 , 0 , 0 , 0 , 0 , false , 0 ) ; statisticDiagramm0 . componentResized ( ( ComponentEvent ) mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentResized ( ComponentEvent event ) { / / create image for new size image = generateImage ( ) ; }
void test0 ( ) throws Throwable { TableRowSorter < SwapTableModel > tableRowSorter0 = new TableRowSorter < SwapTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; SwapTableModel swapTableModel0 = new SwapTableModel ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 6 ; }
void test1 ( ) throws Throwable { TableRowSorter < SwapTableModel > tableRowSorter0 = new TableRowSorter < SwapTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; SwapTableModel swapTableModel0 = new SwapTableModel ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 6 ; }
void test2 ( ) throws Throwable { TableRowSorter < SwapTableModel > tableRowSorter0 = new TableRowSorter < SwapTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; SwapTableModel swapTableModel0 = new SwapTableModel ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { String name ; switch ( column ) { case 0 : name = "" ; break ; case 1 : name = Messages . getString ( "StatisticsPanel . Crits . Round" ) ; break ; case 2 : case 4 : name = Messages . getString ( "StatisticsPanel . Swaps . Player" ) ; break ; case 3 : case 5 : name = Messages . getString ( "StatisticsPanel . Swaps . HP" ) ; break ; default : name = super . getColumnName ( column ) ; } return name ; }
void test3 ( ) throws Throwable { TableRowSorter < SwapTableModel > tableRowSorter0 = new TableRowSorter < SwapTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; SwapTableModel swapTableModel0 = new SwapTableModel ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? > getColumnClass ( int columnIndex ) { Class < ? > result ; switch ( columnIndex ) { case 0 : case 1 : case 3 : case 5 : result = Integer . class ; break ; case 2 : case 4 : result = String . class ; break ; default : result = super . getColumnClass ( columnIndex ) ; } return result ; }
void test4 ( ) throws Throwable { LinkedList < PositionSwitch > linkedList0 = new LinkedList < PositionSwitch > ( ) ; linkedList0 . add ( ( PositionSwitch ) null ) ; SwapTableModel swapTableModel0 = new SwapTableModel ( ( Collection < PositionSwitch > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return swaps . size ( ) ; }
void test5 ( ) throws Throwable { LinkedList < PositionSwitch > linkedList0 = new LinkedList < PositionSwitch > ( ) ; linkedList0 . add ( ( PositionSwitch ) null ) ; SwapTableModel swapTableModel0 = new SwapTableModel ( ( Collection < PositionSwitch > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return swaps . size ( ) ; }
void test0 ( ) throws Throwable { HashMap < Number , Number > hashMap0 = new HashMap < Number , Number > ( ) ; BigInteger bigInteger0 = BigInteger . ZERO ; hashMap0 . put ( ( Number ) bigInteger0 , ( Number ) bigInteger0 ) ; HealthDistributionDiagram healthDistributionDiagram0 = new HealthDistributionDiagram ( ( String ) null , ( Map < Number , ? extends Number > ) hashMap0 , ( Map < Number , ? extends Number > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HealthDistributionDiagram ( String title , Map < Number , ? extends Number > attackerLPDistData , Map < Number , ? extends Number > defenderLPDistData ) { super ( title , "health" , "percent" , createDiagramData ( attackerLPDistData . values ( ) , defenderLPDistData . values ( ) ) , createXAxisLabels ( attackerLPDistData . keySet ( ) ) ) ; }
void test0 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 13 ) ) ; BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 13 ) , ( - 13 ) ) ; RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; AllStatistics allStatistics0 = new AllStatistics ( combatantStatistic0 , battleStatistics0 , roundStatGenerator0 ) ; DataPanel dataPanel0 = new DataPanel ( allStatistics0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { LinkedList < Combatant > linkedList0 = new LinkedList < Combatant > ( ) ; TurnOrderTableModel turnOrderTableModel0 = new TurnOrderTableModel ( ( List < Combatant > ) linkedList0 ) ; String string0 = turnOrderTableModel0 . getColumnName ( 65 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { String name ; switch ( column ) { case 0 : name = "" ; break ; case 1 : name = Messages . getString ( "StatisticsPanel . Crits . Round" ) ; break ; case 2 : case 4 : name = Messages . getString ( "StatisticsPanel . Swaps . Player" ) ; break ; case 3 : case 5 : name = Messages . getString ( "StatisticsPanel . Swaps . HP" ) ; break ; default : name = super . getColumnName ( column ) ; } return name ; }
void test1 ( ) throws Throwable { TableRowSorter < TurnOrderTableModel > tableRowSorter0 = new TableRowSorter < TurnOrderTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; TurnOrderTableModel turnOrderTableModel0 = new TurnOrderTableModel ( list0 ) ; int int0 = turnOrderTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return swaps . size ( ) ; }
void test2 ( ) throws Throwable { TableRowSorter < TurnOrderTableModel > tableRowSorter0 = new TableRowSorter < TurnOrderTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; TurnOrderTableModel turnOrderTableModel0 = new TurnOrderTableModel ( list0 ) ; int int0 = turnOrderTableModel0 . findColumn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 6 ; }
void test3 ( ) throws Throwable { TurnOrderTableModel turnOrderTableModel0 = new TurnOrderTableModel ( ( List < Combatant > ) null ) ; Integer integer0 = ( Integer ) turnOrderTableModel0 . getValueAt ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int rowIndex , int columnIndex ) { PositionSwitch swap = swaps . get ( rowIndex ) ; Object result ; switch ( columnIndex ) { case 0 : result = Integer . valueOf ( rowIndex + 1 ) ; break ; case 1 : result = Integer . valueOf ( swap . round ) ; break ; case 2 : result = swap . player1 . getName ( ) ; break ; case 3 : result = swap . health1 ; break ; case 4 : result = swap . player2 . getName ( ) ; break ; case 5 : result = swap . health2 ; break ; default : result = null ; } return result ; }
void test3 ( ) throws Throwable { LinkedList < Combatant > linkedList0 = new LinkedList < Combatant > ( ) ; CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher ( ( Collection < Combatant > ) linkedList0 ) ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 467 , true , true , 467 , 50 , true , 467 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( 1231 , 760 , ( Sector ) simpleSector0 ) ; combatantEventDispatcher0 . hasMoved ( ( Combatant ) null , ( Area ) simpleArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOccupied ( ) ; / * * * @return the { @link Combatant }
void test10 ( ) throws Throwable { LinkedList < Combatant > linkedList0 = new LinkedList < Combatant > ( ) ; CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher ( ( Collection < Combatant > ) linkedList0 ) ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 467 , true , true , 467 , 50 , true , 467 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( 1231 , 760 , ( Sector ) simpleSector0 ) ; combatantEventDispatcher0 . newDestination ( ( Combatant ) null , ( Area ) simpleArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; int int0 = battleplan0 . numberOfRounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRounds ( ) { return rounds . size ( ) ; }
void test2 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; battleplan0 . resetToRound ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRounds ( ) { return rounds . size ( ) ; }
void test3 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreRounds ( int roundNo ) { return ! getRemainingRounds ( roundNo ) . isEmpty ( ) ; }
void test4 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Vector < CombatantTurn > vector0 = new Vector < CombatantTurn > ( ) ; Round round0 = new Round ( 3000 , ( Map < Combatant , CombatantState > ) null , ( List < CombatantTurn > ) vector0 ) ; linkedList0 . add ( round0 ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void resetToRound ( int roundNo ) { if ( hasRoundNo ( roundNo ) ) { getRound ( roundNo ) . setInitialState ( ) ; } }
void test5 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Vector < CombatantTurn > vector0 = new Vector < CombatantTurn > ( ) ; Round round0 = new Round ( 3000 , ( Map < Combatant , CombatantState > ) null , ( List < CombatantTurn > ) vector0 ) ; linkedList0 . add ( round0 ) ; linkedList0 . add ( round0 ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRounds ( ) { return rounds . size ( ) ; }
void test6 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Vector < CombatantTurn > vector0 = new Vector < CombatantTurn > ( ) ; Round round0 = new Round ( 3000 , ( Map < Combatant , CombatantState > ) null , ( List < CombatantTurn > ) vector0 ) ; linkedList0 . add ( round0 ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreRounds ( int roundNo ) { return ! getRemainingRounds ( roundNo ) . isEmpty ( ) ; }
void test8 ( ) throws Throwable { LinkedList < Round > linkedList0 = new LinkedList < Round > ( ) ; Vector < CombatantTurn > vector0 = new Vector < CombatantTurn > ( ) ; Round round0 = new Round ( 3000 , ( Map < Combatant , CombatantState > ) null , ( List < CombatantTurn > ) vector0 ) ; linkedList0 . add ( round0 ) ; Battleplan battleplan0 = new Battleplan ( ( Collection < Round > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRounds ( ) { return rounds . size ( ) ; }
void test0 ( ) throws Throwable { PlayerConfiguration playerConfiguration0 = new PlayerConfiguration ( ) ; playerConfiguration0 . lock ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStopped ( ) { return state = = PlayerState . STOP ; }
void test2 ( ) throws Throwable { PlayerConfiguration playerConfiguration0 = PlayerConfiguration . NO_DELAY ; PlayerConfiguration playerConfiguration1 = new PlayerConfiguration ( ) ; playerConfiguration0 . copy ( ) ; playerConfiguration0 . isPlaying ( ) ; PlayerState playerState0 = PlayerState . PLAY ; playerConfiguration1 . setState ( playerState0 ) ; PlayerConfiguration playerConfiguration2 = new PlayerConfiguration ( ) ; PlayerState playerState1 = PlayerState . STOP ; playerConfiguration2 . isStopped ( ) ; playerConfiguration1 . setState ( playerState1 ) ; PlayerConfiguration playerConfiguration3 = new PlayerConfiguration ( ) ; playerConfiguration2 . showMoveTargets ( ) ; playerConfiguration3 . PLAYER_DELAY = 1 ; playerConfiguration3 . showShootline ( ) ; PlayerConfiguration playerConfiguration4 = new PlayerConfiguration ( ) ; playerConfiguration3 . setTo ( playerConfiguration4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showMoveTargets ( ) { return SHOW_MOVETARGETS ; }
void test4 ( ) throws Throwable { PlayerConfiguration playerConfiguration0 = new PlayerConfiguration ( ) ; playerConfiguration0 . setShowMoveTargets ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStopped ( ) { return state = = PlayerState . STOP ; }
void test6 ( ) throws Throwable { PlayerConfiguration playerConfiguration0 = new PlayerConfiguration ( ) ; playerConfiguration0 . setShowShootline ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showMoveTargets ( ) { return SHOW_MOVETARGETS ; }
void test1 ( ) throws Throwable { OnlineAction onlineAction0 = new OnlineAction ( ( Combatant ) null , false ) ; String string0 = onlineAction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test2 ( ) throws Throwable { OnlineAction onlineAction0 = new OnlineAction ( ( Combatant ) null , true ) ; String string0 = onlineAction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 1669 ) , true , true , ( - 1669 ) , 1118719 , true , 16716049 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 1669 ) , 16716049 , ( Sector ) simpleSector0 ) ; MoveAction moveAction0 = new MoveAction ( ( Combatant ) null , ( Area ) simpleArea0 ) ; String string0 = moveAction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { HitAction hitAction0 = new HitAction ( ( Combatant ) null , 1 ) ; String string0 = hitAction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { OnlineAction onlineAction0 = new OnlineAction ( ( Combatant ) null , true ) ; Combatant combatant0 = onlineAction0 . getActor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Combatant getActor ( ) ; }
void test0 ( ) throws Throwable { AimAction aimAction0 = new AimAction ( ( Combatant ) null , ( Combatant ) null ) ; Combatant combatant0 = aimAction0 . getActor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Combatant getActor ( ) ; }
void test1 ( ) throws Throwable { AimAction aimAction0 = new AimAction ( ( Combatant ) null , ( Combatant ) null ) ; String string0 = aimAction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 1669 ) , true , true , ( - 1669 ) , 1118719 , true , 16716049 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 1669 ) , 16716049 , ( Sector ) simpleSector0 ) ; TargetAction targetAction0 = new TargetAction ( ( Combatant ) null , ( Area ) simpleArea0 ) ; String string0 = targetAction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { LogType logType0 = LogType . KILLED ; HashMap < Integer , Area > hashMap0 = new HashMap < Integer , Area > ( ) ; HitAction hitAction0 = ( HitAction ) logType0 . parse ( 0 , ( Combatant ) null , ( Map < Integer , Area > ) hashMap0 , ( Map < Integer , Combatant > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { LogType logType0 = LogType . ROUNDSTART ; BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 1132 ) , ( - 1132 ) ) ; Map < ? , ? > map0 = battleStatistics0 . getNotShootersPerRound ( ) ; Action action0 = logType0 . parse ( ( - 1132 ) , ( Combatant ) null , map0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Action parse ( int value , Combatant player , Map < Integer , Area > areas , Map < Integer , Combatant > players ) ; }
void test2 ( ) throws Throwable { LogType logType0 = LogType . CHARTURN ; BattleStatistics battleStatistics0 = new BattleStatistics ( 0 , 0 ) ; Map < ? , ? > map0 = battleStatistics0 . getShotsPerRound ( ) ; Action action0 = logType0 . parse ( 0 , ( Combatant ) null , map0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Action parse ( int value , Combatant player , Map < Integer , Area > areas , Map < Integer , Combatant > players ) ; }
void test3 ( ) throws Throwable { LogType logType0 = LogType . CHARTARGET ; HashMap < Integer , Area > hashMap0 = new HashMap < Integer , Area > ( ) ; BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 16 ) , ( - 16 ) ) ; Map < ? , ? > map0 = battleStatistics0 . getNotShootersPerRound ( ) ; TargetAction targetAction0 = ( TargetAction ) logType0 . parse ( ( - 16 ) , ( Combatant ) null , ( Map < Integer , Area > ) hashMap0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test4 ( ) throws Throwable { LogType logType0 = LogType . CHARHEALTH ; BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 256 ) , ( - 256 ) ) ; Map < ? , ? > map0 = battleStatistics0 . getShotsPerRound ( ) ; Action action0 = logType0 . parse ( ( - 256 ) , ( Combatant ) null , map0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Action parse ( int value , Combatant player , Map < Integer , Area > areas , Map < Integer , Combatant > players ) ; }
void test5 ( ) throws Throwable { LogType logType0 = LogType . CHARONLINE ; BattleStatistics battleStatistics0 = new BattleStatistics ( 0 , 0 ) ; Map < ? , ? > map0 = battleStatistics0 . getShotsPerRound ( ) ; OnlineAction onlineAction0 = ( OnlineAction ) logType0 . parse ( 50 , ( Combatant ) null , ( Map < Integer , Area > ) null , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test6 ( ) throws Throwable { LogType logType0 = LogType . CHARONLINE ; DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer ( ) ; FontUIResource fontUIResource0 = ( FontUIResource ) defaultTableCellRenderer0 . getFont ( ) ; Map < ? , ? > map0 = fontUIResource0 . getAttributes ( ) ; OnlineAction onlineAction0 = ( OnlineAction ) logType0 . parse ( 1 , ( Combatant ) null , map0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test7 ( ) throws Throwable { LogType logType0 = LogType . SHOOTAT ; StyleContext styleContext0 = new StyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; JTextPane jTextPane0 = new JTextPane ( ( StyledDocument ) defaultStyledDocument0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jTextPane0 . getFont ( ) ; Map < ? , ? > map0 = fontUIResource0 . getAttributes ( ) ; logType0 . parse ( 17 , ( Combatant ) null , map0 , map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = battleStatistics0 . totalSwaps ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test1 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test2 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test3 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 0 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( ( - 928 ) , "R8sF - @c$ ( > / ^B" , 0 , 1779 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 0 , "R8sF - @c$ ( > / ^B" , characterClass0 , ( Weapon ) simpleWeapon0 , "R8sF - @c$ ( > / ^B" ) ; battleStatistics0 . isAlive ( ( Combatant ) simpleCombatant0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CharacterClass getCharacterClass ( ) ; / * * * @return the { @link SectorBonus }
void test4 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 16 ) , ( - 16 ) ) ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( 0 , true , true , ( - 16 ) , 0 , true , ( - 16 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 16 ) , 1 , ( Sector ) simpleSector0 ) ; battleStatistics0 . newDestination ( ( Combatant ) null , ( Area ) simpleArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test5 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test6 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test7 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 17 ) , ( - 17 ) ) ; Map < ? , ? > map0 = battleStatistics0 . getShotsPerRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test8 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; Map < ? , ? > map0 = battleStatistics0 . getHitsPerRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test10 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = battleStatistics0 . criticalHits ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test11 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 0 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( ( - 928 ) , "R8sF - @c$ ( > / ^B" , 0 , 1779 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 0 , "R8sF - @c$ ( > / ^B" , characterClass0 , ( Weapon ) simpleWeapon0 , "R8sF - @c$ ( > / ^B" ) ; battleStatistics0 . isHit ( ( Combatant ) simpleCombatant0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the additional damage this item adds to the maximum damage of a * weapon ( can also be negative ) * / int additionalMaxDamage ( ) ; / * * * @return the additional damage this item adds to the minimum damage of a * weapon ( can also be negative ) * / int additionalMinDamage ( ) ; }
void test12 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 0 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( ( - 928 ) , "R8sF - @c$ ( > / ^B" , 0 , 1779 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 0 , "R8sF - @c$ ( > / ^B" , characterClass0 , ( Weapon ) simpleWeapon0 , "R8sF - @c$ ( > / ^B" ) ; battleStatistics0 . aimsAt ( ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; battleStatistics0 . aimsAt ( ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test13 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 788 ) , ( - 788 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = battleStatistics0 . amountOfDefenseBonus ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int amountOfDefenseBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of moves done by a combatant of the given side * in the hole battle * / double numberOfMovesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of combatants whose player was never online during the * whole battle * / int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test14 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 0 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( ( - 928 ) , "R8sF - @c$ ( > / ^B" , 0 , 1779 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 0 , "R8sF - @c$ ( > / ^B" , characterClass0 , ( Weapon ) simpleWeapon0 , "R8sF - @c$ ( > / ^B" ) ; battleStatistics0 . criticalShot ( ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 , 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test15 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( 2 , 2 ) ; Map < Area , AreaStatistic > map0 = battleStatistics0 . getFieldStatistics ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test16 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 16 ) , ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test17 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int percentAbleToShoot ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return sum of bonuses for all players of the given side * / int amountOfAttackBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return sum of bonuses for all players of the given side * / int amountOfDefenseBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of moves done by a combatant of the given side * in the hole battle * / double numberOfMovesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of combatants whose player was never online during the * whole battle * / int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test19 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 16 ) , ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test20 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( 618 , 618 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = battleStatistics0 . amountOfAttackBonus ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int amountOfAttackBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return sum of bonuses for all players of the given side * / int amountOfDefenseBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of moves done by a combatant of the given side * in the hole battle * / double numberOfMovesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of combatants whose player was never online during the * whole battle * / int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test22 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int percentAbleToShoot ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return sum of bonuses for all players of the given side * / int amountOfAttackBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return sum of bonuses for all players of the given side * / int amountOfDefenseBonus ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of moves done by a combatant of the given side * in the hole battle * / double numberOfMovesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of combatants whose player was never online during the * whole battle * / int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test23 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 788 ) , ( - 788 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double numberOfMovesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of combatants whose player was never online during the * whole battle * / int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test24 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( 2 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double numberOfMovesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of combatants whose player was never online during the * whole battle * / int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test25 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfOffliners ( CombatantSide side ) ; / * * * @param side * @return the number of swaps for the whole battle ( players changing * positions directly ) * / int totalSwaps ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average round in which a player appeared online ( only * counting onliners ) * / double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test26 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double roundsTillOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of rounds a player was online * / double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test27 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test28 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageRoundsOnline ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the name of the combatant at whom were fired the most shots with * number of shots * / String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test29 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; battleStatistics0 . setRound ( 75 ) ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 0 , ( Area ) simpleArea0 , true ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( ( - 928 ) , "R8sF - @c$ ( > / ^B" , 0 , 1779 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 0 , "R8sF - @c$ ( > / ^B" , characterClass0 , ( Weapon ) simpleWeapon0 , "R8sF - @c$ ( > / ^B" ) ; battleStatistics0 . isOnline ( ( Combatant ) simpleCombatant0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CombatantSide getSide ( ) ; / * * * @return < code > true < / code > if the player of this combatant is currently * online * / boolean isOnline ( ) ; / * * * internal method used in the gui * * @return the amount of HPs ( may be negative ! ) * / int _health ( ) ; / * * * internal method used in the gui * * @return the maximum amount of HPs * / int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test30 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test31 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String targetNoOne ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of critical hits for the given side * / int criticalHits ( CombatantSide side ) ; / * * * Gives the cumulated value of all critical damages above the weapons * normal damage . So this is the pure bonus of the critical hit . * * @param side * @return the total critical damage without the normal weapon damage for * the given side * / long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test32 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test33 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test34 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 928 ) , ( - 928 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . WORKER ; SimpleSector simpleSector0 = new SimpleSector ( 0 , false , false , 0 , 0 , true , 0 , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( Point ) null , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , 0 , ( Area ) simpleArea0 , false ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( ( - 928 ) , "R8sF - @c$ ( > / ^B" , 0 , 1779 ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , 0 , "R8sF - @c$ ( > / ^B" , characterClass0 , ( Weapon ) simpleWeapon0 , "R8sF - @c$ ( > / ^B" ) ; battleStatistics0 . hasSwappedPosition ( ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int _maxHealth ( ) ; / * * * internal method for jumping to a given round . This method has to fire * { @link ComponentEvent }
void test35 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 788 ) , ( - 788 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; Set < PositionSwitch > set0 = battleStatistics0 . switchedPosList ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test36 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 788 ) , ( - 788 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long criticalHitDamage ( CombatantSide side ) ; / * * * @param side * @return all critical hits of the given side * / List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test37 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( 2 , 2 ) ; List < CriticalHit > list0 = battleStatistics0 . critList ( ( CombatantSide ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < CriticalHit > critList ( CombatantSide side ) ; / * * * @param side * @return all switched positions * / Set < PositionSwitch > switchedPosList ( CombatantSide side ) ; / * * * @param side * @return the number of used bayonets for the given side * / int numberOfBayonets ( CombatantSide side ) ; / * * * @param side * @return the number of used graphit lubricant for the given side * / int numberOfGraphitLubricants ( CombatantSide side ) ; / * * * @param side * @return the number of used greasing weapon oil for the given side * / int numberOfFettesOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shimmering weapon oil for the given side * / int numberOfSchmierOil ( CombatantSide side ) ; / * * * @param side * @return the number of used shiny weapon oil for the given side * / int numberOfShinyOil ( CombatantSide side ) ; / * * * @param side * @return the number of used loading chambers and enhanced patrons for the * given side * / int numberOfLoadingChamerOrEnhancedPatrons ( CombatantSide side ) ; / * * * @param side * @return the number of used hip flaks for the given side * / int numberOfHipFlasks ( CombatantSide side ) ; / * * * @param side * if null all will be returned * @return all combatants in the order of the first round * / List < Combatant > turnOrder ( CombatantSide side ) ; / * * * @return the number of shots per round * / Map < CombatantSide , ? extends LabeledData > getShotsPerRound ( ) ; / * * * @return the number of hits per round * / Map < CombatantSide , ? extends LabeledData > getHitsPerRound ( ) ; / * * * @return the number of players not shooting per round * / Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test38 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( ( - 1862 ) , ( - 1862 ) ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; List < Combatant > list0 = battleStatistics0 . turnOrder ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void turnOrder ( DynamicStatistics stats2 ) { List < Combatant > attackers = stats2 . turnOrder ( CombatantSide . ATTACKER ) ; List < Combatant > defenders = stats2 . turnOrder ( CombatantSide . DEFENDER ) ; TurnOrderTableModel attackerModel = new TurnOrderTableModel ( attackers ) ; TurnOrderTableModel defenderModel = new TurnOrderTableModel ( defenders ) ; add ( turnOrderTableButton ( "DataPanel . TurnOrder" , attackerModel , defenderModel ) ) ; }
void test39 ( ) throws Throwable { BattleStatistics battleStatistics0 = new BattleStatistics ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < CombatantSide , ? extends LabeledData > getNotShootersPerRound ( ) ; / * * * @return statistics for every field * / Map < Area , AreaStatistic > getFieldStatistics ( ) ; }
void test4 ( ) throws Throwable { AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter ( ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = allCombatantSidesCounter0 . getSideValue ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSideValue ( CombatantSide side ) { if ( side = = null ) { int sum = 0 ; for ( Counter counter : perSideCounters . values ( ) ) { sum + = counter . getValue ( ) ; } return sum ; } return perSideCounters . get ( side ) . getValue ( ) ; }
void test5 ( ) throws Throwable { AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSideValue ( CombatantSide side ) { if ( side = = null ) { int sum = 0 ; for ( Counter counter : perSideCounters . values ( ) ) { sum + = counter . getValue ( ) ; } return sum ; } return perSideCounters . get ( side ) . getValue ( ) ; }
void test0 ( ) throws Throwable { DataAggregationType dataAggregationType0 = DataAggregationType . AVERAGE ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; linkedList0 . add ( ( Integer ) 7 ) ; double double0 = dataAggregationType0 . aggregate ( ( List < Integer > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double aggregate ( CombatantStatType stat , CombatantSide side , DataAggregationType function ) { / / some data may not be present in old logs ( ie . since 1 . 29 charlevel / / and charclass were added ) if ( ! allData . containsKey ( stat ) ) { return 0 ; } DataSet statData = allData . get ( stat ) ; assert statData ! = null : "data must be present ! " ; return statData . aggregate ( side , function ) ; }
void test1 ( ) throws Throwable { DataAggregationType dataAggregationType0 = DataAggregationType . POSITIVE_AVERAGE ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; linkedList0 . add ( ( Integer ) ( - 256 ) ) ; linkedList0 . add ( ( Integer ) 1 ) ; double double0 = dataAggregationType0 . aggregate ( ( List < Integer > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double aggregate ( CombatantStatType stat , CombatantSide side , DataAggregationType function ) { / / some data may not be present in old logs ( ie . since 1 . 29 charlevel / / and charclass were added ) if ( ! allData . containsKey ( stat ) ) { return 0 ; } DataSet statData = allData . get ( stat ) ; assert statData ! = null : "data must be present ! " ; return statData . aggregate ( side , function ) ; }
void test2 ( ) throws Throwable { DataAggregationType dataAggregationType0 = DataAggregationType . AVERAGE ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; double double0 = dataAggregationType0 . aggregate ( ( List < Integer > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double aggregate ( CombatantStatType stat , CombatantSide side , DataAggregationType function ) { / / some data may not be present in old logs ( ie . since 1 . 29 charlevel / / and charclass were added ) if ( ! allData . containsKey ( stat ) ) { return 0 ; } DataSet statData = allData . get ( stat ) ; assert statData ! = null : "data must be present ! " ; return statData . aggregate ( side , function ) ; }
void test3 ( ) throws Throwable { DataAggregationType dataAggregationType0 = DataAggregationType . POSITIVE_AVERAGE ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; double double0 = dataAggregationType0 . aggregate ( ( List < Integer > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double aggregate ( CombatantStatType stat , CombatantSide side , DataAggregationType function ) { / / some data may not be present in old logs ( ie . since 1 . 29 charlevel / / and charclass were added ) if ( ! allData . containsKey ( stat ) ) { return 0 ; } DataSet statData = allData . get ( stat ) ; assert statData ! = null : "data must be present ! " ; return statData . aggregate ( side , function ) ; }
void test0 ( ) throws Throwable { RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; Hashtable < Combatant , CombatantState > hashtable0 = new Hashtable < Combatant , CombatantState > ( ) ; roundStatGenerator0 . addRoundState ( ( Map < Combatant , CombatantState > ) hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRoundState ( Map < Combatant , CombatantState > combatantStates ) { / / TODO this may be optimized to iterate only once through the states createRoundStat ( combatantStates , new HealthAggregator ( ) , health ) ; createRoundStat ( combatantStates , new LivingCombatantAggregator ( ) , count ) ; }
void test1 ( ) throws Throwable { RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < CombatantSide , LabeledData > getLivingCounts ( ) { return count ; }
void test2 ( ) throws Throwable { RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < CombatantSide , LabeledData > getHealthAmount ( ) { return health ; }
void test0 ( ) throws Throwable { WeaponModCounter . FettesOilCounter weaponModCounter_FettesOilCounter0 = new WeaponModCounter . FettesOilCounter ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "l ! { su / Osi & ObdnMyq1" , 0 , 0 ) ; boolean boolean0 = weaponModCounter_FettesOilCounter0 . counts ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean counts ( Weapon w ) ; class BayonetCounter extends WeaponModCounter { / * * * @see de . outstare . fortbattleplayer . statistics . WeaponModCounter#counts ( de . outstare . fortbattleplayer . model . Weapon ) * / @Override boolean counts ( Weapon w ) { return data . hasBayonet ( w ) ; } }
void test1 ( ) throws Throwable { WeaponModCounter . SchmierOilCounter weaponModCounter_SchmierOilCounter0 = new WeaponModCounter . SchmierOilCounter ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "xGU2esP ? , ; zm" , 0 , 0 ) ; boolean boolean0 = weaponModCounter_SchmierOilCounter0 . counts ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean counts ( Weapon w ) ; class BayonetCounter extends WeaponModCounter { / * * * @see de . outstare . fortbattleplayer . statistics . WeaponModCounter#counts ( de . outstare . fortbattleplayer . model . Weapon ) * / @Override boolean counts ( Weapon w ) { return data . hasBayonet ( w ) ; } }
void test2 ( ) throws Throwable { WeaponModCounter . LoadingchamberOrEnhancedPatronsCounter weaponModCounter_LoadingchamberOrEnhancedPatronsCounter0 = new WeaponModCounter . LoadingchamberOrEnhancedPatronsCounter ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 479 , "E9uByDr1" , 479 , 479 ) ; boolean boolean0 = weaponModCounter_LoadingchamberOrEnhancedPatronsCounter0 . counts ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean counts ( Weapon w ) ; class BayonetCounter extends WeaponModCounter { / * * * @see de . outstare . fortbattleplayer . statistics . WeaponModCounter#counts ( de . outstare . fortbattleplayer . model . Weapon ) * / @Override boolean counts ( Weapon w ) { return data . hasBayonet ( w ) ; } }
void test3 ( ) throws Throwable { WeaponModCounter . BayonetCounter weaponModCounter_BayonetCounter0 = new WeaponModCounter . BayonetCounter ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "" , 0 , 0 ) ; boolean boolean0 = weaponModCounter_BayonetCounter0 . counts ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean counts ( Weapon w ) ; class BayonetCounter extends WeaponModCounter { / * * * @see de . outstare . fortbattleplayer . statistics . WeaponModCounter#counts ( de . outstare . fortbattleplayer . model . Weapon ) * / @Override boolean counts ( Weapon w ) { return data . hasBayonet ( w ) ; } }
void test4 ( ) throws Throwable { WeaponModCounter . ShinyOilCounter weaponModCounter_ShinyOilCounter0 = new WeaponModCounter . ShinyOilCounter ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "" , 0 , 0 ) ; boolean boolean0 = weaponModCounter_ShinyOilCounter0 . counts ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean counts ( Weapon w ) ; class BayonetCounter extends WeaponModCounter { / * * * @see de . outstare . fortbattleplayer . statistics . WeaponModCounter#counts ( de . outstare . fortbattleplayer . model . Weapon ) * / @Override boolean counts ( Weapon w ) { return data . hasBayonet ( w ) ; } }
void test5 ( ) throws Throwable { WeaponModCounter . HipFlaskCounter weaponModCounter_HipFlaskCounter0 = new WeaponModCounter . HipFlaskCounter ( ) ; SimpleWeapon simpleWeapon0 = new SimpleWeapon ( 0 , "vOt | K ? ? " , 1753 , 1753 ) ; boolean boolean0 = weaponModCounter_HipFlaskCounter0 . counts ( ( Weapon ) simpleWeapon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean counts ( Weapon w ) ; class BayonetCounter extends WeaponModCounter { / * * * @see de . outstare . fortbattleplayer . statistics . WeaponModCounter#counts ( de . outstare . fortbattleplayer . model . Weapon ) * / @Override boolean counts ( Weapon w ) { return data . hasBayonet ( w ) ; } }
void test0 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 2025 ) ) ; RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator ( ) ; AllStatistics allStatistics0 = new AllStatistics ( combatantStatistic0 , ( BattleStatistics ) null , roundStatGenerator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AllStatistics ( CombatantStatistic combatant , BattleStatistics battle , RoundStatGenerator rounds ) { this . combatant = combatant ; this . battle = battle ; this . rounds = rounds ; }
void test0 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; int int0 = areaStatistic0 . getCrits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; int int0 = areaStatistic0 . getShots ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test2 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; areaStatistic0 . addCrit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test3 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; areaStatistic0 . getField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test4 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; areaStatistic0 . addShot ( ) ; String string0 = areaStatistic0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShots ( ) { return shots ; }
void test5 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; int int0 = areaStatistic0 . getHits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test6 ( ) throws Throwable { AreaStatistic areaStatistic0 = new AreaStatistic ( ( Area ) null ) ; areaStatistic0 . addHit ( ) ; String string0 = areaStatistic0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHits ( ) { return hits ; }
void test0 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 13992 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . hitsPerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test1 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 6 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . dodgesWholeSide ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test2 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 309 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . averageHitDamage ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test3 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = combatantStatistic0 . maxPossibleHealthWholeSide ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test4 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 309 ) ) ; CombatantStatType combatantStatType0 = CombatantStatType . hitcount ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; combatantStatistic0 . addData ( combatantStatType0 , combatantSide0 , ( - 309 ) ) ; double double0 = combatantStatistic0 . averageHitDamage ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test5 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 120 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . endHealthWholeSide ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test6 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 1249 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . survivedPlayers ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int survivedPlayers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class adventurer for the given * side , or all players if no side is given * / int numberOfAdventurers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class duelant for the given side , * or all players if no side is given * / int numberOfDuelants ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres without a class for the given side , or all * players if no side is given * / int numberOfGreenhorns ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class soldier for the given side , * or all players if no side is given * / int numberOfSoldiers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class worker for the given side , * or all players if no side is given * / int numberOfWorkers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average level of a combatant for the given side * / double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test7 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 302 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . initialHealthWholeSide ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test8 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = combatantStatistic0 . endHealthPerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test9 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 302 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . numberOfDuelants ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfDuelants ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres without a class for the given side , or all * players if no side is given * / int numberOfGreenhorns ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class soldier for the given side , * or all players if no side is given * / int numberOfSoldiers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class worker for the given side , * or all players if no side is given * / int numberOfWorkers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average level of a combatant for the given side * / double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test10 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 28 ) ) ; int int0 = combatantStatistic0 . shotsFiredWholeSide ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test11 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 28 ) ) ; int int0 = combatantStatistic0 . takenDamageWholeSide ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test12 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 120 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . numberOfGreenhorns ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfGreenhorns ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class soldier for the given side , * or all players if no side is given * / int numberOfSoldiers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class worker for the given side , * or all players if no side is given * / int numberOfWorkers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average level of a combatant for the given side * / double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test13 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 6 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . numberOfSoldiers ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfSoldiers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class worker for the given side , * or all players if no side is given * / int numberOfWorkers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average level of a combatant for the given side * / double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test14 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 1249 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . dodgesPerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test15 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; int int0 = combatantStatistic0 . numberOfWorkers ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfWorkers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average level of a combatant for the given side * / double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test16 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; double double0 = combatantStatistic0 . shotsFiredPerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test17 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 120 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; int int0 = combatantStatistic0 . maxPossibleHealthPerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test18 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 28 ) ) ; double double0 = combatantStatistic0 . averageLevel ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test19 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 28 ) ) ; SortedMap < Number , Double > sortedMap0 = combatantStatistic0 . healthDistributionRelative ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test20 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 120 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . takenDamagePerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test21 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 309 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . causedDamagePerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test22 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 6 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . initialHealthPerPlayer ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test23 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( ( - 1249 ) ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CombatantStatType combatantStatType0 = CombatantStatType . charclass ; combatantStatistic0 . addData ( combatantStatType0 , combatantSide0 , ( - 1249 ) ) ; int int0 = combatantStatistic0 . numberOfAdventurers ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfAdventurers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class duelant for the given side , * or all players if no side is given * / int numberOfDuelants ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres without a class for the given side , or all * players if no side is given * / int numberOfGreenhorns ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class soldier for the given side , * or all players if no side is given * / int numberOfSoldiers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of playeres with the class worker for the given side , * or all players if no side is given * / int numberOfWorkers ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average level of a combatant for the given side * / double averageLevel ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the beginning of the * battle * / double initialHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the * beginning of the battle * / int initialHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of health of an player at the end of the * battle * / int endHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of health of all players of the given side at the end of * the battle * / int endHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average maximum health of a player of the given side at the * end of the battle * / int maxPossibleHealthPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of maximum health of all players of the given side at the * end of the battle * / int maxPossibleHealthWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage of a weapon for the given side * / double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test25 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 13992 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . averageWeaponDamage ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test26 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 6 ) ; CombatantStatType combatantStatType0 = CombatantStatType . weaponmindmg ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; combatantStatistic0 . addData ( combatantStatType0 , combatantSide0 , 6 ) ; double double0 = combatantStatistic0 . averageWeaponDamage ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageWeaponDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage done to an enemy with one hit by a single * combatant of the given side * / double averageHitDamage ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average damage dealt with one hit by one player of the given * side * / double causedDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the sum of all damage dealt by all players of the given side * / int causedDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by the given side * / int shotsFiredWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots fired by a player of the given side * / double shotsFiredPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the number of shots which hit an enemy for the given side * / int hitsWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of shots of a player which hit an enemy for * the given side * / double hitsPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average amount of damage taken by a player for the given side * / double takenDamagePerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the total amount of damage taken by a player for the given side * / int takenDamageWholeSide ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of rounds a player of the given side survived * / double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test27 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 6 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CombatantStatType combatantStatType0 = CombatantStatType . diedwhen ; combatantStatistic0 . addData ( combatantStatType0 , combatantSide0 , 0 ) ; double double0 = combatantStatistic0 . averageLifetime ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test28 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 302 ) ; CombatantSide combatantSide0 = CombatantSide . ATTACKER ; double double0 = combatantStatistic0 . averageLifetime ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double averageLifetime ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return the average number of dodges for a player of the given side * / double dodgesPerPlayer ( CombatantSide side ) ; / * * * @param side * if null the sum of all will be returned * @return number of dodges for the whole side * / int dodgesWholeSide ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the number of players . The first * value gives the upper limit of a players health . The second is the number * of players . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 2 , 2000 - > 1 , 3000 - > 0 , 4000 - > 1 < / example > * * @param side * @return a map of max healt points and the number of players within this * range * / SortedMap < Number , Number > healthDistribution ( CombatantSide side ) ; / * * * Creates a mapping of health ranges to the relative number of players . The * first value gives the upper limit of a players health . The second is the * percentage of participants . < example > Players have 500 , 600 , 1300 , 4000 LP < br > * Result will be : 1000 - > 0 . 5 , 2000 - > 0 . 25 , 3000 - > 0 , 4000 - > 0 . 25 < / example > * * @param side * @return a map of max healt points and the percentage of players within * this range * / SortedMap < Number , Double > healthDistributionRelative ( CombatantSide side ) ; }
void test29 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CombatantStatType combatantStatType0 = CombatantStatType . starthp ; combatantStatistic0 . addData ( combatantStatType0 , combatantSide0 , 0 ) ; SortedMap < Number , Number > sortedMap0 = combatantStatistic0 . healthDistribution ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void healthDistribution ( StaticStatistics stats ) { Map < Number , ? extends Number > attackerLPDistData = stats . healthDistributionRelative ( CombatantSide . ATTACKER ) ; Map < Number , ? extends Number > defenderLPDistData = stats . healthDistributionRelative ( CombatantSide . DEFENDER ) ; StatisticDiagramm hpDistDiagram = new HealthDistributionDiagram ( Messages . getString ( "StatisticsPanel . healthDistributionTitle" ) , attackerLPDistData , defenderLPDistData ) ; add ( diagramButton ( "StatisticsPanel . healthDistribution" , hpDistDiagram ) ) ; }
void test30 ( ) throws Throwable { CombatantStatistic combatantStatistic0 = new CombatantStatistic ( 0 ) ; CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CombatantStatType combatantStatType0 = CombatantStatType . starthp ; combatantStatistic0 . addData ( combatantStatType0 , combatantSide0 , 1617 ) ; SortedMap < Number , Number > sortedMap0 = combatantStatistic0 . healthDistribution ( combatantSide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void healthDistribution ( StaticStatistics stats ) { Map < Number , ? extends Number > attackerLPDistData = stats . healthDistributionRelative ( CombatantSide . ATTACKER ) ; Map < Number , ? extends Number > defenderLPDistData = stats . healthDistributionRelative ( CombatantSide . DEFENDER ) ; StatisticDiagramm hpDistDiagram = new HealthDistributionDiagram ( Messages . getString ( "StatisticsPanel . healthDistributionTitle" ) , attackerLPDistData , defenderLPDistData ) ; add ( diagramButton ( "StatisticsPanel . healthDistribution" , hpDistDiagram ) ) ; }
void test0 ( ) throws Throwable { RoundStatistics roundStatistics0 = new RoundStatistics ( "parameters may not be null ! " , "parameters may not be null ! " ) ; String string0 = roundStatistics0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String localizedTarget = Messages . getString ( "Battlefield . moveTarget" ) ; String localizedSide ; String color ; if ( player . getSide ( ) = = CombatantSide . ATTACKER ) { localizedSide = Messages . getString ( "General . attacker" ) ; color = "red" ; } else { localizedSide = Messages . getString ( "General . defender" ) ; color = "blue" ; } return " < font color = \"" + color + "\" > " + localizedTarget + " " + player . getName ( ) + " ( " + localizedSide + " ) " + " < / font > " ; }
void test1 ( ) throws Throwable { RoundStatistics roundStatistics0 = new RoundStatistics ( "parameters may not be null ! " , "parameters may not be null ! " ) ; String string0 = roundStatistics0 . getValueType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueType ( ) ; / * * * @return all values * / double [ ] toArray ( ) ; }
void test2 ( ) throws Throwable { RoundStatistics roundStatistics0 = new RoundStatistics ( "parameters may not be null ! " , "parameters may not be null ! " ) ; roundStatistics0 . addValue ( 15 . 330336445618883 ) ; double [ ] doubleArray0 = roundStatistics0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] toArray ( ) ; }
void test5 ( ) throws Throwable { RoundStatistics roundStatistics0 = new RoundStatistics ( "parameters may not be null ! " , "parameters may not be null ! " ) ; double [ ] doubleArray0 = roundStatistics0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] toArray ( ) ; }
void test0 ( ) throws Throwable { Counter counter0 = new Counter ( ) ; int int0 = counter0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test1 ( ) throws Throwable { Counter counter0 = new Counter ( ) ; counter0 . incrementBy ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test2 ( ) throws Throwable { Counter counter0 = new Counter ( ) ; counter0 . increment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test0 ( ) throws Throwable { DataSet dataSet0 = new DataSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test1 ( ) throws Throwable { DataSet dataSet0 = new DataSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test2 ( ) throws Throwable { DataSet dataSet0 = new DataSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addData ( double [ ] [ ] data ) { addData ( data , CombatantSide . ATTACKER . color ( ) , CombatantSide . DEFENDER . color ( ) ) ; }
void test3 ( ) throws Throwable { DataSet dataSet0 = new DataSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test4 ( ) throws Throwable { DataSet dataSet0 = new DataSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " position = " + position + " , healt = " + health + " , target = " + target + " , online = " + isGamerOnline ; }
void test0 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; int int0 = onlineCounter0 . onlineEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean wasOffline ( ) { return firstOnline = = NOT_YET_ONLINE ; }
void test1 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; int int0 = onlineCounter0 . firstOnline ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int sumOfEvents ( ) { return onlineEvents + offlineEvents ; }
void test2 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; int int0 = onlineCounter0 . sumOfEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean wasOffline ( ) { return firstOnline = = NOT_YET_ONLINE ; }
void test3 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; onlineCounter0 . addOffline ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int firstOnline ( ) { return firstOnline ; }
void test4 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; onlineCounter0 . addOnline ( ) ; onlineCounter0 . addOnline ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int firstOnline ( ) { return firstOnline ; }
void test5 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; onlineCounter0 . addOnline ( ) ; boolean boolean0 = onlineCounter0 . wasOffline ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int sumOfEvents ( ) { return onlineEvents + offlineEvents ; }
void test6 ( ) throws Throwable { OnlineCounter onlineCounter0 = new OnlineCounter ( ) ; boolean boolean0 = onlineCounter0 . wasOffline ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int sumOfEvents ( ) { return onlineEvents + offlineEvents ; }
void test0 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , false , false , ( - 604 ) , ( - 604 ) , false , ( - 604 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , false ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "P" , characterClass0 , ( Weapon ) null , "P" ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; boolean boolean0 = positionSwitch0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test1 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , true , true , ( - 604 ) , ( - 5 ) , true , ( - 5 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "Eq | H$'K { " , characterClass0 , ( Weapon ) null , "Eq | H$'K { " ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; int int0 = positionSwitch0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return 13 * attackBonus + 17 * defendBonus ; }
void test2 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . ATTACKER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , false , false , ( - 604 ) , ( - 604 ) , false , ( - 604 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , false ) ; CharacterClass characterClass1 = CharacterClass . SOLDIER ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "P" , characterClass1 , ( Weapon ) null , "P" ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; SimpleCombatant simpleCombatant1 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "P" , characterClass0 , ( Weapon ) null , "P" ) ; PositionSwitch positionSwitch1 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant1 , ( Combatant ) simpleCombatant1 ) ; int int0 = positionSwitch0 . compareTo ( positionSwitch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test3 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , true , true , ( - 604 ) , ( - 5 ) , true , ( - 5 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "Eq | H$'K { " , characterClass0 , ( Weapon ) null , "Eq | H$'K { " ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; boolean boolean0 = positionSwitch0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test4 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , true , true , ( - 604 ) , ( - 5 ) , true , ( - 5 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "Eq | H$'K { " , characterClass0 , ( Weapon ) null , "Eq | H$'K { " ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; PositionSwitch positionSwitch1 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; int int0 = positionSwitch0 . compareTo ( positionSwitch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test5 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , true , true , ( - 604 ) , ( - 5 ) , true , ( - 5 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "Eq | H$'K { " , characterClass0 , ( Weapon ) null , "Eq | H$'K { " ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; PositionSwitch positionSwitch1 = new PositionSwitch ( ( - 5 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; int int0 = positionSwitch0 . compareTo ( positionSwitch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
void test6 ( ) throws Throwable { CombatantSide combatantSide0 = CombatantSide . DEFENDER ; CharacterClass characterClass0 = CharacterClass . DUELANT ; SimpleSector simpleSector0 = new SimpleSector ( ( - 604 ) , true , true , ( - 604 ) , ( - 5 ) , true , ( - 5 ) , characterClass0 ) ; SimpleArea simpleArea0 = new SimpleArea ( ( - 604 ) , ( - 604 ) , ( Sector ) simpleSector0 ) ; CombatantState combatantState0 = new CombatantState ( ( Area ) simpleArea0 , ( - 604 ) , ( Area ) simpleArea0 , true ) ; SimpleCombatant simpleCombatant0 = new SimpleCombatant ( combatantSide0 , combatantState0 , ( - 604 ) , "Eq | H$'K { " , characterClass0 , ( Weapon ) null , "Eq | H$'K { " ) ; PositionSwitch positionSwitch0 = new PositionSwitch ( ( - 604 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; PositionSwitch positionSwitch1 = new PositionSwitch ( ( - 5 ) , ( Combatant ) simpleCombatant0 , ( Combatant ) simpleCombatant0 ) ; int int0 = positionSwitch1 . compareTo ( positionSwitch0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof SectorBonus ) ) { return false ; } SectorBonus other = ( SectorBonus ) obj ; if ( attackBonus ! = other . attackBonus | | defendBonus ! = other . defendBonus ) { return false ; } return true ; }
