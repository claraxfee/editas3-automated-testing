void test2 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) AbstractEngine . getCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { IEngine iEngine0 = AbstractEngine . getCurrentServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IEngine getCurrentServer ( ) { return ( IEngine ) currentServer . get ( ) ; }
void test0 ( ) throws Throwable { MessageSourceResourceBundleImpl messageSourceResourceBundleImpl0 = new MessageSourceResourceBundleImpl ( ) ; Locale locale0 = Locale . ITALY ; MessageSourceResourceBundleImpl . LocalizedBundleKey messageSourceResourceBundleImpl_LocalizedBundleKey0 = messageSourceResourceBundleImpl0 . new LocalizedBundleKey ( locale0 , ( String ) null ) ; boolean boolean0 = messageSourceResourceBundleImpl_LocalizedBundleKey0 . equals ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#process - namespaces" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test1 ( ) throws Throwable { MessageSourceResourceBundleImpl messageSourceResourceBundleImpl0 = new MessageSourceResourceBundleImpl ( ) ; MessageSourceResourceBundleImpl . LocalizedBundleKey messageSourceResourceBundleImpl_LocalizedBundleKey0 = messageSourceResourceBundleImpl0 . new LocalizedBundleKey ( ( Locale ) null , " ) ! vSS" ) ; boolean boolean0 = messageSourceResourceBundleImpl_LocalizedBundleKey0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test2 ( ) throws Throwable { MessageSourceResourceBundleImpl messageSourceResourceBundleImpl0 = new MessageSourceResourceBundleImpl ( ) ; MessageSourceResourceBundleImpl . LocalizedBundleKey messageSourceResourceBundleImpl_LocalizedBundleKey0 = messageSourceResourceBundleImpl0 . new LocalizedBundleKey ( ( Locale ) null , " ) ! vSS" ) ; MessageSourceResourceBundleImpl . LocalizedBundleKey messageSourceResourceBundleImpl_LocalizedBundleKey1 = messageSourceResourceBundleImpl0 . new LocalizedBundleKey ( ( Locale ) null , " ) ! vSS" ) ; boolean boolean0 = messageSourceResourceBundleImpl_LocalizedBundleKey0 . equals ( ( Object ) messageSourceResourceBundleImpl_LocalizedBundleKey1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test3 ( ) throws Throwable { MessageSourceResourceBundleImpl messageSourceResourceBundleImpl0 = new MessageSourceResourceBundleImpl ( ) ; MessageSourceResourceBundleImpl . LocalizedBundleKey messageSourceResourceBundleImpl_LocalizedBundleKey0 = messageSourceResourceBundleImpl0 . new LocalizedBundleKey ( ( Locale ) null , " ) ! vSS" ) ; int int0 = messageSourceResourceBundleImpl_LocalizedBundleKey0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( fileUri ! = null ? fileUri . hashCode ( ) : 0 ) ; }
void test4 ( ) throws Throwable { MessageSourceResourceBundleImpl messageSourceResourceBundleImpl0 = new MessageSourceResourceBundleImpl ( ) ; Locale locale0 = Locale . ITALY ; MessageSourceResourceBundleImpl . LocalizedBundleKey messageSourceResourceBundleImpl_LocalizedBundleKey0 = messageSourceResourceBundleImpl0 . new LocalizedBundleKey ( locale0 , ( String ) null ) ; int int0 = messageSourceResourceBundleImpl_LocalizedBundleKey0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( fileUri ! = null ? fileUri . hashCode ( ) : 0 ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test0 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( ( String ) null , ( String ) null , asset_AssetType0 ) ; asset0 . getMedia ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test1 ( ) throws Throwable { Asset asset0 = new Asset ( "@Kb^Q1jTJN ] 6yT ) # . css" , ( StandaloneComponent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AssetType getType ( ) { return type ; }
void test2 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( "V + w$4 : aG - 7Ne } " , "V + w$4 : aG - 7Ne } " , asset_AssetType0 ) ; asset0 . getOwner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Asset asset0 = new Asset ( "VAIABL" , ( StandaloneComponent ) errorPage0 ) ; String string0 = asset0 . getExpiresQueryString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AssetType getType ( ) { return type ; }
void test4 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . css ; Asset asset0 = new Asset ( "zsG ? Ble ! $zm" , "zsG ? Ble ! $zm" , asset_AssetType0 ) ; asset0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test5 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( " & F_7jo < [ H" , " & F_7jo < [ H" , asset_AssetType0 ) ; asset0 . setMedia ( " & F_7jo < [ H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test6 ( ) throws Throwable { Asset asset0 = new Asset ( "http : / / xmlpull . org / v1 / doc / fatures . html#report - namespace - prefixes . js" , ( StandaloneComponent ) null ) ; String string0 = asset0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AssetType getType ( ) { return type ; }
void test7 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( " & F_7jo < [ H" , " & F_7jo < [ H" , asset_AssetType0 ) ; String string0 = asset0 . getFileUri ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Asset asset0 = new Asset ( "@K^Q1jvTJNyqYZT ) #" , ( StandaloneComponent ) errorPage0 ) ; String string0 = asset0 . getFileUri ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test9 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( "V + w$4 : aG - 7Ne } " , "V + w$4 : aG - 7Ne } " , asset_AssetType0 ) ; String string0 = asset0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test12 ( ) throws Throwable { Asset asset0 = new Asset ( "1gGr [ f | & = Zqe~FEald . css" , ( StandaloneComponent ) null ) ; Asset asset1 = new Asset ( "xException" , ( StandaloneComponent ) null ) ; boolean boolean0 = asset0 . equals ( ( Object ) asset1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test13 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . css ; Asset asset0 = new Asset ( "zsG ? Ble ! $zm" , "zsG ? Ble ! $zm" , asset_AssetType0 ) ; boolean boolean0 = asset0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test14 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( " & F_7jo < [ H" , " & F_7jo < [ H" , asset_AssetType0 ) ; boolean boolean0 = asset0 . equals ( ( Object ) " & F_7jo < [ H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test15 ( ) throws Throwable { Asset asset0 = new Asset ( "@Kb^Q1jTJN ] 6yT ) # . css" , ( StandaloneComponent ) null ) ; Asset asset1 = new Asset ( "@Kb^Q1jTJN ] 6yT ) # . css" , ( StandaloneComponent ) null ) ; boolean boolean0 = asset0 . equals ( ( Object ) asset1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AssetType getType ( ) { return type ; }
void test16 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( ( String ) null , ( String ) null , asset_AssetType0 ) ; int int0 = asset0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test17 ( ) throws Throwable { Asset . AssetType asset_AssetType0 = Asset . AssetType . other ; Asset asset0 = new Asset ( " & F_7jo < [ H" , " & F_7jo < [ H" , asset_AssetType0 ) ; int int0 = asset0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test18 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Asset asset0 = new Asset ( "@K^Q1jvTJNyqYZT ) #" , ( StandaloneComponent ) errorPage0 ) ; String string0 = asset0 . getPackagePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpiresQueryString ( ) { return " ? expires = " + expires ; }
void test0 ( ) throws Throwable { AssetProcessor assetProcessor0 = new AssetProcessor ( ) ; String string0 = assetProcessor0 . replaceUrls ( "" , "" , 278 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceUrls ( String css , String baseUrl , int expires ) { if ( urlMatcher = = null ) urlMatcher = Pattern . compile ( "url\\ ( \" ? \' ? ( \\w + \\ . \\w + ) \' ? \" ? \\ ) " ) ; Matcher matcher = urlMatcher . matcher ( css ) ; StringBuffer sb = new StringBuffer ( ) ; while ( matcher . find ( ) ) { if ( expires > 0 ) matcher . appendReplacement ( sb , "url ( " + baseUrl + " / " + "$1" + " ? expires = " + expires + " ) " ) ; else matcher . appendReplacement ( sb , "url ( " + baseUrl + " / " + "$1" + " ) " ) ; } matcher . appendTail ( sb ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; int int0 = MethodWriter . readUnsignedShort ( byteArray0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readUnsignedShort ( byte [ ] b , int index ) { return ( ( b [ index ] & 0xFF ) < < 8 ) | ( b [ index + 1 ] & 0xFF ) ; }
void test2 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test4 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test6 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; short short0 = MethodWriter . readShort ( byteArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short readShort ( byte [ ] b , int index ) { return ( short ) ( ( ( b [ index ] & 0xFF ) < < 8 ) | ( b [ index + 1 ] & 0xFF ) ) ; }
void test10 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test11 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AnnotationVisitor visitParameterAnnotation ( int parameter , String desc , boolean visible ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector bv = new ByteVector ( ) ; if ( "Ljava / lang / Synthetic ; " . equals ( desc ) ) { / / workaround for a bug in javac with synthetic parameters / / see ClassReader . readParameterAnnotations synthetics = Math . max ( synthetics , parameter + 1 ) ; return new AnnotationWriter ( cw , false , bv , null , 0 ) ; } / / write type , and reserve space for values count bv . putShort ( cw . newUTF8 ( desc ) ) . putShort ( 0 ) ; AnnotationWriter aw = new AnnotationWriter ( cw , true , bv , bv , 2 ) ; if ( visible ) { if ( panns = = null ) { panns = new AnnotationWriter [ Type . getArgumentTypes ( descriptor ) . length ] ; } aw . next = panns [ parameter ] ; panns [ parameter ] = aw ; } else { if ( ipanns = = null ) { ipanns = new AnnotationWriter [ Type . getArgumentTypes ( descriptor ) . length ] ; } aw . next = ipanns [ parameter ] ; ipanns [ parameter ] = aw ; } return aw ; }
void test12 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "yN@~Oz , Rx7cTpZ" ; stringArray0 [ 1 ] = "a~Th & J^E ( Yw < 3rEt ! | " ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , 1220 , "a~Th & J^E ( Yw < 3rEt ! | " , "a~Th & J^E ( Yw < 3rEt ! | " , "a~Th & J^E ( Yw < 3rEt ! | " , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AnnotationVisitor visitParameterAnnotation ( int parameter , String desc , boolean visible ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector bv = new ByteVector ( ) ; if ( "Ljava / lang / Synthetic ; " . equals ( desc ) ) { / / workaround for a bug in javac with synthetic parameters / / see ClassReader . readParameterAnnotations synthetics = Math . max ( synthetics , parameter + 1 ) ; return new AnnotationWriter ( cw , false , bv , null , 0 ) ; } / / write type , and reserve space for values count bv . putShort ( cw . newUTF8 ( desc ) ) . putShort ( 0 ) ; AnnotationWriter aw = new AnnotationWriter ( cw , true , bv , bv , 2 ) ; if ( visible ) { if ( panns = = null ) { panns = new AnnotationWriter [ Type . getArgumentTypes ( descriptor ) . length ] ; } aw . next = panns [ parameter ] ; panns [ parameter ] = aw ; } else { if ( ipanns = = null ) { ipanns = new AnnotationWriter [ Type . getArgumentTypes ( descriptor ) . length ] ; } aw . next = ipanns [ parameter ] ; ipanns [ parameter ] = aw ; } return aw ; }
void test13 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( int ) ( byte ) 122 ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "L@GS" ; stringArray0 [ 1 ] = "JCn# & G" ; stringArray0 [ 2 ] = "L@GS" ; stringArray0 [ 3 ] = "RuntimeInvisibleAnnotations" ; stringArray0 [ 4 ] = "L@GS" ; stringArray0 [ 5 ] = "JCn# & G" ; stringArray0 [ 6 ] = "L@GS" ; stringArray0 [ 7 ] = "JCn# & G" ; stringArray0 [ 8 ] = "" ; stringArray0 [ 9 ] = "L@GS" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( int ) ( byte ) 122 , "L@GS" , "JCn# & G" , "JCn# & G" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test14 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( int ) ( byte ) 52 ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "L@GS" ; stringArray0 [ 1 ] = "JCn# & G" ; stringArray0 [ 2 ] = "L@GS" ; stringArray0 [ 3 ] = "JCn# & G" ; stringArray0 [ 4 ] = "L@GS" ; stringArray0 [ 5 ] = "JCn# & G" ; stringArray0 [ 6 ] = "L@GS" ; stringArray0 [ 7 ] = "JCn# & G" ; stringArray0 [ 8 ] = "" ; stringArray0 [ 9 ] = "L@GS" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( int ) ( byte ) 122 , "L@GS" , "JCn# & G" , "JCn# & G" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test15 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test16 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test17 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitIntInsn ( int opcode , int operand ) { / / Label currentBlock = this . currentBlock ; if ( currentBlock ! = null ) { if ( compute = = FRAMES ) { currentBlock . frame . execute ( opcode , operand , null , null ) ; } else if ( opcode ! = Opcodes . NEWARRAY ) { / / updates current and max stack sizes only for NEWARRAY / / ( stack size variation = 0 for BIPUSH or SIPUSH ) int size = stackSize + 1 ; if ( size > maxStackSize ) { maxStackSize = size ; } stackSize = size ; } } / / adds the instruction to the bytecode of the method if ( opcode = = Opcodes . SIPUSH ) { code . put12 ( opcode , operand ) ; } else { / / BIPUSH or NEWARRAY code . put11 ( opcode , operand ) ; } }
void test18 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "yN@~Oz , Rx7cTpZ" ; stringArray0 [ 1 ] = "a~Th & J^E ( Yw < 3rEt ! | " ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , 1220 , "a~Th & J^E ( Yw < 3rEt ! | " , "a~Th & J^E ( Yw < 3rEt ! | " , "a~Th & J^E ( Yw < 3rEt ! | " , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test19 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test20 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test21 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test22 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test23 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test24 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test25 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test26 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "7 ) 5NT" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 4 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 5 ] = "7 ) 5NT" ; stringArray0 [ 6 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 7 ] = "7 ) 5NT" ; stringArray0 [ 8 ] = "7 ) 5NT" ; stringArray0 [ 9 ] = "7 ) 5NT" ; Label label0 = new Label ( ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , false ) ; methodWriter0 . visitLabel ( label0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test27 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( int ) ( byte ) 122 ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "L@GS" ; stringArray0 [ 1 ] = "JCn# & G" ; stringArray0 [ 2 ] = "L@GS" ; stringArray0 [ 3 ] = "RuntimeInvisibleAnnotations" ; stringArray0 [ 4 ] = "L@GS" ; stringArray0 [ 5 ] = "JCn# & G" ; stringArray0 [ 6 ] = "L@GS" ; stringArray0 [ 7 ] = "JCn# & G" ; stringArray0 [ 8 ] = "" ; stringArray0 [ 9 ] = "L@GS" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( int ) ( byte ) 122 , "L@GS" , "JCn# & G" , "JCn# & G" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test28 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test29 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test30 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test31 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test32 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test33 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "7 ) 5NT" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 4 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 5 ] = "7 ) 5NT" ; stringArray0 [ 6 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 7 ] = "7 ) 5NT" ; stringArray0 [ 8 ] = "7 ) 5NT" ; stringArray0 [ 9 ] = "7 ) 5NT" ; Label label0 = new Label ( ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , false ) ; Label [ ] labelArray0 = new Label [ 9 ] ; labelArray0 [ 0 ] = label0 ; labelArray0 [ 1 ] = label0 ; labelArray0 [ 2 ] = label0 ; labelArray0 [ 3 ] = label0 ; labelArray0 [ 4 ] = label0 ; labelArray0 [ 5 ] = label0 ; labelArray0 [ 6 ] = label0 ; labelArray0 [ 7 ] = label0 ; labelArray0 [ 8 ] = label0 ; methodWriter0 . visitTableSwitchInsn ( ( - 1 ) , 52 , label0 , labelArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test34 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test35 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test36 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test37 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test38 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1941 ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , 119 , "" , "" , "" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test39 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1417 ) ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " ! IMyX2d5C" ; stringArray0 [ 1 ] = "s * 2R94 - + JOv" ; stringArray0 [ 2 ] = " ! IMyX2d5C" ; stringArray0 [ 3 ] = " ! IMyX2d5C" ; stringArray0 [ 4 ] = " ! IMyX2d5C" ; stringArray0 [ 5 ] = " ! IMyX2d5C" ; stringArray0 [ 6 ] = " ! IMyX2d5C" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 815 ) , " ! IMyX2d5C" , " ! IMyX2d5C" , " ! IMyX2d5C" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test41 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test42 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; classWriter0 . version = ( - 751 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test43 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; classWriter0 . version = ( - 751 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test44 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , ( String [ ] ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test45 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 41 ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "InnerClasses" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , 128 , "InnerClasses" , "InnerClasses" , "InnerClasses" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test46 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test47 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test48 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 751 ) ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "7 ) 5NT" ; stringArray0 [ 1 ] = "pJq\f^d . ! H7fx" ; stringArray0 [ 2 ] = "7 ) 5NT" ; stringArray0 [ 3 ] = "7 ) 5NT" ; stringArray0 [ 4 ] = "7 ) 5NT" ; stringArray0 [ 5 ] = "pJq\f^d . ! H7fx" ; MethodWriter methodWriter0 = new MethodWriter ( classWriter0 , ( - 751 ) , "7 ) 5NT" , "7 ) 5NT" , "pJq\f^d . ! H7fx" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test49 ( ) throws Throwable { int [ ] intArray0 = new int [ 8 ] ; intArray0 [ 0 ] = ( - 751 ) ; int int0 = MethodWriter . getNewOffset ( intArray0 , intArray0 , ( - 751 ) , ( - 1522 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNewOffset ( int [ ] indexes , int [ ] sizes , int begin , int end ) { int offset = end - begin ; for ( int i = 0 ; i < indexes . length ; + + i ) { if ( begin < indexes [ i ] & & indexes [ i ] < = end ) { / / forward jump offset + = sizes [ i ] ; } else if ( end < indexes [ i ] & & indexes [ i ] < = begin ) { / / backward jump offset - = sizes [ i ] ; } } return offset ; }
void test50 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; int int0 = MethodWriter . getNewOffset ( intArray0 , intArray0 , ( - 749 ) , 1501 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNewOffset ( int [ ] indexes , int [ ] sizes , int begin , int end ) { int offset = end - begin ; for ( int i = 0 ; i < indexes . length ; + + i ) { if ( begin < indexes [ i ] & & indexes [ i ] < = end ) { / / forward jump offset + = sizes [ i ] ; } else if ( end < indexes [ i ] & & indexes [ i ] < = begin ) { / / backward jump offset - = sizes [ i ] ; } } return offset ; }
void test51 ( ) throws Throwable { int [ ] intArray0 = new int [ 8 ] ; intArray0 [ 0 ] = ( - 751 ) ; int int0 = MethodWriter . getNewOffset ( intArray0 , intArray0 , ( - 751 ) , ( - 751 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNewOffset ( int [ ] indexes , int [ ] sizes , int begin , int end ) { int offset = end - begin ; for ( int i = 0 ; i < indexes . length ; + + i ) { if ( begin < indexes [ i ] & & indexes [ i ] < = end ) { / / forward jump offset + = sizes [ i ] ; } else if ( end < indexes [ i ] & & indexes [ i ] < = begin ) { / / backward jump offset - = sizes [ i ] ; } } return offset ; }
void test0 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; ClassAdapter classAdapter0 = new ClassAdapter ( ( ClassVisitor ) classWriter0 ) ; FieldVisitor fieldVisitor0 = classAdapter0 . visitField ( ( - 1025 ) , "5IN1zmxs5w" , "SY + } U\"YEvop" , "SY + } U\"YEvop" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { return cv . visitField ( access , name , desc , signature , value ) ; }
void test6 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 946 ) ) ; ClassAdapter classAdapter0 = new ClassAdapter ( ( ClassVisitor ) classWriter0 ) ; AnnotationVisitor annotationVisitor0 = classAdapter0 . visitAnnotation ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { return cv . visitAnnotation ( desc , visible ) ; }
void test0 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 0 ) ; ByteVector byteVector1 = byteVector0 . putUTF8 ( "o" ) ; byteVector0 . put11 ( 6 , 6 ) ; byteVector1 . putByte ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putByte ( int b ) { int length = this . length ; if ( length + 1 > data . length ) { enlarge ( 1 ) ; } data [ length + + ] = ( byte ) b ; this . length = length ; return this ; }
void test1 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector ( ) { data = new byte [ 64 ] ; }
void test2 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putByte ( int b ) { int length = this . length ; if ( length + 1 > data . length ) { enlarge ( 1 ) ; } data [ length + + ] = ( byte ) b ; this . length = length ; return this ; }
void test3 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 0 ) ; ByteVector byteVector1 = byteVector0 . putShort ( 0 ) ; byteVector0 . putInt ( 6 ) ; byteVector1 . put12 ( 0 , 9 ) ; byteVector0 . put11 ( 11 , 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector put11 ( int b1 , int b2 ) { int length = this . length ; if ( length + 2 > data . length ) { enlarge ( 2 ) ; } byte [ ] data = this . data ; data [ length + + ] = ( byte ) b1 ; data [ length + + ] = ( byte ) b2 ; this . length = length ; return this ; }
void test4 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putShort ( int s ) { int length = this . length ; if ( length + 2 > data . length ) { enlarge ( 2 ) ; } byte [ ] data = this . data ; data [ length + + ] = ( byte ) ( s > > > 8 ) ; data [ length + + ] = ( byte ) s ; this . length = length ; return this ; }
void test5 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector put12 ( int b , int s ) { int length = this . length ; if ( length + 3 > data . length ) { enlarge ( 3 ) ; } byte [ ] data = this . data ; data [ length + + ] = ( byte ) b ; data [ length + + ] = ( byte ) ( s > > > 8 ) ; data [ length + + ] = ( byte ) s ; this . length = length ; return this ; }
void test6 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putInt ( int i ) { int length = this . length ; if ( length + 4 > data . length ) { enlarge ( 4 ) ; } byte [ ] data = this . data ; data [ length + + ] = ( byte ) ( i > > > 24 ) ; data [ length + + ] = ( byte ) ( i > > > 16 ) ; data [ length + + ] = ( byte ) ( i > > > 8 ) ; data [ length + + ] = ( byte ) i ; this . length = length ; return this ; }
void test7 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putLong ( long l ) { int length = this . length ; if ( length + 8 > data . length ) { enlarge ( 8 ) ; } byte [ ] data = this . data ; int i = ( int ) ( l > > > 32 ) ; data [ length + + ] = ( byte ) ( i > > > 24 ) ; data [ length + + ] = ( byte ) ( i > > > 16 ) ; data [ length + + ] = ( byte ) ( i > > > 8 ) ; data [ length + + ] = ( byte ) i ; i = ( int ) l ; data [ length + + ] = ( byte ) ( i > > > 24 ) ; data [ length + + ] = ( byte ) ( i > > > 16 ) ; data [ length + + ] = ( byte ) ( i > > > 8 ) ; data [ length + + ] = ( byte ) i ; this . length = length ; return this ; }
void test8 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 0 ) ; ByteVector byteVector1 = byteVector0 . putLong ( ( long ) 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putLong ( long l ) { int length = this . length ; if ( length + 8 > data . length ) { enlarge ( 8 ) ; } byte [ ] data = this . data ; int i = ( int ) ( l > > > 32 ) ; data [ length + + ] = ( byte ) ( i > > > 24 ) ; data [ length + + ] = ( byte ) ( i > > > 16 ) ; data [ length + + ] = ( byte ) ( i > > > 8 ) ; data [ length + + ] = ( byte ) i ; i = ( int ) l ; data [ length + + ] = ( byte ) ( i > > > 24 ) ; data [ length + + ] = ( byte ) ( i > > > 16 ) ; data [ length + + ] = ( byte ) ( i > > > 8 ) ; data [ length + + ] = ( byte ) i ; this . length = length ; return this ; }
void test9 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putUTF8 ( String s ) { int charLength = s . length ( ) ; if ( length + 2 + charLength > data . length ) { enlarge ( 2 + charLength ) ; } int len = length ; byte [ ] data = this . data ; / / optimistic algorithm : instead of computing the byte length and then / / serializing the string ( which requires two loops ) , we assume the byte / / length is equal to char length ( which is the most frequent case ) , and / / we start serializing the string right away . During the serialization , / / if we find that this assumption is wrong , we continue with the / / general method . data [ len + + ] = ( byte ) ( charLength > > > 8 ) ; data [ len + + ] = ( byte ) charLength ; for ( int i = 0 ; i < charLength ; + + i ) { char c = s . charAt ( i ) ; if ( c > = '\001' & & c < = '\177' ) { data [ len + + ] = ( byte ) c ; } else { int byteLength = i ; for ( int j = i ; j < charLength ; + + j ) { c = s . charAt ( j ) ; if ( c > = '\001' & & c < = '\177' ) { byteLength + + ; } else if ( c > '\u07FF' ) { byteLength + = 3 ; } else { byteLength + = 2 ; } } data [ length ] = ( byte ) ( byteLength > > > 8 ) ; data [ length + 1 ] = ( byte ) byteLength ; if ( length + 2 + byteLength > data . length ) { length = len ; enlarge ( 2 + byteLength ) ; data = this . data ; } for ( int j = i ; j < charLength ; + + j ) { c = s . charAt ( j ) ; if ( c > = '\001' & & c < = '\177' ) { data [ len + + ] = ( byte ) c ; } else if ( c > '\u07FF' ) { data [ len + + ] = ( byte ) ( 0xE0 | c > > 12 & 0xF ) ; data [ len + + ] = ( byte ) ( 0x80 | c > > 6 & 0x3F ) ; data [ len + + ] = ( byte ) ( 0x80 | c & 0x3F ) ; } else { data [ len + + ] = ( byte ) ( 0xC0 | c > > 6 & 0x1F ) ; data [ len + + ] = ( byte ) ( 0x80 | c & 0x3F ) ; } } break ; } } length = len ; return this ; }
void test10 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putByteArray ( byte [ ] b , int off , int len ) { if ( length + len > data . length ) { enlarge ( len ) ; } if ( b ! = null ) { System . arraycopy ( b , off , data , length , len ) ; } length + = len ; return this ; }
void test11 ( ) throws Throwable { ByteVector byteVector0 = new ByteVector ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteVector putByteArray ( byte [ ] b , int off , int len ) { if ( length + len > data . length ) { enlarge ( len ) ; } if ( b ! = null ) { System . arraycopy ( b , off , data , length , len ) ; } length + = len ; return this ; }
void test1 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1 ) ; ByteVector byteVector0 = new ByteVector ( ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , true , byteVector0 , byteVector0 , ( int ) ( byte ) ( - 104 ) ) ; annotationWriter0 . visit ( "" , ( Object ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test2 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1053 ) ; ByteVector byteVector0 = new ByteVector ( ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , false , byteVector0 , byteVector0 , 1053 ) ; annotationWriter0 . visit ( "acqSon" , "`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test3 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 169 ) ; ByteVector byteVector0 = new ByteVector ( ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , true , byteVector0 , byteVector0 , 169 ) ; Boolean boolean0 = new Boolean ( " ; yylmNgG = jW" ) ; annotationWriter0 . visit ( " ; yylmNgG = jW" , ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test4 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 169 ) ; ByteVector byteVector0 = new ByteVector ( ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , true , byteVector0 , byteVector0 , 169 ) ; Class < ? > class0 = AnnotationWriter . class ; Type type0 = Type . getType ( class0 ) ; annotationWriter0 . visit ( " ; yylmNgG = jW" , ( Object ) type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test6 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; ByteVector byteVector0 = new ByteVector ( ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , false , byteVector0 , byteVector0 , 0 ) ; annotationWriter0 . visitAnnotation ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test7 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 169 ) ; ByteVector byteVector0 = new ByteVector ( ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , true , byteVector0 , byteVector0 , 169 ) ; annotationWriter0 . visitAnnotation ( " ; yylmNgG = jW" , " ; yylmNgG = jW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test12 ( ) throws Throwable { AnnotationWriter [ ] annotationWriterArray0 = new AnnotationWriter [ 4 ] ; ClassWriter classWriter0 = new ClassWriter ( 0 ) ; ByteVector byteVector0 = new ByteVector ( 0 ) ; ByteVector byteVector1 = byteVector0 . putLong ( ( long ) 0 ) ; AnnotationWriter annotationWriter0 = new AnnotationWriter ( classWriter0 , true , byteVector1 , byteVector1 , 2 ) ; annotationWriterArray0 [ 1 ] = annotationWriter0 ; annotationWriterArray0 [ 1 ] . put ( byteVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void put ( ByteVector out ) { out . putShort ( access ) . putShort ( name ) . putShort ( desc ) ; if ( classReaderOffset ! = 0 ) { out . putByteArray ( cw . cr . b , classReaderOffset , classReaderLength ) ; return ; } int attributeCount = 0 ; if ( code . length > 0 ) { + + attributeCount ; } if ( exceptionCount > 0 ) { + + attributeCount ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( cw . version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; } if ( ClassReader . SIGNATURES & & signature ! = null ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & annd ! = null ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & panns ! = null ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & ipanns ! = null ) { + + attributeCount ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; } out . putShort ( attributeCount ) ; if ( code . length > 0 ) { int size = 12 + code . length + 8 * handlerCount ; if ( localVar ! = null ) { size + = 8 + localVar . length ; } if ( localVarType ! = null ) { size + = 8 + localVarType . length ; } if ( lineNumber ! = null ) { size + = 8 + lineNumber . length ; } if ( stackMap ! = null ) { size + = 8 + stackMap . length ; } if ( cattrs ! = null ) { size + = cattrs . getSize ( cw , code . data , code . length , maxStack , maxLocals ) ; } out . putShort ( cw . newUTF8 ( "Code" ) ) . putInt ( size ) ; out . putShort ( maxStack ) . putShort ( maxLocals ) ; out . putInt ( code . length ) . putByteArray ( code . data , 0 , code . length ) ; out . putShort ( handlerCount ) ; if ( handlerCount > 0 ) { Handler h = firstHandler ; while ( h ! = null ) { out . putShort ( h . start . position ) . putShort ( h . end . position ) . putShort ( h . handler . position ) . putShort ( h . type ) ; h = h . next ; } } attributeCount = 0 ; if ( localVar ! = null ) { + + attributeCount ; } if ( localVarType ! = null ) { + + attributeCount ; } if ( lineNumber ! = null ) { + + attributeCount ; } if ( stackMap ! = null ) { + + attributeCount ; } if ( cattrs ! = null ) { attributeCount + = cattrs . getCount ( ) ; } out . putShort ( attributeCount ) ; if ( localVar ! = null ) { out . putShort ( cw . newUTF8 ( "LocalVariableTable" ) ) ; out . putInt ( localVar . length + 2 ) . putShort ( localVarCount ) ; out . putByteArray ( localVar . data , 0 , localVar . length ) ; } if ( localVarType ! = null ) { out . putShort ( cw . newUTF8 ( "LocalVariableTypeTable" ) ) ; out . putInt ( localVarType . length + 2 ) . putShort ( localVarTypeCount ) ; out . putByteArray ( localVarType . data , 0 , localVarType . length ) ; } if ( lineNumber ! = null ) { out . putShort ( cw . newUTF8 ( "LineNumberTable" ) ) ; out . putInt ( lineNumber . length + 2 ) . putShort ( lineNumberCount ) ; out . putByteArray ( lineNumber . data , 0 , lineNumber . length ) ; } if ( stackMap ! = null ) { boolean zip = ( cw . version & 0xFFFF ) > = Opcodes . V1_6 ; out . putShort ( cw . newUTF8 ( zip ? "StackMapTable" : "StackMap" ) ) ; out . putInt ( stackMap . length + 2 ) . putShort ( frameCount ) ; out . putByteArray ( stackMap . data , 0 , stackMap . length ) ; } if ( cattrs ! = null ) { cattrs . put ( cw , code . data , code . length , maxLocals , maxStack , out ) ; } } if ( exceptionCount > 0 ) { out . putShort ( cw . newUTF8 ( "Exceptions" ) ) . putInt ( 2 * exceptionCount + 2 ) ; out . putShort ( exceptionCount ) ; for ( int i = 0 ; i < exceptionCount ; + + i ) { out . putShort ( exceptions [ i ] ) ; } } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( cw . version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( cw . newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( cw . newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ClassReader . SIGNATURES & & signature ! = null ) { out . putShort ( cw . newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( cw . newUTF8 ( signature ) ) ; } if ( ClassReader . ANNOTATIONS & & annd ! = null ) { out . putShort ( cw . newUTF8 ( "AnnotationDefault" ) ) ; out . putInt ( annd . length ) ; out . putByteArray ( annd . data , 0 , annd . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( cw . newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( cw . newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & panns ! = null ) { out . putShort ( cw . newUTF8 ( "RuntimeVisibleParameterAnnotations" ) ) ; AnnotationWriter . put ( panns , synthetics , out ) ; } if ( ClassReader . ANNOTATIONS & & ipanns ! = null ) { out . putShort ( cw . newUTF8 ( "RuntimeInvisibleParameterAnnotations" ) ) ; AnnotationWriter . put ( ipanns , synthetics , out ) ; } if ( attrs ! = null ) { attrs . put ( cw , null , 0 , - 1 , - 1 , out ) ; } }
void test0 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitEnd ( ) { cv . visitEnd ( ) ; }
void test1 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitAttribute ( Attribute attr ) { cv . visitAttribute ( attr ) ; }
void test2 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 2038 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int newField ( String owner , String name , String desc ) { return newFieldItem ( owner , name , desc ) . index ; }
void test3 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1143 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { return cv . visitField ( access , name , desc , signature , value ) ; }
void test5 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int newConst ( Object cst ) { return newConstItem ( cst ) . index ; }
void test6 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) { cv . visit ( version , access , name , signature , superName , interfaces ) ; }
void test7 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitSource ( String source , String debug ) { cv . visitSource ( source , debug ) ; }
void test8 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitOuterClass ( String owner , String name , String desc ) { cv . visitOuterClass ( owner , name , desc ) ; }
void test9 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1874 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test10 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; classWriter0 . visitAnnotation ( "" , true ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test11 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; classWriter0 . visitInnerClass ( ( String ) null , "" , ( String ) null , 0 ) ; classWriter0 . visitInnerClass ( " < K'' . #mL" , " < K'' . #mL" , " < K'' . #mL" , ( - 556 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitInnerClass ( String name , String outerName , String innerName , int access ) { cv . visitInnerClass ( name , outerName , innerName , access ) ; }
void test12 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; classWriter0 . visitInnerClass ( "" , ( String ) null , "" , 192 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitInnerClass ( String name , String outerName , String innerName , int access ) { cv . visitInnerClass ( name , outerName , innerName , access ) ; }
void test13 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; classWriter0 . visitField ( 0 , "" , "" , "" , ( Object ) "en" ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test14 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "sM ] X" ; stringArray0 [ 1 ] = "" ; classWriter0 . visitMethod ( ( - 444 ) , "sM ] X" , "" , "" , stringArray0 ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test15 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "sM ] X" ; stringArray0 [ 1 ] = "" ; classWriter0 . visit ( ( - 444 ) , ( - 444 ) , "" , "" , "" , stringArray0 ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test16 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 444 ) ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "sM ] X" ; stringArray0 [ 1 ] = "" ; classWriter0 . visit ( ( - 444 ) , ( - 444 ) , "" , "" , "" , stringArray0 ) ; classWriter0 . version = 0 ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test17 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; classWriter0 . visitInnerClass ( ( String ) null , "" , ( String ) null , 0 ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test18 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 183 ) ; classWriter0 . visitAnnotation ( " ? expires = " , false ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test20 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 127 ) ; classWriter0 . visitField ( 127 , "" , "" , "" , ( Object ) classWriter0 . invalidFrames ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { return cv . visitField ( access , name , desc , signature , value ) ; }
void test21 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int newConst ( Object cst ) { return newConstItem ( cst ) . index ; }
void test22 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 497 ) ; int int0 = classWriter0 . newMethod ( "NQjkh\" ? a , " , "NQjkh\" ? a , " , "NQjkh\" ? a , " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int newMethod ( String owner , String name , String desc , boolean itf ) { return newMethodItem ( owner , name , desc , itf ) . index ; }
void test23 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1289 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int newMethod ( String owner , String name , String desc , boolean itf ) { return newMethodItem ( owner , name , desc , itf ) . index ; }
void test24 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 0 ) ; classWriter0 . newField ( "" , "" , "" ) ; int int0 = classWriter0 . newNameType ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int newNameType ( String name , String desc ) { key2 . set ( NAME_TYPE , name , desc , null ) ; Item result = get ( key2 ) ; if ( result = = null ) { put122 ( NAME_TYPE , newUTF8 ( name ) , newUTF8 ( desc ) ) ; result = new Item ( index + + , key2 ) ; put ( result ) ; } return result . index ; }
void test25 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 2038 ) ) ; classWriter0 . addType ( "S / " ) ; int int0 = classWriter0 . addType ( "S / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int addType ( String type ) { key . set ( TYPE_NORMAL , type , null , null ) ; Item result = get ( key ) ; if ( result = = null ) { result = addType ( key ) ; } return result . index ; }
void test26 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 2038 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int addUninitializedType ( String type , int offset ) { key . type = TYPE_UNINIT ; key . intVal = offset ; key . strVal1 = type ; key . hashCode = 0x7FFFFFFF & ( TYPE_UNINIT + type . hashCode ( ) + offset ) ; Item result = get ( key ) ; if ( result = = null ) { result = addType ( key ) ; } return result . index ; }
void test28 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 2038 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int addType ( String type ) { key . set ( TYPE_NORMAL , type , null , null ) ; Item result = get ( key ) ; if ( result = = null ) { result = addType ( key ) ; } return result . index ; }
void test29 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1874 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitSource ( String source , String debug ) { cv . visitSource ( source , debug ) ; }
void test30 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 1893 ) ) ; classWriter0 . visitSource ( "" , "" ) ; classWriter0 . threshold = ( - 779 ) ; classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test0 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1602 ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , 1602 , "" , "" , "" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitAttribute ( Attribute attr ) { cv . visitAttribute ( attr ) ; }
void test1 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test2 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test3 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test4 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; fieldWriter0 . visitAnnotation ( "kt > pY * K - { 9^" , true ) ; byte [ ] byteArray0 = classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test5 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , 42 , "kt > pY * K - { 9^" , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( String ) null , ( Object ) null ) ; byte [ ] byteArray0 = classWriter0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { / / computes the real size of the bytecode of this class int size = 24 + 2 * interfaceCount ; int nbFields = 0 ; FieldWriter fb = firstField ; while ( fb ! = null ) { + + nbFields ; size + = fb . getSize ( ) ; fb = fb . next ; } int nbMethods = 0 ; MethodWriter mb = firstMethod ; while ( mb ! = null ) { + + nbMethods ; size + = mb . getSize ( ) ; mb = mb . next ; } int attributeCount = 0 ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "Signature" ) ; } if ( sourceFile ! = 0 ) { + + attributeCount ; size + = 8 ; newUTF8 ( "SourceFile" ) ; } if ( sourceDebug ! = null ) { + + attributeCount ; size + = sourceDebug . length + 4 ; newUTF8 ( "SourceDebugExtension" ) ; } if ( enclosingMethodOwner ! = 0 ) { + + attributeCount ; size + = 10 ; newUTF8 ( "EnclosingMethod" ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Deprecated" ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { + + attributeCount ; size + = 6 ; newUTF8 ( "Synthetic" ) ; } if ( innerClasses ! = null ) { + + attributeCount ; size + = 8 + innerClasses . length ; newUTF8 ( "InnerClasses" ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; size + = 8 + anns . getSize ( ) ; newUTF8 ( "RuntimeVisibleAnnotations" ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; size + = 8 + ianns . getSize ( ) ; newUTF8 ( "RuntimeInvisibleAnnotations" ) ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; size + = attrs . getSize ( this , null , 0 , - 1 , - 1 ) ; } size + = pool . length ; / / allocates a byte vector of this size , in order to avoid unnecessary / / arraycopy operations in the ByteVector . enlarge ( ) method ByteVector out = new ByteVector ( size ) ; out . putInt ( 0xCAFEBABE ) . putInt ( version ) ; out . putShort ( index ) . putByteArray ( pool . data , 0 , pool . length ) ; out . putShort ( access ) . putShort ( name ) . putShort ( superName ) ; out . putShort ( interfaceCount ) ; for ( int i = 0 ; i < interfaceCount ; + + i ) { out . putShort ( interfaces [ i ] ) ; } out . putShort ( nbFields ) ; fb = firstField ; while ( fb ! = null ) { fb . put ( out ) ; fb = fb . next ; } out . putShort ( nbMethods ) ; mb = firstMethod ; while ( mb ! = null ) { mb . put ( out ) ; mb = mb . next ; } out . putShort ( attributeCount ) ; if ( ClassReader . SIGNATURES & & signature ! = 0 ) { out . putShort ( newUTF8 ( "Signature" ) ) . putInt ( 2 ) . putShort ( signature ) ; } if ( sourceFile ! = 0 ) { out . putShort ( newUTF8 ( "SourceFile" ) ) . putInt ( 2 ) . putShort ( sourceFile ) ; } if ( sourceDebug ! = null ) { int len = sourceDebug . length - 2 ; out . putShort ( newUTF8 ( "SourceDebugExtension" ) ) . putInt ( len ) ; out . putByteArray ( sourceDebug . data , 2 , len ) ; } if ( enclosingMethodOwner ! = 0 ) { out . putShort ( newUTF8 ( "EnclosingMethod" ) ) . putInt ( 4 ) ; out . putShort ( enclosingMethodOwner ) . putShort ( enclosingMethod ) ; } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = 0 ) { out . putShort ( newUTF8 ( "Deprecated" ) ) . putInt ( 0 ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = 0 & & ( version & 0xffff ) < Opcodes . V1_5 ) { out . putShort ( newUTF8 ( "Synthetic" ) ) . putInt ( 0 ) ; } if ( innerClasses ! = null ) { out . putShort ( newUTF8 ( "InnerClasses" ) ) ; out . putInt ( innerClasses . length + 2 ) . putShort ( innerClassesCount ) ; out . putByteArray ( innerClasses . data , 0 , innerClasses . length ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( newUTF8 ( "RuntimeVisibleAnnotations" ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( newUTF8 ( "RuntimeInvisibleAnnotations" ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( this , null , 0 , - 1 , - 1 , out ) ; } if ( invalidFrames ) { ClassWriter cw = new ClassWriter ( COMPUTE_FRAMES ) ; new ClassReader ( out . data ) . accept ( cw , ClassReader . SKIP_FRAMES ) ; return cw . toByteArray ( ) ; } return out . data ; }
void test6 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test7 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test8 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test9 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 407 ) ) ; FieldWriter fieldWriter0 = new FieldWriter ( classWriter0 , ( - 407 ) , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " , ( Object ) "NotFileFilter ( AgeFileFilter ( < = - 407 ) ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test0 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test1 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Object" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccess ( ) { return readUnsignedShort ( header ) ; }
void test2 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ClassVisitor classVisitor , int flags ) { accept ( classVisitor , new Attribute [ 0 ] , flags ) ; }
void test3 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccess ( ) { return readUnsignedShort ( header ) ; }
void test5 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test6 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / String" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSuperName ( ) { int n = items [ readUnsignedShort ( header + 4 ) ] ; return n = = 0 ? null : readUTF8 ( n , new char [ maxStringLength ] ) ; }
void test7 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Object" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccess ( ) { return readUnsignedShort ( header ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 24 ] ; ClassReader classReader0 = new ClassReader ( byteArray0 ) ; String [ ] stringArray0 = classReader0 . getInterfaces ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getInterfaces ( ) { int index = header + 6 ; int n = readUnsignedShort ( index ) ; String [ ] interfaces = new String [ n ] ; if ( n > 0 ) { char [ ] buf = new char [ maxStringLength ] ; for ( int i = 0 ; i < n ; + + i ) { index + = 2 ; interfaces [ i ] = readClass ( index , buf ) ; } } return interfaces ; }
void test9 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / Class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test11 ( ) throws Throwable { ClassReader classReader0 = new ClassReader ( "java / lang / String" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test0 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( ( double ) 6 ) ; Item item1 = new Item ( 6 ) ; item0 . isEqualTo ( item1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test1 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( ( long ) 0 ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test2 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( ( float ) 4 ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test3 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( 1 , "hD ) S416tn" , "hD ) S416tn" , "hD ) S416tn" ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test7 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( 9 , "Er$" , "Er$" , "Er$" ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test8 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( 11 , "hD ) S416tn" , "hD ) S416tn" , "hD ) S416tn" ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test9 ( ) throws Throwable { Item item0 = new Item ( 12 ) ; item0 . set ( 12 , "^" , "^" , "^" ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test10 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( 0 , "" , "" , "" ) ; Item item1 = new Item ( 3 ) ; boolean boolean0 = item1 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test12 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( ( double ) 6 ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test13 ( ) throws Throwable { Item item0 = new Item ( 14 ) ; item0 . set ( 14 , "" , "" , "" ) ; boolean boolean0 = item0 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test14 ( ) throws Throwable { Item item0 = new Item ( ( - 52 ) ) ; item0 . set ( ( - 52 ) ) ; Item item1 = new Item ( 2147483599 , item0 ) ; item0 . set ( 3 ) ; boolean boolean0 = item0 . isEqualTo ( item1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test15 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . set ( ( double ) 6 ) ; Item item1 = new Item ( 6 ) ; item1 . set ( 6 , "Xzc`5" , "Xzc`5" , "Xzc`5" ) ; boolean boolean0 = item1 . isEqualTo ( item0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqualTo ( Item i ) { if ( i . type = = type ) { switch ( type ) { case ClassWriter . INT : case ClassWriter . FLOAT : return i . intVal = = intVal ; case ClassWriter . TYPE_MERGED : case ClassWriter . LONG : case ClassWriter . DOUBLE : return i . longVal = = longVal ; case ClassWriter . UTF8 : case ClassWriter . STR : case ClassWriter . CLASS : case ClassWriter . TYPE_NORMAL : return i . strVal1 . equals ( strVal1 ) ; case ClassWriter . TYPE_UNINIT : return i . intVal = = intVal & & i . strVal1 . equals ( strVal1 ) ; case ClassWriter . NAME_TYPE : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) ; / / ClassWriter . FIELD : / / ClassWriter . METH : / / ClassWriter . IMETH : default : return i . strVal1 . equals ( strVal1 ) & & i . strVal2 . equals ( strVal2 ) & & i . strVal3 . equals ( strVal3 ) ; } } return false ; }
void test0 ( ) throws Throwable { Class < ? > class0 = AccessibleObject . class ; Type type0 = Type . getType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescriptor ( ) { StringBuffer buf = new StringBuffer ( ) ; getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test1 ( ) throws Throwable { Type type0 = Type . getType ( " [ K0 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescriptor ( ) { StringBuffer buf = new StringBuffer ( ) ; getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test2 ( ) throws Throwable { Class < ? > class0 = Object . class ; String string0 = Type . getInternalName ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternalName ( ) { return new String ( buf , off , len ) ; }
void test3 ( ) throws Throwable { Type type0 = Type . INT_TYPE ; String string0 = type0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test6 ( ) throws Throwable { Type type0 = Type . getObjectType ( "PZWJYwl#n4EJI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test7 ( ) throws Throwable { Type type0 = Type . getObjectType ( " [ K0 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test8 ( ) throws Throwable { Type [ ] typeArray0 = Type . getArgumentTypes ( " ( ZZCCZZZZ ) Z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type [ ] getArgumentTypes ( String methodDescriptor ) { char [ ] buf = methodDescriptor . toCharArray ( ) ; int off = 1 ; int size = 0 ; while ( true ) { char car = buf [ off + + ] ; if ( car = = ' ) ' ) { break ; } else if ( car = = 'L' ) { while ( buf [ off + + ] ! = ' ; ' ) { } + + size ; } else if ( car ! = ' [ ' ) { + + size ; } } Type [ ] args = new Type [ size ] ; off = 1 ; size = 0 ; while ( buf [ off ] ! = ' ) ' ) { args [ size ] = getType ( buf , off ) ; off + = args [ size ] . len + ( args [ size ] . sort = = OBJECT ? 2 : 0 ) ; size + = 1 ; } return args ; }
void test12 ( ) throws Throwable { Type type0 = Type . getReturnType ( "Bmlp6HB\"29hY_Y & f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test13 ( ) throws Throwable { Type type0 = Type . getType ( "Dv~ . qB6@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test15 ( ) throws Throwable { Type type0 = Type . getReturnType ( "F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test16 ( ) throws Throwable { Type type0 = Type . getType ( "I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test17 ( ) throws Throwable { Type type0 = Type . getReturnType ( "J_Ek @svUD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test18 ( ) throws Throwable { Type type0 = Type . getType ( " [ K0 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getElementType ( ) { return getType ( buf , off + getDimensions ( ) ) ; }
void test25 ( ) throws Throwable { Type type0 = Type . getType ( " [ S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternalName ( ) { return new String ( buf , off , len ) ; }
void test27 ( ) throws Throwable { Type type0 = Type . getReturnType ( " ( VV ) V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test32 ( ) throws Throwable { Type type0 = Type . VOID_TYPE ; String string0 = type0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test33 ( ) throws Throwable { Type type0 = Type . BOOLEAN_TYPE ; String string0 = type0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test34 ( ) throws Throwable { Type [ ] typeArray0 = new Type [ 8 ] ; Type type0 = Type . CHAR_TYPE ; typeArray0 [ 2 ] = type0 ; String string0 = typeArray0 [ 2 ] . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test35 ( ) throws Throwable { Type type0 = Type . BYTE_TYPE ; String string0 = type0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test36 ( ) throws Throwable { Type type0 = Type . INT_TYPE ; String string0 = type0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test37 ( ) throws Throwable { Type type0 = Type . FLOAT_TYPE ; String string0 = type0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test38 ( ) throws Throwable { Type type0 = Type . LONG_TYPE ; String string0 = type0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test39 ( ) throws Throwable { Type type0 = Type . getObjectType ( "WQ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSort ( ) { return sort ; }
void test41 ( ) throws Throwable { Type type0 = Type . BOOLEAN_TYPE ; Type [ ] typeArray0 = new Type [ 8 ] ; typeArray0 [ 0 ] = type0 ; typeArray0 [ 1 ] = type0 ; Type type1 = Type . CHAR_TYPE ; typeArray0 [ 2 ] = type1 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodDescriptor ( Type returnType , Type [ ] argumentTypes ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ' ( ' ) ; for ( int i = 0 ; i < argumentTypes . length ; + + i ) { argumentTypes [ i ] . getDescriptor ( buf ) ; } buf . append ( ' ) ' ) ; returnType . getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test42 ( ) throws Throwable { Type type0 = Type . DOUBLE_TYPE ; Type [ ] typeArray0 = new Type [ 5 ] ; typeArray0 [ 0 ] = type0 ; typeArray0 [ 1 ] = type0 ; typeArray0 [ 2 ] = type0 ; typeArray0 [ 3 ] = type0 ; Type type1 = Type . BYTE_TYPE ; typeArray0 [ 4 ] = type1 ; String string0 = Type . getMethodDescriptor ( type0 , typeArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodDescriptor ( Type returnType , Type [ ] argumentTypes ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ' ( ' ) ; for ( int i = 0 ; i < argumentTypes . length ; + + i ) { argumentTypes [ i ] . getDescriptor ( buf ) ; } buf . append ( ' ) ' ) ; returnType . getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test44 ( ) throws Throwable { Type type0 = Type . FLOAT_TYPE ; String string0 = type0 . getDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescriptor ( ) { StringBuffer buf = new StringBuffer ( ) ; getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test45 ( ) throws Throwable { Type type0 = Type . DOUBLE_TYPE ; Type [ ] typeArray0 = new Type [ 5 ] ; Type type1 = Type . LONG_TYPE ; typeArray0 [ 0 ] = type1 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodDescriptor ( Type returnType , Type [ ] argumentTypes ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ' ( ' ) ; for ( int i = 0 ; i < argumentTypes . length ; + + i ) { argumentTypes [ i ] . getDescriptor ( buf ) ; } buf . append ( ' ) ' ) ; returnType . getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test46 ( ) throws Throwable { Type type0 = Type . getType ( " [ S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescriptor ( ) { StringBuffer buf = new StringBuffer ( ) ; getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test47 ( ) throws Throwable { Type type0 = Type . getObjectType ( "J_Ek @svUD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSort ( ) { return sort ; }
void test48 ( ) throws Throwable { Type type0 = Type . BOOLEAN_TYPE ; int int0 = type0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test49 ( ) throws Throwable { Type type0 = Type . DOUBLE_TYPE ; int int0 = type0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test50 ( ) throws Throwable { Type type0 = Type . VOID_TYPE ; int int0 = type0 . getOpcode ( 46 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test51 ( ) throws Throwable { Type type0 = Type . BOOLEAN_TYPE ; int int0 = type0 . getOpcode ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test52 ( ) throws Throwable { Type type0 = Type . DOUBLE_TYPE ; int int0 = type0 . getOpcode ( 79 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test53 ( ) throws Throwable { Type type0 = Type . SHORT_TYPE ; int int0 = type0 . getOpcode ( 79 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test54 ( ) throws Throwable { Type [ ] typeArray0 = new Type [ 8 ] ; Type type0 = Type . FLOAT_TYPE ; typeArray0 [ 3 ] = type0 ; int int0 = typeArray0 [ 3 ] . getOpcode ( 79 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test55 ( ) throws Throwable { Type type0 = Type . VOID_TYPE ; int int0 = type0 . getOpcode ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test56 ( ) throws Throwable { Type type0 = Type . CHAR_TYPE ; int int0 = type0 . getOpcode ( ( - 1479 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test57 ( ) throws Throwable { Type type0 = Type . BYTE_TYPE ; int int0 = type0 . getOpcode ( 65 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test58 ( ) throws Throwable { Type type0 = Type . SHORT_TYPE ; int int0 = type0 . getOpcode ( 45 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test59 ( ) throws Throwable { Type type0 = Type . INT_TYPE ; int int0 = type0 . getOpcode ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test60 ( ) throws Throwable { Type type0 = Type . FLOAT_TYPE ; int int0 = type0 . getOpcode ( ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test61 ( ) throws Throwable { Type type0 = Type . LONG_TYPE ; int int0 = type0 . getOpcode ( ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test62 ( ) throws Throwable { Type type0 = Type . DOUBLE_TYPE ; int int0 = type0 . getOpcode ( 76 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpcode ( int opcode ) { if ( opcode = = Opcodes . IALOAD | | opcode = = Opcodes . IASTORE ) { switch ( sort ) { case BOOLEAN : case BYTE : return opcode + 5 ; case CHAR : return opcode + 6 ; case SHORT : return opcode + 7 ; case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } else { switch ( sort ) { case VOID : return opcode + 5 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : return opcode ; case FLOAT : return opcode + 2 ; case LONG : return opcode + 1 ; case DOUBLE : return opcode + 3 ; / / case ARRAY : / / case OBJECT : default : return opcode + 4 ; } } }
void test63 ( ) throws Throwable { Type type0 = Type . getObjectType ( "J_Ek @svUD" ) ; int int0 = type0 . getOpcode ( 91 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescriptor ( ) { StringBuffer buf = new StringBuffer ( ) ; getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test64 ( ) throws Throwable { Type type0 = Type . getType ( "Dv~ . qB6@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test65 ( ) throws Throwable { Type type0 = Type . getReturnType ( "J_Ek @svUD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test66 ( ) throws Throwable { Type type0 = Type . getType ( " [ K0 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescriptor ( ) { StringBuffer buf = new StringBuffer ( ) ; getDescriptor ( buf ) ; return buf . toString ( ) ; }
void test67 ( ) throws Throwable { Type type0 = Type . getObjectType ( "java / lang / Object" ) ; int int0 = type0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( fileUri ! = null ? fileUri . hashCode ( ) : 0 ) ; }
void test68 ( ) throws Throwable { Type type0 = Type . INT_TYPE ; int int0 = type0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( fileUri ! = null ? fileUri . hashCode ( ) : 0 ) ; }
void test69 ( ) throws Throwable { Type type0 = Type . getType ( " [ S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDimensions ( ) { int i = 1 ; while ( buf [ off + i ] = = ' [ ' ) { + + i ; } return i ; }
void test0 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " { Ng : N w * : kx" ) ; boolean boolean0 = attribute0 . isCodeAttribute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCodeAttribute ( ) { return false ; }
void test2 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "StackMapTable" ) ; boolean boolean0 = attribute0 . isUnknown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnknown ( ) { return true ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "$HiSaDg^ ! , 6_c ? " ) ; Label [ ] labelArray0 = attribute0 . getLabels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Label [ ] getLabels ( ) { return null ; }
void test4 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "StackMapTable" ) ; int int0 = attribute0 . getCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { int count = 0 ; Attribute attr = this ; while ( attr ! = null ) { count + = 1 ; attr = attr . next ; } return count ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "" ) ; byte [ ] byteArray0 = new byte [ 7 ] ; attribute0 . value = byteArray0 ; ClassWriter classWriter0 = new ClassWriter ( ( - 1804 ) ) ; int int0 = attribute0 . getSize ( classWriter0 , attribute0 . value , ( int ) ( byte ) 68 , 63 , 64 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test6 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "$HiSaDg^ ! , 6_c ? " ) ; ClassWriter classWriter0 = new ClassWriter ( ( - 2034 ) ) ; byte [ ] byteArray0 = new byte [ 3 ] ; attribute0 . value = byteArray0 ; ByteVector byteVector0 = new ByteVector ( ( int ) ( byte ) 0 ) ; attribute0 . put ( classWriter0 , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , byteVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { int count = 0 ; Attribute attr = this ; while ( attr ! = null ) { count + = 1 ; attr = attr . next ; } return count ; }
void test1 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1532 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " ! 9G7xpc~ > " ; stringArray0 [ 1 ] = " ! 9G7xpc~ > " ; stringArray0 [ 2 ] = " ! 9G7xpc~ > " ; stringArray0 [ 3 ] = " ! 9G7xpc~ > " ; stringArray0 [ 4 ] = " ! 9G7xpc~ > " ; stringArray0 [ 5 ] = " ! 9G7xpc~ > " ; MethodVisitor methodVisitor0 = classWriter0 . visitMethod ( 1532 , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; Label label0 = new Label ( ) ; methodAdapter0 . visitLocalVariable ( " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , label0 , label0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( ( - 524 ) ) ; ClassAdapter classAdapter0 = new ClassAdapter ( ( ClassVisitor ) classWriter0 ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; MethodVisitor methodVisitor0 = classAdapter0 . visitMethod ( ( - 524 ) , "" , "" , "" , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; Label label0 = new Label ( ) ; methodAdapter0 . visitJumpInsn ( ( - 524 ) , label0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test13 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1532 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " ! 9G7xpc~ > " ; stringArray0 [ 1 ] = " ! 9G7xpc~ > " ; stringArray0 [ 2 ] = " ! 9G7xpc~ > " ; stringArray0 [ 3 ] = " ! 9G7xpc~ > " ; stringArray0 [ 4 ] = " ! 9G7xpc~ > " ; stringArray0 [ 5 ] = " ! 9G7xpc~ > " ; MethodVisitor methodVisitor0 = classWriter0 . visitMethod ( 1532 , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; Label label0 = new Label ( ) ; methodAdapter0 . visitLineNumber ( 1532 , label0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test14 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1532 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " ! 9G7xpc~ > " ; stringArray0 [ 1 ] = " ! 9G7xpc~ > " ; stringArray0 [ 2 ] = " ! 9G7xpc~ > " ; stringArray0 [ 3 ] = " ! 9G7xpc~ > " ; stringArray0 [ 4 ] = " ! 9G7xpc~ > " ; stringArray0 [ 5 ] = " ! 9G7xpc~ > " ; MethodVisitor methodVisitor0 = classWriter0 . visitMethod ( 1532 , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; Label label0 = new Label ( ) ; methodAdapter0 . visitTryCatchBlock ( label0 , label0 , label0 , " ! 9G7xpc~ > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test17 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 28 ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; MethodVisitor methodVisitor0 = classWriter0 . visitMethod ( 28 , "" , "" , "" , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; Label label0 = new Label ( ) ; methodAdapter0 . visitLabel ( label0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test18 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1532 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " ! 9G7xpc~ > " ; stringArray0 [ 1 ] = " ! 9G7xpc~ > " ; stringArray0 [ 2 ] = " ! 9G7xpc~ > " ; stringArray0 [ 3 ] = " ! 9G7xpc~ > " ; stringArray0 [ 4 ] = " ! 9G7xpc~ > " ; stringArray0 [ 5 ] = " ! 9G7xpc~ > " ; MethodVisitor methodVisitor0 = classWriter0 . visitMethod ( 1532 , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; AnnotationVisitor annotationVisitor0 = methodAdapter0 . visitAnnotation ( " ! 9G7xpc~ > " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { return cv . visitAnnotation ( desc , visible ) ; }
void test19 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1532 ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " ! 9G7xpc~ > " ; stringArray0 [ 1 ] = " ! 9G7xpc~ > " ; stringArray0 [ 2 ] = " ! 9G7xpc~ > " ; stringArray0 [ 3 ] = " ! 9G7xpc~ > " ; stringArray0 [ 4 ] = " ! 9G7xpc~ > " ; stringArray0 [ 5 ] = " ! 9G7xpc~ > " ; MethodVisitor methodVisitor0 = classWriter0 . visitMethod ( 1532 , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , " ! 9G7xpc~ > " , stringArray0 ) ; MethodAdapter methodAdapter0 = new MethodAdapter ( methodVisitor0 ) ; AnnotationVisitor annotationVisitor0 = methodAdapter0 . visitAnnotationDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AnnotationVisitor visitAnnotationDefault ( ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } annd = new ByteVector ( ) ; return new AnnotationWriter ( cw , false , annd , null , 0 ) ; }
void test0 ( ) throws Throwable { Label label0 = new Label ( ) ; String string0 = label0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { Label label0 = new Label ( ) ; byte [ ] byteArray0 = new byte [ 24 ] ; label0 . resolve ( ( MethodWriter ) null , 25165807 , byteArray0 ) ; int int0 = label0 . getOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOffset ( ) { if ( ( status & RESOLVED ) = = 0 ) { throw new IllegalStateException ( "Label offset position has not been resolved yet" ) ; } return position ; }
void test3 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; byte [ ] byteArray0 = new byte [ 24 ] ; label0 . resolve ( ( MethodWriter ) null , 25165807 , byteArray0 ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 1024 , true ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , ( - 2047 ) , true ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 1024 , false ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; byte [ ] byteArray0 = new byte [ 24 ] ; label0 . resolve ( ( MethodWriter ) null , 25165807 , byteArray0 ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test6 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , ( - 2047 ) , true ) ; byte [ ] byteArray0 = new byte [ 24 ] ; label0 . resolve ( ( MethodWriter ) null , ( - 2047 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test7 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 1024 , true ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , ( - 2047 ) , true ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 1024 , false ) ; byte [ ] byteArray0 = new byte [ 24 ] ; boolean boolean0 = label0 . resolve ( ( MethodWriter ) null , 25165807 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean resolve ( MethodWriter owner , int position , byte [ ] data ) { boolean needUpdate = false ; this . status | = RESOLVED ; this . position = position ; int i = 0 ; while ( i < referenceCount ) { int source = srcAndRefPositions [ i + + ] ; int reference = srcAndRefPositions [ i + + ] ; int offset ; if ( source > = 0 ) { offset = position - source ; if ( offset < Short . MIN_VALUE | | offset > Short . MAX_VALUE ) { / * * changes the opcode of the jump instruction , in order to * be able to find it later ( see resizeInstructions in * MethodWriter ) . These temporary opcodes are similar to * jump instruction opcodes , except that the 2 bytes offset * is unsigned ( and can therefore represent values from 0 to * 65535 , which is sufficient since the size of a method is * limited to 65535 bytes ) . * / int opcode = data [ reference - 1 ] & 0xFF ; if ( opcode < = Opcodes . JSR ) { / / changes IFEQ . . . JSR to opcodes 202 to 217 data [ reference - 1 ] = ( byte ) ( opcode + 49 ) ; } else { / / changes IFNULL and IFNONNULL to opcodes 218 and 219 data [ reference - 1 ] = ( byte ) ( opcode + 20 ) ; } needUpdate = true ; } data [ reference + + ] = ( byte ) ( offset > > > 8 ) ; data [ reference ] = ( byte ) offset ; } else { offset = position + source + 1 ; data [ reference + + ] = ( byte ) ( offset > > > 24 ) ; data [ reference + + ] = ( byte ) ( offset > > > 16 ) ; data [ reference + + ] = ( byte ) ( offset > > > 8 ) ; data [ reference ] = ( byte ) offset ; } } return needUpdate ; }
void test8 ( ) throws Throwable { Label label0 = new Label ( ) ; label0 . getFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test9 ( ) throws Throwable { Label label0 = new Label ( ) ; label0 . visitSubroutine ( ( Label ) null , ( long ) 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test10 ( ) throws Throwable { Label label0 = new Label ( ) ; label0 . addToSubroutine ( ( long ) 0 , 0 ) ; boolean boolean0 = label0 . inSubroutine ( ( long ) 1024 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean inSubroutine ( long id ) { if ( ( status & Label . VISITED ) ! = 0 ) { return ( srcAndRefPositions [ ( int ) ( id > > > 32 ) ] & ( int ) id ) ! = 0 ; } return false ; }
void test11 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; label0 . visitSubroutine ( label0 , ( long ) 1024 , 1024 ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 1024 , true ) ; label0 . visitSubroutine ( ( Label ) null , ( long ) ( byte ) 1 , ( int ) ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test12 ( ) throws Throwable { Label label0 = new Label ( ) ; label0 . addToSubroutine ( ( long ) 0 , 0 ) ; boolean boolean0 = label0 . inSameSubroutine ( label0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean inSameSubroutine ( Label block ) { for ( int i = 0 ; i < srcAndRefPositions . length ; + + i ) { if ( ( srcAndRefPositions [ i ] & block . srcAndRefPositions [ i ] ) ! = 0 ) { return true ; } } return false ; }
void test13 ( ) throws Throwable { Label label0 = new Label ( ) ; ByteVector byteVector0 = new ByteVector ( ) ; label0 . put ( ( MethodWriter ) null , byteVector0 , 1024 , true ) ; boolean boolean0 = label0 . inSameSubroutine ( label0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test15 ( ) throws Throwable { Label label0 = new Label ( ) ; label0 . visitSubroutine ( label0 , ( long ) 1024 , 1024 ) ; label0 . visitSubroutine ( label0 , ( long ) 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test23 ( ) throws Throwable { Frame frame0 = new Frame ( ) ; Frame frame1 = new Frame ( ) ; ClassWriter classWriter0 = new ClassWriter ( 318 ) ; Type [ ] typeArray0 = new Type [ 1 ] ; Type type0 = Type . SHORT_TYPE ; typeArray0 [ 0 ] = type0 ; frame1 . initInputFrame ( classWriter0 , ( - 1099 ) , typeArray0 , 1542 ) ; frame1 . merge ( classWriter0 , frame0 , 318 ) ; int [ ] intArray0 = new int [ 4 ] ; frame1 . inputLocals = intArray0 ; boolean boolean0 = frame1 . merge ( classWriter0 , frame0 , 1696 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean merge ( ClassWriter cw , Frame frame , int edge ) { boolean changed = false ; int i , s , dim , kind , t ; int nLocal = inputLocals . length ; int nStack = inputStack . length ; if ( frame . inputLocals = = null ) { frame . inputLocals = new int [ nLocal ] ; changed = true ; } for ( i = 0 ; i < nLocal ; + + i ) { if ( outputLocals ! = null & & i < outputLocals . length ) { s = outputLocals [ i ] ; if ( s = = 0 ) { t = inputLocals [ i ] ; } else { dim = s & DIM ; kind = s & KIND ; if ( kind = = LOCAL ) { t = dim + inputLocals [ s & VALUE ] ; } else if ( kind = = STACK ) { t = dim + inputStack [ nStack - ( s & VALUE ) ] ; } else { t = s ; } } } else { t = inputLocals [ i ] ; } if ( initializations ! = null ) { t = init ( cw , t ) ; } changed | = merge ( cw , t , frame . inputLocals , i ) ; } if ( edge > 0 ) { for ( i = 0 ; i < nLocal ; + + i ) { t = inputLocals [ i ] ; changed | = merge ( cw , t , frame . inputLocals , i ) ; } if ( frame . inputStack = = null ) { frame . inputStack = new int [ 1 ] ; changed = true ; } changed | = merge ( cw , edge , frame . inputStack , 0 ) ; return changed ; } int nInputStack = inputStack . length + owner . inputStackTop ; if ( frame . inputStack = = null ) { frame . inputStack = new int [ nInputStack + outputStackTop ] ; changed = true ; } for ( i = 0 ; i < nInputStack ; + + i ) { t = inputStack [ i ] ; if ( initializations ! = null ) { t = init ( cw , t ) ; } changed | = merge ( cw , t , frame . inputStack , i ) ; } for ( i = 0 ; i < outputStackTop ; + + i ) { s = outputStack [ i ] ; dim = s & DIM ; kind = s & KIND ; if ( kind = = LOCAL ) { t = dim + inputLocals [ s & VALUE ] ; } else if ( kind = = STACK ) { t = dim + inputStack [ nStack - ( s & VALUE ) ] ; } else { t = s ; } if ( initializations ! = null ) { t = init ( cw , t ) ; } changed | = merge ( cw , t , frame . inputStack , nInputStack + i ) ; } return changed ; }
void test0 ( ) throws Throwable { File file0 = new File ( " - / / W3C / / ENTITIES Special for XHTML / / EN" , "3gsM . F" ) ; Xhtml2Wheel xhtml2Wheel0 = new Xhtml2Wheel ( file0 , " - / / W3C / / ENTITIES Special for XHTML / / EN" ) ; InputSource inputSource0 = xhtml2Wheel0 . resolveEntity ( " - / / W3C / / ENTITIES Special for XHTML / / EN" , "3gsM . F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputSource resolveEntity ( String publicId , String systemId ) throws IOException , SAXException { InputSource is = null ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - transitional . dtd" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Latin 1 for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - lat1 . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Symbols for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - symbol . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Special for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - special . ent" ) ) ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Strict / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - strict . dtd" ) ) ; else return super . resolveEntity ( publicId , systemId ) ; return is ; }
void test2 ( ) throws Throwable { File file0 = new File ( " { ] 0s : r . 0~" , " { ] 0s : r . 0~" ) ; Xhtml2Wheel xhtml2Wheel0 = new Xhtml2Wheel ( file0 , " { ] 0s : r . 0~" ) ; Attributes2Impl attributes2Impl0 = new Attributes2Impl ( ) ; xhtml2Wheel0 . startElement ( "option" , " { ] 0s : r . 0~" , "option" , ( Attributes ) attributes2Impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startElement ( String uri , String localName , String qName , Attributes attributesA ) throws SAXException { previousNode = currentNode ; currentNode = new Node ( qName . toLowerCase ( ) , attributesA ) ; if ( currentNode . name . equals ( "html" ) | | currentNode . name . equals ( "body" ) | | currentNode . name . equals ( "head" ) | | currentNode . name . equals ( "option" ) ) { currentNode . skip = true ; openNodes . push ( currentNode ) ; return ; } openNode ( currentNode ) ; }
void test6 ( ) throws Throwable { File file0 = new File ( " - / / W3C / / ENTITIES Special for XHTML / / EN" , "3gsM . F" ) ; Xhtml2Wheel xhtml2Wheel0 = new Xhtml2Wheel ( file0 , " - / / W3C / / ENTITIES Special for XHTML / / EN" ) ; InputSource inputSource0 = xhtml2Wheel0 . resolveEntity ( " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN" , " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputSource resolveEntity ( String publicId , String systemId ) throws IOException , SAXException { InputSource is = null ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - transitional . dtd" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Latin 1 for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - lat1 . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Symbols for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - symbol . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Special for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - special . ent" ) ) ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Strict / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - strict . dtd" ) ) ; else return super . resolveEntity ( publicId , systemId ) ; return is ; }
void test7 ( ) throws Throwable { File file0 = new File ( "password" , "36 = . Q" ) ; Xhtml2Wheel xhtml2Wheel0 = new Xhtml2Wheel ( file0 , "36 = . Q" ) ; InputSource inputSource0 = xhtml2Wheel0 . resolveEntity ( " - / / W3C / / ENTITIES Latin 1 for XHTML / / EN" , " - / / W3C / / ENTITIES Latin 1 for XHTML / / EN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputSource resolveEntity ( String publicId , String systemId ) throws IOException , SAXException { InputSource is = null ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - transitional . dtd" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Latin 1 for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - lat1 . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Symbols for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - symbol . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Special for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - special . ent" ) ) ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Strict / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - strict . dtd" ) ) ; else return super . resolveEntity ( publicId , systemId ) ; return is ; }
void test8 ( ) throws Throwable { File file0 = new File ( "3 ] sr . = ~" ) ; Xhtml2Wheel xhtml2Wheel0 = new Xhtml2Wheel ( file0 , "3 ] sr . = ~" ) ; InputSource inputSource0 = xhtml2Wheel0 . resolveEntity ( "3 ] sr . = ~" , "3 ] sr . = ~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputSource resolveEntity ( String publicId , String systemId ) throws IOException , SAXException { InputSource is = null ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - transitional . dtd" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Latin 1 for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - lat1 . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Symbols for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - symbol . ent" ) ) ; else if ( publicId . equals ( " - / / W3C / / ENTITIES Special for XHTML / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml - special . ent" ) ) ; if ( publicId . equals ( " - / / W3C / / DTD XHTML 1 . 0 Strict / / EN" ) ) is = new InputSource ( getClass ( ) . getResourceAsStream ( "xhtml1 - strict . dtd" ) ) ; else return super . resolveEntity ( publicId , systemId ) ; return is ; }
void test0 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "NNb } Mb2" , "NNb } Mb2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "NNb } Mb2" , "NNb } Mb2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "Yw9v% 8Y9" , "Yw9v% 8Y9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "NNb } Mb2" , "NNb } Mb2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "N23 : 6WINk5 | I = z" , "N23 : 6WINk5 | I = z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "Yw9v% 8Y9" , "Yw9v% 8Y9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRequestSize ( ) { return maxRequestSize ; }
void test6 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "N23 : 6WINk5 | I = z" , "N23 : 6WINk5 | I = z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRequestSize ( ) { return maxRequestSize ; }
void test7 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "Yw9v% 8Y9" , "Yw9v% 8Y9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test8 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "b" , "b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void _setSubmitValue ( String [ ] value ) { this . value = value ; validate ( ) ; if ( isValid ( ) & & ! isEmpty ( ) ) { if ( binding instanceof ElExpression ) { try { ( ( ElExpression ) binding ) . store ( _getTopLevelComponent ( true ) , this , value [ 0 ] ) ; } catch ( Exception e ) { if ( validationErrors = = null ) validationErrors = new LinkedList < ValidationError > ( ) ; validationErrors . add ( new ValidationError ( eval ( message ( genericFieldErrorMessage ) ) , this ) ) ; addInternalRenderHint ( "error" ) ; } } } }
void test9 ( ) throws Throwable { FileInput fileInput0 = new FileInput ( ( Component ) null , "NNb } Mb2" , "NNb } Mb2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextInput textInput0 = new TextInput ( ( Component ) errorPage0 , "KcWf" , "KcWf" ) ; String string0 = textInput0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextInput textInput0 = new TextInput ( ( Component ) errorPage0 , "KcWf" , "KcWf" ) ; TextInput textInput1 = ( TextInput ) textInput0 . value ( "KcWf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Checkbox checkbox0 = new Checkbox ( errorPage0 , "a%PI p ] 46xeZG4" , "a%PI p ] 46xeZG4" ) ; ActionExpression actionExpression0 = checkbox0 . action ( "a%PI p ] 46xeZG4" ) ; Form form0 = ( Form ) errorPage0 . form ( "a%PI p ] 46xeZG4" , actionExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPageRewinding ( ) { return getPage ( ) . rewinding ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ErrorPage errorPage1 = ( ErrorPage ) errorPage0 . requestFocus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; errorPage0 . loadJQuery ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPage ( ) { return this . getParent ( ) = = null ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; String string0 = errorPage0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; errorPage0 . _setSubmittedForm ( ( Form ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRewinding ( ) { StandaloneComponent page = getPage ( ) ; if ( page . isPageRewinding ( ) & & page . _getSubmitTarget ( ) . equals ( getComponentId ( ) ) ) return true ; return false ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; boolean boolean0 = errorPage0 . isValid ( "a%PI p ] 46xeZG4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPageRewinding ( ) { return getPage ( ) . rewinding ; }
void test9 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; List < ValidationError > list0 = errorPage0 . listErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRewinding ( ) { StandaloneComponent page = getPage ( ) ; if ( page . isPageRewinding ( ) & & page . _getSubmitTarget ( ) . equals ( getComponentId ( ) ) ) return true ; return false ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; errorPage0 . getError ( " * > ! Y% : K ] [ V / s7 ( = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRewinding ( ) { StandaloneComponent page = getPage ( ) ; if ( page . isPageRewinding ( ) & & page . _getSubmitTarget ( ) . equals ( getComponentId ( ) ) ) return true ; return false ; }
void test11 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; errorPage0 . afterAdd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test12 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; errorPage0 . _postProcessRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test0 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "href" ) ; xmlEntityRef0 . _renderXhtmlAttributes ( ( XmlSerializer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( errorPage0 , "MAjAJOv% ) x" ) ; TableRow tableRow0 = ( TableRow ) tableBlock0 . tr ( ) ; List < RenderableComponent > list0 = tableRow0 . _getRenderBeforeMe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < RenderableComponent > _getRenderBeforeMe ( ) { return renderBeforeMe ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( errorPage0 , " & > > ya - " ) ; Any any0 = tableBlock0 . col ( ) ; any0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextArea textArea0 = new TextArea ( ( Component ) errorPage0 , "" , "" ) ; Table table0 = new Table ( textArea0 , "" ) ; Checkbox checkbox0 = new Checkbox ( table0 , "" , "" ) ; Checkbox checkbox1 = ( Checkbox ) checkbox0 . addRenderBefore ( ( Component ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( errorPage0 , "" ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . tfoot ( ) ; TableRow tableRow0 = ( TableRow ) tableBlock0 . tr ( ) ; TableRow tableRow1 = ( TableRow ) tableRow0 . addRenderAfter ( ( Component ) table0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component addRenderAfter ( Component renderable ) { if ( renderAfterMe = = null ) renderAfterMe = new LinkedList < RenderableComponent > ( ) ; if ( renderable instanceof RenderableComponent ) renderAfterMe . add ( ( RenderableComponent ) renderable ) ; else throw new WheelException ( "addRenderAfter expects an instance of RenderableComponent . " , this ) ; return this ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextArea textArea0 = new TextArea ( ( Component ) errorPage0 , "" , "" ) ; Link link0 = new Link ( errorPage0 , "" ) ; Table table0 = new Table ( textArea0 , "" ) ; TableRow tableRow0 = ( TableRow ) table0 . tr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( errorPage0 , "MAjAJOv% ) x" ) ; TableRow tableRow0 = ( TableRow ) tableBlock0 . tr ( ) ; Any any0 = new Any ( ( Component ) tableRow0 , ( CharSequence ) "MAjAJOv% ) x" ) ; Label label0 = ( Label ) errorPage0 . dt ( ( Object ) any0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( errorPage0 , "" ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . tfoot ( ) ; Text text0 = new Text ( errorPage0 , tableBlock0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test9 ( ) throws Throwable { Submit submit0 = new Submit ( ( Component ) null , "'T ! M" , "'T ! M" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { Radio radio0 = new Radio ( ( Component ) null , "9 > F4MG } ^ { ( iK" , "9 > F4MG } ^ { ( iK" ) ; String string0 = radio0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { Radio radio0 = new Radio ( ( Component ) null , "\" + 8 ( / x@9aPo# : $ , " , "\" + 8 ( / x@9aPo# : $ , " ) ; radio0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test3 ( ) throws Throwable { Radio radio0 = new Radio ( ( Component ) null , "9 > F4MG } ^ { ( iK" , "9 > F4MG } ^ { ( iK" ) ; Radio radio1 = ( Radio ) radio0 . value ( "9 > F4MG } ^ { ( iK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; DateInput dateInput0 = new DateInput ( errorPage0 , "FLjx < " , "FLjx < " , "FLjx < " ) ; RenderableComponentConfiguration renderableComponentConfiguration0 = dateInput0 . config ( ) ; boolean boolean0 = renderableComponentConfiguration0 . isUseXhtml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseXhtml ( ) { return forComponent . useXhtml ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; DateInput dateInput0 = new DateInput ( errorPage0 , "FLjx < " , "FLjx < " , "FLjx < " ) ; RenderableComponentConfiguration renderableComponentConfiguration0 = dateInput0 . config ( ) ; boolean boolean0 = renderableComponentConfiguration0 . isRenderId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderId ( ) { return forComponent . renderId ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = ( StandaloneComponentConfiguration ) standaloneComponentConfiguration0 . setRenderId ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderId ( ) { return forComponent . renderId ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Any any0 = new Any ( ( Component ) errorPage0 , ( CharSequence ) null ) ; RenderableComponentConfiguration renderableComponentConfiguration0 = any0 . config ( ) ; renderableComponentConfiguration0 . setVisible ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return forComponent . visible ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . setUseXhtml ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseXhtml ( ) { return forComponent . useXhtml ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = ( StandaloneComponentConfiguration ) standaloneComponentConfiguration0 . setRenderSelf ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderSelf ( ) { return forComponent . renderSelf ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . isRenderSelf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderSelf ( ) { return forComponent . renderSelf ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return forComponent . visible ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; CheckboxGroup checkboxGroup0 = new CheckboxGroup ( ( Component ) errorPage0 , "gdl { ] u ? " , "gdl { ] u ? " , ( ISelectModel ) null , ( ElExpression ) null ) ; String string0 = checkboxGroup0 . defaultTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; CheckboxGroup checkboxGroup0 = new CheckboxGroup ( ( Component ) errorPage0 , "gdl { ] u ? " , "gdl { ] u ? " , ( ISelectModel ) null , ( ElExpression ) null ) ; String [ ] stringArray0 = new String [ 1 ] ; checkboxGroup0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Image image0 = new Image ( ( Component ) errorPage0 , ( CharSequence ) null , ( CharSequence ) null ) ; String string0 = image0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { Submit submit0 = new Submit ( ( Component ) null , "9 > F4MG } ^ { ( iK" , "9 > F4MG } ^ { ( iK" ) ; String string0 = submit0 . getTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { Submit submit0 = new Submit ( ( Component ) null , "9 > F4MG } ^ { ( iK" , "9 > F4MG } ^ { ( iK" ) ; String string0 = submit0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { Submit submit0 = new Submit ( ( Component ) null , "9 > F4MG } ^ { ( iK" , "9 > F4MG } ^ { ( iK" ) ; Submit submit1 = ( Submit ) submit0 . value ( "9 > F4MG } ^ { ( iK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( "r" ) ; CheckboxGroup checkboxGroup0 = new CheckboxGroup ( errorPage0 , "r" , "r" , ( ISelectModel ) null , elExpression0 ) ; checkboxGroup0 . preBuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormElementName ( ) { return formElementName ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( "r" ) ; RadioGroup radioGroup0 = new RadioGroup ( errorPage0 , "r" , "r" , ( ISelectModel ) null , elExpression0 ) ; radioGroup0 . postBuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormElementName ( ) { return formElementName ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( "r" ) ; RadioGroup radioGroup0 = new RadioGroup ( errorPage0 , "r" , "r" , ( ISelectModel ) null , elExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( "r" ) ; RadioGroup radioGroup0 = new RadioGroup ( errorPage0 , "r" , "r" , ( ISelectModel ) null , elExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( "r" ) ; CheckboxGroup checkboxGroup0 = new CheckboxGroup ( errorPage0 , "r" , "r" , ( ISelectModel ) null , elExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean enhance ( RenderableComponent component , boolean selected , int index ) { boolean enhanced = false ; if ( model instanceof IEnhancingSelectModel ) { IEnhancingSelectModel enhancingSelectModel = ( IEnhancingSelectModel ) model ; enhanced = enhancingSelectModel . enhanceComponent ( component , index , selected ) ; } return enhanced ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( "r" ) ; RadioGroup radioGroup0 = new RadioGroup ( errorPage0 , "r" , "r" , ( ISelectModel ) null , elExpression0 ) ; radioGroup0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test0 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInt ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; try { Integer . parseInt ( value ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
void test1 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInt ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; try { Integer . parseInt ( value ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
void test2 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInt ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; try { Integer . parseInt ( value ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
void test3 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean required ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; return true ; }
void test4 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean required ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; return true ; }
void test5 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean required ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; return true ; }
void test6 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDouble ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; try { Double . parseDouble ( value ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
void test7 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDouble ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; try { Double . parseDouble ( value ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
void test8 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDouble ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; try { Double . parseDouble ( value ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
void test9 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmail ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; Matcher m = emailPattern . matcher ( value ) ; return m . matches ( ) ; }
void test10 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; boolean boolean0 = validations0 . isEmail ( " . + @ . + . [ a - z ] + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmail ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; Matcher m = emailPattern . matcher ( value ) ; return m . matches ( ) ; }
void test11 ( ) throws Throwable { Validations validations0 = Validations . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmail ( String value ) { if ( value = = null | | value . length ( ) = = 0 ) return false ; Matcher m = emailPattern . matcher ( value ) ; return m . matches ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Label label0 = new Label ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; Block block0 = label0 . placeholder ( " = [ K@ ! X" ) ; Block block1 = block0 . id ( " = [ K@ ! X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Label label0 = new Label ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; Block block0 = label0 . placeholder ( " = [ K@ ! X" ) ; block0 . _render ( ( XmlSerializer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; RadioGroup radioGroup0 = new RadioGroup ( ( Component ) errorPage0 , "Fi6zs_49 - 9" , "Fi6zs_49 - 9" , ( ISelectModel ) null , ( ElExpression ) null ) ; String string0 = radioGroup0 . getTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; RadioGroup radioGroup0 = new RadioGroup ( ( Component ) errorPage0 , "Fi6zs_49 - 9" , "Fi6zs_49 - 9" , ( ISelectModel ) null , ( ElExpression ) null ) ; String [ ] stringArray0 = new String [ 6 ] ; radioGroup0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( String componentId ) { if ( _getTopLevelComponent ( true ) . isRewinding ( ) ) { for ( FormElement formElement : formElements ) { if ( formElement . getFormElementName ( ) . equals ( componentId ) ) return formElement . isValid ( ) ; } } return true ; }
void test0 ( ) throws Throwable { ValidationRule validationRule0 = new ValidationRule ( "" , "" ) ; String string0 = validationRule0 . getElExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getElExpression ( ) { return elExpression ; }
void test1 ( ) throws Throwable { ValidationRule validationRule0 = new ValidationRule ( "" , "" ) ; String string0 = validationRule0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( String bundle , String key , Locale locale , StandaloneComponent caller ) { ResourceBundle resourceBundle = loadBundle ( bundle , locale ) ; if ( resourceBundle = = null ) throw new WheelException ( "No resource bundle found for '" + bundle + "' with locale '" + locale . toString ( ) + "' . " , null ) ; try { String value = resourceBundle . getString ( key ) ; return fixEncoding ( value ) ; } catch ( Exception e ) { log . warn ( "No message was found in bundle ' { } ' with key ' { } ' . " , new Object [ ] { bundle , key } ) ; return " [ " + key . toUpperCase ( ) + " ] " ; } }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( ( Component ) errorPage0 , "h$L " ) ; TableRow tableRow0 = ( TableRow ) tableBlock0 . tr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( ( Component ) errorPage0 , "h$L " ) ; Table table0 = new Table ( tableBlock0 , "h$L " ) ; TableBlock tableBlock1 = ( TableBlock ) table0 . tbody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( ( Component ) errorPage0 , "h$L " ) ; Any any0 = tableBlock0 . col ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextArea textArea0 = new TextArea ( ( Component ) errorPage0 , " + v | '0pf As ? S - = " , " + v | '0pf As ? S - = " ) ; String string0 = textArea0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextArea textArea0 = new TextArea ( ( Component ) errorPage0 , " + v | '0pf As ? S - = " , " + v | '0pf As ? S - = " ) ; TextArea textArea1 = ( TextArea ) textArea0 . value ( " + v | '0pf As ? S - = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormElementName ( ) { return formElementName ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Link link0 = new Link ( ( Component ) errorPage0 , ( Object ) "" ) ; String string0 = link0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Link link0 = new Link ( ( Component ) errorPage0 , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Link link0 = new Link ( ( Component ) errorPage0 , ( Object ) "" ) ; MXSerializer mXSerializer0 = new MXSerializer ( ) ; link0 . placeholder ( "" ) ; link0 . renderComponent ( ( XmlSerializer ) mXSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void renderComponent ( XmlSerializer serializer ) throws IOException { if ( getTagName ( ) . equals ( "script" ) ) serializer . text ( " " ) ; else super . renderComponent ( serializer ) ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Link link0 = new Link ( ( Component ) errorPage0 , ( Object ) "" ) ; MXSerializer mXSerializer0 = new MXSerializer ( ) ; Class < ? > class0 = Link . class ; XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory . newInstance ( "" , ( Class ) class0 ) ; StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper ( ( XmlSerializer ) mXSerializer0 , xmlPullWrapperFactory0 ) ; link0 . _renderActions ( ( XmlSerializer ) staticXmlSerializerWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void _renderActions ( XmlSerializer serializer ) throws IOException { if ( _getActions ( ) = = null ) return ; for ( ActionExpression action : _getActions ( ) ) { String domEvent = action . getEvent ( ) ; if ( domEvent = = null ) domEvent = defaultDomEvent ( ) ; if ( action . getUpdateTargetId ( ) ! = null ) { serializer . attribute ( "" , domEvent , action . getUpdateComponentFunctionCall ( ) ) ; continue ; } if ( action . getJavascript ( ) ! = null ) { serializer . attribute ( "" , domEvent , action . getJavascript ( ) ) ; continue ; } if ( domEvent . equals ( "action" ) ) serializer . attribute ( "" , domEvent , action . getActionUrl ( ) ) ; else serializer . attribute ( "" , domEvent , "window . location . href = '" + action . getActionUrl ( ) + "' ; " ) ; } }
void test0 ( ) throws Throwable { DateInput dateInput0 = new DateInput ( ( Component ) null , " { > tKK%" , " { > tKK%" , ( CharSequence ) " { > tKK%" ) ; String string0 = dateInput0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( errorPage0 , "" ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . colgroup ( ) ; DateInput dateInput0 = new DateInput ( ( Component ) tableBlock0 , "" , "" , ( CharSequence ) "" ) ; String [ ] stringArray0 = new String [ 15 ] ; dateInput0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( errorPage0 , " ! Xn ] `'4S ( s < " ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . colgroup ( ) ; DateInput dateInput0 = new DateInput ( ( Component ) tableBlock0 , " ! Xn ] `'4S ( s < " , " ! Xn ] `'4S ( s < " , ( CharSequence ) " ! Xn ] `'4S ( s < " ) ; String string0 = dateInput0 . _applyFormat ( ( Object ) "WildcardFileFilter ( ! Xn ] `'4S ( s < ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { Checkbox checkbox0 = new Checkbox ( ( Component ) null , "kRu" , "kRu" ) ; Checkbox checkbox1 = ( Checkbox ) checkbox0 . value ( "kRu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { Checkbox checkbox0 = new Checkbox ( ( Component ) null , "kRu" , "kRu" ) ; String string0 = checkbox0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { Checkbox checkbox0 = new Checkbox ( ( Component ) null , "kRu" , "kRu" ) ; String string0 = checkbox0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = errorPage0 . el ( " . * * w" ) ; String string0 = elExpression0 . getExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return expression ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "J } w { 5 & " , "J } w { 5 & " ) ; FileInput fileInput0 = new FileInput ( radio0 , "J } w { 5 & " , "J } w { 5 & " ) ; ElExpression elExpression0 = fileInput0 . el ( "J } w { 5 & " ) ; ElExpression elExpression1 = elExpression0 . errorMessage ( "J } w { 5 & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ElExpression errorMessage ( String message ) { errorMessage = message ; return this ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Link link0 = componentCreator0 . wLink ( "" , "Checkbox_1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( errorPage0 , " . . ] dSJ4c8 5" ) ; ComponentCreator componentCreator0 = tableBlock0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . noscript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Any any0 = ( Any ) componentCreator0 . param ( ( CharSequence ) "http : / / xmlpull . org / v1 / doc / features . html#report - namespace - prefixes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . abbr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; DateInput dateInput0 = new DateInput ( errorPage0 , " > %og7wu" , " > %og7wu" , " > %og7wu" ) ; ComponentCreator componentCreator0 = dateInput0 . create ( ) ; Any any0 = ( Any ) componentCreator0 . hr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . var ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . pre ( ( Object ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . ins ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; DateInput dateInput0 = new DateInput ( errorPage0 , " > %og7wu" , " > %og7wu" , " > %og7wu" ) ; ComponentCreator componentCreator0 = dateInput0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . ins ( ( Object ) " : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test9 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . b ( ( Object ) componentCreator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . u ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test11 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . dt ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test12 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) componentCreator0 . h6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test13 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . h3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test15 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . li ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test16 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . strike ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test17 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . h6 ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test18 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . h1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test19 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . em ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test20 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) componentCreator0 . label ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test21 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . kbd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test22 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . strong ( ( Object ) componentCreator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test24 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . s ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test25 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Text text0 = ( Text ) componentCreator0 . text ( ( Object ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test26 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Label label0 = new Label ( ( Component ) errorPage0 , ( Object ) null ) ; ComponentCreator componentCreator0 = label0 . create ( ) ; Label label1 = ( Label ) componentCreator0 . span ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test27 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Image image0 = ( Image ) componentCreator0 . img ( ( CharSequence ) "OT3j" , ( CharSequence ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test28 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . i ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test29 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . button ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test30 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Checkbox checkbox0 = new Checkbox ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = checkbox0 . create ( ) ; Block block0 = componentCreator0 . placeholder ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test31 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . h3 ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test32 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . h2 ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test33 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . div ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test34 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Checkbox checkbox0 = new Checkbox ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = checkbox0 . create ( ) ; Any any0 = componentCreator0 . br ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test35 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . acronym ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test36 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . abbr ( ( Object ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test37 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . dd ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test38 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = componentCreator0 . wLabel ( ( CharSequence ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test39 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Any any0 = ( Any ) componentCreator0 . frame ( ( CharSequence ) "u [ \"\" . . m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test40 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = componentCreator0 . wBlock ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test41 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . u ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test42 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . pre ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test43 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . dd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test44 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) componentCreator0 . code ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test45 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . var ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test46 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . h2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test47 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . s ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test48 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . bdo ( ( CharSequence ) "true" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test49 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . script ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test50 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . cite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test51 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Checkbox checkbox0 = new Checkbox ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = checkbox0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . i ( ( Object ) checkbox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test52 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Checkbox checkbox0 = new Checkbox ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = checkbox0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . p ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test53 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Any any0 = ( Any ) componentCreator0 . iframe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test54 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Link link0 = ( Link ) componentCreator0 . a ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test57 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . h4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test58 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . legend ( ( Object ) "textarea" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test59 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . dfn ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test60 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . del ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test61 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . code ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test62 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . sup ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test63 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) componentCreator0 . style ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test65 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . strong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test66 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . legend ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test67 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . dl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test68 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . del ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test69 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Table table0 = componentCreator0 . table ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test71 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . map ( " ( Luj'2 ) B * ? 8zOhA~T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test72 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . address ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test73 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; DateInput dateInput0 = new DateInput ( errorPage0 , " > %og7wu" , " > %og7wu" , " > %og7wu" ) ; ComponentCreator componentCreator0 = dateInput0 . create ( ) ; Select select0 = new Select ( dateInput0 , " > %og7wu" , " > %og7wu" , ( ISelectModel ) null , " > %og7wu" ) ; Label label0 = ( Label ) componentCreator0 . h5 ( ( Object ) select0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test74 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; String [ ] stringArray0 = new String [ 2 ] ; Any any0 = ( Any ) componentCreator0 . area ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test75 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , "Y8 [ `Fz" , "Y8 [ `Fz" , "Y8 [ `Fz" ) ; ComponentCreator componentCreator0 = numberInput0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . h5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test76 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , " [ , QlWP$MeMCT ? rniA" , " [ , QlWP$MeMCT ? rniA" ) ; ComponentCreator componentCreator0 = numberInput0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . li ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test77 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . dfn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test78 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . cite ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test79 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Image image0 = new Image ( errorPage0 , " < textarea id = \"YisequR'9T8\" / > " , "YisequR'9T8" ) ; ComponentCreator componentCreator0 = image0 . create ( ) ; Any any0 = ( Any ) componentCreator0 . base ( ( CharSequence ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test80 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . kbd ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test81 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . q ( ( Object ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test83 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , "Y8 [ `Fz" , "Y8 [ `Fz" , "Y8 [ `Fz" ) ; ComponentCreator componentCreator0 = numberInput0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . p ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test84 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . h1 ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test85 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . span ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test86 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . fieldset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test87 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . block ( ( CharSequence ) "text / html" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test88 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Checkbox checkbox0 = new Checkbox ( errorPage0 , "" , "" ) ; ComponentCreator componentCreator0 = checkbox0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . small ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test89 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . acronym ( ( Object ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test90 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Link link0 = ( Link ) componentCreator0 . a ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test92 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . noframes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test94 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . ul ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test95 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . q ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test96 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Any any0 = componentCreator0 . wAny ( ( CharSequence ) "textarea" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test97 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . blockquote ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test98 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . big ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test99 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . sub ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test100 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . sup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test101 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . b ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test102 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Form form0 = componentCreator0 . form ( " ( Luj'2 ) B * ? 8zOhA~T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test104 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . sub ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test105 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . address ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test106 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . ol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test107 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . em ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test108 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . samp ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test110 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "AS_COMPLEX_PROPERTY" , "AS_COMPLEX_PROPERTY" ) ; ComponentCreator componentCreator0 = radio0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . tt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test111 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Label label0 = ( Label ) componentCreator0 . strike ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test112 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test113 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; DateInput dateInput0 = new DateInput ( errorPage0 , " > %og7wu" , " > %og7wu" , " > %og7wu" ) ; ComponentCreator componentCreator0 = dateInput0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . h4 ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test114 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Block block0 = ( Block ) componentCreator0 . samp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test115 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , "Y8 [ `Fz" , "Y8 [ `Fz" , "Y8 [ `Fz" ) ; ComponentCreator componentCreator0 = numberInput0 . create ( ) ; Any any0 = ( Any ) componentCreator0 . meta ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test116 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = errorPage0 . create ( ) ; Label label0 = ( Label ) componentCreator0 . tt ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test117 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentCreator componentCreator0 = new ComponentCreator ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) componentCreator0 . link ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test118 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "IZ + Qra ] o~\"Y@Tc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test121 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "IZ + Qra ] o~\"Y@Tc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Select multiSelect ( String elementName , ISelectModel model , CharSequence binding ) { Select select = null ; Form form = forComponent . _getForm ( true ) ; if ( form = = null ) throw new WheelException ( "Form elements can be created only by compoents that are attached to a form component . " , forComponent ) ; String id = ensureFormElementUniqueness ( form , elementName ) ; if ( forComponent . getPage ( ) . _isRewindingForm ( form ) ) { select = ( Select ) forComponent . getPage ( ) . _getComponentStore ( ) . getComponent ( id ) ; } if ( select = = null ) { select = new Select ( forComponent , elementName , id , binding , model , true ) ; forComponent . getPage ( ) . _getComponentStore ( ) . addComponent ( select ) ; } return select ; }
void test124 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "OC~ < bLr\"b@og { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test126 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "IZ + Qra ] o~\"Y@Tc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test128 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "IZ + Qra ] o~\"Y@Tc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormElementName ( ) { return formElementName ; }
void test130 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "OC~ < bLr\"b@og { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TextInput textInput ( String elementName ) { TextInput textInput = null ; Form form = forComponent . _getForm ( true ) ; if ( form = = null ) throw new WheelException ( "Form elements can be created only by compoents that are attached to a form component . " , forComponent ) ; String id = ensureFormElementUniqueness ( form , elementName ) ; if ( forComponent . getPage ( ) . _isRewindingForm ( form ) ) { textInput = ( TextInput ) forComponent . getPage ( ) . _getComponentStore ( ) . getComponent ( id ) ; } if ( textInput = = null ) { textInput = new TextInput ( forComponent , elementName , id ) ; forComponent . getPage ( ) . _getComponentStore ( ) . addComponent ( textInput ) ; } return textInput ; }
void test132 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "OC~ < bLr\"b@og { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test136 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "OC~ < bLr\"b@og { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test138 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "IZ + Qra ] o~\"Y@Tc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Form form ( String formId ) { return form ( formId , new ActionExpression ( "this" ) ) ; }
void test140 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "OC~ < bLr\"b@og { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RadioGroup radioGroup ( String elementName , ISelectModel model , ElExpression binding ) { RadioGroup radioGroup = null ; Form form = forComponent . _getForm ( true ) ; if ( form = = null ) throw new WheelException ( "Form elements can be created only by compoents that are attached to a form component . " , forComponent ) ; String id = ensureFormElementUniqueness ( form , elementName + "_container" ) ; if ( forComponent . getPage ( ) . _isRewindingForm ( form ) ) { radioGroup = ( RadioGroup ) forComponent . getPage ( ) . _getComponentStore ( ) . getComponent ( id ) ; } if ( radioGroup = = null ) { radioGroup = new RadioGroup ( forComponent , elementName , id , model , binding ) ; forComponent . getPage ( ) . _getComponentStore ( ) . addComponent ( radioGroup ) ; } return radioGroup ; }
void test143 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "IZ + Qra ] o~\"Y@Tc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { Form form0 = new Form ( "Zz ? 0R9SpH g`" ) ; String string0 = form0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultDomEvent ( ) { return "onsubmit" ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "c | e'OiaFe ( / GE = ; Uth5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void _render ( XmlSerializer serializer ) throws IOException { if ( _getRenderableChildren ( ) . size ( ) = = 0 & & renderSelf ) { String tagName = _renderTagStart ( serializer ) ; serializer . text ( " " ) ; serializer . endTag ( "" , tagName ) ; return ; } if ( renderSelf ) super . _render ( serializer ) ; else { for ( RenderableComponent renderable : _getRenderableChildren ( ) ) { renderable . _render ( serializer ) ; } } }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "c | e'OiaFe ( / GE ; @th5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { Form form0 = new Form ( ( String ) null ) ; ActionExpression actionExpression0 = form0 . getAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionExpression getAction ( ) { return action ; }
void test4 ( ) throws Throwable { Form form0 = new Form ( ( String ) null ) ; form0 . postBuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { Form form0 = new Form ( "Zz ? 0R9SpH g`" ) ; Form form1 = ( Form ) form0 . clasS ( ( CharSequence ) "onsubmit" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component clasS ( CharSequence Class ) { return renderHint ( Class ) ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "c | e'OiaFe ( / GE = ; Uth5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test9 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( " ] line " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( " ] line " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test13 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( " ] line " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFormValid ( ) { boolean valid = true ; if ( formValidationRules ! = null ) { for ( ValidationRule formValidationRule : formValidationRules ) { Map vars = new HashMap ( ) ; for ( FormElement element : formElements ) { vars . put ( element . getComponentId ( ) , element ) ; } vars . put ( "form" , this ) ; vars . put ( "formContainer" , _getTopLevelComponent ( true ) ) ; Map otherVariables = _getTopLevelComponent ( true ) . validationVariables ; if ( otherVariables ! = null ) vars . putAll ( otherVariables ) ; Boolean validB = null ; try { validB = ( Boolean ) MVEL . eval ( formValidationRule . getElExpression ( ) , Validations . getInstance ( ) , vars ) ; } catch ( Throwable e ) { throw new WheelException ( "Validation expression " + formValidationRule . getElExpression ( ) + " failed . " , e , this ) ; } if ( ! validB . booleanValue ( ) ) { valid = false ; if ( validationErrors = = null ) validationErrors = new LinkedList < ValidationError > ( ) ; validationErrors . add ( new ValidationError ( eval ( formValidationRule . getMessage ( ) ) , this ) ) ; } } } if ( ! getInvalidFields ( ) . isEmpty ( ) ) valid = false ; return valid ; }
void test14 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( " ] line " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test15 ( ) throws Throwable { Form form0 = new Form ( "Zz ? 0R9SpH g`" ) ; form0 . addFormValidationRule ( "Zz ? 0R9SpH g`" , "Zz ? 0R9SpH g`" ) ; form0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test16 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( " ] line " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormElement field ( String fieldName ) { for ( FormElement formElement : formElements ) { if ( formElement . getFormElementName ( ) . equals ( fieldName ) ) return formElement ; } throw new WheelException ( "Form field with name " + fieldName + " doesn't exist . " , this ) ; }
void test17 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( " ] line " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test18 ( ) throws Throwable { Form form0 = new Form ( "Zz ? 0R9SpH g`" ) ; form0 . addFormValidationRule ( "Zz ? 0R9SpH g`" , "Zz ? 0R9SpH g`" ) ; Form form1 = form0 . addFormValidationRule ( "onsubmit" , "Zz ? 0R9SpH g`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test19 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "c | e'OiaFe ( / GE ; @th5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test20 ( ) throws Throwable { Form form0 = new Form ( "Zz ? 0R9SpH g`" ) ; XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory . newInstance ( ) ; MXSerializer mXSerializer0 = ( MXSerializer ) xmlPullParserFactory0 . newSerializer ( ) ; form0 . _renderActions ( ( XmlSerializer ) mXSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test21 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "c | e'OiaFe ( / GE ; @th5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test22 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Form form0 = ( Form ) errorPage0 . form ( "c | e'OiaFe ( / GE ; @th5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void _render ( XmlSerializer serializer ) throws IOException { if ( _getRenderableChildren ( ) . size ( ) = = 0 & & renderSelf ) { String tagName = _renderTagStart ( serializer ) ; serializer . text ( " " ) ; serializer . endTag ( "" , tagName ) ; return ; } if ( renderSelf ) super . _render ( serializer ) ; else { for ( RenderableComponent renderable : _getRenderableChildren ( ) ) { renderable . _render ( serializer ) ; } } }
void test23 ( ) throws Throwable { Form form0 = new Form ( ( String ) null ) ; String [ ] stringArray0 = new String [ 2 ] ; Form form1 = form0 . _buildFromSerializedString ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test24 ( ) throws Throwable { Form form0 = new Form ( ( String ) null ) ; String [ ] stringArray0 = new String [ 3 ] ; Form form1 = form0 . _buildFromSerializedString ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( ( Component ) errorPage0 , "" , "" ) ; String string0 = numberInput0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { NumberInput numberInput0 = new NumberInput ( ( Component ) null , " [ B$ > L" , " [ B$ > L" , ( CharSequence ) " [ B$ > L" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _getSubmitValue ( ) { return value [ 0 ] ; }
void test2 ( ) throws Throwable { TextInput textInput0 = new TextInput ( ( Component ) null , "Could not find an appender named [ " , "Could not find an appender named [ " ) ; NumberInput numberInput0 = new NumberInput ( ( Component ) textInput0 , "Could not find an appender named [ " , "Could not find an appender named [ " ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "Could not find an appender named [ " ; numberInput0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _getSubmitValue ( ) { return value [ 0 ] ; }
void test3 ( ) throws Throwable { NumberInput numberInput0 = new NumberInput ( ( Component ) null , "@h , xr3N7xKN ! " , "@h , xr3N7xKN ! " ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "@h , xr3N7xKN ! " ; numberInput0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _getSubmitValue ( ) { return value [ 0 ] ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( ( Component ) errorPage0 , "" , "" ) ; numberInput0 . _applyFormat ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test7 ( ) throws Throwable { NumberInput numberInput0 = new NumberInput ( ( Component ) null , "mttK_yf < Rcir" , "mttK_yf < Rcir" , ( CharSequence ) "mttK_yf < Rcir" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Text text0 = new Text ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; String string0 = text0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Text text0 = new Text ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; boolean boolean0 = text0 . isHtml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHtml ( ) { return html ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Text text0 = new Text ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; text0 . setCdata ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCdata ( ) { return cdata ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Text text0 = new Text ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; boolean boolean0 = text0 . isCdata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCdata ( ) { return cdata ; }
void test0 ( ) throws Throwable { Select select0 = new Select ( ( Component ) null , "jer | 5jSBs" , "jer | 5jSBs" , ( ISelectModel ) null , ( CharSequence ) "jer | 5jSBs" ) ; String string0 = select0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultDomEvent ( ) { return "onsubmit" ; }
void test1 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "INVKESTATIC java / lang / Byt . valueOf" ) ; StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; Select select0 = new Select ( ( Component ) xmlEntityRef0 , "INVKESTATIC java / lang / Byt . valueOf" , "INVKESTATIC java / lang / Byt . valueOf" , ( ISelectModel ) stringSelectModel0 , ( CharSequence ) "INVKESTATIC java / lang / Byt . valueOf" ) ; String string0 = select0 . defaultTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test2 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "INVKETATIC java / langByt . valueOf" ) ; StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; Select select0 = new Select ( ( Component ) xmlEntityRef0 , "INVKETATIC java / langByt . valueOf" , "INVKETATIC java / langByt . valueOf" , ( ISelectModel ) stringSelectModel0 , ( CharSequence ) "INVKETATIC java / langByt . valueOf" ) ; String [ ] stringArray0 = new String [ 10 ] ; select0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultDomEvent ( ) { return "onsubmit" ; }
void test4 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "INVKESTATIC java / lang / Byt . valueOf" ) ; StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; Select select0 = new Select ( ( Component ) xmlEntityRef0 , "INVKESTATIC java / lang / Byt . valueOf" , "INVKESTATIC java / lang / Byt . valueOf" , ( ISelectModel ) stringSelectModel0 , ( CharSequence ) "INVKESTATIC java / lang / Byt . valueOf" ) ; select0 . buildComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableBlock tableBlock0 = new TableBlock ( errorPage0 ) ; Any any0 = tableBlock0 . col ( ) ; Class < ? > class0 = Any . class ; XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory . newInstance ( "k * ? bOLn" , ( Class ) class0 ) ; XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory . newInstance ( xmlPullParserFactory0 ) ; StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper ( ( XmlSerializer ) null , xmlPullWrapperFactory0 ) ; any0 . renderComponent ( ( XmlSerializer ) staticXmlSerializerWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test0 ( ) throws Throwable { ActionExpression actionExpression0 = new ActionExpression ( " 0`dBLtm ) ^U1 + OJ" ) ; int int0 = actionExpression0 . length ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test1 ( ) throws Throwable { ActionExpression actionExpression0 = new ActionExpression ( " 0`dBLtm ) ^U1 + OJ" ) ; String string0 = ( String ) actionExpression0 . subSequence ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CharSequence subSequence ( int i , int i1 ) { return expression . subSequence ( i , i1 ) ; }
void test2 ( ) throws Throwable { ElExpression elExpression0 = new ElExpression ( ( String ) null ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; Any any0 = new Any ( ( Component ) errorPage0 , ( CharSequence ) elExpression0 ) ; ActionExpression actionExpression0 = any0 . action ( "SyV" ) ; boolean boolean0 = elExpression0 . equals ( ( Object ) actionExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test3 ( ) throws Throwable { ActionExpression actionExpression0 = new ActionExpression ( " 0`dBLtm ) ^U1 + OJ" ) ; String string0 = actionExpression0 . getExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return expression ; }
void test4 ( ) throws Throwable { ActionExpression actionExpression0 = new ActionExpression ( " 0`dBLtm ) ^U1 + OJ" ) ; char char0 = actionExpression0 . charAt ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char charAt ( int i ) { return expression . charAt ( i ) ; }
void test5 ( ) throws Throwable { ElExpression elExpression0 = new ElExpression ( ( String ) null ) ; boolean boolean0 = elExpression0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test6 ( ) throws Throwable { ElExpression elExpression0 = new ElExpression ( ( String ) null ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; ActionExpression actionExpression0 = errorPage0 . action ( ( String ) null ) ; boolean boolean0 = elExpression0 . equals ( ( Object ) actionExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , "" , "" , "" ) ; ElExpression elExpression0 = numberInput0 . el ( "" ) ; Any any0 = new Any ( ( Component ) errorPage0 , ( CharSequence ) elExpression0 ) ; ActionExpression actionExpression0 = any0 . action ( ( String ) null ) ; boolean boolean0 = elExpression0 . equals ( ( Object ) actionExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , "" , "" , "" ) ; ElExpression elExpression0 = numberInput0 . el ( "" ) ; XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( ( String ) null ) ; ElExpression elExpression1 = xmlEntityRef0 . el ( "" ) ; boolean boolean0 = elExpression0 . equals ( ( Object ) elExpression1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Asset asset = ( Asset ) o ; if ( fileUri ! = null ? ! fileUri . equals ( asset . fileUri ) : asset . fileUri ! = null ) return false ; return true ; }
void test9 ( ) throws Throwable { ElExpression elExpression0 = new ElExpression ( ( String ) null ) ; int int0 = elExpression0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( fileUri ! = null ? fileUri . hashCode ( ) : 0 ) ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; NumberInput numberInput0 = new NumberInput ( errorPage0 , "" , "" , "" ) ; ElExpression elExpression0 = numberInput0 . el ( "" ) ; int int0 = elExpression0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( fileUri ! = null ? fileUri . hashCode ( ) : 0 ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component pre ( ) { Block pre = new Block ( forComponent ) ; pre . renderHint ( "pre" ) ; return pre ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component title ( String text ) { Label title = new Label ( this , text ) ; title . _setComponentId ( "title" ) ; title . renderHint ( "title" ) ; if ( head ( ) . _getChildren ( ) . contains ( title ) ) head ( ) . remove ( title ) ; head ( ) . add ( title ) ; return title ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test9 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "b ( EYy2_Y { " ) ; TextInput textInput0 = new TextInput ( xmlEntityRef0 , "b ( EYy2_Y { " , "b ( EYy2_Y { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component acronym ( ) { Block acronym = new Block ( forComponent ) ; acronym . renderHint ( "acronym" ) ; return acronym ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test11 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test12 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test13 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test16 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test17 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component h2 ( Object text ) { Label h2 = new Label ( forComponent , text ) ; h2 . renderHint ( "h2" ) ; return h2 ; }
void test18 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NumberInput numberInput ( String elementName , CharSequence numberPattern ) { NumberInput numberInput = null ; Form form = forComponent . _getForm ( true ) ; if ( form = = null ) throw new WheelException ( "Form elements can be created only by compoents that are attached to a form component . " , forComponent ) ; String id = ensureFormElementUniqueness ( form , elementName ) ; if ( forComponent . getPage ( ) . _isRewindingForm ( form ) ) { numberInput = ( NumberInput ) forComponent . getPage ( ) . _getComponentStore ( ) . getComponent ( id ) ; } if ( numberInput = = null ) { if ( numberPattern ! = null ) numberInput = new NumberInput ( forComponent , elementName , id , numberPattern ) ; else numberInput = new NumberInput ( forComponent , elementName , id ) ; forComponent . getPage ( ) . _getComponentStore ( ) . addComponent ( numberInput ) ; } return numberInput ; }
void test19 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test20 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component find ( String componentId ) { componentId = _wrapComponentId ( componentId ) ; Iterator < Component > openLevel = _getChildren ( ) . iterator ( ) ; Stack < Iterator > openLevels = new Stack < Iterator > ( ) ; while ( openLevel . hasNext ( ) ) { Component component = openLevel . next ( ) ; if ( component . getComponentId ( ) . equals ( componentId ) ) return component ; if ( component . _getChildren ( ) . size ( ) > 0 ) { openLevels . push ( openLevel ) ; openLevel = component . _getChildren ( ) . iterator ( ) ; } while ( ! openLevel . hasNext ( ) & & ! openLevels . empty ( ) ) openLevel = openLevels . pop ( ) ; } throw new WheelException ( "Could not find component with id " + componentId + " on the page . " , this ) ; }
void test21 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test22 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component bdo ( CharSequence dir ) { Block bdo = new Block ( forComponent ) ; bdo . renderHint ( "bdo" ) ; bdo . attribute ( "dir" , dir ) ; return bdo ; }
void test23 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test24 ( ) throws Throwable { DateInput dateInput0 = new DateInput ( ( Component ) null , "X4Vo , l < + " , "X4Vo , l < + " , "X4Vo , l < + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component samp ( ) { Block samp = new Block ( forComponent ) ; samp . renderHint ( "samp" ) ; return samp ; }
void test26 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TextInput buttonInput ( String elementName ) { TextInput textInput = null ; Form form = forComponent . _getForm ( true ) ; if ( form = = null ) throw new WheelException ( "Form elements can be created only by compoents that are attached to a form component . " , forComponent ) ; String id = ensureFormElementUniqueness ( form , elementName ) ; if ( forComponent . getPage ( ) . _isRewindingForm ( form ) ) { textInput = ( TextInput ) forComponent . getPage ( ) . _getComponentStore ( ) . getComponent ( id ) ; } if ( textInput = = null ) { textInput = new TextInput ( forComponent , elementName , id ) ; textInput . attribute ( "type" , "button" ) ; forComponent . getPage ( ) . _getComponentStore ( ) . addComponent ( textInput ) ; } return textInput ; }
void test27 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test28 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test29 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Block id ( String componentId ) { return ( Block ) super . id ( componentId ) ; }
void test30 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test31 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test32 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test33 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test34 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "\n" ) ; String string0 = xmlEntityRef0 . defaultTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test0 ( ) throws Throwable { Hidden hidden0 = new Hidden ( ( Component ) null , " , ; oNE * " , " , ; oNE * " ) ; String string0 = hidden0 . getTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { Hidden hidden0 = new Hidden ( ( Component ) null , " , ; oNE * " , " , ; oNE * " ) ; Hidden hidden1 = ( Hidden ) hidden0 . value ( " , ; oNE * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { Hidden hidden0 = new Hidden ( ( Component ) null , " & 'Q [ LRki - Jf 17k^" , " & 'Q [ LRki - Jf 17k^" ) ; String string0 = hidden0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { TextInput textInput0 = new TextInput ( ( Component ) null , "' ) . focu ( ) ! U ; " , "' ) . focu ( ) ! U ; " ) ; NumberInput numberInput0 = new NumberInput ( textInput0 , "' ) . focu ( ) ! U ; " , "' ) . focu ( ) ! U ; " ) ; String string0 = numberInput0 . defaultDomEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultDomEvent ( ) { return "onsubmit" ; }
void test6 ( ) throws Throwable { TextArea textArea0 = new TextArea ( ( Component ) null , "qgd" , "qgd" ) ; FileInput fileInput0 = new FileInput ( textArea0 , "qgd" , "qgd" ) ; boolean boolean0 = fileInput0 . isComplex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isComplex ( ) { return complex ; }
void test7 ( ) throws Throwable { Checkbox checkbox0 = new Checkbox ( ( Component ) null , "eaou" , "eaou" ) ; String [ ] stringArray0 = checkbox0 . _getSubmitValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] _getSubmitValues ( ) { return value ; }
void test9 ( ) throws Throwable { TextArea textArea0 = new TextArea ( ( Component ) null , "qgd" , "qgd" ) ; FileInput fileInput0 = new FileInput ( textArea0 , "qgd" , "qgd" ) ; FileInput fileInput1 = ( FileInput ) fileInput0 . setFormElementName ( "qgd" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test11 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "formattedMessage" , "formattedMessage" ) ; radio0 . validationRule ( "formattedMessage" ) ; Radio radio1 = ( Radio ) radio0 . validationRule ( "formattedMessage" , "formattedMessage" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isComplex ( ) { return complex ; }
void test12 ( ) throws Throwable { Checkbox checkbox0 = new Checkbox ( ( Component ) null , "eaou" , "eaou" ) ; Checkbox checkbox1 = ( Checkbox ) checkbox0 . validationRule ( "eaou" , "eaou" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isComplex ( ) { return complex ; }
void test13 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Block block0 = errorPage0 . placeholder ( "" ) ; Checkbox checkbox0 = new Checkbox ( block0 , "" , "" ) ; NumberInput numberInput0 = new NumberInput ( block0 , "" , "" ) ; Label label0 = new Label ( ( Component ) block0 , ( Object ) "Radio" ) ; DynamicSelectModel dynamicSelectModel0 = label0 . selectModel ( ) ; DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0 . enumeration ( "" ) ; Image image0 = new Image ( block0 , "Radio" , "" ) ; ElExpression elExpression0 = image0 . el ( "Radio" ) ; CheckboxGroup checkboxGroup0 = new CheckboxGroup ( checkbox0 , "" , "" , dynamicSelectModel1 , elExpression0 ) ; CheckboxGroup checkboxGroup1 = ( CheckboxGroup ) checkboxGroup0 . initialFieldValue ( "Radio" , ( Object ) numberInput0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentId ( ) { return componentId ; }
void test14 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "formattedMessage" , "formattedMessage" ) ; StringBuilder stringBuilder0 = new StringBuilder ( 1 ) ; radio0 . serialize ( stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test15 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "true" ) ; FileInput fileInput0 = new FileInput ( xmlEntityRef0 , "true" , "true" ) ; boolean boolean0 = fileInput0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return value = = null | | value . length = = 0 | | value [ 0 ] = = null | | value [ 0 ] . length ( ) = = 0 ; }
void test16 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Block block0 = errorPage0 . placeholder ( "" ) ; NumberInput numberInput0 = new NumberInput ( block0 , "" , "" ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "" ; numberInput0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( String componentId ) { if ( _getTopLevelComponent ( true ) . isRewinding ( ) ) { for ( FormElement formElement : formElements ) { if ( formElement . getFormElementName ( ) . equals ( componentId ) ) return formElement . isValid ( ) ; } } return true ; }
void test17 ( ) throws Throwable { TextInput textInput0 = new TextInput ( ( Component ) null , "ptgrp" , "ptgrp" ) ; Checkbox checkbox0 = new Checkbox ( textInput0 , "ptgrp" , "ptgrp" ) ; String [ ] stringArray0 = new String [ 1 ] ; checkbox0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return value = = null | | value . length = = 0 | | value [ 0 ] = = null | | value [ 0 ] . length ( ) = = 0 ; }
void test18 ( ) throws Throwable { NumberInput numberInput0 = new NumberInput ( ( Component ) null , "optMgooup" , "optMgooup" ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "optMgooup" ; numberInput0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return value = = null | | value . length = = 0 | | value [ 0 ] = = null | | value [ 0 ] . length ( ) = = 0 ; }
void test19 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextArea textArea0 = new TextArea ( ( Component ) errorPage0 , " } " , " } " ) ; textArea0 . addValidationError ( " } " ) ; String [ ] stringArray0 = new String [ 3 ] ; textArea0 . _setSubmitValue ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( String componentId ) { if ( _getTopLevelComponent ( true ) . isRewinding ( ) ) { for ( FormElement formElement : formElements ) { if ( formElement . getFormElementName ( ) . equals ( componentId ) ) return formElement . isValid ( ) ; } } return true ; }
void test20 ( ) throws Throwable { Checkbox checkbox0 = new Checkbox ( ( Component ) null , "eaou" , "eaou" ) ; TextArea textArea0 = new TextArea ( ( Component ) checkbox0 , "eaou" , "eaou" ) ; List < ValidationError > list0 = textArea0 . getErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ValidationError > getErrors ( ) { if ( validationErrors = = null ) return Collections . EMPTY_LIST ; return validationErrors ; }
void test21 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Block block0 = errorPage0 . placeholder ( "" ) ; NumberInput numberInput0 = new NumberInput ( block0 , "" , "" ) ; numberInput0 . addRenderBefore ( ( Component ) block0 ) ; numberInput0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test22 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Block block0 = errorPage0 . placeholder ( "" ) ; NumberInput numberInput0 = new NumberInput ( block0 , "" , "" ) ; numberInput0 . addRenderAfter ( ( Component ) errorPage0 ) ; numberInput0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test25 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TextArea textArea0 = new TextArea ( ( Component ) errorPage0 , " } " , " } " ) ; TextArea textArea1 = ( TextArea ) textArea0 . addValidationError ( " } " ) ; textArea1 . addValidationError ( " } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( String componentId ) { if ( _getTopLevelComponent ( true ) . isRewinding ( ) ) { for ( FormElement formElement : formElements ) { if ( formElement . getFormElementName ( ) . equals ( componentId ) ) return formElement . isValid ( ) ; } } return true ; }
void test26 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "formattedMessage" , "formattedMessage" ) ; radio0 . validationRule ( "formattedMessage" ) ; StringBuilder stringBuilder0 = new StringBuilder ( 1 ) ; radio0 . serialize ( stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test27 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Radio radio0 = new Radio ( errorPage0 , "formattedMessage" , "formattedMessage" ) ; StringBuilder stringBuilder0 = new StringBuilder ( 1 ) ; radio0 . validationRule ( "formattedMessage" , "formattedMessage" ) ; radio0 . serialize ( stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; Table table1 = ( Table ) table0 . renderHint ( ( CharSequence ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; String string0 = table0 . defaultTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultTagName ( ) { return null ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects an instance of RenderableC ? mponent . " ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . thead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . tfoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . tbody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects an instance of RenderableC ? mponent . " ) ; Block block0 = ( Block ) table0 . caption ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . colgroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "1V" ) ; XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory . newInstance ( ) ; XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0 . getFactory ( ) ; MXSerializer mXSerializer0 = ( MXSerializer ) xmlPullParserFactory0 . newSerializer ( ) ; table0 . renderComponent ( ( XmlSerializer ) mXSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test9 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects an instance of RenderableC ? mponent . " ) ; Block block0 = ( Block ) table0 . caption ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void renderComponent ( XmlSerializer serializer ) throws IOException { if ( getTagName ( ) . equals ( "script" ) ) serializer . text ( " " ) ; else super . renderComponent ( serializer ) ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects aninstance of RenderableComponent . " ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . colgroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void renderComponent ( XmlSerializer serializer ) throws IOException { if ( getTagName ( ) . equals ( "script" ) ) serializer . text ( " " ) ; else super . renderComponent ( serializer ) ; }
void test11 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "1V" ) ; XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory . newInstance ( ) ; XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0 . getFactory ( ) ; TableBlock tableBlock0 = ( TableBlock ) table0 . tfoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void renderComponent ( XmlSerializer serializer ) throws IOException { if ( getTagName ( ) . equals ( "script" ) ) serializer . text ( " " ) ; else super . renderComponent ( serializer ) ; }
void test12 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects an instance of RenderableComponent . " ) ; XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory . newInstance ( ) ; XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0 . getFactory ( ) ; TableRow tableRow0 = ( TableRow ) table0 . tr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void renderComponent ( XmlSerializer serializer ) throws IOException { if ( getTagName ( ) . equals ( "script" ) ) serializer . text ( " " ) ; else super . renderComponent ( serializer ) ; }
void test13 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects an instance of RenderableC ? mponent . " ) ; table0 . thead ( ) ; table0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isGeneratedId ( ) { return generatedId ; }
void test14 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; table0 . tfoot ( ) ; table0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test15 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "addRenderBefore expects an instance of RenderableC ? mponent . " ) ; table0 . caption ( ) ; table0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test16 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Table table0 = new Table ( ( Component ) errorPage0 , "" ) ; table0 . colgroup ( ) ; table0 . _clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentName ( ) { String className = getClass ( ) . getName ( ) ; return className . substring ( className . lastIndexOf ( " . " ) + 1 , className . length ( ) ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableRow tableRow0 = new TableRow ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) tableRow0 . td ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableRow tableRow0 = new TableRow ( ( Component ) errorPage0 ) ; Block block0 = tableRow0 . createTd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableRow tableRow0 = new TableRow ( ( Component ) errorPage0 ) ; Block block0 = ( Block ) tableRow0 . th ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableRow tableRow0 = new TableRow ( ( Component ) errorPage0 ) ; String string0 = tableRow0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; TableRow tableRow0 = new TableRow ( ( Component ) errorPage0 ) ; Block block0 = tableRow0 . createTh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; String string0 = standaloneComponentConfiguration0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) { return forComponent . contentType ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . _setRenderDoctype ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isRenderDoctype ( ) { return forComponent . renderDoctype ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; Map < String , Object > map0 = standaloneComponentConfiguration0 . getValidationVariables ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , Object > getValidationVariables ( ) { return forComponent . validationVariables ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . isAjaxComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAjaxComponent ( ) { return forComponent . ajaxComponent ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . setAjaxComponent ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAjaxComponent ( ) { return forComponent . ajaxComponent ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . _isRenderDoctype ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isRenderDoctype ( ) { return forComponent . renderDoctype ; }
void test6 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . setRenderGeneratedComponentIds ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isRenderGeneratedComponentIds ( ) { return forComponent . renderGeneratedComponentIds ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . setReusable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReusable ( ) { return forComponent . reusable ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . _isRenderGeneratedComponentIds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isRenderGeneratedComponentIds ( ) { return forComponent . renderGeneratedComponentIds ; }
void test9 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . isReusable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReusable ( ) { return forComponent . reusable ; }
void test10 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . setContentType ( "6 [ %Jo = N + 8C , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) { return forComponent . contentType ; }
void test11 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; Map < String , String > map0 = RenderableComponent . HTML ; standaloneComponentConfiguration0 . useValidationVariable ( " ] d1 > # ] 2 . . qvMV" , ( Object ) map0 ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useValidationVariable ( " ] d1 > # ] 2 . . qvMV" , "http : / / xmlpull . org / v1 / doc / features . html#process - docdecl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isRenderGeneratedComponentIds ( ) { return forComponent . renderGeneratedComponentIds ; }
void test12 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . initialFieldValue ( "6 [ %Jo = N + 8C , " , "6 [ %Jo = N + 8C , " ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . initialFieldValue ( "6 [ %Jo = N + 8C , " , "6 [ %Jo = N + 8C , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return forComponent . visible ; }
void test13 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . initialFieldValue ( "text / html" , "AS_BASIC_PROPERTY_COLLECTION" ) ; StandaloneComponentConfiguration standaloneComponentConfiguration2 = standaloneComponentConfiguration0 . initialFieldValue ( "AS_BASIC_PROPERTY_COLLECTION" , "AS_BASIC_PROPERTY_COLLECTION" , "text / html" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormElement initialFieldValue ( String value ) { if ( ! ( getBinding ( ) instanceof ElExpression ) ) throw new WheelException ( "Initial field value can only be set for a bound field element . " , this ) ; _getTopLevelComponent ( false ) . config ( ) . initialFieldValue ( getBinding ( ) . toString ( ) , value ) ; return this ; }
void test14 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . initialFieldValue ( "x & } i | / " , "x & } i | / " , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderId ( ) { return forComponent . renderId ; }
void test15 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . initialFieldValue ( "text / html" , "AS_BASIC_PROPERTY_COLLECTION" ) ; InitialFieldValue initialFieldValue0 = standaloneComponentConfiguration0 . getInitialFieldValue ( "AS_BASIC_PROPERTY_COLLECTION" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InitialFieldValue getInitialFieldValue ( String fieldName ) { if ( forComponent . initialFieldValues = = null ) return null ; return forComponent . initialFieldValues . get ( fieldName ) ; }
void test16 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; InitialFieldValue initialFieldValue0 = standaloneComponentConfiguration0 . getInitialFieldValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InitialFieldValue getInitialFieldValue ( String fieldName ) { if ( forComponent . initialFieldValues = = null ) return null ; return forComponent . initialFieldValues . get ( fieldName ) ; }
void test17 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . useAsset ( "6 [ %Jo = N + 8C , " , "6 [ %Jo = N + 8C , " , 1493 ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useAsset ( "6 [ %Jo = N + 8C , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isRenderDoctype ( ) { return forComponent . renderDoctype ; }
void test18 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useAsset ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReusable ( ) { return forComponent . reusable ; }
void test19 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useAsset ( "AS_BASIC_PROPERTY_COLLECTION" , 19 ) ; StandaloneComponentConfiguration standaloneComponentConfiguration2 = standaloneComponentConfiguration1 . useAsset ( "AS_BASIC_PROPERTY_COLLECTION" , "AS_BASIC_PROPERTY_COLLECTION" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderId ( ) { return forComponent . renderId ; }
void test20 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useAsset ( "wg . codehas . janino . ScriptEvaluaor" , "wg . codehas . janino . ScriptEvaluaor" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseXhtml ( ) { return forComponent . useXhtml ; }
void test21 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useAsset ( "6 [ %Jo = N + 8C , " , "6 [ %Jo = N + 8C , " , 1493 ) ; StandaloneComponentConfiguration standaloneComponentConfiguration2 = standaloneComponentConfiguration1 . useAsset ( "6 [ %Jo = N + 8C , " , 1493 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAjaxComponent ( ) { return forComponent . ajaxComponent ; }
void test22 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . useAsset ( "6 [ %Jo = N + 8C , " , "6 [ %Jo = N + 8C , " , 1493 ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . useAsset ( "6 [ %Jo = N + 8C , " , "6 [ %Jo = N + 8C , " , 1493 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAjaxComponent ( ) { return forComponent . ajaxComponent ; }
void test23 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; standaloneComponentConfiguration0 . exposeField ( "6 [ %Jo = N + 8C , " ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . exposeField ( "6 [ %Jo = N + 8C , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAjaxComponent ( ) { return forComponent . ajaxComponent ; }
void test24 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration1 = standaloneComponentConfiguration0 . exposeField ( "6 [ %Jo = N + 8C , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFieldExposed ( String fieldName ) { if ( forComponent . exposedFields = = null ) return false ; return forComponent . exposedFields . contains ( fieldName ) ; }
void test25 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; StandaloneComponentConfiguration standaloneComponentConfiguration0 = ( StandaloneComponentConfiguration ) errorPage0 . config ( ) ; boolean boolean0 = standaloneComponentConfiguration0 . isFieldExposed ( "AS_BASIC_PROPERTY_COLLECTION" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFieldExposed ( String fieldName ) { if ( forComponent . exposedFields = = null ) return false ; return forComponent . exposedFields . contains ( fieldName ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ValidationError validationError0 = new ValidationError ( "5ORlv\"j > } NLBG ! C" , ( Component ) errorPage0 ) ; String string0 = validationError0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( String bundle , String key , Locale locale , StandaloneComponent caller ) { ResourceBundle resourceBundle = loadBundle ( bundle , locale ) ; if ( resourceBundle = = null ) throw new WheelException ( "No resource bundle found for '" + bundle + "' with locale '" + locale . toString ( ) + "' . " , null ) ; try { String value = resourceBundle . getString ( key ) ; return fixEncoding ( value ) ; } catch ( Exception e ) { log . warn ( "No message was found in bundle ' { } ' with key ' { } ' . " , new Object [ ] { bundle , key } ) ; return " [ " + key . toUpperCase ( ) + " ] " ; } }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ValidationError validationError0 = new ValidationError ( "5ORlv\"j > } NLBG ! C" , ( Component ) errorPage0 ) ; ErrorPage errorPage1 = ( ErrorPage ) validationError0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Label label0 = new Label ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; String string0 = ( String ) label0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CharSequence getText ( ) { return text ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Label label0 = new Label ( ( Component ) errorPage0 , ( Object ) errorPage0 ) ; String string0 = label0 . getTagName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( ) { String tagName = defaultTagName ( ) ; List < CharSequence > hints = _getRenderHints ( ) ; if ( hints ! = null ) { if ( useXhtml ) { for ( CharSequence hint : hints ) { if ( HTML . containsKey ( hint ) ) return hint . toString ( ) ; } } else { if ( ! hints . isEmpty ( ) ) return hints . get ( 0 ) . toString ( ) ; } } return tagName ; }
void test1 ( ) throws Throwable { SessionStore sessionStore0 = new SessionStore ( ( HttpSession ) null ) ; HttpSession httpSession0 = sessionStore0 . getSession ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpSession getSession ( ) { return session ; }
void test12 ( ) throws Throwable { SessionStore sessionStore0 = new SessionStore ( ( HttpSession ) null ) ; sessionStore0 . cleanup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stateChanged ( ) ; }
void test13 ( ) throws Throwable { SessionStore sessionStore0 = new SessionStore ( ( HttpSession ) null ) ; boolean boolean0 = sessionStore0 . stateChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stateChanged ( ) ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . global ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , "" , "" ) ; String string0 = storedObject0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . component ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , " ] " ) ; Scope scope1 = storedObject0 . getScope ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . global ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , "" , "" ) ; storedObject0 . releaseLock ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPagename ( ) { return pagename ; }
void test3 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . global ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , "" , "" ) ; Object object1 = storedObject0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test4 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . global ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , "" , "" ) ; String string0 = storedObject0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { Scope scope0 = Scope . component ; StoredObject storedObject0 = new StoredObject ( ( Object ) "component" , scope0 , "component" ) ; storedObject0 . setValue ( ( Object ) "page" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test6 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . global ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , "" , "" ) ; int int0 = storedObject0 . getHashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHashCode ( ) { return hashCode ; }
void test7 ( ) throws Throwable { Object object0 = new Object ( ) ; Scope scope0 = Scope . component ; StoredObject storedObject0 = new StoredObject ( object0 , scope0 , " ] " ) ; String string0 = storedObject0 . getPagename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPagename ( ) { return pagename ; }
void test8 ( ) throws Throwable { Scope scope0 = Scope . page ; StoredObject storedObject0 = new StoredObject ( ( Object ) null , scope0 , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test9 ( ) throws Throwable { Scope scope0 = Scope . request ; StoredObject storedObject0 = new StoredObject ( ( Object ) "request" , scope0 , "request" , "request" ) ; storedObject0 . setHashCode ( 1094 ) ; storedObject0 . setHashCode ( 1559 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHashCode ( ) { return hashCode ; }
void test0 ( ) throws Throwable { JSONStringer jSONStringer0 = new JSONStringer ( ) ; String string0 = jSONStringer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { JSONStringer jSONStringer0 = new JSONStringer ( ) ; jSONStringer0 . object ( ) ; jSONStringer0 . endObject ( ) ; String string0 = jSONStringer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "" ) ; jSONTokener0 . back ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( " & lMZQ\" ) `VJaM + O" ) ; jSONTokener0 . nextValue ( ) ; String string0 = "" ; try { string0 = ( String ) jSONTokener0 . nextValue ( ) ; fail ( "Expecting exception : JSONException" ) ; } catch ( JSONException e ) { / * * Unterminated string at character 14 of & lMZQ\" ) `VJaM + O * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { int int0 = JSONTokener . dehexchar ( '$' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int dehexchar ( char c ) { if ( c > = '0' & & c < = '9' ) { return c - '0' ; } if ( c > = 'A' & & c < = 'F' ) { return c - ( 'A' - 10 ) ; } if ( c > = 'a' & & c < = 'f' ) { return c - ( 'a' - 10 ) ; } return - 1 ; }
void test3 ( ) throws Throwable { int int0 = JSONTokener . dehexchar ( 'n' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int dehexchar ( char c ) { if ( c > = '0' & & c < = '9' ) { return c - '0' ; } if ( c > = 'A' & & c < = 'F' ) { return c - ( 'A' - 10 ) ; } if ( c > = 'a' & & c < = 'f' ) { return c - ( 'a' - 10 ) ; } return - 1 ; }
void test4 ( ) throws Throwable { int int0 = JSONTokener . dehexchar ( '2' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int dehexchar ( char c ) { if ( c > = '0' & & c < = '9' ) { return c - '0' ; } if ( c > = 'A' & & c < = 'F' ) { return c - ( 'A' - 10 ) ; } if ( c > = 'a' & & c < = 'f' ) { return c - ( 'a' - 10 ) ; } return - 1 ; }
void test5 ( ) throws Throwable { int int0 = JSONTokener . dehexchar ( 'A' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int dehexchar ( char c ) { if ( c > = '0' & & c < = '9' ) { return c - '0' ; } if ( c > = 'A' & & c < = 'F' ) { return c - ( 'A' - 10 ) ; } if ( c > = 'a' & & c < = 'f' ) { return c - ( 'a' - 10 ) ; } return - 1 ; }
void test6 ( ) throws Throwable { int int0 = JSONTokener . dehexchar ( 'b' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int dehexchar ( char c ) { if ( c > = '0' & & c < = '9' ) { return c - '0' ; } if ( c > = 'A' & & c < = 'F' ) { return c - ( 'A' - 10 ) ; } if ( c > = 'a' & & c < = 'f' ) { return c - ( 'a' - 10 ) ; } return - 1 ; }
void test9 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "5 { u1 . 7DP" ) ; String string0 = jSONTokener0 . next ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char next ( ) { if ( more ( ) ) { char c = this . mySource . charAt ( this . myIndex ) ; this . myIndex + = 1 ; return c ; } return 0 ; }
void test11 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( " / F & lMZQ\" ) `VJaM + O" ) ; String string0 = "" ; try { string0 = ( String ) jSONTokener0 . nextValue ( ) ; fail ( "Expecting exception : JSONException" ) ; } catch ( JSONException e ) { / * * Missing value at character 0 of / F & lMZQ\" ) `VJaM + O * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test13 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "' and instead saw '" ) ; jSONTokener0 . next ( ) ; char char0 = jSONTokener0 . nextClean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test14 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( " ( iV O" ) ; String string0 = jSONTokener0 . nextTo ( ' / ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test15 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( " ] is not a JSONArray . " ) ; String string0 = jSONTokener0 . nextTo ( 'r' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test16 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "5 { u1 . 7DP" ) ; String string0 = jSONTokener0 . nextTo ( "5 { u1 . 7DP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test17 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test18 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "' and instead saw '" ) ; String string0 = ( String ) jSONTokener0 . nextValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test21 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "false" ) ; Boolean boolean0 = ( Boolean ) jSONTokener0 . nextValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test23 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "0 . cAD\"6Kzy1" ) ; String string0 = ( String ) jSONTokener0 . nextValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test25 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "Q2 = } VyNyDb ? wK_p" ) ; char char0 = jSONTokener0 . skipTo ( 'Q' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test26 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test27 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "%u ) Kmmg" ) ; boolean boolean0 = jSONTokener0 . skipPast ( "%u ) Kmmg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char nextClean ( ) throws JSONException { for ( ; ; ) { char c = next ( ) ; if ( c = = ' / ' ) { switch ( next ( ) ) { case ' / ' : do { c = next ( ) ; } while ( c ! = '\n' & & c ! = '\r' & & c ! = 0 ) ; break ; case ' * ' : for ( ; ; ) { c = next ( ) ; if ( c = = 0 ) { throw syntaxError ( "Unclosed comment" ) ; } if ( c = = ' * ' ) { if ( next ( ) = = ' / ' ) { break ; } back ( ) ; } } break ; default : back ( ) ; return ' / ' ; } } else if ( c = = '#' ) { do { c = next ( ) ; } while ( c ! = '\n' & & c ! = '\r' & & c ! = 0 ) ; } else if ( c = = 0 | | c > ' ' ) { return c ; } } }
void test28 ( ) throws Throwable { JSONTokener jSONTokener0 = new JSONTokener ( "%u ) Kmmg" ) ; boolean boolean0 = jSONTokener0 . skipPast ( "G_pU7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char nextClean ( ) throws JSONException { for ( ; ; ) { char c = next ( ) ; if ( c = = ' / ' ) { switch ( next ( ) ) { case ' / ' : do { c = next ( ) ; } while ( c ! = '\n' & & c ! = '\r' & & c ! = 0 ) ; break ; case ' * ' : for ( ; ; ) { c = next ( ) ; if ( c = = 0 ) { throw syntaxError ( "Unclosed comment" ) ; } if ( c = = ' * ' ) { if ( next ( ) = = ' / ' ) { break ; } back ( ) ; } } break ; default : back ( ) ; return ' / ' ; } } else if ( c = = '#' ) { do { c = next ( ) ; } while ( c ! = '\n' & & c ! = '\r' & & c ! = 0 ) ; } else if ( c = = 0 | | c > ' ' ) { return c ; } } }
void test0 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "Tue Jul 02 00 : 06 : 47 BST 2013" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( " { } A { [ FZ3 | ntg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test2 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; boolean boolean0 = jSONObject0 . isNull ( "x_bu - 9rI ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNull ( int index ) { return JSONObject . NULL . equals ( opt ( index ) ) ; }
void test3 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; boolean boolean0 = jSONObject0 . has ( "context" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean has ( String key ) { return this . myHashMap . containsKey ( key ) ; }
void test4 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "getnotifyAll" ) ; List < Component > list0 = xmlEntityRef0 . findAll ( ( ElExpression ) null ) ; jSONObject0 . put ( "x_bu - 9rI ! " , ( Collection ) list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test5 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; int int0 = jSONObject0 . optInt ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int optInt ( int index ) { return optInt ( index , 0 ) ; }
void test7 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test8 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; String string0 = jSONObject0 . optString ( "getnotifyAll" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String optString ( int index ) { return optString ( index , "" ) ; }
void test9 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; double double0 = jSONObject0 . optDouble ( "getequals" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double optDouble ( int index ) { return optDouble ( index , Double . NaN ) ; }
void test11 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; String string0 = jSONObject0 . toString ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test17 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONArray getJSONArray ( int index ) throws JSONException { Object o = get ( index ) ; if ( o instanceof JSONArray ) { return ( JSONArray ) o ; } throw new JSONException ( "JSONArray [ " + index + " ] is not a JSONArray . " ) ; }
void test18 ( ) throws Throwable { Long long0 = new Long ( ( - 14L ) ) ; String [ ] stringArray0 = new String [ 9 ] ; JSONObject jSONObject0 = new JSONObject ( ( Object ) long0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test19 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test20 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "No message was found with key ' { } ' . Check that you have created properties file with the same name as the StandaloneComponent class ( or it's super class ) using the message . " ) ; JSONObject jSONObject0 = new JSONObject ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test22 ( ) throws Throwable { String string0 = JSONObject . doubleToString ( ( - 865 . 1296406501076 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String doubleToString ( double d ) { if ( Double . isInfinite ( d ) | | Double . isNaN ( d ) ) { return "null" ; } / / Shave off trailing zeros and decimal point , if possible . String s = Double . toString ( d ) ; if ( s . indexOf ( ' . ' ) > 0 & & s . indexOf ( 'e' ) < 0 & & s . indexOf ( 'E' ) < 0 ) { while ( s . endsWith ( "0" ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } if ( s . endsWith ( " . " ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } } return s ; }
void test23 ( ) throws Throwable { String string0 = JSONObject . doubleToString ( 2 . 147483647E9 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String doubleToString ( double d ) { if ( Double . isInfinite ( d ) | | Double . isNaN ( d ) ) { return "null" ; } / / Shave off trailing zeros and decimal point , if possible . String s = Double . toString ( d ) ; if ( s . indexOf ( ' . ' ) > 0 & & s . indexOf ( 'e' ) < 0 & & s . indexOf ( 'E' ) < 0 ) { while ( s . endsWith ( "0" ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } if ( s . endsWith ( " . " ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } } return s ; }
void test24 ( ) throws Throwable { String string0 = JSONObject . doubleToString ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String doubleToString ( double d ) { if ( Double . isInfinite ( d ) | | Double . isNaN ( d ) ) { return "null" ; } / / Shave off trailing zeros and decimal point , if possible . String s = Double . toString ( d ) ; if ( s . indexOf ( ' . ' ) > 0 & & s . indexOf ( 'e' ) < 0 & & s . indexOf ( 'E' ) < 0 ) { while ( s . endsWith ( "0" ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } if ( s . endsWith ( " . " ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } } return s ; }
void test25 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "No message was found with key ' { } ' . Check that you have created properties file with the same name as the StandaloneComponent class ( or it's super class ) using the message . " ) ; JSONObject jSONObject0 = new JSONObject ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test26 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; jSONObject0 . put ( "isparseBool + au" , false ) ; boolean boolean0 = jSONObject0 . getBoolean ( "isparseBool + au" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test27 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "No message was found with key ' { } ' . Check that you have created properties file with the same name as the StandaloneComponent class ( or it's super class ) using the message . " ) ; JSONObject jSONObject0 = new JSONObject ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test28 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#report - namespace - prefixes" ) ; JSONObject jSONObject0 = jSONArray0 . toJSONObject ( jSONArray1 ) ; boolean boolean0 = jSONObject0 . optBoolean ( "http : / / xmlpull . org / v1 / doc / features . html#report - namespace - prefixes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test29 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test30 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "No message was found with key ' { } ' . Check that you have created properties file with the same name as the StandaloneComponent class ( or it's super class ) using the message . " ) ; JSONObject jSONObject0 = new JSONObject ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( int index ) throws JSONException { Object o = get ( index ) ; return o instanceof Number ? ( ( Number ) o ) . intValue ( ) : ( int ) getDouble ( index ) ; }
void test31 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; jSONObject0 . put ( "0" , ( long ) ( - 345 ) ) ; int int0 = jSONObject0 . getInt ( "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test33 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; JSONObject jSONObject1 = jSONObject0 . put ( "isparseBool + au" , false ) ; long long0 = jSONObject1 . optLong ( "isparseBool + au" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test34 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "zho" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test35 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; String [ ] stringArray0 = JSONObject . getNames ( jSONObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNames ( JSONObject jo ) { int length = jo . length ( ) ; if ( length = = 0 ) { return null ; } Iterator i = jo . keys ( ) ; String [ ] names = new String [ length ] ; int j = 0 ; while ( i . hasNext ( ) ) { names [ j ] = ( String ) i . next ( ) ; j + = 1 ; } return names ; }
void test36 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Map ) null ) ; String [ ] stringArray0 = JSONObject . getNames ( ( Object ) jSONObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNames ( JSONObject jo ) { int length = jo . length ( ) ; if ( length = = 0 ) { return null ; } Iterator i = jo . keys ( ) ; String [ ] names = new String [ length ] ; int j = 0 ; while ( i . hasNext ( ) ) { names [ j ] = ( String ) i . next ( ) ; j + = 1 ; } return names ; }
void test37 ( ) throws Throwable { String [ ] stringArray0 = JSONObject . getNames ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNames ( JSONObject jo ) { int length = jo . length ( ) ; if ( length = = 0 ) { return null ; } Iterator i = jo . keys ( ) ; String [ ] names = new String [ length ] ; int j = 0 ; while ( i . hasNext ( ) ) { names [ j ] = ( String ) i . next ( ) ; j + = 1 ; } return names ; }
void test38 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test40 ( ) throws Throwable { Float float0 = new Float ( ( - 591 . 9958F ) ) ; String string0 = JSONObject . numberToString ( ( Number ) float0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String numberToString ( Number n ) throws JSONException { if ( n = = null ) { throw new JSONException ( "Null pointer" ) ; } testValidity ( n ) ; / / Shave off trailing zeros and decimal point , if possible . String s = n . toString ( ) ; if ( s . indexOf ( ' . ' ) > 0 & & s . indexOf ( 'e' ) < 0 & & s . indexOf ( 'E' ) < 0 ) { while ( s . endsWith ( "0" ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } if ( s . endsWith ( " . " ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } } return s ; }
void test41 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "zho" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test42 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; JSONObject jSONObject1 = jSONObject0 . put ( "0" , ( long ) ( - 345 ) ) ; double double0 = jSONObject1 . optDouble ( "0" , ( double ) ( - 345 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test43 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "Tue Jul 02 00 : 06 : 47 BST 2013" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test44 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; JSONObject jSONObject1 = jSONObject0 . optJSONObject ( "e / z : H2GA , DH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONObject optJSONObject ( int index ) { Object o = opt ( index ) ; return o instanceof JSONObject ? ( JSONObject ) o : null ; }
void test45 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; jSONObject0 . put ( "getnotifyAll" , 0L ) ; String string0 = jSONObject0 . optString ( "getnotifyAll" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test46 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; JSONObject jSONObject1 = jSONObject0 . put ( "isparseBool + au" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test47 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test48 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test50 ( ) throws Throwable { String string0 = JSONObject . valueToString ( ( Object ) "\u4E2D\u6587 ( \u4E2D\u570B ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String valueToString ( Object value ) throws JSONException { if ( value = = null | | value . equals ( null ) ) { return "null" ; } if ( value instanceof JSONString ) { Object o ; try { o = ( ( JSONString ) value ) . toJSONString ( ) ; } catch ( Exception e ) { throw new JSONException ( e ) ; } if ( o instanceof String ) { return ( String ) o ; } throw new JSONException ( "Bad value from toJSONString : " + o ) ; } if ( value instanceof Number ) { return numberToString ( ( Number ) value ) ; } if ( value instanceof Boolean | | value instanceof JSONObject | | value instanceof JSONArray ) { return value . toString ( ) ; } if ( value instanceof Map ) { return new JSONObject ( ( Map ) value ) . toString ( ) ; } if ( value instanceof Collection ) { return new JSONArray ( ( Collection ) value ) . toString ( ) ; } if ( value . getClass ( ) . isArray ( ) ) { return new JSONArray ( value ) . toString ( ) ; } return quote ( value . toString ( ) ) ; }
void test51 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Map ) null ) ; JSONArray jSONArray0 = jSONObject0 . toJSONArray ( ( JSONArray ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names = = null | | names . length ( ) = = 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i + = 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
void test52 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( " . PZRrqxd1 & " ) ; List < Component > list0 = xmlEntityRef0 . _getChildren ( ) ; jSONObject0 . append ( " . PZRrqxd1 & " , ( Object ) list0 ) ; String string0 = jSONObject0 . toString ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test53 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( Object ) "http : / / xmlpull . org / v1 / doc / features . html#validation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test54 ( ) throws Throwable { String string0 = JSONObject . valueToString ( ( Object ) null , 1966 , 2014 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String valueToString ( Object value ) throws JSONException { if ( value = = null | | value . equals ( null ) ) { return "null" ; } if ( value instanceof JSONString ) { Object o ; try { o = ( ( JSONString ) value ) . toJSONString ( ) ; } catch ( Exception e ) { throw new JSONException ( e ) ; } if ( o instanceof String ) { return ( String ) o ; } throw new JSONException ( "Bad value from toJSONString : " + o ) ; } if ( value instanceof Number ) { return numberToString ( ( Number ) value ) ; } if ( value instanceof Boolean | | value instanceof JSONObject | | value instanceof JSONArray ) { return value . toString ( ) ; } if ( value instanceof Map ) { return new JSONObject ( ( Map ) value ) . toString ( ) ; } if ( value instanceof Collection ) { return new JSONArray ( ( Collection ) value ) . toString ( ) ; } if ( value . getClass ( ) . isArray ( ) ) { return new JSONArray ( value ) . toString ( ) ; } return quote ( value . toString ( ) ) ; }
void test56 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( " . PZRrqxd1 & " ) ; List < Component > list0 = xmlEntityRef0 . _getChildren ( ) ; jSONObject0 . append ( " . PZRrqxd1 & " , ( Object ) list0 ) ; jSONObject0 . put ( "isparseBool + au" , 1305 . 6233185109734 ) ; PipedWriter pipedWriter0 = new PipedWriter ( ) ; BufferedWriter bufferedWriter0 = new BufferedWriter ( ( Writer ) pipedWriter0 ) ; jSONObject0 . write ( ( Writer ) bufferedWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; double double0 = jSONArray0 . optDouble ( 1077 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double optDouble ( int index ) { return optDouble ( index , Double . NaN ) ; }
void test1 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; jSONArray0 . put ( ( - 1722L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test2 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 1030 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( ( - 1208 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test5 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; jSONArray0 . put ( ( double ) 480 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test6 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; boolean boolean0 = jSONArray0 . optBoolean ( ( - 265 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean optBoolean ( int index ) { return optBoolean ( index , false ) ; }
void test7 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test8 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; boolean boolean0 = jSONArray0 . isNull ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNull ( int index ) { return JSONObject . NULL . equals ( opt ( index ) ) ; }
void test9 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( " [ null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , 1076 , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , - 18 . 185760401077268 , [ ] ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test10 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; String string0 = jSONArray0 . optString ( 180 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String optString ( int index ) { return optString ( index , "" ) ; }
void test11 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test12 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; jSONArray0 . put ( ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test16 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; jSONArray0 . put ( false ) ; boolean boolean0 = jSONArray0 . optBoolean ( 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test17 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 92 , 1076 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test18 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test19 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 92 , 1076 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test20 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test21 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONArray getJSONArray ( int index ) throws JSONException { Object o = get ( index ) ; if ( o instanceof JSONArray ) { return ( JSONArray ) o ; } throw new JSONException ( "JSONArray [ " + index + " ] is not a JSONArray . " ) ; }
void test23 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 6 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONObject getJSONObject ( int index ) throws JSONException { Object o = get ( index ) ; if ( o instanceof JSONObject ) { return ( JSONObject ) o ; } throw new JSONException ( "JSONArray [ " + index + " ] is not a JSONObject . " ) ; }
void test24 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test25 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 92 , 1076 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test26 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; JSONArray jSONArray1 = jSONArray0 . optJSONArray ( 126 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONArray optJSONArray ( int index ) { Object o = opt ( index ) ; return o instanceof JSONArray ? ( JSONArray ) o : null ; }
void test27 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test28 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONObject jSONObject0 = jSONArray0 . optJSONObject ( 1691 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONObject optJSONObject ( int index ) { Object o = opt ( index ) ; return o instanceof JSONObject ? ( JSONObject ) o : null ; }
void test29 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test31 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test32 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONObject jSONObject0 = jSONArray0 . toJSONObject ( ( JSONArray ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONObject toJSONObject ( JSONArray names ) throws JSONException { if ( names = = null | | names . length ( ) = = 0 | | length ( ) = = 0 ) { return null ; } JSONObject jo = new JSONObject ( ) ; for ( int i = 0 ; i < names . length ( ) ; i + = 1 ) { jo . put ( names . getString ( i ) , this . opt ( i ) ) ; } return jo ; }
void test33 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONObject jSONObject0 = jSONArray0 . toJSONObject ( jSONArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JSONObject toJSONObject ( JSONArray names ) throws JSONException { if ( names = = null | | names . length ( ) = = 0 | | length ( ) = = 0 ) { return null ; } JSONObject jo = new JSONObject ( ) ; for ( int i = 0 ; i < names . length ( ) ; i + = 1 ) { jo . put ( names . getString ( i ) , this . opt ( i ) ) ; } return jo ; }
void test34 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = new JSONArray ( ) ; JSONArray jSONArray2 = jSONArray0 . put ( 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test35 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return expression . length ( ) ; }
void test36 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; JSONArray jSONArray1 = jSONArray0 . put ( 92 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; JSONWriter jSONWriter0 = new JSONWriter ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormElement value ( String value ) { setBinding ( value ) ; return this ; }
void test3 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; JSONWriter jSONWriter0 = new JSONWriter ( ( Writer ) charArrayWriter0 ) ; JSONWriter jSONWriter1 = jSONWriter0 . array ( ) ; JSONWriter jSONWriter2 = jSONWriter1 . object ( ) ; JSONWriter jSONWriter3 = jSONWriter2 . endObject ( ) ; jSONWriter3 . value ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; JSONWriter jSONWriter0 = new JSONWriter ( ( Writer ) charArrayWriter0 ) ; JSONWriter jSONWriter1 = jSONWriter0 . object ( ) ; JSONWriter jSONWriter2 = jSONWriter1 . key ( " . & q_77 } ~FO" ) ; jSONWriter2 . value ( ( double ) 0 ) ; jSONWriter0 . key ( " . & q_77 } ~FO" ) ; jSONWriter0 . array ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test0 ( ) throws Throwable { URL [ ] uRLArray0 = new URL [ 1 ] ; URLClassLoader uRLClassLoader0 = new URLClassLoader ( uRLArray0 ) ; WheelClassLoader wheelClassLoader0 = new WheelClassLoader ( uRLArray0 , ( ClassLoader ) uRLClassLoader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WheelClassLoader ( ClassLoader classLoader ) { super ( new URL [ ] { } , classLoader ) ; actionRegistry = new HashSet < String > ( ) ; }
void test1 ( ) throws Throwable { WheelClassLoader wheelClassLoader0 = new WheelClassLoader ( ( ClassLoader ) null ) ; Set < String > set0 = wheelClassLoader0 . getActionRegistry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionRegistry getActionRegistry ( ) ; Set getResourcesFromPath ( String path ) ; Class loadClass ( String className ) throws ClassNotFoundException ; }
void test2 ( ) throws Throwable { WheelClassLoader wheelClassLoader0 = new WheelClassLoader ( ( ClassLoader ) null ) ; Set < String > set0 = wheelClassLoader0 . getApplicationPackages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < String > getApplicationPackages ( ) { return applicationPackages ; }
void test0 ( ) throws Throwable { LinkedList < WheelAnnotatedField > linkedList0 = new LinkedList < WheelAnnotatedField > ( ) ; WheelFieldVisitor wheelFieldVisitor0 = new WheelFieldVisitor ( ( FieldVisitor ) null , ( List < WheelAnnotatedField > ) linkedList0 , 2 , ( String ) null , ( String ) null , ( String ) null ) ; WheelAnnotationVisitor wheelAnnotationVisitor0 = wheelFieldVisitor0 . getPersistAnnotationVisitor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WheelAnnotationVisitor getPersistAnnotationVisitor ( ) { return wheelAnnotationVisitor ; }
void test0 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 168 ) ; LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; WheelClassLoader wheelClassLoader0 = new WheelClassLoader ( classLoader0 ) ; WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter ( ( ClassVisitor ) classWriter0 , ( Set < String > ) linkedHashSet0 , wheelClassLoader0 ) ; List < WheelAnnotatedField > list0 = wheelClassAdapter0 . getPersistentFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return value = = null | | value . length = = 0 | | value [ 0 ] = = null | | value [ 0 ] . length ( ) = = 0 ; }
void test2 ( ) throws Throwable { ClassWriter classWriter0 = new ClassWriter ( 1970 ) ; ClassAdapter classAdapter0 = new ClassAdapter ( ( ClassVisitor ) classWriter0 ) ; ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; WheelClassLoader wheelClassLoader0 = new WheelClassLoader ( classLoader0 ) ; Set < String > set0 = wheelClassLoader0 . getActionRegistry ( ) ; WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter ( ( ClassVisitor ) classAdapter0 , set0 , wheelClassLoader0 ) ; Integer integer0 = Opcodes . DOUBLE ; WheelFieldVisitor wheelFieldVisitor0 = ( WheelFieldVisitor ) wheelClassAdapter0 . visitField ( 1970 , "B#R4 ( p5X5xBs ] p" , "B#R4 ( p5X5xBs ] p" , "B#R4 ( p5X5xBs ] p" , ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { return cv . visitField ( access , name , desc , signature , value ) ; }
void test0 ( ) throws Throwable { WheelAnnotationVisitor wheelAnnotationVisitor0 = new WheelAnnotationVisitor ( ( AnnotationVisitor ) null ) ; boolean boolean0 = wheelAnnotationVisitor0 . isRebuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRebuild ( ) { return rebuild ; }
void test6 ( ) throws Throwable { WheelAnnotationVisitor wheelAnnotationVisitor0 = new WheelAnnotationVisitor ( ( AnnotationVisitor ) null ) ; wheelAnnotationVisitor0 . visit ( "^flj ; " , "false" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRebuild ( ) { return rebuild ; }
void test7 ( ) throws Throwable { WheelAnnotationVisitor wheelAnnotationVisitor0 = new WheelAnnotationVisitor ( ( AnnotationVisitor ) null ) ; Boolean boolean0 = Boolean . valueOf ( "rebuild" ) ; wheelAnnotationVisitor0 . visit ( "rebuild" , ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) { cv . visit ( version , access , name , signature , superName , interfaces ) ; }
void test0 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; wheelAnnotatedField0 . isGetterAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test1 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "J" , "J" , "J" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLocalVarIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test2 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "J" , "J" , "J" , scope0 ) ; wheelAnnotatedField0 . setGetterAvailable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGetterAvailable ( ) { return getterAvailable ; }
void test3 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; wheelAnnotatedField0 . setLocalVarIndex ( 54 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test4 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test5 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "D" , "D" , "" , scope0 ) ; wheelAnnotatedField0 . getStartLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test6 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " } " , "" , " } " , scope0 ) ; wheelAnnotatedField0 . setOwnerClassName ( " } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test7 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; wheelAnnotatedField0 . setStartLabel ( ( Label ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test8 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; wheelAnnotatedField0 . getOwnerClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test9 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; wheelAnnotatedField0 . setSetterAvailable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test10 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; Scope scope1 = wheelAnnotatedField0 . getScope ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test11 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; String string0 = wheelAnnotatedField0 . getDesc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test12 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "67ihEhEEs\"ogt^v8Q" , "" , scope0 ) ; String string0 = wheelAnnotatedField0 . getSignature ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesc ( ) { return desc ; }
void test13 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; wheelAnnotatedField0 . isSetterAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test14 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; String string0 = wheelAnnotatedField0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test15 ( ) throws Throwable { WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( ( String ) null , ( String ) null , ( String ) null , ( Scope ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test16 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; String string0 = wheelAnnotatedField0 . getGetterName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test17 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isGetterOrSetterForThisField ( "setLB * Q " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSetterAvailable ( ) { return setterAvailable ; }
void test18 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isGetterOrSetterForThisField ( "getC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGetterAvailable ( ) { return getterAvailable ; }
void test19 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " } " , "" , " } " , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isGetterOrSetterForThisField ( " } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWrapperType ( ) { if ( desc . equals ( "I" ) ) { return "java / lang / Integer" ; } else if ( desc . equals ( "J" ) ) { return "java / lang / Long" ; } else if ( desc . equals ( "F" ) ) { return "java / lang / Float" ; } else if ( desc . equals ( "D" ) ) { return "java / lang / Double" ; } else if ( desc . equals ( "Z" ) ) { return "java / lang / Boolean" ; } else if ( desc . equals ( "C" ) ) { return "java / lang / Character" ; } else if ( desc . equals ( "S" ) ) { return "java / lang / Short" ; } else if ( desc . equals ( "B" ) ) { return "java / lang / Byte" ; } return getClassName ( ) ; }
void test20 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test21 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test22 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test23 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test24 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test25 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test26 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWrapperTypeInternal ( ) { if ( desc . equals ( "I" ) ) { return "Ljava / lang / Integer ; " ; } else if ( desc . equals ( "J" ) ) { return "Ljava / lang / Long ; " ; } else if ( desc . equals ( "F" ) ) { return "Ljava / lang / Float ; " ; } else if ( desc . equals ( "D" ) ) { return "Ljava / lang / Double ; " ; } else if ( desc . equals ( "Z" ) ) { return "Ljava / lang / Boolean ; " ; } else if ( desc . equals ( "C" ) ) { return "Ljava / lang / Character ; " ; } else if ( desc . equals ( "S" ) ) { return "Ljava / lang / Short ; " ; } else if ( desc . equals ( "B" ) ) { return "Ljava / lang / Byte ; " ; } return desc ; }
void test27 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test28 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSignature ( ) { return signature ; }
void test30 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "QG" , " [ doubleValue" , "QG" , scope0 ) ; int int0 = wheelAnnotatedField0 . getLoadOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSignature ( ) { return signature ; }
void test31 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test32 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "J" , "J" , "J" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test33 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test34 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test35 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test36 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test37 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test38 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test39 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test40 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " [ " , " [ " , "" , scope0 ) ; int int0 = wheelAnnotatedField0 . getStoreOpcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test42 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test43 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test44 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test45 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test46 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "5O . 5 } _ : ? ZV@^$aL" , "Z" , "5O . 5 } _ : ? ZV@^$aL" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterName ( ) { if ( desc . equals ( "Z" ) ) return "is" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 , name . length ( ) ) ; return "get" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 , name . length ( ) ) ; }
void test47 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test48 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSignature ( ) { return signature ; }
void test49 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test50 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSignature ( ) { return signature ; }
void test52 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " [ " , " [ " , "" , scope0 ) ; int int0 = wheelAnnotatedField0 . getReturnOpCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuffer b = new StringBuffer ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; - - i ) { b . append ( " [ ] " ) ; } return b . toString ( ) ; / / case OBJECT : default : return new String ( buf , off , len ) . replace ( ' / ' , ' . ' ) ; } }
void test53 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test54 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test55 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test56 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test57 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test58 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Ljav / lang / Sythetic ; " , "Ljav / lang / Sythetic ; " , "Ljav / lang / Sythetic ; " , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test59 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test60 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test61 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test62 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test63 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test64 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test65 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test66 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterName ( ) { if ( desc . equals ( "Z" ) ) return "is" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 , name . length ( ) ) ; return "get" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 , name . length ( ) ) ; }
void test67 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test68 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test69 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test70 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperTypeInternal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test71 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test72 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test73 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test74 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "5O . 5 } _ : ? ZV@^$aL" , "Z" , "5O . 5 } _ : ? ZV@^$aL" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test75 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test76 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test77 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test78 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; String string0 = wheelAnnotatedField0 . getNarrowingMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test80 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "J" , "J" , "J" , scope0 ) ; String string0 = wheelAnnotatedField0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test81 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " [ " , " [ " , "" , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . needsWrapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test82 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "L } " , "L } " , "L } " , scope0 ) ; String string0 = wheelAnnotatedField0 . getWrapperType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test83 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test84 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test85 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test86 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test87 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Z" , "Z" , "Z" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test88 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test89 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterName ( ) { if ( desc . equals ( "Z" ) ) return "is" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 , name . length ( ) ) ; return "get" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 , name . length ( ) ) ; }
void test90 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test92 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "LB * Q " , "LB * Q " , "LB * Q " , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test93 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " [ " , " [ " , "" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForSetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test94 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "I" , "I" , "I" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test96 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "C" , "C" , "C" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test97 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "S" , "S" , "S" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test98 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "5O . 5 } _ : ? ZV@^$aL" , "Z" , "5O . 5 } _ : ? ZV@^$aL" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSignature ( ) { return signature ; }
void test99 ( ) throws Throwable { Scope scope0 = Scope . request ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "B" , "B" , "B" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test100 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "67ihEhEEs\"ogt^v8Q" , "D" , "D" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test101 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "J" , "J" , "J" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test102 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test103 ( ) throws Throwable { Scope scope0 = Scope . global ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "Ljav / lang / Sythetic ; " , "Ljav / lang / Sythetic ; " , "Ljav / lang / Sythetic ; " , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test104 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " [ " , " [ " , "" , scope0 ) ; int int0 = wheelAnnotatedField0 . getMaxStackSizeForGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSignature ( ) { return signature ; }
void test105 ( ) throws Throwable { Scope scope0 = Scope . component ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "D" , "D" , "" , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isWideNativeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test106 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "F" , "F" , "F" , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isWideNativeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scope getScope ( ) { return scope ; }
void test107 ( ) throws Throwable { Scope scope0 = Scope . page ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( "" , "J" , "J" , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isWideNativeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test108 ( ) throws Throwable { Scope scope0 = Scope . session ; WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField ( " [ " , " [ " , "" , scope0 ) ; boolean boolean0 = wheelAnnotatedField0 . isWideNativeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalVarIndex ( ) { return localVarIndex ; }
void test0 ( ) throws Throwable { ProjectCreator projectCreator0 = new ProjectCreator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; InitialFieldValue initialFieldValue0 = new InitialFieldValue ( object0 , "Z52NcTHnag ) N7Q1p ? " ) ; Object object1 = initialFieldValue0 . getEmptyValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getEmptyValue ( ) { return emptyValue ; }
void test1 ( ) throws Throwable { InitialFieldValue initialFieldValue0 = new InitialFieldValue ( "fAUXq_ < K1bo { 4is | = < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringReplacement ( ) { return stringReplacement ; }
void test2 ( ) throws Throwable { Object object0 = new Object ( ) ; InitialFieldValue initialFieldValue0 = new InitialFieldValue ( object0 , "Z52NcTHnag ) N7Q1p ? " ) ; String string0 = initialFieldValue0 . getStringReplacement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringReplacement ( ) { return stringReplacement ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Map < String , Component > map0 = errorPage0 . getComponents ( ) ; WheelURL wheelURL0 = new WheelURL ( "2$ ! NcBY . NoW ] K't , oI" , ( Map ) map0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAssetUrl ( ) { return asset ; }
void test1 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; WheelURL wheelURL0 = new WheelURL ( "asset / + va" , ( Map ) hashMap0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAssetUrl ( ) { return asset ; }
void test2 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 9 ) ; WheelURL wheelURL0 = new WheelURL ( "nW - sEhwCvn - . > X : CZ : h" , ( Map ) hashMap0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAssetUrl ( ) { return asset ; }
void test3 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 9 ) ; WheelURL wheelURL0 = new WheelURL ( "nW - sEhwCvn - . > X : CZ : h" , ( Map ) hashMap0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAssetUrl ( ) { return asset ; }
void test4 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 9 ) ; WheelURL wheelURL0 = new WheelURL ( "nW - sEhwCvn - . > X : CZ : h" , ( Map ) hashMap0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAssetUrl ( ) { return asset ; }
void test5 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 9 ) ; WheelURL wheelURL0 = new WheelURL ( "nW - sEhwCvn - . > X : CZ : h" , ( Map ) hashMap0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethod ( ) { return method ; }
void test6 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 9 ) ; WheelURL wheelURL0 = new WheelURL ( "nW - sEhwCvn - . > X : CZ : h" , ( Map ) hashMap0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAssetUrl ( ) { return asset ; }
void test7 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Map < String , Component > map0 = errorPage0 . getComponents ( ) ; WheelURL wheelURL0 = new WheelURL ( "2$ ! NcBY . NoW ] K't , oI" , ( Map ) map0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethod ( ) { return method ; }
void test8 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; Map < String , Component > map0 = errorPage0 . getComponents ( ) ; WheelURL wheelURL0 = new WheelURL ( "Y , $W + " , ( Map ) map0 , ( IEngine ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAjaxUrl ( ) { return ajax ; }
void test0 ( ) throws Throwable { ActionRegistry actionRegistry0 = new ActionRegistry ( ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; Block block0 = ( Block ) errorPage0 . dfn ( ) ; boolean boolean0 = actionRegistry0 . isActionMethod ( ( Component ) block0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActionMethod ( Component component , String methodName ) { List < String > classNames = new LinkedList < String > ( ) ; Class clazz = component . getClass ( ) ; while ( clazz ! = null & & ! clazz . getName ( ) . equals ( "wheel . components . StandaloneComponent" ) ) { classNames . add ( clazz . getName ( ) . replace ( ' . ' , ' / ' ) ) ; clazz = clazz . getSuperclass ( ) ; } for ( Entry entry : entries ) { if ( classNames . contains ( entry . className ) & & entry . methodName . equals ( methodName ) ) return true ; } return false ; }
void test1 ( ) throws Throwable { ActionRegistry actionRegistry0 = new ActionRegistry ( ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; boolean boolean0 = actionRegistry0 . isActionMethod ( ( Component ) errorPage0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActionMethod ( Component component , String methodName ) { List < String > classNames = new LinkedList < String > ( ) ; Class clazz = component . getClass ( ) ; while ( clazz ! = null & & ! clazz . getName ( ) . equals ( "wheel . components . StandaloneComponent" ) ) { classNames . add ( clazz . getName ( ) . replace ( ' . ' , ' / ' ) ) ; clazz = clazz . getSuperclass ( ) ; } for ( Entry entry : entries ) { if ( classNames . contains ( entry . className ) & & entry . methodName . equals ( methodName ) ) return true ; } return false ; }
void test2 ( ) throws Throwable { ActionRegistry actionRegistry0 = new ActionRegistry ( ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; boolean boolean0 = actionRegistry0 . needsRebuilding ( ( Component ) errorPage0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean needsRebuilding ( Component component , String methodName ) { for ( Entry entry : entries ) { if ( entry . className . equals ( component . getClass ( ) . getName ( ) ) & & entry . methodName . equals ( methodName ) & & entry . rebuild ) return true ; } return false ; }
void test1 ( ) throws Throwable { CalendarConversionHandler calendarConversionHandler0 = new CalendarConversionHandler ( ) ; Class < ? > class0 = StringBuffer . class ; boolean boolean0 = calendarConversionHandler0 . canConvertFrom ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canConvertFrom ( Class aClass ) { if ( aClass . getName ( ) . equals ( "java . lang . String" ) ) return true ; return false ; }
void test2 ( ) throws Throwable { CalendarConversionHandler calendarConversionHandler0 = new CalendarConversionHandler ( ) ; Class < ? > class0 = String . class ; boolean boolean0 = calendarConversionHandler0 . canConvertFrom ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canConvertFrom ( Class aClass ) { if ( aClass . getName ( ) . equals ( "java . lang . String" ) ) return true ; return false ; }
void test0 ( ) throws Throwable { FileUploadMetadata fileUploadMetadata0 = new FileUploadMetadata ( "$4iOd } o7 ? rS" , "$4iOd } o7 ? rS" , ( - 1L ) ) ; String string0 = fileUploadMetadata0 . getFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test1 ( ) throws Throwable { FileUploadMetadata fileUploadMetadata0 = new FileUploadMetadata ( "$4iOd } o7 ? rS" , "$4iOd } o7 ? rS" , ( - 1L ) ) ; String string0 = fileUploadMetadata0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test2 ( ) throws Throwable { FileUploadMetadata fileUploadMetadata0 = new FileUploadMetadata ( "" , "" , 0L ) ; long long0 = fileUploadMetadata0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return sort = = LONG | | sort = = DOUBLE ? 2 : 1 ; }
void test0 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; Component component0 = dynamicSelectModel0 . getComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponent ( ) { return component ; }
void test3 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0 . empty ( ( Object ) dynamicSelectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DynamicSelectModel empty ( Object o ) { this . emptyObject = o ; return this ; }
void test4 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; dynamicSelectModel0 . setComponent ( ( Component ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPageRewinding ( ) { return getPage ( ) . rewinding ; }
void test5 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; StandaloneComponent standaloneComponent0 = dynamicSelectModel0 . getTopLevelComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StandaloneComponent getTopLevelComponent ( ) { return topLevelComponent ; }
void test6 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0 . translator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DynamicSelectModel translator ( String translator ) { this . translator = new ElExpression ( translator ) ; return this ; }
void test10 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0 . value ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormElement value ( String value ) { setBinding ( value ) ; return this ; }
void test11 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; ErrorPage errorPage0 = new ErrorPage ( ) ; dynamicSelectModel0 . setTopLevelComponent ( ( StandaloneComponent ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _classReferenceFromHints ( ) { StringBuffer classRef = new StringBuffer ( ) ; for ( int i = 0 ; i < _getRenderHints ( ) . size ( ) ; i + + ) { String s = ( String ) _getRenderHints ( ) . get ( i ) ; if ( i = = 0 & & HTML . containsKey ( s ) ) { continue ; } classRef . append ( eval ( s ) ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } if ( _getRenderHints ( ) . size ( ) = = 0 & & internalRenderHints ! = null ) { for ( int i = 0 ; i < internalRenderHints . size ( ) ; i + + ) { String hint = internalRenderHints . get ( i ) ; classRef . append ( hint ) ; if ( i < ( _getRenderHints ( ) . size ( ) - 1 ) ) classRef . append ( " " ) ; } } if ( classRef . length ( ) > 0 ) return classRef . toString ( ) ; return null ; }
void test13 ( ) throws Throwable { DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel ( ) ; DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0 . enumeration ( "" ) ; dynamicSelectModel0 . validate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validate ( ) { if ( validationRules = = null | | validationRules . isEmpty ( ) ) return ; Map vars = new HashMap ( ) ; vars . put ( "value" , value [ 0 ] ) ; vars . put ( "element" , this ) ; vars . put ( "form" , _getForm ( true ) ) ; Map otherVariables = _getTopLevelComponent ( true ) . validationVariables ; if ( otherVariables ! = null ) vars . putAll ( otherVariables ) ; for ( ValidationRule validationRule : validationRules ) { Boolean valid = null ; try { valid = ( Boolean ) MVEL . eval ( validationRule . getElExpression ( ) , Validations . getInstance ( ) , vars ) ; } catch ( Throwable e ) { throw new WheelException ( "Validation expression " + validationRule . getElExpression ( ) + " failed . " , e , this ) ; } if ( ! valid . booleanValue ( ) ) { if ( validationErrors = = null ) validationErrors = new LinkedList < ValidationError > ( ) ; validationErrors . add ( new ValidationError ( eval ( validationRule . getMessage ( ) ) , this ) ) ; } } if ( ! isValid ( ) ) addInternalRenderHint ( "error" ) ; }
void test1 ( ) throws Throwable { DateConversionHandler dateConversionHandler0 = new DateConversionHandler ( ) ; Class < ? > class0 = StringBuffer . class ; boolean boolean0 = dateConversionHandler0 . canConvertFrom ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canConvertFrom ( Class aClass ) { if ( aClass . getName ( ) . equals ( "java . lang . String" ) ) return true ; return false ; }
void test2 ( ) throws Throwable { DateConversionHandler dateConversionHandler0 = new DateConversionHandler ( ) ; Class < ? > class0 = String . class ; boolean boolean0 = dateConversionHandler0 . canConvertFrom ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canConvertFrom ( Class aClass ) { if ( aClass . getName ( ) . equals ( "java . lang . String" ) ) return true ; return false ; }
void test1 ( ) throws Throwable { CalendarConversionHandler calendarConversionHandler0 = new CalendarConversionHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { SimpleDateFormat simpleDateFormat0 = AbstractDateConversionHandler . getDateFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return ( SimpleDateFormat ) dateFormat . get ( ) ; }
void test0 ( ) throws Throwable { LabelValue labelValue0 = new LabelValue ( "" , "" ) ; String string0 = labelValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test1 ( ) throws Throwable { LabelValue labelValue0 = new LabelValue ( "" , "" ) ; String string0 = labelValue0 . getLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( int index ) ; / * * * Returns the String value that identifies the object in a html form . * @param index * @return * / String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test2 ( ) throws Throwable { LabelValue labelValue0 = new LabelValue ( "" , "" ) ; labelValue0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( int index ) ; / * * * Returns the String value that identifies the object in a html form . * @param index * @return * / String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test3 ( ) throws Throwable { LabelValue labelValue0 = new LabelValue ( "" , "" ) ; labelValue0 . setLabel ( " | Yg < ! ; 2^S ? * Nz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( int index ) ; / * * * Returns the String value that identifies the object in a html form . * @param index * @return * / String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentStore componentStore0 = errorPage0 . _getComponentStore ( ) ; componentStore0 . addComponent ( ( Component ) errorPage0 ) ; Component component0 = componentStore0 . getComponent ( "l\"5 | dbz | PC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponent ( ) { return component ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentStore componentStore0 = errorPage0 . _getComponentStore ( ) ; Component component0 = componentStore0 . getComponent ( "l\"5 | dbz | PC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponent ( ) { return component ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentStore componentStore0 = errorPage0 . _getComponentStore ( ) ; Form form0 = ( Form ) errorPage0 . form ( "l\"5 | dbz | PC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test3 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentStore componentStore0 = errorPage0 . _getComponentStore ( ) ; componentStore0 . addComponent ( ( Component ) errorPage0 ) ; Component component0 = componentStore0 . remove ( "l\"5 | dbz | PC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component remove ( Component component ) { children . remove ( component ) ; return this ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ComponentStore componentStore0 = errorPage0 . _getComponentStore ( ) ; Component component0 = componentStore0 . remove ( "l\"5 | dbz | PC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component remove ( Component component ) { children . remove ( component ) ; return this ; }
void test0 ( ) throws Throwable { StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; stringSelectModel0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptionCount ( ) ; / * * * Returns the label to use in the html - presentation for a given index . * @param index * @return * / String getLabel ( int index ) ; / * * * Returns the String value that identifies the object in a html form . * @param index * @return * / String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test1 ( ) throws Throwable { StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; Collection < Object > collection0 = stringSelectModel0 . getObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return value = = null | | value . length = = 0 | | value [ 0 ] = = null | | value [ 0 ] . length ( ) = = 0 ; }
void test2 ( ) throws Throwable { StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; Object object0 = stringSelectModel0 . translateValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test4 ( ) throws Throwable { StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; stringSelectModel0 . addValue ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptionCount ( ) ; / * * * Returns the label to use in the html - presentation for a given index . * @param index * @return * / String getLabel ( int index ) ; / * * * Returns the String value that identifies the object in a html form . * @param index * @return * / String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test5 ( ) throws Throwable { StringSelectModel stringSelectModel0 = new StringSelectModel ( ) ; int int0 = stringSelectModel0 . getOptionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptionCount ( ) ; / * * * Returns the label to use in the html - presentation for a given index . * @param index * @return * / String getLabel ( int index ) ; / * * * Returns the String value that identifies the object in a html form . * @param index * @return * / String getValue ( int index ) ; / * * * Translates the given String value ( from form submit ) to the corresponding Object . * @param value * @return * / Object translateValue ( String value ) ; / / TODO Collection getObjects ( ) ; }
void test0 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; String string0 = "4\\u5e9\\Qpz6" ; ElExpression elExpression0 = errorPage0 . el ( string0 ) ; LinkToDomain linkToDomain0 = new LinkToDomain ( elExpression0 , elExpression0 ) ; ElExpression elExpression1 = linkToDomain0 . getElExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test1 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; String string0 = "4\\u5e9\\Qpz6" ; ElExpression elExpression0 = errorPage0 . el ( string0 ) ; LinkToDomain linkToDomain0 = new LinkToDomain ( elExpression0 , elExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHashCode ( ) { return hashCode ; }
void test2 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; String string0 = "4\\u5e9\\Qpz6" ; ElExpression elExpression0 = errorPage0 . el ( string0 ) ; LinkToDomain linkToDomain0 = new LinkToDomain ( elExpression0 , elExpression0 ) ; ElExpression elExpression1 = linkToDomain0 . getFieldName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getDescriptor ( ) ; }
void test4 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; String string0 = "4\\u5e9\\Qpz6" ; ElExpression elExpression0 = errorPage0 . el ( string0 ) ; LinkToDomain linkToDomain0 = new LinkToDomain ( elExpression0 , elExpression0 ) ; linkToDomain0 . getCopy ( ( StandaloneComponent ) errorPage0 ) ; linkToDomain0 . writeToDomain ( ( StandaloneComponent ) errorPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean _isBuilt ( ) { return built ; }
void test5 ( ) throws Throwable { ErrorPage errorPage0 = new ErrorPage ( ) ; ElExpression elExpression0 = new ElExpression ( "int" ) ; LinkToDomain linkToDomain0 = new LinkToDomain ( elExpression0 , elExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeToDomain ( StandaloneComponent topLevelComponent ) { Object fieldValue = fieldName . eval ( topLevelComponent , topLevelComponent ) ; fieldValue = copyObject ( fieldValue ) ; / / TODO this might be a bit too optimistic solution if ( fieldValue . hashCode ( ) = = hashCode ) return ; hashCode = fieldValue . hashCode ( ) ; if ( fieldValue instanceof Collection ) { Collection collection = ( Collection ) fieldValue ; Object [ ] asArray = collection . toArray ( ) ; for ( int i = 0 ; i < asArray . length ; i + + ) { Object o = asArray [ i ] ; new ElExpression ( elExpression . getExpression ( ) + " [ " + i + " ] " ) . store ( topLevelComponent , topLevelComponent , o ) ; } } else if ( fieldValue instanceof Map ) { Map map = ( Map ) fieldValue ; for ( Object key : map . keySet ( ) ) { Object value = map . get ( key ) ; new ElExpression ( elExpression . getExpression ( ) + " [ " + key + " ] " ) . store ( topLevelComponent , topLevelComponent , value ) ; } } else elExpression . store ( topLevelComponent , topLevelComponent , fieldValue ) ; }
void test6 ( ) throws Throwable { XmlEntityRef xmlEntityRef0 = new XmlEntityRef ( "' provider '" ) ; ElExpression elExpression0 = xmlEntityRef0 . el ( "' provider '" ) ; LinkToDomain linkToDomain0 = new LinkToDomain ( elExpression0 , elExpression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHashCode ( ) { return hashCode ; }
