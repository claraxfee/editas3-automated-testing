void test1 ( ) throws Throwable { HashMap < Locale , Resources > hashMap0 = new HashMap < Locale , Resources > ( 8 , 8 ) ; MapResourcesBunble mapResourcesBunble0 = new MapResourcesBunble ( ( Map < Locale , Resources > ) hashMap0 ) ; Locale locale0 = JComponent . getDefaultLocale ( ) ; ResourcesInjector resourcesInjector0 = new ResourcesInjector ( ( ResourcesBundle ) mapResourcesBunble0 , locale0 ) ; Locale locale1 = resourcesInjector0 . getLocale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Locale getLocale ( ) { return locale ; }
void test2 ( ) throws Throwable { Hashtable < Locale , Resources > hashtable0 = new Hashtable < Locale , Resources > ( ) ; MapResourcesBunble mapResourcesBunble0 = new MapResourcesBunble ( ( Map < Locale , Resources > ) hashtable0 ) ; Locale locale0 = JComponent . getDefaultLocale ( ) ; ResourcesInjector resourcesInjector0 = new ResourcesInjector ( ( ResourcesBundle ) mapResourcesBunble0 , locale0 ) ; MapResourcesBunble mapResourcesBunble1 = ( MapResourcesBunble ) resourcesInjector0 . getResourcesBundle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourcesBundle getResourcesBundle ( ) { return resourcesBundle ; }
void test3 ( ) throws Throwable { Hashtable < Locale , Resources > hashtable0 = new Hashtable < Locale , Resources > ( ) ; MapResourcesBunble mapResourcesBunble0 = new MapResourcesBunble ( ( Map < Locale , Resources > ) hashtable0 ) ; Locale locale0 = JComponent . getDefaultLocale ( ) ; ResourcesInjector resourcesInjector0 = new ResourcesInjector ( ( ResourcesBundle ) mapResourcesBunble0 , locale0 ) ; ResourcesInjector resourcesInjector1 = resourcesInjector0 . setLocale ( ( Locale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourcesInjector setLocale ( Locale locale ) { this . locale = locale = = null ? Locale . getDefault ( ) : locale ; return this ; }
void test0 ( ) throws Throwable { HashMap < Locale , Resources > hashMap0 = new HashMap < Locale , Resources > ( ) ; MapResourcesBunble mapResourcesBunble0 = new MapResourcesBunble ( ( Map < Locale , Resources > ) hashMap0 ) ; Resources resources0 = mapResourcesBunble0 . getResources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Resources getResources ( ) ; / * * * Returns the Resources for the specified Locale . * @param locale the Locale . * @return the Resources for the specified Locale . * / Resources getResources ( Locale locale ) ; }
void test1 ( ) throws Throwable { HashMap < Locale , Resources > hashMap0 = new HashMap < Locale , Resources > ( ) ; MapResourcesBunble mapResourcesBunble0 = new MapResourcesBunble ( ( Map < Locale , Resources > ) hashMap0 ) ; Locale locale0 = Locale . ITALY ; Resources resources0 = mapResourcesBunble0 . getResources ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Resources getResources ( ) ; / * * * Returns the Resources for the specified Locale . * @param locale the Locale . * @return the Resources for the specified Locale . * / Resources getResources ( Locale locale ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = FileResourcesBundleLoader . class ; FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( class0 , "GRAa" ) ; File file0 = fileResourcesBundleLoader0 . getDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test1 ( ) throws Throwable { FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( "YU ; xX ! yz" , "YU ; xX ! yz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test2 ( ) throws Throwable { FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( " - " , " - " ) ; fileResourcesBundleLoader0 . setFileBasename ( " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test3 ( ) throws Throwable { Class < ? > class0 = FileResourcesBundleLoader . class ; FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( class0 , "GRAa" ) ; int int0 = fileResourcesBundleLoader0 . getDateFormatStyle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test4 ( ) throws Throwable { FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( " - " , " - " ) ; String string0 = fileResourcesBundleLoader0 . getFileBasename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test5 ( ) throws Throwable { FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( "YU ; xX ! yz" , "YU ; xX ! yz" ) ; Charset charset0 = fileResourcesBundleLoader0 . getCharset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test6 ( ) throws Throwable { FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( "YU ; xX ! yz" , "YU ; xX ! yz" ) ; fileResourcesBundleLoader0 . getDateFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
void test7 ( ) throws Throwable { FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader ( " - " , " - " ) ; SimpleDateFormat simpleDateFormat0 = ( SimpleDateFormat ) DateFormat . getTimeInstance ( ) ; fileResourcesBundleLoader0 . setDateFormat ( ( DateFormat ) simpleDateFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDateFormatStyle ( ) { return dateFormatStyle ; }
