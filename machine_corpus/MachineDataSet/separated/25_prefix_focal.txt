void test0 ( ) throws Throwable { Main main0 = new Main ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = Main . getTestMolecule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumAtoms ( ) { return atomList . size ( ) ; }
void test0 ( ) throws Throwable { INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . DOUBLEBOND ; int int0 = iNCHI_STEREOTYPE0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test0 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( " T : " ) ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , jniInchiAtom0 , 1963 , 1963 ) ; JniInchiAtom jniInchiAtom1 = jniInchiBond0 . getOriginAtom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getImplicitDeuterium ( ) { return implicitD ; }
void test1 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "Q5VB } UBt , , { z ! 6 - L6x" ) ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , ( JniInchiAtom ) null , ( - 1956 ) , ( - 1956 ) ) ; JniInchiAtom jniInchiAtom1 = jniInchiBond0 . getTargetAtom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JniInchiAtom getTargetAtom ( ) { return atomTarget ; }
void test2 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "@ ? BGd * ! / K" ) ; INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . NONE ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , jniInchiAtom0 , iNCHI_BOND_TYPE0 ) ; jniInchiBond0 . debug ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test3 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . SINGLE ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , jniInchiAtom0 , iNCHI_BOND_TYPE0 ) ; INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = jniInchiBond0 . getBondStereo ( ) ; jniInchiBond0 . setStereoDefinition ( iNCHI_BOND_STEREO0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test4 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . SINGLE ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , jniInchiAtom0 , iNCHI_BOND_TYPE0 ) ; INCHI_BOND_TYPE iNCHI_BOND_TYPE1 = jniInchiBond0 . getBondType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_BOND_TYPE getBondType ( ) { return type ; }
void test5 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . SINGLE ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , jniInchiAtom0 , iNCHI_BOND_TYPE0 ) ; int int0 = jniInchiBond0 . getInchiBondStereo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInchiBondStereo ( ) { return stereo . getIndx ( ) ; }
void test6 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . SINGLE ; JniInchiBond jniInchiBond0 = new JniInchiBond ( jniInchiAtom0 , jniInchiAtom0 , iNCHI_BOND_TYPE0 ) ; int int0 = jniInchiBond0 . getInchiBondType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInchiBondType ( ) { return type . getIndx ( ) ; }
void test0 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; JniInchiInput jniInchiInput0 = new JniInchiInput ( jniInchiStructure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumAtoms ( ) { return atomList . size ( ) ; }
void test1 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; JniInchiInput jniInchiInput0 = new JniInchiInput ( ( List ) linkedList0 ) ; JniInchiInput jniInchiInput1 = new JniInchiInput ( ( JniInchiStructure ) jniInchiInput0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JniInchiInput ( ) { this . options = "" ; }
void test2 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; JniInchiInput jniInchiInput0 = new JniInchiInput ( ( List ) linkedList0 ) ; String string0 = jniInchiInput0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptions ( ) { return options ; }
void test3 ( ) throws Throwable { JniInchiInput jniInchiInput0 = new JniInchiInput ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumStereo0D ( ) { return stereoList . size ( ) ; }
void test0 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; JniInchiInputInchi jniInchiInputInchi0 = new JniInchiInputInchi ( "" , ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInchi ( ) { return inchiString ; }
void test1 ( ) throws Throwable { JniInchiInputInchi jniInchiInputInchi0 = new JniInchiInputInchi ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptions ( ) { return options ; }
void test2 ( ) throws Throwable { JniInchiInputInchi jniInchiInputInchi0 = new JniInchiInputInchi ( "" ) ; String string0 = jniInchiInputInchi0 . getInchi ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInchi ( ) { return inchiString ; }
void test3 ( ) throws Throwable { JniInchiInputInchi jniInchiInputInchi0 = new JniInchiInputInchi ( "" ) ; String string0 = jniInchiInputInchi0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptions ( ) { return options ; }
void test0 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . DOUBLE_EITHER ; int int0 = iNCHI_BOND_STEREO0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test7 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test8 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test9 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test11 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test13 ( ) throws Throwable { INCHI_BOND_STEREO iNCHI_BOND_STEREO0 = INCHI_BOND_STEREO . getValue ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test0 ( ) throws Throwable { INCHI_KEY_STATUS iNCHI_KEY_STATUS0 = INCHI_KEY_STATUS . INVALID_VERSION ; int int0 = iNCHI_KEY_STATUS0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_KEY_STATUS iNCHI_KEY_STATUS0 = INCHI_KEY_STATUS . getValue ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_KEY_STATUS iNCHI_KEY_STATUS0 = INCHI_KEY_STATUS . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_KEY_STATUS iNCHI_KEY_STATUS0 = INCHI_KEY_STATUS . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_KEY_STATUS iNCHI_KEY_STATUS0 = INCHI_KEY_STATUS . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test6 ( ) throws Throwable { INCHI_KEY_STATUS iNCHI_KEY_STATUS0 = INCHI_KEY_STATUS . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test0 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . INVALID_STD_INCHI ; JniInchiOutputKey jniInchiOutputKey0 = new JniInchiOutputKey ( iNCHI_KEY0 , "" ) ; String string0 = jniInchiOutputKey0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test1 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . OK ; JniInchiOutputKey jniInchiOutputKey0 = new JniInchiOutputKey ( iNCHI_KEY0 , "" ) ; INCHI_KEY iNCHI_KEY1 = jniInchiOutputKey0 . getReturnStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test2 ( ) throws Throwable { JniInchiOutputKey jniInchiOutputKey0 = new JniInchiOutputKey ( 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test0 ( ) throws Throwable { INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . EVEN ; int int0 = iNCHI_PARITY0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . getValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test1 ( ) throws Throwable { JniInchiOutputStructure jniInchiOutputStructure0 = new JniInchiOutputStructure ( 1615 , "vm'B ? v" , "vm'B ? v" , ( long ) 1615 , ( long ) 1615 , 364L , ( - 392L ) ) ; String string0 = jniInchiOutputStructure0 . getLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLog ( ) { return sLog ; }
void test2 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . UNKNOWN ; JniInchiOutputStructure jniInchiOutputStructure0 = new JniInchiOutputStructure ( iNCHI_RET0 ) ; String string0 = jniInchiOutputStructure0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return sMessage ; }
void test3 ( ) throws Throwable { JniInchiOutputStructure jniInchiOutputStructure0 = new JniInchiOutputStructure ( 823 , "w > O_U & zIAfok" , "w > O_U & zIAfok" , ( - 328L ) , 0L , 1806L , ( long ) 823 ) ; long [ ] [ ] longArray0 = jniInchiOutputStructure0 . getWarningFlags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long [ ] [ ] getWarningFlags ( ) { return warningFlags ; }
void test4 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . EOF ; JniInchiOutputStructure jniInchiOutputStructure0 = new JniInchiOutputStructure ( iNCHI_RET0 ) ; long [ ] [ ] longArray0 = new long [ 10 ] [ 9 ] ; jniInchiOutputStructure0 . setWarningFlags ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBonds ( ) { return bondList . size ( ) ; }
void test5 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . WARNING ; JniInchiOutputStructure jniInchiOutputStructure0 = new JniInchiOutputStructure ( iNCHI_RET0 ) ; jniInchiOutputStructure0 . setRetStatus ( iNCHI_RET0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_KEY getReturnStatus ( ) { return retStatus ; }
void test0 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . FAIL_I2I ; int int0 = iNCHI_STATUS0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . getValue ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . getValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test6 ( ) throws Throwable { INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { LinkedList < INCHI_OPTION > linkedList0 = new LinkedList < INCHI_OPTION > ( ) ; INCHI_OPTION iNCHI_OPTION0 = INCHI_OPTION . Wnumber ; linkedList0 . add ( iNCHI_OPTION0 ) ; String string0 = JniInchiWrapper . checkOptions ( ( List < INCHI_OPTION > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String checkOptions ( List < INCHI_OPTION > ops ) throws JniInchiException { if ( ops = = null ) { throw new IllegalArgumentException ( "Null options" ) ; } StringBuffer sbOptions = new StringBuffer ( ) ; for ( int i = 0 ; i < ops . size ( ) ; i + + ) { Object op = ops . get ( i ) ; if ( op instanceof INCHI_OPTION ) { sbOptions . append ( flagChar + ( ( INCHI_OPTION ) op ) . name ( ) + " " ) ; } else { throw new JniInchiException ( "Unrecognised InChI option" ) ; } } return sbOptions . toString ( ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { JniInchiInput jniInchiInput0 = new JniInchiInput ( " / Wnumber / Wnumber " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInchi ( ) { return inchiString ; }
void test0 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . ODD ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewDoublebondStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test1 ( ) throws Throwable { JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D ( ( JniInchiAtom ) null , ( JniInchiAtom ) null , ( JniInchiAtom ) null , ( JniInchiAtom ) null , ( JniInchiAtom ) null , 1366 , 1366 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_PARITY getParity ( ) { return parity ; }
void test2 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( ( - 1 . 0 ) , 914 . 8672860830615 , 914 . 8672860830615 , " < } 3t + 1H5" ) ; INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . TETRAHEDRAL ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . ODD ; JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_STEREOTYPE0 , iNCHI_PARITY0 ) ; JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0 . getNeighbor ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JniInchiAtom getNeighbor ( int i ) { return neighbors [ i ] ; }
void test3 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( 131 . 2579587716964 , 695 . 8687081667241 , 695 . 8687081667241 , "#bbZDB08e + | 8pf" ) ; INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . ALLENE ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . UNDEFINED ; JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_STEREOTYPE0 , iNCHI_PARITY0 ) ; INCHI_STEREOTYPE iNCHI_STEREOTYPE1 = jniInchiStereo0D0 . getStereoType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_STEREOTYPE getStereoType ( ) { return type ; }
void test4 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . ALLENE ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . ODD ; JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_STEREOTYPE0 , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test5 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "Sj , r5 } R" ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . UNKNOWN ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewTetrahedralStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test6 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "Sj , r5 } R" ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . UNKNOWN ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewTetrahedralStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test7 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "Sj , r5 } R" ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . UNKNOWN ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewTetrahedralStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test8 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "Charge : " ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . NONE ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewTetrahedralStereo0D ( ( JniInchiAtom ) null , ( JniInchiAtom ) null , ( JniInchiAtom ) null , jniInchiAtom0 , ( JniInchiAtom ) null , iNCHI_PARITY0 ) ; INCHI_PARITY iNCHI_PARITY1 = jniInchiStereo0D0 . getParity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test9 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "Charge : " ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . NONE ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewTetrahedralStereo0D ( ( JniInchiAtom ) null , ( JniInchiAtom ) null , ( JniInchiAtom ) null , jniInchiAtom0 , ( JniInchiAtom ) null , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInchiStereoType ( ) { return type . getIndx ( ) ; }
void test10 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . UNKNOWN ; JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D . createNewTetrahedralStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_PARITY0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test11 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE . ALLENE ; INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY . ODD ; JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , iNCHI_STEREOTYPE0 , iNCHI_PARITY0 ) ; JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0 . getCentralAtom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getElementType ( ) { return elname ; }
void test0 ( ) throws Throwable { INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL . DOUBLET ; int int0 = iNCHI_RADICAL0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test0 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; JniInchiInput jniInchiInput0 = new JniInchiInput ( ( List ) linkedList0 ) ; JniInchiInputData jniInchiInputData0 = new JniInchiInputData ( ( - 1707 ) , jniInchiInput0 , 0 , "1 , / ~ : ? 6KdNOQ%7LbvB" ) ; JniInchiInput jniInchiInput1 = jniInchiInputData0 . getInput ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumAtoms ( ) { return atomList . size ( ) ; }
void test2 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; JniInchiInput jniInchiInput0 = new JniInchiInput ( ( List ) linkedList0 ) ; JniInchiInputData jniInchiInputData0 = new JniInchiInputData ( 683 , jniInchiInput0 , 0 , ( String ) null ) ; String string0 = jniInchiInputData0 . getErrorMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrorMessage ( ) { return errorMessage ; }
void test0 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . UNKNOWN ; int int0 = iNCHI_RET0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( ( - 2 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test6 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test7 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test8 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . getValue ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test1 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; int int0 = jniInchiStructure0 . getStereo0DIndex ( ( JniInchiStereo0D ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStereo0DIndex ( JniInchiStereo0D stereo ) { return stereoList . indexOf ( stereo ) ; }
void test2 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D ( jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , jniInchiAtom0 , 0 , 0 ) ; jniInchiStructure0 . addStereo0D ( jniInchiStereo0D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumStereo0D ( ) { return stereoList . size ( ) ; }
void test3 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; JniInchiAtom [ ] jniInchiAtomArray0 = new JniInchiAtom [ 1 ] ; jniInchiStructure0 . addAtoms ( jniInchiAtomArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumAtoms ( ) { return atomList . size ( ) ; }
void test4 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; jniInchiStructure0 . setStructure ( jniInchiStructure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumStereo0D ( ) { return stereoList . size ( ) ; }
void test5 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; int int0 = jniInchiStructure0 . getNumAtoms ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumAtoms ( ) { return atomList . size ( ) ; }
void test6 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; int int0 = jniInchiStructure0 . getNumBonds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBonds ( ) { return bondList . size ( ) ; }
void test8 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; int int0 = jniInchiStructure0 . getNumStereo0D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumStereo0D ( ) { return stereoList . size ( ) ; }
void test9 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; int int0 = jniInchiStructure0 . getAtomIndex ( ( JniInchiAtom ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAtomIndex ( JniInchiAtom atom ) { return atomList . indexOf ( atom ) ; }
void test11 ( ) throws Throwable { JniInchiStructure jniInchiStructure0 = new JniInchiStructure ( ) ; JniInchiBond [ ] jniInchiBondArray0 = new JniInchiBond [ 2 ] ; jniInchiStructure0 . addBonds ( jniInchiBondArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBonds ( ) { return bondList . size ( ) ; }
void test0 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . BUSY ; JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( iNCHI_RET0 , "" , "" , "" , "" ) ; String string0 = jniInchiOutput0 . getLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLog ( ) { return sLog ; }
void test1 ( ) throws Throwable { JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( 6 , "OKAY" , "OKAY" , "OKAY" , "OKAY" ) ; String string0 = jniInchiOutput0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return sMessage ; }
void test2 ( ) throws Throwable { JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( 2007 , "" , "" , "" , "" ) ; String string0 = jniInchiOutput0 . getAuxInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuxInfo ( ) { return sAuxInfo ; }
void test3 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . BUSY ; JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( iNCHI_RET0 , "" , "" , "" , "" ) ; String string0 = jniInchiOutput0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "InChI_Output : " + retStatus + " / " + sInchi + " / " + sAuxInfo + " / " + sMessage + " / " + sLog ; }
void test4 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . BUSY ; JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( iNCHI_RET0 , "" , "" , "" , "" ) ; INCHI_RET iNCHI_RET1 = jniInchiOutput0 . getReturnStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_KEY getReturnStatus ( ) { return retStatus ; }
void test5 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . BUSY ; JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( iNCHI_RET0 , "" , "" , "" , "" ) ; jniInchiOutput0 . setInchi ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuxInfo ( ) { return sAuxInfo ; }
void test6 ( ) throws Throwable { JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( 6 , "OKAY" , "OKAY" , "OKAY" , "OKAY" ) ; jniInchiOutput0 . setLog ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_KEY getReturnStatus ( ) { return retStatus ; }
void test7 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . BUSY ; JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( iNCHI_RET0 , "" , "" , "" , "" ) ; jniInchiOutput0 . setAuxInfo ( " [ uYa < U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_KEY getReturnStatus ( ) { return retStatus ; }
void test8 ( ) throws Throwable { INCHI_RET iNCHI_RET0 = INCHI_RET . BUSY ; JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( iNCHI_RET0 , "" , "" , "" , "" ) ; jniInchiOutput0 . setRetStatus ( iNCHI_RET0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInchi ( ) { return inchiString ; }
void test9 ( ) throws Throwable { JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( 210 , "Om6 + < PHIn" , "Om6 + < PHIn" , "Om6 + < PHIn" , "5a$ ] fCUV" ) ; String string0 = jniInchiOutput0 . getInchi ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "InChI_Output : " + retStatus + " / " + sInchi + " / " + sAuxInfo + " / " + sMessage + " / " + sLog ; }
void test10 ( ) throws Throwable { JniInchiOutput jniInchiOutput0 = new JniInchiOutput ( 210 , "Om6 + < PHIn" , "Om6 + < PHIn" , "Om6 + < PHIn" , "5a$ ] fCUV" ) ; jniInchiOutput0 . setMessage ( "UfIUl0r . nl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLog ( ) { return sLog ; }
void test0 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . NOT_ENOUGH_MEMORY ; int int0 = iNCHI_KEY0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test2 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test21 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test22 ( ) throws Throwable { INCHI_KEY iNCHI_KEY0 = INCHI_KEY . getValue ( 21 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test1 ( ) throws Throwable { INCHI_OPTION iNCHI_OPTION0 = INCHI_OPTION . valueOfIgnoreCase ( "SAbs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_OPTION valueOfIgnoreCase ( String string ) { for ( INCHI_OPTION option : INCHI_OPTION . values ( ) ) { if ( option . name ( ) . equalsIgnoreCase ( string ) ) { return option ; } } return null ; }
void test0 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test1 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test2 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( 0 . 0 , 1957 . 5538866871154 , 0 . 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test3 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( 0 . 0 , 1 . 0 , 1 . 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test4 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test5 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "5gl%Fy\"Q ? aJ6ZWI9 - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test6 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test7 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "5gl%Fy\"Q ? aJ6ZWI9 - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test8 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test9 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( " ; eYK1ltyP ; . \" : 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test10 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( ( - 1789 . 9835703737192 ) , 1167 . 984329436447 , 1 . 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test11 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( " ; eYK1ltyP ; . \" : 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test12 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( 0 . 0 , 1 . 0 , 1 . 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test13 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "5gl%Fy\"Q ? aJ6ZWI9 - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getImplicitProtium ( ) { return implicitP ; }
void test14 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test15 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "5gl%Fy\"Q ? aJ6ZWI9 - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test16 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "z . a13D" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test17 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "z . a13D" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getImplicitTritium ( ) { return implicitT ; }
void test18 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "5gl%Fy\"Q ? aJ6ZWI9 - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test19 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( "N * > a\"Rf6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIsotopicMass ( ) { return isotopic_mass ; }
void test20 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( " ; eYK1ltyP ; . \" : 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test21 ( ) throws Throwable { JniInchiAtom jniInchiAtom0 = new JniInchiAtom ( 0 . 0 , 0 . 0 , 0 . 0 , "QYO : = 5 { ^ > ) 6k C5 : XO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return ( "InChI Stereo0D : " + ( centralAtom = = null ? " - " : centralAtom . getElementType ( ) ) + " [ " + neighbors [ 0 ] . getElementType ( ) + " , " + neighbors [ 1 ] . getElementType ( ) + " , " + neighbors [ 2 ] . getElementType ( ) + " , " + neighbors [ 3 ] . getElementType ( ) + " ] " + "Type : : " + type + " / / " + "Parity : " + parity ) ; }
void test0 ( ) throws Throwable { INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . TRIPLE ; int int0 = iNCHI_BOND_TYPE0 . getIndx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndx ( ) { return indx ; }
void test1 ( ) throws Throwable { INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test3 ( ) throws Throwable { INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test4 ( ) throws Throwable { INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test5 ( ) throws Throwable { INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
void test6 ( ) throws Throwable { INCHI_BOND_TYPE iNCHI_BOND_TYPE0 = INCHI_BOND_TYPE . getValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" INCHI_RET getValue ( int ret ) { switch ( ret ) { case - 2 : return SKIP ; case - 1 : return EOF ; case 0 : return OKAY ; case 1 : return WARNING ; case 2 : return ERROR ; case 3 : return FATAL ; case 4 : return UNKNOWN ; case 5 : return BUSY ; default : return null ; } }
