void test0 ( ) throws Throwable { NoteOperationsPane noteOperationsPane0 = new NoteOperationsPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSelected ( ) { return this . isSelected ; }
void test1 ( ) throws Throwable { UIResources uIResources0 = new UIResources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexInList ( ) { return indexInList ; }
void test1 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test2 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paintComponent ( Graphics g ) { g . setColor ( getBackground ( ) ) ; g . fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; }
void test3 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexInList ( ) { return indexInList ; }
void test4 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexInList ( ) { return indexInList ; }
void test5 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSelected ( ) { return this . isSelected ; }
void test6 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; NoteListCell noteListCell0 = new NoteListCell ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexInList ( ) { return indexInList ; }
void test0 ( ) throws Throwable { DatePickerPane datePickerPane0 = new DatePickerPane ( ) ; DateChooser dateChooser0 = datePickerPane0 . getDateChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DateChooser getDateChooser ( ) { return chooser ; }
void test1 ( ) throws Throwable { DatePickerPane datePickerPane0 = new DatePickerPane ( ) ; GregorianCalendar gregorianCalendar0 = datePickerPane0 . reportSelectedDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GregorianCalendar reportSelectedDate ( ) { return null ; }
void test0 ( ) throws Throwable { StatusBar statusBar0 = new StatusBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test0 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; noteList0 . select ( 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test1 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; boolean boolean0 = noteList0 . getScrollableTracksViewportWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test2 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; Dimension dimension0 = noteList0 . getPreferredScrollableViewportSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return selectedIndex ; }
void test3 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; noteList0 . removeListEventListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return selectedIndex ; }
void test4 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; noteList0 . getScrollableUnitIncrement ( ( Rectangle ) null , 0 , 717 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test5 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; Rectangle rectangle0 = noteList0 . getBounds ( ) ; int int0 = noteList0 . getScrollableBlockIncrement ( rectangle0 , 1256 , 1157 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test6 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( "" , true ) ; Rectangle rectangle0 = jToggleButton0 . getBounds ( ) ; int int0 = noteList0 . getScrollableBlockIncrement ( rectangle0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return selectedIndex ; }
void test7 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; boolean boolean0 = noteList0 . getScrollableTracksViewportHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return selectedIndex ; }
void test8 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; noteList0 . addNoteListEventListener ( ( NoteListEventListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test10 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; Box box0 = Box . createVerticalBox ( ) ; Point point0 = box0 . getLocation ( ) ; noteList0 . fireRightClick ( ( Object ) null , point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return selectedIndex ; }
void test11 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; Point point0 = defaultTreeCellRenderer0 . getLocation ( ) ; noteList0 . fireDoubleClick ( ( Object ) "canceled" , point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return selectedIndex ; }
void test12 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; Point point0 = defaultTreeCellRenderer0 . getLocation ( ) ; noteList0 . fireCursorEnter ( ( Object ) "rolloverSelectedIcon" , point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test13 ( ) throws Throwable { NoteList noteList0 = new NoteList ( ) ; noteList0 . fireCursorExit ( ( Object ) "$ename" , ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCellCount ( ) { return cellCount ; }
void test0 ( ) throws Throwable { MainMenu mainMenu0 = new MainMenu ( ( InspirentoMediator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changed ( ) { }
void test0 ( ) throws Throwable { Toolbar toolbar0 = new Toolbar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Toolbar ( ) { super ( ) ; setFloatable ( false ) ; createButtons ( ) ; }
void test1 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; boolean boolean0 = defaultNoteListModel0 . removeElement ( ( AbstractNote ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeElement ( AbstractNote obj ) { int index = indexOf ( obj ) ; boolean an = delegate . removeElement ( obj ) ; if ( index > = 0 ) { fireItemRemoved ( this , index ) ; } return an ; }
void test2 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; Enumeration < AbstractNote > enumeration0 = defaultNoteListModel0 . elements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration < AbstractNote > elements ( ) { return delegate . elements ( ) ; }
void test5 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; int int0 = defaultNoteListModel0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return delegate . size ( ) ; }
void test7 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; String string0 = defaultNoteListModel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test8 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; CommonNote commonNote0 = new CommonNote ( ) ; int int0 = defaultNoteListModel0 . lastIndexOf ( ( AbstractNote ) commonNote0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int lastIndexOf ( AbstractNote elem ) { return delegate . lastIndexOf ( elem ) ; }
void test11 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; defaultNoteListModel0 . addNoteListDataListener ( ( NoteListDataListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return delegate . isEmpty ( ) ; }
void test13 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; int int0 = defaultNoteListModel0 . indexOf ( ( AbstractNote ) null , 940 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( AbstractNote elem ) { return delegate . indexOf ( elem ) ; }
void test14 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; int int0 = defaultNoteListModel0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return delegate . size ( ) ; }
void test15 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; AbstractNote [ ] abstractNoteArray0 = defaultNoteListModel0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractNote [ ] toArray ( ) { AbstractNote [ ] an = new AbstractNote [ delegate . size ( ) ] ; delegate . copyInto ( an ) ; return an ; }
void test16 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; boolean boolean0 = defaultNoteListModel0 . contains ( ( AbstractNote ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( AbstractNote elem ) { return delegate . contains ( elem ) ; }
void test18 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; defaultNoteListModel0 . removeNoteListDataListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return delegate . capacity ( ) ; }
void test20 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; int int0 = defaultNoteListModel0 . lastIndexOf ( ( AbstractNote ) null , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int lastIndexOf ( AbstractNote elem ) { return delegate . lastIndexOf ( elem ) ; }
void test23 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; boolean boolean0 = defaultNoteListModel0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return delegate . isEmpty ( ) ; }
void test27 ( ) throws Throwable { DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel ( ) ; int int0 = defaultNoteListModel0 . capacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return delegate . capacity ( ) ; }
void test0 ( ) throws Throwable { DateChooser dateChooser0 = new DateChooser ( ) ; dateChooser0 . addDateChooserListener ( ( DateChooserListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addDateChooserListener ( DateChooserListener listener ) { this . listener = listener ; }
void test1 ( ) throws Throwable { DateChooser dateChooser0 = new DateChooser ( ) ; DateChooserListener dateChooserListener0 = dateChooser0 . getDateChooserListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DateChooserListener getDateChooserListener ( ) { return listener ; }
void test2 ( ) throws Throwable { DateChooser dateChooser0 = new DateChooser ( ) ; dateChooser0 . removeDateChooserListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeDateChooserListener ( ) { this . listener = null ; }
void test3 ( ) throws Throwable { DateChooser dateChooser0 = new DateChooser ( ) ; dateChooser0 . monthChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void monthChanged ( ) { / / XXX Could it be easier ? Date date = ( Date ) yearSpinner . getValue ( ) ; Calendar c = Calendar . getInstance ( ) ; c . setTime ( date ) ; c . set ( Calendar . MONTH , monthBox . getSelectedIndex ( ) ) ; SwingUtilities . invokeLater ( new Runnable ( ) { void run ( ) { calendarPane . setYearMonth ( c . get ( Calendar . YEAR ) , monthBox . getSelectedIndex ( ) + 1 ) ; fireDateChanged ( this , getCurrent ( ) , calendarPane . getSelectedDate ( ) ) ; } } ) ; updateCurrent ( ) ; }
void test4 ( ) throws Throwable { DateChooser dateChooser0 = new DateChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test0 ( ) throws Throwable { MonthlyCalendarModel monthlyCalendarModel0 = new MonthlyCalendarModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getSelectedDate ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . YEAR , year ) ; cal . set ( Calendar . MONTH , month - 1 ) ; int maximumDay = getDayOfMonth ( month , year ) ; if ( model . getSelectedDate ( ) > maximumDay ) { cal . set ( Calendar . DATE , maximumDay ) ; model . setSelectedDate ( maximumDay ) ; return cal ; } cal . set ( Calendar . DATE , model . getSelectedDate ( ) ) ; return cal ; }
void test1 ( ) throws Throwable { MonthlyCalendarModel monthlyCalendarModel0 = new MonthlyCalendarModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getSelectedDate ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . YEAR , year ) ; cal . set ( Calendar . MONTH , month - 1 ) ; int maximumDay = getDayOfMonth ( month , year ) ; if ( model . getSelectedDate ( ) > maximumDay ) { cal . set ( Calendar . DATE , maximumDay ) ; model . setSelectedDate ( maximumDay ) ; return cal ; } cal . set ( Calendar . DATE , model . getSelectedDate ( ) ) ; return cal ; }
void test2 ( ) throws Throwable { MonthlyCalendarModel monthlyCalendarModel0 = new MonthlyCalendarModel ( ) ; boolean boolean0 = monthlyCalendarModel0 . isMarked ( 26 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarked ( int date ) { if ( mark ! = null ) { return mark [ date - 1 ] ; } return false ; }
void test3 ( ) throws Throwable { MonthlyCalendarModel monthlyCalendarModel0 = new MonthlyCalendarModel ( ) ; monthlyCalendarModel0 . setMarked ( 26 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getSelectedDate ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . YEAR , year ) ; cal . set ( Calendar . MONTH , month - 1 ) ; int maximumDay = getDayOfMonth ( month , year ) ; if ( model . getSelectedDate ( ) > maximumDay ) { cal . set ( Calendar . DATE , maximumDay ) ; model . setSelectedDate ( maximumDay ) ; return cal ; } cal . set ( Calendar . DATE , model . getSelectedDate ( ) ) ; return cal ; }
void test0 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test1 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test2 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getWeekStartOnSunday ( ) { return startOnSunday ; }
void test3 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMarked ( int date , boolean b ) { model . setMarked ( date , b ) ; repaint ( ) ; }
void test4 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test5 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test6 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test7 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test8 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test9 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test10 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test11 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test12 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMouseListeningEnabled ( ) { return isListening ; }
void test13 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test14 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMouseListeningEnabled ( ) { return isListening ; }
void test15 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test16 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test17 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test18 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test19 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMouseListeningEnabled ( ) { return isListening ; }
void test20 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test21 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test22 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test23 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMouseListeningEnabled ( ) { return isListening ; }
void test24 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMouseListeningEnabled ( ) { return isListening ; }
void test25 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test26 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test27 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getWeekStartOnSunday ( ) { return startOnSunday ; }
void test28 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setYear ( int year ) { if ( year < 1970 ) throw new IllegalArgumentException ( "Year must be later than 1970 ! " ) ; if ( month ! = - 1 ) setYearMonth ( year , month ) ; else this . year = year ; }
void test29 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMonth ( int month ) { if ( month < 1 | | month > 12 ) throw new IllegalArgumentException ( "Invalid month specified ! " ) ; if ( year ! = - 1 ) setYearMonth ( year , month ) ; else this . month = month ; }
void test30 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMonth ( int month ) { if ( month < 1 | | month > 12 ) throw new IllegalArgumentException ( "Invalid month specified ! " ) ; if ( year ! = - 1 ) setYearMonth ( year , month ) ; else this . month = month ; }
void test31 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test32 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test33 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paintComponent ( Graphics g ) { g . setColor ( getBackground ( ) ) ; g . fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; }
void test34 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paintComponent ( Graphics g ) { g . setColor ( getBackground ( ) ) ; g . fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; }
void test35 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test36 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test37 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test38 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedDay ( ) { return model . getSelectedDate ( ) ; }
void test39 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedDay ( ) { return model . getSelectedDate ( ) ; }
void test40 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test41 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { if ( e . getSource ( ) ! = this ) { throw new RuntimeException ( "You are not supposed to install 'this' " + "mouse handler to any component other than itself . " ) ; } }
void test42 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test43 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { if ( e . getSource ( ) ! = this ) { throw new RuntimeException ( "You are not supposed to install 'this' " + "mouse handler to any component other than itself . " ) ; } }
void test44 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test45 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseMoved ( MouseEvent e ) { if ( e . getSource ( ) ! = this ) { throw new RuntimeException ( "You are not supposed to install 'this' " + "mouse motion handler to any component other than itself . " ) ; } mousePositionChanged ( e ) ; }
void test46 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test47 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseDragged ( MouseEvent e ) { if ( e . getSource ( ) ! = this ) { throw new RuntimeException ( "You are not supposed to install 'this' " + "mouse motion handler to any component other than itself . " ) ; } mousePositionChanged ( e ) ; }
void test48 ( ) throws Throwable { MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return delegate . toString ( ) ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; NoteListDataEvent noteListDataEvent0 = new NoteListDataEvent ( object0 , 2 ) ; int int0 = noteListDataEvent0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; NoteListDataEvent noteListDataEvent0 = new NoteListDataEvent ( object0 , 2 ) ; int int0 = noteListDataEvent0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test0 ( ) throws Throwable { Point point0 = new Point ( 0 , 0 ) ; NoteListEvent noteListEvent0 = new NoteListEvent ( ( Object ) "S ( i7G" , point0 ) ; Point point1 = noteListEvent0 . getPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Point getPoint ( ) { return point ; }
void test0 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 1235 ) , 0 , 0 ) ; DateChooserEvent dateChooserEvent0 = new DateChooserEvent ( ( Object ) "eng" , ( Calendar ) gregorianCalendar0 , ( Calendar ) gregorianCalendar0 ) ; GregorianCalendar gregorianCalendar1 = ( GregorianCalendar ) dateChooserEvent0 . getFormerDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getFormerDate ( ) { return oldDate ; }
void test1 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 1235 ) , 0 , 0 ) ; DateChooserEvent dateChooserEvent0 = new DateChooserEvent ( ( Object ) "eng" , ( Calendar ) gregorianCalendar0 , ( Calendar ) gregorianCalendar0 ) ; GregorianCalendar gregorianCalendar1 = ( GregorianCalendar ) dateChooserEvent0 . getNewDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getNewDate ( ) { return newDate ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ConfigurationManager configurationManager0 = ConfigurationManager . getInstance ( ) ; configurationManager0 . writeBack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractNote get ( int index ) { return delegate . elementAt ( index ) ; }
void test0 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; String string0 = commonNote0 . getFeature ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeature ( ) { return feature ; }
void test1 ( ) throws Throwable { CommonNote commonNote0 = new CommonNote ( ) ; commonNote0 . setFeature ( " ! rW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeature ( ) { return feature ; }
void test0 ( ) throws Throwable { CommonNoteModel commonNoteModel0 = new CommonNoteModel ( ) ; boolean boolean0 = commonNoteModel0 . isSelected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSelected ( ) { return this . isSelected ; }
void test1 ( ) throws Throwable { CommonNoteModel commonNoteModel0 = new CommonNoteModel ( ) ; commonNoteModel0 . setSelected ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSelected ( ) { return this . isSelected ; }
void test2 ( ) throws Throwable { CommonNoteModel commonNoteModel0 = new CommonNoteModel ( ) ; String [ ] stringArray0 = commonNoteModel0 . getThumbnailContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getThumbnailContent ( ) { String [ ] test = { "Test" , "Hello , world ! This is a temporary message . " + " I hope you can see it . This component is CommonNote that extends" + " the AbstractNote object . " } ; return test ; }
void test0 ( ) throws Throwable { String string0 = InspirentoUtilities . escapeText ( "a$ ) W`Z * pQ5\"j , a > ~C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeText ( String str ) { StringBuffer buffer = new StringBuffer ( str ) ; stringReplaceAll ( buffer , ' & ' , " & amp ; " ) ; stringReplaceAll ( buffer , ' < ' , " & lt ; " ) ; stringReplaceAll ( buffer , ' > ' , " & gt ; " ) ; stringReplaceAll ( buffer , '"' , " & quot ; " ) ; stringReplaceAll ( buffer , '\'' , " & apos ; " ) ; return buffer . toString ( ) ; }
void test1 ( ) throws Throwable { InspirentoUtilities inspirentoUtilities0 = new InspirentoUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { String [ ] stringArray0 = InspirentoUtilities . tokenize ( "b` } M * B } , hB < P8h$$RO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] tokenize ( String input ) { Vector < String > v = new Vector < String > ( ) ; StringTokenizer t = new StringTokenizer ( input ) ; String cmd [ ] ; while ( t . hasMoreTokens ( ) ) v . addElement ( t . nextToken ( ) ) ; cmd = new String [ v . size ( ) ] ; for ( int i = 0 ; i < cmd . length ; i + + ) cmd [ i ] = v . elementAt ( i ) ; return cmd ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = InspirentoUtilities . tokenize ( " & amp ; quot ; " , " & quot ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] tokenize ( String input ) { Vector < String > v = new Vector < String > ( ) ; StringTokenizer t = new StringTokenizer ( input ) ; String cmd [ ] ; while ( t . hasMoreTokens ( ) ) v . addElement ( t . nextToken ( ) ) ; cmd = new String [ v . size ( ) ] ; for ( int i = 0 ; i < cmd . length ; i + + ) cmd [ i ] = v . elementAt ( i ) ; return cmd ; }
void test3 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( "DfV_u ; 0v^Z_F + Eaob6 * z" ) ; XmlIO xmlIO0 = new XmlIO ( xmlElement0 ) ; XmlElement xmlElement1 = xmlIO0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj1 , Object obj2 ) { boolean equal = false ; if ( ( obj1 = = null ) & & ( obj2 = = null ) ) { equal = true ; } else if ( ( obj1 ! = null ) & & ( obj2 ! = null ) ) { equal = obj1 . equals ( obj2 ) ; } return equal ; }
void test9 ( ) throws Throwable { XmlIO xmlIO0 = new XmlIO ( ) ; AttributesImpl attributesImpl0 = new AttributesImpl ( ) ; xmlIO0 . startElement ( "" , "" , "" , ( Attributes ) attributesImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startElement ( String namespaceURI , String localName , String qName , Attributes attrs ) throws SAXException { / / Resetting contents buffer . / / Assuming that tags either tag content or children , not both . / / This is usually the case with XML that is representing / / data strucutures in a programming language independant way . / / This assumption is not typically valid where XML is being / / used in the classical text mark up style where tagging / / is used to style content and several styles may overlap / / at once . try { contents . reset ( ) ; String name = localName ; / / element name if ( name . equals ( "" ) ) { name = qName ; / / namespaceAware = false } XmlElement p = currentElement ; currentElement = currentElement . addSubElement ( name ) ; currentElement . setParent ( p ) ; if ( attrs ! = null ) { for ( int i = 0 ; i < attrs . getLength ( ) ; i + + ) { String aName = attrs . getLocalName ( i ) ; / / Attr name if ( aName . equals ( "" ) ) { aName = attrs . getQName ( i ) ; } currentElement . addAttribute ( aName , attrs . getValue ( i ) ) ; } } } catch ( java . lang . NullPointerException ex ) { LOG . severe ( "Null ! ! ! " ) ; LOG . severe ( ex . toString ( ) ) ; ex . printStackTrace ( ) ; } }
void test10 ( ) throws Throwable { XmlIO xmlIO0 = new XmlIO ( ( URL ) null ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( 1507 ) ; xmlIO0 . load ( ( InputStream ) pipedInputStream0 ) ; AttributesImpl attributesImpl0 = new AttributesImpl ( ) ; attributesImpl0 . addAttribute ( "" , "" , "" , "" , "DfV_u ; 0vZ_FEaob6 * z" ) ; xmlIO0 . startElement ( "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" , "" , ( Attributes ) attributesImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startElement ( String namespaceURI , String localName , String qName , Attributes attrs ) throws SAXException { / / Resetting contents buffer . / / Assuming that tags either tag content or children , not both . / / This is usually the case with XML that is representing / / data strucutures in a programming language independant way . / / This assumption is not typically valid where XML is being / / used in the classical text mark up style where tagging / / is used to style content and several styles may overlap / / at once . try { contents . reset ( ) ; String name = localName ; / / element name if ( name . equals ( "" ) ) { name = qName ; / / namespaceAware = false } XmlElement p = currentElement ; currentElement = currentElement . addSubElement ( name ) ; currentElement . setParent ( p ) ; if ( attrs ! = null ) { for ( int i = 0 ; i < attrs . getLength ( ) ; i + + ) { String aName = attrs . getLocalName ( i ) ; / / Attr name if ( aName . equals ( "" ) ) { aName = attrs . getQName ( i ) ; } currentElement . addAttribute ( aName , attrs . getValue ( i ) ) ; } } } catch ( java . lang . NullPointerException ex ) { LOG . severe ( "Null ! ! ! " ) ; LOG . severe ( ex . toString ( ) ) ; ex . printStackTrace ( ) ; } }
void test11 ( ) throws Throwable { XmlIO xmlIO0 = new XmlIO ( ( URL ) null ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( 1507 ) ; xmlIO0 . load ( ( InputStream ) pipedInputStream0 ) ; AttributesImpl attributesImpl0 = new AttributesImpl ( ) ; attributesImpl0 . addAttribute ( "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" ) ; Attributes2Impl attributes2Impl0 = new Attributes2Impl ( ( Attributes ) attributesImpl0 ) ; xmlIO0 . startElement ( "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" , "DfV_u ; 0vZ_FEaob6 * z" , ( Attributes ) attributes2Impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startElement ( String namespaceURI , String localName , String qName , Attributes attrs ) throws SAXException { / / Resetting contents buffer . / / Assuming that tags either tag content or children , not both . / / This is usually the case with XML that is representing / / data strucutures in a programming language independant way . / / This assumption is not typically valid where XML is being / / used in the classical text mark up style where tagging / / is used to style content and several styles may overlap / / at once . try { contents . reset ( ) ; String name = localName ; / / element name if ( name . equals ( "" ) ) { name = qName ; / / namespaceAware = false } XmlElement p = currentElement ; currentElement = currentElement . addSubElement ( name ) ; currentElement . setParent ( p ) ; if ( attrs ! = null ) { for ( int i = 0 ; i < attrs . getLength ( ) ; i + + ) { String aName = attrs . getLocalName ( i ) ; / / Attr name if ( aName . equals ( "" ) ) { aName = attrs . getQName ( i ) ; } currentElement . addAttribute ( aName , attrs . getValue ( i ) ) ; } } } catch ( java . lang . NullPointerException ex ) { LOG . severe ( "Null ! ! ! " ) ; LOG . severe ( ex . toString ( ) ) ; ex . printStackTrace ( ) ; } }
void test1 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; xmlElement0 . getAttribute ( "%Qd | D / k" , "%Qd | D / k" ) ; XmlElement . printNode ( xmlElement0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void printNode ( XmlElement node , String indent ) { String data = node . getData ( ) ; if ( ( data = = null ) | | data . equals ( "" ) ) { System . out . println ( indent + node . getName ( ) ) ; } else { System . out . println ( indent + node . getName ( ) + " = '" + data + "'" ) ; } / / print attributes for ( Enumeration enumeration = node . getAttributes ( ) . keys ( ) ; enumeration . hasMoreElements ( ) ; ) { String key = ( String ) enumeration . nextElement ( ) ; String value = node . getAttribute ( key ) ; System . out . println ( indent + key + " : " + value ) ; } List subs = node . getElements ( ) ; for ( Iterator it = subs . iterator ( ) ; it . hasNext ( ) ; ) { printNode ( ( XmlElement ) it . next ( ) , indent + " " ) ; / / for ( i = 0 ; i < subs . size ( ) ; i + + ) { / / printNode ( ( XmlElement ) subs . get ( i ) , indent + " " ) ; } }
void test2 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( "tXsWjfcpuj & K" , "tXsWjfcpuj & K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test3 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test4 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test6 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; int int0 = xmlElement0 . count ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test7 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; XmlElement xmlElement1 = xmlElement0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XmlElement getParent ( ) { return parent ; }
void test9 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; Enumeration < Object > enumeration0 = xmlElement0 . getAttributeNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration getAttributeNames ( ) { return ( attributes . keys ( ) ) ; }
void test10 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; xmlElement0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setName ( String name ) { this . name = name ; }
void test11 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; xmlElement0 . notifyObservers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyObservers ( ) { setChanged ( ) ; super . notifyObservers ( ) ; }
void test12 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj1 , Object obj2 ) { boolean equal = false ; if ( ( obj1 = = null ) & & ( obj2 = = null ) ) { equal = true ; } else if ( ( obj1 ! = null ) & & ( obj2 ! = null ) ) { equal = obj1 . equals ( obj2 ) ; } return equal ; }
void test13 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; xmlElement0 . removeAllElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeAllElements ( ) { subElements . clear ( ) ; }
void test14 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; Object object0 = xmlElement0 . addAttribute ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object addAttribute ( String name , String value ) { if ( ( value ! = null ) & & ( name ! = null ) ) { Object returnValue = attributes . put ( name , value ) ; return returnValue ; } return null ; }
void test15 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; Object object0 = xmlElement0 . addAttribute ( ( String ) null , "nHC : u%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object addAttribute ( String name , String value ) { if ( ( value ! = null ) & & ( name ! = null ) ) { Object returnValue = attributes . put ( name , value ) ; return returnValue ; } return null ; }
void test16 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttribute ( String name ) { return ( ( String ) attributes . get ( name ) ) ; }
void test17 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test18 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void insertElement ( XmlElement e , int index ) { e . removeFromParent ( ) ; subElements . add ( index , e ) ; e . setParent ( this ) ; }
void test19 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; XmlElement xmlElement1 = xmlElement0 . getElement ( " . & Gm\"~W < C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XmlElement getElement ( String path ) { int i = path . indexOf ( ' . ' ) ; String topName ; String subName ; if ( i = = 0 ) { path = path . substring ( 1 ) ; i = path . indexOf ( ' . ' ) ; } if ( i > 0 ) { topName = path . substring ( 0 , i ) ; subName = path . substring ( i + 1 ) ; } else { topName = path ; subName = null ; } int j ; for ( j = 0 ; j < subElements . size ( ) ; j + + ) { if ( ( ( XmlElement ) subElements . get ( j ) ) . getName ( ) . equals ( topName ) ) { if ( subName ! = null ) { return ( ( ( XmlElement ) subElements . get ( j ) ) . getElement ( subName ) ) ; } else { return ( ( XmlElement ) subElements . get ( j ) ) ; } } } return null ; }
void test20 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getData ( ) { return data ; }
void test21 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test22 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test23 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj1 , Object obj2 ) { boolean equal = false ; if ( ( obj1 = = null ) & & ( obj2 = = null ) ) { equal = true ; } else if ( ( obj1 ! = null ) & & ( obj2 ! = null ) ) { equal = obj1 . equals ( obj2 ) ; } return equal ; }
void test24 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test25 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj1 , Object obj2 ) { boolean equal = false ; if ( ( obj1 = = null ) & & ( obj2 = = null ) ) { equal = true ; } else if ( ( obj1 ! = null ) & & ( obj2 ! = null ) ) { equal = obj1 . equals ( obj2 ) ; } return equal ; }
void test26 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( "tXsWjfcpuj & K" , "tXsWjfcpuj & K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj1 , Object obj2 ) { boolean equal = false ; if ( ( obj1 = = null ) & & ( obj2 = = null ) ) { equal = true ; } else if ( ( obj1 ! = null ) & & ( obj2 ! = null ) ) { equal = obj1 . equals ( obj2 ) ; } return equal ; }
void test27 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int count ( ) { return subElements . size ( ) ; }
void test28 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { / / Hashcode value should be buffered . int hashCode = 23 ; if ( attributes ! = null ) { hashCode + = ( attributes . hashCode ( ) * 13 ) ; } if ( data ! = null ) { hashCode + = ( data . hashCode ( ) * 17 ) ; } if ( name ! = null ) { hashCode + = ( name . hashCode ( ) * 29 ) ; } if ( subElements ! = null ) { hashCode + = ( subElements . hashCode ( ) * 57 ) ; } return hashCode ; }
void test29 ( ) throws Throwable { XmlElement xmlElement0 = new XmlElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { / / Hashcode value should be buffered . int hashCode = 23 ; if ( attributes ! = null ) { hashCode + = ( attributes . hashCode ( ) * 13 ) ; } if ( data ! = null ) { hashCode + = ( data . hashCode ( ) * 17 ) ; } if ( name ! = null ) { hashCode + = ( name . hashCode ( ) * 29 ) ; } if ( subElements ! = null ) { hashCode + = ( subElements . hashCode ( ) * 57 ) ; } return hashCode ; }
