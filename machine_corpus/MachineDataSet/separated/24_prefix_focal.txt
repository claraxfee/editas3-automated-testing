void test0 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( " } / mrR0 { a" ) ; boolean boolean0 = xPathLexer0 . hasMoreChars ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int currentPosition ( ) { return this . currentPosition ; }
void test1 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( ) ; boolean boolean0 = xPathLexer0 . hasMoreChars ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int currentPosition ( ) { return this . currentPosition ; }
void test3 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( " } / mrR0 { a" ) ; xPathLexer0 . setPreviousToken ( ( Token ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endPosition ( ) { return this . endPosition ; }
void test4 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( "M , " ) ; xPathLexer0 . consume ( ( int ) ' . ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int currentPosition ( ) { return this . currentPosition ; }
void test5 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( "M , " ) ; xPathLexer0 . consume ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreChars ( ) { return currentPosition ( ) < endPosition ( ) ; }
void test6 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( "M , " ) ; char char0 = xPathLexer0 . LA ( ( int ) '_' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int currentPosition ( ) { return this . currentPosition ; }
void test7 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( ) ; boolean boolean0 = xPathLexer0 . isIdentifierChar ( ' - ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentifierChar ( char c ) { switch ( c ) { case ' - ' : case ' . ' : return true ; } return Character . isUnicodeIdentifierPart ( c ) ; }
void test8 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( "M , " ) ; boolean boolean0 = xPathLexer0 . isIdentifierChar ( ' . ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endPosition ( ) { return this . endPosition ; }
void test9 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( " } / mrR0 { a" ) ; boolean boolean0 = xPathLexer0 . isIdentifierChar ( 'C' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreChars ( ) { return currentPosition ( ) < endPosition ( ) ; }
void test10 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( "M , " ) ; boolean boolean0 = xPathLexer0 . isIdentifierStartChar ( '_' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endPosition ( ) { return this . endPosition ; }
void test11 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( "M , " ) ; boolean boolean0 = xPathLexer0 . isIdentifierStartChar ( ' . ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endPosition ( ) { return this . endPosition ; }
void test12 ( ) throws Throwable { XPathLexer xPathLexer0 = new XPathLexer ( " } / mrR0 { a" ) ; boolean boolean0 = xPathLexer0 . isIdentifierStartChar ( 'C' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int endPosition ( ) { return this . endPosition ; }
void test0 ( ) throws Throwable { DefaultXPathHandler . Singleton defaultXPathHandler_Singleton0 = new DefaultXPathHandler . Singleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultXPathHandler ( ) { }
void test22 ( ) throws Throwable { DefaultXPathHandler defaultXPathHandler0 = ( DefaultXPathHandler ) DefaultXPathHandler . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XPathHandler getInstance ( ) { return Singleton . instance ; }
void test0 ( ) throws Throwable { Token token0 = new Token ( ( - 1 ) , " [ ( " , ( - 1671 ) , ( - 1671 ) ) ; int int0 = token0 . getTokenType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTokenEnd ( ) { return this . tokenEnd ; }
void test1 ( ) throws Throwable { Token token0 = new Token ( 1 , " [ ( " , 1 , 1 ) ; String string0 = token0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "com . werken . saxpath . XPathSyntaxException : " + getPosition ( ) + " : " + getMessage ( ) ; }
void test6 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( " ( 3m1 [ ] } ydk" ) ; xPathReader0 . andExpr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test17 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( "rb : 70" ) ; xPathReader0 . andExpr ( ) ; xPathReader0 . additiveExpr ( ) ; xPathReader0 . filterExpr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test22 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( " ( 3m1 [ ] } ydk" ) ; xPathReader0 . absoluteLocationPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test23 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( "rb : 70" ) ; xPathReader0 . andExpr ( ) ; xPathReader0 . additiveExpr ( ) ; xPathReader0 . relativeLocationPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test24 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( " ( 3m1 [ ] } ydk" ) ; xPathReader0 . step ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test25 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( " ( 3m1 [ ] } ydk" ) ; int int0 = xPathReader0 . axisSpecifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test26 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( "child" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test28 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( "processing - instruction" ) ; xPathReader0 . nodeTypeTest ( 1815 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
void test29 ( ) throws Throwable { XPathReader xPathReader0 = new XPathReader ( ) ; xPathReader0 . setUpParse ( " ( 3m1 [ ] } ydk" ) ; xPathReader0 . abbrStep ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int axisSpecifier ( ) throws SAXPathException { int axis = 0 ; switch ( LA ( 1 ) ) { case AT : { match ( AT ) ; axis = Axis . ATTRIBUTE ; break ; } case IDENTIFIER : { Token token = LT ( 1 ) ; axis = Axis . lookup ( token . getTokenText ( ) ) ; if ( axis = = Axis . INVALID_AXIS ) { throwInvalidAxis ( token . getTokenText ( ) ) ; } match ( IDENTIFIER ) ; match ( DOUBLE_COLON ) ; break ; } } return axis ; }
