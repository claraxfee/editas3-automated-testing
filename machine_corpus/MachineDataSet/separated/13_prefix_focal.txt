void test0 ( ) throws Throwable { Main main0 = new Main ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { String string0 = SQLUtil . substituteMarkers ( "sN * k_ ! Z~F ( e5e7t = xm" , "sN * k_ ! Z~F ( e5e7t = xm" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String substituteMarkers ( String sql , String marker , Object substitution ) { return sql . replace ( marker , renderValue ( substitution ) ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; String string0 = SQLUtil . leftJoin ( "gK < @Sc3 . \"5 * l - ( ZJ ; HT" , stringArray0 , "gK < @Sc3 . \"5 * l - ( ZJ ; HT" , "drop materialized viewjna9 = e' - ` = < gn = n" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String leftJoin ( String alias1 , String [ ] columns1 , String table2 , String alias2 , String [ ] columns2 ) { return join ( "left" , alias1 , columns1 , table2 , alias2 , columns2 ) ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "8" ) ; DBDataType dBDataType0 = DBDataType . getInstance ( ( - 1193 ) , "8" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "8" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) ( - 1193 ) , ( Integer ) ( - 1193 ) ) ; String string0 = SQLUtil . renderColumnTypeWithSize ( ( DBColumn ) defaultDBColumn0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderColumnTypeWithSize ( DBColumn column ) { StringBuilder builder = new StringBuilder ( ) ; renderColumnTypeWithSize ( column , builder ) ; return builder . toString ( ) ; }
void test3 ( ) throws Throwable { SQLUtil sQLUtil0 = new SQLUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = SQLUtil . innerJoin ( "f~y@V | ) : = ] ; O" , stringArray0 , "f~y@V | ) : = ] ; O" , "f~y@V | ) : = ] ; O" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String innerJoin ( String alias1 , String [ ] columns1 , String table2 , String alias2 , String [ ] columns2 ) { return join ( "inner" , alias1 , columns1 , table2 , alias2 , columns2 ) ; }
void test6 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; String [ ] stringArray0 = new String [ 18 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "" , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; NameSpec nameSpec0 = NameSpec . IF_REPRODUCIBLE ; String string0 = SQLUtil . fkSpec ( dBForeignKeyConstraint0 , nameSpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test8 ( ) throws Throwable { Object [ ] objectArray0 = SQLUtil . parseColumnTypeAndSize ( "f~y@V | ) : = ] ; O F~Y@V | ) : = ] ; O ( - 519 , - 519 ) NULL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] parseColumnTypeAndSize ( String spec ) { int lparen = spec . indexOf ( ' ( ' ) ; if ( lparen < 0 ) return new Object [ ] { spec } ; String type = spec . substring ( 0 , lparen ) ; int rparen = spec . indexOf ( ' ) ' , lparen ) ; if ( rparen < 0 ) throw new RuntimeException ( "Illegal column type format : " + spec ) ; String [ ] sizeAndFractionDigits = spec . substring ( lparen + 1 , rparen ) . split ( " , " ) ; if ( sizeAndFractionDigits . length = = 1 ) return new Object [ ] { type , Integer . parseInt ( sizeAndFractionDigits [ 0 ] . trim ( ) ) } ; else return new Object [ ] { type , Integer . parseInt ( sizeAndFractionDigits [ 0 ] . trim ( ) ) , Integer . parseInt ( sizeAndFractionDigits [ 1 ] . trim ( ) ) } ; }
void test9 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; NameSpec nameSpec0 = NameSpec . ALWAYS ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "drop materialized viewjna9 = e' - ` = < gn = n" , ( DBTable ) defaultDBTable0 , 1676 , "drop materialized viewjna9 = e' - ` = < gn = n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test10 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "" , false , stringArray0 ) ; NameSpec nameSpec0 = NameSpec . ALWAYS ; RowOutputBinary rowOutputBinary0 = new RowOutputBinary ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) rowOutputBinary0 ) ; PrintWriter printWriter0 = new PrintWriter ( ( OutputStream ) printStream0 , true ) ; SQLUtil . renderCreateTable ( ( DBTable ) defaultDBTable0 , true , nameSpec0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test11 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 3 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "drop materialized viewjna9 = e' - ` = < gn = n" , false , stringArray0 ) ; NameSpec nameSpec0 = NameSpec . ALWAYS ; RowOutputBinary rowOutputBinary0 = new RowOutputBinary ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) rowOutputBinary0 ) ; PrintWriter printWriter0 = new PrintWriter ( ( OutputStream ) printStream0 , true ) ; SQLUtil . renderCreateTable ( ( DBTable ) defaultDBTable0 , true , nameSpec0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test12 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; NameSpec nameSpec0 = NameSpec . NEVER ; RowOutputBinary rowOutputBinary0 = new RowOutputBinary ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) rowOutputBinary0 ) ; PrintWriter printWriter0 = new PrintWriter ( ( OutputStream ) printStream0 , false ) ; SQLUtil . renderCreateTable ( ( DBTable ) defaultDBTable0 , false , nameSpec0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test13 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( ( - 519 ) , "f~y@V | ) : = ] ; O" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "f~y@V | ) : = ] ; O" , ( DBTable ) null , dBDataType0 , ( Integer ) ( - 519 ) ) ; DBColumn [ ] dBColumnArray0 = new DBColumn [ 8 ] ; dBColumnArray0 [ 0 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 1 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 2 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 3 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 4 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 5 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 6 ] = ( DBColumn ) defaultDBColumn0 ; dBColumnArray0 [ 7 ] = ( DBColumn ) defaultDBColumn0 ; String string0 = SQLUtil . renderColumnNames ( dBColumnArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderColumnNames ( DBColumn [ ] columns ) { StringBuilder builder = new StringBuilder ( columns [ 0 ] . getName ( ) ) ; for ( int i = 1 ; i < columns . length ; i + + ) builder . append ( " , " ) . append ( columns [ i ] . getName ( ) ) ; return builder . toString ( ) ; }
void test14 ( ) throws Throwable { ArrayList < DBColumn > arrayList0 = new ArrayList < DBColumn > ( ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "" , ( DBTable ) null , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderColumnNames ( DBColumn [ ] columns ) { StringBuilder builder = new StringBuilder ( columns [ 0 ] . getName ( ) ) ; for ( int i = 1 ; i < columns . length ; i + + ) builder . append ( " , " ) . append ( columns [ i ] . getName ( ) ) ; return builder . toString ( ) ; }
void test15 ( ) throws Throwable { StringBuilder stringBuilder0 = new StringBuilder ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( ( - 519 ) , "f~y@V | ) : = ] ; O" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "f~y@V | ) : = ] ; O" , ( DBTable ) null , dBDataType0 , ( Integer ) ( - 519 ) ) ; SQLUtil . renderColumnTypeWithSize ( ( DBColumn ) defaultDBColumn0 , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test16 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; String [ ] stringArray0 = new String [ 18 ] ; stringArray0 [ 0 ] = "" ; String string0 = SQLUtil . renderQuery ( ( DBTable ) defaultDBTable0 , stringArray0 , ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderQuery ( DBTable table , String [ ] columnNames , Object [ ] values ) { StringBuilder builder = new StringBuilder ( "SELECT * FROM " ) . append ( table . getName ( ) ) ; builder . append ( " WHERE " ) . append ( renderWhereClause ( columnNames , values ) ) ; return builder . toString ( ) ; }
void test17 ( ) throws Throwable { Boolean boolean0 = SQLUtil . mutatesDataOrStructure ( "SELECT * FROM WHERE = '' AND null = '' AND null = '' AND null = null AND null = null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean mutatesDataOrStructure ( String sql ) { sql = normalizeSQL ( sql ) ; / / ALTER SESSION does not change data or structure if ( sql . trim ( ) . startsWith ( "alter session" ) ) return false ; / / check if structure is changed . . . if ( Boolean . TRUE . equals ( mutatesStructure ( sql ) ) ) return true ; else if ( isQuery ( sql ) ) return false ; else if ( isDML ( sql ) ) return true ; return null ; }
void test18 ( ) throws Throwable { Boolean boolean0 = SQLUtil . mutatesDataOrStructure ( "alter table" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean mutatesDataOrStructure ( String sql ) { sql = normalizeSQL ( sql ) ; / / ALTER SESSION does not change data or structure if ( sql . trim ( ) . startsWith ( "alter session" ) ) return false ; / / check if structure is changed . . . if ( Boolean . TRUE . equals ( mutatesStructure ( sql ) ) ) return true ; else if ( isQuery ( sql ) ) return false ; else if ( isDML ( sql ) ) return true ; return null ; }
void test20 ( ) throws Throwable { Boolean boolean0 = SQLUtil . mutatesDataOrStructure ( "updateBlob ( int , InputStream , long ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean mutatesDataOrStructure ( String sql ) { sql = normalizeSQL ( sql ) ; / / ALTER SESSION does not change data or structure if ( sql . trim ( ) . startsWith ( "alter session" ) ) return false ; / / check if structure is changed . . . if ( Boolean . TRUE . equals ( mutatesStructure ( sql ) ) ) return true ; else if ( isQuery ( sql ) ) return false ; else if ( isDML ( sql ) ) return true ; return null ; }
void test21 ( ) throws Throwable { Boolean boolean0 = SQLUtil . mutatesStructure ( "call" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean mutatesStructure ( String sql ) { if ( isDDL ( sql ) ) return true ; if ( isProcedureCall ( sql ) ) return false ; return false ; }
void test23 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 10 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "drop materialized viewjna9 = e' - ` = < gn = n" , false , stringArray0 ) ; NameSpec nameSpec0 = NameSpec . NEVER ; String string0 = SQLUtil . constraintSpec ( ( DBConstraint ) dBUniqueConstraint0 , nameSpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; String string0 = SQLUtil . join ( ( String ) null , ( String ) null , stringArray0 , "7EM7" , ( String ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String join ( String type , String refererAlias , String [ ] refererColumns , String refereeTable , String refereeAlias , String [ ] refereeColumns ) { StringBuilder builder = new StringBuilder ( ) ; if ( ! StringUtil . isEmpty ( type ) & & ! "inner" . equalsIgnoreCase ( type ) ) builder . append ( type ) . append ( " join " ) ; builder . append ( refereeTable ) . append ( " as " ) . append ( refereeAlias ) . append ( " on " ) ; for ( int i = 0 ; i < refererColumns . length ; i + + ) { if ( i > 0 ) builder . append ( " and " ) ; builder . append ( refererAlias ) . append ( ' . ' ) . append ( refererColumns [ i ] ) ; builder . append ( " = " ) . append ( refereeAlias ) . append ( ' . ' ) . append ( refereeColumns [ i ] ) ; } return builder . toString ( ) ; }
void test25 ( ) throws Throwable { StringBuilder stringBuilder0 = new StringBuilder ( ( CharSequence ) "" ) ; StringBuilder stringBuilder1 = SQLUtil . addRequiredCondition ( "" , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test26 ( ) throws Throwable { StringBuilder stringBuilder0 = new StringBuilder ( ) ; stringBuilder0 . append ( false ) ; SQLUtil . addRequiredCondition ( "left join gK < @Sc3 . \"5 * l - ( ZJ ; HT as drop materialized viewjna9 = e' - ` = < gn = n on gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT" , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test27 ( ) throws Throwable { StringBuilder stringBuilder0 = new StringBuilder ( ) ; SQLUtil . addOptionalCondition ( "f~y@V | ) : = ] ; O" , stringBuilder0 ) ; SQLUtil . addOptionalCondition ( ( String ) null , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test28 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; String string0 = SQLUtil . ownerDotComponent ( ( DBObject ) dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ownerDotComponent ( DBObject object ) { return ( object . getOwner ( ) ! = null ? object . getOwner ( ) + " . " : "" ) + object . getName ( ) ; }
void test29 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; Integer integer0 = new Integer ( 368 ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "" , ( DBTable ) defaultDBTable0 , ( DBDataType ) null , integer0 , ( Integer ) 368 ) ; String string0 = SQLUtil . ownerDotComponent ( ( DBObject ) defaultDBColumn0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ownerDotComponent ( DBObject object ) { return ( object . getOwner ( ) ! = null ? object . getOwner ( ) + " . " : "" ) + object . getName ( ) ; }
void test30 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 3 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "drop materialized viewjna9 = e' - ` = < gn = n" , false , stringArray0 ) ; NameSpec nameSpec0 = NameSpec . ALWAYS ; dBUniqueConstraint0 . setName ( ( String ) null ) ; RowOutputBinary rowOutputBinary0 = new RowOutputBinary ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) rowOutputBinary0 ) ; PrintWriter printWriter0 = new PrintWriter ( ( OutputStream ) printStream0 , true ) ; SQLUtil . renderCreateTable ( ( DBTable ) defaultDBTable0 , true , nameSpec0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test31 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "8" ) ; String [ ] stringArray0 = new String [ 4 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "8" , false , stringArray0 ) ; NameSpec nameSpec0 = NameSpec . IF_REPRODUCIBLE ; String string0 = SQLUtil . ukSpec ( dBUniqueConstraint0 , nameSpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test32 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 3 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "drop materialized viewjna9 = e' - ` = < gn = n" , false , stringArray0 ) ; StringBuilder stringBuilder0 = new StringBuilder ( ( CharSequence ) "drop materialized viewjna9 = e' - ` = < gn = n" ) ; SQLUtil . appendConstraintName ( ( DBConstraint ) dBUniqueConstraint0 , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test33 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 3 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "drop materialized viewjna9 = e' - ` = < gn = n" , false , stringArray0 ) ; dBUniqueConstraint0 . setName ( ( String ) null ) ; String string0 = SQLUtil . constraintName ( ( DBConstraint ) dBUniqueConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String constraintName ( DBConstraint constraint ) { return ( constraint . getName ( ) ! = null ? "CONSTRAINT " + quoteNameIfNecessary ( constraint . getName ( ) ) + ' ' : "" ) ; }
void test34 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "drop materialized viewjna9 = e' - ` = < gn = n" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "drop materialized viewjna9 = e' - ` = < gn = n" , dBSchema0 ) ; String [ ] stringArray0 = new String [ 10 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "drop materialized viewjna9 = e' - ` = < gn = n" , false , stringArray0 ) ; String string0 = SQLUtil . constraintName ( ( DBConstraint ) dBUniqueConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String constraintName ( DBConstraint constraint ) { return ( constraint . getName ( ) ! = null ? "CONSTRAINT " + quoteNameIfNecessary ( constraint . getName ( ) ) + ' ' : "" ) ; }
void test35 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( ( String ) null ) ; DBPackage dBPackage0 = new DBPackage ( ( String ) null , dBSchema0 ) ; DBProcedure dBProcedure0 = new DBProcedure ( ( String ) null , dBPackage0 ) ; String string0 = SQLUtil . typeAndName ( ( DBObject ) dBProcedure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String typeAndName ( DBObject dbObject ) { if ( dbObject = = null ) return null ; String name = dbObject . getName ( ) ; if ( name = = null & & dbObject instanceof DBConstraint ) name = "constraint" ; return dbObject . getObjectType ( ) + ' ' + name ; }
void test36 ( ) throws Throwable { String string0 = SQLUtil . typeAndName ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String typeAndName ( DBObject dbObject ) { if ( dbObject = = null ) return null ; String name = dbObject . getName ( ) ; if ( name = = null & & dbObject instanceof DBConstraint ) name = "constraint" ; return dbObject . getObjectType ( ) + ' ' + name ; }
void test37 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; Integer integer0 = new Integer ( ( - 1 ) ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "" , ( DBTable ) defaultDBTable0 , ( DBDataType ) null , integer0 , ( Integer ) ( - 1 ) ) ; String string0 = SQLUtil . typeAndName ( ( DBObject ) defaultDBColumn0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String typeAndName ( DBObject dbObject ) { if ( dbObject = = null ) return null ; String name = dbObject . getName ( ) ; if ( name = = null & & dbObject instanceof DBConstraint ) name = "constraint" ; return dbObject . getObjectType ( ) + ' ' + name ; }
void test38 ( ) throws Throwable { String string0 = SQLUtil . removeComments ( " . na9 = e'$` = < gn = N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeComments ( String sql ) { String result = sql ; String tmp ; do { tmp = result ; result = StringUtil . removeSection ( tmp , " / * " , " * / " ) ; } while ( ! result . equals ( tmp ) ) ; return result ; }
void test39 ( ) throws Throwable { String string0 = SQLUtil . normalize ( "left join gK < @Sc3 . \"5 * l - ( ZJ ; HT as drop materialized viewjna9 = e' - ` = < gn = n on gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String sql , boolean removeComments ) { if ( removeComments ) sql = sql . replace ( " - - " , " / / " ) ; StreamTokenizer tokenizer = new StreamTokenizer ( new StringReader ( sql ) ) ; tokenizer . resetSyntax ( ) ; tokenizer . wordChars ( 'A' , 'Z' ) ; tokenizer . wordChars ( 'a' , 'z' ) ; tokenizer . wordChars ( '0' , '9' ) ; tokenizer . wordChars ( '_' , '_' ) ; tokenizer . whitespaceChars ( ' ' , ' ' ) ; tokenizer . whitespaceChars ( '\n' , '\n' ) ; tokenizer . whitespaceChars ( '\r' , '\r' ) ; tokenizer . whitespaceChars ( '\t' , '\t' ) ; tokenizer . quoteChar ( '\'' ) ; tokenizer . quoteChar ( '"' ) ; if ( removeComments ) { tokenizer . slashStarComments ( true ) ; tokenizer . slashSlashComments ( true ) ; } StringBuilder builder = new StringBuilder ( ) ; int lastTtype = StreamTokenizer . TT_EOF ; try { while ( tokenizer . nextToken ( ) ! = StreamTokenizer . TT_EOF ) { int ttype = tokenizer . ttype ; if ( builder . length ( ) > 0 / / insert space if this is not the beginning of the string & & ttype ! = ' ) ' & & ttype ! = ' , ' & & lastTtype ! = ' ( ' / / no space for brackets and lists & & lastTtype ! = ' . ' & & ttype ! = ' . ' / / no space around ' . ' & & ! ( lastTtype = = ' / ' & & ttype = = ' * ' ) / / preserve / * if it has not been filtered out & & ! ( lastTtype = = ' - ' & & ttype = = ' - ' ) / / preserve - - if it has not been filtered out & & ! ( lastTtype = = ' * ' & & ttype = = ' / ' ) ) / / preserve * / if it has not been filtered out builder . append ( ' ' ) ; switch ( ttype ) { case StreamTokenizer . TT_WORD : builder . append ( tokenizer . sval ) ; break ; case StreamTokenizer . TT_NUMBER : builder . append ( renderNumber ( tokenizer ) ) ; break ; case '"' : builder . append ( '"' ) . append ( tokenizer . sval ) . append ( '"' ) ; break ; case '\'' : builder . append ( '\'' ) . append ( tokenizer . sval ) . append ( '\'' ) ; break ; default : builder . append ( ( char ) ttype ) ; } lastTtype = ttype ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return builder . toString ( ) ; }
void test40 ( ) throws Throwable { String string0 = SQLUtil . normalize ( "yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . null , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . null , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089#vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089#vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089#vz48 . yW + NPs089#vz48 , yW + NPs089#vz48 . yW + NPs089#vz48" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String sql , boolean removeComments ) { if ( removeComments ) sql = sql . replace ( " - - " , " / / " ) ; StreamTokenizer tokenizer = new StreamTokenizer ( new StringReader ( sql ) ) ; tokenizer . resetSyntax ( ) ; tokenizer . wordChars ( 'A' , 'Z' ) ; tokenizer . wordChars ( 'a' , 'z' ) ; tokenizer . wordChars ( '0' , '9' ) ; tokenizer . wordChars ( '_' , '_' ) ; tokenizer . whitespaceChars ( ' ' , ' ' ) ; tokenizer . whitespaceChars ( '\n' , '\n' ) ; tokenizer . whitespaceChars ( '\r' , '\r' ) ; tokenizer . whitespaceChars ( '\t' , '\t' ) ; tokenizer . quoteChar ( '\'' ) ; tokenizer . quoteChar ( '"' ) ; if ( removeComments ) { tokenizer . slashStarComments ( true ) ; tokenizer . slashSlashComments ( true ) ; } StringBuilder builder = new StringBuilder ( ) ; int lastTtype = StreamTokenizer . TT_EOF ; try { while ( tokenizer . nextToken ( ) ! = StreamTokenizer . TT_EOF ) { int ttype = tokenizer . ttype ; if ( builder . length ( ) > 0 / / insert space if this is not the beginning of the string & & ttype ! = ' ) ' & & ttype ! = ' , ' & & lastTtype ! = ' ( ' / / no space for brackets and lists & & lastTtype ! = ' . ' & & ttype ! = ' . ' / / no space around ' . ' & & ! ( lastTtype = = ' / ' & & ttype = = ' * ' ) / / preserve / * if it has not been filtered out & & ! ( lastTtype = = ' - ' & & ttype = = ' - ' ) / / preserve - - if it has not been filtered out & & ! ( lastTtype = = ' * ' & & ttype = = ' / ' ) ) / / preserve * / if it has not been filtered out builder . append ( ' ' ) ; switch ( ttype ) { case StreamTokenizer . TT_WORD : builder . append ( tokenizer . sval ) ; break ; case StreamTokenizer . TT_NUMBER : builder . append ( renderNumber ( tokenizer ) ) ; break ; case '"' : builder . append ( '"' ) . append ( tokenizer . sval ) . append ( '"' ) ; break ; case '\'' : builder . append ( '\'' ) . append ( tokenizer . sval ) . append ( '\'' ) ; break ; default : builder . append ( ( char ) ttype ) ; } lastTtype = ttype ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return builder . toString ( ) ; }
void test41 ( ) throws Throwable { String string0 = SQLUtil . normalize ( "I * Z7 [ . r1u4 / 0p$F6x = ) " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String sql , boolean removeComments ) { if ( removeComments ) sql = sql . replace ( " - - " , " / / " ) ; StreamTokenizer tokenizer = new StreamTokenizer ( new StringReader ( sql ) ) ; tokenizer . resetSyntax ( ) ; tokenizer . wordChars ( 'A' , 'Z' ) ; tokenizer . wordChars ( 'a' , 'z' ) ; tokenizer . wordChars ( '0' , '9' ) ; tokenizer . wordChars ( '_' , '_' ) ; tokenizer . whitespaceChars ( ' ' , ' ' ) ; tokenizer . whitespaceChars ( '\n' , '\n' ) ; tokenizer . whitespaceChars ( '\r' , '\r' ) ; tokenizer . whitespaceChars ( '\t' , '\t' ) ; tokenizer . quoteChar ( '\'' ) ; tokenizer . quoteChar ( '"' ) ; if ( removeComments ) { tokenizer . slashStarComments ( true ) ; tokenizer . slashSlashComments ( true ) ; } StringBuilder builder = new StringBuilder ( ) ; int lastTtype = StreamTokenizer . TT_EOF ; try { while ( tokenizer . nextToken ( ) ! = StreamTokenizer . TT_EOF ) { int ttype = tokenizer . ttype ; if ( builder . length ( ) > 0 / / insert space if this is not the beginning of the string & & ttype ! = ' ) ' & & ttype ! = ' , ' & & lastTtype ! = ' ( ' / / no space for brackets and lists & & lastTtype ! = ' . ' & & ttype ! = ' . ' / / no space around ' . ' & & ! ( lastTtype = = ' / ' & & ttype = = ' * ' ) / / preserve / * if it has not been filtered out & & ! ( lastTtype = = ' - ' & & ttype = = ' - ' ) / / preserve - - if it has not been filtered out & & ! ( lastTtype = = ' * ' & & ttype = = ' / ' ) ) / / preserve * / if it has not been filtered out builder . append ( ' ' ) ; switch ( ttype ) { case StreamTokenizer . TT_WORD : builder . append ( tokenizer . sval ) ; break ; case StreamTokenizer . TT_NUMBER : builder . append ( renderNumber ( tokenizer ) ) ; break ; case '"' : builder . append ( '"' ) . append ( tokenizer . sval ) . append ( '"' ) ; break ; case '\'' : builder . append ( '\'' ) . append ( tokenizer . sval ) . append ( '\'' ) ; break ; default : builder . append ( ( char ) ttype ) ; } lastTtype = ttype ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return builder . toString ( ) ; }
void test42 ( ) throws Throwable { String string0 = SQLUtil . normalize ( " * / " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String sql , boolean removeComments ) { if ( removeComments ) sql = sql . replace ( " - - " , " / / " ) ; StreamTokenizer tokenizer = new StreamTokenizer ( new StringReader ( sql ) ) ; tokenizer . resetSyntax ( ) ; tokenizer . wordChars ( 'A' , 'Z' ) ; tokenizer . wordChars ( 'a' , 'z' ) ; tokenizer . wordChars ( '0' , '9' ) ; tokenizer . wordChars ( '_' , '_' ) ; tokenizer . whitespaceChars ( ' ' , ' ' ) ; tokenizer . whitespaceChars ( '\n' , '\n' ) ; tokenizer . whitespaceChars ( '\r' , '\r' ) ; tokenizer . whitespaceChars ( '\t' , '\t' ) ; tokenizer . quoteChar ( '\'' ) ; tokenizer . quoteChar ( '"' ) ; if ( removeComments ) { tokenizer . slashStarComments ( true ) ; tokenizer . slashSlashComments ( true ) ; } StringBuilder builder = new StringBuilder ( ) ; int lastTtype = StreamTokenizer . TT_EOF ; try { while ( tokenizer . nextToken ( ) ! = StreamTokenizer . TT_EOF ) { int ttype = tokenizer . ttype ; if ( builder . length ( ) > 0 / / insert space if this is not the beginning of the string & & ttype ! = ' ) ' & & ttype ! = ' , ' & & lastTtype ! = ' ( ' / / no space for brackets and lists & & lastTtype ! = ' . ' & & ttype ! = ' . ' / / no space around ' . ' & & ! ( lastTtype = = ' / ' & & ttype = = ' * ' ) / / preserve / * if it has not been filtered out & & ! ( lastTtype = = ' - ' & & ttype = = ' - ' ) / / preserve - - if it has not been filtered out & & ! ( lastTtype = = ' * ' & & ttype = = ' / ' ) ) / / preserve * / if it has not been filtered out builder . append ( ' ' ) ; switch ( ttype ) { case StreamTokenizer . TT_WORD : builder . append ( tokenizer . sval ) ; break ; case StreamTokenizer . TT_NUMBER : builder . append ( renderNumber ( tokenizer ) ) ; break ; case '"' : builder . append ( '"' ) . append ( tokenizer . sval ) . append ( '"' ) ; break ; case '\'' : builder . append ( '\'' ) . append ( tokenizer . sval ) . append ( '\'' ) ; break ; default : builder . append ( ( char ) ttype ) ; } lastTtype = ttype ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return builder . toString ( ) ; }
void test43 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; StreamTokenizer streamTokenizer0 = new StreamTokenizer ( ( Reader ) pipedReader0 ) ; String string0 = SQLUtil . renderNumber ( streamTokenizer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderNumber ( StreamTokenizer tokenizer ) { double value = tokenizer . nval ; if ( Math . floor ( value ) = = value ) return renderLong ( ( long ) value ) ; else return renderDouble ( value ) ; }
void test44 ( ) throws Throwable { String [ ] stringArray0 = new String [ 23 ] ; String string0 = SQLUtil . renderColumnListWithTableName ( "yW + NPs089#vz48" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderColumnListWithTableName ( String table , String . . . columns ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < columns . length ; i + + ) { if ( i > 0 ) builder . append ( " , " ) ; builder . append ( table ) . append ( ' . ' ) . append ( columns [ i ] ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { DatabaseDialectManager databaseDialectManager0 = new DatabaseDialectManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "" ) ; UnknownDialect unknownDialect0 = ( UnknownDialect ) DatabaseDialectManager . getDialectForProduct ( "" , versionNumber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test2 ( ) throws Throwable { HSQL2Dialect hSQL2Dialect0 = ( HSQL2Dialect ) DatabaseDialectManager . getDialectForProduct ( "hsql . 4 [ p5VLveyon" , ( VersionNumber ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test3 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "" ) ; HSQLDialect hSQLDialect0 = ( HSQLDialect ) DatabaseDialectManager . getDialectForProduct ( "hsql . 4 [ p5VLveyon" , versionNumber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test0 ( ) throws Throwable { Class < ? > class0 = ColumnInfo . class ; ColumnInfo columnInfo0 = new ColumnInfo ( ( String ) null , 97 , class0 ) ; String string0 = columnInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { DatabaseTestUtil databaseTestUtil0 = new DatabaseTestUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { DBExecutionResult dBExecutionResult0 = new DBExecutionResult ( ( Object ) "false" , ( Boolean ) false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBExecutionResult ( Object result , Boolean changedStructure ) { super ( ) ; this . result = result ; this . changedStructure = changedStructure ; }
void test3 ( ) throws Throwable { DatabaseTreeModel databaseTreeModel0 = new DatabaseTreeModel ( ( Database ) null ) ; DBObject dBObject0 = ( DBObject ) databaseTreeModel0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBObject getRoot ( ) { return database ; }
void test5 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "hsqldb . files_readonly" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "hsqldb . files_readonly" , "hsqldb . files_readonly" , versionNumber0 ) ; DatabaseTreeModel databaseTreeModel0 = new DatabaseTreeModel ( ( Database ) defaultDatabase0 ) ; boolean boolean0 = databaseTreeModel0 . isLeaf ( ( DBObject ) defaultDatabase0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( DBObject node ) { return ! ( node instanceof CompositeDBObject ) ; }
void test6 ( ) throws Throwable { DatabaseTreeModel databaseTreeModel0 = new DatabaseTreeModel ( ( Database ) null ) ; boolean boolean0 = databaseTreeModel0 . isLeaf ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( DBObject node ) { return ! ( node instanceof CompositeDBObject ) ; }
void test0 ( ) throws Throwable { JDBCConnectData jDBCConnectData0 = new JDBCConnectData ( " [ u" , " [ u" , " [ u" , " [ u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JDBCConnectData ( String driver , String url , String user , String password ) { this ( driver , url , user , password , null , null ) ; }
void test5 ( ) throws Throwable { Csv csv0 = Csv . getInstance ( ) ; SimpleResultSet simpleResultSet0 = new SimpleResultSet ( ( SimpleRowSource ) csv0 ) ; ResultSetIterator resultSetIterator0 = new ResultSetIterator ( ( ResultSet ) simpleResultSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test6 ( ) throws Throwable { Csv csv0 = Csv . getInstance ( ) ; ValueFloat valueFloat0 = ValueFloat . get ( ( - 6 . 5462065F ) ) ; StringReader stringReader0 = ( StringReader ) valueFloat0 . getReader ( ) ; String [ ] stringArray0 = new String [ 28 ] ; SimpleResultSet simpleResultSet0 = ( SimpleResultSet ) csv0 . read ( ( Reader ) stringReader0 , stringArray0 ) ; ResultSetIterator resultSetIterator0 = new ResultSetIterator ( ( ResultSet ) simpleResultSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResultSet next ( ) { if ( logger . isDebugEnabled ( ) ) logger . debug ( "next ( ) called on : " + this ) ; if ( ! hasNext ( ) ) throw new IllegalStateException ( "No more row available . Use hasNext ( ) for checking availability . " ) ; hasNext = null ; return resultSet ; }
void test7 ( ) throws Throwable { SimpleResultSet simpleResultSet0 = new SimpleResultSet ( ) ; ResultSetIterator resultSetIterator0 = new ResultSetIterator ( ( ResultSet ) simpleResultSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResultSet next ( ) { if ( logger . isDebugEnabled ( ) ) logger . debug ( "next ( ) called on : " + this ) ; if ( ! hasNext ( ) ) throw new IllegalStateException ( "No more row available . Use hasNext ( ) for checking availability . " ) ; hasNext = null ; return resultSet ; }
void test8 ( ) throws Throwable { Csv csv0 = Csv . getInstance ( ) ; SimpleResultSet simpleResultSet0 = new SimpleResultSet ( ( SimpleRowSource ) csv0 ) ; ResultSetIterator resultSetIterator0 = new ResultSetIterator ( ( ResultSet ) simpleResultSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBSequence getSequence ( String sequenceName , Connection connection ) throws SQLException { DBSequence [ ] sequences = querySequences ( connection ) ; for ( DBSequence seq : sequences ) if ( seq . getName ( ) . equalsIgnoreCase ( sequenceName ) ) return seq ; throw new ObjectNotFoundException ( "No sequence found with name '" + sequenceName + "'" ) ; }
void test2 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( ( String ) null ) ; MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test3 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test4 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test5 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderFetchSequenceValue ( String sequenceName ) { throw checkSequenceSupport ( "nextSequenceValue" ) ; }
void test6 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test7 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( "'null'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test8 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test9 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createSequence ( String name , long initialValue , Connection connection ) throws SQLException { if ( sequenceSupported ) DBUtil . executeUpdate ( "create sequence " + name + " start with " + initialValue , connection ) ; else throw checkSequenceSupport ( "createSequence" ) ; }
void test10 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createSequence ( String name , long initialValue , Connection connection ) throws SQLException { if ( sequenceSupported ) DBUtil . executeUpdate ( "create sequence " + name + " start with " + initialValue , connection ) ; else throw checkSequenceSupport ( "createSequence" ) ; }
void test11 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test12 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test13 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test14 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test15 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test16 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test17 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test18 ( ) throws Throwable { Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test19 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( "hsql" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setNextSequenceValue ( String sequenceName , long value , Connection connection ) throws SQLException { if ( sequenceSupported ) { long old = DBUtil . queryLong ( renderFetchSequenceValue ( sequenceName ) , connection ) ; long increment = value - old - 1 ; if ( increment ! = 0 ) { BigInteger formerIncrement = getSequence ( sequenceName , connection ) . getIncrement ( ) ; DBUtil . executeUpdate ( "alter sequence " + sequenceName + " increment by " + increment , connection ) ; DBUtil . queryLong ( renderFetchSequenceValue ( sequenceName ) , connection ) ; DBUtil . executeUpdate ( "alter sequence " + sequenceName + " increment by " + formerIncrement , connection ) ; } } else throw checkSequenceSupport ( "incrementSequence" ) ; }
void test20 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setNextSequenceValue ( String sequenceName , long value , Connection connection ) throws SQLException { if ( sequenceSupported ) { long old = DBUtil . queryLong ( renderFetchSequenceValue ( sequenceName ) , connection ) ; long increment = value - old - 1 ; if ( increment ! = 0 ) { BigInteger formerIncrement = getSequence ( sequenceName , connection ) . getIncrement ( ) ; DBUtil . executeUpdate ( "alter sequence " + sequenceName + " increment by " + increment , connection ) ; DBUtil . queryLong ( renderFetchSequenceValue ( sequenceName ) , connection ) ; DBUtil . executeUpdate ( "alter sequence " + sequenceName + " increment by " + formerIncrement , connection ) ; } } else throw checkSequenceSupport ( "incrementSequence" ) ; }
void test21 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderDropSequence ( String sequenceName ) { if ( sequenceSupported ) return "drop sequence " + sequenceName ; else throw checkSequenceSupport ( "dropSequence" ) ; }
void test22 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test23 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String update ( DBTable table , String [ ] pkColumnNames , List < ColumnInfo > columnInfos ) { if ( pkColumnNames . length = = 0 ) throw new UnsupportedOperationException ( "Cannot update table without primary key : " + table . getName ( ) ) ; StringBuilder builder = new StringBuilder ( "update " ) ; appendQualifiedTableName ( table , builder ) . append ( " set" ) ; for ( int i = 0 ; i < columnInfos . size ( ) ; i + + ) { if ( ! ArrayUtil . contains ( columnInfos . get ( i ) . name , pkColumnNames ) ) { builder . append ( " " ) ; appendColumnName ( columnInfos . get ( i ) . name , builder ) ; builder . append ( " = ? " ) ; if ( i < columnInfos . size ( ) - pkColumnNames . length - 1 ) builder . append ( " , " ) ; } } builder . append ( " where" ) ; for ( int i = 0 ; i < pkColumnNames . length ; i + + ) { builder . append ( ' ' ) ; appendColumnName ( pkColumnNames [ i ] , builder ) ; builder . append ( " = ? " ) ; if ( i < pkColumnNames . length - 1 ) builder . append ( " and" ) ; } String sql = builder . toString ( ) ; logger . debug ( "built SQL statement : " + sql ) ; return sql ; }
void test24 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test25 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test26 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( " , Y8HT#X > MwY . W } s4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test27 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test28 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String insert ( DBTable table , List < ColumnInfo > columnInfos ) { StringBuilder builder = new StringBuilder ( "insert into " ) ; appendQualifiedTableName ( table , builder ) . append ( " ( " ) ; if ( columnInfos . size ( ) > 0 ) appendColumnName ( columnInfos . get ( 0 ) . name , builder ) ; for ( int i = 1 ; i < columnInfos . size ( ) ; i + + ) { builder . append ( " , " ) ; appendColumnName ( columnInfos . get ( i ) . name , builder ) ; } builder . append ( " ) values ( " ) ; if ( columnInfos . size ( ) > 0 ) builder . append ( " ? " ) ; for ( int i = 1 ; i < columnInfos . size ( ) ; i + + ) builder . append ( " , ? " ) ; builder . append ( " ) " ) ; String sql = builder . toString ( ) ; logger . debug ( "built SQL statement : " + sql ) ; return sql ; }
void test29 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String insert ( DBTable table , List < ColumnInfo > columnInfos ) { StringBuilder builder = new StringBuilder ( "insert into " ) ; appendQualifiedTableName ( table , builder ) . append ( " ( " ) ; if ( columnInfos . size ( ) > 0 ) appendColumnName ( columnInfos . get ( 0 ) . name , builder ) ; for ( int i = 1 ; i < columnInfos . size ( ) ; i + + ) { builder . append ( " , " ) ; appendColumnName ( columnInfos . get ( i ) . name , builder ) ; } builder . append ( " ) values ( " ) ; if ( columnInfos . size ( ) > 0 ) builder . append ( " ? " ) ; for ( int i = 1 ; i < columnInfos . size ( ) ; i + + ) builder . append ( " , ? " ) ; builder . append ( " ) " ) ; String sql = builder . toString ( ) ; logger . debug ( "built SQL statement : " + sql ) ; return sql ; }
void test30 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return system ; }
void test31 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test29 ( ) throws Throwable { ResultSet resultSet0 = null ; / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test30 ( ) throws Throwable { PreparedStatement preparedStatement0 = null ; / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; jDBCDriverInfo0 . setDownloadUrl ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { Collection < JDBCDriverInfo > collection0 = JDBCDriverInfo . getInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < JDBCDriverInfo > getInstances ( ) { return instances . values ( ) ; }
void test3 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; String string0 = jDBCDriverInfo0 . getDownloadUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDownloadUrl ( ) { return downloadUrl ; }
void test4 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; jDBCDriverInfo0 . setDefaultSchema ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDownloadUrl ( ) { return downloadUrl ; }
void test5 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; String string0 = jDBCDriverInfo0 . getDefaultUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultUser ( ) { return defaultUser ; }
void test6 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; String string0 = jDBCDriverInfo0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test7 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; String string0 = jDBCDriverInfo0 . getDefaultDatabase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultDatabase ( ) { return defaultDatabase ; }
void test8 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; String string0 = jDBCDriverInfo0 . getDefaultSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultSchema ( ) { return defaultSchema ; }
void test9 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; jDBCDriverInfo0 . setDefaultPort ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultDatabase ( ) { return defaultDatabase ; }
void test10 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; String string0 = jDBCDriverInfo0 . getUrlPattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrlPattern ( ) { return urlPattern ; }
void test11 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; String string0 = jDBCDriverInfo0 . jdbcURL ( "T" , "T" , "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String jdbcURL ( String host , String port , String database ) { return MessageFormat . format ( urlPattern , host , port , database ) ; }
void test12 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; String string0 = jDBCDriverInfo0 . getDbSystem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDbSystem ( ) { return dbSystem ; }
void test13 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; jDBCDriverInfo0 . setId ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultDatabase ( ) { return defaultDatabase ; }
void test14 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . getInstance ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JDBCDriverInfo getInstance ( String name ) { return instances . get ( name ) ; }
void test15 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; String [ ] stringArray0 = jDBCDriverInfo0 . getJars ( ) ; jDBCDriverInfo0 . setJars ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultPort ( ) { return defaultPort ; }
void test16 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; jDBCDriverInfo0 . setDbSystem ( "ssl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultSchema ( ) { return defaultSchema ; }
void test17 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; String string0 = jDBCDriverInfo0 . getDriverClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDriverClass ( ) { return driverClass ; }
void test18 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; jDBCDriverInfo0 . setDriverClass ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultUser ( ) { return defaultUser ; }
void test19 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; jDBCDriverInfo0 . setDefaultDatabase ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test20 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; String string0 = jDBCDriverInfo0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test21 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; jDBCDriverInfo0 . setDefaultUser ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrlPattern ( ) { return urlPattern ; }
void test22 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; String string0 = jDBCDriverInfo0 . getDefaultPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultPort ( ) { return defaultPort ; }
void test23 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; String string0 = jDBCDriverInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test24 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; jDBCDriverInfo0 . setName ( "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test25 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrlPrefix ( ) { int check = urlPattern . indexOf ( ' { ' ) ; return ( check > 0 ? urlPattern . substring ( 0 , check ) : urlPattern ) ; }
void test26 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . HSQL ; String string0 = jDBCDriverInfo0 . getUrlPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrlPrefix ( ) { int check = urlPattern . indexOf ( ' { ' ) ; return ( check > 0 ? urlPattern . substring ( 0 , check ) : urlPattern ) ; }
void test27 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; jDBCDriverInfo0 . setUrlPattern ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test28 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; JDBCDriverInfo jDBCDriverInfo1 = JDBCDriverInfo . FIREBIRD ; boolean boolean0 = jDBCDriverInfo0 . equals ( ( Object ) jDBCDriverInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test29 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = new JDBCDriverInfo ( ) ; boolean boolean0 = jDBCDriverInfo0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test30 ( ) throws Throwable { JDBCDriverInfo jDBCDriverInfo0 = JDBCDriverInfo . ORACLE ; boolean boolean0 = jDBCDriverInfo0 . equals ( ( Object ) "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String [ ] [ ] stringArray1 = new String [ 7 ] [ 4 ] ; ResultsWithMetadata resultsWithMetadata0 = new ResultsWithMetadata ( stringArray0 , stringArray1 ) ; String [ ] [ ] stringArray2 = resultsWithMetadata0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] [ ] getResults ( ) { return results ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; String [ ] [ ] stringArray1 = new String [ 1 ] [ 9 ] ; ResultsWithMetadata resultsWithMetadata0 = new ResultsWithMetadata ( stringArray0 , stringArray1 ) ; String [ ] stringArray2 = resultsWithMetadata0 . getColumnLabels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getColumnLabels ( ) { return ( ( ResultSetIterator ) source ) . getColumnLabels ( ) ; }
void test0 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; TableContainer tableContainer0 = new TableContainer ( "" , ( CompositeDBObject < ? extends DBObject > ) dBCatalog0 ) ; TableContainerSupport tableContainerSupport0 = tableContainer0 . support ; DBTable dBTable0 = tableContainerSupport0 . getTable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test2 ( ) throws Throwable { TableContainerSupport tableContainerSupport0 = new TableContainerSupport ( ) ; TableContainer tableContainer0 = new TableContainer ( "" ) ; tableContainerSupport0 . addSubContainer ( tableContainer0 ) ; List < DBTable > list0 = tableContainerSupport0 . getTables ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test3 ( ) throws Throwable { TableContainerSupport tableContainerSupport0 = new TableContainerSupport ( ) ; List < DBSequence > list0 = tableContainerSupport0 . getSequences ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test4 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; TableContainer tableContainer0 = new TableContainer ( "" , ( CompositeDBObject < ? extends DBObject > ) dBCatalog0 ) ; TableContainerSupport tableContainerSupport0 = tableContainer0 . support ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; tableContainerSupport0 . removeTable ( ( DBTable ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test6 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( ( String ) null ) ; List < ContainerComponent > list0 = tableContainer0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test7 ( ) throws Throwable { TableContainerSupport tableContainerSupport0 = new TableContainerSupport ( ) ; List < ContainerComponent > list0 = tableContainerSupport0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test0 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqY2L / " , ( DBTable ) null , ( DBDataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test1 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqJ2L / " , ( DBTable ) null , 806926250 , "RiqJ2L / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "7K" ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1618 , "7K" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "7K" , ( DBTable ) defaultDBTable0 , 1618 , "7K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test3 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "jgi7aZpu" , ( DBTable ) null , ( - 16 ) , "jgi7aZpu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "\"04" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "\"04" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 0 , ( Integer ) 0 ) ; defaultDBColumn0 . setFractionDigits ( ( Integer ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; Integer integer0 = new Integer ( ( - 1 ) ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "" , ( DBTable ) defaultDBTable0 , ( DBDataType ) null , integer0 , ( Integer ) ( - 1 ) ) ; defaultDBColumn0 . setSize ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test6 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1982 , " ] xN" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " ] xN" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 1982 ) ; String [ ] stringArray0 = new String [ 2 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , " ] xN" , false , stringArray0 ) ; defaultDBColumn0 . addUkConstraint ( ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; boolean boolean0 = defaultDBColumn0 . isUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test7 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " . UST - FM" , ( DBTable ) defaultDBTable0 , ( - 16 ) , " . UST - FM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAlpha ( ) { if ( ALPHA_TYPES . contains ( jdbcType ) ) / / standard types return true ; return name . endsWith ( "VARCHAR2" ) | | name . endsWith ( "CLOB" ) ; / / fixes for Oracle }
void test8 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqY2L / " , ( DBTable ) null , ( DBDataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return id . hashCode ( ) ; }
void test9 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "POWER ( 0 , - 1 ) " , ( DBTable ) null , 530 , "POWER ( 0 , - 1 ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test10 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1982 , " ] xN" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " ] xN" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 1982 ) ; boolean boolean0 = defaultDBColumn0 . isUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test11 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "jgi7aZpu" ) ; DBDataType dBDataType0 = DBDataType . getInstance ( ( - 16 ) , "jgi7aZpu" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "jgi7aZpu" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) ( - 16 ) , ( Integer ) ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) ; void setNullable ( boolean nullable ) ; boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test12 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqY2L / " , ( DBTable ) null , ( DBDataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test13 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "jgi7aZpu" ) ; DBDataType dBDataType0 = DBDataType . getInstance ( ( - 16 ) , "jgi7aZpu" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "jgi7aZpu" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) ( - 16 ) , ( Integer ) ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test14 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "7K" ) ; String [ ] stringArray0 = new String [ 2 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "7K" , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "7K" , ( DBTable ) defaultDBTable0 , 1618 , "7K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test15 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "^z" ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "^z" ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "^z" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "^z" , ( DBTable ) defaultDBTable0 , 1644 , "^z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test16 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "7K" ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1618 , "7K" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "7K" , ( DBTable ) defaultDBTable0 , 1618 , "7K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) ; void setNullable ( boolean nullable ) ; boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test17 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " . UST - FM" , ( DBTable ) defaultDBTable0 , ( - 16 ) , " . UST - FM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test18 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1982 , " ] xN" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " ] xN" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 1982 ) ; boolean boolean0 = defaultDBColumn0 . equals ( ( Object ) "' ] xN'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test19 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqY2L / " , ( DBTable ) null , ( DBDataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test20 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqY2L / " , ( DBTable ) null , ( DBDataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test21 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "jgi7aZpu" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "jgi7aZpu" , ( DBTable ) null , ( - 16 ) , "jgi7aZpu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test22 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "\"04" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "\"04" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 0 , ( Integer ) 0 ) ; DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn ( "\"04" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 0 , ( Integer ) null ) ; boolean boolean0 = defaultDBColumn0 . isIdentical ( ( DBObject ) defaultDBColumn1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test23 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; Integer integer0 = new Integer ( ( - 1 ) ) ; DBDataType dBDataType0 = DBDataType . getInstance ( ( - 1 ) , "" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "" , ( DBTable ) defaultDBTable0 , dBDataType0 , integer0 , ( Integer ) null ) ; DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn ( "" , ( DBTable ) defaultDBTable0 , dBDataType0 , integer0 ) ; boolean boolean0 = defaultDBColumn1 . isIdentical ( ( DBObject ) defaultDBColumn0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test24 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 29 , "BodyEvent ( " ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "BodyEvent ( " , ( DBTable ) null , dBDataType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test25 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1982 , " ] xN" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " ] xN" , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 1982 ) ; boolean boolean0 = defaultDBColumn0 . isEquivalent ( ( DBObject ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test26 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "RiqY2L / " , ( DBTable ) null , ( DBDataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test27 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( " . UST - FM" , ( DBTable ) defaultDBTable0 , ( - 16 ) , " . UST - FM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; List < DBColumn > list0 = defaultDBTable0 . getColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBColumn > getColumns ( ) { return columns . values ( ) ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; int int0 = defaultDBTable0 . countProviders ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "FOR UPDATE & & GROUP" ) ; List < DBCheckConstraint > list0 = defaultDBTable0 . getCheckConstraints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test8 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; String [ ] stringArray0 = new String [ 2 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "$a" , false , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "$a" , false , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; defaultDBTable0 . removeIndex ( ( DBIndex ) dBUniqueIndex0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnique ( ) ; List < DBUniqueConstraint > getUkConstraints ( ) ; void addUkConstraint ( DBUniqueConstraint constraint ) ; DBNotNullConstraint getNotNullConstraint ( ) ; void setNotNullConstraint ( DBNotNullConstraint constraint ) ; boolean isNullable ( ) ; void setNullable ( boolean nullable ) ; boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test9 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "lRag + " ) ; Collection < DBTable > collection0 = defaultDBTable0 . getReferrers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < DBTable > getReferrers ( ) { return new HashSet < DBTable > ( referrers ) ; }
void test12 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; DBSchema dBSchema0 = new DBSchema ( ( String ) null ) ; defaultDBTable0 . setSchema ( dBSchema0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test14 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "getResultSetImpl ( long , int , Map ) " , ( DBSchema ) null ) ; List < DBIndex > list0 = defaultDBTable0 . getIndexes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test15 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; String [ ] stringArray0 = defaultDBTable0 . getColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getColumnNames ( ) { return columnNames ; }
void test16 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "FOR UPDATE & & GROUP" ) ; defaultDBTable0 . setDoc ( "FOR UPDATE & & GROUP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test20 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "0g's~D / | " , ( DBSchema ) null ) ; DBIndex dBIndex0 = defaultDBTable0 . getIndex ( "0g's~D / | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBIndex getIndex ( String indexName ) { return indexes . get ( indexName ) ; }
void test22 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String string0 = defaultDBTable0 . getDoc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test23 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test24 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 4 ] ; DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( ( String ) null , ( DBTable ) defaultDBTable0 , dBDataType0 ) ; DBColumn [ ] dBColumnArray0 = defaultDBTable0 . getColumns ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBColumn > getColumns ( ) { return columns . values ( ) ; }
void test26 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "FOR UPDATE & & GROUP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test27 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( ( String ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null , dBSchema0 ) ; Set < DBUniqueConstraint > set0 = defaultDBTable0 . getUniqueConstraints ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < DBUniqueConstraint > getUniqueConstraints ( boolean includePK ) { Set < DBUniqueConstraint > result = new HashSet < DBUniqueConstraint > ( uniqueConstraints ) ; if ( includePK ) result . add ( pk ) ; return result ; }
void test28 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; String [ ] stringArray0 = new String [ 2 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "$a" , false , stringArray0 ) ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = ( DBPrimaryKeyConstraint ) defaultDBTable0 . getUniqueConstraint ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test29 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "$a" ) ; String [ ] stringArray0 = new String [ 2 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "$a" , false , stringArray0 ) ; defaultDBTable0 . addUniqueConstraint ( ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; dBPrimaryKeyConstraint0 . addColumnName ( "$a" ) ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = ( DBPrimaryKeyConstraint ) defaultDBTable0 . getUniqueConstraint ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBUniqueConstraint getUniqueConstraint ( String [ ] columnNames ) { if ( pk ! = null & & StringUtil . equalsIgnoreCase ( columnNames , pk . getColumnNames ( ) ) ) return pk ; for ( DBUniqueConstraint constraint : uniqueConstraints ) if ( StringUtil . equalsIgnoreCase ( columnNames , constraint . getColumnNames ( ) ) ) return constraint ; return null ; }
void test30 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 6 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "GQF0'd = iianQQC" , true , stringArray0 ) ; DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0 . getUniqueConstraint ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test31 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 4 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "" , false , stringArray0 ) ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = ( DBPrimaryKeyConstraint ) defaultDBTable0 . getUniqueConstraint ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test32 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 10 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , " + " , false , stringArray0 ) ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , " + " , false , stringArray0 ) ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = ( DBPrimaryKeyConstraint ) defaultDBTable0 . getUniqueConstraint ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBUniqueConstraint getUniqueConstraint ( String [ ] columnNames ) { if ( pk ! = null & & StringUtil . equalsIgnoreCase ( columnNames , pk . getColumnNames ( ) ) ) return pk ; for ( DBUniqueConstraint constraint : uniqueConstraints ) if ( StringUtil . equalsIgnoreCase ( columnNames , constraint . getColumnNames ( ) ) ) return constraint ; return null ; }
void test33 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test34 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBForeignKeyConstraint getForeignKeyConstraint ( String [ ] columnNames ) { for ( DBForeignKeyConstraint fk : foreignKeyConstraints ) if ( StringUtil . equalsIgnoreCase ( fk . getColumnNames ( ) , columnNames ) ) return fk ; throw new ObjectNotFoundException ( "Table '" + name + "' has no foreign key " + "with the columns ( " + ArrayFormat . format ( columnNames ) + " ) " ) ; }
void test35 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getPKColumnNames ( ) { DBPrimaryKeyConstraint pk = getPrimaryKeyConstraint ( ) ; return ( pk ! = null ? pk . getColumnNames ( ) : EMPTY_ARRAY ) ; }
void test37 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test38 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( ( String ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null , dBSchema0 ) ; dBSchema0 . removeTable ( ( DBTable ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test39 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test40 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 1 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "Uv & , + = f { l > B" , false , stringArray0 ) ; String string0 = dBPrimaryKeyConstraint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "pCURRENT_UfER" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "pCURRENT_UfER" , ( DBTable ) defaultDBTable0 , 99 , "pCURRENT_UfER" ) ; DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint ( ( DBTable ) defaultDBTable0 , "pCURRENT_UfER" , false , "pCURRENT_UfER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "pCURRENT_UfER" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "pCURRENT_UfER" , ( DBTable ) defaultDBTable0 , 99 , "pCURRENT_UfER" ) ; DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint ( ( DBTable ) defaultDBTable0 , "pCURRENT_UfER" , false , "pCURRENT_UfER" ) ; boolean boolean0 = dBNotNullConstraint0 . isIdentical ( ( DBObject ) defaultDBColumn0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "pCURRENT_UfER" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "pCURRENT_UfER" , ( DBTable ) defaultDBTable0 , 99 , "pCURRENT_UfER" ) ; DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint ( ( DBTable ) defaultDBTable0 , "pCURRENT_UfER" , false , "pCURRENT_UfER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "pCURRENT_UfER" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "pCURRENT_UfER" , ( DBTable ) defaultDBTable0 , 99 , "pCURRENT_UfER" ) ; DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint ( ( DBTable ) defaultDBTable0 , "pCURRENT_UfER" , false , "pCURRENT_UfER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "pCURRENT_UfER" ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "pCURRENT_UfER" , ( DBTable ) defaultDBTable0 , 99 , "pCURRENT_UfER" ) ; DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint ( ( DBTable ) defaultDBTable0 , "pCURRENT_UfER" , false , "pCURRENT_UfER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test0 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( " - ] RX^MhX" , " - ] RX^MhX" , " - ] RX^MhX" ) ; BigInteger bigInteger0 = ValueLong . MAX ; dBSequence0 . setLastNumber ( bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLastNumber ( BigInteger lastNumber ) { this . lastNumber = lastNumber ; }
void test1 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test2 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" ) ; dBSequence0 . setIncrement ( ( BigInteger ) null ) ; BigInteger bigInteger0 = dBSequence0 . getIncrementIfNotDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getIncrementIfNotDefault ( ) { return ( BigInteger . ONE . equals ( increment ) ? null : increment ) ; }
void test3 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "" , "" , "" ) ; BigInteger bigInteger0 = dBSequence0 . getMinValueIfNotDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getMinValueIfNotDefault ( ) { return minValue ; }
void test4 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" ) ; dBSequence0 . setMinValue ( ( BigInteger ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test5 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "0 - ; FRVCYGroZlUx > < 1" , "" , "0 - ; FRVCYGroZlUx > < 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaName ( ) { return schemaName ; }
void test6 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "0 - ; FRVCYGroZlUx > < 1" , "" , "0 - ; FRVCYGroZlUx > < 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaName ( ) { return schemaName ; }
void test7 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" ) ; BigInteger bigInteger0 = dBSequence0 . getLastNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test8 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" ) ; dBSequence0 . setOrder ( ( Boolean ) true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test9 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "" , "" , "" ) ; String string0 = dBSequence0 . getCatalogName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCatalogName ( ) { return catalogName ; }
void test10 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( " - ] RX^MhX" , " - ] RX^MhX" , " - ] RX^MhX" ) ; String string0 = dBSequence0 . getSchemaName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaName ( ) { return schemaName ; }
void test11 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" ) ; BigInteger bigInteger0 = dBSequence0 . getMaxValueIfNotDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getMaxValueIfNotDefault ( ) { return maxValue ; }
void test12 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( " - ] RX^MhX" , " - ] RX^MhX" , " - ] RX^MhX" ) ; Long long0 = new Long ( ( - 1L ) ) ; dBSequence0 . setCache ( long0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCatalogName ( ) { return catalogName ; }
void test13 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dropDDL ( ) { return "drop sequence " + name ; }
void test14 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "" , "" , "" ) ; dBSequence0 . setCycle ( ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test16 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" , "B8lOAI ! Fe & rhmC7Qjj5" ) ; BigInteger bigInteger0 = dBSequence0 . getStartIfNotDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getStartIfNotDefault ( ) { return ( BigInteger . ONE . equals ( this . start ) ? null : this . start ) ; }
void test17 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "CI25e" , "CI25e" , "CI25e" ) ; BigInteger bigInteger0 = dBSequence0 . getIncrementIfNotDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getIncrementIfNotDefault ( ) { return ( BigInteger . ONE . equals ( increment ) ? null : increment ) ; }
void test18 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "0 - ; FRVCYGroZlUx > < 1" , "" , "0 - ; FRVCYGroZlUx > < 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCatalogName ( ) { return catalogName ; }
void test19 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "0 - ; FRVCYGroZlUx > < 1" , "" , "0 - ; FRVCYGroZlUx > < 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaName ( ) { return schemaName ; }
void test20 ( ) throws Throwable { DBSequence dBSequence0 = new DBSequence ( "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" , "% = 7I7 ( + d`wD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "" , false , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "" , false , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; String string0 = dBUniqueIndex0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Connection ool has been disposed . " ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "Connection ool has been disposed . " , true , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "Connection ool has been disposed . " , true , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; DefaultDBTable defaultDBTable1 = ( DefaultDBTable ) dBUniqueIndex0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "" , false , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "" , false , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; dBUniqueIndex0 . addColumnName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Connection ool has been disposed . " ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "Connection ool has been disposed . " , true , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "Connection ool has been disposed . " , true , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; boolean boolean0 = dBUniqueIndex0 . isIdentical ( ( DBObject ) dBPrimaryKeyConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 6 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "u" , false , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "u" , false , dBUniqueConstraint0 ) ; boolean boolean0 = dBUniqueIndex0 . isIdentical ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "" ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "" , false , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "" , false , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex ( "" , false , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; boolean boolean0 = dBUniqueIndex0 . isIdentical ( ( DBObject ) dBUniqueIndex1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test6 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Connection ool has been disposed . " ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "Connection ool has been disposed . " , true , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( "Connection ool has been disposed . " , true , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex ( "Connection ool has been disposed . " , true , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; DefaultDBTable defaultDBTable1 = new DefaultDBTable ( ) ; dBUniqueIndex0 . setTable ( ( DBTable ) defaultDBTable1 ) ; boolean boolean0 = dBUniqueIndex0 . isIdentical ( ( DBObject ) dBUniqueIndex1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "Mz1 & * 5" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "Mz1 & * 5" , dBPackage0 ) ; String string0 = dBProcedure0 . getOverload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOverload ( ) { return overload ; }
void test1 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "Mz1 & * 5" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "Mz1 & * 5" , dBPackage0 ) ; String string0 = dBProcedure0 . getObjectId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectId ( ) { return objectId ; }
void test2 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "Mz1 & * 5" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "Mz1 & * 5" , dBPackage0 ) ; String string0 = dBProcedure0 . getSubProgramId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubProgramId ( ) { return subProgramId ; }
void test3 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "'PATITIONS'" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "'PATITIONS'" , dBPackage0 ) ; boolean boolean0 = dBProcedure0 . isIdentical ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test4 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "wC4m" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "wC4m" , dBPackage0 ) ; boolean boolean0 = dBProcedure0 . isIdentical ( ( DBObject ) dBPackage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test5 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "wC4m" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "wC4m" , dBPackage0 ) ; DBProcedure dBProcedure1 = new DBProcedure ( "wC4m" , dBPackage0 ) ; dBProcedure0 . setObjectId ( "wC4m" ) ; boolean boolean0 = dBProcedure0 . isIdentical ( ( DBObject ) dBProcedure1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test6 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "M2H : y' | 3T" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "M2H : y' | 3T" , dBPackage0 ) ; DBProcedure dBProcedure1 = new DBProcedure ( "M2H : y' | 3T" , dBPackage0 ) ; dBProcedure0 . setObjectId ( "M2H : y' | 3T" ) ; dBProcedure0 . setSubProgramId ( "M2H : y' | 3T" ) ; dBProcedure1 . setObjectId ( "M2H : y' | 3T" ) ; boolean boolean0 = dBProcedure0 . isIdentical ( ( DBObject ) dBProcedure1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test7 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "'PATITIONS'" , ( DBSchema ) null ) ; DBProcedure dBProcedure0 = new DBProcedure ( "'PATITIONS'" , dBPackage0 ) ; DBProcedure dBProcedure1 = new DBProcedure ( "'PATITIONS'" , dBPackage0 ) ; dBProcedure0 . setOverload ( "'PATITIONS'" ) ; dBProcedure1 . setSubProgramId ( "'PATITIONS'" ) ; dBProcedure1 . setObjectId ( "'PATITIONS'" ) ; dBProcedure0 . setObjectId ( "'PATITIONS'" ) ; dBProcedure0 . setSubProgramId ( "'PATITIONS'" ) ; boolean boolean0 = dBProcedure0 . isIdentical ( ( DBObject ) dBProcedure1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test0 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "5C = UCchDP { > \"Rfq0G2" ) ; boolean boolean0 = dBSchema0 . isIdentical ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test1 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" ) ; TableContainer tableContainer1 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" ) ; boolean boolean0 = tableContainer1 . isIdentical ( ( DBObject ) tableContainer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test2 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "5C = UCchDP { > \"Rfq0G2" ) ; TableContainer tableContainer0 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" ) ; TableContainer tableContainer1 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" ) ; TableContainer tableContainer2 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" , ( CompositeDBObject < ? extends DBObject > ) tableContainer0 ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "5C = UCchDP { > \"Rfq0G2" , dBSchema0 ) ; tableContainer1 . addTable ( ( DBTable ) defaultDBTable0 ) ; boolean boolean0 = tableContainer0 . isIdentical ( ( DBObject ) tableContainer1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test3 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" ) ; TableContainer tableContainer1 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" ) ; TableContainer tableContainer2 = new TableContainer ( "5C = UCchDP { > \"Rfq0G2" , ( CompositeDBObject < ? extends DBObject > ) tableContainer0 ) ; boolean boolean0 = tableContainer1 . isIdentical ( ( DBObject ) tableContainer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test1 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( " + dQ~vvhEl8" ) ; DBTreeModel dBTreeModel0 = new DBTreeModel ( ( CompositeDBObject < ? > ) dBCatalog0 ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; DBObject dBObject0 = dBTreeModel0 . getParent ( ( DBObject ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBObject getParent ( DBObject child ) { return child . getOwner ( ) ; }
void test2 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( " + dQ~vvhEl8" ) ; DBTreeModel dBTreeModel0 = new DBTreeModel ( ( CompositeDBObject < ? > ) dBCatalog0 ) ; DBCatalog dBCatalog1 = ( DBCatalog ) dBTreeModel0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBObject getRoot ( ) { return database ; }
void test3 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( " + dQ~vvhEl8" ) ; DBTreeModel dBTreeModel0 = new DBTreeModel ( ( CompositeDBObject < ? > ) dBCatalog0 ) ; int int0 = dBTreeModel0 . getIndexOfChild ( ( DBObject ) dBCatalog0 , ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfChild ( DBObject parent , DBObject child ) { List < ? > components = ( ( CompositeDBObject < ? > ) parent ) . getComponents ( ) ; return components . indexOf ( child ) ; }
void test5 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "" ) ; DBTreeModel dBTreeModel0 = new DBTreeModel ( ( CompositeDBObject < ? > ) dBCatalog0 ) ; boolean boolean0 = dBTreeModel0 . isLeaf ( ( DBObject ) dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( DBObject node ) { return ! ( node instanceof CompositeDBObject ) ; }
void test6 ( ) throws Throwable { DBTreeModel dBTreeModel0 = new DBTreeModel ( ( CompositeDBObject < ? > ) null ) ; boolean boolean0 = dBTreeModel0 . isLeaf ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( DBObject node ) { return ! ( node instanceof CompositeDBObject ) ; }
void test0 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "" ) ; DBTrigger dBTrigger0 = new DBTrigger ( "" , dBSchema0 ) ; DBTrigger dBTrigger1 = new DBTrigger ( "" , dBSchema0 ) ; boolean boolean0 = dBTrigger0 . equals ( ( Object ) dBTrigger1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "" , ( CompositeDBObject < ? extends DBObject > ) null ) ; tableContainer0 . setDoc ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "default" ) ; DBSchema dBSchema0 = new DBSchema ( "default" , dBCatalog0 ) ; dBSchema0 . getDoc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test3 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "6266dVB\"n } } NWBC { - X8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test4 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; String string0 = defaultDatabase0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test5 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( " < kW" ) ; DBSchema dBSchema0 = new DBSchema ( " < kW" , dBCatalog0 ) ; DBSequence dBSequence0 = new DBSequence ( ( String ) null , dBSchema0 ) ; int int0 = dBSequence0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test6 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "aFyb1 ! cu" ) ; int int0 = tableContainer0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test7 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "aFyb1 ! cu" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; boolean boolean0 = dBCatalog0 . equals ( ( Object ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test8 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; boolean boolean0 = defaultDatabase0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test9 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "6266dVB\"n } } NWBC { - X8" ) ; boolean boolean0 = tableContainer0 . equals ( ( Object ) "6266dVB\"n } } NWBC { - X8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test10 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "default" ) ; DBSchema dBSchema0 = new DBSchema ( "default" , dBCatalog0 ) ; boolean boolean0 = dBSchema0 . equals ( ( Object ) dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test0 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "ylIRvsPX ) $d / e" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "ylIRvsPX ) $d / e" , "ylIRvsPX ) $d / e" , versionNumber0 ) ; defaultDatabase0 . setImportedChecks ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedChecks ( ) { return importedChecks ; }
void test1 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; defaultDatabase0 . setImportedUKs ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedUKs ( ) { return importedUKs ; }
void test2 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "lJ^ + u#J@x8U" , "lJ^ + u#J@x8U" , ( VersionNumber ) null ) ; String string0 = defaultDatabase0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) { return user ; }
void test3 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; boolean boolean0 = defaultDatabase0 . isImportedUKs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedUKs ( ) { return importedUKs ; }
void test4 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( "" ) ; defaultDatabase0 . removeCatalog ( dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableInclusionPattern ( ) { return tableInclusionPattern ; }
void test5 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; List < DBTable > list0 = defaultDatabase0 . getTables ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTable > getTables ( ) ; List < DBTable > getTables ( boolean recursive ) ; DBTable getTable ( String tableName ) ; }
void test6 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; defaultDatabase0 . setTableInclusionPattern ( " } 7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedSequences ( ) { return importedSequences ; }
void test7 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "_9R | . K73rF" , "_9R | . K73rF" , ( VersionNumber ) null ) ; defaultDatabase0 . setImportDate ( ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test8 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; VersionNumber versionNumber1 = defaultDatabase0 . getDatabaseProductVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VersionNumber getDatabaseProductVersion ( ) { return productVersion ; }
void test9 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "8eK / H jpA" , "8eK / H jpA" , ( VersionNumber ) null ) ; defaultDatabase0 . setTableExclusionPattern ( "8eK / H jpA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedChecks ( ) { return importedChecks ; }
void test10 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "_9R | . K73rF" , "_9R | . K73rF" , ( VersionNumber ) null ) ; Date date0 = defaultDatabase0 . getImportDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getImportDate ( ) { return importDate ; }
void test11 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , versionNumber0 ) ; String string0 = defaultDatabase0 . getTableExclusionPattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableExclusionPattern ( ) { return tableExclusionPattern ; }
void test12 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; boolean boolean0 = defaultDatabase0 . isImportedSequences ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedSequences ( ) { return importedSequences ; }
void test13 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "lJ^ + u#J@x8U" , "lJ^ + u#J@x8U" , ( VersionNumber ) null ) ; defaultDatabase0 . setImportedSequences ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedSequences ( ) { return importedSequences ; }
void test14 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , versionNumber0 ) ; String string0 = defaultDatabase0 . getDatabaseProductName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseProductName ( ) { return productName ; }
void test16 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; boolean boolean0 = defaultDatabase0 . isImportedIndexes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedIndexes ( ) { return importedIndexes ; }
void test17 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; String string0 = defaultDatabase0 . getTableInclusionPattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableInclusionPattern ( ) { return tableInclusionPattern ; }
void test18 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( " } 7" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( " } 7" , " } 7" , versionNumber0 ) ; DBCatalog dBCatalog0 = defaultDatabase0 . getCatalog ( " } 7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBCatalog getCatalog ( String catalogName ) { return catalogs . get ( catalogName ) ; }
void test19 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( "" ) ; defaultDatabase0 . addCatalog ( dBCatalog0 ) ; DBTable dBTable0 = defaultDatabase0 . getTable ( "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test20 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "_9R | . K73rF" , "_9R | . K73rF" , ( VersionNumber ) null ) ; defaultDatabase0 . setUser ( "_9R | . K73rF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test21 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "" ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , versionNumber0 ) ; boolean boolean0 = defaultDatabase0 . isImportedChecks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedChecks ( ) { return importedChecks ; }
void test22 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; defaultDatabase0 . setImportedIndexes ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportedIndexes ( ) { return importedIndexes ; }
void test24 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "_9R | . K73rF" , "_9R | . K73rF" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( ) ; defaultDatabase0 . addCatalog ( dBCatalog0 ) ; DBSchema dBSchema0 = new DBSchema ( "_9R | . K73rF" , dBCatalog0 ) ; DBSchema dBSchema1 = defaultDatabase0 . getSchema ( "_9R | . K73rF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBSchema getSchema ( String schemaName ) { for ( DBCatalog catalog : getCatalogs ( ) ) { DBSchema schema = catalog . getSchema ( schemaName ) ; if ( schema ! = null ) return schema ; } throw new ObjectNotFoundException ( "Table '" + name + "'" ) ; }
void test25 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "" , "" , ( VersionNumber ) null ) ; List < DBTable > list0 = defaultDatabase0 . getTables ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTable > getTables ( ) ; List < DBTable > getTables ( boolean recursive ) ; DBTable getTable ( String tableName ) ; }
void test26 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "M & \u01B5" , "M & \u01B5" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( "M & \u01B5" , ( Database ) defaultDatabase0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTable > getTables ( ) ; List < DBTable > getTables ( boolean recursive ) ; DBTable getTable ( String tableName ) ; }
void test27 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "M & \u01B5" , "M & \u01B5" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( "M & \u01B5" , ( Database ) defaultDatabase0 ) ; DBSchema dBSchema0 = new DBSchema ( "M & \u01B5" , dBCatalog0 ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "M & \u01B5" , dBSchema0 ) ; DefaultDBTable defaultDBTable1 = ( DefaultDBTable ) defaultDatabase0 . getTable ( "M & \u01B5" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test29 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "8eK / H jpA" , "8eK / H jpA" , ( VersionNumber ) null ) ; List < DBSequence > list0 = defaultDatabase0 . getSequences ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test30 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "$" , "$" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( "$" ) ; defaultDatabase0 . addCatalog ( dBCatalog0 ) ; DBSchema dBSchema0 = new DBSchema ( "$" , dBCatalog0 ) ; DBSequence dBSequence0 = new DBSequence ( "$" , dBSchema0 ) ; List < DBSequence > list0 = defaultDatabase0 . getSequences ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test31 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "_9R | . K73rF" , "_9R | . K73rF" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( ) ; defaultDatabase0 . addCatalog ( dBCatalog0 ) ; DBSchema dBSchema0 = new DBSchema ( "_9R | . K73rF" , dBCatalog0 ) ; List < DBTrigger > list0 = defaultDatabase0 . getTriggers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTrigger > getTriggers ( ) { List < DBTrigger > triggers = new ArrayList < DBTrigger > ( ) ; for ( DBCatalog catalog : getCatalogs ( ) ) for ( DBSchema schema : catalog . getSchemas ( ) ) triggers . addAll ( schema . getTriggers ( ) ) ; return triggers ; }
void test32 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "$" , "$" , ( VersionNumber ) null ) ; DBCatalog dBCatalog0 = new DBCatalog ( "$" ) ; defaultDatabase0 . addCatalog ( dBCatalog0 ) ; DBSchema dBSchema0 = new DBSchema ( "$" , dBCatalog0 ) ; List < DBPackage > list0 = defaultDatabase0 . getPackages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 1 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; String string0 = dBForeignKeyConstraint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 5 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "s00$" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; dBForeignKeyConstraint0 . getUpdateRule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 19 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( " - ~nP9 & / `" , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; FKChangeRule fKChangeRule0 = FKChangeRule . NO_ACTION ; dBForeignKeyConstraint0 . setUpdateRule ( fKChangeRule0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 5 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "s00$" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; dBForeignKeyConstraint0 . getDeleteRule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 10 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "v ] ( q { o = o3h = O$" , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; dBForeignKeyConstraint0 . getForeignKeyColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test6 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 1 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; FKChangeRule fKChangeRule0 = FKChangeRule . NO_ACTION ; dBForeignKeyConstraint0 . setDeleteRule ( fKChangeRule0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test7 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 9 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( ( String ) null , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; dBForeignKeyConstraint0 . columnReferencedBy ( ( String ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test8 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 9 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( ( String ) null , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; dBForeignKeyConstraint0 . columnReferencedBy ( "S" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test9 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 5 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "s00$" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test10 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 5 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test11 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 19 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( " - ~nP9 & / `" , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBForeignKeyConstraint0 . isIdentical ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test12 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 9 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( ( String ) null , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBForeignKeyConstraint0 . isIdentical ( ( DBObject ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test13 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ( String ) null ) ; String [ ] stringArray0 = new String [ 5 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "s00$" , false , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBForeignKeyConstraint0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test14 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 10 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( "v ] ( q { o = o3h = O$" , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBForeignKeyConstraint0 . equals ( ( Object ) "v ] ( q { o = o3h = O$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test0 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test1 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , stringArray0 ) ; boolean boolean0 = dBPrimaryKeyConstraint0 . isNameDeterministic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test2 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , stringArray0 ) ; DefaultDBTable defaultDBTable1 = ( DefaultDBTable ) dBPrimaryKeyConstraint0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test3 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; DBDataType dBDataType0 = DBDataType . getInstance ( 1716 , "Error converting to double . " ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "Error converting to double . " , ( DBTable ) defaultDBTable0 , dBDataType0 , ( Integer ) 1716 ) ; DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , "Error converting to double . " ) ; String string0 = dBNotNullConstraint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test4 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test5 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test6 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "Error converting to double . " , true , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test7 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "Error converting to double . " , ( DBCatalog ) null ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "Error converting to double . " , dBSchema0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , ( String ) null , true , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 10 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( "M ? L ( _ < . [ c" , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; int int0 = dBNonUniqueIndex0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 13 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( " ip < %^" , true , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex0 . isNameDeterministic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 10 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( "M ? L ( _ < . [ c" , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex0 . equals ( ( Object ) "M ? L ( _ < . [ c ( , , , , , , , , , ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 13 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( " ip < %^" , true , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 10 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( "M ? L ( _ < . [ c" , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; String string0 = dBNonUniqueIndex0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 2 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , " { fi7b#4N'T ~ ] ; = : " , false , stringArray0 ) ; DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex ( " { fi7b#4N'T ~ ] ; = : " , false , ( DBUniqueConstraint ) dBPrimaryKeyConstraint0 ) ; String string0 = dBUniqueIndex0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameDeterministic ( ) { return nameDeterministic ; }
void test0 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( ( - 59 ) , "BLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test2 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 27 , "NCLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJdbcType ( ) { return jdbcType ; }
void test3 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 27 , "NCLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return id . hashCode ( ) ; }
void test4 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 91 , "XMLType" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTemporal ( ) { return jdbcType = = Types . DATE | | jdbcType = = Types . TIMESTAMP | | name . contains ( "DATE" ) | | name . contains ( "TIME" ) ; }
void test5 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 2011 , "RBo~ , / ta < = 2J , r11 : & O0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test6 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 91 , "XMLType" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test7 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( "BLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLOB ( ) { return jdbcType = = Types . BLOB | | jdbcType = = Types . CLOB | | jdbcType = = Types . NCLOB | | name . endsWith ( "CLOB" ) | | "BLOB" . equals ( name ) ; }
void test8 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( "CLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLOB ( ) { return jdbcType = = Types . BLOB | | jdbcType = = Types . CLOB | | jdbcType = = Types . NCLOB | | name . endsWith ( "CLOB" ) | | "BLOB" . equals ( name ) ; }
void test9 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 2011 , "RBo~ , / ta < = 2J , r11 : & O0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLOB ( ) { return jdbcType = = Types . BLOB | | jdbcType = = Types . CLOB | | jdbcType = = Types . NCLOB | | name . endsWith ( "CLOB" ) | | "BLOB" . equals ( name ) ; }
void test10 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 26 , "CLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test11 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "7MP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test12 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 26 , "CLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJdbcType ( ) { return jdbcType ; }
void test13 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 27 , "NCLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAlpha ( ) { if ( ALPHA_TYPES . contains ( jdbcType ) ) / / standard types return true ; return name . endsWith ( "VARCHAR2" ) | | name . endsWith ( "CLOB" ) ; / / fixes for Oracle }
void test14 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( ( - 2018 ) , "NVARCHAR2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test15 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "7MP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAlpha ( ) { if ( ALPHA_TYPES . contains ( jdbcType ) ) / / standard types return true ; return name . endsWith ( "VARCHAR2" ) | | name . endsWith ( "CLOB" ) ; / / fixes for Oracle }
void test16 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 91 , "XMLType" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTemporal ( ) { return jdbcType = = Types . DATE | | jdbcType = = Types . TIMESTAMP | | name . contains ( "DATE" ) | | name . contains ( "TIME" ) ; }
void test17 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( ( - 1757 ) , "TIME" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test18 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( "DATETIME" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTemporal ( ) { return jdbcType = = Types . DATE | | jdbcType = = Types . TIMESTAMP | | name . contains ( "DATE" ) | | name . contains ( "TIME" ) ; }
void test19 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "DATETIME" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test20 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( ( - 2018 ) , "NVARCHAR2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test21 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 0 , "7MP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAlpha ( ) { if ( ALPHA_TYPES . contains ( jdbcType ) ) / / standard types return true ; return name . endsWith ( "VARCHAR2" ) | | name . endsWith ( "CLOB" ) ; / / fixes for Oracle }
void test22 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( "CLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumber ( ) { return NUMBER_TYPES . contains ( jdbcType ) ; }
void test23 ( ) throws Throwable { DBDataType dBDataType0 = DBDataType . getInstance ( 27 , "NCLOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "g`On" , ( DBSchema ) null ) ; String [ ] stringArray0 = new String [ 18 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( "g`On" , true , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DBNonUniqueIndex dBNonUniqueIndex1 = new DBNonUniqueIndex ( "g`On" , true , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex1 . isIdentical ( ( DBObject ) dBNonUniqueIndex0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "g`On" , ( DBSchema ) null ) ; String [ ] stringArray0 = new String [ 18 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( "g`On" , true , ( DBTable ) defaultDBTable0 , stringArray0 ) ; String string0 = dBNonUniqueIndex0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "g`On" , ( DBSchema ) null ) ; String [ ] stringArray0 = new String [ 18 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( "g`On" , true , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex0 . isIdentical ( ( DBObject ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 12 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex0 . isIdentical ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 12 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DBNonUniqueIndex dBNonUniqueIndex1 = new DBNonUniqueIndex ( "" , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; boolean boolean0 = dBNonUniqueIndex1 . isIdentical ( ( DBObject ) dBNonUniqueIndex0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 12 ] ; DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; DBNonUniqueIndex dBNonUniqueIndex1 = new DBNonUniqueIndex ( ( String ) null , false , ( DBTable ) defaultDBTable0 , stringArray0 ) ; dBNonUniqueIndex0 . addColumnName ( ( String ) null ) ; boolean boolean0 = dBNonUniqueIndex0 . isIdentical ( ( DBObject ) dBNonUniqueIndex1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test0 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; dBCatalog0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test2 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "DROP ALIAS READ_CLOB_DB ; " ) ; DBSchema dBSchema0 = new DBSchema ( "DROP ALIAS READ_CLOB_DB ; " , dBCatalog0 ) ; dBCatalog0 . removeSchema ( dBSchema0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test3 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "DROP ALIAS READ_CLOB_DB ; " ) ; dBCatalog0 . setDoc ( "DROP ALIAS READ_CLOB_DB ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test4 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; DBSchema dBSchema0 = new DBSchema ( ( String ) null , dBCatalog0 ) ; Database database0 = dBSchema0 . getDatabase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Database getDatabase ( ) { return ( Database ) getOwner ( ) ; }
void test5 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "DROP ALIAS READ_CLOB_DB ; " ) ; String string0 = dBCatalog0 . getDoc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test6 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "DROP ALIAS READ_CLOB_DB ; " ) ; DBSchema dBSchema0 = dBCatalog0 . getSchema ( "DROP ALIAS READ_CLOB_DB ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBSchema getSchema ( String schemaName ) { for ( DBCatalog catalog : getCatalogs ( ) ) { DBSchema schema = catalog . getSchema ( schemaName ) ; if ( schema ! = null ) return schema ; } throw new ObjectNotFoundException ( "Table '" + name + "'" ) ; }
void test7 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTable > getTables ( ) ; List < DBTable > getTables ( boolean recursive ) ; DBTable getTable ( String tableName ) ; }
void test8 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "DROP ALIAS READ_CLOB_DB ; " ) ; DBSchema dBSchema0 = new DBSchema ( "DROP ALIAS READ_CLOB_DB ; " , dBCatalog0 ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "DROP ALIAS READ_CLOB_DB ; " ) ; dBSchema0 . addTable ( ( DBTable ) defaultDBTable0 ) ; DefaultDBTable defaultDBTable1 = ( DefaultDBTable ) dBCatalog0 . getTable ( ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test9 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( ) ; DBSchema dBSchema0 = new DBSchema ( ( String ) null , dBCatalog0 ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "W@ . 2 ! utA" , dBSchema0 ) ; DefaultDBTable defaultDBTable1 = ( DefaultDBTable ) dBCatalog0 . getTable ( "W@ . 2 ! utA" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test10 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( "updateObject ( " ) ; DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "updateObject ( " , "updateObject ( " , versionNumber0 ) ; DBCatalog dBCatalog0 = new DBCatalog ( "updateObject ( " , ( Database ) defaultDatabase0 ) ; DBSchema dBSchema0 = new DBSchema ( ( String ) null , dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBSequence > getSequences ( ) { return getSequences ( true ) ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "setFetchDirection" , false , ( DBTable ) defaultDBTable0 , "setFetchDirection" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "ml" , false , "ml" , "ml" ) ; String string0 = dBCheckConstraint0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test2 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "4" , true , "4" , "RS" ) ; boolean boolean0 = dBCheckConstraint0 . isEquivalent ( dBCheckConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test3 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "setNClob ( Ktriny , Reader ) " , true , "setNClob ( Ktriny , Reader ) " , "setNClob ( Ktriny , Reader ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test4 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "4" , true , "4" , "RS" ) ; DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint ( "" , false , "4" , "4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "setFetchDirection" , false , ( DBTable ) defaultDBTable0 , "setFetchDirection" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test6 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "4" , true , "4" , "RS" ) ; DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint ( "4" , false , "4" , "4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test7 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "setNClob ( Ktriny , Reader ) " , true , "setNClob ( Ktriny , Reader ) " , "setNClob ( Ktriny , Reader ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test8 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "setFetchDirection" , false , ( DBTable ) defaultDBTable0 , "setFetchDirection" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test9 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "4" , true , "4" , "RS" ) ; DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint ( "" , false , "4" , "4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test10 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( ( String ) null , true , ( String ) null , "DROP_SEQUENCE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test11 ( ) throws Throwable { DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint ( "4" , true , "4" , "RS" ) ; String string0 = dBCheckConstraint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test0 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "register" , ( DBSchema ) null ) ; String string0 = dBPackage0 . getObjectType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test1 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( " ! # ] ] = r" , ( DBSchema ) null ) ; String string0 = dBPackage0 . getObjectId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectId ( ) { return objectId ; }
void test2 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "A' ffEWZqV & " ) ; DBPackage dBPackage0 = new DBPackage ( "A' ffEWZqV & " , dBSchema0 ) ; String string0 = dBPackage0 . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus ( ) { return status ; }
void test3 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "A' ffEWZqV & " ) ; DBPackage dBPackage0 = new DBPackage ( "A' ffEWZqV & " , dBSchema0 ) ; List < DBProcedure > list0 = dBPackage0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test4 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "VL ; [ ir" , ( DBSchema ) null ) ; String string0 = dBPackage0 . getDataObjectId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataObjectId ( ) { return dataObjectId ; }
void test5 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "register" , ( DBSchema ) null ) ; OrderedNameMap < DBProcedure > orderedNameMap0 = new OrderedNameMap < DBProcedure > ( ( - 10 ) ) ; dBPackage0 . setProcedures ( orderedNameMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubObjectName ( ) { return subObjectName ; }
void test6 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "VL ; [ ir" , ( DBSchema ) null ) ; String string0 = dBPackage0 . getSubObjectName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubObjectName ( ) { return subObjectName ; }
void test7 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( " } g2bH\"P7 [ < ? V ] . 33" , ( DBSchema ) null ) ; List < DBProcedure > list0 = dBPackage0 . getProcedures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test8 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "VL ; [ ir" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test9 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( " } g2bH\"P7 [ < ? V ] . 33" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test10 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test11 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( " } g2bH\"P7 [ < ? V ] . 33" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test12 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "J / MAzfg ] j + s } [ . " , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test13 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test14 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "J / MAzfg ] j + s } [ . " , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test15 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( " ! # ] ] = r" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test16 ( ) throws Throwable { DBPackage dBPackage0 = new DBPackage ( "register" , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test0 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "KzKh8 ( ] %M . 'ye ( Z@Kw" ) ; List < DBSequence > list0 = dBSchema0 . getSequences ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test1 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "KzKh8 ( ] %M . 'ye ( Z@Kw" ) ; List < DBTable > list0 = dBSchema0 . getTables ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test2 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "" ) ; DBSchema dBSchema0 = new DBSchema ( "'9KE + 'svKq'Wr6BXlf" , dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test3 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "" ) ; DBCatalog dBCatalog0 = new DBCatalog ( "" ) ; dBSchema0 . setCatalog ( dBCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test4 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( " ] ! + i < '#gQ6" ) ; DefaultDBTable defaultDBTable0 = new DefaultDBTable ( " ] ! + i < '#gQ6" , dBSchema0 ) ; dBSchema0 . removeTable ( ( DBTable ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countProviders ( ) { return getForeignKeyConstraints ( ) . size ( ) ; }
void test5 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "" ) ; DBTrigger dBTrigger0 = new DBTrigger ( "" , dBSchema0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTriggerType ( ) { return triggerType ; }
void test6 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( " ] ! + i < '#gQ6" ) ; List < DBTrigger > list0 = dBSchema0 . getTriggers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test7 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( " ] ! + i < '#gQ6" ) ; DBSequence dBSequence0 = new DBSequence ( " ] ! + i < '#gQ6" , " ] ! + i < '#gQ6" , " ] ! + i < '#gQ6" ) ; dBSchema0 . addSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCatalogName ( ) { return catalogName ; }
void test8 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( " ] ! + i < '#gQ6" ) ; DBPackage dBPackage0 = new DBPackage ( " ] ! + i < '#gQ6" , dBSchema0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test10 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "" ) ; List < DBPackage > list0 = dBSchema0 . getPackages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBPackage > getPackages ( ) { List < DBPackage > packages = new ArrayList < DBPackage > ( ) ; for ( DBCatalog catalog : getCatalogs ( ) ) for ( DBSchema schema : catalog . getSchemas ( ) ) packages . addAll ( schema . getPackages ( ) ) ; return packages ; }
void test11 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "KzKh8 ( ] %M . 'ye ( Z@Kw" ) ; List < DBObject > list0 = dBSchema0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test12 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( " ] ! + i < '#gQ6" ) ; DBTable dBTable0 = dBSchema0 . getTable ( " ] ! + i < '#gQ6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test0 ( ) throws Throwable { DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "" , ( DBTable ) null , 741 , "w" ) ; DBTable dBTable0 = defaultDBColumn0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn ( "pQ_gI * pn$HDW * ls" , ( DBTable ) defaultDBTable0 , ( - 1807 ) , "pQ_gI * pn$HDW * ls" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVersionColumn ( ) ; void setVersionColumn ( boolean versionColumn ) ; DBForeignKeyConstraint getForeignKeyConstraint ( ) ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; String string0 = dBRow0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( " . " ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; String [ ] stringArray0 = new String [ 1 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , " . " , false , stringArray0 ) ; dBRow0 . setPKValue ( ( Object ) "TRANSACTION_READ_COMMITTED" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( " VIEW " ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; DefaultDBTable defaultDBTable1 = ( DefaultDBTable ) dBRow0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( " . " ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; String [ ] stringArray0 = new String [ 1 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , " . " , false , stringArray0 ) ; Object object0 = dBRow0 . getPKValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getPKValue ( ) { String [ ] columnNames = table . getPKColumnNames ( ) ; if ( columnNames . length = = 1 ) return getCellValue ( columnNames [ 0 ] ) ; else return getCellValues ( columnNames ) ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "'B * g ] 6to * d ? ! rz" ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; Map < String , Object > map0 = dBRow0 . getCells ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test6 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( " VIEW " ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; Object [ ] objectArray0 = dBRow0 . getPKValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getPKValues ( ) { return getCellValues ( table . getPKColumnNames ( ) ) ; }
void test7 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( " VIEW " ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; String [ ] stringArray0 = new String [ 9 ] ; DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint ( " VIEW " , true , ( DBTable ) defaultDBTable0 , stringArray0 , ( DBTable ) defaultDBTable0 , stringArray0 ) ; Object object0 = dBRow0 . getFKValue ( dBForeignKeyConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getFKValue ( DBForeignKeyConstraint fk ) { String [ ] columnNames = fk . getColumnNames ( ) ; if ( columnNames . length = = 1 ) return getCellValue ( columnNames [ 0 ] ) ; else return getCellValues ( columnNames ) ; }
void test11 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "IU86E } 01BI\"CZ" ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; Object object0 = dBRow0 . getPKValue ( ) ; dBRow0 . setPKValue ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test12 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; DBRow dBRow0 = new DBRow ( ( DBTable ) defaultDBTable0 ) ; String [ ] stringArray0 = new String [ 1 ] ; dBRow0 . setCellValues ( stringArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "'COM = %MENT'" ) ; String [ ] stringArray0 = new String [ 13 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "'COM = %MENT'" , false , stringArray0 ) ; String string0 = dBUniqueConstraint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "'COM = %MENT'" ) ; String [ ] stringArray0 = new String [ 13 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "'COM = %MENT'" , false , stringArray0 ) ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "'COM = %MENT'" , false , stringArray0 ) ; boolean boolean0 = dBUniqueConstraint0 . isIdentical ( ( DBObject ) dBPrimaryKeyConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "'COM = %MENT'" ) ; String [ ] stringArray0 = new String [ 13 ] ; stringArray0 [ 0 ] = "'COM = %MENT'" ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "'COM = %MENT'" , false , stringArray0 ) ; dBPrimaryKeyConstraint0 . addColumnName ( "'COM = %MENT'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test3 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "0A" , true , stringArray0 ) ; dBPrimaryKeyConstraint0 . addColumnName ( "0A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test4 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( "'COM = %MENT'" ) ; String [ ] stringArray0 = new String [ 13 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "'COM = %MENT'" , false , stringArray0 ) ; boolean boolean0 = dBPrimaryKeyConstraint0 . isIdentical ( ( DBObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test5 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "0A" , true , stringArray0 ) ; boolean boolean0 = dBPrimaryKeyConstraint0 . isIdentical ( ( DBObject ) defaultDBTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test6 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 15 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "" , false , stringArray0 ) ; DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , ( String ) null , false , stringArray0 ) ; boolean boolean0 = dBUniqueConstraint0 . isIdentical ( ( DBObject ) dBUniqueConstraint1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test7 ( ) throws Throwable { DefaultDBTable defaultDBTable0 = new DefaultDBTable ( ) ; String [ ] stringArray0 = new String [ 1 ] ; DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint ( ( DBTable ) defaultDBTable0 , "0A" , true , stringArray0 ) ; String [ ] stringArray1 = new String [ 3 ] ; DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint ( ( DBTable ) defaultDBTable0 , "0A" , true , stringArray1 ) ; boolean boolean0 = dBUniqueConstraint0 . isIdentical ( ( DBObject ) dBPrimaryKeyConstraint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( " = " , ( DBSchema ) null ) ; String string0 = dBTrigger0 . getTriggeringEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTriggeringEvent ( ) { return triggeringEvent ; }
void test1 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( " = " , ( DBSchema ) null ) ; dBTrigger0 . setTableName ( " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableOwner ( ) { return tableOwner ; }
void test2 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( " = " , ( DBSchema ) null ) ; dBTrigger0 . setReferencingNames ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getActionType ( ) { return actionType ; }
void test3 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; dBTrigger0 . setTableOwner ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test4 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; dBTrigger0 . setDescription ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; String string0 = dBTrigger0 . getActionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getActionType ( ) { return actionType ; }
void test6 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; dBTrigger0 . setColumnName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDoc ( ) { return doc ; }
void test7 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; dBTrigger0 . setWhenClause ( "setObjet ( String , Object ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test8 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "`" ) ; DBSchema dBSchema0 = new DBSchema ( "`" , dBCatalog0 ) ; DBTrigger dBTrigger0 = new DBTrigger ( "`" , dBSchema0 ) ; String string0 = dBTrigger0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test9 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; String string0 = dBTrigger0 . getTriggerType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTriggerType ( ) { return triggerType ; }
void test10 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( " = " , ( DBSchema ) null ) ; String string0 = dBTrigger0 . getColumnName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { return columnName ; }
void test11 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; String string0 = dBTrigger0 . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus ( ) { return status ; }
void test12 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; String string0 = dBTrigger0 . getTableOwner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableOwner ( ) { return tableOwner ; }
void test13 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; String string0 = dBTrigger0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test14 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; String string0 = dBTrigger0 . getBaseObjectType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseObjectType ( ) { return baseObjectType ; }
void test15 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; String string0 = dBTrigger0 . getWhenClause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWhenClause ( ) { return whenClause ; }
void test16 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; String string0 = dBTrigger0 . getReferencingNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReferencingNames ( ) { return referencingNames ; }
void test17 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( "" , ( DBSchema ) null ) ; String string0 = dBTrigger0 . getTriggerBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTriggerBody ( ) { return triggerBody ; }
void test18 ( ) throws Throwable { DBCatalog dBCatalog0 = new DBCatalog ( "`" ) ; DBSchema dBSchema0 = new DBSchema ( "`" , dBCatalog0 ) ; DBTrigger dBTrigger0 = new DBTrigger ( "`" , dBSchema0 ) ; boolean boolean0 = dBTrigger0 . isIdentical ( ( DBObject ) dBSchema0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test19 ( ) throws Throwable { DBTrigger dBTrigger0 = new DBTrigger ( " = " , ( DBSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test20 ( ) throws Throwable { DBSchema dBSchema0 = new DBSchema ( "setObjet ( String , Object ) " ) ; DBTrigger dBTrigger0 = new DBTrigger ( "setObjet ( String , Object ) " , dBSchema0 ) ; dBTrigger0 . setTriggeringEvent ( "setObjet ( String , Object ) " ) ; dBTrigger0 . setStatus ( "setObjet ( String , Object ) " ) ; dBTrigger0 . setBaseObjectType ( "setObjet ( String , Object ) " ) ; dBTrigger0 . setTriggerBody ( "setObjet ( String , Object ) " ) ; dBTrigger0 . setActionType ( "setObjet ( String , Object ) " ) ; dBTrigger0 . setTriggerType ( "setObjet ( String , Object ) " ) ; boolean boolean0 = dBTrigger0 . isIdentical ( ( DBObject ) dBTrigger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdentical ( DBObject other ) { if ( this = = other ) return true ; if ( other = = null | | other . getClass ( ) ! = this . getClass ( ) ) return false ; DBPackage that = ( DBPackage ) other ; return NullSafeComparator . equals ( this . subObjectName , that . subObjectName ) & & this . objectId . equals ( that . objectId ) & & NullSafeComparator . equals ( this . dataObjectId , that . dataObjectId ) & & this . objectType . equals ( that . objectType ) & & this . status . equals ( that . status ) ; }
void test1 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "YPaf1" , "YPaf1" , ( VersionNumber ) null ) ; TableContainer tableContainer0 = new TableContainer ( "YPaf1" , ( CompositeDBObject < ? extends DBObject > ) defaultDatabase0 ) ; List < DBTable > list0 = tableContainer0 . support . getTables ( ) ; List < DBTable > list1 = tableContainer0 . getTables ( true , list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTable > getTables ( ) ; List < DBTable > getTables ( boolean recursive ) ; DBTable getTable ( String tableName ) ; }
void test2 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "" ) ; DBTable dBTable0 = tableContainer0 . getTable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getTable ( String tableName ) ; }
void test4 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( ( String ) null ) ; List < ContainerComponent > list0 = tableContainer0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test5 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "" ) ; TableContainer tableContainer1 = new TableContainer ( "" , ( CompositeDBObject < ? extends DBObject > ) tableContainer0 ) ; List < DBSequence > list0 = tableContainer0 . getSequences ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test6 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "QG" ) ; List < DBTable > list0 = tableContainer0 . getTables ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . size_return size ( ) throws RecognitionException { SQLParser . size_return retval = new SQLParser . size_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal38 = null ; Token INT39 = null ; Token char_literal42 = null ; SQLParser . size_uom_return size_uom40 = null ; SQLParser . fractionDigits_return fractionDigits41 = null ; Object char_literal38_tree = null ; Object INT39_tree = null ; Object char_literal42_tree = null ; RewriteRuleTokenStream stream_67 = new RewriteRuleTokenStream ( adaptor , "token 67" ) ; RewriteRuleTokenStream stream_66 = new RewriteRuleTokenStream ( adaptor , "token 66" ) ; RewriteRuleTokenStream stream_INT = new RewriteRuleTokenStream ( adaptor , "token INT" ) ; RewriteRuleSubtreeStream stream_fractionDigits = new RewriteRuleSubtreeStream ( adaptor , "rule fractionDigits" ) ; RewriteRuleSubtreeStream stream_size_uom = new RewriteRuleSubtreeStream ( adaptor , "rule size_uom" ) ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 7 : ( ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 9 : ' ( ' INT ( size_uom ) ? ( fractionDigits ) ? ' ) ' { char_literal38 = ( Token ) match ( input , 66 , FOLLOW_66_in_size370 ) ; stream_66 . add ( char_literal38 ) ; INT39 = ( Token ) match ( input , INT , FOLLOW_INT_in_size372 ) ; stream_INT . add ( INT39 ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : ( size_uom ) ? int alt9 = 2 ; int LA9_0 = input . LA ( 1 ) ; if ( ( ( LA9_0 > = BYTE & & LA9_0 < = CHAR ) ) ) { alt9 = 1 ; } switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 17 : size_uom { pushFollow ( FOLLOW_size_uom_in_size374 ) ; size_uom40 = size_uom ( ) ; state . _fsp - - ; stream_size_uom . add ( size_uom40 . getTree ( ) ) ; } break ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : ( fractionDigits ) ? int alt10 = 2 ; int LA10_0 = input . LA ( 1 ) ; if ( ( LA10_0 = = 68 ) ) { alt10 = 1 ; } switch ( alt10 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 27 : fractionDigits { pushFollow ( FOLLOW_fractionDigits_in_size377 ) ; fractionDigits41 = fractionDigits ( ) ; state . _fsp - - ; stream_fractionDigits . add ( fractionDigits41 . getTree ( ) ) ; } break ; } char_literal42 = ( Token ) match ( input , 67 , FOLLOW_67_in_size380 ) ; stream_67 . add ( char_literal42 ) ; / / AST REWRITE / / elements : fractionDigits , size_uom , INT / / token labels : / / rule labels : retval / / token list labels : / / rule list labels : / / wildcard labels : retval . tree = root_0 ; RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream ( adaptor , "rule retval" , retval ! = null ? retval . tree : null ) ; root_0 = ( Object ) adaptor . nil ( ) ; / / 124 : 47 : - > ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 50 : ^ ( SIZE INT ( size_uom ) ? ( fractionDigits ) ? ) { Object root_1 = ( Object ) adaptor . nil ( ) ; root_1 = ( Object ) adaptor . becomeRoot ( ( Object ) adaptor . create ( SIZE , "SIZE" ) , root_1 ) ; adaptor . addChild ( root_1 , stream_INT . nextNode ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 61 : ( size_uom ) ? if ( stream_size_uom . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_size_uom . nextTree ( ) ) ; } stream_size_uom . reset ( ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 124 : 71 : ( fractionDigits ) ? if ( stream_fractionDigits . hasNext ( ) ) { adaptor . addChild ( root_1 , stream_fractionDigits . nextTree ( ) ) ; } stream_fractionDigits . reset ( ) ; adaptor . addChild ( root_0 , root_1 ) ; } } retval . tree = root_0 ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test7 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "YPaf1" , "YPaf1" , ( VersionNumber ) null ) ; TableContainer tableContainer0 = new TableContainer ( "YPaf1" , ( CompositeDBObject < ? extends DBObject > ) defaultDatabase0 ) ; List < DBTable > list0 = tableContainer0 . getTables ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DBTable > getTables ( ) ; List < DBTable > getTables ( boolean recursive ) ; DBTable getTable ( String tableName ) ; }
void test8 ( ) throws Throwable { DefaultDatabase defaultDatabase0 = new DefaultDatabase ( "YPaf1" , "YPaf1" , ( VersionNumber ) null ) ; TableContainer tableContainer0 = new TableContainer ( "YPaf1" , ( CompositeDBObject < ? extends DBObject > ) defaultDatabase0 ) ; tableContainer0 . setOwner ( ( CompositeDBObject < ? > ) defaultDatabase0 ) ; DBSchema dBSchema0 = tableContainer0 . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBSchema getSchema ( String schemaName ) { for ( DBCatalog catalog : getCatalogs ( ) ) { DBSchema schema = catalog . getSchema ( schemaName ) ; if ( schema ! = null ) return schema ; } throw new ObjectNotFoundException ( "Table '" + name + "'" ) ; }
void test9 ( ) throws Throwable { TableContainer tableContainer0 = new TableContainer ( "" ) ; DBSchema dBSchema0 = new DBSchema ( "" ) ; tableContainer0 . setOwner ( ( CompositeDBObject < ? > ) dBSchema0 ) ; DBCatalog dBCatalog0 = tableContainer0 . getCatalog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBCatalog getCatalog ( String catalogName ) { return catalogs . get ( catalogName ) ; }
void test0 ( ) throws Throwable { JDBCConnectData jDBCConnectData0 = new JDBCConnectData ( "ALTER TABLpE " , "ALTER TABLpE " , "ALTER TABLpE " , "ALTER TABLpE " ) ; JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( jDBCConnectData0 ) ; CachingDBImporter cachingDBImporter0 = new CachingDBImporter ( ( DBMetaDataImporter ) jDBCDBImporter0 , "ALTER TABLpE " ) ; File file0 = CachingDBImporter . getCacheFile ( "ALTER TABLpE " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Database readCachedData ( File cacheFile ) throws ConnectFailedException , ImportFailedException { LOGGER . info ( "Reading cached database meta data from file " + cacheFile . getPath ( ) ) ; try { return new XMLModelImporter ( cacheFile ) . importDatabase ( ) ; } catch ( Exception e ) { LOGGER . info ( "Error reading cache file , reparsing database" , e ) ; return importFreshData ( cacheFile ) ; } }
void test0 ( ) throws Throwable { File file0 = FileUtil . canonicalFile ( "Lmu > 1rs" ) ; XMLModelExporter xMLModelExporter0 = new XMLModelExporter ( file0 ) ; String [ ] stringArray0 = new String [ 12 ] ; RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted ( "Lmu > 1rs" , "Lmu > 1rs" , "Lmu > 1rs" , true , "Lmu > 1rs" ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) rowOutputTextQuoted0 ) ; SimpleXMLWriter simpleXMLWriter0 = new SimpleXMLWriter ( ( OutputStream ) objectOutputStream0 , "Lmu > 1rs" , true ) ; xMLModelExporter0 . writeColumnGroup ( stringArray0 , simpleXMLWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeColumnGroup ( String [ ] pkColumnNames , SimpleXMLWriter writer ) throws SAXException { writer . startElement ( "columns" ) ; for ( String pkColumnName : pkColumnNames ) { AttributesImpl colAtts = createAttributes ( "name" , pkColumnName ) ; writer . startElement ( "column" , colAtts ) ; writer . endElement ( "column" ) ; } writer . endElement ( "columns" ) ; }
void test0 ( ) throws Throwable { ImportedKey importedKey0 = new ImportedKey ( ) ; List < String > list0 = importedKey0 . getForeignKeyColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getForeignKeyColumnNames ( ) { return fkColumnNames ; }
void test1 ( ) throws Throwable { ImportedKey importedKey0 = new ImportedKey ( ) ; importedKey0 . addForeignKeyColumn ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addForeignKeyColumn ( String foreignKeyColumnName , String targetColumnName ) { foreignKeyColumnNames . add ( foreignKeyColumnName ) ; refereeColumnNames . add ( targetColumnName ) ; }
void test2 ( ) throws Throwable { ImportedKey importedKey0 = new ImportedKey ( ) ; DBTable dBTable0 = importedKey0 . getPkTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getPkTable ( ) { return pkTable ; }
void test3 ( ) throws Throwable { ImportedKey importedKey0 = new ImportedKey ( ) ; String string0 = importedKey0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test4 ( ) throws Throwable { ImportedKey importedKey0 = new ImportedKey ( ) ; List < String > list0 = importedKey0 . getRefereeColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getRefereeColumnNames ( ) { return refereeColumnNames ; }
void test0 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( " in class " , "" , " in class " , " in class " , " in class " , " in class " , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setImportingSequences ( boolean importingSequences ) { this . importingSequences = importingSequences ; }
void test1 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( ( Connection ) null , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JDBCDBImporter ( String environment ) { this ( DBUtil . getConnectData ( environment ) ) ; }
void test2 ( ) throws Throwable { JDBCConnectData jDBCConnectData0 = new JDBCConnectData ( "yo" , "yo" , "yo" , "yo" , "yo" , "yo" ) ; JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( jDBCConnectData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCatalogName ( String catalogName ) { this . catalogName = catalogName ; }
void test3 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setImportingUKs ( boolean importingUKs ) { this . importingUKs = importingUKs ; }
void test4 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSchemaName ( String schemaName ) { this . schemaName = schemaName ; }
void test5 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Database importDatabase ( ) throws ConnectFailedException , ImportFailedException ; }
void test6 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setImportingChecks ( boolean importingChecks ) { this . importingChecks = importingChecks ; }
void test7 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportingIndexes ( ) { return importingIndexes ; }
void test8 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( " in class " , "" , " in class " , " in class " , " in class " , " in class " , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setImportingTriggers ( boolean importingTriggers ) { this . importingTriggers = importingTriggers ; }
void test9 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( " in class " , "" , " in class " , " in class " , " in class " , " in class " , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseProductName ( ) { return productName ; }
void test10 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( Connection connection ) { if ( connection = = null ) return ; try { connection . close ( ) ; } catch ( SQLException e ) { LOGGER . error ( "Error closing connection" , e ) ; } }
void test11 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportingPackages ( ) { return importingPackages ; }
void test12 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "pYC" , "pYC" , "pYC" , "pYC" , "pYC" , "pYC" , "pYC" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setImportingPackages ( boolean importingPackages ) { this . importingPackages = importingPackages ; }
void test14 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportingIndexes ( ) { return importingIndexes ; }
void test15 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , "J * > 3Bx\" : Hk : Y'3\"hx" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test16 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JDBCDBImporter ( String environment ) { this ( DBUtil . getConnectData ( environment ) ) ; }
void test17 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "pYC" , "pYC" , "pYC" , "pYC" , "pYC" , "pYC" , "pYC" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImportingPackages ( ) { return importingPackages ; }
void test18 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" , "MqYzn > 4Eo : : \"o_2ks" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFaultTolerant ( boolean faultTolerant ) { this . errorHandler = new ErrorHandler ( getClass ( ) . getName ( ) , ( faultTolerant ? Level . warn : Level . error ) ) ; }
void test19 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Database importDatabase ( ) throws ConnectFailedException , ImportFailedException ; }
void test20 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "ug / p\"Eu@vJ7j6 H / D" , "ug / p\"Eu@vJ7j6 H / D" , "ug / p\"Eu@vJ7j6 H / D" , "ug / p\"Eu@vJ7j6 H / D" , "ug / p\"Eu@vJ7j6 H / D" , "ug / p\"Eu@vJ7j6 H / D" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIncludeTables ( String includeTables ) { this . includeTables = ( StringUtil . isEmpty ( includeTables ) ? null : Pattern . compile ( includeTables ) ) ; }
void test21 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( " in class " , "" , " in class " , " in class " , " in class " , " in class " , "" , false ) ; jDBCDBImporter0 . setIncludeTables ( "" ) ; JDBCDBImporter . TableNameFilter jDBCDBImporter_TableNameFilter0 = jDBCDBImporter0 . new TableNameFilter ( ) ; boolean boolean0 = jDBCDBImporter_TableNameFilter0 . accept ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIncludeTables ( String includeTables ) { this . includeTables = ( StringUtil . isEmpty ( includeTables ) ? null : Pattern . compile ( includeTables ) ) ; }
void test22 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( " in class " , "" , " in class " , " in class " , " in class " , " in class " , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setExcludeTables ( String excludeTables ) { this . excludeTables = ( StringUtil . isEmpty ( excludeTables ) ? null : Pattern . compile ( excludeTables ) ) ; }
void test23 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setExcludeTables ( String excludeTables ) { this . excludeTables = ( StringUtil . isEmpty ( excludeTables ) ? null : Pattern . compile ( excludeTables ) ) ; }
void test24 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , "t = ~p8rb . " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultDBTable importTable ( DBCatalog catalog , DBSchema schema , String tableName , String remarks ) { DefaultDBTable table = ( DefaultDBTable ) createTable ( catalog , schema , tableName , remarks , false ) ; importTableDetails ( table ) ; return table ; }
void test25 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "b$" , "b$" , "b$" , "b$" , "b$" , "b$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JDBCDBImporter ( String environment ) { this ( DBUtil . getConnectData ( environment ) ) ; }
void test26 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( " in class " , "" , " in class " , " in class " , " in class " , " in class " , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setExcludeTables ( String excludeTables ) { this . excludeTables = ( StringUtil . isEmpty ( excludeTables ) ? null : Pattern . compile ( excludeTables ) ) ; }
void test1 ( ) throws Throwable { LazyTable lazyTable0 = new LazyTable ( ( JDBCDBImporter ) null , ( DBSchema ) null , "jdc , O ( 7p_gpUK ? j@ ; " , "jdc , O ( 7p_gpUK ? j@ ; " ) ; String string0 = lazyTable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test15 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" ) ; LazyTable lazyTable0 = new LazyTable ( jDBCDBImporter0 , ( DBSchema ) null , "" , "" ) ; DBSchema dBSchema0 = lazyTable0 . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBSchema getSchema ( String schemaName ) { for ( DBCatalog catalog : getCatalogs ( ) ) { DBSchema schema = catalog . getSchema ( schemaName ) ; if ( schema ! = null ) return schema ; } throw new ObjectNotFoundException ( "Table '" + name + "'" ) ; }
void test25 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "oDME#Z#5 [ DP" , "oDME#Z#5 [ DP" , "oDME#Z#5 [ DP" , "0Z : oy ( - @ & u_ k^d : ) U" , "0Z : oy ( - @ & u_ k^d : ) U" , "oDME#Z#5 [ DP" , "0Z : oy ( - @ & u_ k^d : ) U" , false ) ; LazyTable lazyTable0 = new LazyTable ( jDBCDBImporter0 , ( DBSchema ) null , "oDME#Z#5 [ DP" , "0Z : oy ( - @ & u_ k^d : ) U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test27 ( ) throws Throwable { LazyTable lazyTable0 = new LazyTable ( ( JDBCDBImporter ) null , ( DBSchema ) null , "jdc , O ( 7p_gpUK ? j@ ; " , "jdc , O ( 7p_gpUK ? j@ ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return id . hashCode ( ) ; }
void test30 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "oDME#Z#5 [ DP" , "oDME#Z#5 [ DP" , "oDME#Z#5 [ DP" , "0Z : oy ( - @ & u_ k^d : ) U" , "0Z : oy ( - @ & u_ k^d : ) U" , "oDME#Z#5 [ DP" , "0Z : oy ( - @ & u_ k^d : ) U" , false ) ; LazyTable lazyTable0 = new LazyTable ( jDBCDBImporter0 , ( DBSchema ) null , "oDME#Z#5 [ DP" , "0Z : oy ( - @ & u_ k^d : ) U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBTable getProvider ( int index ) { return foreignKeyConstraints . get ( index ) . getRefereeTable ( ) ; }
void test31 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" ) ; LazyTable lazyTable0 = new LazyTable ( jDBCDBImporter0 , ( DBSchema ) null , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getObjectType ( ) { return objectType ; }
void test41 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" ) ; LazyTable lazyTable0 = new LazyTable ( jDBCDBImporter0 , ( DBSchema ) null , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test42 ( ) throws Throwable { JDBCDBImporter jDBCDBImporter0 = new JDBCDBImporter ( "" , "" , "" , "" , "" , "" ) ; DBSchema dBSchema0 = new DBSchema ( "" ) ; LazyTable lazyTable0 = new LazyTable ( jDBCDBImporter0 , dBSchema0 , "" , "" ) ; boolean boolean0 = lazyTable0 . equals ( ( Object ) lazyTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test43 ( ) throws Throwable { LazyTable lazyTable0 = new LazyTable ( ( JDBCDBImporter ) null , ( DBSchema ) null , "jdc , O ( 7p_gpUK ? j@ ; " , "jdc , O ( 7p_gpUK ? j@ ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test0 ( ) throws Throwable { DBIndexInfo dBIndexInfo0 = new DBIndexInfo ( "Or$" , "Or$" , ( short ) ( - 1179 ) , "Or$" , false , ( short ) 1 , "Or$" , ( Boolean ) false , 0 , 0 , "Or$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { DBIndexInfo dBIndexInfo0 = new DBIndexInfo ( "" , "" , ( short ) 1 , ( String ) null , false , ( short ) 1 , "found : " , ( Boolean ) false , ( int ) ( short ) 0 , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test3 ( ) throws Throwable { DBIndexInfo dBIndexInfo0 = new DBIndexInfo ( "Or$" , "Or$" , ( short ) ( - 1179 ) , "Or$" , false , ( short ) 1 , "Or$" , ( Boolean ) false , 0 , 0 , "Or$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test4 ( ) throws Throwable { DBIndexInfo dBIndexInfo0 = new DBIndexInfo ( " , " , " , " , ( short ) 1 , " , " , true , ( short ) 1 , " , " , ( Boolean ) true , ( int ) ( short ) 1 , ( - 917 ) , " , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addColumn ( DBColumn column ) { column . setTable ( this ) ; columns . put ( column . getName ( ) , column ) ; }
void test5 ( ) throws Throwable { DBIndexInfo dBIndexInfo0 = new DBIndexInfo ( "" , "" , ( short ) 1 , ( String ) null , false , ( short ) 1 , "found : " , ( Boolean ) false , ( int ) ( short ) 0 , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addColumn ( DBColumn column ) { column . setTable ( this ) ; columns . put ( column . getName ( ) , column ) ; }
void test0 ( ) throws Throwable { / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int int0 = LoggingResultSetHandler . getOpenResultSetCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenResultSetCount ( ) { return LoggingResultSetHandler . getOpenResultSetCount ( ) ; }
void test2 ( ) throws Throwable { LoggingResultSetHandler loggingResultSetHandler0 = new LoggingResultSetHandler ( ( ResultSet ) null , ( Statement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenResultSetCount ( ) { return LoggingResultSetHandler . getOpenResultSetCount ( ) ; }
void test0 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "WREEL = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] executeBatch ( ) throws SQLException { JDBC_LOGGER . debug ( "executeBatch ( ) " ) ; clearParams ( ) ; return realStatement . executeBatch ( ) ; }
void test1 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test2 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test3 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResultSet executeQuery ( String query , Connection connection ) throws SQLException { return connection . createStatement ( ) . executeQuery ( query ) ; }
void test4 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test5 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "o9`MLr2yr , $AdGo : } W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addBatch ( ) throws SQLException { logAll ( "addBatch" , sql ) ; realStatement . addBatch ( ) ; }
void test6 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "F4pD . %0fifci5F' } * Tj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test7 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , " { DEfRITION" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenStatementCount ( ) { return LoggingStatementHandler . getOpenStatementCount ( ) ; }
void test8 ( ) throws Throwable { / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test9 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , " { DEfRITION" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test10 ( ) throws Throwable { int int0 = LoggingPreparedStatementHandler . getOpenStatementCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenStatementCount ( ) { return LoggingStatementHandler . getOpenStatementCount ( ) ; }
void test11 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "9~tkBb\"qFrUc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test12 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , " , L8V < J { fQ - c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test13 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "MlO#3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResultSet executeQuery ( String query , Connection connection ) throws SQLException { return connection . createStatement ( ) . executeQuery ( query ) ; }
void test14 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "setTransactionTimeout" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test15 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "%Fn`NmS + IB2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test16 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "You can't read anew blob" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addBatch ( ) throws SQLException { logAll ( "addBatch" , sql ) ; realStatement . addBatch ( ) ; }
void test17 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test18 ( ) throws Throwable { LoggingPreparedStatementHandler loggingPreparedStatementHandler0 = new LoggingPreparedStatementHandler ( ( PreparedStatement ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( Connection connection ) { if ( connection = = null ) return ; try { connection . close ( ) ; } catch ( SQLException e ) { LOGGER . error ( "Error closing connection" , e ) ; } }
void test0 ( ) throws Throwable { int int0 = LoggingStatementHandler . getOpenStatementCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenStatementCount ( ) { return LoggingStatementHandler . getOpenStatementCount ( ) ; }
void test1 ( ) throws Throwable { / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test3 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test4 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test5 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test6 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test7 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test8 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test9 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] executeBatch ( ) throws SQLException { JDBC_LOGGER . debug ( "executeBatch ( ) " ) ; clearParams ( ) ; return realStatement . executeBatch ( ) ; }
void test10 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeUpdate ( String sql , Connection connection ) throws SQLException { if ( sql = = null | | sql . trim ( ) . length ( ) = = 0 ) { LOGGER . warn ( "Empty SQL string in executeUpdate ( ) " ) ; return 0 ; } int result = 0 ; Statement statement = null ; try { statement = connection . createStatement ( ) ; result = statement . executeUpdate ( sql ) ; } finally { if ( statement ! = null ) close ( statement ) ; } return result ; }
void test11 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean execute ( ) throws SQLException { logAll ( "execute" , this . sql ) ; clearParams ( ) ; return realStatement . execute ( ) ; }
void test12 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenStatementCount ( ) { return LoggingStatementHandler . getOpenStatementCount ( ) ; }
void test13 ( ) throws Throwable { LoggingStatementHandler loggingStatementHandler0 = new LoggingStatementHandler ( ( Statement ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( Connection connection ) { if ( connection = = null ) return ; try { connection . close ( ) ; } catch ( SQLException e ) { LOGGER . error ( "Error closing connection" , e ) ; } }
void test0 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; PooledConnectionHandler pooledConnectionHandler0 = new PooledConnectionHandler ( ( Connection ) jdbcConnection0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; PooledConnectionHandler pooledConnectionHandler0 = new PooledConnectionHandler ( ( Connection ) jdbcConnection0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenConnectionCount ( ) { return PooledConnectionHandler . getOpenConnectionCount ( ) ; }
void test2 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; PooledConnectionHandler pooledConnectionHandler0 = new PooledConnectionHandler ( ( Connection ) jdbcConnection0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenConnectionCount ( ) { return PooledConnectionHandler . getOpenConnectionCount ( ) ; }
void test3 ( ) throws Throwable { / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { int int0 = PooledConnectionHandler . getOpenConnectionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenConnectionCount ( ) { return PooledConnectionHandler . getOpenConnectionCount ( ) ; }
void test5 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; PooledConnectionHandler pooledConnectionHandler0 = new PooledConnectionHandler ( ( Connection ) jdbcConnection0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenConnectionCount ( ) { return PooledConnectionHandler . getOpenConnectionCount ( ) ; }
void test0 ( ) throws Throwable { VersionNumber versionNumber0 = VersionNumber . valueOf ( ( String ) null ) ; ConstantVersionProvider constantVersionProvider0 = new ConstantVersionProvider ( versionNumber0 ) ; VersionNumber versionNumber1 = constantVersionProvider0 . getVersion ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VersionNumber getVersion ( Connection connection ) ; }
void test0 ( ) throws Throwable { QueryVersionProvider queryVersionProvider0 = new QueryVersionProvider ( "bf { [ j$ + efOU$ = O" ) ; queryVersionProvider0 . setQuery ( "bf { [ j$ + efOU$ = O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuery ( ) { return query ; }
void test1 ( ) throws Throwable { QueryVersionProvider queryVersionProvider0 = new QueryVersionProvider ( "bf { [ j$ + efOU$ = O" ) ; String string0 = queryVersionProvider0 . getQuery ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuery ( ) { return query ; }
void test0 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; String string0 = firebirdDialect0 . renderFetchSequenceValue ( "INTEG_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderFetchSequenceValue ( String sequenceName ) { throw checkSequenceSupport ( "nextSequenceValue" ) ; }
void test1 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; String string0 = firebirdDialect0 . renderDropSequence ( "INTEG_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderDropSequence ( String sequenceName ) { if ( sequenceSupported ) return "drop sequence " + sequenceName ; else throw checkSequenceSupport ( "dropSequence" ) ; }
void test2 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( "o$ : 1 > 6Z5 ] / 8 | 49K" , "o$ : 1 > 6Z5 ] / 8 | 49K" , "o$ : 1 > 6Z5 ] / 8 | 49K" ) ; String string0 = firebirdDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test3 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( "o$ : 1 > 6Z5 ] / 8 | 49K" , "o$ : 1 > 6Z5 ] / 8 | 49K" , "o$ : 1 > 6Z5 ] / 8 | 49K" ) ; BigInteger bigInteger0 = BigInteger . TEN ; dBSequence0 . setStart ( bigInteger0 ) ; String string0 = firebirdDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test5 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDefaultSchema ( "org . firebirdsql . jdbc . FBDriver" , "org . firebirdsql . jdbc . FBDriver" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test7 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; String string0 = firebirdDialect0 . getJDBCDriverClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJDBCDriverClass ( ) { return "org . firebirdsql . jdbc . FBDriver" ; }
void test8 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDefaultCatalog ( "drop generator INTEG_0" , "INTEG_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test9 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isSequenceBoundarySupported ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test10 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicPKName ( "INTEG_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test11 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicPKName ( "RDB$0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test12 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicUKName ( "RDB$0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test13 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicUKName ( "select gen_id ( INTEG_0 , 1 ) from RDB$DATABASE ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test14 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicFKName ( "INTEG_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test15 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicFKName ( "CREATE GENERATOR o$ : 1 > 6Z5 ] / 8 | 49K ; SET GENERATOR o$ : 1 > 6Z5 ] / 8 | 49K TO 9 ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test16 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicIndexName ( "RDB$0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test17 ( ) throws Throwable { FirebirdDialect firebirdDialect0 = new FirebirdDialect ( ) ; boolean boolean0 = firebirdDialect0 . isDeterministicIndexName ( "org . firebirdsql . jdbc . FBDriver" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test0 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( "" ) ; boolean boolean0 = unknownDialect0 . isDeterministicPKName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test1 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( " / Xwv@" ) ; boolean boolean0 = unknownDialect0 . isDeterministicIndexName ( " / Xwv@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test2 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( "9S = ? XJ + tR" ) ; boolean boolean0 = unknownDialect0 . isDeterministicFKName ( "9S = ? XJ + tR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test3 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( " / Xwv@" ) ; boolean boolean0 = unknownDialect0 . isDefaultCatalog ( " / Xwv@" , " / Xwv@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test4 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( "" ) ; boolean boolean0 = unknownDialect0 . isDeterministicUKName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test5 ( ) throws Throwable { UnknownDialect unknownDialect0 = new UnknownDialect ( "r" ) ; boolean boolean0 = unknownDialect0 . isDefaultSchema ( "r" , "r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test1 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDefaultCatalog ( ( String ) null , "databaseName" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test2 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; String string0 = dB2Dialect0 . renderFetchSequenceValue ( " ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderFetchSequenceValue ( String sequenceName ) { throw checkSequenceSupport ( "nextSequenceValue" ) ; }
void test4 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicPKName ( "SQL000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test5 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicPKName ( " / Vm = A9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test6 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicUKName ( "SQL000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test7 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicUKName ( " ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test8 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicFKName ( "SQL000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test9 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicFKName ( "L | xszM1`qb ) c < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test10 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicIndexName ( "SQL000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test11 ( ) throws Throwable { DB2Dialect dB2Dialect0 = new DB2Dialect ( ) ; boolean boolean0 = dB2Dialect0 . isDeterministicIndexName ( "3fz | . 6bl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test0 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDefaultSchema ( "SYS_FK_0" , "SYS_FK_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test1 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; String string0 = hSQLDialect0 . renderFetchSequenceValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderFetchSequenceValue ( String sequenceName ) { throw checkSequenceSupport ( "nextSequenceValue" ) ; }
void test3 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . supportsRegex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test4 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; String string0 = hSQLDialect0 . renderDropSequence ( " . zb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderDropSequence ( String sequenceName ) { if ( sequenceSupported ) return "drop sequence " + sequenceName ; else throw checkSequenceSupport ( "dropSequence" ) ; }
void test5 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDefaultCatalog ( "call next value for " , "call next value for " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test6 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDefaultCatalog ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test7 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDeterministicPKName ( "SYS_IDX_au0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test8 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDeterministicPKName ( "call next value for " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test9 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; hSQLDialect0 . randomUKNamePattern = hSQLDialect0 . randomIndexNamePattern ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test10 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDeterministicUKName ( "SYS_IDX_au0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test11 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDeterministicFKName ( "SYS_FK_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test12 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDeterministicFKName ( "SYS_IDX_au0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test13 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; Pattern pattern0 = Pattern . compile ( "" ) ; hSQLDialect0 . randomIndexNamePattern = pattern0 ; boolean boolean0 = hSQLDialect0 . isDeterministicIndexName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test14 ( ) throws Throwable { HSQLDialect hSQLDialect0 = new HSQLDialect ( ) ; boolean boolean0 = hSQLDialect0 . isDeterministicIndexName ( " . zb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test0 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDeterministicIndexName ( " , 9`$9pBc%ZL0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test1 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; String string0 = postgreSQLDialect0 . formatTimestamp ( ( Timestamp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatTimestamp ( Timestamp timestamp ) { return "'" + new TimestampFormatter ( DEFAULT_TIMESTAMP_PATTERN ) . format ( timestamp ) + "'" ; }
void test2 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; String string0 = postgreSQLDialect0 . renderFetchSequenceValue ( "NO CYCLE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderFetchSequenceValue ( String sequenceName ) { throw checkSequenceSupport ( "nextSequenceValue" ) ; }
void test3 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDefaultSchema ( "f" , "f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test4 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; String string0 = postgreSQLDialect0 . sequenceNoCycle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sequenceNoCycle ( ) { return "NOCYCLE" ; }
void test5 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . supportsRegex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test6 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDeterministicUKName ( "f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test7 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDeterministicPKName ( "E - - commit " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test8 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDeterministicFKName ( "f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test9 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( "" , "" , "" ) ; String string0 = postgreSQLDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test10 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( "f" , "f" , "f" ) ; Long long0 = Long . valueOf ( 4611686018427387890L ) ; dBSequence0 . setCache ( long0 ) ; String string0 = postgreSQLDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test11 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDefaultCatalog ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test12 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDefaultCatalog ( "iN#cc } : ^EErAZ ! " , "iN#cc } : ^EErAZ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test13 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; boolean boolean0 = postgreSQLDialect0 . isDefaultCatalog ( "E - - commit " , " , 9`$9pBc%ZL0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test14 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; String string0 = postgreSQLDialect0 . regexQuery ( " D / 2G8mPI'l" , false , " D / 2G8mPI'l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test15 ( ) throws Throwable { PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect ( ) ; String string0 = postgreSQLDialect0 . regexQuery ( " D / 2G8mPI'l" , true , " D / 2G8mPI'l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test0 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; String string0 = oracleDialect0 . formatTimestamp ( ( Timestamp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatTimestamp ( Timestamp timestamp ) { return "'" + new TimestampFormatter ( DEFAULT_TIMESTAMP_PATTERN ) . format ( timestamp ) + "'" ; }
void test2 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . supportsRegex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test3 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDefaultSchema ( " ; } h3" , " ; } h3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test4 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDefaultCatalog ( "CREATE SEQUENCE \"null\"" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test5 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDefaultCatalog ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test6 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( ( String ) null , ( DBSchema ) null ) ; String string0 = oracleDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test7 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( "9 < s" , "9 < s" , "9 < s" ) ; dBSequence0 . setCache ( ( Long ) 0L ) ; String string0 = oracleDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test8 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; DBSequence dBSequence0 = new DBSequence ( "9 < s" , "9 < s" , "9 < s" ) ; Boolean boolean0 = new Boolean ( false ) ; dBSequence0 . setOrder ( boolean0 ) ; String string0 = oracleDialect0 . renderCreateSequence ( dBSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCreateSequence ( DBSequence sequence ) { StringBuilder builder = new StringBuilder ( "CREATE SEQUENCE " ) ; builder . append ( renderSequenceNameAndType ( sequence ) ) ; BigInteger start = sequence . getStart ( ) ; if ( start ! = null & & isNotOne ( start ) ) builder . append ( " START WITH " ) . append ( start ) ; BigInteger increment = sequence . getIncrement ( ) ; if ( increment ! = null & & isNotOne ( increment ) ) builder . append ( " INCREMENT BY " ) . append ( increment ) ; if ( isSequenceBoundarySupported ( ) ) { BigInteger maxValue = sequence . getMaxValue ( ) ; if ( maxValue ! = null ) builder . append ( " MAXVALUE " ) . append ( maxValue ) ; BigInteger minValue = sequence . getMinValue ( ) ; if ( minValue ! = null ) builder . append ( " MINVALUE " ) . append ( minValue ) ; } Boolean cycle = sequence . isCycle ( ) ; if ( cycle ! = null ) builder . append ( cycle ? " CYCLE" : " " + sequenceNoCycle ( ) ) ; return builder . toString ( ) ; }
void test11 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicCheckName ( "SYS_C00000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicCheckName ( String checkName ) { return ! randomNamePattern . matcher ( checkName ) . matches ( ) ; }
void test12 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicCheckName ( "9 < s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicCheckName ( String checkName ) { return ! randomNamePattern . matcher ( checkName ) . matches ( ) ; }
void test13 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; Pattern pattern0 = Pattern . compile ( "info . CACHE_MAX_SIZE" , 737 ) ; oracleDialect0 . randomNamePattern = pattern0 ; boolean boolean0 = oracleDialect0 . isDeterministicPKName ( "info . CACHE_MAX_SIZE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test14 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicPKName ( "CREATE SEQUENCE \"9 < s\" . \"9 < s\" CACHE 0NOORDER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test15 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicUKName ( "SYS_C00000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test16 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicUKName ( "94" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test17 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicFKName ( "SYS_C00000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test18 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicFKName ( " < ddI_etavH ian" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test19 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicIndexName ( "SYS_C00000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test20 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; boolean boolean0 = oracleDialect0 . isDeterministicIndexName ( "94" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test21 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; String string0 = oracleDialect0 . regexQuery ( ( String ) null , false , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test22 ( ) throws Throwable { OracleDialect oracleDialect0 = new OracleDialect ( ) ; String string0 = oracleDialect0 . regexQuery ( "oracle" , true , "oracle" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test0 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDefaultCatalog ( "1gQPA ] : u < } = a * ; 2 > = = CASE WHEN null THEN null ELSE 1gQPA ] : u < } = a * ; 2 > = END" , "1gQPA ] : u < } = a * ; 2 > = = CASE WHEN null THEN null ELSE 1gQPA ] : u < } = a * ; 2 > = END" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test2 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicPKName ( "SYS_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test3 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicPKName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test4 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicUKName ( "SYS_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test5 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicUKName ( "sql_server" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test6 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; Pattern pattern0 = Pattern . compile ( "" ) ; sqlServerDialect0 . randomNamePattern = pattern0 ; boolean boolean0 = sqlServerDialect0 . isDeterministicFKName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test7 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicFKName ( "cvc - ] omplex - type . 2 . 2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test8 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicIndexName ( "SYS_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test9 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; boolean boolean0 = sqlServerDialect0 . isDeterministicIndexName ( "sql_server" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test10 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; String [ ] stringArray0 = new String [ 2 ] ; String string0 = sqlServerDialect0 . renderCase ( "1gQPA ] : u < } = a * ; 2 > = " , "1gQPA ] : u < } = a * ; 2 > = " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCase ( String columnName , String elseExpression , String . . . whenThenExpressionPairs ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( "CASE" ) ; for ( int i = 0 ; i < whenThenExpressionPairs . length ; i + = 2 ) { builder . append ( " WHEN " ) . append ( whenThenExpressionPairs [ i ] ) ; / / when part builder . append ( " THEN " ) . append ( whenThenExpressionPairs [ i + 1 ] ) ; / / then part } if ( ! StringUtil . isEmpty ( elseExpression ) ) builder . append ( " ELSE " ) . append ( elseExpression ) ; / / else part builder . append ( " END" ) ; / / closing the case if ( columnName ! = null ) builder . append ( " AS " ) . append ( columnName ) ; / / applying column name return builder . toString ( ) ; }
void test11 ( ) throws Throwable { SqlServerDialect sqlServerDialect0 = new SqlServerDialect ( ) ; String [ ] stringArray0 = new String [ 2 ] ; String string0 = sqlServerDialect0 . renderCase ( ( String ) null , ( String ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderCase ( String columnName , String elseExpression , String . . . whenThenExpressionPairs ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( "CASE" ) ; for ( int i = 0 ; i < whenThenExpressionPairs . length ; i + = 2 ) { builder . append ( " WHEN " ) . append ( whenThenExpressionPairs [ i ] ) ; / / when part builder . append ( " THEN " ) . append ( whenThenExpressionPairs [ i + 1 ] ) ; / / then part } if ( ! StringUtil . isEmpty ( elseExpression ) ) builder . append ( " ELSE " ) . append ( elseExpression ) ; / / else part builder . append ( " END" ) ; / / closing the case if ( columnName ! = null ) builder . append ( " AS " ) . append ( columnName ) ; / / applying column name return builder . toString ( ) ; }
void test0 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . supportsRegex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test1 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; String string0 = h2Dialect0 . renderFetchSequenceValue ( "$jj9 - SOM1fyl0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderFetchSequenceValue ( String sequenceName ) { throw checkSequenceSupport ( "nextSequenceValue" ) ; }
void test3 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isSequenceBoundarySupported ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSequenceBoundarySupported ( ) { return sequenceSupported ; }
void test4 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; String string0 = h2Dialect0 . renderDropSequence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renderDropSequence ( String sequenceName ) { if ( sequenceSupported ) return "drop sequence " + sequenceName ; else throw checkSequenceSupport ( "dropSequence" ) ; }
void test5 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDefaultSchema ( " & 4c6RViiBz [ CLCh" , " & 4c6RViiBz [ CLCh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test6 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDefaultCatalog ( "epUP * syB" , "epUP * syB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test7 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDefaultCatalog ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test8 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicPKName ( "CONSTRAINT_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test9 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicPKName ( " & 4c6RViiBz [ CLCh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test10 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicUKName ( "CONSTRAINT_INDEX_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test11 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicUKName ( "ureTt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test12 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicFKName ( "CONSTRAINT_0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test13 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicFKName ( "ureTt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test14 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; Pattern pattern0 = Pattern . compile ( "" ) ; h2Dialect0 . randomIndexNamePattern = pattern0 ; boolean boolean0 = h2Dialect0 . isDeterministicIndexName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test15 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; boolean boolean0 = h2Dialect0 . isDeterministicIndexName ( "ureTt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test16 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; String string0 = h2Dialect0 . regexQuery ( "t7FIH\"IM30UuV < " , false , "t7FIH\"IM30UuV < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test17 ( ) throws Throwable { H2Dialect h2Dialect0 = new H2Dialect ( ) ; String string0 = h2Dialect0 . regexQuery ( "lwh : 5Jve" , true , "lwh : 5Jve" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test0 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . supportsRegex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test1 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . isDeterministicUKName ( " . 6g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test2 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . isDefaultSchema ( " [ " , " [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test3 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . isDeterministicIndexName ( " ) : v\" - gOEA [ 5~GFeck" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test4 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . isDeterministicFKName ( "COMMENT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test5 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . isDeterministicPKName ( "jtQswa1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test6 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; boolean boolean0 = mySQLDialect0 . isDefaultCatalog ( " * NhS ( } @4z\" ; < " , " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultCatalog ( String catalog , String user ) ; boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test7 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; String string0 = mySQLDialect0 . regexQuery ( "z4o" , false , "z4o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test8 ( ) throws Throwable { MySQLDialect mySQLDialect0 = new MySQLDialect ( ) ; String string0 = mySQLDialect0 . regexQuery ( " / W" , true , " / W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test0 ( ) throws Throwable { HSQL2Dialect hSQL2Dialect0 = new HSQL2Dialect ( ) ; boolean boolean0 = hSQL2Dialect0 . supportsRegex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsRegex ( ) { return false ; }
void test1 ( ) throws Throwable { HSQL2Dialect hSQL2Dialect0 = new HSQL2Dialect ( ) ; String string0 = hSQL2Dialect0 . regexQuery ( "X~zO ? h" , false , "X~zO ? h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test2 ( ) throws Throwable { HSQL2Dialect hSQL2Dialect0 = new HSQL2Dialect ( ) ; String string0 = hSQL2Dialect0 . regexQuery ( "" , true , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String regexQuery ( String expression , boolean not , String regex ) { throw new UnsupportedOperationException ( system + " does not support regular expressions" ) ; }
void test1 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDefaultSchema ( "app" , "app" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test2 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDefaultSchema ( "FK000000000000000" , "FK000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test3 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( false ) ; boolean boolean0 = derbyDialect0 . isDefaultSchema ( " { H ; ~5`3$ < A + b@ca# ; 8 + " , "GnmEeb < gQF% [ d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultSchema ( String schema , String user ) ; boolean isSequenceSupported ( ) { return sequenceSupported ; }
void test4 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicPKName ( "SQL000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test5 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicPKName ( "FK000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicPKName ( String pkName ) ; / * * Determines if a unique key constraint name was explicitly specified on creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test6 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicUKName ( "SQL000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test7 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicUKName ( "FK000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicUKName ( String ukName ) ; / * * Determines if a foreign key constraint name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test8 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicFKName ( "FK000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test9 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicFKName ( " * ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicFKName ( String fkName ) ; / * * Determines if an index name was explicitly specified creation * or at least generated by the database in a deterministic ( reproducible ) way * / boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test10 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicIndexName ( "SQL0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test11 ( ) throws Throwable { DerbyDialect derbyDialect0 = new DerbyDialect ( ) ; boolean boolean0 = derbyDialect0 . isDeterministicIndexName ( "FK000000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeterministicIndexName ( String indexName ) ; / * * Tells if the database supports regular expressions * / boolean supportsRegex ( ) { return false ; }
void test1 ( ) throws Throwable { H2Util h2Util0 = new H2Util ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { HSQLUtil hSQLUtil0 = new HSQLUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ColumnExpression columnExpression0 = new ColumnExpression ( "" , true ) ; String string0 = columnExpression0 . getColumnName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQuoted ( ) { return quoted ; }
void test1 ( ) throws Throwable { ColumnExpression columnExpression0 = new ColumnExpression ( "OXjZ5@g . " , true ) ; boolean boolean0 = columnExpression0 . isQuoted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQuoted ( ) { return quoted ; }
void test2 ( ) throws Throwable { ColumnExpression columnExpression0 = new ColumnExpression ( "OXjZ5@g . " , false ) ; String string0 = columnExpression0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test3 ( ) throws Throwable { ColumnExpression columnExpression0 = new ColumnExpression ( "OXjZ5@g . " , true ) ; String string0 = columnExpression0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQuoted ( ) { return quoted ; }
void test0 ( ) throws Throwable { Expression < Object > [ ] expressionArray0 = ( Expression < Object > [ ] ) Array . newInstance ( Expression . class , 5 ) ; FunctionInvocation functionInvocation0 = new FunctionInvocation ( "" , ( Expression [ ] ) expressionArray0 ) ; Properties properties0 = new Properties ( ) ; DefaultContext defaultContext0 = new DefaultContext ( properties0 ) ; Object object0 = functionInvocation0 . evaluate ( ( Context ) defaultContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object evaluate ( Context context ) { return null ; / / the class is just a space holder }
void test1 ( ) throws Throwable { Expression < String > [ ] expressionArray0 = ( Expression < String > [ ] ) Array . newInstance ( Expression . class , 8 ) ; FunctionInvocation functionInvocation0 = new FunctionInvocation ( "" , ( Expression [ ] ) expressionArray0 ) ; String string0 = functionInvocation0 . getFunctionName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFunctionName ( ) { return name ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; QNBeanSpecExpression qNBeanSpecExpression0 = new QNBeanSpecExpression ( stringArray0 ) ; BetweenExpression betweenExpression0 = new BetweenExpression ( ( Expression < ? > ) qNBeanSpecExpression0 , ( Expression < ? > ) qNBeanSpecExpression0 , ( Expression < ? > ) qNBeanSpecExpression0 ) ; String string0 = betweenExpression0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream ( "'TABLESPACE'" ) ; SQLParserUtil . parseExpression ( ( CharStream ) aNTLRNoCaseStringStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression < ? > parseExpression ( CharStream in ) throws ParseException { String text = null ; if ( in instanceof TextHolder ) text = ( ( TextHolder ) in ) . getText ( ) ; try { SQLParser parser = parser ( in ) ; SQLParser . expression_return r = parser . expression ( ) ; checkForSyntaxErrors ( text , "expression" , parser , r ) ; if ( r ! = null ) { return convertExpressionNode ( ( CommonTree ) r . getTree ( ) ) ; } else return null ; } catch ( RuntimeException e ) { if ( e . getCause ( ) instanceof RecognitionException ) throw mapToParseException ( ( RecognitionException ) e . getCause ( ) , text ) ; else throw e ; } catch ( RecognitionException e ) { throw mapToParseException ( e , text ) ; } }
void test2 ( ) throws Throwable { SQLParserUtil sQLParserUtil0 = new SQLParserUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "k = _0B ) IV%Ou > 8 + E / YT" ) ; Expression < ? > expression0 = SQLParserUtil . parseExpression ( ( CharStream ) aNTLRStringStream0 ) ; Expression < ? > expression1 = SQLParserUtil . parseExpression ( ( CharStream ) aNTLRStringStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test4 ( ) throws Throwable { char [ ] charArray0 = new char [ 18 ] ; charArray0 [ 0 ] = '\"' ; charArray0 [ 8 ] = '\"' ; charArray0 [ 4 ] = '\"' ; charArray0 [ 5 ] = '\"' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) '\"' ) ; SQLParserUtil . parseExpression ( ( CharStream ) aNTLRStringStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression < ? > parseExpression ( CharStream in ) throws ParseException { String text = null ; if ( in instanceof TextHolder ) text = ( ( TextHolder ) in ) . getText ( ) ; try { SQLParser parser = parser ( in ) ; SQLParser . expression_return r = parser . expression ( ) ; checkForSyntaxErrors ( text , "expression" , parser , r ) ; if ( r ! = null ) { return convertExpressionNode ( ( CommonTree ) r . getTree ( ) ) ; } else return null ; } catch ( RuntimeException e ) { if ( e . getCause ( ) instanceof RecognitionException ) throw mapToParseException ( ( RecognitionException ) e . getCause ( ) , text ) ; else throw e ; } catch ( RecognitionException e ) { throw mapToParseException ( e , text ) ; } }
void test9 ( ) throws Throwable { ValueDouble valueDouble0 = ValueDouble . get ( ( - 1897 . 140530488109 ) ) ; StringReader stringReader0 = ( StringReader ) valueDouble0 . getReader ( ) ; ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ( Reader ) stringReader0 , ( - 1563 ) , ( - 1563 ) ) ; SQLParserUtil . parseExpression ( ( CharStream ) aNTLRReaderStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression < ? > parseExpression ( CharStream in ) throws ParseException { String text = null ; if ( in instanceof TextHolder ) text = ( ( TextHolder ) in ) . getText ( ) ; try { SQLParser parser = parser ( in ) ; SQLParser . expression_return r = parser . expression ( ) ; checkForSyntaxErrors ( text , "expression" , parser , r ) ; if ( r ! = null ) { return convertExpressionNode ( ( CommonTree ) r . getTree ( ) ) ; } else return null ; } catch ( RuntimeException e ) { if ( e . getCause ( ) instanceof RecognitionException ) throw mapToParseException ( ( RecognitionException ) e . getCause ( ) , text ) ; else throw e ; } catch ( RecognitionException e ) { throw mapToParseException ( e , text ) ; } }
void test10 ( ) throws Throwable { ValueUuid valueUuid0 = ValueUuid . get ( "" ) ; StringReader stringReader0 = ( StringReader ) valueUuid0 . getReader ( ) ; ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ( Reader ) stringReader0 , ( - 64 ) , ( - 64 ) ) ; SQLParserUtil . parseExpression ( ( CharStream ) aNTLRReaderStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression < ? > parseExpression ( CharStream in ) throws ParseException { String text = null ; if ( in instanceof TextHolder ) text = ( ( TextHolder ) in ) . getText ( ) ; try { SQLParser parser = parser ( in ) ; SQLParser . expression_return r = parser . expression ( ) ; checkForSyntaxErrors ( text , "expression" , parser , r ) ; if ( r ! = null ) { return convertExpressionNode ( ( CommonTree ) r . getTree ( ) ) ; } else return null ; } catch ( RuntimeException e ) { if ( e . getCause ( ) instanceof RecognitionException ) throw mapToParseException ( ( RecognitionException ) e . getCause ( ) , text ) ; else throw e ; } catch ( RecognitionException e ) { throw mapToParseException ( e , text ) ; } }
void test0 ( ) throws Throwable { ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream ( "" ) ; String string0 = aNTLRNoCaseStringStream0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { try { return IOUtil . getContentOfURI ( fileName ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
void test1 ( ) throws Throwable { ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream ( "" ) ; String string0 = aNTLRNoCaseStringStream0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream ( "" ) ; int int0 = aNTLRNoCaseStringStream0 . LA ( 1738 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int LA ( int i ) { if ( i = = 0 ) return 0 ; / / undefined if ( i < 0 ) i + + ; / / e . g . , translate LA ( - 1 ) to use offset 0 if ( ( p + i - 1 ) > = n ) return CharStream . EOF ; return Character . toUpperCase ( data [ p + i - 1 ] ) ; }
void test3 ( ) throws Throwable { ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream ( "" ) ; int int0 = aNTLRNoCaseStringStream0 . LT ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ANTLRNoCaseStringStream ( String text ) { super ( text ) ; this . text = text ; }
void test1 ( ) throws Throwable { SQLParser . ora_storage_opt_return sQLParser_ora_storage_opt_return0 = new SQLParser . ora_storage_opt_return ( ) ; Object object0 = sQLParser_ora_storage_opt_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test2 ( ) throws Throwable { SQLParser . create_index_return sQLParser_create_index_return0 = new SQLParser . create_index_return ( ) ; Object object0 = sQLParser_create_index_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test4 ( ) throws Throwable { SQLParser . foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser . foreign_key_constraint_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test5 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( " . " ) ; RegexLexer regexLexer0 = new RegexLexer ( ( CharStream ) aNTLRStringStream0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) regexLexer0 , 0 ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; SQLParser sQLParser0 = new SQLParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; sQLParser0 . expression_list ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser . expression_list_return expression_list ( ) throws RecognitionException { SQLParser . expression_list_return retval = new SQLParser . expression_list_return ( ) ; retval . start = input . LT ( 1 ) ; Object root_0 = null ; Token char_literal329 = null ; SQLParser . expression_return expression328 = null ; SQLParser . expression_return expression330 = null ; Object char_literal329_tree = null ; try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 259 : 17 : ( expression ( ' , ' expression ) * ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 259 : 19 : expression ( ' , ' expression ) * { root_0 = ( Object ) adaptor . nil ( ) ; pushFollow ( FOLLOW_expression_in_expression_list1863 ) ; expression328 = expression ( ) ; state . _fsp - - ; adaptor . addChild ( root_0 , expression328 . getTree ( ) ) ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 259 : 30 : ( ' , ' expression ) * loop54 : do { int alt54 = 2 ; int LA54_0 = input . LA ( 1 ) ; if ( ( LA54_0 = = 68 ) ) { alt54 = 1 ; } switch ( alt54 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 259 : 31 : ' , ' expression { char_literal329 = ( Token ) match ( input , 68 , FOLLOW_68_in_expression_list1866 ) ; pushFollow ( FOLLOW_expression_in_expression_list1869 ) ; expression330 = expression ( ) ; state . _fsp - - ; adaptor . addChild ( root_0 , expression330 . getTree ( ) ) ; } break ; default : break loop54 ; } } while ( true ) ; } retval . stop = input . LT ( - 1 ) ; retval . tree = ( Object ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } catch ( RecognitionException e ) { throw e ; } finally { } return retval ; }
void test7 ( ) throws Throwable { TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ) ; SQLParser sQLParser0 = new SQLParser ( ( TokenStream ) tokenRewriteStream0 ) ; CommonTreeAdaptor commonTreeAdaptor0 = ( CommonTreeAdaptor ) sQLParser0 . getTreeAdaptor ( ) ; sQLParser0 . setTreeAdaptor ( ( TreeAdaptor ) commonTreeAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTreeAdaptor ( TreeAdaptor adaptor ) { this . adaptor = adaptor ; }
void test9 ( ) throws Throwable { SQLParser . check_constraint_return sQLParser_check_constraint_return0 = new SQLParser . check_constraint_return ( ) ; Object object0 = sQLParser_check_constraint_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test10 ( ) throws Throwable { SQLParser . default_value_return sQLParser_default_value_return0 = new SQLParser . default_value_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test11 ( ) throws Throwable { SQLParser . drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser . drop_sequence_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test13 ( ) throws Throwable { SQLParser . column_spec_return sQLParser_column_spec_return0 = new SQLParser . column_spec_return ( ) ; Object object0 = sQLParser_column_spec_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test14 ( ) throws Throwable { SQLParser . column_detail_return sQLParser_column_detail_return0 = new SQLParser . column_detail_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test15 ( ) throws Throwable { SQLParser . drop_table_return sQLParser_drop_table_return0 = new SQLParser . drop_table_return ( ) ; Object object0 = sQLParser_drop_table_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test16 ( ) throws Throwable { SQLParser . table_details_return sQLParser_table_details_return0 = new SQLParser . table_details_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test18 ( ) throws Throwable { SQLParser . partition_parts_return sQLParser_partition_parts_return0 = new SQLParser . partition_parts_return ( ) ; Object object0 = sQLParser_partition_parts_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test19 ( ) throws Throwable { SQLParser . index_name_return sQLParser_index_name_return0 = new SQLParser . index_name_return ( ) ; Object object0 = sQLParser_index_name_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test21 ( ) throws Throwable { SQLParser . table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser . table_comment_details_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test22 ( ) throws Throwable { SQLParser . partition_part_return sQLParser_partition_part_return0 = new SQLParser . partition_part_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test23 ( ) throws Throwable { SQLParser . ora_flag_return sQLParser_ora_flag_return0 = new SQLParser . ora_flag_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test24 ( ) throws Throwable { SQLParser . ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser . ora_partition_spec_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test25 ( ) throws Throwable { SQLParser . qualified_name_return sQLParser_qualified_name_return0 = new SQLParser . qualified_name_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test30 ( ) throws Throwable { SQLParser . ora_lob_return sQLParser_ora_lob_return0 = new SQLParser . ora_lob_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test31 ( ) throws Throwable { SQLParser . fractionDigits_return sQLParser_fractionDigits_return0 = new SQLParser . fractionDigits_return ( ) ; Object object0 = sQLParser_fractionDigits_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test32 ( ) throws Throwable { SQLParser . drop_index_return sQLParser_drop_index_return0 = new SQLParser . drop_index_return ( ) ; Object object0 = sQLParser_drop_index_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test33 ( ) throws Throwable { SQLParser . create_table_return sQLParser_create_table_return0 = new SQLParser . create_table_return ( ) ; Object object0 = sQLParser_create_table_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test34 ( ) throws Throwable { SQLParser . ora_config_return sQLParser_ora_config_return0 = new SQLParser . ora_config_return ( ) ; Object object0 = sQLParser_ora_config_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test36 ( ) throws Throwable { SQLParser . unique_constraint_return sQLParser_unique_constraint_return0 = new SQLParser . unique_constraint_return ( ) ; Object object0 = sQLParser_unique_constraint_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test39 ( ) throws Throwable { SQLParser . ora_storage_spec_return sQLParser_ora_storage_spec_return0 = new SQLParser . ora_storage_spec_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test40 ( ) throws Throwable { SQLParser . ora_key_return sQLParser_ora_key_return0 = new SQLParser . ora_key_return ( ) ; Object object0 = sQLParser_ora_key_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test41 ( ) throws Throwable { SQLParser . expression_list_return sQLParser_expression_list_return0 = new SQLParser . expression_list_return ( ) ; Object object0 = sQLParser_expression_list_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test44 ( ) throws Throwable { SQLParser . column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser . column_comment_details_return ( ) ; Object object0 = sQLParser_column_comment_details_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test45 ( ) throws Throwable { SQLParser . ora_lob_index_return sQLParser_ora_lob_index_return0 = new SQLParser . ora_lob_index_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test46 ( ) throws Throwable { SQLParser . type_return sQLParser_type_return0 = new SQLParser . type_return ( ) ; Object object0 = sQLParser_type_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test47 ( ) throws Throwable { SQLParser . inline_constraint_return sQLParser_inline_constraint_return0 = new SQLParser . inline_constraint_return ( ) ; Object object0 = sQLParser_inline_constraint_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test48 ( ) throws Throwable { SQLParser . column_name_return sQLParser_column_name_return0 = new SQLParser . column_name_return ( ) ; Object object0 = sQLParser_column_name_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test49 ( ) throws Throwable { SQLParser . constraint_detail_return sQLParser_constraint_detail_return0 = new SQLParser . constraint_detail_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test50 ( ) throws Throwable { SQLParser . command_return sQLParser_command_return0 = new SQLParser . command_return ( ) ; Object object0 = sQLParser_command_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test51 ( ) throws Throwable { SQLParser . arguments_return sQLParser_arguments_return0 = new SQLParser . arguments_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test52 ( ) throws Throwable { SQLParser . nullability_return sQLParser_nullability_return0 = new SQLParser . nullability_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test0 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) null ) ; SQLLexer . DFA9 sQLLexer_DFA9_0 = sQLLexer0 . new DFA9 ( sQLLexer0 ) ; String string0 = sQLLexer_DFA9_0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test3 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ) ; sQLLexer0 . mINVOCATION ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGrammarFileName ( ) { return " / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g" ; }
void test4 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) null , ( RecognizerSharedState ) null ) ; sQLLexer0 . mDROP_TABLE ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mDROP_TABLE ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 287 : 20 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 287 : 21 : { } } finally { } }
void test6 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "5" ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mTABLE_DETAILS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mTABLE_DETAILS ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 297 : 23 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 297 : 24 : { } } finally { } }
void test8 ( ) throws Throwable { ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRReaderStream0 , recognizerSharedState0 ) ; sQLLexer0 . mCOLUMN_NAME ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mCOLUMN_NAME ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 290 : 21 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 290 : 22 : { } } finally { } }
void test12 ( ) throws Throwable { ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRReaderStream0 , recognizerSharedState0 ) ; sQLLexer0 . mINDEX_NAME ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mINDEX_NAME ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 296 : 20 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 296 : 21 : { } } finally { } }
void test13 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ) ; sQLLexer0 . mCOMMENT_COLUMN ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGrammarFileName ( ) { return " / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g" ; }
void test16 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "bTEc8 . rIW^ ? " ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mSIZE ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mSIZE ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 291 : 14 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 291 : 15 : { } } finally { } }
void test18 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "NCLOB" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 , recognizerSharedState0 ) ; CommonToken commonToken0 = ( CommonToken ) sQLLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Token nextToken ( ) { while ( true ) { state . token = null ; state . channel = Token . DEFAULT_CHANNEL ; state . tokenStartCharIndex = input . index ( ) ; state . tokenStartCharPositionInLine = input . getCharPositionInLine ( ) ; state . tokenStartLine = input . getLine ( ) ; state . text = null ; if ( input . LA ( 1 ) = = CharStream . EOF ) { return Token . EOF_TOKEN ; } try { mTokens ( ) ; if ( state . token = = null ) { emit ( ) ; } else if ( state . token = = Token . SKIP_TOKEN ) { continue ; } return state . token ; } catch ( RecognitionException re ) { reportError ( re ) ; throw new RuntimeException ( getClass ( ) . getSimpleName ( ) + " error" , re ) ; / / or throw Error } } }
void test19 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ) ; sQLLexer0 . mTABLE_NAME ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mTABLE_NAME ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 289 : 20 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 289 : 21 : { } } finally { } }
void test21 ( ) throws Throwable { RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) null , recognizerSharedState0 ) ; sQLLexer0 . mNAME_LIST ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mNAME_LIST ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 294 : 19 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 294 : 20 : { } } finally { } }
void test22 ( ) throws Throwable { ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRReaderStream0 , recognizerSharedState0 ) ; sQLLexer0 . mCOMMENT_TABLE ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mCOMMENT_TABLE ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 300 : 23 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 300 : 24 : { } } finally { } }
void test23 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ) ; sQLLexer0 . mCOLUMN_SPEC ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mCOLUMN_SPEC ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 298 : 21 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 298 : 22 : { } } finally { } }
void test27 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "" ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mCREATE_SEQUENCE ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mCREATE_SEQUENCE ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 292 : 25 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 292 : 26 : { } } finally { } }
void test32 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ) ; sQLLexer0 . mORA_CONFIGS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mORA_CONFIGS ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 299 : 21 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 299 : 22 : { } } finally { } }
void test34 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "" ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mARGUMENTS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGrammarFileName ( ) { return " / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g" ; }
void test39 ( ) throws Throwable { SQLLexer sQLLexer0 = new SQLLexer ( ) ; sQLLexer0 . mALTER_TABLE ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mALTER_TABLE ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 288 : 21 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 288 : 22 : { } } finally { } }
void test40 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "bTEc8 . rIW^ ? " ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mIDENTIFIER ( ) ; sQLLexer0 . mTokens ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mTokens ( ) throws RecognitionException { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 8 : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME ) int alt9 = 115 ; alt9 = dfa9 . predict ( input ) ; switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 10 : T__61 { mT__61 ( ) ; } break ; case 2 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 16 : T__62 { mT__62 ( ) ; } break ; case 3 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 22 : T__63 { mT__63 ( ) ; } break ; case 4 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 28 : T__64 { mT__64 ( ) ; } break ; case 5 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 34 : T__65 { mT__65 ( ) ; } break ; case 6 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 40 : T__66 { mT__66 ( ) ; } break ; case 7 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 46 : T__67 { mT__67 ( ) ; } break ; case 8 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 52 : T__68 { mT__68 ( ) ; } break ; case 9 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 58 : T__69 { mT__69 ( ) ; } break ; case 10 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 64 : T__70 { mT__70 ( ) ; } break ; case 11 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 70 : T__71 { mT__71 ( ) ; } break ; case 12 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 76 : T__72 { mT__72 ( ) ; } break ; case 13 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 82 : T__73 { mT__73 ( ) ; } break ; case 14 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 88 : T__74 { mT__74 ( ) ; } break ; case 15 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 94 : T__75 { mT__75 ( ) ; } break ; case 16 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 100 : T__76 { mT__76 ( ) ; } break ; case 17 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 106 : T__77 { mT__77 ( ) ; } break ; case 18 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 112 : T__78 { mT__78 ( ) ; } break ; case 19 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 118 : T__79 { mT__79 ( ) ; } break ; case 20 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 124 : T__80 { mT__80 ( ) ; } break ; case 21 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 130 : T__81 { mT__81 ( ) ; } break ; case 22 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 136 : T__82 { mT__82 ( ) ; } break ; case 23 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 142 : T__83 { mT__83 ( ) ; } break ; case 24 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 148 : T__84 { mT__84 ( ) ; } break ; case 25 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 154 : T__85 { mT__85 ( ) ; } break ; case 26 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 160 : T__86 { mT__86 ( ) ; } break ; case 27 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 166 : T__87 { mT__87 ( ) ; } break ; case 28 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 172 : T__88 { mT__88 ( ) ; } break ; case 29 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 178 : T__89 { mT__89 ( ) ; } break ; case 30 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 184 : T__90 { mT__90 ( ) ; } break ; case 31 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 190 : T__91 { mT__91 ( ) ; } break ; case 32 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 196 : T__92 { mT__92 ( ) ; } break ; case 33 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 202 : T__93 { mT__93 ( ) ; } break ; case 34 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 208 : T__94 { mT__94 ( ) ; } break ; case 35 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 214 : T__95 { mT__95 ( ) ; } break ; case 36 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 220 : T__96 { mT__96 ( ) ; } break ; case 37 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 226 : T__97 { mT__97 ( ) ; } break ; case 38 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 232 : T__98 { mT__98 ( ) ; } break ; case 39 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 238 : T__99 { mT__99 ( ) ; } break ; case 40 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 244 : T__100 { mT__100 ( ) ; } break ; case 41 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 251 : T__101 { mT__101 ( ) ; } break ; case 42 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 258 : T__102 { mT__102 ( ) ; } break ; case 43 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 265 : T__103 { mT__103 ( ) ; } break ; case 44 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 272 : T__104 { mT__104 ( ) ; } break ; case 45 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 279 : T__105 { mT__105 ( ) ; } break ; case 46 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 286 : T__106 { mT__106 ( ) ; } break ; case 47 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 293 : T__107 { mT__107 ( ) ; } break ; case 48 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 300 : T__108 { mT__108 ( ) ; } break ; case 49 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 307 : T__109 { mT__109 ( ) ; } break ; case 50 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 314 : T__110 { mT__110 ( ) ; } break ; case 51 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 321 : T__111 { mT__111 ( ) ; } break ; case 52 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 328 : T__112 { mT__112 ( ) ; } break ; case 53 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 335 : T__113 { mT__113 ( ) ; } break ; case 54 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 342 : T__114 { mT__114 ( ) ; } break ; case 55 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 349 : T__115 { mT__115 ( ) ; } break ; case 56 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 356 : T__116 { mT__116 ( ) ; } break ; case 57 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 363 : T__117 { mT__117 ( ) ; } break ; case 58 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 370 : T__118 { mT__118 ( ) ; } break ; case 59 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 377 : T__119 { mT__119 ( ) ; } break ; case 60 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 384 : T__120 { mT__120 ( ) ; } break ; case 61 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 391 : T__121 { mT__121 ( ) ; } break ; case 62 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 398 : T__122 { mT__122 ( ) ; } break ; case 63 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 405 : T__123 { mT__123 ( ) ; } break ; case 64 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 412 : T__124 { mT__124 ( ) ; } break ; case 65 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 419 : T__125 { mT__125 ( ) ; } break ; case 66 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 426 : T__126 { mT__126 ( ) ; } break ; case 67 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 433 : T__127 { mT__127 ( ) ; } break ; case 68 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 440 : T__128 { mT__128 ( ) ; } break ; case 69 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 447 : T__129 { mT__129 ( ) ; } break ; case 70 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 454 : T__130 { mT__130 ( ) ; } break ; case 71 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 461 : T__131 { mT__131 ( ) ; } break ; case 72 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 468 : T__132 { mT__132 ( ) ; } break ; case 73 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 475 : T__133 { mT__133 ( ) ; } break ; case 74 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 482 : T__134 { mT__134 ( ) ; } break ; case 75 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 489 : T__135 { mT__135 ( ) ; } break ; case 76 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 496 : T__136 { mT__136 ( ) ; } break ; case 77 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 503 : T__137 { mT__137 ( ) ; } break ; case 78 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 510 : OR { mOR ( ) ; } break ; case 79 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 513 : AND { mAND ( ) ; } break ; case 80 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 517 : XOR { mXOR ( ) ; } break ; case 81 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 521 : EQ { mEQ ( ) ; } break ; case 82 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 524 : BANGEQ { mBANGEQ ( ) ; } break ; case 83 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 531 : LTGT { mLTGT ( ) ; } break ; case 84 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 536 : GT { mGT ( ) ; } break ; case 85 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 539 : GE { mGE ( ) ; } break ; case 86 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 542 : LT { mLT ( ) ; } break ; case 87 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 545 : LE { mLE ( ) ; } break ; case 88 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 548 : IS { mIS ( ) ; } break ; case 89 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 551 : NOT { mNOT ( ) ; } break ; case 90 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 555 : NULL { mNULL ( ) ; } break ; case 91 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 560 : IN { mIN ( ) ; } break ; case 92 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 563 : BETWEEN { mBETWEEN ( ) ; } break ; case 93 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 571 : PLUS { mPLUS ( ) ; } break ; case 94 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 576 : SUB { mSUB ( ) ; } break ; case 95 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 580 : STAR { mSTAR ( ) ; } break ; case 96 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 585 : SLASH { mSLASH ( ) ; } break ; case 97 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 591 : PERCENT { mPERCENT ( ) ; } break ; case 98 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 599 : BARBAR { mBARBAR ( ) ; } break ; case 99 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 606 : ROWID { mROWID ( ) ; } break ; case 100 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 612 : NUMBER { mNUMBER ( ) ; } break ; case 101 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 619 : VARCHAR2 { mVARCHAR2 ( ) ; } break ; case 102 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 628 : NVARCHAR2 { mNVARCHAR2 ( ) ; } break ; case 103 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 638 : BYTE { mBYTE ( ) ; } break ; case 104 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 643 : CHAR { mCHAR ( ) ; } break ; case 105 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 648 : DATE { mDATE ( ) ; } break ; case 106 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 653 : TIMESTAMP { mTIMESTAMP ( ) ; } break ; case 107 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 663 : BEFORE { mBEFORE ( ) ; } break ; case 108 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 670 : PRIMARY { mPRIMARY ( ) ; } break ; case 109 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 678 : DEFAULT { mDEFAULT ( ) ; } break ; case 110 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 686 : IDENTIFIER { mIDENTIFIER ( ) ; } break ; case 111 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 697 : INT { mINT ( ) ; } break ; case 112 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 701 : COMMENT { mCOMMENT ( ) ; } break ; case 113 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 709 : WS { mWS ( ) ; } break ; case 114 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 712 : STRING { mSTRING ( ) ; } break ; case 115 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 719 : QUOTED_NAME { mQUOTED_NAME ( ) ; } break ; } }
void test46 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( " ! ! ! ! ! ! ! ! ! memo array is null for " ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) sQLLexer0 ) ; / / Undeclared exception ! try { tokenRewriteStream0 . LT ( ( - 559 ) ) ; fail ( "Expecting exception : RuntimeException" ) ; } catch ( RuntimeException e ) { / * * SQLLexer error * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLLexer ( ) { ; }
void test47 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "bTEc8 . rIW^ ? " ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mCREATE_TABLE ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mCREATE_TABLE ( ) throws RecognitionException { try { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 286 : 22 : ( ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 286 : 23 : { } } finally { } }
void test51 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "5" ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . nextToken ( ) ; sQLLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Token nextToken ( ) { while ( true ) { state . token = null ; state . channel = Token . DEFAULT_CHANNEL ; state . tokenStartCharIndex = input . index ( ) ; state . tokenStartCharPositionInLine = input . getCharPositionInLine ( ) ; state . tokenStartLine = input . getLine ( ) ; state . text = null ; if ( input . LA ( 1 ) = = CharStream . EOF ) { return Token . EOF_TOKEN ; } try { mTokens ( ) ; if ( state . token = = null ) { emit ( ) ; } else if ( state . token = = Token . SKIP_TOKEN ) { continue ; } return state . token ; } catch ( RecognitionException re ) { reportError ( re ) ; throw new RuntimeException ( getClass ( ) . getSimpleName ( ) + " error" , re ) ; / / or throw Error } } }
void test52 ( ) throws Throwable { char [ ] charArray0 = new char [ 6 ] ; charArray0 [ 0 ] = 'R' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'G' ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mIDENTIFIER ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mIDENTIFIER ( ) throws RecognitionException { try { int _type = IDENTIFIER ; int _channel = DEFAULT_TOKEN_CHANNEL ; / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 341 : 13 : ( ( 'a' . . 'z' | 'A' . . 'Z' | '_' ) ( 'a' . . 'z' | 'A' . . 'Z' | '0' . . '9' | '_' | '$' ) * ) / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 341 : 15 : ( 'a' . . 'z' | 'A' . . 'Z' | '_' ) ( 'a' . . 'z' | 'A' . . 'Z' | '0' . . '9' | '_' | '$' ) * { if ( ( input . LA ( 1 ) > = 'A' & & input . LA ( 1 ) < = 'Z' ) | | input . LA ( 1 ) = = '_' | | ( input . LA ( 1 ) > = 'a' & & input . LA ( 1 ) < = 'z' ) ) { input . consume ( ) ; } else { MismatchedSetException mse = new MismatchedSetException ( null , input ) ; recover ( mse ) ; throw mse ; } / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 341 : 39 : ( 'a' . . 'z' | 'A' . . 'Z' | '0' . . '9' | '_' | '$' ) * loop1 : do { int alt1 = 2 ; int LA1_0 = input . LA ( 1 ) ; if ( ( LA1_0 = = '$' | | ( LA1_0 > = '0' & & LA1_0 < = '9' ) | | ( LA1_0 > = 'A' & & LA1_0 < = 'Z' ) | | LA1_0 = = '_' | | ( LA1_0 > = 'a' & & LA1_0 < = 'z' ) ) ) { alt1 = 1 ; } switch ( alt1 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : { if ( input . LA ( 1 ) = = '$' | | ( input . LA ( 1 ) > = '0' & & input . LA ( 1 ) < = '9' ) | | ( input . LA ( 1 ) > = 'A' & & input . LA ( 1 ) < = 'Z' ) | | input . LA ( 1 ) = = '_' | | ( input . LA ( 1 ) > = 'a' & & input . LA ( 1 ) < = 'z' ) ) { input . consume ( ) ; } else { MismatchedSetException mse = new MismatchedSetException ( null , input ) ; recover ( mse ) ; throw mse ; } } break ; default : break loop1 ; } } while ( true ) ; } state . type = _type ; state . channel = _channel ; } finally { } }
void test54 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "bTEc . rID^ ? " ) ; SQLLexer sQLLexer0 = new SQLLexer ( ( CharStream ) aNTLRStringStream0 ) ; sQLLexer0 . mTokens ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mTokens ( ) throws RecognitionException { / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 8 : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME ) int alt9 = 115 ; alt9 = dfa9 . predict ( input ) ; switch ( alt9 ) { case 1 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 10 : T__61 { mT__61 ( ) ; } break ; case 2 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 16 : T__62 { mT__62 ( ) ; } break ; case 3 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 22 : T__63 { mT__63 ( ) ; } break ; case 4 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 28 : T__64 { mT__64 ( ) ; } break ; case 5 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 34 : T__65 { mT__65 ( ) ; } break ; case 6 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 40 : T__66 { mT__66 ( ) ; } break ; case 7 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 46 : T__67 { mT__67 ( ) ; } break ; case 8 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 52 : T__68 { mT__68 ( ) ; } break ; case 9 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 58 : T__69 { mT__69 ( ) ; } break ; case 10 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 64 : T__70 { mT__70 ( ) ; } break ; case 11 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 70 : T__71 { mT__71 ( ) ; } break ; case 12 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 76 : T__72 { mT__72 ( ) ; } break ; case 13 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 82 : T__73 { mT__73 ( ) ; } break ; case 14 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 88 : T__74 { mT__74 ( ) ; } break ; case 15 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 94 : T__75 { mT__75 ( ) ; } break ; case 16 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 100 : T__76 { mT__76 ( ) ; } break ; case 17 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 106 : T__77 { mT__77 ( ) ; } break ; case 18 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 112 : T__78 { mT__78 ( ) ; } break ; case 19 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 118 : T__79 { mT__79 ( ) ; } break ; case 20 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 124 : T__80 { mT__80 ( ) ; } break ; case 21 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 130 : T__81 { mT__81 ( ) ; } break ; case 22 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 136 : T__82 { mT__82 ( ) ; } break ; case 23 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 142 : T__83 { mT__83 ( ) ; } break ; case 24 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 148 : T__84 { mT__84 ( ) ; } break ; case 25 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 154 : T__85 { mT__85 ( ) ; } break ; case 26 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 160 : T__86 { mT__86 ( ) ; } break ; case 27 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 166 : T__87 { mT__87 ( ) ; } break ; case 28 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 172 : T__88 { mT__88 ( ) ; } break ; case 29 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 178 : T__89 { mT__89 ( ) ; } break ; case 30 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 184 : T__90 { mT__90 ( ) ; } break ; case 31 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 190 : T__91 { mT__91 ( ) ; } break ; case 32 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 196 : T__92 { mT__92 ( ) ; } break ; case 33 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 202 : T__93 { mT__93 ( ) ; } break ; case 34 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 208 : T__94 { mT__94 ( ) ; } break ; case 35 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 214 : T__95 { mT__95 ( ) ; } break ; case 36 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 220 : T__96 { mT__96 ( ) ; } break ; case 37 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 226 : T__97 { mT__97 ( ) ; } break ; case 38 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 232 : T__98 { mT__98 ( ) ; } break ; case 39 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 238 : T__99 { mT__99 ( ) ; } break ; case 40 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 244 : T__100 { mT__100 ( ) ; } break ; case 41 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 251 : T__101 { mT__101 ( ) ; } break ; case 42 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 258 : T__102 { mT__102 ( ) ; } break ; case 43 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 265 : T__103 { mT__103 ( ) ; } break ; case 44 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 272 : T__104 { mT__104 ( ) ; } break ; case 45 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 279 : T__105 { mT__105 ( ) ; } break ; case 46 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 286 : T__106 { mT__106 ( ) ; } break ; case 47 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 293 : T__107 { mT__107 ( ) ; } break ; case 48 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 300 : T__108 { mT__108 ( ) ; } break ; case 49 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 307 : T__109 { mT__109 ( ) ; } break ; case 50 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 314 : T__110 { mT__110 ( ) ; } break ; case 51 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 321 : T__111 { mT__111 ( ) ; } break ; case 52 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 328 : T__112 { mT__112 ( ) ; } break ; case 53 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 335 : T__113 { mT__113 ( ) ; } break ; case 54 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 342 : T__114 { mT__114 ( ) ; } break ; case 55 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 349 : T__115 { mT__115 ( ) ; } break ; case 56 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 356 : T__116 { mT__116 ( ) ; } break ; case 57 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 363 : T__117 { mT__117 ( ) ; } break ; case 58 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 370 : T__118 { mT__118 ( ) ; } break ; case 59 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 377 : T__119 { mT__119 ( ) ; } break ; case 60 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 384 : T__120 { mT__120 ( ) ; } break ; case 61 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 391 : T__121 { mT__121 ( ) ; } break ; case 62 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 398 : T__122 { mT__122 ( ) ; } break ; case 63 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 405 : T__123 { mT__123 ( ) ; } break ; case 64 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 412 : T__124 { mT__124 ( ) ; } break ; case 65 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 419 : T__125 { mT__125 ( ) ; } break ; case 66 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 426 : T__126 { mT__126 ( ) ; } break ; case 67 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 433 : T__127 { mT__127 ( ) ; } break ; case 68 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 440 : T__128 { mT__128 ( ) ; } break ; case 69 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 447 : T__129 { mT__129 ( ) ; } break ; case 70 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 454 : T__130 { mT__130 ( ) ; } break ; case 71 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 461 : T__131 { mT__131 ( ) ; } break ; case 72 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 468 : T__132 { mT__132 ( ) ; } break ; case 73 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 475 : T__133 { mT__133 ( ) ; } break ; case 74 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 482 : T__134 { mT__134 ( ) ; } break ; case 75 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 489 : T__135 { mT__135 ( ) ; } break ; case 76 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 496 : T__136 { mT__136 ( ) ; } break ; case 77 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 503 : T__137 { mT__137 ( ) ; } break ; case 78 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 510 : OR { mOR ( ) ; } break ; case 79 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 513 : AND { mAND ( ) ; } break ; case 80 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 517 : XOR { mXOR ( ) ; } break ; case 81 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 521 : EQ { mEQ ( ) ; } break ; case 82 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 524 : BANGEQ { mBANGEQ ( ) ; } break ; case 83 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 531 : LTGT { mLTGT ( ) ; } break ; case 84 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 536 : GT { mGT ( ) ; } break ; case 85 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 539 : GE { mGE ( ) ; } break ; case 86 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 542 : LT { mLT ( ) ; } break ; case 87 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 545 : LE { mLE ( ) ; } break ; case 88 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 548 : IS { mIS ( ) ; } break ; case 89 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 551 : NOT { mNOT ( ) ; } break ; case 90 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 555 : NULL { mNULL ( ) ; } break ; case 91 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 560 : IN { mIN ( ) ; } break ; case 92 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 563 : BETWEEN { mBETWEEN ( ) ; } break ; case 93 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 571 : PLUS { mPLUS ( ) ; } break ; case 94 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 576 : SUB { mSUB ( ) ; } break ; case 95 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 580 : STAR { mSTAR ( ) ; } break ; case 96 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 585 : SLASH { mSLASH ( ) ; } break ; case 97 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 591 : PERCENT { mPERCENT ( ) ; } break ; case 98 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 599 : BARBAR { mBARBAR ( ) ; } break ; case 99 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 606 : ROWID { mROWID ( ) ; } break ; case 100 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 612 : NUMBER { mNUMBER ( ) ; } break ; case 101 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 619 : VARCHAR2 { mVARCHAR2 ( ) ; } break ; case 102 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 628 : NVARCHAR2 { mNVARCHAR2 ( ) ; } break ; case 103 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 638 : BYTE { mBYTE ( ) ; } break ; case 104 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 643 : CHAR { mCHAR ( ) ; } break ; case 105 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 648 : DATE { mDATE ( ) ; } break ; case 106 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 653 : TIMESTAMP { mTIMESTAMP ( ) ; } break ; case 107 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 663 : BEFORE { mBEFORE ( ) ; } break ; case 108 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 670 : PRIMARY { mPRIMARY ( ) ; } break ; case 109 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 678 : DEFAULT { mDEFAULT ( ) ; } break ; case 110 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 686 : IDENTIFIER { mIDENTIFIER ( ) ; } break ; case 111 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 697 : INT { mINT ( ) ; } break ; case 112 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 701 : COMMENT { mCOMMENT ( ) ; } break ; case 113 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 709 : WS { mWS ( ) ; } break ; case 114 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 712 : STRING { mSTRING ( ) ; } break ; case 115 : / / / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g : 1 : 719 : QUOTED_NAME { mQUOTED_NAME ( ) ; } break ; } }
void test1 ( ) throws Throwable { ANTLRNoCaseFileStream aNTLRNoCaseFileStream0 = new ANTLRNoCaseFileStream ( ( String ) null , ( String ) null ) ; int int0 = aNTLRNoCaseFileStream0 . LT ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ANTLRNoCaseFileStream ( String fileName ) throws IOException { this ( fileName , null ) ; }
void test2 ( ) throws Throwable { ANTLRNoCaseFileStream aNTLRNoCaseFileStream0 = new ANTLRNoCaseFileStream ( ( String ) null , ( String ) null ) ; int int0 = aNTLRNoCaseFileStream0 . LT ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ANTLRNoCaseFileStream ( String fileName ) throws IOException { this ( fileName , null ) ; }
void test0 ( ) throws Throwable { NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "ETITY - t * n3arsd" ) ; String string0 = naturalPkIdentity0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test0 ( ) throws Throwable { NKBuilder nKBuilder0 = new NKBuilder ( ) ; String string0 = nKBuilder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { NKBuilder nKBuilder0 = new NKBuilder ( ) ; nKBuilder0 . empty = false ; nKBuilder0 . addComponent ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { NKBuilder nKBuilder0 = new NKBuilder ( ) ; nKBuilder0 . addComponent ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test2 ( ) throws Throwable { IdentityProvider identityProvider0 = new IdentityProvider ( ) ; IdentityModel identityModel0 = identityProvider0 . getIdentity ( "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IdentityModel getIdentity ( String tableName ) { return getIdentity ( tableName , true ) ; }
void test3 ( ) throws Throwable { IdentityProvider identityProvider0 = new IdentityProvider ( ) ; String [ ] stringArray0 = new String [ 3 ] ; UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "i" , stringArray0 ) ; identityProvider0 . registerIdentity ( ( IdentityModel ) uniqueKeyIdentity0 , "i" ) ; UniqueKeyIdentity uniqueKeyIdentity1 = ( UniqueKeyIdentity ) identityProvider0 . getIdentity ( "i" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 17 ] ; UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "Wcp" , stringArray0 ) ; UniqueKeyIdentity . ColumnToNkConverter uniqueKeyIdentity_ColumnToNkConverter0 = uniqueKeyIdentity0 . new ColumnToNkConverter ( "Wcp" , ( KeyMapper ) null ) ; UniqueKeyIdentity . UniqueKeyNkPkIterator uniqueKeyIdentity_UniqueKeyNkPkIterator0 = uniqueKeyIdentity0 . new UniqueKeyNkPkIterator ( ( TableRowIterator ) null , uniqueKeyIdentity_ColumnToNkConverter0 , stringArray0 ) ; String [ ] stringArray1 = uniqueKeyIdentity_UniqueKeyNkPkIterator0 . getColumnLabels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test1 ( ) throws Throwable { UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "CONSTNT" , ( String [ ] ) null ) ; String string0 = uniqueKeyIdentity0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "njUqG" , stringArray0 ) ; UniqueKeyIdentity . ColumnToNkConverter uniqueKeyIdentity_ColumnToNkConverter0 = uniqueKeyIdentity0 . new ColumnToNkConverter ( ( String ) null , ( KeyMapper ) null ) ; Object [ ] objectArray0 = new Object [ 8 ] ; Object [ ] objectArray1 = uniqueKeyIdentity_ColumnToNkConverter0 . convert ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test0 ( ) throws Throwable { NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "x { Nx } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { NoIdentity noIdentity0 = new NoIdentity ( "6~1Z < e * o / P75TKd . - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractNK ( Object [ ] nkPkTuple ) { return String . valueOf ( nkPkTuple [ 0 ] ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "boldYellow" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object [ ] > query ( String query , Connection connection ) throws SQLException { ResultSet resultSet = null ; try { resultSet = executeQuery ( query , connection ) ; return parseResultSet ( resultSet ) ; } finally { if ( resultSet ! = null ) closeResultSetAndStatement ( resultSet ) ; } }
void test3 ( ) throws Throwable { NoIdentity noIdentity0 = new NoIdentity ( "6~1Z < e * o / P75TKd . - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test4 ( ) throws Throwable { NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test5 ( ) throws Throwable { NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity ( "Zy ] s" , "Zy ] s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void handleMissingOwner ( String ownedTableName , DBRow ownedEntity , String ownerTableName , Object ownerId , String sourceDbId ) { String message = "Owner of " + sourceDbId + ' . ' + ownedTableName + ' [ ' + ArrayFormat . format ( ownedEntity . getPKValues ( ) ) + " ] was dropped . " + "Missing : " + sourceDbId + ' . ' + ownerTableName + ' [ ' + ownerId + " ] . " + "Possibly it was rejected or it was missing in the NK query" ; errorHandler . handleError ( message ) ; }
void test6 ( ) throws Throwable { NoIdentity noIdentity0 = new NoIdentity ( "6~1Z < e * o / P75TKd . - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test7 ( ) throws Throwable { NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity ( "m } F7j = 0" , "m } F7j = 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return id . hashCode ( ) ; }
void test8 ( ) throws Throwable { NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "x { Nx } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test9 ( ) throws Throwable { NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "x { Nx } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test10 ( ) throws Throwable { NoIdentity noIdentity0 = new NoIdentity ( "6~1Z < e * o / P75TKd . - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test11 ( ) throws Throwable { NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "m } F7j = 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test12 ( ) throws Throwable { NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test13 ( ) throws Throwable { NoIdentity noIdentity0 = new NoIdentity ( "x { Nx } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test14 ( ) throws Throwable { NoIdentity noIdentity0 = new NoIdentity ( " | cm ( 7 : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; IdentityProvider identityProvider0 = new IdentityProvider ( ) ; SubNkPkQueryIdentity subNkPkQueryIdentity0 = new SubNkPkQueryIdentity ( "" , stringArray0 , identityProvider0 ) ; subNkPkQueryIdentity0 . setSubNkPkQuery ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; IdentityProvider identityProvider0 = new IdentityProvider ( ) ; SubNkPkQueryIdentity subNkPkQueryIdentity0 = new SubNkPkQueryIdentity ( "" , stringArray0 , identityProvider0 ) ; String string0 = subNkPkQueryIdentity0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test0 ( ) throws Throwable { NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity ( " < : r = LFdyfLI" , " ] 7W3oIu" ) ; String string0 = nkPkQueryIdentity0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test0 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; MemKeyMapper memKeyMapper0 = new MemKeyMapper ( ( Connection ) jdbcConnection0 , "" , ( Connection ) jdbcConnection0 , "SF" , ( IdentityProvider ) null , ( Database ) null ) ; IdentityProvider identityProvider0 = memKeyMapper0 . getIdentityProvider ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IdentityProvider getIdentityProvider ( ) { return identityProvider ; }
void test0 ( ) throws Throwable { SimpleTranscoder simpleTranscoder0 = new SimpleTranscoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { IdentityParseContext identityParseContext0 = new IdentityParseContext ( ) ; IdentityProvider identityProvider0 = identityParseContext0 . getIdentityProvider ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IdentityProvider getIdentityProvider ( ) { return identityProvider ; }
void test2 ( ) throws Throwable { Recover recover0 = new Recover ( ) ; IdentityProvider identityProvider0 = new IdentityProvider ( ) ; MemKeyMapper memKeyMapper0 = new MemKeyMapper ( ( Connection ) null , "oY~ } lif_O1R" , ( Connection ) null , "UY\"b = V8 ! " , identityProvider0 , ( Database ) null ) ; NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "oY~ } lif_O1R" ) ; SourceTableMapper sourceTableMapper0 = new SourceTableMapper ( ( KeyMapper ) memKeyMapper0 , ( Connection ) null , "oY~ } lif_O1R" , ( IdentityModel ) naturalPkIdentity0 , ( Database ) null ) ; sourceTableMapper0 . store ( ( Object ) "isolation" , "oY~ } lif_O1R" , ( Object ) recover0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void store ( String sourceDbId , IdentityModel identity , String naturalKey , Object sourcePK , Object targetPK ) ; Object getTargetPK ( String sourceDbId , IdentityModel identity , Object sourcePK ) ; Object getTargetPK ( IdentityModel identity , String naturalKey ) ; String getNaturalKey ( String dbId , IdentityModel identity , Object sourcePK ) ; }
void test1 ( ) throws Throwable { IdentityProvider identityProvider0 = new IdentityProvider ( ) ; MemKeyMapper memKeyMapper0 = new MemKeyMapper ( ( Connection ) null , "" , ( Connection ) null , "" , identityProvider0 , ( Database ) null ) ; TargetDatabaseMapper targetDatabaseMapper0 = memKeyMapper0 . targetDBMapper ; String [ ] stringArray0 = new String [ 4 ] ; NoIdentity noIdentity0 = new NoIdentity ( "" ) ; targetDatabaseMapper0 . store ( ( IdentityModel ) noIdentity0 , "" , ( Object ) "it_IT" ) ; UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "" , stringArray0 ) ; String string0 = ( String ) memKeyMapper0 . getTargetPK ( ( IdentityModel ) uniqueKeyIdentity0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTargetPK ( String sourceDbId , IdentityModel identity , Object sourcePK ) ; Object getTargetPK ( IdentityModel identity , String naturalKey ) ; String getNaturalKey ( String dbId , IdentityModel identity , Object sourcePK ) ; }
void test0 ( ) throws Throwable { SourceDatabaseMapper sourceDatabaseMapper0 = new SourceDatabaseMapper ( ( KeyMapper ) null , ( Connection ) null , "" , ( Database ) null ) ; String [ ] stringArray0 = new String [ 4 ] ; UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity ( "" , stringArray0 ) ; sourceDatabaseMapper0 . store ( ( IdentityModel ) uniqueKeyIdentity0 , ( Object ) "" , "" , ( Object ) null ) ; String string0 = sourceDatabaseMapper0 . getNaturalKey ( ( IdentityModel ) uniqueKeyIdentity0 , ( Object ) "socketBufferSize" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNaturalKey ( String dbId , IdentityModel identity , Object sourcePK ) ; }
void test1 ( ) throws Throwable { IdentityProvider identityProvider0 = new IdentityProvider ( ) ; MemKeyMapper memKeyMapper0 = new MemKeyMapper ( ( Connection ) null , "" , ( Connection ) null , "" , identityProvider0 , ( Database ) null ) ; NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "" ) ; TargetTableMapper targetTableMapper0 = new TargetTableMapper ( ( KeyMapper ) memKeyMapper0 , ( Connection ) null , "" , ( IdentityModel ) naturalPkIdentity0 , ( Database ) null ) ; targetTableMapper0 . store ( ( Object ) "" , "" ) ; String string0 = ( String ) targetTableMapper0 . store ( ( Object ) "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void store ( String sourceDbId , IdentityModel identity , String naturalKey , Object sourcePK , Object targetPK ) ; Object getTargetPK ( String sourceDbId , IdentityModel identity , Object sourcePK ) ; Object getTargetPK ( IdentityModel identity , String naturalKey ) ; String getNaturalKey ( String dbId , IdentityModel identity , Object sourcePK ) ; }
void test2 ( ) throws Throwable { IdentityProvider identityProvider0 = new IdentityProvider ( ) ; MemKeyMapper memKeyMapper0 = new MemKeyMapper ( ( Connection ) null , "" , ( Connection ) null , "" , identityProvider0 , ( Database ) null ) ; NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity ( "" ) ; TargetTableMapper targetTableMapper0 = new TargetTableMapper ( ( KeyMapper ) memKeyMapper0 , ( Connection ) null , "" , ( IdentityModel ) naturalPkIdentity0 , ( Database ) null ) ; targetTableMapper0 . store ( ( Object ) "" , "" ) ; String string0 = targetTableMapper0 . getNaturalKey ( ( Object ) identityProvider0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNaturalKey ( String dbId , IdentityModel identity , Object sourcePK ) ; }
void test0 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test1 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( " : $GfVu4z~ < " , " : $GfVu4z~ < " , " : $GfVu4z~ < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return id . hashCode ( ) ; }
void test2 ( ) throws Throwable { ObjectOrArray objectOrArray0 = new ObjectOrArray ( ( Object ) "_ { . 2 > v" ) ; GlobalRowId globalRowId0 = new GlobalRowId ( "_ { . 2 > v" , "_ { . 2 > v" , ( Object ) objectOrArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test3 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test4 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( " : $GfVu4z~ < " , " : $GfVu4z~ < " , " : $GfVu4z~ < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test5 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( " : $GfVu4z~ < " , " : $GfVu4z~ < " , " : $GfVu4z~ < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test6 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( " : $GfVu4z~ < " , " : $GfVu4z~ < " , " : $GfVu4z~ < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getSimpleName ( ) + ' [ ' + query + ' ] ' ; }
void test7 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test8 ( ) throws Throwable { GlobalRowId globalRowId0 = new GlobalRowId ( " : $GfVu4z~ < " , " : $GfVu4z~ < " , " : $GfVu4z~ < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) return false ; JDBCDriverInfo that = ( JDBCDriverInfo ) obj ; return this . id . equals ( that . id ) ; }
void test0 ( ) throws Throwable { DatabasePane databasePane0 = new DatabasePane ( ( TextFieldValueProvider ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEnvironment ( String environment ) throws ConnectFailedException , ImportFailedException { if ( importer ! = null ) { try { importer . close ( ) ; } catch ( IOException e ) { LOGGER . error ( "Error closing " + getClass ( ) . getName ( ) , e ) ; } if ( tree ! = null ) scrollPane . remove ( tree ) ; } new Thread ( new Importer ( environment ) ) . start ( ) ; }
void test1 ( ) throws Throwable { DatabasePane databasePane0 = new DatabasePane ( ( TextFieldValueProvider ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabasePane ( TextFieldValueProvider exclusionPatternProvider ) { super ( new BorderLayout ( ) ) ; this . exclusionPatternProvider = exclusionPatternProvider ; this . scrollPane = new JScrollPane ( ) ; add ( scrollPane , BorderLayout . CENTER ) ; }
void test0 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( " { rbwQ%" ) ; TextFieldValueProvider textFieldValueProvider0 = new TextFieldValueProvider ( ( JTextField ) jPasswordField0 ) ; String string0 = textFieldValueProvider0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return field . getText ( ) ; }
