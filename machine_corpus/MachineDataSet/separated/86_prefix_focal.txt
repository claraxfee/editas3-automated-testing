void test0 ( ) throws Throwable { LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test1 ( ) throws Throwable { LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test2 ( ) throws Throwable { LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test3 ( ) throws Throwable { LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test0 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . add ( "" , ( - 1936 ) , ( - 1936 ) ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , ( Program ) null , ( HardwareSpecification ) null , ( - 1936 ) , ( DebugInfo ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Program getProgram ( ) { if ( hasErrors ( ) ) { throw new IllegalStateException ( "Can not get the program when there are errors . " ) ; } return program ; }
void test1 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; short [ ] shortArray0 = new short [ 7 ] ; Program program0 = new Program ( shortArray0 ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , program0 , hardwareSpecification0 , ( - 753 ) , debugInfo0 , "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxProcessorSpeed ( ) { return maxProcessorSpeed ; }
void test6 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; short [ ] shortArray0 = new short [ 7 ] ; Program program0 = new Program ( shortArray0 ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , program0 , hardwareSpecification0 , ( - 753 ) , debugInfo0 , "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxProcessorSpeed ( ) { return maxProcessorSpeed ; }
void test7 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; short [ ] shortArray0 = new short [ 2 ] ; Program program0 = new Program ( shortArray0 ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; errors0 . add ( ( String ) null , ( int ) ( short ) 0 ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , program0 , hardwareSpecification0 , ( int ) ( short ) 0 , debugInfo0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RobotFactory createRobotFactory ( String name ) { if ( hasErrors ( ) ) { throw new IllegalStateException ( "Can not create an entrant with errors . Check CompilerOutput . hasErrors ( ) first . " ) ; } return new RobotFactory ( name , getProgram ( ) , getHardwareSpecification ( ) , getDebugInfo ( ) , getMaxProcessorSpeed ( ) , getMessage ( ) ) ; }
void test8 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . info ( "M1x . yTa" ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , ( Program ) null , hardwareSpecification0 , ( int ) ( short ) 512 , debugInfo0 , "M1x . yTa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test9 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; short [ ] shortArray0 = new short [ 7 ] ; Program program0 = new Program ( shortArray0 ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , program0 , hardwareSpecification0 , ( - 753 ) , debugInfo0 , "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HardwareSpecification getHardwareSpecification ( ) { if ( hasErrors ( ) ) { throw new IllegalStateException ( "Can not get the hardware specification when there are errors . " ) ; } return hardwareSpecification ; }
void test10 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . info ( "OutOfBounds : @" ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , ( Program ) null , ( HardwareSpecification ) null , 149 , debugInfo0 , "Unknown instruction : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxProcessorSpeed ( ) { return maxProcessorSpeed ; }
void test11 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . info ( "w1kdmdbcvvk < cD ) " ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = new AtRobotCompilerOutput ( errors0 , ( Program ) null , ( HardwareSpecification ) null , 37 , ( DebugInfo ) null , "w1kdmdbcvvk < cD ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DebugInfo getDebugInfo ( ) { return debugInfo ; }
void test2 ( ) throws Throwable { AtRobotCompiler atRobotCompiler0 = new AtRobotCompiler ( ) ; char [ ] charArray0 = new char [ 9 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) charArrayReader0 , 17 ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) pushbackReader0 ) ; AtRobotCompilerOutput atRobotCompilerOutput0 = atRobotCompiler0 . compile ( ( Reader ) lineNumberReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test1 ( ) throws Throwable { RobotConfigurer robotConfigurer0 = new RobotConfigurer ( ) ; HardwareBus hardwareBus0 = new HardwareBus ( ) ; robotConfigurer0 . setHardwareBus ( hardwareBus0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test4 ( ) throws Throwable { RobotConfigurer robotConfigurer0 = new RobotConfigurer ( ) ; Transceiver transceiver0 = new Transceiver ( ) ; robotConfigurer0 . setTransceiver ( transceiver0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test9 ( ) throws Throwable { RobotConfigurer robotConfigurer0 = new RobotConfigurer ( ) ; Transponder transponder0 = new Transponder ( ) ; robotConfigurer0 . setTransponder ( transponder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test10 ( ) throws Throwable { RobotConfigurer robotConfigurer0 = new RobotConfigurer ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 119 ) ; robotConfigurer0 . setLowerMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " ! % > 2rUV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test1 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " [ 3HBn ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test2 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " [ 3HBn ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1 ) , " [ 3HBn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test4 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " ! % > 2rUV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test5 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1547 ) , " ; v = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test6 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1411 ) , "@'I'srQe3nQUo" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test7 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " [ 3HBn ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test8 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1411 ) , "@'I'srQe3nQUo" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test9 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1411 ) , "@'I'srQe3nQUo" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test10 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " - 9fm | ? W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test11 ( ) throws Throwable { Token token0 = Token . parse ( 0 , " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test12 ( ) throws Throwable { Token token0 = Token . parse ( 16 , " - j = , 'fx~7m } / i" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test13 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1547 ) , " ; v = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test14 ( ) throws Throwable { Token token0 = Token . parse ( ( - 1547 ) , " ; v = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "" ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) stringReader0 , 35 ) ; AtRobotLineLexer atRobotLineLexer0 = new AtRobotLineLexer ( lineNumberReader0 , ( LineVisitor ) null ) ; int int0 = atRobotLineLexer0 . getLineNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test1 ( ) throws Throwable { char [ ] charArray0 = new char [ 14 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) charArrayReader0 , ( int ) 'l' ) ; AtRobotLineLexer atRobotLineLexer0 = new AtRobotLineLexer ( lineNumberReader0 , ( LineVisitor ) null ) ; / / Undeclared exception ! try { atRobotLineLexer0 . visitAllLines ( ) ; fail ( "Expecting exception : NullPointerException" ) ; } catch ( NullPointerException e ) { } "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test2 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "" ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) stringReader0 , 35 ) ; AtRobotLineLexer atRobotLineLexer0 = new AtRobotLineLexer ( lineNumberReader0 , ( LineVisitor ) null ) ; atRobotLineLexer0 . visitAllLines ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test3 ( ) throws Throwable { int int0 = AtRobotLineLexer . parseNumber ( "0X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parseNumber ( String token ) { int value = 0 ; int radix ; boolean negative = token . charAt ( 0 ) = = ' - ' ; if ( negative ) { token = token . substring ( 1 ) ; } if ( token . endsWith ( "h" ) ) { token = token . substring ( 0 , token . length ( ) - 1 ) ; radix = 16 ; } else if ( token . startsWith ( "0x" ) | | token . startsWith ( "0X" ) ) { token = token . substring ( 2 ) ; radix = 16 ; } else { radix = 10 ; } for ( int i = 0 ; i < token . length ( ) ; + + i ) { int digit = Character . digit ( token . charAt ( i ) , radix ) ; if ( digit < 0 ) { return Integer . MIN_VALUE ; } value = value * radix + digit ; } return negative ? - value : value ; }
void test4 ( ) throws Throwable { int int0 = AtRobotLineLexer . parseNumber ( " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parseNumber ( String token ) { int value = 0 ; int radix ; boolean negative = token . charAt ( 0 ) = = ' - ' ; if ( negative ) { token = token . substring ( 1 ) ; } if ( token . endsWith ( "h" ) ) { token = token . substring ( 0 , token . length ( ) - 1 ) ; radix = 16 ; } else if ( token . startsWith ( "0x" ) | | token . startsWith ( "0X" ) ) { token = token . substring ( 2 ) ; radix = 16 ; } else { radix = 10 ; } for ( int i = 0 ; i < token . length ( ) ; + + i ) { int digit = Character . digit ( token . charAt ( i ) , radix ) ; if ( digit < 0 ) { return Integer . MIN_VALUE ; } value = value * radix + digit ; } return negative ? - value : value ; }
void test5 ( ) throws Throwable { int int0 = AtRobotLineLexer . parseNumber ( "0X0M^5uo / ) gh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parseNumber ( String token ) { int value = 0 ; int radix ; boolean negative = token . charAt ( 0 ) = = ' - ' ; if ( negative ) { token = token . substring ( 1 ) ; } if ( token . endsWith ( "h" ) ) { token = token . substring ( 0 , token . length ( ) - 1 ) ; radix = 16 ; } else if ( token . startsWith ( "0x" ) | | token . startsWith ( "0X" ) ) { token = token . substring ( 2 ) ; radix = 16 ; } else { radix = 10 ; } for ( int i = 0 ; i < token . length ( ) ; + + i ) { int digit = Character . digit ( token . charAt ( i ) , radix ) ; if ( digit < 0 ) { return Integer . MIN_VALUE ; } value = value * radix + digit ; } return negative ? - value : value ; }
void test6 ( ) throws Throwable { int int0 = AtRobotLineLexer . parseNumber ( "0x" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parseNumber ( String token ) { int value = 0 ; int radix ; boolean negative = token . charAt ( 0 ) = = ' - ' ; if ( negative ) { token = token . substring ( 1 ) ; } if ( token . endsWith ( "h" ) ) { token = token . substring ( 0 , token . length ( ) - 1 ) ; radix = 16 ; } else if ( token . startsWith ( "0x" ) | | token . startsWith ( "0X" ) ) { token = token . substring ( 2 ) ; radix = 16 ; } else { radix = 10 ; } for ( int i = 0 ; i < token . length ( ) ; + + i ) { int digit = Character . digit ( token . charAt ( i ) , radix ) ; if ( digit < 0 ) { return Integer . MIN_VALUE ; } value = value * radix + digit ; } return negative ? - value : value ; }
void test0 ( ) throws Throwable { Symbol symbol0 = new Symbol ( ( short ) ( - 913 ) , ( short ) ( - 913 ) , ( short ) ( - 913 ) ) ; short short0 = symbol0 . getMicrocode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getValue ( Map < String , Symbol > symbols ) ; short getMicrocode ( Map < String , Symbol > symbols ) ; boolean isUnresolved ( Map < String , Symbol > symbols ) { return false ; }
void test1 ( ) throws Throwable { Symbol symbol0 = new Symbol ( ( short ) ( - 913 ) , ( short ) ( - 913 ) , ( short ) ( - 913 ) ) ; short short0 = symbol0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getMicrocode ( Map < String , Symbol > symbols ) ; boolean isUnresolved ( Map < String , Symbol > symbols ) { return false ; }
void test2 ( ) throws Throwable { Symbol symbol0 = new Symbol ( ( short ) ( - 913 ) , ( short ) ( - 913 ) , ( short ) ( - 913 ) ) ; int int0 = symbol0 . getLineNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getMicrocode ( Map < String , Symbol > symbols ) ; boolean isUnresolved ( Map < String , Symbol > symbols ) { return false ; }
void test0 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . addAll ( errors0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test1 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test2 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . add ( "ShortDescription" , ( - 15 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test3 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . add ( ( String ) null , ( - 15 ) , ( - 15 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test4 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; List < String > list0 = errors0 . getMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test5 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . dumpErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test6 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void showErrorDialog ( String name , Object parent ) { if ( ! hasErrors ( ) ) { return ; } JDialog dialog = parent instanceof Frame ? new JDialog ( ( Frame ) parent , name , true ) : new JDialog ( ( Dialog ) parent , name , true ) ; JList jList = new JList ( ) ; dialog . add ( new JScrollPane ( jList ) ) ; DefaultListModel listModel = new DefaultListModel ( ) ; for ( String st : messages ) { listModel . addElement ( st ) ; } jList . setModel ( listModel ) ; dialog . pack ( ) ; dialog . setVisible ( true ) ; }
void test7 ( ) throws Throwable { Errors errors0 = new Errors ( ) ; errors0 . showErrorDialog ( ( String ) null , "ShortDescription" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { return errors . hasErrors ( ) ; }
void test0 ( ) throws Throwable { Heading heading0 = new Heading ( ) ; PortHandler portHandler0 = AtRobotPortFactory . getRotationPort ( heading0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getRotationPort ( Heading heading ) { return new PortHandler ( ) { void write ( short value ) { heading . rotate ( RelativeAngle . fromBygrees ( value ) ) ; } } ; }
void test1 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) hashtable0 ) ; Turret turret0 = hardwareSpecification0 . createTurret ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Turret createTurret ( ) { return new Turret ( ) ; }
void test3 ( ) throws Throwable { HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; Transponder transponder0 = hardwareSpecification0 . createTransponder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test4 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) hashtable0 ) ; Radar radar0 = hardwareSpecification0 . createRadar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Radar createRadar ( ) { return new Radar ( ) ; }
void test5 ( ) throws Throwable { HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) null ) ; Sonar sonar0 = hardwareSpecification0 . createSonar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Sonar createSonar ( ) { return new Sonar ( ) ; }
void test7 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) hashtable0 ) ; Transceiver transceiver0 = hardwareSpecification0 . createTransceiver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test0 ( ) throws Throwable { AtRobotInterruptFactory atRobotInterruptFactory0 = new AtRobotInterruptFactory ( ) ; Robot robot0 = new Robot ( "^ : < qg + " , 0 , ( RobotScore ) null ) ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; robot0 . setComputer ( computer0 ) ; FrameBuilder frameBuilder0 = new FrameBuilder ( ) ; Arena arena0 = new Arena ( frameBuilder0 ) ; StandardRoundState standardRoundState0 = new StandardRoundState ( 263 , 0 ) ; Map < Integer , InterruptHandler > map0 = atRobotInterruptFactory0 . createInterruptTable ( robot0 , arena0 , ( RoundState ) standardRoundState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { short [ ] shortArray0 = new short [ 9 ] ; Program program0 = new Program ( shortArray0 ) ; HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) hashMap0 ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; RobotFactory robotFactory0 = new RobotFactory ( "TL5yY%U2 < " , program0 , hardwareSpecification0 , debugInfo0 , ( int ) ( short ) 0 , "TL5yY%U2 < " ) ; String string0 = robotFactory0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { short [ ] shortArray0 = new short [ 9 ] ; Program program0 = new Program ( shortArray0 ) ; HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) hashMap0 ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; RobotFactory robotFactory0 = new RobotFactory ( "TL5yY%U2 < " , program0 , hardwareSpecification0 , debugInfo0 , ( int ) ( short ) 0 , "TL5yY%U2 < " ) ; String string0 = robotFactory0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { short [ ] shortArray0 = new short [ 9 ] ; Program program0 = new Program ( shortArray0 ) ; HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; HardwareSpecification hardwareSpecification0 = new HardwareSpecification ( ( Map < String , Integer > ) hashMap0 ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; RobotFactory robotFactory0 = new RobotFactory ( "TL5yY%U2 < " , program0 , hardwareSpecification0 , debugInfo0 , ( int ) ( short ) 0 , "TL5yY%U2 < " ) ; RobotFactory robotFactory1 = robotFactory0 . setDebug ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RobotFactory setDebug ( boolean debug ) { this . debug = debug ; return this ; }
void test1 ( ) throws Throwable { DebugConsole debugConsole0 = DebugConsole . create ( ( Console ) null ) ; Debugger debugger0 = debugConsole0 . getDebugger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test1 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . go ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test4 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . setBreakpointHandler ( ( BreakpointHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test5 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . clearDefaultEntrant ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test6 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 14 , 14 , debugInfo0 ) ; debugger0 . afterInstruction ( computer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test7 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . setBreakpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test8 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . clearBreakpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllPaused ( ) { return allPaused ; }
void test9 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . step ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllPaused ( ) { return allPaused ; }
void test12 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 14 , 14 , debugInfo0 ) ; debugger0 . doPauseAll ( ) ; boolean boolean0 = debugger0 . isPaused ( computer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllPaused ( ) { return allPaused ; }
void test13 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 1599 , 1599 , debugInfo0 ) ; boolean boolean0 = debugger0 . isPaused ( computer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPaused ( Computer computer ) { return allPaused | | getEntrantState ( computer ) . isPaused ( ) ; }
void test14 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 1599 , 1599 , debugInfo0 ) ; debugger0 . doPause ( computer0 ) ; boolean boolean0 = debugger0 . isPaused ( computer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPaused ( Computer computer ) { return allPaused | | getEntrantState ( computer ) . isPaused ( ) ; }
void test15 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . pause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test16 ( ) throws Throwable { Debugger debugger0 = new Debugger ( ) ; debugger0 . setDefaultEntrant ( 11 ) ; debugger0 . pause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDefaultEntrant ( ) { return defaultEntrant ! = null ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ReaderConsoleInput readerConsoleInput0 = new ReaderConsoleInput ( ( InputStream ) byteArrayInputStream0 ) ; readerConsoleInput0 . readLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test0 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; ReadOnlyMemoryArray readOnlyMemoryArray0 = new ReadOnlyMemoryArray ( 2 ) ; memory0 . addMemoryArray ( ( MemoryArray ) readOnlyMemoryArray0 ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "1E\no_f + m . 5F" , 2 , ( RobotScore ) robotScoreKeeper0 ) ; MemoryCell memoryCell0 = memory0 . getCell ( 0 ) ; OverburnInterrupt overburnInterrupt0 = new OverburnInterrupt ( ( HasOverburner ) robot0 , memoryCell0 ) ; overburnInterrupt0 . handleInterrupt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test1 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; ReadOnlyMemoryArray readOnlyMemoryArray0 = new ReadOnlyMemoryArray ( 2 ) ; memory0 . addMemoryArray ( ( MemoryArray ) readOnlyMemoryArray0 ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "1E\no_f + m . 5F" , 2 , ( RobotScore ) robotScoreKeeper0 ) ; MemoryCell memoryCell0 = memory0 . getCell ( 0 ) ; OverburnInterrupt overburnInterrupt0 = new OverburnInterrupt ( ( HasOverburner ) robot0 , memoryCell0 ) ; short [ ] shortArray0 = new short [ 5 ] ; shortArray0 [ 0 ] = ( short ) 1 ; readOnlyMemoryArray0 . flash ( shortArray0 ) ; overburnInterrupt0 . handleInterrupt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test1 ( ) throws Throwable { Position position0 = new Position ( ( Vector ) null ) ; Heading heading0 = new Heading ( ) ; AbsoluteAngle absoluteAngle0 = heading0 . getAngle ( ) ; Missile missile0 = new Missile ( ( DamageInflicter ) null , position0 , absoluteAngle0 , 1783 . 1455454333393 , true ) ; ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor ( ) ; missile0 . accept ( ( ArenaObjectVisitor ) arenaObjectVisitorAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test2 ( ) throws Throwable { String string0 = "N~L . * R , Xg { \\8" ; int int0 = ( - 1686 ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( string0 , int0 , ( RobotScore ) robotScoreKeeper0 ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( ( double ) int0 ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; Explosion explosion0 = new Explosion ( vector0 , ( double ) int0 ) ; Position position0 = explosion0 . getPosition ( ) ; boolean boolean0 = false ; Missile missile0 = new Missile ( ( DamageInflicter ) robot0 , position0 , absoluteAngle0 , ( double ) int0 , boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test3 ( ) throws Throwable { String string0 = "N~L . * R , Xg { \\8" ; int int0 = ( - 1686 ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( string0 , int0 , ( RobotScore ) robotScoreKeeper0 ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( ( double ) int0 ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; Explosion explosion0 = new Explosion ( vector0 , ( double ) int0 ) ; Position position0 = explosion0 . getPosition ( ) ; boolean boolean0 = false ; Missile missile0 = new Missile ( ( DamageInflicter ) robot0 , position0 , absoluteAngle0 , ( double ) int0 , boolean0 ) ; missile0 . checkCollision ( ( TangibleArenaObject ) robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalDeaths ( ) { return score . getTotalDeaths ( ) ; }
void test0 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; Arena arena0 = new Arena ( ) ; missileLauncher0 . setArena ( arena0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countActiveRobots ( ) { return activeRobots . size ( ) ; }
void test1 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; PortHandler portHandler0 = missileLauncher0 . getActuator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getActuator ( ) { return new PortHandler ( ) { void write ( short value ) { consumeCycles ( 3 ) ; fireMissile ( RelativeAngle . fromBygrees ( Math . max ( - 4 , Math . min ( value , 4 ) ) ) ) ; } } ; }
void test3 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; DamageInflicter damageInflicter0 = missileLauncher0 . getDamageInflicter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DamageInflicter getDamageInflicter ( ) { return this . damageInflicter ; }
void test5 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; HasOverburner hasOverburner0 = missileLauncher0 . getOverburner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HasOverburner getOverburner ( ) { return overburner ; }
void test6 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; Arena arena0 = missileLauncher0 . getArena ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Arena getArena ( ) { return arena ; }
void test7 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; Heading heading0 = new Heading ( ) ; missileLauncher0 . setHeading ( heading0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test11 ( ) throws Throwable { MissileLauncher missileLauncher0 = new MissileLauncher ( ) ; HeatSinks heatSinks0 = missileLauncher0 . getHeatSinks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HeatSinks getHeatSinks ( ) { return heatSinks ; }
void test1 ( ) throws Throwable { Shield shield0 = new Shield ( ( - 49 . 43813930497068 ) ) ; boolean boolean0 = shield0 . isActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test2 ( ) throws Throwable { Shield shield0 = new Shield ( ( - 49 . 43813930497068 ) ) ; PortHandler portHandler0 = shield0 . getLatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test3 ( ) throws Throwable { Shield shield0 = new Shield ( ( - 49 . 43813930497068 ) ) ; HeatSinks heatSinks0 = new HeatSinks ( ) ; shield0 . setHeatSinks ( heatSinks0 ) ; shield0 . setActive ( true ) ; double double0 = shield0 . absorbDamage ( ( - 49 . 43813930497068 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test5 ( ) throws Throwable { Shield shield0 = new Shield ( 13 . 19860505319162 ) ; double double0 = shield0 . absorbDamage ( 13 . 19860505319162 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double absorbDamage ( double damageAmount ) { if ( active ) { heatSinks . warm ( Temperature . fromLogScale ( ( int ) Math . round ( damageAmount * heatFraction ) ) ) ; return damageAmount * damageFraction ; } return damageAmount ; }
void test6 ( ) throws Throwable { Shield shield0 = new Shield ( 13 . 19860505319162 ) ; Duration duration0 = Duration . ONE_CYCLE ; shield0 . update ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test7 ( ) throws Throwable { Shield shield0 = new Shield ( ( - 49 . 43813930497068 ) ) ; HeatSinks heatSinks0 = new HeatSinks ( ) ; shield0 . setHeatSinks ( heatSinks0 ) ; shield0 . setActive ( true ) ; shield0 . update ( ( Duration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test8 ( ) throws Throwable { Shield shield0 = new Shield ( 13 . 19860505319162 ) ; Duration duration0 = Duration . ONE_CYCLE ; HeatSinks heatSinks0 = new HeatSinks ( ) ; shield0 . setHeatSinks ( heatSinks0 ) ; shield0 . setActive ( true ) ; shield0 . update ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test0 ( ) throws Throwable { Mine mine0 = new Mine ( ( DamageInflicter ) null ) ; MineSnapshot mineSnapshot0 = ( MineSnapshot ) mine0 . getSnapshot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getVelocityX ( ) { return getVelocityVector ( ) . getX ( ) ; }
void test1 ( ) throws Throwable { Robot robot0 = new Robot ( "" , 1454 , ( RobotScore ) null ) ; Mine mine0 = new Mine ( ( DamageInflicter ) robot0 ) ; Position position0 = new Position ( ) ; mine0 . setPosition ( position0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test2 ( ) throws Throwable { Mine mine0 = new Mine ( ( DamageInflicter ) null ) ; ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor ( ) ; mine0 . accept ( ( ArenaObjectVisitor ) arenaObjectVisitorAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test3 ( ) throws Throwable { Mine mine0 = new Mine ( ( DamageInflicter ) null ) ; mine0 . setTriggerRadius ( ( - 19 . 709936714450713 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test5 ( ) throws Throwable { Robot robot0 = new Robot ( "" , 1454 , ( RobotScore ) null ) ; Mine mine0 = new Mine ( ( DamageInflicter ) robot0 ) ; mine0 . checkCollision ( ( TangibleArenaObject ) robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test6 ( ) throws Throwable { Mine mine0 = new Mine ( ( DamageInflicter ) null ) ; FrameBuilder frameBuilder0 = new FrameBuilder ( ) ; Arena arena0 = new Arena ( frameBuilder0 ) ; mine0 . setArena ( arena0 ) ; mine0 . explode ( ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "horizontalAlignment" , 886 , ( RobotScore ) robotScoreKeeper0 ) ; mine0 . checkCollision ( ( TangibleArenaObject ) robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test7 ( ) throws Throwable { Mine mine0 = new Mine ( ( DamageInflicter ) null ) ; FrameBuilder frameBuilder0 = new FrameBuilder ( ) ; Arena arena0 = new Arena ( frameBuilder0 ) ; mine0 . setArena ( arena0 ) ; mine0 . explode ( ) ; mine0 . explode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test0 ( ) throws Throwable { MineLayer mineLayer0 = new MineLayer ( 1756 ) ; PortHandler portHandler0 = mineLayer0 . getMineBayPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test1 ( ) throws Throwable { MineLayer mineLayer0 = new MineLayer ( 1756 ) ; PortHandler portHandler0 = mineLayer0 . getPlacedMinePort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test3 ( ) throws Throwable { MineLayer mineLayer0 = new MineLayer ( 1756 ) ; Arena arena0 = new Arena ( ) ; mineLayer0 . setArena ( arena0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOnlyOneRobotAlive ( ) { return countActiveRobots ( ) = = 1 ; }
void test5 ( ) throws Throwable { MineLayer mineLayer0 = new MineLayer ( 1756 ) ; DamageInflicter damageInflicter0 = mineLayer0 . getOwner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DamageInflicter getOwner ( ) { return owner ; }
void test0 ( ) throws Throwable { Sonar sonar0 = new Sonar ( ) ; PortHandler portHandler0 = sonar0 . getScanPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getScanPort ( ) { return new PortHandler ( ) { short read ( ) { consumeCycles ( 40 ) ; AbsoluteAngle angle = scan ( ) ; if ( angle = = null ) { return Short . MIN_VALUE ; } return ( short ) AngleBracket . around ( angle , RelativeAngle . fromBygrees ( 16 ) ) . randomAngleBetween ( ) . getBygrees ( ) ; } } ; }
void test0 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; PortHandler portHandler0 = scanner0 . getScanPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getScanPort ( ) { return new PortHandler ( ) { short read ( ) { consumeCycles ( 40 ) ; AbsoluteAngle angle = scan ( ) ; if ( angle = = null ) { return Short . MIN_VALUE ; } return ( short ) AngleBracket . around ( angle , RelativeAngle . fromBygrees ( 16 ) ) . randomAngleBetween ( ) . getBygrees ( ) ; } } ; }
void test1 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; PortHandler portHandler0 = scanner0 . getAccuracyPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getAccuracyPort ( ) { return new PortHandler ( ) { short read ( ) { consumeCycles ( 1 ) ; return ( short ) getAccuracy ( ) ; } } ; }
void test2 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; PortHandler portHandler0 = scanner0 . getScanArcLatchPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test3 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; Heading heading0 = new Heading ( ) ; scanner0 . setHeading ( heading0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test4 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; scanner0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccuracy ( ) ; }
void test5 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; int int0 = scanner0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccuracy ( ) ; }
void test6 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; scanner0 . setScanSource ( ( ScanSource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccuracy ( ) ; }
void test7 ( ) throws Throwable { Scanner scanner0 = new Scanner ( 11 . 13106742151496 ) ; RelativeAngle relativeAngle0 = scanner0 . getScanArc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadians ( ) { return radians ; }
void test0 ( ) throws Throwable { Radar radar0 = new Radar ( ) ; PortHandler portHandler0 = radar0 . getScanPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getScanPort ( ) { return new PortHandler ( ) { short read ( ) { consumeCycles ( 40 ) ; AbsoluteAngle angle = scan ( ) ; if ( angle = = null ) { return Short . MIN_VALUE ; } return ( short ) AngleBracket . around ( angle , RelativeAngle . fromBygrees ( 16 ) ) . randomAngleBetween ( ) . getBygrees ( ) ; } } ; }
void test0 ( ) throws Throwable { Transceiver transceiver0 = new Transceiver ( ) ; PortHandler portHandler0 = transceiver0 . getChannelLatchPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test1 ( ) throws Throwable { Transceiver transceiver0 = new Transceiver ( ) ; transceiver0 . setCommQueue ( ( CommunicationsQueue ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test2 ( ) throws Throwable { Transceiver transceiver0 = new Transceiver ( ) ; RadioDispatcher radioDispatcher0 = new RadioDispatcher ( ) ; transceiver0 . setRadioDispatcher ( radioDispatcher0 ) ; radioDispatcher0 . dispatch ( ( RadioListener ) transceiver0 , ( int ) ( short ) ( - 1958 ) , ( short ) ( - 1958 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test3 ( ) throws Throwable { Transceiver transceiver0 = new Transceiver ( ) ; int int0 = transceiver0 . getChannel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test4 ( ) throws Throwable { Transceiver transceiver0 = new Transceiver ( ) ; RadioDispatcher radioDispatcher0 = new RadioDispatcher ( ) ; transceiver0 . setRadioDispatcher ( radioDispatcher0 ) ; transceiver0 . send ( ( short ) ( - 1958 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test1 ( ) throws Throwable { Turret turret0 = new Turret ( ) ; Heading heading0 = turret0 . getHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { Turret turret0 = new Turret ( ) ; Scanner scanner0 = turret0 . getScanner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scanner getScanner ( ) { return scanner ; }
void test0 ( ) throws Throwable { HeatSinks heatSinks0 = new HeatSinks ( ) ; Temperature temperature0 = heatSinks0 . getTemperature ( ) ; heatSinks0 . cool ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test2 ( ) throws Throwable { HeatSinks heatSinks0 = new HeatSinks ( ) ; Temperature temperature0 = heatSinks0 . getTemperature ( ) ; heatSinks0 . warm ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test3 ( ) throws Throwable { HeatSinks heatSinks0 = new HeatSinks ( ) ; Temperature temperature0 = heatSinks0 . getTemperature ( ) ; heatSinks0 . blockHeat ( true ) ; heatSinks0 . cool ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test4 ( ) throws Throwable { HeatSinks heatSinks0 = new HeatSinks ( ) ; Temperature temperature0 = new Temperature ( 1 . 0 ) ; heatSinks0 . cool ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test0 ( ) throws Throwable { Transponder transponder0 = new Transponder ( ) ; int int0 = transponder0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Transponder transponder0 = new Transponder ( ) ; transponder0 . setId ( 172 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { Armor armor0 = new Armor ( 1871 . 7571377993659 ) ; PortHandler portHandler0 = armor0 . getSensor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test1 ( ) throws Throwable { Armor armor0 = new Armor ( 1871 . 7571377993659 ) ; armor0 . inflictDamage ( ( - 238 . 87478223189822 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRemaining ( ) { return pointsRemaining ; }
void test2 ( ) throws Throwable { Armor armor0 = new Armor ( 1871 . 7571377993659 ) ; armor0 . setArmorDepletionListener ( ( ArmorDepletionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRemaining ( ) { return pointsRemaining ; }
void test3 ( ) throws Throwable { Armor armor0 = new Armor ( 1871 . 7571377993659 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destruct ( ) ; }
void test0 ( ) throws Throwable { Throttle throttle0 = new Throttle ( ( - 1070 . 3203636796586 ) ) ; throttle0 . shutDown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDesiredPower ( ) { return desiredPower ; }
void test1 ( ) throws Throwable { Throttle throttle0 = new Throttle ( ( - 19 . 332477613414284 ) ) ; int int0 = throttle0 . getPower ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPower ( ) { return overburner . isOverburn ( ) ? power * 1 . 30 : power ; }
void test2 ( ) throws Throwable { Throttle throttle0 = new Throttle ( ( - 19 . 332477613414284 ) ) ; HeatSinks heatSinks0 = new HeatSinks ( ) ; throttle0 . setHeatSinks ( heatSinks0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setHeatSinks ( HeatSinks heatSinks ) { this . heatSinks = heatSinks ; }
void test4 ( ) throws Throwable { Throttle throttle0 = new Throttle ( ( - 1402 . 7144824293366 ) ) ; PortHandler portHandler0 = throttle0 . getSpedometer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short read ( ) { portListener . invalidPortError ( ) ; return 0 ; }
void test5 ( ) throws Throwable { Throttle throttle0 = new Throttle ( ( - 1402 . 7144824293366 ) ) ; int int0 = throttle0 . getDesiredPower ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDesiredPower ( ) { return desiredPower ; }
void test7 ( ) throws Throwable { Throttle throttle0 = new Throttle ( ( - 1070 . 3203636796586 ) ) ; PortHandler portHandler0 = throttle0 . getActuator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler getActuator ( ) { return new PortHandler ( ) { void write ( short value ) { consumeCycles ( 3 ) ; fireMissile ( RelativeAngle . fromBygrees ( Math . max ( - 4 , Math . min ( value , 4 ) ) ) ) ; } } ; }
void test8 ( ) throws Throwable { Throttle throttle0 = new Throttle ( 0 . 0 ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "I" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; Speed speed0 = new Speed ( ) ; throttle0 . setSpeed ( speed0 ) ; throttle0 . setOverburner ( ( HasOverburner ) robot0 ) ; Duration duration0 = Duration . ZERO_CYCLE ; throttle0 . update ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPower ( ) { return overburner . isOverburn ( ) ? power * 1 . 30 : power ; }
void test1 ( ) throws Throwable { InvalidPort invalidPort0 = new InvalidPort ( ) ; InvalidPort invalidPort1 = ( InvalidPort ) invalidPort0 . setPortListener ( ( PortListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PortHandler setPortListener ( PortListener portListener ) { this . portListener = portListener ; return this ; }
void test0 ( ) throws Throwable { PairTournament pairTournament0 = new PairTournament ( ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundsPerPairing ( ) { return roundsPerPairing ; }
void test1 ( ) throws Throwable { PairTournament pairTournament0 = new PairTournament ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ( Vector ) null , ( Vector ) null ) ; TableRowSorter < DefaultTableModel > tableRowSorter0 = new TableRowSorter < DefaultTableModel > ( defaultTableModel0 ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; pairTournament0 . setCompetitors ( list0 ) ; PairTournamentResults pairTournamentResults0 = ( PairTournamentResults ) pairTournament0 . call ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundsPerPairing ( ) { return roundsPerPairing ; }
void test2 ( ) throws Throwable { PairTournament pairTournament0 = new PairTournament ( ) ; int int0 = pairTournament0 . getRoundsPerPairing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundsPerPairing ( ) { return roundsPerPairing ; }
void test3 ( ) throws Throwable { PairTournament pairTournament0 = new PairTournament ( ) ; pairTournament0 . getCompetitors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundsPerPairing ( ) { return roundsPerPairing ; }
void test4 ( ) throws Throwable { PairTournament pairTournament0 = new PairTournament ( ) ; pairTournament0 . setRoundsPerPairing ( ( - 1496 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundsPerPairing ( ) { return roundsPerPairing ; }
void test6 ( ) throws Throwable { PairTournament pairTournament0 = new PairTournament ( ) ; FrameBuilder frameBuilder0 = pairTournament0 . getFrameBuffer ( ) ; FrameBuilder frameBuilder1 = pairTournament0 . getFrameBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundsPerPairing ( ) { return roundsPerPairing ; }
void test0 ( ) throws Throwable { RadioDispatcher radioDispatcher0 = new RadioDispatcher ( ) ; Transceiver transceiver0 = new Transceiver ( ) ; radioDispatcher0 . addRadioListener ( ( RadioListener ) transceiver0 ) ; radioDispatcher0 . dispatch ( ( RadioListener ) transceiver0 , 1567 , ( short ) 603 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test1 ( ) throws Throwable { RadioDispatcher radioDispatcher0 = new RadioDispatcher ( ) ; Transceiver transceiver0 = new Transceiver ( ) ; radioDispatcher0 . dispatch ( ( RadioListener ) transceiver0 , 890 , ( short ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChannel ( ) { return channel ; }
void test2 ( ) throws Throwable { Main main0 = new Main ( ) ; main0 . isDebugMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPaused ( Computer computer ) { return allPaused | | getEntrantState ( computer ) . isPaused ( ) ; }
void test4 ( ) throws Throwable { Main main0 = new Main ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPaused ( Computer computer ) { return allPaused | | getEntrantState ( computer ) . isPaused ( ) ; }
void test5 ( ) throws Throwable { Main main0 = new Main ( ) ; main0 . setDebugMode ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugMode ( ) { return debugMode ; }
void test6 ( ) throws Throwable { Main main0 = new Main ( ) ; boolean boolean0 = main0 . isPaused ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPaused ( Computer computer ) { return allPaused | | getEntrantState ( computer ) . isPaused ( ) ; }
void test1 ( ) throws Throwable { Main main0 = new Main ( ) ; JMenu jMenu0 = main0 . createViewMenu ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenu createViewMenu ( ) { JMenu viewMenu = new JMenu ( "View" ) ; viewMenu . add ( toggleShowNames . configure ( new JCheckBoxMenuItem ( ) ) ) ; viewMenu . add ( toggleRobotStatusBars . configure ( new JCheckBoxMenuItem ( ) ) ) ; viewMenu . add ( toggleFillShields . configure ( new JCheckBoxMenuItem ( ) ) ) ; viewMenu . add ( toggleRenderDeadRobots . configure ( new JCheckBoxMenuItem ( ) ) ) ; viewMenu . addSeparator ( ) ; viewMenu . add ( toggleFillScanArc . configure ( new JCheckBoxMenuItem ( ) ) ) ; viewMenu . add ( new JCheckBoxMenuItem ( new AbstractAction ( "Gradiant Explosions" ) { void actionPerformed ( ActionEvent e ) { AbstractButton aButton = ( AbstractButton ) e . getSource ( ) ; boolean selected = aButton . getModel ( ) . isSelected ( ) ; arenaPane . getArenaRenderer ( ) . setExplosionRenderer ( selected ? new GradientExplosionRenderer ( ) : new SimpleExplosionRenderer ( ) ) ; } } ) ) ; return viewMenu ; }
void test1 ( ) throws Throwable { File file0 = RobotFileUtils . robotFile ( " / M" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File robotFile ( String robotName ) { File file = new File ( robotName ) ; if ( file . exists ( ) ) { return file ; } for ( File f : file . getParentFile ( ) . listFiles ( new FilenameAt2Filter ( robotName ) ) ) { return f ; } return file ; }
void test2 ( ) throws Throwable { FileNameExtensionFilter fileNameExtensionFilter0 = RobotFileUtils . getAtRobotsFileNameFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileNameExtensionFilter getAtRobotsFileNameFilter ( ) { return new FileNameExtensionFilter ( "AT - Robots files" , "at2" , "ats" ) ; }
void test3 ( ) throws Throwable { RobotFileUtils robotFileUtils0 = new RobotFileUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { File [ ] fileArray0 = new File [ 3 ] ; RobotFileUtils . EntrantFile [ ] robotFileUtils_EntrantFileArray0 = RobotFileUtils . getEntrantFiles ( fileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EntrantFile [ ] getEntrantFiles ( File [ ] initialRobots ) { java . util . List < EntrantFile > files = new ArrayList < EntrantFile > ( ) ; for ( File file : initialRobots ) { files . add ( new EntrantFile ( false , file ) ) ; } return files . toArray ( new EntrantFile [ files . size ( ) ] ) ; }
void test5 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "lib" ) ; RobotFileUtils . getFilesByName ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { ArenaPane arenaPane0 = new ArenaPane ( ) ; arenaPane0 . frameAvailable ( ( SimulationFrameBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void frameAvailable ( SimulationFrameBuffer buffer ) { EventQueue . invokeLater ( new UpdateFrame ( buffer ) ) ; }
void test2 ( ) throws Throwable { ArenaPane arenaPane0 = new ArenaPane ( ) ; ArenaRenderer arenaRenderer0 = arenaPane0 . getArenaRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArenaRenderer getArenaRenderer ( ) { return arenaRenderer ; }
void test3 ( ) throws Throwable { ArenaPane arenaPane0 = new ArenaPane ( ) ; arenaPane0 . setRobotStatusPane ( ( RobotStatusPane ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setRobotStatusPane ( RobotStatusPane robotStatusPane ) { arenaRenderer . setRobotStatusPane ( robotStatusPane ) ; }
void test2 ( ) throws Throwable { ArenaRenderer arenaRenderer0 = new ArenaRenderer ( ) ; SnapshotRenderer < ? super MissileSnapshot > snapshotRenderer0 = arenaRenderer0 . getMissileRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SnapshotRenderer < ? super MissileSnapshot > getMissileRenderer ( ) { return missileRenderer ; }
void test6 ( ) throws Throwable { ArenaRenderer arenaRenderer0 = new ArenaRenderer ( ) ; SnapshotRenderer < ? super ScanSnapshot > snapshotRenderer0 = arenaRenderer0 . getScanRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SnapshotRenderer < ? super ScanSnapshot > getScanRenderer ( ) { return scanRenderer ; }
void test9 ( ) throws Throwable { ArenaPane arenaPane0 = new ArenaPane ( ) ; ArenaRenderer arenaRenderer0 = arenaPane0 . getArenaRenderer ( ) ; SnapshotRenderer < ? super MineSnapshot > snapshotRenderer0 = arenaRenderer0 . getMineRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SnapshotRenderer < ? super MineSnapshot > getMineRenderer ( ) { return mineRenderer ; }
void test10 ( ) throws Throwable { ArenaRenderer arenaRenderer0 = new ArenaRenderer ( ) ; RobotStatusPane robotStatusPane0 = RobotStatusPane . createRobotStatusPane ( ) ; arenaRenderer0 . setRobotStatusPane ( robotStatusPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setRobotStatusPane ( RobotStatusPane robotStatusPane ) { arenaRenderer . setRobotStatusPane ( robotStatusPane ) ; }
void test11 ( ) throws Throwable { ArenaRenderer arenaRenderer0 = new ArenaRenderer ( ) ; RenderingHints renderingHints0 = arenaRenderer0 . getHints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { RobotStatusPane robotStatusPane0 = RobotStatusPane . createRobotStatusPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { RobotStatusPane robotStatusPane0 = RobotStatusPane . createRobotStatusPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test2 ( ) throws Throwable { RobotStatusPane robotStatusPane0 = RobotStatusPane . createRobotStatusPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( "P" , ( BooleanAccessor ) null ) ; JCheckBox jCheckBox0 = new JCheckBox ( ) ; toggleProperty0 . configure ( jCheckBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T extends JToggleButton > T configure ( T button ) { doConfigure ( button ) ; return button ; }
void test2 ( ) throws Throwable { DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; Icon icon0 = defaultTreeCellRenderer0 . getLeafIcon ( ) ; ToggleProperty toggleProperty0 = new ToggleProperty ( "hG + RJy5cQcK$dC ; " , icon0 , ( BooleanAccessor ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return action . isEnabled ( ) ; }
void test3 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( ( BooleanAccessor ) null ) ; toggleProperty0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return action . isEnabled ( ) ; }
void test4 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( ( BooleanAccessor ) null ) ; toggleProperty0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return action . isEnabled ( ) ; }
void test5 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( ( BooleanAccessor ) null ) ; Object [ ] objectArray0 = toggleProperty0 . getKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getKeys ( ) { return action . getKeys ( ) ; }
void test6 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( "R" , ( BooleanAccessor ) null ) ; PropertyChangeListener [ ] propertyChangeListenerArray0 = toggleProperty0 . getPropertyChangeListeners ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyChangeListener [ ] getPropertyChangeListeners ( ) { return action . getPropertyChangeListeners ( ) ; }
void test7 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( ( BooleanAccessor ) null ) ; boolean boolean0 = toggleProperty0 . isEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return action . isEnabled ( ) ; }
void test8 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( ( BooleanAccessor ) null ) ; toggleProperty0 . setEnabled ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return action . isEnabled ( ) ; }
void test9 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( "R" , ( BooleanAccessor ) null ) ; Object object0 = toggleProperty0 . getValue ( "R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getValue ( Map < String , Symbol > symbols ) ; short getMicrocode ( Map < String , Symbol > symbols ) ; boolean isUnresolved ( Map < String , Symbol > symbols ) { return false ; }
void test10 ( ) throws Throwable { ToggleProperty toggleProperty0 = new ToggleProperty ( "P" , ( BooleanAccessor ) null ) ; toggleProperty0 . putValue ( "P" , "mnemonic" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return action . isEnabled ( ) ; }
void test0 ( ) throws Throwable { ScanRenderer scanRenderer0 = new ScanRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFillArcs ( ) { return fillArcs ; }
void test1 ( ) throws Throwable { ScanRenderer scanRenderer0 = new ScanRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFillArcs ( ) { return fillArcs ; }
void test2 ( ) throws Throwable { ScanRenderer scanRenderer0 = new ScanRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void render ( Graphics2D g2d , MineSnapshot mineSnapshot , Set < Integer > selectedRobotIds ) { Ellipse2D . Double ellipse = new Ellipse2D . Double ( ) ; ellipse . setFrameFromCenter ( mineSnapshot . getX ( ) , mineSnapshot . getY ( ) , mineSnapshot . getX ( ) + mineSnapshot . getTriggerRadius ( ) , mineSnapshot . getY ( ) + mineSnapshot . getTriggerRadius ( ) ) ; g2d . setPaint ( new RadialGradientPaint ( mineSnapshot . getPositionVector ( ) . toPoint2D ( ) , ( float ) mineSnapshot . getTriggerRadius ( ) , new float [ ] { 0f , 1f } , new Color [ ] { new Color ( 0 , 0f , 0 , . 2f ) , new Color ( . 1f , 1f , . 2f , . 2f ) } ) ) ; g2d . fill ( ellipse ) ; g2d . setPaint ( new RadialGradientPaint ( mineSnapshot . getPositionVector ( ) . toPoint2D ( ) , 3 , new float [ ] { 0f , 1f } , new Color [ ] { new Color ( . 8f , . 8f , . 9f , 1f ) , new Color ( . 1f , . 1f , . 2f , 1f ) } ) ) ; ellipse . setFrameFromCenter ( mineSnapshot . getX ( ) , mineSnapshot . getY ( ) , mineSnapshot . getX ( ) + 3 , mineSnapshot . getY ( ) + 3 ) ; g2d . fill ( ellipse ) ; }
void test3 ( ) throws Throwable { ScanRenderer scanRenderer0 = new ScanRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void render ( Graphics2D g2d , MineSnapshot mineSnapshot , Set < Integer > selectedRobotIds ) { Ellipse2D . Double ellipse = new Ellipse2D . Double ( ) ; ellipse . setFrameFromCenter ( mineSnapshot . getX ( ) , mineSnapshot . getY ( ) , mineSnapshot . getX ( ) + mineSnapshot . getTriggerRadius ( ) , mineSnapshot . getY ( ) + mineSnapshot . getTriggerRadius ( ) ) ; g2d . setPaint ( new RadialGradientPaint ( mineSnapshot . getPositionVector ( ) . toPoint2D ( ) , ( float ) mineSnapshot . getTriggerRadius ( ) , new float [ ] { 0f , 1f } , new Color [ ] { new Color ( 0 , 0f , 0 , . 2f ) , new Color ( . 1f , 1f , . 2f , . 2f ) } ) ) ; g2d . fill ( ellipse ) ; g2d . setPaint ( new RadialGradientPaint ( mineSnapshot . getPositionVector ( ) . toPoint2D ( ) , 3 , new float [ ] { 0f , 1f } , new Color [ ] { new Color ( . 8f , . 8f , . 9f , 1f ) , new Color ( . 1f , . 1f , . 2f , 1f ) } ) ) ; ellipse . setFrameFromCenter ( mineSnapshot . getX ( ) , mineSnapshot . getY ( ) , mineSnapshot . getX ( ) + 3 , mineSnapshot . getY ( ) + 3 ) ; g2d . fill ( ellipse ) ; }
void test0 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; boolean boolean0 = robotRenderer0 . isShowName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFillShield ( ) { return fillShield ; }
void test2 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; boolean boolean0 = robotRenderer0 . isShowStatusBars ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderDead ( ) { return renderDead ; }
void test3 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderDead ( ) { return renderDead ; }
void test4 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; robotRenderer0 . setShowStatusBars ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderDead ( ) { return renderDead ; }
void test5 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; boolean boolean0 = robotRenderer0 . isFillShield ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderDead ( ) { return renderDead ; }
void test6 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderDead ( ) { return renderDead ; }
void test7 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void render ( Graphics2D g2d , MineSnapshot mineSnapshot , Set < Integer > selectedRobotIds ) { Ellipse2D . Double ellipse = new Ellipse2D . Double ( ) ; ellipse . setFrameFromCenter ( mineSnapshot . getX ( ) , mineSnapshot . getY ( ) , mineSnapshot . getX ( ) + mineSnapshot . getTriggerRadius ( ) , mineSnapshot . getY ( ) + mineSnapshot . getTriggerRadius ( ) ) ; g2d . setPaint ( new RadialGradientPaint ( mineSnapshot . getPositionVector ( ) . toPoint2D ( ) , ( float ) mineSnapshot . getTriggerRadius ( ) , new float [ ] { 0f , 1f } , new Color [ ] { new Color ( 0 , 0f , 0 , . 2f ) , new Color ( . 1f , 1f , . 2f , . 2f ) } ) ) ; g2d . fill ( ellipse ) ; g2d . setPaint ( new RadialGradientPaint ( mineSnapshot . getPositionVector ( ) . toPoint2D ( ) , 3 , new float [ ] { 0f , 1f } , new Color [ ] { new Color ( . 8f , . 8f , . 9f , 1f ) , new Color ( . 1f , . 1f , . 2f , 1f ) } ) ) ; ellipse . setFrameFromCenter ( mineSnapshot . getX ( ) , mineSnapshot . getY ( ) , mineSnapshot . getX ( ) + 3 , mineSnapshot . getY ( ) + 3 ) ; g2d . fill ( ellipse ) ; }
void test8 ( ) throws Throwable { RobotRenderer robotRenderer0 = new RobotRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRenderDead ( ) { return renderDead ; }
void test0 ( ) throws Throwable { AddInstruction addInstruction0 = new AddInstruction ( 1244 ) ; int int0 = addInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { CompareInstruction compareInstruction0 = new CompareInstruction ( ( - 652 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CompareInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { DivideInstruction divideInstruction0 = new DivideInstruction ( 1681 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DivideInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { BitwiseAndInstruction bitwiseAndInstruction0 = new BitwiseAndInstruction ( 1244 ) ; int int0 = bitwiseAndInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { LoopInstruction loopInstruction0 = new LoopInstruction ( 70 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoopInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 27 , 27 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastMessage ( ) { return lastMessage ; }
void test1 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void reset ( ) { setActive ( false ) ; }
void test2 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 784 , ( - 25 ) , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test3 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 750 , 750 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getDoubleDereferencedValue ( int opnumber ) { return memory . get ( Microcode . Dereference . getValue ( Computer . this , opnumber ) ) ; }
void test4 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 316 , 316 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test5 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 784 , ( - 25 ) , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test6 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastMessage ( ) { return lastMessage ; }
void test7 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test8 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 316 , 316 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test9 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test10 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short readPort ( int portNumber ) { return ports . get ( portNumber ) . read ( ) ; }
void test11 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test12 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 9 , 9 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void popInstructionPointer ( ) { nextInstructionPointer = stack . pop ( ) ; }
void test13 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 25 , 25 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void callInterrupt ( int interruptNumber ) { interrupts . get ( interruptNumber ) . call ( ) ; }
void test14 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test15 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 7 , 7 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void decrementOperand ( int opnumber ) { memory . decrement ( getMicrocode ( opnumber ) . getAddress ( Computer . this , opnumber ) ) ; }
void test16 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test17 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1603 ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; Computer computer0 = new Computer ( memory0 , 357 , 357 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCycles ( ) { return cycles ; }
void test18 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 784 , ( - 25 ) , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void incrementOperand ( int opnumber ) { memory . increment ( getMicrocode ( opnumber ) . getAddress ( Computer . this , opnumber ) ) ; }
void test19 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test20 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLabelValue ( int opnumber ) { return getConstant ( opnumber ) ; }
void test21 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 316 , 316 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test22 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test23 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test24 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test25 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastMessage ( ) { return lastMessage ; }
void test26 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 25 , 25 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test27 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test28 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 532 , 532 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PairTournamentResults call ( ) throws InterruptedException , ExecutionException { PairTournamentResults results = new PairTournamentResults ( ) ; CompletionService < GameResult > service = new ExecutorCompletionService < GameResult > ( executorService ) ; int toTake = 0 ; for ( RobotFactory left : competitors ) { for ( RobotFactory right : competitors ) { if ( right = = left ) { break ; } + + toTake ; service . submit ( new CompeteWorker ( results , left , right ) ) ; } } for ( int count = 0 ; count < toTake ; + + count ) { results . recordScores ( service . take ( ) . get ( ) ) ; } return results ; }
void test29 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShutDown ( ) ; void startUp ( ) ; }
void test30 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastMessage ( ) { return lastMessage ; }
void test31 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 316 , 316 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test32 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test33 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 953 , 953 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOperandAddress ( int opnumber ) { return getMicrocode ( opnumber ) . getAddress ( Computer . this , opnumber ) ; }
void test34 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Duration duration ) { super . update ( duration ) ; age = age . plus ( duration ) ; if ( ! isDead ( ) ) { checkWallCollision ( ) ; } }
void test35 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test36 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getNumberedLabelValue ( int opnumber ) { return getConstant ( opnumber ) ; }
void test37 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void push ( short value ) { stackPointer . increment ( ) ; stackMemory . put ( stackPointer . signed ( ) - 1 , value ) ; }
void test38 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getUnresolvedLabelValue ( int opnumber ) { return getConstant ( opnumber ) ; }
void test39 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test40 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 27 , 27 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test41 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test42 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 8 , 8 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test43 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 953 , 953 , ( DebugInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test44 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writePort ( int portNumber , short value ) { ports . get ( portNumber ) . write ( value ) ; }
void test45 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 316 , 316 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test46 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 316 , 316 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Duration duration ) { super . update ( duration ) ; age = age . plus ( duration ) ; if ( ! isDead ( ) ) { checkWallCollision ( ) ; } }
void test47 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Duration duration ) { super . update ( duration ) ; age = age . plus ( duration ) ; if ( ! isDead ( ) ) { checkWallCollision ( ) ; } }
void test48 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Duration duration ) { super . update ( duration ) ; age = age . plus ( duration ) ; if ( ! isDead ( ) ) { checkWallCollision ( ) ; } }
void test49 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 27 , 27 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void executeInstruction ( ) { if ( nextInstructionPointer > = maxInstructionPointer ) { nextInstructionPointer = 0 ; } instructionPointer = nextInstructionPointer ; debugListener . beforeInstruction ( this ) ; nextInstructionPointer + + ; getInstruction ( ) . execute ( this ) ; debugListener . afterInstruction ( this ) ; }
void test50 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 784 , ( - 25 ) , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCycles ( ) { return cycles ; }
void test51 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCyclesPerSimCycle ( ) { return cyclesPerSimCycle ; }
void test0 ( ) throws Throwable { JumpWhenNotEqualInstruction jumpWhenNotEqualInstruction0 = new JumpWhenNotEqualInstruction ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JumpWhenNotEqualInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { BitShiftRightInstruction bitShiftRightInstruction0 = new BitShiftRightInstruction ( 1244 ) ; int int0 = bitShiftRightInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test6 ( ) throws Throwable { ReadOnlyMemoryArray readOnlyMemoryArray0 = new ReadOnlyMemoryArray ( 255 ) ; short [ ] shortArray0 = new short [ 6 ] ; readOnlyMemoryArray0 . flash ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; MemoryCell memoryCell0 = memory0 . getCell ( 0 ) ; AtRobotsCommunicationsQueue atRobotsCommunicationsQueue0 = new AtRobotsCommunicationsQueue ( ( MemoryRegion ) null , memoryCell0 , ( MemoryCell ) null ) ; GetQueueSizeInterrupt getQueueSizeInterrupt0 = new GetQueueSizeInterrupt ( atRobotsCommunicationsQueue0 , ( MemoryCell ) null ) ; getQueueSizeInterrupt0 . setCycleSource ( ( CycleSource ) computer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShutDown ( ) ; void startUp ( ) ; }
void test2 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; MemoryCell memoryCell0 = memory0 . getCell ( 0 ) ; GetGameInfoInterrupt getGameInfoInterrupt0 = new GetGameInfoInterrupt ( ( MemoryCell ) null , memoryCell0 , memoryCell0 , 0 , ( - 293 ) , ( Arena ) null ) ; GetGameInfoInterrupt getGameInfoInterrupt1 = ( GetGameInfoInterrupt ) getGameInfoInterrupt0 . costs ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InterruptHandler costs ( int cost ) { this . cost = cost ; return this ; }
void test0 ( ) throws Throwable { SignedBitShiftRightInstruction signedBitShiftRightInstruction0 = new SignedBitShiftRightInstruction ( 1244 ) ; int int0 = signedBitShiftRightInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { TestInstruction testInstruction0 = new TestInstruction ( ( - 144 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TestInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getSp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getSp ( ) { return sp ; }
void test1 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getBx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getBx ( ) { return bx ; }
void test2 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getCommunicationQueueTail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getCommunicationQueueTail ( ) { return communicationQueueTail ; }
void test3 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getCx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getCx ( ) { return cx ; }
void test4 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getStackPointerCell ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getStackPointerCell ( ) { return sp ; }
void test5 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getSwap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getSwap ( ) { return swap ; }
void test6 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getDx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getDx ( ) { return dx ; }
void test7 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; Flags flags0 = registers0 . getFlags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Flags getFlags ( ) { return flags ; }
void test8 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccuracy ( ) ; }
void test10 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getTargetId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getTargetId ( ) { return targetId ; }
void test11 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getDesiredSpeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getDesiredSpeed ( ) { return desiredSpeed ; }
void test12 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getMeters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getMeters ( ) { return meters ; }
void test13 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getTargetVelocity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getTargetVelocity ( ) { return targetVelocity ; }
void test14 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getCollisionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getCollisionCount ( ) { return collisionCount ; }
void test15 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getTargetThrottle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getTargetThrottle ( ) { return targetThrottle ; }
void test16 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getCommunicationQueueHead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getCommunicationQueueHead ( ) { return communicationQueueHead ; }
void test17 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getTargetHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getTargetHeading ( ) { return targetHeading ; }
void test18 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getFx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getFx ( ) { return fx ; }
void test19 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getEx ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getEx ( ) { return ex ; }
void test20 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getTurretOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getTurretOffset ( ) { return turretOffset ; }
void test21 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; Registers registers0 = new Registers ( memory0 ) ; MemoryCell memoryCell0 = registers0 . getDesiredHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getDesiredHeading ( ) { return desiredHeading ; }
void test1 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; MemoryRegion memoryRegion0 = new MemoryRegion ( memory0 , 246 , 1658 ) ; int int0 = memoryRegion0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test8 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; MemoryRegion memoryRegion0 = new MemoryRegion ( memory0 , ( - 1 ) , 255 ) ; MemoryCell memoryCell0 = memoryRegion0 . getCell ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; ComputerErrorHandler computerErrorHandler0 = memory0 . getErrorHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComputerErrorHandler getErrorHandler ( ) { return errorHandler ; }
void test1 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; memory0 . and ( 0 , ( short ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test2 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; MemoryCell memoryCell0 = memory0 . getCell ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MemoryCell getCell ( Memory memory , int address ) { return memory . getCell ( address ) ; }
void test4 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1473 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; memory0 . or ( 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test6 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; int int0 = memory0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test7 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; int int0 = memory0 . unsigned ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test9 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; memory0 . set ( 0 , ( short ) 1907 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test15 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; memory0 . setErrorHandler ( ( ComputerErrorHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; hardwareBus0 . setPorts ( ( Map < Integer , PortHandler > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test1 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; hardwareBus0 . getInterrupts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test3 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; hardwareBus0 . getPorts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test5 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; Hashtable < Integer , InterruptHandler > hashtable0 = new Hashtable < Integer , InterruptHandler > ( ) ; hardwareBus0 . setInterrupts ( ( Map < Integer , InterruptHandler > ) hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test6 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; Odometer odometer0 = new Odometer ( ) ; hardwareBus0 . addResetable ( ( Resettable ) odometer0 ) ; hardwareBus0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test8 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; int int0 = hardwareBus0 . getShutdownLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test9 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; hardwareBus0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test10 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "s" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , ( DebugInfo ) null ) ; hardwareBus0 . setAutoShutdownListener ( ( Restartable ) computer0 ) ; HeatSinks heatSinks0 = robot0 . getHeatSinks ( ) ; hardwareBus0 . setHeat ( ( Heat ) heatSinks0 ) ; hardwareBus0 . checkHeat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test11 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "s" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; Memory memory0 = new Memory ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , ( DebugInfo ) null ) ; hardwareBus0 . setAutoShutdownListener ( ( Restartable ) computer0 ) ; HeatSinks heatSinks0 = robot0 . getHeatSinks ( ) ; computer0 . shutDown ( ) ; hardwareBus0 . setHeat ( ( Heat ) heatSinks0 ) ; hardwareBus0 . checkHeat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getShutdownLevel ( ) { return ( int ) Math . round ( autoShutDown . getLogScale ( ) ) ; }
void test12 ( ) throws Throwable { HardwareBus hardwareBus0 = new HardwareBus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkHeat ( ) { if ( isAutoShutdownEngaged ( ) ) { shutDown ( ) ; } if ( autoShutdownTarget . isShutDown ( ) & & isAutoStartupEngaged ( ) ) { autoShutdownTarget . startUp ( ) ; } }
void test0 ( ) throws Throwable { BitwiseOrInstruction bitwiseOrInstruction0 = new BitwiseOrInstruction ( 1244 ) ; int int0 = bitwiseOrInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { JumpWhenNotZeroInstruction jumpWhenNotZeroInstruction0 = new JumpWhenNotZeroInstruction ( 496 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JumpWhenNotZeroInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { MultiplyInstruction multiplyInstruction0 = new MultiplyInstruction ( 1244 ) ; int int0 = multiplyInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { ModuloInstruction moduloInstruction0 = new ModuloInstruction ( ( - 258 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ModuloInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test4 ( ) throws Throwable { Memory memory0 = new Memory ( ) ; RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 217 ) ; memory0 . addMemoryArray ( ( MemoryArray ) randomAccessMemoryArray0 ) ; MemoryCell memoryCell0 = new MemoryCell ( memory0 , 4 ) ; Flags flags0 = new Flags ( memoryCell0 ) ; flags0 . setLess ( true ) ; String string0 = flags0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short signed ( ) { return memory . get ( address ) ; }
void test0 ( ) throws Throwable { SubtractInstruction subtractInstruction0 = new SubtractInstruction ( 1244 ) ; int int0 = subtractInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 2011 ) ; randomAccessMemoryArray0 . or ( 486 , ( short ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test2 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 0 ) ; randomAccessMemoryArray0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test4 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 2011 ) ; randomAccessMemoryArray0 . and ( 486 , ( short ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test5 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 634 ) ; randomAccessMemoryArray0 . put ( 255 , ( short ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { JumpWhenLessOrEqualInstruction jumpWhenLessOrEqualInstruction0 = new JumpWhenLessOrEqualInstruction ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JumpWhenLessOrEqualInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { JumpWhenGreaterOrEqualInstruction jumpWhenGreaterOrEqualInstruction0 = new JumpWhenGreaterOrEqualInstruction ( 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JumpWhenGreaterOrEqualInstruction ( int baseExecutionCost ) { super ( baseExecutionCost ) ; }
void test0 ( ) throws Throwable { InstructionTable instructionTable0 = new InstructionTable ( ) ; NoOperationInstruction noOperationInstruction0 = ( NoOperationInstruction ) instructionTable0 . getNumberedLabelInstruction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instruction getNumberedLabelInstruction ( ) { return numberedLabelInstruction ; }
void test1 ( ) throws Throwable { InstructionTable instructionTable0 = new InstructionTable ( ) ; InvalidMicrocodeInstruction invalidMicrocodeInstruction0 = ( InvalidMicrocodeInstruction ) instructionTable0 . getInvalidMicrocodeInstruction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instruction getInvalidMicrocodeInstruction ( ) { return invalidMicrocodeInstruction ; }
void test2 ( ) throws Throwable { InstructionTable instructionTable0 = new InstructionTable ( ) ; UnknownInstruction unknownInstruction0 = ( UnknownInstruction ) instructionTable0 . getInstruction ( ( short ) ( - 1147 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instruction getInstruction ( short value ) { return value > = 0 & & value < instructions . length ? instructions [ value ] : UNKNOWN_INSTRUCTION ; }
void test3 ( ) throws Throwable { InstructionTable instructionTable0 = new InstructionTable ( ) ; AddInstruction addInstruction0 = ( AddInstruction ) instructionTable0 . getInstruction ( ( short ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instruction getInstruction ( short value ) { return value > = 0 & & value < instructions . length ? instructions [ value ] : UNKNOWN_INSTRUCTION ; }
void test4 ( ) throws Throwable { InstructionTable instructionTable0 = new InstructionTable ( ) ; UnknownInstruction unknownInstruction0 = ( UnknownInstruction ) instructionTable0 . getInstruction ( ( short ) 643 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instruction getInstruction ( short value ) { return value > = 0 & & value < instructions . length ? instructions [ value ] : UNKNOWN_INSTRUCTION ; }
void test0 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1936 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test1 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1936 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test2 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1936 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test3 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1936 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test4 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1936 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test5 ( ) throws Throwable { RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray ( 1936 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { BitwiseExclusiveOrInstruction bitwiseExclusiveOrInstruction0 = new BitwiseExclusiveOrInstruction ( 1244 ) ; int int0 = bitwiseExclusiveOrInstruction0 . combine ( ( short ) 0 , ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int combine ( short first , short second ) { return first | second ; }
void test0 ( ) throws Throwable { Microcode microcode0 = Microcode . get ( 0 ) ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 0 , 0 , debugInfo0 ) ; int int0 = microcode0 . getAddress ( computer0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAddress ( Computer computer , int opnumber ) ; }
void test8 ( ) throws Throwable { Microcode microcode0 = Microcode . ResolvedLabel ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 325 , 325 , debugInfo0 ) ; int int0 = microcode0 . getAddress ( computer0 , 325 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAddress ( Computer computer , int opnumber ) ; }
void test9 ( ) throws Throwable { Microcode microcode0 = Microcode . UnresolvedLabel ; Memory memory0 = new Memory ( ) ; DebugInfo debugInfo0 = new DebugInfo ( ) ; Computer computer0 = new Computer ( memory0 , 18 , 18 , debugInfo0 ) ; int int0 = microcode0 . getAddress ( computer0 , 18 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAddress ( Computer computer , int opnumber ) ; }
void test13 ( ) throws Throwable { Microcode microcode0 = Microcode . get ( ( - 660 ) ) ; boolean boolean0 = microcode0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { return this ! = Invalid & & this ! = UnresolvedLabel ; }
void test14 ( ) throws Throwable { Microcode microcode0 = Microcode . UnresolvedLabel ; boolean boolean0 = microcode0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { return this ! = Invalid & & this ! = UnresolvedLabel ; }
void test15 ( ) throws Throwable { Microcode microcode0 = Microcode . get ( 0 ) ; boolean boolean0 = microcode0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAddressible ( ) { return this = = Dereference | | this = = DoubleDereference ; }
void test16 ( ) throws Throwable { Microcode microcode0 = Microcode . Dereference ; boolean boolean0 = microcode0 . hasValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasValue ( ) { return isAddressible ( ) | | this = = Constant ; }
void test17 ( ) throws Throwable { Microcode microcode0 = Microcode . DoubleDereference ; boolean boolean0 = microcode0 . isAddressible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAddressible ( ) { return this = = Dereference | | this = = DoubleDereference ; }
void test18 ( ) throws Throwable { Microcode microcode0 = Microcode . ResolvedLabel ; boolean boolean0 = microcode0 . hasValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasValue ( ) { return isAddressible ( ) | | this = = Constant ; }
void test19 ( ) throws Throwable { Microcode microcode0 = Microcode . get ( 0 ) ; boolean boolean0 = microcode0 . hasValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAddressible ( ) { return this = = Dereference | | this = = DoubleDereference ; }
void test0 ( ) throws Throwable { short [ ] shortArray0 = new short [ 2 ] ; Program program0 = new Program ( shortArray0 ) ; ReadOnlyMemoryArray readOnlyMemoryArray0 = ( ReadOnlyMemoryArray ) program0 . createProgramMemory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { DebugInfo debugInfo0 = new DebugInfo ( ) ; debugInfo0 . addVariable ( 0 , "" ) ; Integer integer0 = debugInfo0 . getVariableAddress ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLineForInstructionPointer ( int instructionPointer ) { return lineByInstructionPointer . get ( instructionPointer ) ; }
void test2 ( ) throws Throwable { DebugInfo debugInfo0 = new DebugInfo ( ) ; String string0 = debugInfo0 . getVariableName ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVariableName ( int address ) { if ( variableNamesByAddress . get ( address ) ! = null ) { return variableNamesByAddress . get ( address ) + "@" + address ; } else { return "@" + address ; } }
void test3 ( ) throws Throwable { DebugInfo debugInfo0 = new DebugInfo ( ) ; debugInfo0 . addVariable ( 0 , "" ) ; String string0 = debugInfo0 . getVariableName ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVariableName ( int address ) { if ( variableNamesByAddress . get ( address ) ! = null ) { return variableNamesByAddress . get ( address ) + "@" + address ; } else { return "@" + address ; } }
void test3 ( ) throws Throwable { JsonToSnapshots . Types jsonToSnapshots_Types0 = JsonToSnapshots . Types . explosion ; JsonToSnapshots jsonToSnapshots0 = new JsonToSnapshots ( ) ; JSONObject jSONObject0 = new JSONObject ( ( Object ) "0x1 . 017f52p9" ) ; ExplosionSnapshot explosionSnapshot0 = ( ExplosionSnapshot ) jsonToSnapshots_Types0 . convert ( jsonToSnapshots0 , jSONObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadius ( ) { return ( damageAtCenter ) ; }
void test0 ( ) throws Throwable { SnapshotToJson snapshotToJson0 = new SnapshotToJson ( ) ; JSONArray jSONArray0 = snapshotToJson0 . getSnapshots ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { SnapshotToJson snapshotToJson0 = new SnapshotToJson ( ) ; UnknownSnapshot unknownSnapshot0 = new UnknownSnapshot ( "yy`fP } 3" ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( ( - 1332 . 5201638821545 ) ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; unknownSnapshot0 . setPositionVector ( vector0 ) ; JSONObject jSONObject0 = snapshotToJson0 . getBasicJson ( ( ArenaObjectSnapshot ) unknownSnapshot0 , "yy`fP } 3" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 255 ) ) ; PolarVector polarVector0 = PolarVector . createPolar ( absoluteAngle0 , ( - 814 . 0304213208852 ) ) ; PolarVector polarVector1 = ( PolarVector ) polarVector0 . projectOnto ( ( Vector ) polarVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( 8 . 210919342549543 ) ; PolarVector polarVector0 = PolarVector . createPolar ( absoluteAngle0 , 32 . 831454397338355 ) ; String string0 = polarVector0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { Temperature temperature0 = Temperature . BASE_TEMPERATURE ; Temperature temperature1 = temperature0 . plus ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test1 ( ) throws Throwable { Temperature temperature0 = Temperature . BASE_TEMPERATURE ; temperature0 . compareTo ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test2 ( ) throws Throwable { Temperature temperature0 = Temperature . fromLogScale ( 0 . 0 ) ; Temperature temperature1 = temperature0 . minus ( temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test3 ( ) throws Throwable { Temperature temperature0 = Temperature . fromLogScale ( 0 . 0 ) ; Temperature temperature1 = temperature0 . times ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test4 ( ) throws Throwable { Temperature temperature0 = Temperature . BASE_TEMPERATURE ; boolean boolean0 = temperature0 . equals ( ( Object ) "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test5 ( ) throws Throwable { Temperature temperature0 = Temperature . fromLogScale ( 0 . 0 ) ; boolean boolean0 = temperature0 . equals ( ( Object ) temperature0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test6 ( ) throws Throwable { Temperature temperature0 = Temperature . fromLogScale ( 822 . 4934154233018 ) ; boolean boolean0 = temperature0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test7 ( ) throws Throwable { Temperature temperature0 = new Temperature ( ( - 805 . 2257751633357 ) ) ; Temperature temperature1 = temperature0 . times ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLogScale ( ) { return logScale ; }
void test8 ( ) throws Throwable { Temperature temperature0 = Temperature . BASE_TEMPERATURE ; int int0 = temperature0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long temp = radians ! = + 0 . 0d ? Double . doubleToLongBits ( radians ) : 0L ; return ( int ) ( temp ^ ( temp > > > 32 ) ) ; }
void test9 ( ) throws Throwable { Temperature temperature0 = Temperature . fromLogScale ( 617 . 950581053526 ) ; int int0 = temperature0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long temp = radians ! = + 0 . 0d ? Double . doubleToLongBits ( radians ) : 0L ; return ( int ) ( temp ^ ( temp > > > 32 ) ) ; }
void test1 ( ) throws Throwable { Duration duration0 = Duration . ONE_CYCLE ; DistanceOverTime distanceOverTime0 = new DistanceOverTime ( 0 . 0 , duration0 ) ; String string0 = distanceOverTime0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 801 ) ) ; Vector vector0 = absoluteAngle0 . toVector ( ( double ) ( - 801 ) ) ; Vector vector1 = vector0 . projectOnto ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test1 ( ) throws Throwable { Vector vector0 = Vector . createCartesian ( 599 . 4635754259658 , 599 . 4635754259658 ) ; String string0 = vector0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test2 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 801 ) ) ; Vector vector0 = absoluteAngle0 . toVector ( ( double ) ( - 801 ) ) ; Point2D . Double point2D_Double0 = ( Point2D . Double ) vector0 . toPoint2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( 0 . 0 ) ; Vector vector0 = Vector . createCartesian ( ( - 1 . 0 ) , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMagnitude ( ) { return Math . hypot ( x , y ) ; }
void test4 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1393 . 4638225116755 ) , 1674 . 9924295219112 ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; Vector vector1 = vector0 . perpendicularIntersectionFrom ( vector0 , absoluteAngle0 , 738 . 0996149273094 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test5 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1 . 0 ) , 0 . 0 ) ; Vector vector0 = absoluteAngle0 . toVector ( ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test6 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 0 ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test7 ( ) throws Throwable { Vector vector0 = Vector . createCartesian ( ( - 1 . 0 ) , 0 . 0 ) ; Vector vector1 = vector0 . plus ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMagnitude ( ) { return Math . hypot ( x , y ) ; }
void test8 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1 . 0 ) , 0 . 0 ) ; Vector vector0 = absoluteAngle0 . toVector ( ( - 1 . 0 ) ) ; Vector vector1 = absoluteAngle0 . toUnitVector ( ) ; Vector vector2 = vector0 . plus ( vector1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; Duration duration1 = duration0 . plus ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; double double0 = duration0 . divided ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double divided ( Duration duration ) { return ( ( double ) cycles ) / ( ( double ) duration . cycles ) ; }
void test2 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; String string0 = duration0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; int int0 = duration0 . compareTo ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCycles ( ) { return cycles ; }
void test4 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; Duration duration1 = duration0 . minus ( duration0 ) ; int int0 = duration1 . compareTo ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCycles ( ) { return cycles ; }
void test5 ( ) throws Throwable { Duration duration0 = Duration . fromCycles ( 1057 ) ; Duration duration1 = Duration . ZERO_CYCLE ; int int0 = duration0 . compareTo ( duration1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCycles ( ) { return cycles ; }
void test0 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1255 . 8721599803443 ) , ( - 1255 . 8721599803443 ) ) ; CartesianVector cartesianVector0 = ( CartesianVector ) Vector . createCartesian ( ( - 1255 . 8721599803443 ) , ( - 1255 . 8721599803443 ) ) ; Vector vector0 = absoluteAngle0 . projectAngle ( ( Vector ) cartesianVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getX ( ) { return x ; }
void test0 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( ( double ) 15 ) ; AbsoluteAngle absoluteAngle1 = absoluteAngle0 . getSupplementary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( ( double ) 15 ) ; RelativeAngle relativeAngle0 = absoluteAngle0 . counterClockwiseFromStandardOrigin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadians ( ) { return radians ; }
void test2 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 424 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 27 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getX ( ) { return x ; }
void test4 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 1465 . 1868186155336 , 1465 . 1868186155336 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test5 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 1465 . 1868186155336 , 1465 . 1868186155336 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test6 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getX ( ) { return x ; }
void test7 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double sine ( ) { return Math . sin ( radians ) ; }
void test8 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 31 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test9 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 27 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSignedBygrees ( ) { return ( byte ) getBygrees ( ) ; }
void test10 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( ( - 1625 . 8346933947073 ) ) ; double double0 = absoluteAngle0 . getNormalizedRadians ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNormalizedRadians ( ) { if ( radians > = FULL_CIRCLE_RADIANS | | radians < 0 ) { return Math . atan2 ( sine ( ) , cosine ( ) ) ; } return radians ; }
void test11 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNormalizedRadians ( ) { if ( radians > = FULL_CIRCLE_RADIANS | | radians < 0 ) { return Math . atan2 ( sine ( ) , cosine ( ) ) ; } return radians ; }
void test12 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadians ( ) { return radians ; }
void test13 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 424 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double cosine ( ) { return Math . cos ( radians ) ; }
void test14 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 31 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadians ( ) { return radians ; }
void test15 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test16 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 31 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNormalizedRadians ( ) { if ( radians > = FULL_CIRCLE_RADIANS | | radians < 0 ) { return Math . atan2 ( sine ( ) , cosine ( ) ) ; } return radians ; }
void test17 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 424 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadians ( ) { return radians ; }
void test18 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBygrees ( ) { return radiansToBygrees ( getRadians ( ) ) ; }
void test19 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 1465 . 1868186155336 , 1465 . 1868186155336 ) ; RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; AbsoluteAngle absoluteAngle1 = absoluteAngle0 . counterClockwise ( relativeAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNormalizedRadians ( ) { if ( radians > = FULL_CIRCLE_RADIANS | | radians < 0 ) { return Math . atan2 ( sine ( ) , cosine ( ) ) ; } return radians ; }
void test20 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBygrees ( ) { return radiansToBygrees ( getRadians ( ) ) ; }
void test21 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( ( - 27 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long temp = radians ! = + 0 . 0d ? Double . doubleToLongBits ( radians ) : 0L ; return ( int ) ( temp ^ ( temp > > > 32 ) ) ; }
void test0 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 1 . 0 , 1 . 0 ) ; AngleBracket angleBracket0 = AngleBracket . between ( absoluteAngle0 , absoluteAngle0 ) ; Arc2D . Double arc2D_Double0 = ( Arc2D . Double ) angleBracket0 . toShape ( 542 . 5697309282872 , 423 . 2243962017909 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Shape toShape ( double x , double y , double radius ) { Arc2D . Double arc = new Arc2D . Double ( ) ; arc . setArcByCenter ( x , y , radius , - counterClockwiseBound . getDegrees ( ) , rangeSize . getDegrees ( ) , Arc2D . PIE ) ; return arc ; }
void test1 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 0 . 0 , 0 . 0 ) ; RelativeAngle relativeAngle0 = RelativeAngle . HALF_CIRCLE ; AngleBracket angleBracket0 = AngleBracket . clockwiseFrom ( absoluteAngle0 , relativeAngle0 ) ; AngleBracket angleBracket1 = angleBracket0 . subrange ( 0 . 0 , 1 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test2 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; Ellipse2D . Double ellipse2D_Double0 = ( Ellipse2D . Double ) angleBracket0 . toShape ( ( - 1152 . 9590831654955 ) , ( - 1152 . 9590831654955 ) , ( - 1152 . 9590831654955 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Shape toShape ( double x , double y , double radius ) { Arc2D . Double arc = new Arc2D . Double ( ) ; arc . setArcByCenter ( x , y , radius , - counterClockwiseBound . getDegrees ( ) , rangeSize . getDegrees ( ) , Arc2D . PIE ) ; return arc ; }
void test3 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 1011 . 8551557612594 , 1011 . 8551557612594 ) ; RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; AngleBracket angleBracket0 = AngleBracket . around ( absoluteAngle0 , relativeAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AngleBracket around ( AbsoluteAngle center , RelativeAngle width ) { return new AngleBracket ( center . counterClockwise ( width ) , width . times ( 2 ) ) ; }
void test5 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 0 . 0 , 0 . 0 ) ; RelativeAngle relativeAngle0 = RelativeAngle . HALF_CIRCLE ; AngleBracket angleBracket0 = AngleBracket . clockwiseFrom ( absoluteAngle0 , relativeAngle0 ) ; AbsoluteAngle absoluteAngle1 = angleBracket0 . randomAngleBetween ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadians ( ) { return radians ; }
void test6 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 242 ) ; AngleBracket angleBracket0 = AngleBracket . between ( absoluteAngle0 , absoluteAngle0 ) ; AbsoluteAngle absoluteAngle1 = angleBracket0 . getCounterClockwiseBound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test7 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 242 ) ; AngleBracket angleBracket0 = AngleBracket . all ( ) ; boolean boolean0 = angleBracket0 . contains ( absoluteAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( AbsoluteAngle angle ) { return counterClockwiseBound . getAngleCounterClockwiseTo ( angle ) . compareTo ( rangeSize ) < = 0 ; }
void test8 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 242 ) ; AbsoluteAngle absoluteAngle1 = absoluteAngle0 . getSupplementary ( ) ; AngleBracket angleBracket0 = AngleBracket . between ( absoluteAngle0 , absoluteAngle0 ) ; boolean boolean0 = angleBracket0 . contains ( absoluteAngle1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( AbsoluteAngle angle ) { return counterClockwiseBound . getAngleCounterClockwiseTo ( angle ) . compareTo ( rangeSize ) < = 0 ; }
void test9 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 242 ) ; AngleBracket angleBracket0 = AngleBracket . between ( absoluteAngle0 , absoluteAngle0 ) ; boolean boolean0 = angleBracket0 . contains ( absoluteAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( AbsoluteAngle angle ) { return counterClockwiseBound . getAngleCounterClockwiseTo ( angle ) . compareTo ( rangeSize ) < = 0 ; }
void test10 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 0 . 0 , 0 . 0 ) ; RelativeAngle relativeAngle0 = RelativeAngle . HALF_CIRCLE ; AngleBracket angleBracket0 = AngleBracket . clockwiseFrom ( absoluteAngle0 , relativeAngle0 ) ; AbsoluteAngle absoluteAngle1 = angleBracket0 . getClockwiseBound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSignedBygrees ( ) { return ( byte ) getBygrees ( ) ; }
void test11 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; AbsoluteAngle absoluteAngle0 = angleBracket0 . getClockwiseBound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbsoluteAngle getClockwiseBound ( ) { return counterClockwiseBound = = null ? null : counterClockwiseBound . clockwise ( getRangeSize ( ) ) ; }
void test0 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . HALF_CIRCLE ; double double0 = relativeAngle0 . dividedBy ( relativeAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double dividedBy ( RelativeAngle relativeAngle ) { return radians / relativeAngle . radians ; }
void test1 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromRadians ( ( double ) 839 ) ; byte byte0 = relativeAngle0 . getSignedBygrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBygrees ( ) { return radiansToBygrees ( getRadians ( ) ) ; }
void test2 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . HALF_CIRCLE ; int int0 = relativeAngle0 . compareTo ( relativeAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test3 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; RelativeAngle relativeAngle1 = relativeAngle0 . times ( ( - 15 . 62171829661489 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test4 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( ( - 30 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBygrees ( ) { return radiansToBygrees ( getRadians ( ) ) ; }
void test5 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( ( - 1303 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test6 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; String string0 = relativeAngle0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test7 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; RelativeAngle relativeAngle1 = relativeAngle0 . times ( ( - 15 . 62171829661489 ) ) ; RelativeAngle relativeAngle2 = relativeAngle1 . normalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBygrees ( ) { return radiansToBygrees ( getRadians ( ) ) ; }
void test8 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test9 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test10 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test11 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . HALF_CIRCLE ; boolean boolean0 = relativeAngle0 . isExactBygrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExactBygrees ( ) { return false ; }
void test12 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; RelativeAngle relativeAngle1 = relativeAngle0 . normalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test13 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test14 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test15 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; byte byte0 = relativeAngle0 . getSignedBygrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSignedBygrees ( ) { return ( byte ) getBygrees ( ) ; }
void test16 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromRadians ( ( double ) 839 ) ; RelativeAngle relativeAngle1 = relativeAngle0 . normalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBygrees ( ) { return radiansToBygrees ( getRadians ( ) ) ; }
void test17 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromBygrees ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDegrees ( ) { return getRadians ( ) / Math . PI * 180 ; }
void test0 ( ) throws Throwable { Speed speed0 = new Speed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { Speed speed0 = new Speed ( ) ; Duration duration0 = Duration . ONE_CYCLE ; double double0 = speed0 . times ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test2 ( ) throws Throwable { Speed speed0 = new Speed ( ) ; String string0 = speed0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; Scan scan0 = new Scan ( angleBracket0 , 1 . 0 , true , ( Vector ) null , true , 663 ) ; ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor ( ) ; scan0 . accept ( ( ArenaObjectVisitor ) arenaObjectVisitorAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test1 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; Scan scan0 = new Scan ( angleBracket0 , 0 . 0 , true , ( Vector ) null , true , 0 ) ; ScanSnapshot scanSnapshot0 = ( ScanSnapshot ) scan0 . createSpecificSnapshot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccuracyAvailable ( ) { return accuracyAvailable ; }
void test2 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; Scan scan0 = new Scan ( angleBracket0 , 0 . 0 , true , ( Vector ) null , true , 0 ) ; Duration duration0 = Duration . fromCycles ( 1465 ) ; scan0 . update ( duration0 ) ; scan0 . update ( duration0 ) ; scan0 . update ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test0 ( ) throws Throwable { LinkedList < ArenaObjectSnapshot > linkedList0 = new LinkedList < ArenaObjectSnapshot > ( ) ; LinkedList < RobotSnapshot > linkedList1 = new LinkedList < RobotSnapshot > ( ) ; SimulationFrame simulationFrame0 = new SimulationFrame ( ( Collection < ArenaObjectSnapshot > ) linkedList0 , ( Collection < RobotSnapshot > ) linkedList1 , true ) ; boolean boolean0 = simulationFrame0 . isRoundOver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoundOver ( ) { return roundOver ; }
void test1 ( ) throws Throwable { LinkedList < ArenaObjectSnapshot > linkedList0 = new LinkedList < ArenaObjectSnapshot > ( ) ; LinkedList < RobotSnapshot > linkedList1 = new LinkedList < RobotSnapshot > ( ) ; SimulationFrame simulationFrame0 = new SimulationFrame ( ( Collection < ArenaObjectSnapshot > ) linkedList0 , ( Collection < RobotSnapshot > ) linkedList1 , false ) ; Collection < ArenaObjectSnapshot > collection0 = simulationFrame0 . getAllObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoundOver ( ) { return roundOver ; }
void test3 ( ) throws Throwable { LinkedList < ArenaObjectSnapshot > linkedList0 = new LinkedList < ArenaObjectSnapshot > ( ) ; LinkedList < RobotSnapshot > linkedList1 = new LinkedList < RobotSnapshot > ( ) ; SimulationFrame simulationFrame0 = new SimulationFrame ( ( Collection < ArenaObjectSnapshot > ) linkedList0 , ( Collection < RobotSnapshot > ) linkedList1 , false ) ; RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; linkedList0 . add ( ( ArenaObjectSnapshot ) robotSnapshot0 ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; simulationFrame0 . visitAll ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoundOver ( ) { return roundOver ; }
void test4 ( ) throws Throwable { LinkedList < RobotSnapshot > linkedList0 = new LinkedList < RobotSnapshot > ( ) ; SimulationFrame simulationFrame0 = new SimulationFrame ( ( Collection < ArenaObjectSnapshot > ) null , ( Collection < RobotSnapshot > ) linkedList0 , true ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; linkedList0 . add ( robotSnapshot0 ) ; simulationFrame0 . visitRobots ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoundOver ( ) { return roundOver ; }
void test1 ( ) throws Throwable { Heading heading0 = new Heading ( ) ; Speed speed0 = new Speed ( ) ; Velocity velocity0 = new Velocity ( heading0 , speed0 ) ; String string0 = velocity0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { Heading heading0 = new Heading ( ) ; String string0 = heading0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 458 . 25552644140515 ) , ( - 458 . 25552644140515 ) ) ; Heading heading0 = new Heading ( absoluteAngle0 ) ; RelativeAngle relativeAngle0 = absoluteAngle0 . counterClockwiseFromStandardOrigin ( ) ; heading0 . rotate ( relativeAngle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test2 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 458 . 25552644140515 ) , ( - 458 . 25552644140515 ) ) ; Heading heading0 = new Heading ( absoluteAngle0 ) ; Vector vector0 = heading0 . times ( 40 . 74366543152521 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test4 ( ) throws Throwable { Heading heading0 = new Heading ( ) ; Heading heading1 = new Heading ( ) ; RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; RelativeAngle relativeAngle1 = relativeAngle0 . normalize ( ) ; heading0 . moveToward ( heading1 , relativeAngle1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test5 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 0 . 0 , 0 . 0 ) ; Heading heading0 = new Heading ( absoluteAngle0 ) ; RelativeAngle relativeAngle0 = RelativeAngle . fromRadians ( ( - 1 . 0 ) ) ; RelativeAngle relativeAngle1 = relativeAngle0 . dividedBy ( ( - 1 . 0 ) ) ; heading0 . moveToward ( heading0 , relativeAngle1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test6 ( ) throws Throwable { Heading heading0 = new Heading ( ) ; RelativeAngle relativeAngle0 = RelativeAngle . FULL_CIRCLE ; RelativeAngle relativeAngle1 = relativeAngle0 . dividedBy ( ( - 563 . 8359956072502 ) ) ; heading0 . moveToward ( heading0 , relativeAngle1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { RoundTimer roundTimer0 = new RoundTimer ( ) ; Duration duration0 = Duration . ZERO_CYCLE ; roundTimer0 . increment ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { RoundTimer roundTimer0 = new RoundTimer ( ) ; Duration duration0 = roundTimer0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , 647 , ( RobotScore ) robotScoreKeeper0 ) ; Mine mine0 = new Mine ( ( DamageInflicter ) robot0 ) ; Position position0 = mine0 . getPosition ( ) ; LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction ( position0 , ( double ) 0 , 0 . 0 ) ; double double0 = linearDamageFunction0 . getRadius ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadius ( ) { return ( damageAtCenter ) ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , 647 , ( RobotScore ) robotScoreKeeper0 ) ; Mine mine0 = new Mine ( ( DamageInflicter ) robot0 ) ; Position position0 = mine0 . getPosition ( ) ; LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction ( position0 , ( double ) 0 , 0 . 0 ) ; linearDamageFunction0 . getCenter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadius ( ) { return ( damageAtCenter ) ; }
void test0 ( ) throws Throwable { SimulationFrameBuffer simulationFrameBuffer0 = new SimulationFrameBuffer ( ) ; SimulationFrame simulationFrame0 = simulationFrameBuffer0 . getCurrentFrame ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimulationFrame getCurrentFrame ( ) { return currentFrame ; }
void test1 ( ) throws Throwable { SimulationFrameBuffer simulationFrameBuffer0 = new SimulationFrameBuffer ( ) ; RobotStatusPane robotStatusPane0 = RobotStatusPane . createRobotStatusPane ( ) ; simulationFrameBuffer0 . removeSimulationObserver ( ( SimulationObserver ) robotStatusPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeSimulationObserver ( SimulationObserver observer ) { ( observers ) { observers . remove ( observer ) ; } }
void test1 ( ) throws Throwable { Position position0 = new Position ( ) ; Vector vector0 = position0 . getVector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector getVector ( ) { return vector ; }
void test2 ( ) throws Throwable { Position position0 = new Position ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Position ( ) { }
void test0 ( ) throws Throwable { AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 1291 ) ; Vector vector0 = absoluteAngle0 . toVector ( 194 . 42456624560356 ) ; Explosion explosion0 = new Explosion ( vector0 , 194 . 42456624560356 ) ; ExplosionSnapshot explosionSnapshot0 = ( ExplosionSnapshot ) explosion0 . getSnapshot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getVelocityY ( ) { return getVelocityVector ( ) . getY ( ) ; }
void test1 ( ) throws Throwable { Explosion explosion0 = new Explosion ( ( Vector ) null , ( - 1109 . 6646965912687 ) ) ; ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor ( ) ; explosion0 . accept ( ( ArenaObjectVisitor ) arenaObjectVisitorAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test2 ( ) throws Throwable { Explosion explosion0 = new Explosion ( ( Vector ) null , 0 . 125 ) ; Duration duration0 = Duration . ONE_CYCLE ; explosion0 . update ( duration0 ) ; explosion0 . update ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test3 ( ) throws Throwable { Explosion explosion0 = new Explosion ( ( Vector ) null , ( - 1 . 0 ) ) ; Duration duration0 = Duration . fromCycles ( ( - 739 ) ) ; explosion0 . update ( duration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test0 ( ) throws Throwable { Odometer odometer0 = new Odometer ( ) ; odometer0 . setDistance ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test1 ( ) throws Throwable { Odometer odometer0 = new Odometer ( ) ; odometer0 . accumulate ( 1 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test2 ( ) throws Throwable { Odometer odometer0 = new Odometer ( ) ; odometer0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test3 ( ) throws Throwable { Odometer odometer0 = new Odometer ( ) ; double double0 = odometer0 . getDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test0 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "UCU@ [ " , 594 , ( RobotScore ) robotScoreKeeper0 ) ; Position position0 = robot0 . getPosition ( ) ; LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction ( position0 , ( double ) 594 , ( - 965 . 3090693372466 ) ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromRadians ( 300 . 0 ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; Position position1 = new Position ( vector0 ) ; position0 . copyFrom ( position1 ) ; linearDamageFunction0 . inflictDamage ( ( DamageInflicter ) robot0 , ( TangibleArenaObject ) robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test1 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; int int0 = robotScanResult0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Throttle getThrottle ( ) { return throttle ; }
void test2 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; int int0 = robotScanResult0 . getThrottle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccuracy ( ) ; }
void test3 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; robotScanResult0 . getHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test4 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; robotScanResult0 . getAngle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test5 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; double double0 = robotScanResult0 . getDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Throttle getThrottle ( ) { return throttle ; }
void test6 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; robotScanResult0 . getMatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Throttle getThrottle ( ) { return throttle ; }
void test7 ( ) throws Throwable { RobotScanResult robotScanResult0 = new RobotScanResult ( ) ; robotScanResult0 . getMatchPositionVector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistance ( ) ; AbsoluteAngle getAngle ( ) ; boolean successful ( ) ; int getAccuracy ( ) ; }
void test0 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; FinalRobotScore finalRobotScore0 = ( FinalRobotScore ) FinalRobotScore . copyOf ( ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalDeaths ( ) { return score . getTotalDeaths ( ) ; }
void test1 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; FinalRobotScore finalRobotScore0 = ( FinalRobotScore ) FinalRobotScore . copyOf ( ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalTies ( ) { return score . getTotalTies ( ) ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; FinalRobotScore finalRobotScore0 = ( FinalRobotScore ) FinalRobotScore . copyOf ( ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalWins ( ) { return score . getTotalWins ( ) ; }
void test3 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; FinalRobotScore finalRobotScore0 = ( FinalRobotScore ) FinalRobotScore . copyOf ( ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalKills ( ) { return score . getTotalKills ( ) ; }
void test5 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; FinalRobotScore finalRobotScore0 = ( FinalRobotScore ) FinalRobotScore . copyOf ( ( RobotScore ) robotScoreKeeper0 ) ; FinalRobotScore finalRobotScore1 = ( FinalRobotScore ) FinalRobotScore . copyOf ( ( RobotScore ) finalRobotScore0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalTies ( ) { return score . getTotalTies ( ) ; }
void test0 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , ( - 1431 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test1 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "'3mY ( | NXhnE\"\" ? ? " , ( - 16 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destruct ( ) ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "OuZ$tOfBounds : @" , ( - 1946 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void handleInterrupt ( ) { odometer . setDistance ( ( 0 ) ) ; meters . set ( ( short ) 0 ) ; }
void test3 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "JEQ" , ( - 17 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test4 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "Kills ( rEund / toal ) : " , 119 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArenaObjectSnapshot getSnapshot ( ) { ArenaObjectSnapshot objectSnapshot = createSpecificSnapshot ( ) ; objectSnapshot . setPositionVector ( position . getVector ( ) ) ; objectSnapshot . setVelocityVector ( velocity . times ( Duration . ONE_CYCLE ) ) ; objectSnapshot . setDead ( isDead ( ) ) ; return objectSnapshot ; }
void test5 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "3" , 1714 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test6 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "1W + = ) { Zz6 ] O" , ( - 1347 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setComputer ( Computer computer ) { this . computer = computer ; computer . setId ( getId ( ) ) ; computer . setName ( getName ( ) ) ; }
void test7 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "3" , 1714 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test8 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "K^" , 226 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTurretShift ( ) { return getTurret ( ) . getHeading ( ) . getAngle ( ) . getAngleCounterClockwiseTo ( getHeading ( ) . getAngle ( ) ) . getBygrees ( ) ; }
void test9 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "OuZ$tOfBounds : @" , ( - 1946 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test10 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test11 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "K^" , 226 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test12 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "aI - / puRa` > v / " , ( - 1 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test13 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "OuZ$tOfBounds : @" , ( - 1946 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test14 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "K^" , 226 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test15 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "1W + = ) { Zz6 ] O" , ( - 1347 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test16 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , ( - 1431 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test17 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "OuZ$tOfBounds : @" , ( - 1946 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test18 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test19 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "JEQ" , ( - 17 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setArena ( Arena arena ) { this . arena = arena ; }
void test20 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test21 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test22 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "Not addressable$erroV . " , 2 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test23 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "thRS%\" : 98H`L > fp2" , ( - 14 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test24 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "$u" , 7 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test25 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "$u" , 7 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test26 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "Not addressable$erroV . " , 2 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test27 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "3" , 1714 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test28 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , ( - 1431 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test29 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , ( - 1431 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test30 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "aI - / puRa` > v / " , ( - 1 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test31 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test32 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "Not addressable$erroV . " , 2 , ( RobotScore ) robotScoreKeeper0 ) ; robot0 . addRobotListener ( ( RobotListener ) robotScoreKeeper0 ) ; robot0 . tieRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test33 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "$u" , 7 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test34 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "K^" , 226 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test35 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "JEQ" , ( - 17 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test36 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "aI - / puRa` > v / " , ( - 1 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test37 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "1W + = ) { Zz6 ] O" , ( - 1347 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test38 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test39 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "Not addressable$erroV . " , 2 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test40 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "2 : _2 : jjv ; uqT . 6" , 64 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test41 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "$u" , 7 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test42 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "$u" , 7 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test43 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , ( - 17 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void collides ( ) ; void winRound ( ) ; void tieRound ( ) ; }
void test44 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( " ? " , 0 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test46 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "XB" , ( - 1180 ) , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void armorDepleted ( ) ; }
void test47 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "n\b~ ] 8F\"eq ! W" , ( - 1 ) , ( RobotScore ) robotScoreKeeper0 ) ; robot0 . addRobotListener ( ( RobotListener ) robotScoreKeeper0 ) ; robot0 . winRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test48 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "Not addressable$erroV . " , 2 , ( RobotScore ) robotScoreKeeper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test49 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "n\b~ ] 8F\"eq ! W" , ( - 1 ) , ( RobotScore ) robotScoreKeeper0 ) ; robot0 . addRobotListener ( ( RobotListener ) robotScoreKeeper0 ) ; robot0 . killedRobot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; int int0 = robotScoreKeeper0 . getTotalTies ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalTies ( ) { return score . getTotalTies ( ) ; }
void test1 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; double double0 = robotScoreKeeper0 . getTotalDamageInflicted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTotalDamageInflicted ( ) { return totalDamageInflicted ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; int int0 = robotScoreKeeper0 . getTotalWins ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalWins ( ) { return score . getTotalWins ( ) ; }
void test3 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "72Fu#TmU ! h7xF7 / G ( Et" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; robotScoreKeeper0 . killedRobot ( robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalKills ( ) { return score . getTotalKills ( ) ; }
void test4 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; String string0 = robotScoreKeeper0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test5 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; robotScoreKeeper0 . tiedRound ( robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalTies ( ) { return score . getTotalTies ( ) ; }
void test6 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "72Fu#TmU ! h7xF7 / G ( Et" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; robotScoreKeeper0 . wonRound ( robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalWins ( ) { return score . getTotalWins ( ) ; }
void test7 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "RobotScoreKeeper { totalTies = 0 , totalWins = 0 , totalKills = 0 , totalDeaths = 0 , totalDamageInflicted = 0 . 0 } " , 0 , ( RobotScore ) robotScoreKeeper0 ) ; robotScoreKeeper0 . died ( robot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalDeaths ( ) { return score . getTotalDeaths ( ) ; }
void test8 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "72Fu#TmU ! h7xF7 / G ( Et" , 0 , ( RobotScore ) robotScoreKeeper0 ) ; robotScoreKeeper0 . inflictedDamage ( robot0 , 1858 . 9823291716868 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test9 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; int int0 = robotScoreKeeper0 . getTotalKills ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalKills ( ) { return score . getTotalKills ( ) ; }
void test10 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; int int0 = robotScoreKeeper0 . getTotalDeaths ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalDeaths ( ) { return score . getTotalDeaths ( ) ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "`^r ) 8Dr | b6z_vl ! " , 0 , ( RobotScore ) robotScoreKeeper0 ) ; Position position0 = new Position ( ) ; Turret turret0 = new Turret ( ) ; Heading heading0 = turret0 . getHeading ( ) ; AbsoluteAngle absoluteAngle0 = heading0 . getAngle ( ) ; RelativeAngle relativeAngle0 = RelativeAngle . fromRadians ( ( double ) 0 ) ; AngleBracket angleBracket0 = AngleBracket . around ( absoluteAngle0 , relativeAngle0 ) ; RobotScanner robotScanner0 = new RobotScanner ( robot0 , position0 , angleBracket0 , ( double ) 0 , false ) ; robotScanner0 . toScanResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNormalizedRadians ( ) { if ( radians > = FULL_CIRCLE_RADIANS | | radians < 0 ) { return Math . atan2 ( sine ( ) , cosine ( ) ) ; } return radians ; }
void test0 ( ) throws Throwable { HashMap < Map . Entry < Integer , Integer > , Map . Entry < Object , Integer > > hashMap0 = new HashMap < Map . Entry < Integer , Integer > , Map . Entry < Object , Integer > > ( ) ; MapWithDefaultValue < Map . Entry < Integer , Integer > , Map . Entry < Object , Integer > > mapWithDefaultValue0 = new MapWithDefaultValue < Map . Entry < Integer , Integer > , Map . Entry < Object , Integer > > ( ( Map < Map . Entry < Integer , Integer > , Map . Entry < Object , Integer > > ) hashMap0 , ( Map . Entry < Object , Integer > ) null ) ; boolean boolean0 = mapWithDefaultValue0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return head . signed ( ) = = tail . signed ( ) ; }
void test1 ( ) throws Throwable { HashMap < Map < Integer , Object > , Map < Object , Object > > hashMap0 = new HashMap < Map < Integer , Object > , Map < Object , Object > > ( ) ; MapWithDefaultValue < Map < Integer , Object > , Map < Object , Object > > mapWithDefaultValue0 = new MapWithDefaultValue < Map < Integer , Object > , Map < Object , Object > > ( ( Map < Map < Integer , Object > , Map < Object , Object > > ) hashMap0 ) ; mapWithDefaultValue0 . putAll ( ( Map < ? extends Map < Integer , Object > , ? extends Map < Object , Object > > ) mapWithDefaultValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return head . signed ( ) = = tail . signed ( ) ; }
void test2 ( ) throws Throwable { HashMap < AbstractMap . SimpleEntry < Object , String > , MapWithDefaultValue < String , String > > hashMap0 = new HashMap < AbstractMap . SimpleEntry < Object , String > , MapWithDefaultValue < String , String > > ( ) ; MapWithDefaultValue < AbstractMap . SimpleEntry < Object , String > , MapWithDefaultValue < String , String > > mapWithDefaultValue0 = new MapWithDefaultValue < AbstractMap . SimpleEntry < Object , String > , MapWithDefaultValue < String , String > > ( ( Map < AbstractMap . SimpleEntry < Object , String > , MapWithDefaultValue < String , String > > ) hashMap0 ) ; mapWithDefaultValue0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test4 ( ) throws Throwable { HashMap < Map . Entry < Integer , Object > , Map < Integer , Object > > hashMap0 = new HashMap < Map . Entry < Integer , Object > , Map < Integer , Object > > ( ) ; MapWithDefaultValue < Map . Entry < Integer , Object > , Map < Integer , Object > > mapWithDefaultValue0 = new MapWithDefaultValue < Map . Entry < Integer , Object > , Map < Integer , Object > > ( ( Map < Map . Entry < Integer , Object > , Map < Integer , Object > > ) hashMap0 ) ; mapWithDefaultValue0 . put ( ( Map . Entry < Integer , Object > ) null , ( Map < Integer , Object > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return head . signed ( ) = = tail . signed ( ) ; }
void test6 ( ) throws Throwable { HashMap < Object , Map < Object , Object > > hashMap0 = new HashMap < Object , Map < Object , Object > > ( ) ; MapWithDefaultValue < Object , Map < Object , Object > > mapWithDefaultValue0 = new MapWithDefaultValue < Object , Map < Object , Object > > ( ( Map < Object , Map < Object , Object > > ) hashMap0 , ( Map < Object , Object > ) null ) ; MapWithDefaultValue < Object , Map < Object , Object > > mapWithDefaultValue1 = new MapWithDefaultValue < Object , Map < Object , Object > > ( ( Map < Object , Map < Object , Object > > ) mapWithDefaultValue0 ) ; Map < Object , Object > map0 = mapWithDefaultValue1 . get ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean get ( ) ; void set ( boolean value ) ; }
void test8 ( ) throws Throwable { HashMap < Map . Entry < Integer , Object > , Map < Integer , Object > > hashMap0 = new HashMap < Map . Entry < Integer , Object > , Map < Integer , Object > > ( ) ; MapWithDefaultValue < Map . Entry < Integer , Object > , Map < Integer , Object > > mapWithDefaultValue0 = new MapWithDefaultValue < Map . Entry < Integer , Object > , Map < Integer , Object > > ( ( Map < Map . Entry < Integer , Object > , Map < Integer , Object > > ) hashMap0 ) ; Object object0 = new Object ( ) ; Map < Integer , Object > map0 = mapWithDefaultValue0 . remove ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E remove ( Object key ) { return backingMap . remove ( key ) ; }
void test9 ( ) throws Throwable { HashMap < MapWithDefaultValue < String , Object > , Map . Entry < Object , Object > > hashMap0 = new HashMap < MapWithDefaultValue < String , Object > , Map . Entry < Object , Object > > ( ) ; MapWithDefaultValue < MapWithDefaultValue < String , Object > , Map . Entry < Object , Object > > mapWithDefaultValue0 = new MapWithDefaultValue < MapWithDefaultValue < String , Object > , Map . Entry < Object , Object > > ( ( Map < MapWithDefaultValue < String , Object > , Map . Entry < Object , Object > > ) hashMap0 ) ; AbstractMap . SimpleEntry < String , String > abstractMap_SimpleEntry0 = new AbstractMap . SimpleEntry < String , String > ( " ? Llrmky@yF , z" , " ? Llrmky@yF , z" ) ; boolean boolean0 = mapWithDefaultValue0 . equals ( ( Object ) abstractMap_SimpleEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test10 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; MapWithDefaultValue < String , Integer > mapWithDefaultValue0 = new MapWithDefaultValue < String , Integer > ( ( Map < String , Integer > ) hashMap0 ) ; int int0 = mapWithDefaultValue0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long temp = radians ! = + 0 . 0d ? Double . doubleToLongBits ( radians ) : 0L ; return ( int ) ( temp ^ ( temp > > > 32 ) ) ; }
void test11 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; MapWithDefaultValue < String , Integer > mapWithDefaultValue0 = new MapWithDefaultValue < String , Integer > ( ( Map < String , Integer > ) hashMap0 ) ; Set < Map . Entry < String , Integer > > set0 = ( Set < Map . Entry < String , Integer > > ) mapWithDefaultValue0 . entrySet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return head . signed ( ) = = tail . signed ( ) ; }
void test1 ( ) throws Throwable { ServerSocket serverSocket0 = new ServerSocket ( ) ; Server server0 = new Server ( serverSocket0 ) ; SimulationFrameBuffer simulationFrameBuffer0 = server0 . getBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimulationFrameBuffer getBuffer ( ) { return buffer ; }
void test0 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; BufferedReader bufferedReader0 = new BufferedReader ( ( Reader ) pipedReader0 ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) charArrayWriter0 ) ; SimulationClientWorker simulationClientWorker0 = new SimulationClientWorker ( bufferedReader0 , ( Writer ) printWriter0 ) ; simulationClientWorker0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test0 ( ) throws Throwable { Scan scan0 = new Scan ( ( AngleBracket ) null , 0 . 0 , true , ( Vector ) null , true , 0 ) ; ScanSnapshot scanSnapshot0 = ( ScanSnapshot ) scan0 . getSnapshot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getVelocityY ( ) { return getVelocityVector ( ) . getY ( ) ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "`4c\"g ; T : 0" , 1037 , ( RobotScore ) robotScoreKeeper0 ) ; Arena arena0 = robot0 . getArena ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Arena getArena ( ) { return arena ; }
void test5 ( ) throws Throwable { Scan scan0 = new Scan ( ( AngleBracket ) null , 0 . 0 , true , ( Vector ) null , true , 0 ) ; scan0 . arenaConnected ( ( Arena ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test6 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "" , 1154 , ( RobotScore ) robotScoreKeeper0 ) ; robot0 . die ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test7 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; Robot robot0 = new Robot ( "aD" , 1 , ( RobotScore ) robotScoreKeeper0 ) ; Mine mine0 = new Mine ( ( DamageInflicter ) robot0 ) ; Position position0 = mine0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Position getPosition ( ) { return position ; }
void test0 ( ) throws Throwable { AtRobotRegister atRobotRegister0 = AtRobotRegister . SP ; Collection < String > collection0 = atRobotRegister0 . getSymbolNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return head . signed ( ) = = tail . signed ( ) ; }
void test1 ( ) throws Throwable { AtRobotRegister atRobotRegister0 = AtRobotRegister . METERS ; int int0 = atRobotRegister0 . getSymbolValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSymbolValue ( ) { return value ; }
void test0 ( ) throws Throwable { AtRobotInstruction atRobotInstruction0 = AtRobotInstruction . LOOP ; Collection < String > collection0 = atRobotInstruction0 . getSymbolNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test1 ( ) throws Throwable { AtRobotInstruction atRobotInstruction0 = AtRobotInstruction . LOOP ; int int0 = atRobotInstruction0 . getSymbolValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSymbolValue ( ) { return value ; }
void test2 ( ) throws Throwable { String string0 = AtRobotInstruction . nameOf ( ( short ) ( - 1151 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test3 ( ) throws Throwable { String string0 = AtRobotInstruction . nameOf ( ( short ) 256 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test4 ( ) throws Throwable { String string0 = AtRobotInstruction . nameOf ( ( short ) 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test0 ( ) throws Throwable { AtRobotPort atRobotPort0 = AtRobotPort . MINELAYER ; int int0 = atRobotPort0 . getSymbolValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSymbolValue ( ) { return value ; }
void test1 ( ) throws Throwable { AtRobotPort atRobotPort0 = AtRobotPort . MINELAYER ; Collection < String > collection0 = atRobotPort0 . getSymbolNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return head . signed ( ) = = tail . signed ( ) ; }
void test2 ( ) throws Throwable { String string0 = AtRobotPort . nameOf ( ( short ) 1963 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test3 ( ) throws Throwable { String string0 = AtRobotPort . nameOf ( ( short ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test0 ( ) throws Throwable { AtRobotInterrupt atRobotInterrupt0 = AtRobotInterrupt . DESTRUCT ; Collection < String > collection0 = atRobotInterrupt0 . getSymbolNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return cells . length ; }
void test1 ( ) throws Throwable { AtRobotInterrupt atRobotInterrupt0 = AtRobotInterrupt . DESTRUCT ; int int0 = atRobotInterrupt0 . getSymbolValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSymbolValue ( ) { return value ; }
void test2 ( ) throws Throwable { String string0 = AtRobotInterrupt . nameOf ( ( short ) ( - 1143 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test3 ( ) throws Throwable { String string0 = AtRobotInterrupt . nameOf ( ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test4 ( ) throws Throwable { String string0 = AtRobotInterrupt . nameOf ( ( short ) 1592 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nameOf ( short value ) { if ( value > = 0 & & value < byValue . length ) { return byValue [ value ] . name ( ) ; } return " < unknown > " ; }
void test0 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setTotalTies ( 1558 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalTies ( ) { return score . getTotalTies ( ) ; }
void test1 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; robotSnapshot0 . visit ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test2 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setId ( ( - 17 ) ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test3 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . isOverburn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test4 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; String string0 = robotSnapshot0 . getLastMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastMessage ( ) { return lastMessage ; }
void test5 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setTotalKills ( ( - 1703 ) ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalKills ( ) { return score . getTotalKills ( ) ; }
void test6 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; int int0 = robotSnapshot0 . getRoundKills ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test7 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setTotalWins ( 1955 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalWins ( ) { return score . getTotalWins ( ) ; }
void test8 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; int int0 = robotSnapshot0 . getTotalWins ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalWins ( ) { return score . getTotalWins ( ) ; }
void test9 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1 . 0 ) , ( - 1 . 0 ) ) ; robotSnapshot0 . setHeading ( absoluteAngle0 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test10 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; int int0 = robotSnapshot0 . getTotalTies ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalTies ( ) { return score . getTotalTies ( ) ; }
void test11 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; Temperature temperature0 = robotSnapshot0 . getTemperature ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Temperature getTemperature ( ) { return temperature ; }
void test12 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; String string0 = robotSnapshot0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test13 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; int int0 = robotSnapshot0 . getTotalDeaths ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalDeaths ( ) { return score . getTotalDeaths ( ) ; }
void test15 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setRoundKills ( 38 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundKills ( ) { return roundKills ; }
void test16 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; int int0 = robotSnapshot0 . getTotalKills ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalKills ( ) { return score . getTotalKills ( ) ; }
void test17 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setTotalDeaths ( 981 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalDeaths ( ) { return score . getTotalDeaths ( ) ; }
void test18 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; double double0 = robotSnapshot0 . getArmor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Armor getArmor ( ) { return armor ; }
void test19 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = robotSnapshot0 . getTurretHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbsoluteAngle getTurretHeading ( ) { return turretHeading ; }
void test20 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . isActiveShield ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActiveShield ( ) { return activeShield ; }
void test21 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; robotSnapshot0 . setTurretHeading ( ( AbsoluteAngle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test22 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; int int0 = robotSnapshot0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test23 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = robotSnapshot0 . getHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Heading getHeading ( ) ; }
void test24 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test25 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) "1s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test26 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot0 . setActiveShield ( true ) ; boolean boolean0 = robotSnapshot1 . equals ( ( Object ) robotSnapshot0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActiveShield ( ) { return activeShield ; }
void test27 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot0 . setArmor ( 11 . 958031392554451 ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Armor getArmor ( ) { return armor ; }
void test28 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot0 . setOverburn ( true ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test29 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1 . 0 ) , ( - 1 . 0 ) ) ; robotSnapshot0 . setHeading ( absoluteAngle0 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot1 . setHeading ( absoluteAngle0 ) ; robotSnapshot0 . setLastMessage ( " ' + = zTI } owg ) qH { " ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test30 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 11 . 958031392554451 , 11 . 958031392554451 ) ; robotSnapshot0 . setHeading ( absoluteAngle0 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot1 . setHeading ( absoluteAngle0 ) ; robotSnapshot1 . setLastMessage ( "GcW > _%U OyS" ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test32 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( 13 . 815711640767788 , 13 . 815711640767788 ) ; robotSnapshot0 . setHeading ( absoluteAngle0 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot1 . setHeading ( absoluteAngle0 ) ; robotSnapshot0 . setName ( "7" ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test33 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromCartesian ( ( - 1 . 0 ) , ( - 1 . 0 ) ) ; robotSnapshot0 . setHeading ( absoluteAngle0 ) ; Temperature temperature0 = new Temperature ( ( - 1 . 0 ) ) ; robotSnapshot0 . setTemperature ( temperature0 ) ; RobotSnapshot robotSnapshot1 = new RobotSnapshot ( ) ; robotSnapshot1 . setHeading ( absoluteAngle0 ) ; robotSnapshot1 . setName ( " ' + = zTI } owg ) qH { " ) ; robotSnapshot1 . setLastMessage ( " ' + = zTI } owg ) qH { " ) ; robotSnapshot0 . setLastMessage ( " ' + = zTI } owg ) qH { " ) ; robotSnapshot0 . setName ( " ' + = zTI } owg ) qH { " ) ; boolean boolean0 = robotSnapshot0 . equals ( ( Object ) robotSnapshot1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; AbsoluteAngle angle = ( AbsoluteAngle ) o ; if ( Double . compare ( angle . radians , radians ) ! = 0 ) return false ; return true ; }
void test1 ( ) throws Throwable { ScanSnapshot scanSnapshot0 = new ScanSnapshot ( ( AngleBracket ) null , ( - 410 . 0049755646119 ) , false , ( Vector ) null , true , 1245 ) ; boolean boolean0 = scanSnapshot0 . isSuccessful ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccuracyAvailable ( ) { return accuracyAvailable ; }
void test2 ( ) throws Throwable { RelativeAngle relativeAngle0 = RelativeAngle . fromRadians ( 0 . 0 ) ; AngleBracket angleBracket0 = AngleBracket . clockwiseFrom ( ( AbsoluteAngle ) null , relativeAngle0 ) ; ScanSnapshot scanSnapshot0 = new ScanSnapshot ( angleBracket0 , 0 . 0 , true , ( Vector ) null , false , 400 ) ; scanSnapshot0 . getMatchVector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccuracyAvailable ( ) { return accuracyAvailable ; }
void test3 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; ScanSnapshot scanSnapshot0 = new ScanSnapshot ( angleBracket0 , ( - 1 . 0 ) , false , ( Vector ) null , true , 1517 ) ; double double0 = scanSnapshot0 . getMaxDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccuracyAvailable ( ) { return accuracyAvailable ; }
void test4 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; ScanSnapshot scanSnapshot0 = new ScanSnapshot ( angleBracket0 , 0 . 0 , false , ( Vector ) null , true , ( - 1216 ) ) ; boolean boolean0 = scanSnapshot0 . isAccuracyAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDistance ( ) { return maxDistance ; }
void test6 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; ScanSnapshot scanSnapshot0 = new ScanSnapshot ( angleBracket0 , ( - 1 . 0 ) , false , ( Vector ) null , true , 1517 ) ; int int0 = scanSnapshot0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDistance ( ) { return maxDistance ; }
void test7 ( ) throws Throwable { AngleBracket angleBracket0 = AngleBracket . all ( ) ; ScanSnapshot scanSnapshot0 = new ScanSnapshot ( angleBracket0 , ( - 1 . 0 ) , false , ( Vector ) null , true , 1517 ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; scanSnapshot0 . visit ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccuracy ( ) ; }
void test0 ( ) throws Throwable { MineSnapshot mineSnapshot0 = new MineSnapshot ( ) ; mineSnapshot0 . setTriggerRadius ( ( - 1728 . 0539595116393 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTriggerRadius ( ) { return triggerRadius ; }
void test1 ( ) throws Throwable { MineSnapshot mineSnapshot0 = new MineSnapshot ( ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; mineSnapshot0 . visit ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test2 ( ) throws Throwable { MineSnapshot mineSnapshot0 = new MineSnapshot ( ) ; double double0 = mineSnapshot0 . getTriggerRadius ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTriggerRadius ( ) { return triggerRadius ; }
void test0 ( ) throws Throwable { UnknownSnapshot unknownSnapshot0 = new UnknownSnapshot ( "1lfbt ] f ] up" ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; unknownSnapshot0 . visit ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test0 ( ) throws Throwable { RobotSnapshot robotSnapshot0 = new RobotSnapshot ( ) ; boolean boolean0 = robotSnapshot0 . isDead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test1 ( ) throws Throwable { UnknownSnapshot unknownSnapshot0 = new UnknownSnapshot ( "hd" ) ; unknownSnapshot0 . setDead ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test2 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; MissileSnapshot missileSnapshot0 = new MissileSnapshot ( true , duration0 ) ; missileSnapshot0 . setPositionVector ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test3 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; MissileSnapshot missileSnapshot0 = new MissileSnapshot ( true , duration0 ) ; missileSnapshot0 . setVelocityVector ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return dead ; }
void test0 ( ) throws Throwable { Duration duration0 = Duration . fromCycles ( 31 ) ; ExplosionSnapshot explosionSnapshot0 = new ExplosionSnapshot ( ( - 782 . 8464297682791 ) , duration0 ) ; AbsoluteAngle absoluteAngle0 = AbsoluteAngle . fromBygrees ( 31 ) ; Vector vector0 = absoluteAngle0 . toUnitVector ( ) ; explosionSnapshot0 . setPositionVector ( vector0 ) ; Ellipse2D . Double ellipse2D_Double0 = explosionSnapshot0 . getExplosionShape ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Ellipse2D . Double getExplosionShape ( ) { Ellipse2D . Double circle = new Ellipse2D . Double ( ) ; circle . setFrameFromCenter ( getPositionVector ( ) . toPoint2D ( ) , new Point2D . Double ( getPositionVector ( ) . getX ( ) + getDegradedRadius ( ) , getPositionVector ( ) . getY ( ) + getDegradedRadius ( ) ) ) ; return circle ; }
void test1 ( ) throws Throwable { Duration duration0 = Duration . fromCycles ( 31 ) ; ExplosionSnapshot explosionSnapshot0 = new ExplosionSnapshot ( ( - 782 . 8464297682791 ) , duration0 ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; explosionSnapshot0 . visit ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadius ( ) { return ( damageAtCenter ) ; }
void test0 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; MissileSnapshot missileSnapshot0 = new MissileSnapshot ( false , duration0 ) ; Duration duration1 = missileSnapshot0 . getAge ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test1 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; MissileSnapshot missileSnapshot0 = new MissileSnapshot ( false , duration0 ) ; SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor ( ) ; missileSnapshot0 . visit ( ( SnapshotVisitor ) snapshotAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test2 ( ) throws Throwable { Duration duration0 = Duration . ZERO_CYCLE ; MissileSnapshot missileSnapshot0 = new MissileSnapshot ( false , duration0 ) ; boolean boolean0 = missileSnapshot0 . isOverburn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverburn ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; RobotFile robotFile0 = new RobotFile ( file0 ) ; String string0 = robotFile0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; RobotFile robotFile0 = new RobotFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; RobotFile robotFile0 = new RobotFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AtRobotCompilerOutput compile ( File sourceFile ) throws IOException { InputStream in = new FileInputStream ( sourceFile ) ; try { return compile ( in ) ; } finally { in . close ( ) ; } }
void test3 ( ) throws Throwable { String string0 = RobotFile . removeEndIgnoreCase ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeEndIgnoreCase ( String s , String suffix ) { if ( s = = null ) { return null ; } if ( s . toLowerCase ( ) . endsWith ( suffix ) ) { return s . substring ( 0 , s . length ( ) - suffix . length ( ) ) ; } return s ; }
void test4 ( ) throws Throwable { String string0 = RobotFile . removeEndIgnoreCase ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeEndIgnoreCase ( String s , String suffix ) { if ( s = = null ) { return null ; } if ( s . toLowerCase ( ) . endsWith ( suffix ) ) { return s . substring ( 0 , s . length ( ) - suffix . length ( ) ) ; } return s ; }
void test0 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; RobotGameResult robotGameResult0 = new RobotGameResult ( ( RobotFactory ) null , ( RobotScore ) robotScoreKeeper0 ) ; RobotFactory robotFactory0 = robotGameResult0 . getEntrant ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RobotFactory getEntrant ( ) { return entrant ; }
void test2 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; RobotGameResult robotGameResult0 = new RobotGameResult ( ( RobotFactory ) null , ( RobotScore ) robotScoreKeeper0 ) ; RobotScoreKeeper robotScoreKeeper1 = ( RobotScoreKeeper ) robotGameResult0 . getFinalScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalKills ( ) { return score . getTotalKills ( ) ; }
void test3 ( ) throws Throwable { RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper ( ) ; RobotGameResult robotGameResult0 = new RobotGameResult ( ( RobotFactory ) null , ( RobotScore ) robotScoreKeeper0 ) ; String string0 = robotGameResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test0 ( ) throws Throwable { FrameBuilder frameBuilder0 = new FrameBuilder ( ) ; Round round0 = new Round ( frameBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void step ( ) throws InterruptedException { invokeOnBreakpoint ( new Command ( ) { void execute ( Computer computer ) throws InterruptedException { inBreakpoint = false ; if ( wasAllPaused ) { doPauseAll ( ) ; } else { doPause ( computer ) ; } } } ) ; }
void test1 ( ) throws Throwable { FrameBuilder frameBuilder0 = new FrameBuilder ( ) ; Round round0 = new Round ( frameBuilder0 ) ; round0 . finalizeRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void step ( ) throws InterruptedException { invokeOnBreakpoint ( new Command ( ) { void execute ( Computer computer ) throws InterruptedException { inBreakpoint = false ; if ( wasAllPaused ) { doPauseAll ( ) ; } else { doPause ( computer ) ; } } } ) ; }
void test2 ( ) throws Throwable { FrameBuilder frameBuilder0 = new FrameBuilder ( ) ; Round round0 = new Round ( frameBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void step ( ) throws InterruptedException { invokeOnBreakpoint ( new Command ( ) { void execute ( Computer computer ) throws InterruptedException { inBreakpoint = false ; if ( wasAllPaused ) { doPauseAll ( ) ; } else { doPause ( computer ) ; } } } ) ; }
void test0 ( ) throws Throwable { Vector < RobotGameResult > vector0 = new Vector < RobotGameResult > ( ) ; GameResult gameResult0 = new GameResult ( ( List < RobotGameResult > ) vector0 ) ; List < RobotGameResult > list0 = gameResult0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { Vector < RobotGameResult > vector0 = new Vector < RobotGameResult > ( ) ; GameResult gameResult0 = new GameResult ( ( List < RobotGameResult > ) vector0 ) ; String string0 = gameResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " < token > " ; }
void test1 ( ) throws Throwable { Game game0 = new Game ( 148 ) ; ArenaPane arenaPane0 = new ArenaPane ( ) ; game0 . removeSimulationObserver ( ( SimulationObserver ) arenaPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxProcessorSpeed ( ) { return maxProcessorSpeed ; }
void test2 ( ) throws Throwable { Game game0 = new Game ( 1 ) ; game0 . addSimulationObserver ( ( SimulationObserver ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) ; / * * * Get the current round , 1 based * * @return The current round number . * / int getRoundNumber ( ) ; }
void test3 ( ) throws Throwable { Game game0 = new Game ( 1 ) ; game0 . roundOver ( ) ; boolean boolean0 = game0 . stepRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stepRound ( ) { if ( round = = null ) { return false ; } getRound ( ) . step ( ) ; return round ! = null ; }
void test4 ( ) throws Throwable { Game game0 = new Game ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxProcessorSpeed ( ) { return maxProcessorSpeed ; }
void test5 ( ) throws Throwable { Game game0 = new Game ( 1 ) ; GameResult gameResult0 = game0 . getFinalResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxProcessorSpeed ( ) { return maxProcessorSpeed ; }
void test6 ( ) throws Throwable { Game game0 = new Game ( 1 ) ; boolean boolean0 = game0 . stepRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) ; / * * * Get the current round , 1 based * * @return The current round number . * / int getRoundNumber ( ) ; }
void test7 ( ) throws Throwable { Game game0 = new Game ( 148 ) ; game0 . nextRound ( ) ; boolean boolean0 = game0 . stepRound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stepRound ( ) { if ( round = = null ) { return false ; } getRound ( ) . step ( ) ; return round ! = null ; }
void test0 ( ) throws Throwable { StandardRoundState standardRoundState0 = new StandardRoundState ( 1731 , 0 ) ; int int0 = standardRoundState0 . getTotalRounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRoundNumber ( ) ; }
void test1 ( ) throws Throwable { StandardRoundState standardRoundState0 = new StandardRoundState ( 1731 , 0 ) ; int int0 = standardRoundState0 . getRoundNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) ; / * * * Get the current round , 1 based * * @return The current round number . * / int getRoundNumber ( ) ; }
