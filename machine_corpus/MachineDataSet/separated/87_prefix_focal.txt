void test0 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; String string0 = atributo0 . getNomeAsTabela ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChavePrimaria ( ) { return chavePrimaria ; }
void test1 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; List < Atributo > list0 = atributo0 . getAtributosExportados ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test2 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; Properties properties0 = atributo0 . getTipos ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test3 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; String string0 = atributo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test4 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; String string0 = atributo0 . getNomeAsAtributo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test5 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; int int0 = atributo0 . getTamanho ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChavePrimaria ( ) { return chavePrimaria ; }
void test6 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; Entidade entidade0 = new Entidade ( " bd > Za * KVxE - ] " ) ; List < Atributo > list0 = entidade0 . getAtributos ( ) ; atributo0 . setAtributosExportados ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test7 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; atributo0 . setAtributoImportado ( atributo0 ) ; Entidade entidade0 = atributo0 . getEntidadeImportada ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test8 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; boolean boolean0 = atributo0 . getChavePrimaria ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test9 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; Properties properties0 = new Properties ( ) ; atributo0 . setTipos ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test10 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; atributo0 . setTipo ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test11 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; atributo0 . setTamanho ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test12 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; atributo0 . setChavePrimaria ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test13 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; atributo0 . getAtributoImportado ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test14 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; int int0 = atributo0 . compareTo ( ( Object ) atributo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test15 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; String string0 = atributo0 . getTipo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChavePrimaria ( ) { return chavePrimaria ; }
void test16 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; String string0 = atributo0 . getNomeAsTexto ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChavePrimaria ( ) { return chavePrimaria ; }
void test17 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; atributo0 . setNome ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChavePrimaria ( ) { return chavePrimaria ; }
void test18 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; String string0 = atributo0 . getNomeAsClasse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test19 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; boolean boolean0 = atributo0 . isChavePrimaria ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTamanho ( ) { return tamanho ; }
void test20 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; Entidade entidade0 = atributo0 . getEntidadeImportada ( ) ; atributo0 . setEntidade ( entidade0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test21 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; int int0 = atributo0 . compareTo ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChavePrimaria ( ) { return chavePrimaria ; }
void test0 ( ) throws Throwable { Atributo atributo0 = new Atributo ( ) ; Entidade entidade0 = atributo0 . getEntidade ( ) ; String string0 = entidade0 . getNome ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNome ( ) { return this . nome ; }
void test1 ( ) throws Throwable { Entidade entidade0 = new Entidade ( ) ; List < Atributo > list0 = entidade0 . getChavesPrimarias ( ) ; entidade0 . setAtributos ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeAsClasse ( ) { return Conversor . toClasse ( this . nome ) ; }
void test2 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "fc / %zLx9UWm1X7" ) ; String string0 = entidade0 . getNomeAsTexto ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeAsTexto ( ) { return Conversor . toTexto ( this . nome ) ; }
void test3 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; int int0 = entidade0 . compareTo ( ( Object ) entidade0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object ent ) { if ( ent instanceof Entidade ) { String comp = ( ( Entidade ) ent ) . getPacote ( ) + " . " + ent . toString ( ) ; return ( this . pacote + " . " + this . nome ) . compareTo ( comp ) ; } else { return this . nome . compareTo ( ent . toString ( ) ) ; } }
void test4 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; String string0 = entidade0 . getNomeAsTabela ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeAsTabela ( ) { return Conversor . toTabela ( this . nome ) ; }
void test5 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; entidade0 . setPacote ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . nome ; }
void test6 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; List < Atributo > list0 = entidade0 . getAtributos ( ) ; entidade0 . setChavesPrimarias ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setChavesPrimarias ( List < Atributo > chavesPrimarias ) { this . chavesPrimarias = chavesPrimarias ; }
void test7 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; String string0 = entidade0 . getNomeAsAtributo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeAsAtributo ( ) { return Conversor . toAtributo ( this . nome ) ; }
void test8 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; entidade0 . setNome ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeAsAtributo ( ) { return Conversor . toAtributo ( this . nome ) ; }
void test9 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; String string0 = entidade0 . getNomeAsClasse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeAsClasse ( ) { return Conversor . toClasse ( this . nome ) ; }
void test10 ( ) throws Throwable { Entidade entidade0 = new Entidade ( "" ) ; int int0 = entidade0 . compareTo ( ( Object ) " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object ent ) { if ( ent instanceof Entidade ) { String comp = ( ( Entidade ) ent ) . getPacote ( ) + " . " + ent . toString ( ) ; return ( this . pacote + " . " + this . nome ) . compareTo ( comp ) ; } else { return this . nome . compareTo ( ent . toString ( ) ) ; } }
void test0 ( ) throws Throwable { Update update0 = new Update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . getNomeDoArquivo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test1 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . getDescricao ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test2 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . setDescricao ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test4 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . setVelocityTemplate ( "vl ; = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test5 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . getVelocityTemplate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test6 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . setTipo ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test7 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; int int0 = templateJaw0 . getTipo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test10 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . setNome ( "0 ? } = W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test11 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; templateJaw0 . setNomeDoArquivo ( "~ + mn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test12 ( ) throws Throwable { TemplateJaw templateJaw0 = new TemplateJaw ( ) ; int int0 = templateJaw0 . compareTo ( ( Object ) "bKI3 b > SImCXZNQ , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTipo ( ) { return tipo ; }
void test0 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; int int0 = modeloDeAplicacao0 . compareTo ( ( Object ) modeloDeAplicacao0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object ent ) { if ( ent instanceof Entidade ) { String comp = ( ( Entidade ) ent ) . getPacote ( ) + " . " + ent . toString ( ) ; return ( this . pacote + " . " + this . nome ) . compareTo ( comp ) ; } else { return this . nome . compareTo ( ent . toString ( ) ) ; } }
void test1 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; List < TemplateJaw > list0 = modeloDeAplicacao0 . getTemplates ( ) ; modeloDeAplicacao0 . setTemplates ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNome ( ) { return this . nome ; }
void test2 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; modeloDeAplicacao0 . setAutor ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescricao ( ) { return descricao ; }
void test3 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; String string0 = modeloDeAplicacao0 . getAutor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAutor ( ) { return autor ; }
void test4 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; modeloDeAplicacao0 . setNome ( "3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNome ( ) { return this . nome ; }
void test5 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; modeloDeAplicacao0 . setDescricao ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNome ( ) { return this . nome ; }
void test6 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; Date date0 = modeloDeAplicacao0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getData ( ) { return data ; }
void test8 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; String string0 = modeloDeAplicacao0 . getDescricao ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescricao ( ) { return descricao ; }
void test9 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; Date date0 = new Date ( ) ; modeloDeAplicacao0 . setData ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setData ( Date data ) { this . data = data ; }
void test11 ( ) throws Throwable { ModeloDeAplicacao modeloDeAplicacao0 = new ModeloDeAplicacao ( ) ; int int0 = modeloDeAplicacao0 . compareTo ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object ent ) { if ( ent instanceof Entidade ) { String comp = ( ( Entidade ) ent ) . getPacote ( ) + " . " + ent . toString ( ) ; return ( this . pacote + " . " + this . nome ) . compareTo ( comp ) ; } else { return this . nome . compareTo ( ent . toString ( ) ) ; } }
void test0 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; processarEntidadesTabela0 . setEntidadeSelecionada ( ( - 11 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntidadeSelecionada ( ) ; void setEntidadeSelecionada ( int entidadeSelecionada ) ; int getAtributoSelecionado ( ) ; void setAtributoSelecionado ( int atributoSelecionado ) ; String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test1 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; int int0 = processarEntidadesTabela0 . getEntidadeSelecionada ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . nome ; }
void test2 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; List < Entidade > list0 = processarEntidadesTabela0 . getEntidades ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntidadeSelecionada ( ) ; void setEntidadeSelecionada ( int entidadeSelecionada ) ; int getAtributoSelecionado ( ) ; void setAtributoSelecionado ( int atributoSelecionado ) ; String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test3 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; processarEntidadesTabela0 . resetAtributos ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntidadeSelecionada ( ) ; void setEntidadeSelecionada ( int entidadeSelecionada ) ; int getAtributoSelecionado ( ) ; void setAtributoSelecionado ( int atributoSelecionado ) ; String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test4 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . nome ; }
void test5 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; Atributo atributo0 = processarEntidadesTabela0 . getAtributo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAtributo ( Atributo atributo ) ; }
void test6 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . nome ; }
void test7 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; String string0 = processarEntidadesTabela0 . getNomeArquivoSalvo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAtributoSelecionado ( ) ; void setAtributoSelecionado ( int atributoSelecionado ) ; String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test8 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; int int0 = processarEntidadesTabela0 . getAtributoSelecionado ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . nome ; }
void test9 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; List < Entidade > list0 = processarEntidadesTabela0 . selecionarEntidades ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAtributoSelecionado ( ) ; void setAtributoSelecionado ( int atributoSelecionado ) ; String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test10 ( ) throws Throwable { ProcessarEntidadesTabela processarEntidadesTabela0 = new ProcessarEntidadesTabela ( ) ; processarEntidadesTabela0 . removerEntidades ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . nome ; }
void test0 ( ) throws Throwable { ProcessarEntidadesTree processarEntidadesTree0 = new ProcessarEntidadesTree ( ) ; List < Entidade > list0 = processarEntidadesTree0 . getEntidades ( ) ; ProcessarEntidadesTree processarEntidadesTree1 = new ProcessarEntidadesTree ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProcessarEntidadesTree ( List < Entidade > entidades ) { this . entidades = entidades ; initComponents ( ) ; construirArvore ( ) ; }
void test14 ( ) throws Throwable { ProcessarEntidadesTree processarEntidadesTree0 = new ProcessarEntidadesTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test15 ( ) throws Throwable { ProcessarEntidadesTree processarEntidadesTree0 = new ProcessarEntidadesTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEntidades ( List < Entidade > entidades ) ; int getEntidadeSelecionada ( ) ; void setEntidadeSelecionada ( int entidadeSelecionada ) ; int getAtributoSelecionado ( ) ; void setAtributoSelecionado ( int atributoSelecionado ) ; String getNomeArquivoSalvo ( ) ; void setNomeArquivoSalvo ( String nomeArquivoSalvo ) ; Atributo getAtributo ( ) ; void setAtributo ( Atributo atributo ) ; }
void test0 ( ) throws Throwable { ArquivoRecente arquivoRecente0 = new ArquivoRecente ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Conversor conversor0 = new Conversor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Conversor ( ) { }
void test1 ( ) throws Throwable { String string0 = Conversor . toClasse ( "__%_fn_`_nm_s_ + _i_b_2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toClasse ( String nome ) { for ( int i = 0 ; i < nome . length ( ) ; i + + ) { if ( i = = 0 ) { nome = nome . substring ( 0 , i + 1 ) . toUpperCase ( ) + nome . substring ( 1 , nome . length ( ) ) ; } if ( nome . charAt ( i ) = = '_' ) { if ( i = = nome . length ( ) - 1 ) { nome = nome . substring ( 0 , i ) ; } else { nome = nome . substring ( 0 , i ) + nome . substring ( i + 1 , i + 2 ) . toUpperCase ( ) + nome . substring ( i + 2 , nome . length ( ) ) ; i - - ; } } } return nome ; }
void test2 ( ) throws Throwable { String string0 = Conversor . toClasse ( "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toClasse ( String nome ) { for ( int i = 0 ; i < nome . length ( ) ; i + + ) { if ( i = = 0 ) { nome = nome . substring ( 0 , i + 1 ) . toUpperCase ( ) + nome . substring ( 1 , nome . length ( ) ) ; } if ( nome . charAt ( i ) = = '_' ) { if ( i = = nome . length ( ) - 1 ) { nome = nome . substring ( 0 , i ) ; } else { nome = nome . substring ( 0 , i ) + nome . substring ( i + 1 , i + 2 ) . toUpperCase ( ) + nome . substring ( i + 2 , nome . length ( ) ) ; i - - ; } } } return nome ; }
void test3 ( ) throws Throwable { String string0 = Conversor . toAtributo ( "Mm1o_OT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toAtributo ( String nome ) { for ( int i = 0 ; i < nome . length ( ) ; i + + ) { if ( nome . charAt ( i ) = = '_' ) { if ( i = = nome . length ( ) - 1 ) { nome = nome . substring ( 0 , i ) ; } else { nome = nome . substring ( 0 , i ) + nome . substring ( i + 1 , i + 2 ) . toUpperCase ( ) + nome . substring ( i + 2 , nome . length ( ) ) ; i - - ; } } } return nome ; }
void test4 ( ) throws Throwable { String string0 = Conversor . toAtributo ( "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toAtributo ( String nome ) { for ( int i = 0 ; i < nome . length ( ) ; i + + ) { if ( nome . charAt ( i ) = = '_' ) { if ( i = = nome . length ( ) - 1 ) { nome = nome . substring ( 0 , i ) ; } else { nome = nome . substring ( 0 , i ) + nome . substring ( i + 1 , i + 2 ) . toUpperCase ( ) + nome . substring ( i + 2 , nome . length ( ) ) ; i - - ; } } } return nome ; }
void test5 ( ) throws Throwable { String string0 = Conversor . toTabela ( "__%_fn_`_nm_s_ + _i_b_2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toTabela ( String nome ) { for ( int i = 0 ; i < nome . length ( ) ; i + + ) { if ( ! nome . substring ( i , i + 1 ) . equals ( nome . substring ( i , i + 1 ) . toUpperCase ( ) ) ) { continue ; } if ( nome . substring ( i , i + 1 ) . equals ( "_" ) ) { continue ; } nome = nome . substring ( 0 , i ) + "_" + nome . substring ( i , i + 1 ) . toLowerCase ( ) + nome . substring ( i + 1 , nome . length ( ) ) ; i + + ; } return nome ; }
void test6 ( ) throws Throwable { String string0 = Conversor . toTexto ( "Mm1o_OT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toTexto ( String nome ) { for ( int i = 0 ; i < nome . length ( ) ; i + + ) { if ( ! nome . substring ( i , i + 1 ) . equals ( "_" ) ) { continue ; } nome = nome . substring ( 0 , i ) + " " + nome . substring ( i + 1 , nome . length ( ) ) . toLowerCase ( ) ; i + + ; } return nome ; }
