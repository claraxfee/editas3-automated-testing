void test0 ( ) throws Throwable { NotifyError notifyError0 = new NotifyError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "J * " , ( XBUSSystem ) null , "J * " ) ; notifyErrorMessage0 . getRequestText ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test1 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "J * " , ( XBUSSystem ) null , "J * " ) ; notifyErrorMessage0 . getErrorMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test2 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( ( XBUSSystem ) null ) ; notifyErrorMessage0 . getErrorRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test3 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "J * " , ( XBUSSystem ) null , "J * " ) ; notifyErrorMessage0 . setRequestText ( ( String ) null , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFunction ( ) { return mFunction ; }
void test4 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "" , ( XBUSSystem ) null , "" ) ; notifyErrorMessage0 . getAdditionalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test5 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "" , ( XBUSSystem ) null , "" ) ; notifyErrorMessage0 . setResponseText ( "" , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test6 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "J * " , ( XBUSSystem ) null , "J * " ) ; notifyErrorMessage0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test7 ( ) throws Throwable { NotifyErrorMessage notifyErrorMessage0 = new NotifyErrorMessage ( "" , ( XBUSSystem ) null , "" ) ; notifyErrorMessage0 . getResponseText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test0 ( ) throws Throwable { FileAcceptor fileAcceptor0 = new FileAcceptor ( "$WILDCARD$T . E6 " ) ; List < Object > list0 = fileAcceptor0 . getReplacements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getReplacements ( ) { return mReplacements ; }
void test2 ( ) throws Throwable { FileAcceptor fileAcceptor0 = new FileAcceptor ( "$WILDCARD$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileAcceptor ( String pathname ) throws XException { / / store the name of the file or directory denoted by this / / pathname . / / This is just the last name in the pathname's name sequence . String filename = new File ( pathname ) . getName ( ) ; / / check if this name contains one and only one WILDCARD int seperatorIndex = filename . indexOf ( XBUSSystem . FILENAME_WILDCARD ) ; if ( seperatorIndex < 0 ) { List params = new Vector ( ) ; params . add ( filename ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_BASE , Constants . PACKAGE_BASE_XBUSSYSTEM , "1" , params ) ; } / / if ( seperatorIndex < 0 ) if ( seperatorIndex ! = filename . lastIndexOf ( XBUSSystem . FILENAME_WILDCARD ) ) { List params = new Vector ( ) ; params . add ( filename ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_BASE , Constants . PACKAGE_BASE_XBUSSYSTEM , "2" , params ) ; } / / if ( seperatorIndex ! = / / filename . lastIndexOf ( XBUSSystem . FILENAME_WILDCARD ) ) / / save prefix ( name before WILDCARD ) and postfix ( name after WILDCARD / / or "" if the filename ends with the WILDCARD ) in class variablen mPrefix = filename . substring ( 0 , seperatorIndex ) ; if ( filename . length ( ) > seperatorIndex + XBUSSystem . FILENAME_WILDCARD . length ( ) ) { mPostfix = filename . substring ( seperatorIndex + XBUSSystem . FILENAME_WILDCARD . length ( ) , filename . length ( ) ) ; } / / then ( filename . length ( ) else { mPostfix = "" ; } / / else ( filename . length ( ) }
void test3 ( ) throws Throwable { FileAcceptor fileAcceptor0 = new FileAcceptor ( "$WILDCARD$T . E6 " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File dir , String filename ) { boolean result = false ; if ( filename . startsWith ( mPrefix ) & & filename . endsWith ( mPostfix ) ) { / / File name is matches the pattern . mReplacements . add ( filename . substring ( mPrefix . length ( ) , filename . lastIndexOf ( mPostfix ) ) ) ; result = true ; } / / if ( filename . startsWith ( mPrefix ) & & filename . endsWith ( mPostfix ) ) return result ; }
void test4 ( ) throws Throwable { FileAcceptor fileAcceptor0 = new FileAcceptor ( "$WILDCARD$T . E6 " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File dir , String filename ) { boolean result = false ; if ( filename . startsWith ( mPrefix ) & & filename . endsWith ( mPostfix ) ) { / / File name is matches the pattern . mReplacements . add ( filename . substring ( mPrefix . length ( ) , filename . lastIndexOf ( mPostfix ) ) ) ; result = true ; } / / if ( filename . startsWith ( mPrefix ) & & filename . endsWith ( mPostfix ) ) return result ; }
void test5 ( ) throws Throwable { FileAcceptor fileAcceptor0 = new FileAcceptor ( "$WILDCARD$T . E6 " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File dir , String filename ) { boolean result = false ; if ( filename . startsWith ( mPrefix ) & & filename . endsWith ( mPostfix ) ) { / / File name is matches the pattern . mReplacements . add ( filename . substring ( mPrefix . length ( ) , filename . lastIndexOf ( mPostfix ) ) ) ; result = true ; } / / if ( filename . startsWith ( mPrefix ) & & filename . endsWith ( mPostfix ) ) return result ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test1 ( ) throws Throwable { ByteArrayList byteArrayList0 = new ByteArrayList ( ) ; int int0 = byteArrayList0 . length ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 16 ] ; byteArray0 [ 10 ] = ( byte ) ( - 84 ) ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test3 ( ) throws Throwable { ByteArrayList byteArrayList0 = new ByteArrayList ( ) ; byteArrayList0 . addAll ( ( ByteArrayList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test4 ( ) throws Throwable { ByteArrayList byteArrayList0 = new ByteArrayList ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayList byteArrayList1 = ByteArrayList . createByteArrayList ( byteArray0 , 0 ) ; byteArrayList0 . addAll ( byteArrayList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 32 ] ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , ( int ) ( byte ) 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; byteArray0 [ 1 ] = ( byte ) 10 ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 32 ] ; byteArray0 [ 7 ] = ( byte ) 13 ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , ( int ) ( byte ) 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; byteArray0 [ 2 ] = ( byte ) 10 ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 3 ] = ( byte ) 10 ; byteArray0 [ 2 ] = ( byte ) 13 ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 2 ] = ( byte ) 13 ; byteArray0 [ 3 ] = ( byte ) 13 ; ByteArrayList byteArrayList0 = ByteArrayList . createByteArrayList ( byteArray0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) { return mLength ; }
void test0 ( ) throws Throwable { ByteArrayConverterFactory byteArrayConverterFactory0 = new ByteArrayConverterFactory ( ) ; ByteArrayConverterFactory . Field byteArrayConverterFactory_Field0 = byteArrayConverterFactory0 . new Field ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { XMLHelper xMLHelper0 = new XMLHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl ( true ) ; deferredDocumentImpl0 . createDeferredEntityReference ( ( String ) null , ( String ) null ) ; String string0 = XMLHelper . getTagAttribute ( ( Document ) deferredDocumentImpl0 , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagAttribute ( Document doc , String tag , String attr ) { String retText = null ; / / for the result NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag Node currentTag ; if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found currentTag = children . item ( 0 ) ; / / first occurence of searched tag retText = getAttribute ( currentTag , attr ) ; } / / if ( children . getLength ( ) > 0 ) return retText ; }
void test2 ( ) throws Throwable { SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; String string0 = XMLHelper . getAttribute ( ( Node ) sOAPFaultElement0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttribute ( Node node , String attr ) { String retText = null ; NamedNodeMap attributes = node . getAttributes ( ) ; / / its attributes boolean textFound = false ; / / for terminating search loop for ( int j = 0 ; ( ! textFound ) & & ( j < attributes . getLength ( ) ) ; j + + ) { / / loop over attributes if ( attributes . item ( j ) . getNodeName ( ) . equals ( attr ) ) { / / searched attribute found retText = attributes . item ( j ) . getNodeValue ( ) ; / / return its value textFound = true ; } / / if ( attributes . item ( j ) . getNodeName ( ) . equals ( attr ) ) } / / for ( int j = 0 ; ( ! textFound ) & & ( j < attributes . getLength ( ) ) ; j + + ) return retText ; }
void test3 ( ) throws Throwable { DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl ( true ) ; deferredDocumentImpl0 . createDeferredEntityReference ( ( String ) null , ( String ) null ) ; String string0 = XMLHelper . getTagCDATA ( ( Document ) deferredDocumentImpl0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagCDATA ( Document doc , String tag ) { String retText = null ; / / for the result NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag Node currentTag ; if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found currentTag = children . item ( 0 ) ; / / first occurence of searched tag NodeList grandchildren = currentTag . getChildNodes ( ) ; / / its child nodes boolean textFound = false ; / / for terminating search loop for ( int j = 0 ; ( ! textFound ) & & j < grandchildren . getLength ( ) ; j + + ) { / / loop over child nodes if ( grandchildren . item ( j ) . getNodeType ( ) = = Node . CDATA_SECTION_NODE ) { / / CDATA section found retText = grandchildren . item ( j ) . getNodeValue ( ) ; / / return its value textFound = true ; } / / if / / ( grandchildren . item ( j ) . getNodeType ( ) = = Node . CDATA_SECTION_NODE ) } / / for ( int j = 0 ; ( ! textFound ) & & j < grandchildren . getLength ( ) ; / / j + + ) } / / if ( children . getLength ( ) > 0 ) / * * Workaround , since the Serializer disturbs the linefeeds of the CDATA * / if ( ! DOUBLELINESEPARATOR . equals ( DOUBLELINEFEED ) ) { retText = retText . replaceAll ( DOUBLELINEFEED , Constants . LINE_SEPERATOR ) ; } / / if ( ! DOUBLELINESEPARATOR . equals ( DOUBLELINEFEED ) ) return retText ; }
void test4 ( ) throws Throwable { DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl ( true ) ; deferredDocumentImpl0 . createDeferredEntityReference ( ( String ) null , ( String ) null ) ; String string0 = XMLHelper . getTagText ( ( Document ) deferredDocumentImpl0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagText ( Document doc , String tag ) { String retText = null ; / / for the result NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag Node foundTag ; if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found foundTag = children . item ( 0 ) ; / / first occurence of searched tag retText = getNodeText ( foundTag ) ; } / / if ( children . getLength ( ) > 0 ) return retText ; }
void test5 ( ) throws Throwable { Detail detail0 = new Detail ( ) ; Detail detail1 = ( Detail ) detail0 . addTextNode ( "" ) ; String string0 = XMLHelper . getNodeText ( ( Node ) detail1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeText ( Node tag ) { String retText = null ; NodeList children = tag . getChildNodes ( ) ; boolean textFound = false ; for ( int j = 0 ; ( ! textFound ) & & j < children . getLength ( ) ; j + + ) { if ( children . item ( j ) . getNodeType ( ) = = Node . TEXT_NODE ) { retText = children . item ( j ) . getNodeValue ( ) ; textFound = true ; } } return retText ; }
void test6 ( ) throws Throwable { Detail detail0 = new Detail ( ) ; detail0 . addChildElement ( "" , "" , "" ) ; String string0 = XMLHelper . getNodeText ( ( Node ) detail0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeText ( Node tag ) { String retText = null ; NodeList children = tag . getChildNodes ( ) ; boolean textFound = false ; for ( int j = 0 ; ( ! textFound ) & & j < children . getLength ( ) ; j + + ) { if ( children . item ( j ) . getNodeType ( ) = = Node . TEXT_NODE ) { retText = children . item ( j ) . getNodeValue ( ) ; textFound = true ; } } return retText ; }
void test7 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; Hashtable < Object , Object > hashtable0 = XMLHelper . getTagTextList ( ( Document ) hTMLDocumentImpl0 , "NRa'~0 QO & ! M0' ) } D" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Hashtable getTagTextList ( Document doc , String tag ) throws XException { Hashtable retTable = null ; / / for return object NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag Node foundTag ; if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found retTable = new Hashtable ( ) ; foundTag = children . item ( 0 ) ; / / first occurence of searched tag NodeList grandchildren = foundTag . getChildNodes ( ) ; / / its child nodes for ( int j = 0 ; j < grandchildren . getLength ( ) ; j + + ) { / / loop over child nodes Node grand = grandchildren . item ( j ) ; if ( grand . getNodeType ( ) = = Node . ELEMENT_NODE ) { / / element node found Node grand2 = grandchildren . item ( j ) . getFirstChild ( ) ; if ( ( grand2 ! = null ) & & ( grand2 . getNodeType ( ) = = Node . TEXT_NODE ) ) { / / text node found to read the value String nodeName = grandchildren . item ( j ) . getNodeName ( ) ; String nodeValue = grand2 . getNodeValue ( ) ; retTable . put ( nodeName , nodeValue ) ; } / / then ( ( grand2 ! = null ) & & ( grand2 . getNodeType ( ) = = / / Node . TEXT_NODE ) ) else { / / no child or one of wrong node type throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_XML , "1" ) ; } / / else ( ( grand2 ! = null ) & & ( grand2 . getNodeType ( ) = = / / Node . TEXT_NODE ) ) } / / if ( grand . getNodeType ( ) = = Node . ELEMENT_NODE ) } / / for ( int j = 0 ; j < grandchildren . getLength ( ) ; j + + ) } / / if ( children . getLength ( ) > 0 ) return retTable ; }
void test8 ( ) throws Throwable { RPCParam rPCParam0 = new RPCParam ( "f7Lye0h0" , "f7Lye0h0" ) ; DeferredDocumentImpl deferredDocumentImpl0 = ( DeferredDocumentImpl ) rPCParam0 . getAsDocument ( ) ; Hashtable < Object , Object > hashtable0 = XMLHelper . getTagTextList ( ( Document ) deferredDocumentImpl0 , "f7Lye0h0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test9 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; XMLHelper . setTagTextList ( ( Document ) hTMLDocumentImpl0 , "" , ( Hashtable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTagTextList ( Document doc , String tag , Hashtable entries ) { NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found Element newElement = doc . createElement ( tag ) ; / / The old tag node will just be replaced . for ( Enumeration e = entries . keys ( ) ; e . hasMoreElements ( ) ; ) { / / loop over name / value pairs String key = ( String ) e . nextElement ( ) ; Element child = doc . createElement ( key ) ; / / the element node from the name . . . child . appendChild ( doc . createTextNode ( ( String ) entries . get ( key ) ) ) ; / / . . . plus the text node for the value newElement . appendChild ( child ) ; / / to the tag node } / / for ( Enumeration enum = entries . keys ( ) ; / / enum . hasMoreElements ( ) ; ) Node oldTag = children . item ( 0 ) ; / / Replace the first tag occurence . . . Node father = oldTag . getParentNode ( ) ; / / . . . in its parent node . . . father . replaceChild ( newElement , oldTag ) ; / / by the newly constructed node containg the name / value pairs } / / if ( children . getLength ( ) > 0 ) }
void test10 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; XMLHelper . setTagText ( ( Document ) hTMLDocumentImpl0 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTagText ( Document doc , String tag , String text ) { NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found Element newElement = doc . createElement ( tag ) ; / / The old tag node will just be replaced . newElement . appendChild ( doc . createTextNode ( text ) ) ; / / the value to store Node oldTag = children . item ( 0 ) ; / / Replace the first tag occurence . . . Node father = oldTag . getParentNode ( ) ; / / . . . in its parent node . . . father . replaceChild ( newElement , oldTag ) ; / / by the newly constructed node } / / if ( children . getLength ( ) > 0 ) }
void test11 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; XMLHelper . setTagCDATA ( ( Document ) hTMLDocumentImpl0 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTagCDATA ( Document doc , String tag , String text ) { NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag if ( children . getLength ( ) > 0 ) { / / some nodes with searched tag found Element newElement = doc . createElement ( tag ) ; / / The old tag node will just be replaced . newElement . appendChild ( doc . createCDATASection ( text ) ) ; / / the value to store Node oldTag = children . item ( 0 ) ; / / Replace the first tag occurence . . . Node father = oldTag . getParentNode ( ) ; / / . . . in its parent node . . . father . replaceChild ( newElement , oldTag ) ; / / by the newly constructed node } / / if ( children . getLength ( ) > 0 ) }
void test12 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; XMLHelper . deleteTag ( ( Document ) hTMLDocumentImpl0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteTag ( Document doc , String tag ) { NodeList children = doc . getElementsByTagName ( tag ) ; / / all nodes with the specified tag Node foundTag ; if ( children . getLength ( ) > 0 ) { foundTag = children . item ( 0 ) ; / / the first tag occurence . . . Node father = foundTag . getParentNode ( ) ; / / its parent node father . removeChild ( foundTag ) ; } / / if ( children . getLength ( ) > 0 ) }
void test13 ( ) throws Throwable { Document document0 = XMLHelper . parseXML ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document parseXML ( String xml , String messageName , String system ) throws XException { Document retDocument = null ; if ( messageName = = null ) { messageName = "Default" ; } if ( ( xml ! = null ) & & ( xml . length ( ) > 0 ) ) { try { ByteArrayInputStream xmlStream = new ByteArrayInputStream ( xml . getBytes ( Constants . getXMLEncoding ( ) ) ) ; InputSource inputSource = new InputSource ( xmlStream ) ; String systemString = new StringBuffer ( ) . append ( Constants . XBUS_ETC ) . append ( "dtd" ) . append ( Constants . FILE_SEPERATOR ) . toString ( ) ; String systemId = new File ( systemString ) . toURL ( ) . toString ( ) ; inputSource . setSystemId ( systemId ) ; DOMParser parser = new DOMParser ( ) ; parser . setFeature ( "http : / / xml . org / sax / features / validation" , getValidating ( messageName , system ) ) ; parser . setFeature ( "http : / / xml . org / sax / features / namespaces" , getNamespaceAware ( messageName , system ) ) ; String schema = getXMLSchema ( messageName , system ) ; if ( schema ! = null ) { parser . setFeature ( "http : / / xml . org / sax / features / namespaces" , true ) ; parser . setFeature ( "http : / / xml . org / sax / features / validation" , true ) ; parser . setFeature ( "http : / / apache . org / xml / features / validation / schema" , true ) ; parser . setProperty ( "http : / / apache . org / xml / properties / schema / external - noNamespaceSchemaLocation" , new StringBuffer ( ) . append ( Constants . XBUS_ETC ) . append ( "Schema" ) . append ( Constants . FILE_SEPERATOR ) . append ( schema ) . toString ( ) ) ; } parser . setErrorHandler ( new XParserErrorHandler ( ) ) ; parser . parse ( inputSource ) ; retDocument = parser . getDocument ( ) ; } catch ( Exception e ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_XML , "0" , e ) ; } } return retDocument ; }
void test14 ( ) throws Throwable { Document document0 = XMLHelper . parseXML ( ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document parseXML ( String xml , String messageName , String system ) throws XException { Document retDocument = null ; if ( messageName = = null ) { messageName = "Default" ; } if ( ( xml ! = null ) & & ( xml . length ( ) > 0 ) ) { try { ByteArrayInputStream xmlStream = new ByteArrayInputStream ( xml . getBytes ( Constants . getXMLEncoding ( ) ) ) ; InputSource inputSource = new InputSource ( xmlStream ) ; String systemString = new StringBuffer ( ) . append ( Constants . XBUS_ETC ) . append ( "dtd" ) . append ( Constants . FILE_SEPERATOR ) . toString ( ) ; String systemId = new File ( systemString ) . toURL ( ) . toString ( ) ; inputSource . setSystemId ( systemId ) ; DOMParser parser = new DOMParser ( ) ; parser . setFeature ( "http : / / xml . org / sax / features / validation" , getValidating ( messageName , system ) ) ; parser . setFeature ( "http : / / xml . org / sax / features / namespaces" , getNamespaceAware ( messageName , system ) ) ; String schema = getXMLSchema ( messageName , system ) ; if ( schema ! = null ) { parser . setFeature ( "http : / / xml . org / sax / features / namespaces" , true ) ; parser . setFeature ( "http : / / xml . org / sax / features / validation" , true ) ; parser . setFeature ( "http : / / apache . org / xml / features / validation / schema" , true ) ; parser . setProperty ( "http : / / apache . org / xml / properties / schema / external - noNamespaceSchemaLocation" , new StringBuffer ( ) . append ( Constants . XBUS_ETC ) . append ( "Schema" ) . append ( Constants . FILE_SEPERATOR ) . append ( schema ) . toString ( ) ) ; } parser . setErrorHandler ( new XParserErrorHandler ( ) ) ; parser . parse ( inputSource ) ; retDocument = parser . getDocument ( ) ; } catch ( Exception e ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_XML , "0" , e ) ; } } return retDocument ; }
void test18 ( ) throws Throwable { String string0 = XMLHelper . serializeXML ( ( Document ) null , " , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String serializeXML ( Document doc , String systemID ) throws XException { String xmlData = null ; if ( doc ! = null ) { Transformer serializer = getSerializer ( systemID ) ; ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; try { serializer . transform ( new DOMSource ( doc ) , new StreamResult ( outStream ) ) ; xmlData = outStream . toString ( Constants . getXMLEncoding ( ) ) ; outStream . close ( ) ; / / The serializer contains a bug and replaces DOS line breaks / / "\r\n" by "\r\r\n" within any element text . / / This is corrected in the follwing instruction . xmlData = xmlData . replaceAll ( "\r\r\n" , "\r\n" ) ; } catch ( TransformerException e ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_XML , "0" , e ) ; } catch ( IOException e ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_XML , "0" , e ) ; } } return xmlData ; }
void test0 ( ) throws Throwable { Constants constants0 = new Constants ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDateAsString ( ) { return new SimpleDateFormat ( Constants . FILE_NAME_DATE_FORMAT ) . format ( new Date ( ) ) ; }
void test1 ( ) throws Throwable { String string0 = Constants . getAS400DateFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAS400DateFormat ( ) { return new SimpleDateFormat ( Constants . AS400_DATE_FORMAT ) . format ( new Date ( ) ) ; }
void test2 ( ) throws Throwable { String string0 = Constants . getDateAsString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDateAsString ( ) { return new SimpleDateFormat ( Constants . FILE_NAME_DATE_FORMAT ) . format ( new Date ( ) ) ; }
void test3 ( ) throws Throwable { String string0 = Constants . getLineSeperator ( "Windows" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLineSeperator ( String platform ) throws XException { String result = null ; if ( platform . equals ( "Unix" ) ) result = "\n" ; else if ( platform . equals ( "Windows" ) ) result = "\r\n" ; else { List params = new Vector ( ) ; params . add ( platform ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_COREBASE , "20" , params ) ; } / / else return result ; }
void test4 ( ) throws Throwable { String string0 = Constants . getLineSeperator ( "Unix" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLineSeperator ( String platform ) throws XException { String result = null ; if ( platform . equals ( "Unix" ) ) result = "\n" ; else if ( platform . equals ( "Windows" ) ) result = "\r\n" ; else { List params = new Vector ( ) ; params . add ( platform ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_COREBASE , Constants . PACKAGE_COREBASE_COREBASE , "20" , params ) ; } / / else return result ; }
void test6 ( ) throws Throwable { SimpleDateFormat simpleDateFormat0 = Constants . getDateFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { if ( dateFormat = = null ) { dateFormat = new SimpleDateFormat ( Constants . DATE_FORMAT ) ; } return dateFormat ; }
void test0 ( ) throws Throwable { TAManager tAManager0 = TAManager . getInstance ( ) ; AS400LineReaderReceiver aS400LineReaderReceiver0 = new AS400LineReaderReceiver ( ) ; tAManager0 . registerResource ( ( TAResource ) aS400LineReaderReceiver0 ) ; tAManager0 . removeResource ( ( TAResource ) aS400LineReaderReceiver0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test1 ( ) throws Throwable { MessageHandler messageHandler0 = MessageHandler . getInstance ( "s~dNm - xjIEChisl1g | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TAManager getInstance ( ) { ( classLock ) { TAManager taManager = ( TAManager ) mTAManagers . get ( Thread . currentThread ( ) . getName ( ) ) ; if ( taManager = = null ) { taManager = new TAManager ( ) ; } / / if ( taManager = = null ) return taManager ; } }
void test0 ( ) throws Throwable { ThreadFactoryUser threadFactoryUser0 = new ThreadFactoryUser ( ) ; ThreadFactoryUser . DefaultThreadFactory threadFactoryUser_DefaultThreadFactory0 = ( ThreadFactoryUser . DefaultThreadFactory ) threadFactoryUser0 . setThreadFactory ( ( ThreadFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadFactory setThreadFactory ( ThreadFactory factory ) { ThreadFactory old = threadFactory_ ; threadFactory_ = factory ; return old ; }
void test1 ( ) throws Throwable { ThreadFactoryUser . DefaultThreadFactory threadFactoryUser_DefaultThreadFactory0 = new ThreadFactoryUser . DefaultThreadFactory ( ) ; Thread thread0 = threadFactoryUser_DefaultThreadFactory0 . newThread ( ( Runnable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thread newThread ( Runnable command ) ; }
void test2 ( ) throws Throwable { ThreadFactoryUser threadFactoryUser0 = new ThreadFactoryUser ( ) ; ThreadFactoryUser . DefaultThreadFactory threadFactoryUser_DefaultThreadFactory0 = ( ThreadFactoryUser . DefaultThreadFactory ) threadFactoryUser0 . getThreadFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadFactory getThreadFactory ( ) { return threadFactory_ ; }
void test1 ( ) throws Throwable { Trace trace0 = new Trace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTracelevel ( ) { return mTracelevel ; }
void test2 ( ) throws Throwable { int int0 = Trace . getTracelevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTracelevel ( ) { return mTracelevel ; }
void test0 ( ) throws Throwable { ConsoleTrace consoleTrace0 = new ConsoleTrace ( ) ; String string0 = consoleTrace0 . getTrace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrace ( ) { return "ConsoleTrace can't return trace messages . " ; }
void test0 ( ) throws Throwable { Formatter formatter0 = new Formatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ReflectionSupport reflectionSupport0 = new ReflectionSupport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PropertiesSource propertiesSource0 = new PropertiesSource ( "Address" ) ; Hashtable < Object , Object > hashtable0 = propertiesSource0 . readCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test2 ( ) throws Throwable { String string0 = Configuration . getMappingOptional ( "XBUS_ocument" , "XBUS_ocument" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMappingOptional ( String section , String key ) throws XException { return Configuration . getInstance ( "mapping" ) . getValueOptional ( "Mapping" , section , key ) ; }
void test2 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( ( XBUSSystem ) null ) ; Date date0 = xMLMessageImplementation0 . getRequestTimestamp ( ) ; String string0 = Journal . formatDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatDate ( java . util . Date in ) { if ( in = = null ) { return " < null > " ; } SimpleDateFormat formatter = Constants . getDateFormat ( ) ; return formatter . format ( in ) ; }
void test3 ( ) throws Throwable { String string0 = Journal . formatDate ( ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatDate ( java . util . Date in ) { if ( in = = null ) { return " < null > " ; } SimpleDateFormat formatter = Constants . getDateFormat ( ) ; return formatter . format ( in ) ; }
void test4 ( ) throws Throwable { String string0 = Journal . removeLinefeeds ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeLinefeeds ( String text ) { if ( text ! = null ) { text = text . replaceAll ( "\n" , "" ) ; return text . replaceAll ( "\r" , "" ) ; } else { return text ; } }
void test5 ( ) throws Throwable { String string0 = Journal . removeLinefeeds ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeLinefeeds ( String text ) { if ( text ! = null ) { text = text . replaceAll ( "\n" , "" ) ; return text . replaceAll ( "\r" , "" ) ; } else { return text ; } }
void test0 ( ) throws Throwable { TransformerFactory transformerFactory0 = new TransformerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { MessageFactory messageFactory0 = new MessageFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; String string0 = message0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test1 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; int int0 = message0 . getErrorcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test2 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; message0 . getResponseTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test3 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; message0 . getShortname ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test4 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test5 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test6 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test7 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; String string0 = message0 . getFunction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test8 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; message0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test9 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test10 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test11 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test12 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; message0 . getErrortext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test13 ( ) throws Throwable { Message message0 = new Message ( "g = 3 2A { TQE\"FOzTauY" , ( XBUSSystem ) null , "g = 3 2A { TQE\"FOzTauY" ) ; message0 . setErrortext ( "g = 3 2A { TQE\"FOzTauY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test14 ( ) throws Throwable { Message message0 = new Message ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test0 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( ( XBUSSystem ) null ) ; simpleTextMessage0 . setRequestObject ( ( Object ) "Default" , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test1 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( " , FynICFP" , ( XBUSSystem ) null , " , FynICFP" ) ; simpleTextMessage0 . getRequestObject ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test2 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( "" , ( XBUSSystem ) null , "" ) ; simpleTextMessage0 . setResponseObject ( ( Object ) null , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test3 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( "" , ( XBUSSystem ) null , "" ) ; simpleTextMessage0 . getRequestText ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test4 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( ( XBUSSystem ) null ) ; simpleTextMessage0 . setRequestText ( "" , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test5 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( "" , ( XBUSSystem ) null , "" ) ; simpleTextMessage0 . getResponseObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test6 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( " , FynICFP" , ( XBUSSystem ) null , " , FynICFP" ) ; simpleTextMessage0 . getResponseText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test7 ( ) throws Throwable { SimpleTextMessage simpleTextMessage0 = new SimpleTextMessage ( " , FynICFP" , ( XBUSSystem ) null , " , FynICFP" ) ; simpleTextMessage0 . setResponseText ( " , FynICFP" , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test0 ( ) throws Throwable { Stream2TextTransformer stream2TextTransformer0 = new Stream2TextTransformer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Text2StreamTransformer text2StreamTransformer0 = new Text2StreamTransformer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { SimpleObjectMessage simpleObjectMessage0 = new SimpleObjectMessage ( ( XBUSSystem ) null ) ; simpleObjectMessage0 . getResponseObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test1 ( ) throws Throwable { SimpleObjectMessage simpleObjectMessage0 = new SimpleObjectMessage ( ( XBUSSystem ) null ) ; Object object0 = new Object ( ) ; simpleObjectMessage0 . setRequestObject ( object0 , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test2 ( ) throws Throwable { SimpleObjectMessage simpleObjectMessage0 = new SimpleObjectMessage ( ( XBUSSystem ) null ) ; simpleObjectMessage0 . getRequestObject ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test3 ( ) throws Throwable { SimpleObjectMessage simpleObjectMessage0 = new SimpleObjectMessage ( ( XBUSSystem ) null ) ; simpleObjectMessage0 . setResponseObject ( ( Object ) null , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test4 ( ) throws Throwable { SimpleObjectMessage simpleObjectMessage0 = new SimpleObjectMessage ( "%LT9 > i ; JPw~o 7s" , ( XBUSSystem ) null , "%LT9 > i ; JPw~o 7s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test0 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test1 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( "" , ( XBUSSystem ) null , "noInstructions00" ) ; xMLMessageImplementation0 . synchronizeResponseFields ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test2 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( "F1nxFruegu23 / U * ! & I" , ( XBUSSystem ) null , "" ) ; xMLMessageImplementation0 . synchronizeRequestFields ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test0 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; Message message0 = new Message ( "XBUS_Stylet" , ( XBUSSystem ) null , "XBUS_Stylet" ) ; Hashtable < Integer , Object > hashtable0 = new Hashtable < Integer , Object > ( ) ; IteratedStyletApplication iteratedStyletApplication0 = new IteratedStyletApplication ( ( Document ) hTMLDocumentImpl0 , message0 , ( Hashtable ) hashtable0 ) ; iteratedStyletApplication0 . iteratedProcedure ( ( Node ) hTMLDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void iteratedProcedure ( Node node ) throws XException { try { if ( node . getNodeType ( ) = = Node . ELEMENT_NODE & & node . getNodeName ( ) . equals ( "XBUS_Stylet" ) ) { Node parent = node . getParentNode ( ) ; String styletName = ( ( Element ) node ) . getAttribute ( "Name" ) ; if ( ( styletName = = null ) | | ( styletName . length ( ) = = 0 ) ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "18" ) ; } / / if ( ( styletName = = null ) | | ( styletName . length ( ) = = 0 ) ) String tagName = ( ( Element ) node ) . getAttribute ( "Tag" ) ; if ( ( tagName = = null ) | | ( tagName . length ( ) = = 0 ) & & ! styletName . equals ( "Value" ) & & ! styletName . equals ( "AddressMapping" ) & & ! styletName . equals ( "FormatDate" ) & & ! styletName . equals ( "DateComparison" ) ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "19" ) ; } / / if ( ( tagName = = null ) | | ( tagName . length ( ) = = 0 ) . . . if ( styletName . equals ( "Id" ) ) { insertValue ( tagName , mMessage . getId ( ) , parent , node ) ; } / / then ( styletName . equals ( "Id" ) ) else if ( styletName . equals ( "Source" ) ) { insertValue ( tagName , mMessage . getSource ( ) . getName ( ) , parent , node ) ; } / / then ( styletName . equals ( "Source" ) ) else if ( styletName . equals ( "RequestTimestamp" ) ) { insertValue ( tagName , Constants . getDateFormat ( ) . format ( mMessage . getRequestTimestamp ( ) ) , parent , node ) ; } / / then ( styletName . equals ( "RequestTimestamp" ) ) else if ( styletName . equals ( "Value" ) ) { String section = ( ( Element ) node ) . getAttribute ( "Section" ) ; String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( section ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) String value = null ; if ( section = = null | | section . length ( ) = = 0 ) { value = ( String ) mStyletValues . get ( keyName ) ; } / / then ( section = = null | | section . length ( ) = = 0 ) else { value = Configuration . getMappingOptional ( section , keyName ) ; if ( value = = null ) { try { value = Configuration . getMappingDefault ( section ) ; } catch ( XException e ) { / / Catch XException to past the missing key / / value into / / the ( second ) error message . List params = new Vector ( ) ; params . add ( section ) ; params . add ( keyName ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "24" , params ) ; } / / catch ( XException e ) } / / if ( value = = null ) } / / else ( section = = null | | section . length ( ) = = 0 ) if ( value = = null ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "21" ) ; } / / if ( value = = null ) / / replace the stylet node in the DOM tree insertValue ( tagName , value , parent , node ) ; } / / then ( styletName . equals ( "Value" ) ) else if ( styletName . equals ( "CDATA" ) ) { String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( "" ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) String value = ( String ) mStyletValues . get ( keyName ) ; if ( value = = null ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "21" ) ; } / / if ( value = = null ) Element newElement = mDoc . createElement ( tagName ) ; newElement . appendChild ( mDoc . createCDATASection ( value ) ) ; parent . replaceChild ( newElement , node ) ; } / / then ( styletName . equals ( "CDATA" ) ) else if ( styletName . equals ( "FormatDate" ) ) { String oldFormat = ( ( Element ) node ) . getAttribute ( "SourceFormat" ) ; String newFormat = ( ( Element ) node ) . getAttribute ( "DestinationFormat" ) ; if ( newFormat = = null | | newFormat . length ( ) = = 0 ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "22" ) ; } / / if ( newFormat = = null | | newFormat . length ( ) = = 0 ) String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) { if ( keyName ! = null & & keyName . length ( ) > 0 ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "22" ) ; } / / if ( keyName ! = null & & keyName . length ( ) > 0 ) } / / then ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) else if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( "" ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) Date date = null ; SimpleDateFormat formater = null ; if ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) { date = new Date ( ) ; formater = new SimpleDateFormat ( newFormat ) ; } / / then ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) else { formater = new SimpleDateFormat ( oldFormat ) ; date = formater . parse ( keyName ) ; formater . applyPattern ( newFormat ) ; } / / else ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) String value = formater . format ( date ) ; insertValue ( tagName , value , parent , node ) ; } / / then ( styletName . equals ( "FormatDate" ) ) else if ( styletName . equals ( "AddressMapping" ) ) { / / for value mapping from the AddtionalAddressImplementation / / the originating value type String section = ( ( Element ) node ) . getAttribute ( "Section" ) ; / / the destination value type String toSection = ( ( Element ) node ) . getAttribute ( "toSection" ) ; / / the key to map String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( section ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) if ( ( section = = null ) | | ( section . length ( ) = = 0 ) | | ( toSection = = null ) | | ( toSection . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "23" , params ) ; } / / if ( ( section = = null ) | | ( section . length ( ) = = 0 ) | | / / ( toSection = = null ) | | ( toSection . length ( ) = = 0 ) ) AdditionalAddress addressImpl = XBUSSystem . getAdditionalAddressImplementation ( mMessage . getSource ( ) . getName ( ) ) ; / / the mapped value String value = addressImpl . getValue ( section , toSection , keyName ) ; if ( value = = null ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "21" ) ; } / / if ( value = = null ) / / replace the stylet node in the DOM tree insertValue ( tagName , value , parent , node ) ; } / / if ( styletName . equals ( "AddressMapping" ) ) else if ( styletName . equals ( "DateComparison" ) ) { / / Compare a given or the actual date against an time / / interval / / or a single date . / / Begin of the interval or single date to compare against . String beginString = ( ( Element ) node ) . getAttribute ( "BeginDate" ) ; Date beginDate = null ; if ( beginString . length ( ) > 0 ) { / / Begin date is specified . Get it as date object . String beginFormat = ( ( Element ) node ) . getAttribute ( "BeginFormat" ) ; SimpleDateFormat formater = new SimpleDateFormat ( beginFormat ) ; beginDate = formater . parse ( beginString ) ; / / Any problem in date handling is handled at the end of / / the procedure . } / / then ( beginString . length ( ) > 0 ) else { / / The begin date is mandatory . List params = new Vector ( ) ; params . add ( beginString ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "26" , params ) ; } / / else ( beginString . length ( ) > 0 ) / / The end date of the interval to comaper against . / / Or empty if comaprison is done date - to - date . String endString = ( ( Element ) node ) . getAttribute ( "EndDate" ) ; Date endDate = null ; if ( endString . length ( ) > 0 ) { / / The end date is specified . Get it as date object . String endFormat = ( ( Element ) node ) . getAttribute ( "EndFormat" ) ; SimpleDateFormat formater = new SimpleDateFormat ( endFormat ) ; endDate = formater . parse ( endString ) ; / / Any problem in date handling is handled at the end of / / the procedure . } / / if ( endString . length ( ) > 0 ) / / The date to compare against begin and end date or begin / / date / / alone . / / If the compare date is empty , the current date is used / / for / / the comparison . String compareString = ( ( Element ) node ) . getAttribute ( "CompareDate" ) ; Date compareDate = null ; if ( compareString . length ( ) > 0 ) { / / The compare date is specified . Get it as date object . String compareFormat = ( ( Element ) node ) . getAttribute ( "CompareFormat" ) ; SimpleDateFormat formater = new SimpleDateFormat ( compareFormat ) ; compareDate = formater . parse ( compareString ) ; / / Any problem in date handling is handled at the end of / / the procedure . } / / if ( compareString . length ( ) > 0 ) else { / / The compare date was not specified . Use the actual / / date . SimpleDateFormat formater = new SimpleDateFormat ( "yyyyMMdd" ) ; compareDate = formater . parse ( formater . format ( new Date ( ) ) ) ; } / / else ( compareString . length ( ) > 0 ) / / First comparison against the begin date . int comparison = compareDate . compareTo ( beginDate ) ; if ( comparison > - 1 & & endDate ! = null ) { / / The compared date lies not before the begin date and / / there is an end date . if ( beginDate . compareTo ( endDate ) = = 1 ) { / / Check the begin - end - date interval . List params = new Vector ( ) ; params . add ( beginString ) ; params . add ( endString ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "25" , params ) ; } / / then ( beginDate . compareTo ( endDate ) = = 1 ) else { / / Begin and end date form a sensilbe interval . / / Compare against the end date . / / Already sure : the compare date is not before the / / begin date . comparison = compareDate . compareTo ( endDate ) ; if ( comparison = = - 1 ) / / Before end date means that it is in the / / interval . comparison = 0 ; } / / else ( beginDate . compareTo ( endDate ) = = 1 ) } / / if ( comparison > - 1 & & endDate ! = null ) / / Convert the comparison value into one of the specified / / keys . String value = null ; switch ( comparison ) { case - 1 : value = ( ( Element ) node ) . getAttribute ( "BeforeValue" ) ; break ; case 0 : value = ( ( Element ) node ) . getAttribute ( "StrikeValue" ) ; break ; case 1 : value = ( ( Element ) node ) . getAttribute ( "AfterValue" ) ; break ; } / / switch ( comparison ) / / Insert the value into the DOM tree according to the / / specified / / tag name . insertValue ( tagName , value , parent , node ) ; } / / if ( styletName . equals ( "DateComparison" ) ) else if ( styletName . equals ( "Max" ) ) { / / Calculate the maximum of two integer values . / / The values are stored in the attributes "Key" and / / "Value" . / / This stylet is only needed to combine stylet results / / after / / the XSLT transformation . / / Usual comparison is possible in XSLT directly . String keyString = ( ( Element ) node ) . getAttribute ( "Key" ) ; int key = Integer . parseInt ( keyString ) ; String value = ( ( Element ) node ) . getAttribute ( "Value" ) ; int val = Integer . parseInt ( value ) ; if ( val < key ) value = keyString ; insertValue ( tagName , value , parent , node ) ; } / / if ( styletName . equals ( "Max" ) ) else { List params = new Vector ( ) ; params . add ( styletName ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "27" , params ) ; } / / else - name attribute unknown } / / if ( node . getNodeType ( ) ! = Node . ELEMENT_NODE ) } / / try catch ( XException e ) { throw e ; } / / catch ( XException e ) catch ( Exception e ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "0" , e ) ; } / / catch }
void test1 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; HTMLOptionElementImpl hTMLOptionElementImpl0 = new HTMLOptionElementImpl ( hTMLDocumentImpl0 , "XBUS_Stylet" ) ; Message message0 = new Message ( "XBUS_Stylet" , ( XBUSSystem ) null , "XBUS_Stylet" ) ; Hashtable < Integer , Object > hashtable0 = new Hashtable < Integer , Object > ( ) ; IteratedStyletApplication iteratedStyletApplication0 = new IteratedStyletApplication ( ( Document ) hTMLDocumentImpl0 , message0 , ( Hashtable ) hashtable0 ) ; iteratedStyletApplication0 . iteratedProcedure ( ( Node ) hTMLOptionElementImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void iteratedProcedure ( Node node ) throws XException { try { if ( node . getNodeType ( ) = = Node . ELEMENT_NODE & & node . getNodeName ( ) . equals ( "XBUS_Stylet" ) ) { Node parent = node . getParentNode ( ) ; String styletName = ( ( Element ) node ) . getAttribute ( "Name" ) ; if ( ( styletName = = null ) | | ( styletName . length ( ) = = 0 ) ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "18" ) ; } / / if ( ( styletName = = null ) | | ( styletName . length ( ) = = 0 ) ) String tagName = ( ( Element ) node ) . getAttribute ( "Tag" ) ; if ( ( tagName = = null ) | | ( tagName . length ( ) = = 0 ) & & ! styletName . equals ( "Value" ) & & ! styletName . equals ( "AddressMapping" ) & & ! styletName . equals ( "FormatDate" ) & & ! styletName . equals ( "DateComparison" ) ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "19" ) ; } / / if ( ( tagName = = null ) | | ( tagName . length ( ) = = 0 ) . . . if ( styletName . equals ( "Id" ) ) { insertValue ( tagName , mMessage . getId ( ) , parent , node ) ; } / / then ( styletName . equals ( "Id" ) ) else if ( styletName . equals ( "Source" ) ) { insertValue ( tagName , mMessage . getSource ( ) . getName ( ) , parent , node ) ; } / / then ( styletName . equals ( "Source" ) ) else if ( styletName . equals ( "RequestTimestamp" ) ) { insertValue ( tagName , Constants . getDateFormat ( ) . format ( mMessage . getRequestTimestamp ( ) ) , parent , node ) ; } / / then ( styletName . equals ( "RequestTimestamp" ) ) else if ( styletName . equals ( "Value" ) ) { String section = ( ( Element ) node ) . getAttribute ( "Section" ) ; String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( section ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) String value = null ; if ( section = = null | | section . length ( ) = = 0 ) { value = ( String ) mStyletValues . get ( keyName ) ; } / / then ( section = = null | | section . length ( ) = = 0 ) else { value = Configuration . getMappingOptional ( section , keyName ) ; if ( value = = null ) { try { value = Configuration . getMappingDefault ( section ) ; } catch ( XException e ) { / / Catch XException to past the missing key / / value into / / the ( second ) error message . List params = new Vector ( ) ; params . add ( section ) ; params . add ( keyName ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "24" , params ) ; } / / catch ( XException e ) } / / if ( value = = null ) } / / else ( section = = null | | section . length ( ) = = 0 ) if ( value = = null ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "21" ) ; } / / if ( value = = null ) / / replace the stylet node in the DOM tree insertValue ( tagName , value , parent , node ) ; } / / then ( styletName . equals ( "Value" ) ) else if ( styletName . equals ( "CDATA" ) ) { String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( "" ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) String value = ( String ) mStyletValues . get ( keyName ) ; if ( value = = null ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "21" ) ; } / / if ( value = = null ) Element newElement = mDoc . createElement ( tagName ) ; newElement . appendChild ( mDoc . createCDATASection ( value ) ) ; parent . replaceChild ( newElement , node ) ; } / / then ( styletName . equals ( "CDATA" ) ) else if ( styletName . equals ( "FormatDate" ) ) { String oldFormat = ( ( Element ) node ) . getAttribute ( "SourceFormat" ) ; String newFormat = ( ( Element ) node ) . getAttribute ( "DestinationFormat" ) ; if ( newFormat = = null | | newFormat . length ( ) = = 0 ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "22" ) ; } / / if ( newFormat = = null | | newFormat . length ( ) = = 0 ) String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) { if ( keyName ! = null & & keyName . length ( ) > 0 ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "22" ) ; } / / if ( keyName ! = null & & keyName . length ( ) > 0 ) } / / then ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) else if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( "" ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) Date date = null ; SimpleDateFormat formater = null ; if ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) { date = new Date ( ) ; formater = new SimpleDateFormat ( newFormat ) ; } / / then ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) else { formater = new SimpleDateFormat ( oldFormat ) ; date = formater . parse ( keyName ) ; formater . applyPattern ( newFormat ) ; } / / else ( oldFormat = = null | | oldFormat . length ( ) = = 0 ) String value = formater . format ( date ) ; insertValue ( tagName , value , parent , node ) ; } / / then ( styletName . equals ( "FormatDate" ) ) else if ( styletName . equals ( "AddressMapping" ) ) { / / for value mapping from the AddtionalAddressImplementation / / the originating value type String section = ( ( Element ) node ) . getAttribute ( "Section" ) ; / / the destination value type String toSection = ( ( Element ) node ) . getAttribute ( "toSection" ) ; / / the key to map String keyName = ( ( Element ) node ) . getAttribute ( "Key" ) ; if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; params . add ( section ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "20" , params ) ; } / / if ( ( keyName = = null ) | | ( keyName . length ( ) = = 0 ) ) if ( ( section = = null ) | | ( section . length ( ) = = 0 ) | | ( toSection = = null ) | | ( toSection . length ( ) = = 0 ) ) { List params = new Vector ( ) ; params . add ( styletName ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "23" , params ) ; } / / if ( ( section = = null ) | | ( section . length ( ) = = 0 ) | | / / ( toSection = = null ) | | ( toSection . length ( ) = = 0 ) ) AdditionalAddress addressImpl = XBUSSystem . getAdditionalAddressImplementation ( mMessage . getSource ( ) . getName ( ) ) ; / / the mapped value String value = addressImpl . getValue ( section , toSection , keyName ) ; if ( value = = null ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "21" ) ; } / / if ( value = = null ) / / replace the stylet node in the DOM tree insertValue ( tagName , value , parent , node ) ; } / / if ( styletName . equals ( "AddressMapping" ) ) else if ( styletName . equals ( "DateComparison" ) ) { / / Compare a given or the actual date against an time / / interval / / or a single date . / / Begin of the interval or single date to compare against . String beginString = ( ( Element ) node ) . getAttribute ( "BeginDate" ) ; Date beginDate = null ; if ( beginString . length ( ) > 0 ) { / / Begin date is specified . Get it as date object . String beginFormat = ( ( Element ) node ) . getAttribute ( "BeginFormat" ) ; SimpleDateFormat formater = new SimpleDateFormat ( beginFormat ) ; beginDate = formater . parse ( beginString ) ; / / Any problem in date handling is handled at the end of / / the procedure . } / / then ( beginString . length ( ) > 0 ) else { / / The begin date is mandatory . List params = new Vector ( ) ; params . add ( beginString ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "26" , params ) ; } / / else ( beginString . length ( ) > 0 ) / / The end date of the interval to comaper against . / / Or empty if comaprison is done date - to - date . String endString = ( ( Element ) node ) . getAttribute ( "EndDate" ) ; Date endDate = null ; if ( endString . length ( ) > 0 ) { / / The end date is specified . Get it as date object . String endFormat = ( ( Element ) node ) . getAttribute ( "EndFormat" ) ; SimpleDateFormat formater = new SimpleDateFormat ( endFormat ) ; endDate = formater . parse ( endString ) ; / / Any problem in date handling is handled at the end of / / the procedure . } / / if ( endString . length ( ) > 0 ) / / The date to compare against begin and end date or begin / / date / / alone . / / If the compare date is empty , the current date is used / / for / / the comparison . String compareString = ( ( Element ) node ) . getAttribute ( "CompareDate" ) ; Date compareDate = null ; if ( compareString . length ( ) > 0 ) { / / The compare date is specified . Get it as date object . String compareFormat = ( ( Element ) node ) . getAttribute ( "CompareFormat" ) ; SimpleDateFormat formater = new SimpleDateFormat ( compareFormat ) ; compareDate = formater . parse ( compareString ) ; / / Any problem in date handling is handled at the end of / / the procedure . } / / if ( compareString . length ( ) > 0 ) else { / / The compare date was not specified . Use the actual / / date . SimpleDateFormat formater = new SimpleDateFormat ( "yyyyMMdd" ) ; compareDate = formater . parse ( formater . format ( new Date ( ) ) ) ; } / / else ( compareString . length ( ) > 0 ) / / First comparison against the begin date . int comparison = compareDate . compareTo ( beginDate ) ; if ( comparison > - 1 & & endDate ! = null ) { / / The compared date lies not before the begin date and / / there is an end date . if ( beginDate . compareTo ( endDate ) = = 1 ) { / / Check the begin - end - date interval . List params = new Vector ( ) ; params . add ( beginString ) ; params . add ( endString ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "25" , params ) ; } / / then ( beginDate . compareTo ( endDate ) = = 1 ) else { / / Begin and end date form a sensilbe interval . / / Compare against the end date . / / Already sure : the compare date is not before the / / begin date . comparison = compareDate . compareTo ( endDate ) ; if ( comparison = = - 1 ) / / Before end date means that it is in the / / interval . comparison = 0 ; } / / else ( beginDate . compareTo ( endDate ) = = 1 ) } / / if ( comparison > - 1 & & endDate ! = null ) / / Convert the comparison value into one of the specified / / keys . String value = null ; switch ( comparison ) { case - 1 : value = ( ( Element ) node ) . getAttribute ( "BeforeValue" ) ; break ; case 0 : value = ( ( Element ) node ) . getAttribute ( "StrikeValue" ) ; break ; case 1 : value = ( ( Element ) node ) . getAttribute ( "AfterValue" ) ; break ; } / / switch ( comparison ) / / Insert the value into the DOM tree according to the / / specified / / tag name . insertValue ( tagName , value , parent , node ) ; } / / if ( styletName . equals ( "DateComparison" ) ) else if ( styletName . equals ( "Max" ) ) { / / Calculate the maximum of two integer values . / / The values are stored in the attributes "Key" and / / "Value" . / / This stylet is only needed to combine stylet results / / after / / the XSLT transformation . / / Usual comparison is possible in XSLT directly . String keyString = ( ( Element ) node ) . getAttribute ( "Key" ) ; int key = Integer . parseInt ( keyString ) ; String value = ( ( Element ) node ) . getAttribute ( "Value" ) ; int val = Integer . parseInt ( value ) ; if ( val < key ) value = keyString ; insertValue ( tagName , value , parent , node ) ; } / / if ( styletName . equals ( "Max" ) ) else { List params = new Vector ( ) ; params . add ( styletName ) ; throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "27" , params ) ; } / / else - name attribute unknown } / / if ( node . getNodeType ( ) ! = Node . ELEMENT_NODE ) } / / try catch ( XException e ) { throw e ; } / / catch ( XException e ) catch ( Exception e ) { throw new XException ( Constants . LOCATION_INTERN , Constants . LAYER_PROTOCOL , Constants . PACKAGE_PROTOCOL_XML , "0" , e ) ; } / / catch }
void test0 ( ) throws Throwable { XMLWrapperTransformer xMLWrapperTransformer0 = new XMLWrapperTransformer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { XMLSerializerTransformer xMLSerializerTransformer0 = new XMLSerializerTransformer ( ) ; Message message0 = new Message ( ( String ) null , ( XBUSSystem ) null , ( String ) null ) ; Object object0 = xMLSerializerTransformer0 . transform ( ( Object ) null , ( XBUSSystem ) null , ( XBUSSystem ) null , message0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transform ( String string ) throws XException ; }
void test0 ( ) throws Throwable { XBUSXMLMessage xBUSXMLMessage0 = new XBUSXMLMessage ( ( XBUSSystem ) null ) ; HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; xBUSXMLMessage0 . setResponseDocument ( ( Document ) hTMLDocumentImpl0 , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test2 ( ) throws Throwable { XBUSXMLMessage xBUSXMLMessage0 = new XBUSXMLMessage ( " ! GeRXo_W1j1 < S^ - i" , ( XBUSSystem ) null , " ! GeRXo_W1j1 < S^ - i" ) ; xBUSXMLMessage0 . synchronizeResponseFields ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test3 ( ) throws Throwable { XBUSXMLMessage xBUSXMLMessage0 = new XBUSXMLMessage ( "" , ( XBUSSystem ) null , "" ) ; xBUSXMLMessage0 . setReturncode ( "" ) ; xBUSXMLMessage0 . synchronizeResponseFields ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test0 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( ( XBUSSystem ) null ) ; xMLMessageImplementation0 . getResponseText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test1 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( "Optical Character Recognition" , ( XBUSSystem ) null , "Optical Character Recognition" ) ; Object object0 = xMLMessageImplementation0 . getRequestObject ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getRequestObject ( XBUSSystem system ) throws XException ; / * * * Gets the object of the outgoing message . * * @return the content of the response * / Object getResponseObject ( ) throws XException ; }
void test3 ( ) throws Throwable { XBUSXMLMessage xBUSXMLMessage0 = new XBUSXMLMessage ( "" , ( XBUSSystem ) null , "" ) ; Object object0 = xBUSXMLMessage0 . getResponseObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getResponseObject ( ) throws XException ; }
void test4 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( ( XBUSSystem ) null ) ; xMLMessageImplementation0 . setResponseObject ( ( Object ) null , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test5 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( ( XBUSSystem ) null ) ; xMLMessageImplementation0 . getRequestText ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test11 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( ( XBUSSystem ) null ) ; DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl ( ) ; deferredDocumentImpl0 . createDeferredCDATASection ( "" ) ; xMLMessageImplementation0 . setResponseDocument ( ( Document ) deferredDocumentImpl0 , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test12 ( ) throws Throwable { XMLMessageImplementation xMLMessageImplementation0 = new XMLMessageImplementation ( "Optical Character Recognition" , ( XBUSSystem ) null , "Optical Character Recognition" ) ; DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl ( ) ; DocumentTypeImpl documentTypeImpl0 = ( DocumentTypeImpl ) deferredDocumentImpl0 . createDocumentType ( "Optical Character Recognition" , "Optical Character Recognition" , "Optical Character Recognition" ) ; DocumentImpl documentImpl0 = new DocumentImpl ( ( DocumentType ) documentTypeImpl0 ) ; xMLMessageImplementation0 . setResponseDocument ( ( Document ) documentImpl0 , ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrortext ( ) { return mErrortext ; }
void test0 ( ) throws Throwable { AS400ProgramMessage aS400ProgramMessage0 = new AS400ProgramMessage ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test1 ( ) throws Throwable { AS400ProgramMessage aS400ProgramMessage0 = new AS400ProgramMessage ( "gG" , ( XBUSSystem ) null , "gG" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test1 ( ) throws Throwable { SOAPMessage sOAPMessage0 = new SOAPMessage ( ( XBUSSystem ) null ) ; sOAPMessage0 . setErrortext ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return mId ; }
void test2 ( ) throws Throwable { SOAPMessage sOAPMessage0 = new SOAPMessage ( "x [ ( aA$ ) l$%J" , ( XBUSSystem ) null , "x [ ( aA$ ) l$%J" ) ; sOAPMessage0 . synchronizeResponseFields ( ( XBUSSystem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortname ( ) { return mShortname ; }
void test0 ( ) throws Throwable { StringTransformerSample stringTransformerSample0 = new StringTransformerSample ( ) ; String string0 = stringTransformerSample0 . transform ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transform ( String string ) throws XException ; }
void test0 ( ) throws Throwable { Dealer dealer0 = new Dealer ( ) ; String string0 = dealer0 . getValue ( "CB ) Yv { BD\"\\bW ? gVAI ? " , ( String ) null , "CB ) Yv { BD\"\\bW ? gVAI ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String inValue , String outValue , String key ) throws XException ; }
void test2 ( ) throws Throwable { Dealer dealer0 = new Dealer ( ) ; boolean boolean0 = dealer0 . hasMarker ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMarker ( String text ) throws XException ; / * * * The given text may contain placeholders for informations on the address . * These placeholders will be replaced with their actual values for the * address of the neighbor system . * < p > * * If the address has not been set , the text will be returned without * modifications . * * @param text text containing markers * @param address adress to search for the values * @return text with replacements for markers * @exception XException if the entry is not found or any error occurs * / String replaceMarker ( String text , String address ) throws XException ; String getValue ( String inValue , String outValue , String key ) throws XException ; }
void test3 ( ) throws Throwable { Dealer dealer0 = new Dealer ( ) ; boolean boolean0 = dealer0 . hasMarker ( "$DEALERNAME$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMarker ( String text ) throws XException ; / * * * The given text may contain placeholders for informations on the address . * These placeholders will be replaced with their actual values for the * address of the neighbor system . * < p > * * If the address has not been set , the text will be returned without * modifications . * * @param text text containing markers * @param address adress to search for the values * @return text with replacements for markers * @exception XException if the entry is not found or any error occurs * / String replaceMarker ( String text , String address ) throws XException ; String getValue ( String inValue , String outValue , String key ) throws XException ; }
void test4 ( ) throws Throwable { Dealer dealer0 = new Dealer ( ) ; boolean boolean0 = dealer0 . hasMarker ( "$DEALERNUMBER$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMarker ( String text ) throws XException ; / * * * The given text may contain placeholders for informations on the address . * These placeholders will be replaced with their actual values for the * address of the neighbor system . * < p > * * If the address has not been set , the text will be returned without * modifications . * * @param text text containing markers * @param address adress to search for the values * @return text with replacements for markers * @exception XException if the entry is not found or any error occurs * / String replaceMarker ( String text , String address ) throws XException ; String getValue ( String inValue , String outValue , String key ) throws XException ; }
void test5 ( ) throws Throwable { Dealer dealer0 = new Dealer ( ) ; boolean boolean0 = dealer0 . hasMarker ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMarker ( String text ) throws XException ; / * * * The given text may contain placeholders for informations on the address . * These placeholders will be replaced with their actual values for the * address of the neighbor system . * < p > * * If the address has not been set , the text will be returned without * modifications . * * @param text text containing markers * @param address adress to search for the values * @return text with replacements for markers * @exception XException if the entry is not found or any error occurs * / String replaceMarker ( String text , String address ) throws XException ; String getValue ( String inValue , String outValue , String key ) throws XException ; }
void test6 ( ) throws Throwable { Dealer dealer0 = new Dealer ( ) ; String string0 = dealer0 . replaceMarker ( "$DEALERNUMBER$" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceMarker ( String text , String address ) throws XException ; String getValue ( String inValue , String outValue , String key ) throws XException ; }
void test0 ( ) throws Throwable { JavaWorker javaWorker0 = new JavaWorker ( ) ; Object object0 = new Object ( ) ; Object object1 = javaWorker0 . doSomething ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object doSomething ( Object indata ) { return indata ; }
void test1 ( ) throws Throwable { JavaWorker javaWorker0 = new JavaWorker ( ) ; String string0 = javaWorker0 . reverse ( ( Object ) " / - U9 > F4M" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reverse ( Object indata ) { String data = ( String ) indata ; int length = data . length ( ) ; StringBuffer retData = new StringBuffer ( length ) ; for ( int i = 0 ; i < length ; i + + ) { retData . append ( data . charAt ( length - i - 1 ) ) ; } return retData . toString ( ) ; }
void test2 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; administrator0 . readEtc ( "Wrong Location" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test3 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . readEtc ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test4 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . readEtc ( " . . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test5 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . readEtc ( " / WrTnog Loc [ on" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test6 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; administrator0 . readLog ( "$J" , 950 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test7 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . readLog ( ( String ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test8 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . readLog ( " . . " , 1353 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test9 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . readLog ( " / WrTnog Loc [ on" , 509 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test10 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . explainErrorcode ( "W_qz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test11 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . explainErrorcode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test12 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . explainErrorcode ( "I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test13 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . getReceiverServiceStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test14 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . getJVMStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test15 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . demandStopBackgroundReceiver ( "IK & 1IzMVy" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test16 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . startBackgroundReceiver ( "I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test0 ( ) throws Throwable { SelectionBean selectionBean0 = new SelectionBean ( ) ; String string0 = selectionBean0 . getRequestFromDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestToDate ( ) { GregorianCalendar cal = new GregorianCalendar ( ) ; cal . add ( Calendar . HOUR_OF_DAY , + 1 ) ; return Constants . getDateFormat ( ) . format ( cal . getTime ( ) ) ; }
void test1 ( ) throws Throwable { SelectionBean selectionBean0 = new SelectionBean ( ) ; String string0 = selectionBean0 . getRequestToDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestFromDate ( ) { GregorianCalendar cal = new GregorianCalendar ( ) ; cal . add ( Calendar . DATE , - 1 ) ; return Constants . getDateFormat ( ) . format ( cal . getTime ( ) ) ; }
void test0 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; navigationBean0 . setTarget ( " < p > < a class = \"navigate\" href = \"NavigationPage . jsp ? target = 1\" target = \"navigate\" > & nbsp ; & nbsp ; Configuration < / a > < / p > < br / > < br / > < p > < a class = \"navigate\" href = \"NavigationPage . jsp ? target = 2\" target = \"navigate\" > & nbsp ; & nbsp ; Journal < / a > < / p > < br / > < br / > < p > < a class = \"navigate\" href = \"NavigationPage . jsp ? target = 3\" target = \"navigate\" > & nbsp ; & nbsp ; ReceiverService < / a > < / p > < br / > < br / > < p > < a class = \"navigate\" href = \"NavigationPage . jsp ? target = 4\" target = \"navigate\" > & nbsp ; & nbsp ; Trace < / a > < / p > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test1 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; navigationBean0 . setTarget ( "1" ) ; String string0 = navigationBean0 . getNavigationAsTableRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test2 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; navigationBean0 . setTarget ( "2" ) ; String string0 = navigationBean0 . getNavigationAsTableRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test3 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; navigationBean0 . setTarget ( "4" ) ; String string0 = navigationBean0 . getNavigationAsTableRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test4 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; String string0 = navigationBean0 . getNavigationAsTableRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test5 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; navigationBean0 . setTarget ( "3" ) ; String string0 = navigationBean0 . getNavigationAsTableRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test6 ( ) throws Throwable { NavigationBean navigationBean0 = new NavigationBean ( ) ; navigationBean0 . setTarget ( "3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNavigationAsTableRows ( ) { StringBuffer navigateBuffer = new StringBuffer ( ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_config ) ; if ( this . clickedNavigateVector . contains ( CONFIGURATION ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_view ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( NavigationBean . closeTagHref_refresh ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_journal ) ; if ( this . clickedNavigateVector . contains ( JOURNAL ) ) { navigateBuffer . append ( this . openTagHref_select ) ; navigateBuffer . append ( NavigationBean . closeHref_select ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_receiverService ) ; if ( this . clickedNavigateVector . contains ( RECEIVER_SERVICE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ReceiverServiceStatus ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StopReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_StartReceiverThread ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_ResendDeletedMessage ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_JVMStatus ) ; } navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . tagBr ) ; navigateBuffer . append ( NavigationBean . openTagHref_navigate ) ; navigateBuffer . append ( NavigationBean . closeTagHref_trace ) ; if ( this . clickedNavigateVector . contains ( TRACE ) ) { navigateBuffer . append ( NavigationBean . openTagHref_dispatcher ) ; navigateBuffer . append ( this . closeHref_view_trace ) ; } return navigateBuffer . toString ( ) ; }
void test0 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test1 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; char char0 = readJournal0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test2 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getResponseMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResponseMessage ( ) { return mResponseMessage ; }
void test3 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setResponseMessage ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test4 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setType ( 'k' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test5 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; int int0 = readJournal0 . getNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumber ( ) { return mNumber ; }
void test6 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setRequestTimestamp ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageId ( ) { return mMessageId ; }
void test7 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getResponseTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getResponseTimestamp ( ) { return mResponseTimestamp ; }
void test8 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setRequestMessage ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test9 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getErrormessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrormessage ( ) { return mErrormessage ; }
void test10 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setReturncode ( "9MG~v ( m = 17 ; M0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageId ( ) { return mMessageId ; }
void test11 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getRequestMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestMessage ( ) { return mRequestMessage ; }
void test12 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; int int0 = readJournal0 . getErrorcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test13 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setSystem ( "9MG~v ( m = 17 ; M0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test14 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getRequestTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getRequestTimestamp ( ) { return mRequestTimestamp ; }
void test15 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getMessageId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageId ( ) { return mMessageId ; }
void test16 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getSystem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystem ( ) { return mSystem ; }
void test17 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setErrorcode ( ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorcode ( ) { return mErrorcode ; }
void test18 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setResponseTimestamp ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumber ( ) { return mNumber ; }
void test19 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getFunction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFunction ( ) { return mFunction ; }
void test20 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setNumber ( 1660 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumber ( ) { return mNumber ; }
void test21 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = readJournal0 . getReturncode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test22 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setMessageId ( "9MG~v ( m = 17 ; M0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test23 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setFunction ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResponseMessage ( ) { return mResponseMessage ; }
void test24 ( ) throws Throwable { ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setErrormessage ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageId ( ) { return mMessageId ; }
void test0 ( ) throws Throwable { ReceiverThreadBean receiverThreadBean0 = new ReceiverThreadBean ( ) ; String string0 = receiverThreadBean0 . getRunningReceiverThreads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRunningReceiverThreads ( ) { StringBuffer buf = new StringBuffer ( " < option selected > - - - - - - - - - - - - - - - - - - - - " ) ; try { Set runningSystems = ReceiverThreadManager . getInstance ( ) . getRunningSystems ( ) ; for ( Iterator it = runningSystems . iterator ( ) ; it . hasNext ( ) ; ) { buf . append ( " < option > " ) ; buf . append ( ( String ) it . next ( ) ) ; } } catch ( XException e ) { / / do nothing } return buf . toString ( ) ; }
void test1 ( ) throws Throwable { ReceiverThreadBean receiverThreadBean0 = new ReceiverThreadBean ( ) ; String string0 = receiverThreadBean0 . getNotRunningReceiverThreads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotRunningReceiverThreads ( ) { StringBuffer buf = new StringBuffer ( " < option selected > - - - - - - - - - - - - - - - - - - - - " ) ; try { ReceiverThreadManager manager = ReceiverThreadManager . getInstance ( ) ; Set allSystems = manager . getAllSystems ( ) ; Set runningSystems = manager . getRunningSystems ( ) ; String name = null ; for ( Iterator it = allSystems . iterator ( ) ; it . hasNext ( ) ; ) { name = ( String ) it . next ( ) ; if ( ! runningSystems . contains ( name ) ) { buf . append ( " < option > " ) ; buf . append ( name ) ; } } } catch ( XException e ) { / / do nothing } return buf . toString ( ) ; }
void test0 ( ) throws Throwable { AdminDispatcherServlet adminDispatcherServlet0 = new AdminDispatcherServlet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; administrationBean0 . setTitle ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverServiceStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; / * * Retrieving state of ReveiverThreads * / ReceiverThreadManager manager = ReceiverThreadManager . getInstance ( ) ; Set runningSystems ; Set allSystems ; try { allSystems = manager . getAllSystems ( ) ; runningSystems = manager . getRunningSystems ( ) ; } catch ( XException e ) { return e . getMessage ( ) ; } Set stoppedSystems = manager . getStoppedSystems ( ) ; StringBuffer tmpBuffer = new StringBuffer ( ) ; retBuffer . append ( "Running Background Receivers : \n" ) ; for ( Iterator it = runningSystems . iterator ( ) ; it . hasNext ( ) ; ) { tmpBuffer . append ( "\n" ) . append ( it . next ( ) ) ; } if ( tmpBuffer . length ( ) = = 0 ) { retBuffer . append ( " - " ) ; } else { retBuffer . append ( tmpBuffer ) ; } tmpBuffer = new StringBuffer ( ) ; retBuffer . append ( "\n\nStopped Background Receivers : \n" ) ; for ( Iterator it = stoppedSystems . iterator ( ) ; it . hasNext ( ) ; ) { tmpBuffer . append ( "\n" ) . append ( it . next ( ) ) ; } if ( tmpBuffer . length ( ) = = 0 ) { retBuffer . append ( " - " ) ; } else { retBuffer . append ( tmpBuffer ) ; } tmpBuffer = new StringBuffer ( ) ; String system = null ; retBuffer . append ( "\n\nKilled Background Receivers : \n" ) ; for ( Iterator it = allSystems . iterator ( ) ; it . hasNext ( ) ; ) { system = ( String ) it . next ( ) ; if ( ( ! runningSystems . contains ( system ) ) & & ( ! stoppedSystems . contains ( system ) ) ) { tmpBuffer . append ( "\n" ) . append ( it . next ( ) ) ; } } if ( tmpBuffer . length ( ) = = 0 ) { retBuffer . append ( " - " ) ; } else { retBuffer . append ( tmpBuffer ) ; } if ( ReceiverService . getInstance ( ) . isWatchdogRunning ( ) ) { retBuffer . append ( "\n\nWatchdog is running" ) ; } else { retBuffer . append ( "\n\nWatchdog is NOT running ! ! ! " ) ; } return retBuffer . toString ( ) ; }
void test2 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; administrationBean0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJvmStatus ( ) { return new Administrator ( ) . getJVMStatus ( ) ; }
void test3 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; administrationBean0 . getResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJvmStatus ( ) { return new Administrator ( ) . getJVMStatus ( ) ; }
void test5 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; String string0 = administrationBean0 . getReceiverServiceStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJvmStatus ( ) { return new Administrator ( ) . getJVMStatus ( ) ; }
void test6 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; administrationBean0 . setResult ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverServiceStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; / * * Retrieving state of ReveiverThreads * / ReceiverThreadManager manager = ReceiverThreadManager . getInstance ( ) ; Set runningSystems ; Set allSystems ; try { allSystems = manager . getAllSystems ( ) ; runningSystems = manager . getRunningSystems ( ) ; } catch ( XException e ) { return e . getMessage ( ) ; } Set stoppedSystems = manager . getStoppedSystems ( ) ; StringBuffer tmpBuffer = new StringBuffer ( ) ; retBuffer . append ( "Running Background Receivers : \n" ) ; for ( Iterator it = runningSystems . iterator ( ) ; it . hasNext ( ) ; ) { tmpBuffer . append ( "\n" ) . append ( it . next ( ) ) ; } if ( tmpBuffer . length ( ) = = 0 ) { retBuffer . append ( " - " ) ; } else { retBuffer . append ( tmpBuffer ) ; } tmpBuffer = new StringBuffer ( ) ; retBuffer . append ( "\n\nStopped Background Receivers : \n" ) ; for ( Iterator it = stoppedSystems . iterator ( ) ; it . hasNext ( ) ; ) { tmpBuffer . append ( "\n" ) . append ( it . next ( ) ) ; } if ( tmpBuffer . length ( ) = = 0 ) { retBuffer . append ( " - " ) ; } else { retBuffer . append ( tmpBuffer ) ; } tmpBuffer = new StringBuffer ( ) ; String system = null ; retBuffer . append ( "\n\nKilled Background Receivers : \n" ) ; for ( Iterator it = allSystems . iterator ( ) ; it . hasNext ( ) ; ) { system = ( String ) it . next ( ) ; if ( ( ! runningSystems . contains ( system ) ) & & ( ! stoppedSystems . contains ( system ) ) ) { tmpBuffer . append ( "\n" ) . append ( it . next ( ) ) ; } } if ( tmpBuffer . length ( ) = = 0 ) { retBuffer . append ( " - " ) ; } else { retBuffer . append ( tmpBuffer ) ; } if ( ReceiverService . getInstance ( ) . isWatchdogRunning ( ) ) { retBuffer . append ( "\n\nWatchdog is running" ) ; } else { retBuffer . append ( "\n\nWatchdog is NOT running ! ! ! " ) ; } return retBuffer . toString ( ) ; }
void test7 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; administrationBean0 . getRefreshMQ ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJvmStatus ( ) { return new Administrator ( ) . getJVMStatus ( ) ; }
void test8 ( ) throws Throwable { AdministrationBean administrationBean0 = new AdministrationBean ( ) ; String string0 = administrationBean0 . getJvmStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJvmStatus ( ) { return new Administrator ( ) . getJVMStatus ( ) ; }
void test0 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; String string0 = journalBean0 . getCollumnsAsTableRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test1 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setJournIndex ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test2 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setDetails ( "trpe" ) ; String string0 = journalBean0 . getDetailsAsTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDetailsAsTable ( ) { StringBuffer detailsBuffer = new StringBuffer ( ) ; ReadJournal journal = ( ReadJournal ) journalMap . get ( journIndex ) ; if ( details . equals ( "true" ) ) { detailsBuffer . append ( JournalBean . openTagTable_details ) ; detailsBuffer . append ( JournalBean . openTagTrTdColspan ) ; detailsBuffer . append ( JournalBean . fullTagH4 ) ; detailsBuffer . append ( JournalBean . deatilsTable ) ; detailsBuffer . append ( JournalBean . detailsTagFirst ) ; detailsBuffer . append ( "Number : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getNumber ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagTwo ) ; detailsBuffer . append ( "Type : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getType ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagOne ) ; detailsBuffer . append ( "System : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getSystem ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagTwo ) ; detailsBuffer . append ( "Function : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getFunction ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagOne ) ; detailsBuffer . append ( "Message Id : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getMessageId ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagTwo ) ; detailsBuffer . append ( "Returncode : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getReturncode ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagOne ) ; detailsBuffer . append ( "Request Timestamp : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getRequestTimestamp ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagTwo ) ; detailsBuffer . append ( "Request Message : " ) ; detailsBuffer . append ( JournalBean . closeTagP ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; if ( journal . getRequestMessage ( ) ! = null ) { detailsBuffer . append ( " < PRE > " ) ; detailsBuffer . append ( replaceChar ( journal . getRequestMessage ( ) ) ) ; detailsBuffer . append ( " < / PRE > " ) ; } else { detailsBuffer . append ( "null" ) ; } detailsBuffer . append ( JournalBean . detailsTagOne ) ; detailsBuffer . append ( "Response Timestamp : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getResponseTimestamp ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagTwo ) ; detailsBuffer . append ( "Response Message : " ) ; detailsBuffer . append ( JournalBean . closeTagP ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; if ( journal . getResponseMessage ( ) ! = null ) { detailsBuffer . append ( " < PRE > " ) ; detailsBuffer . append ( replaceChar ( journal . getResponseMessage ( ) ) ) ; detailsBuffer . append ( " < / PRE > " ) ; } else { detailsBuffer . append ( "null" ) ; } detailsBuffer . append ( JournalBean . detailsTagOne ) ; detailsBuffer . append ( "Errorcode : " ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; detailsBuffer . append ( journal . getErrorcode ( ) ) ; detailsBuffer . append ( JournalBean . detailsTagTwo ) ; detailsBuffer . append ( "Errormessage : " ) ; detailsBuffer . append ( JournalBean . closeTagP ) ; detailsBuffer . append ( JournalBean . detailsTd ) ; if ( journal . getErrormessage ( ) ! = null ) { detailsBuffer . append ( replaceChar ( journal . getErrormessage ( ) ) ) ; } else { detailsBuffer . append ( "null" ) ; } detailsBuffer . append ( JournalBean . closeTagTdTr ) ; detailsBuffer . append ( JournalBean . fullTagTrTdColspanColor ) ; detailsBuffer . append ( JournalBean . fullTagTrTdColspan ) ; detailsBuffer . append ( JournalBean . fullTagA_javasriptBack ) ; detailsBuffer . append ( JournalBean . closeTagTdTrTable ) ; } else if ( "request" . equals ( message ) ) { detailsBuffer . append ( JournalBean . openTagTable_message ) ; detailsBuffer . append ( "Request Message" ) ; detailsBuffer . append ( JournalBean . deatilsTable ) ; detailsBuffer . append ( JournalBean . detailsTableMessage ) ; if ( journal . getRequestMessage ( ) ! = null ) { detailsBuffer . append ( " < PRE > " ) ; detailsBuffer . append ( replaceChar ( journal . getRequestMessage ( ) ) ) ; detailsBuffer . append ( " < / PRE > " ) ; } else { detailsBuffer . append ( "null" ) ; } detailsBuffer . append ( JournalBean . closeTagTdTr ) ; detailsBuffer . append ( JournalBean . fullTagTrTdColspan ) ; detailsBuffer . append ( JournalBean . fullTagA_javascriptClose ) ; detailsBuffer . append ( JournalBean . closeTagTdTrTable ) ; } else if ( "response" . equals ( message ) ) { detailsBuffer . append ( JournalBean . openTagTable_message ) ; detailsBuffer . append ( "Response Message" ) ; detailsBuffer . append ( JournalBean . deatilsTable ) ; detailsBuffer . append ( JournalBean . detailsTableMessage ) ; if ( journal . getResponseMessage ( ) ! = null ) { detailsBuffer . append ( " < PRE > " ) ; detailsBuffer . append ( replaceChar ( journal . getResponseMessage ( ) ) ) ; detailsBuffer . append ( " < / PRE > " ) ; } else { detailsBuffer . append ( "null" ) ; } detailsBuffer . append ( JournalBean . closeTagTdTr ) ; detailsBuffer . append ( JournalBean . fullTagTrTdColspan ) ; detailsBuffer . append ( JournalBean . fullTagA_javascriptClose ) ; detailsBuffer . append ( JournalBean . closeTagTdTrTable ) ; } else if ( "error" . equals ( message ) ) { detailsBuffer . append ( JournalBean . openTagTable_message ) ; detailsBuffer . append ( "Errormessage" ) ; detailsBuffer . append ( JournalBean . deatilsTable ) ; detailsBuffer . append ( JournalBean . detailsTableMessage ) ; if ( journal . getErrormessage ( ) ! = null ) { detailsBuffer . append ( replaceChar ( journal . getErrormessage ( ) ) ) ; } else { detailsBuffer . append ( "null" ) ; } detailsBuffer . append ( JournalBean . closeTagTdTr ) ; detailsBuffer . append ( JournalBean . fullTagTrTdColspan ) ; detailsBuffer . append ( JournalBean . fullTagA_javascriptClose ) ; detailsBuffer . append ( JournalBean . closeTagTdTrTable ) ; } return detailsBuffer . toString ( ) ; }
void test3 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setOrderBy ( " * rde" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test4 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSelectionMap ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test5 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSelectionMap ( "leer" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test6 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSorting ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test7 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSorting ( "error" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test8 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test9 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setType ( " * rde" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test10 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setType ( " - - - - - - - - - - - - - - - - - - - - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test11 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSystem ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test12 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSystem ( "004" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test13 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setSystem ( " - - - - - - - - - - - - - - - - - - - - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test14 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setFunction ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test15 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setFunction ( " * rde" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test16 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setMessageId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test17 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setMessageId ( " - - - - - - - f - - - - - - - - - - - - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test18 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setRequest_message ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test19 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setRequest_message ( " < X { X d6@ [ ! w ? Mk" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test20 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setResponse_message ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test21 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setResponse_message ( "004" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test22 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setReturncode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test23 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setReturncode ( " < tr align = \"center\" bgcolor = #D1D0C7 > < td class = \"selection\" > & nbsp ; < / td > < td class = \"selection\" > No < / td > < td class = \"selection\" > Type < / td > < td class = \"selection\" > System < / td > < td class = \"selection\" > Function < / td > < td class = \"selection\" > Message Id < / td > < td class = \"selection\" > & nbsp ; < / td > < td class = \"selection\" > Request Timestamp < / td > < td class = \"selection\" > & nbsp ; < / td > < td class = \"selection\" > Response Timestamp < / td > < td class = \"selection\" > Returncode < / td > < td class = \"selection\" > & nbsp ; < / td > < / tr > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test24 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setReturncode ( " - - - - - - - - - - - - - - - - - - - - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test25 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setRequestTimeMin ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test26 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setRequestTimeMin ( " < tr bgcolor = white > < td class = \"journal\" > < a class = \"section\" href = \"MessagePage . jsp ? message = leer & details = true & index = - 8\" title = \"go to the details\" target = \"haupt\" > - - > < / a > < td class = \"journal\" > 0 < / td > < td class = \"function\" > \u0000 < / td > < td class = \"journal\" > null < / td > < td class = \"function\" > & nbsp ; < / td > < td class = \"journal\" > < a class = \"call\" href = \"MessageIdPage . jsp ? messageId = null\" title = \"select to message_id\" target = \"haupt\" > null < / a > < / td > < td > < a class = \"section\" name = \"memo\" href = \"#memo\" title = \"request_memo\" onClick = \"openMessage ( 'request' , 'false' , ' - 8' ) \" > < image src = \" / xbus / admin / images / memo . gif\" border = 0 align = left > < / a > < / td > < td class = \"journal\" > null < / td > < td > < a class = \"section\" name = \"memo\" href = \"#memo\" title = \"response_memo\" onClick = \"openMessage ( 'response' , 'false' , ' - 8' ) \" > < image src = \" / xbus / admin / images / memo . gif\" border = 0 align = left > < / a > < / td > < td class = \"journal\" > null < / td > < td class = \"journal\" > null < / td > < td > < a class = \"section\" name = \"memo\" href = \"#memo\" title = \"error_memo\" onClick = \"openMessage ( 'error' , 'false' , ' - 8' ) \" > < image src = \" / xbus / admin / images / memo . gif\" border = 0 align = left > < / a > < / td > < / tr > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test27 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setRequestTimeMax ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test28 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; journalBean0 . setRequestTimeMax ( " * rde" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollumnsAsTableRows ( ) { StringBuffer columnNameBuffer = new StringBuffer ( ) ; columnNameBuffer . append ( JournalBean . openTagTr_selection ) ; columnNameBuffer . append ( JournalBean . collumnBgCollor ) ; columnNameBuffer . append ( JournalBean . closeTag ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "No" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Type" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "System" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Function" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Message Id" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Request Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Response Timestamp" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( "Returncode" ) ; columnNameBuffer . append ( JournalBean . closeTagTd ) ; columnNameBuffer . append ( JournalBean . openTagTd_selection ) ; columnNameBuffer . append ( JournalBean . backspace ) ; columnNameBuffer . append ( JournalBean . closeTagTdTr ) ; return columnNameBuffer . toString ( ) ; }
void test29 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test30 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setFunction ( " < null > " ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test31 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setRequestMessage ( " | 5 < : 2Yt ? $" ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test32 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setRequestMessage ( " < null > " ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test33 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setResponseMessage ( " | 5 < : 2Yt ? $" ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test34 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setResponseMessage ( " < null > " ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test35 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setErrormessage ( " | 5 < : 2Yt ? $" ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test36 ( ) throws Throwable { JournalBean journalBean0 = new JournalBean ( ) ; ReadJournal readJournal0 = new ReadJournal ( ) ; readJournal0 . setErrormessage ( " < null > " ) ; String string0 = journalBean0 . getJournalAsTableRows ( readJournal0 , ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJournalAsTableRows ( ReadJournal journal , int index ) { StringBuffer journalBuffer = new StringBuffer ( ) ; / / link to the details journalBuffer . append ( JournalBean . openTagTr_bgcolor ) ; journalBuffer . append ( checkColor ( collor ) ) ; journalBuffer . append ( JournalBean . closeTag ) ; journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messagePage ) ; journalBuffer . append ( JournalBean . paramDetails ) ; journalBuffer . append ( index ) ; journalBuffer . append ( JournalBean . closeTagA_details ) ; / / number journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( new Integer ( journal . getNumber ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / type journalBuffer . append ( JournalBean . openTagTd_function ) ; journalBuffer . append ( new Character ( journal . getType ( ) ) . toString ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / system journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getSystem ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / function journalBuffer . append ( JournalBean . openTagTd_function ) ; if ( journal . getFunction ( ) = = null ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( journal . getFunction ( ) ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / message_id journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( JournalBean . openTagA_messageIdPage ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA_messageId ) ; journalBuffer . append ( journal . getMessageId ( ) ) ; journalBuffer . append ( JournalBean . closeTagA ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / request message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getRequestMessage ( ) = = null | | journal . getRequestMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoRequest ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / request timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getRequestTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / response message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getResponseMessage ( ) = = null | | journal . getResponseMessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoResponse ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTd ) ; / / response timestamp journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getResponseTimestamp ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / return code journalBuffer . append ( JournalBean . openTagTd_journal ) ; journalBuffer . append ( journal . getReturncode ( ) ) ; journalBuffer . append ( JournalBean . closeTagTd ) ; / / error message journalBuffer . append ( JournalBean . openTagTd ) ; if ( journal . getErrormessage ( ) = = null | | journal . getErrormessage ( ) . equals ( " < null > " ) ) { journalBuffer . append ( JournalBean . backspace ) ; } else { journalBuffer . append ( JournalBean . openTagA_memo ) ; journalBuffer . append ( JournalBean . closeTagA_memoError ) ; journalBuffer . append ( index ) ; journalBuffer . append ( closeTagA_memo ) ; journalBuffer . append ( JournalBean . openTagImage ) ; } journalBuffer . append ( JournalBean . closeTagTdTr ) ; return journalBuffer . toString ( ) ; }
void test0 ( ) throws Throwable { DeletedMessageStoreBean deletedMessageStoreBean0 = new DeletedMessageStoreBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test8 ( ) throws Throwable { AdministratorJMXConnector administratorJMXConnector0 = new AdministratorJMXConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; administrator0 . readEtc ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test4 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . explainErrorcode ( "Running Background Receivers : \n - \n\nStopped Background Receivers : \n - \n\nKilled Background Receivers : \n - \n\nWatchdog is NOT running ! ! ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test6 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . demandStopBackgroundReceiver ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test7 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . getReceiverServiceStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test8 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; administrator0 . readLog ( "" , 464 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test9 ( ) throws Throwable { Administrator administrator0 = new Administrator ( ) ; String string0 = administrator0 . getJVMStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJVMStatus ( ) { StringBuffer retBuffer = new StringBuffer ( ) ; retBuffer . append ( "Resources : " ) ; Runtime runtime = Runtime . getRuntime ( ) ; runtime . gc ( ) ; retBuffer . append ( "\n\nMaximum memory available : " + NumberFormat . getInstance ( ) . format ( runtime . maxMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nMemory currently used : " + NumberFormat . getInstance ( ) . format ( runtime . totalMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nFree memory currently available : " + NumberFormat . getInstance ( ) . format ( runtime . freeMemory ( ) ) + " bytes" ) ; retBuffer . append ( "\nAvailable processors : " + runtime . availableProcessors ( ) ) ; retBuffer . append ( "\n\nEnvironment : \n" ) ; TreeSet envKeys = new TreeSet ( System . getProperties ( ) . keySet ( ) ) ; String key = null ; for ( Iterator it = envKeys . iterator ( ) ; it . hasNext ( ) ; ) { key = ( String ) it . next ( ) ; retBuffer . append ( "\n" + key + " = " + System . getProperty ( key ) ) ; } return retBuffer . toString ( ) ; }
void test0 ( ) throws Throwable { ApplicationFactory applicationFactory0 = new ApplicationFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PreProcessor preProcessor0 = new PreProcessor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Adapter adapter0 = new Adapter ( ) ; adapter0 . getErrormessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test1 ( ) throws Throwable { Adapter adapter0 = new Adapter ( ) ; String string0 = adapter0 . getReturncode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test2 ( ) throws Throwable { Adapter adapter0 = new Adapter ( ) ; adapter0 . getResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test3 ( ) throws Throwable { ReceiverService receiverService0 = ReceiverService . getInstance ( ) ; receiverService0 . stopAllSystems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWatchdogRunning ( ) { return ( ( mWatchdogThread ! = null ) & & ( mWatchdogThread . isAlive ( ) ) ) ; }
void test4 ( ) throws Throwable { ReceiverService receiverService0 = new ReceiverService ( ) ; boolean boolean0 = receiverService0 . isWatchdogRunning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWatchdogRunning ( ) { return ( ( mWatchdogThread ! = null ) & & ( mWatchdogThread . isAlive ( ) ) ) ; }
void test0 ( ) throws Throwable { ReceiverServiceAdministrator receiverServiceAdministrator0 = new ReceiverServiceAdministrator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { ReceiverFactory receiverFactory0 = new ReceiverFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ReceiverThreadManager receiverThreadManager0 = ReceiverThreadManager . getInstance ( ) ; Set < Object > set0 = receiverThreadManager0 . getRunningSystems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set getRunningSystems ( ) throws XException { Set retSet = getRunningReceiverThreads ( ) ; retSet . addAll ( getRunningHTTPReceivers ( ) ) ; return retSet ; }
void test1 ( ) throws Throwable { ReceiverThreadManager receiverThreadManager0 = ReceiverThreadManager . getInstance ( ) ; Set < Object > set0 = receiverThreadManager0 . getAllSystems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test3 ( ) throws Throwable { ReceiverThreadManager receiverThreadManager0 = ReceiverThreadManager . getInstance ( ) ; Set < Object > set0 = receiverThreadManager0 . getStoppedSystems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test1 ( ) throws Throwable { SenderFactory senderFactory0 = new SenderFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { POP3Receiver pOP3Receiver0 = new POP3Receiver ( ) ; String string0 = pOP3Receiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { POP3XMLReceiver pOP3XMLReceiver0 = new POP3XMLReceiver ( ) ; String string0 = pOP3XMLReceiver0 . getReturncode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test3 ( ) throws Throwable { POP3XMLReceiver pOP3XMLReceiver0 = new POP3XMLReceiver ( ) ; String string0 = pOP3XMLReceiver0 . getOnError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOnError ( ) { return mOnError ; }
void test4 ( ) throws Throwable { POP3XMLReceiver pOP3XMLReceiver0 = new POP3XMLReceiver ( ) ; String string0 = pOP3XMLReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test6 ( ) throws Throwable { POP3XMLReceiver pOP3XMLReceiver0 = new POP3XMLReceiver ( ) ; pOP3XMLReceiver0 . deleteMail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReturncode ( ) { return mReturncode ; }
void test0 ( ) throws Throwable { SMTPSender sMTPSender0 = new SMTPSender ( ( XBUSSystem ) null ) ; String string0 = sMTPSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { Email email0 = new Email ( "" ) ; InternetAddress internetAddress0 = email0 . getFromAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InternetAddress getFromAddress ( ) { return mFromAddress ; }
void test1 ( ) throws Throwable { Email email0 = new Email ( " [ ENV ] No LogFactory attribute found for" ) ; List < Object > list0 = email0 . getBCCAddresses ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getBCCAddresses ( ) { return mBCCAddresses ; }
void test2 ( ) throws Throwable { Email email0 = new Email ( ( String ) null ) ; String string0 = email0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return mContent ; }
void test3 ( ) throws Throwable { Email email0 = new Email ( "" ) ; email0 . setContent ( "" ) ; boolean boolean0 = email0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test4 ( ) throws Throwable { Email email0 = new Email ( "" ) ; String string0 = email0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubject ( ) { return mSubject ; }
void test5 ( ) throws Throwable { Email email0 = new Email ( " [ ENV ] No LogFactory attribute found for" ) ; Date date0 = new Date ( ) ; email0 . setSentDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test6 ( ) throws Throwable { Email email0 = new Email ( " [ ENV ] No LogFactory attribute found for" ) ; email0 . setContentType ( " [ ENV ] No LogFactory attribute found for" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test7 ( ) throws Throwable { Email email0 = new Email ( " [ ENV ] No LogFactory attribute found for" ) ; List < Object > list0 = email0 . getCCAddresses ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getCCAddresses ( ) { return mCCAddresses ; }
void test8 ( ) throws Throwable { Email email0 = new Email ( " [ ENV ] No LogFactory attribute found for" ) ; String string0 = email0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) { return mContentType ; }
void test9 ( ) throws Throwable { Email email0 = new Email ( ( String ) null ) ; InternetAddress internetAddress0 = new InternetAddress ( ) ; email0 . setFromAddress ( internetAddress0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test10 ( ) throws Throwable { Email email0 = new Email ( "" ) ; email0 . setSubject ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getCompleteName ( ) ; }
void test11 ( ) throws Throwable { Email email0 = new Email ( "" ) ; email0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( Object request ) { if ( request = = null ) { return true ; } if ( ( request instanceof String ) & & ( ( ( String ) request ) . length ( ) = = 0 ) ) { return true ; } if ( ( request instanceof ByteArrayList ) & & ( ( ( ByteArrayList ) request ) . length ( ) = = 0 ) ) { return true ; } return false ; }
void test12 ( ) throws Throwable { Email email0 = new Email ( "a@e" ) ; List < Object > list0 = email0 . getToAddresses ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getToAddresses ( ) { return mToAddresses ; }
void test13 ( ) throws Throwable { Email email0 = new Email ( ( String ) null ) ; Date date0 = email0 . getSentDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getSentDate ( ) { return mSentDate ; }
void test15 ( ) throws Throwable { Email email0 = new Email ( "" ) ; email0 . setToAddress ( ( InternetAddress ) null ) ; email0 . setToAddress ( ( InternetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) { return mContentType ; }
void test16 ( ) throws Throwable { Email email0 = new Email ( "" ) ; email0 . setCCAddress ( ( InternetAddress ) null ) ; email0 . setCCAddress ( ( InternetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return mContent ; }
void test17 ( ) throws Throwable { Email email0 = new Email ( ( String ) null ) ; InternetAddress internetAddress0 = new InternetAddress ( ) ; email0 . setBCCAddress ( internetAddress0 ) ; email0 . setBCCAddress ( internetAddress0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) { return mContentType ; }
void test0 ( ) throws Throwable { POP3XMLReceiverThread pOP3XMLReceiverThread0 = new POP3XMLReceiverThread ( ( XBUSSystem ) null ) ; String string0 = pOP3XMLReceiverThread0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test5 ( ) throws Throwable { POP3XMLReceiverThread pOP3XMLReceiverThread0 = new POP3XMLReceiverThread ( ( XBUSSystem ) null ) ; String string0 = pOP3XMLReceiverThread0 . getReceiverClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverClassName ( ) ; / * * * Returns the address of a received message , used for example in the * tracing . The content of the address depends on the type of receiver . * FileReceivers will return filenames , the POP3Receiver will return an * email address . * * @return the address of a received message * / String getAddress ( ) ; / * * * Handles all actions to be taken , when a message cannot be processed , e . g . * rollback of transactional resources and notifying an administrator . * * @param taManager the transactional manager * @param message the content of the message that cannot be processed . * / void handleError ( TAManager taManager , Object message , String errorMessage ) { taManager . rollback ( ) ; taManager . close ( ) ; incrementErrorCounter ( ) ; NotifyError . notifyError ( this , getSource ( ) , errorMessage , message , null ) ; Trace . error ( "Error while processing " + getSource ( ) . getCompleteName ( ) ) ; Trace . error ( "Retry after " + getErrorTimeout ( ) / 1000 + " seconds" ) ; Trace . error ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; try { Thread . sleep ( getErrorTimeout ( ) ) ; } catch ( InterruptedException e1 ) { / / do nothing } }
void test1 ( ) throws Throwable { MQReceiverThread mQReceiverThread0 = new MQReceiverThread ( ( XBUSSystem ) null ) ; String string0 = mQReceiverThread0 . getAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddress ( ) ; / * * * Handles all actions to be taken , when a message cannot be processed , e . g . * rollback of transactional resources and notifying an administrator . * * @param taManager the transactional manager * @param message the content of the message that cannot be processed . * / void handleError ( TAManager taManager , Object message , String errorMessage ) { taManager . rollback ( ) ; taManager . close ( ) ; incrementErrorCounter ( ) ; NotifyError . notifyError ( this , getSource ( ) , errorMessage , message , null ) ; Trace . error ( "Error while processing " + getSource ( ) . getCompleteName ( ) ) ; Trace . error ( "Retry after " + getErrorTimeout ( ) / 1000 + " seconds" ) ; Trace . error ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; try { Thread . sleep ( getErrorTimeout ( ) ) ; } catch ( InterruptedException e1 ) { / / do nothing } }
void test2 ( ) throws Throwable { MQReceiverThread mQReceiverThread0 = new MQReceiverThread ( ( XBUSSystem ) null ) ; String string0 = mQReceiverThread0 . getReceiverClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverClassName ( ) ; / * * * Returns the address of a received message , used for example in the * tracing . The content of the address depends on the type of receiver . * FileReceivers will return filenames , the POP3Receiver will return an * email address . * * @return the address of a received message * / String getAddress ( ) ; / * * * Handles all actions to be taken , when a message cannot be processed , e . g . * rollback of transactional resources and notifying an administrator . * * @param taManager the transactional manager * @param message the content of the message that cannot be processed . * / void handleError ( TAManager taManager , Object message , String errorMessage ) { taManager . rollback ( ) ; taManager . close ( ) ; incrementErrorCounter ( ) ; NotifyError . notifyError ( this , getSource ( ) , errorMessage , message , null ) ; Trace . error ( "Error while processing " + getSource ( ) . getCompleteName ( ) ) ; Trace . error ( "Retry after " + getErrorTimeout ( ) / 1000 + " seconds" ) ; Trace . error ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; try { Thread . sleep ( getErrorTimeout ( ) ) ; } catch ( InterruptedException e1 ) { / / do nothing } }
void test4 ( ) throws Throwable { MQReceiverThread mQReceiverThread0 = new MQReceiverThread ( ( XBUSSystem ) null ) ; String string0 = mQReceiverThread0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test3 ( ) throws Throwable { EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory ( ) ; int int0 = easySSLProtocolSocketFactory0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return EasySSLProtocolSocketFactory . class . hashCode ( ) ; }
void test7 ( ) throws Throwable { EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory ( ) ; boolean boolean0 = easySSLProtocolSocketFactory0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return ( ( obj ! = null ) & & obj . getClass ( ) . equals ( EasySSLProtocolSocketFactory . class ) ) ; }
void test8 ( ) throws Throwable { EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory ( ) ; boolean boolean0 = easySSLProtocolSocketFactory0 . equals ( ( Object ) "http . socket . receivebuffer" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return ( ( obj ! = null ) & & obj . getClass ( ) . equals ( EasySSLProtocolSocketFactory . class ) ) ; }
void test9 ( ) throws Throwable { EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory ( ) ; boolean boolean0 = easySSLProtocolSocketFactory0 . equals ( ( Object ) easySSLProtocolSocketFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return ( ( obj ! = null ) & & obj . getClass ( ) . equals ( EasySSLProtocolSocketFactory . class ) ) ; }
void test0 ( ) throws Throwable { HTTPParameterSender hTTPParameterSender0 = new HTTPParameterSender ( ( XBUSSystem ) null ) ; String string0 = hTTPParameterSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { HTTPByteArrayListSender hTTPByteArrayListSender0 = new HTTPByteArrayListSender ( ( XBUSSystem ) null ) ; String string0 = hTTPByteArrayListSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { HTTPStreamSender hTTPStreamSender0 = new HTTPStreamSender ( ( XBUSSystem ) null ) ; String string0 = hTTPStreamSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test1 ( ) throws Throwable { HTTPSender hTTPSender0 = new HTTPSender ( ( XBUSSystem ) null ) ; String string0 = hTTPSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { ProgramSender programSender0 = new ProgramSender ( ( XBUSSystem ) null ) ; String string0 = programSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { PingSender pingSender0 = new PingSender ( ( XBUSSystem ) null ) ; String string0 = ( String ) pingSender0 . execute ( "Bxf~y@V | " , "sk ; Orpu2gn { $SV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object execute ( String function , Object callData ) throws XException ; }
void test1 ( ) throws Throwable { PingSender pingSender0 = new PingSender ( ( XBUSSystem ) null ) ; String string0 = pingSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { FileLineReaderReceiver fileLineReaderReceiver0 = new FileLineReaderReceiver ( ) ; String string0 = fileLineReaderReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { FileStreamReceiver fileStreamReceiver0 = new FileStreamReceiver ( ) ; long long0 = fileStreamReceiver0 . getFileLength ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFileLength ( String filename ) { File file = new File ( filename ) ; return file . length ( ) ; }
void test2 ( ) throws Throwable { FileStreamReceiver fileStreamReceiver0 = new FileStreamReceiver ( ) ; fileStreamReceiver0 . deleteFile ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test3 ( ) throws Throwable { FileStreamReceiver fileStreamReceiver0 = new FileStreamReceiver ( ) ; int int0 = fileStreamReceiver0 . getLastByteOfFile ( "mak ) ^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastByteOfFile ( String filename ) throws XException { int lastByte = - 1 ; try { File file = new File ( filename ) ; if ( file . length ( ) > 0 ) { FileInputStream readingFile ; readingFile = new FileInputStream ( filename ) ; readingFile . skip ( file . length ( ) - 1 ) ; lastByte = readingFile . read ( ) ; readingFile . close ( ) ; } } catch ( Exception e ) { throw new XException ( Constants . LOCATION_EXTERN , Constants . LAYER_TECHNICAL , Constants . PACKAGE_TECHNICAL_FILE , "0" , e ) ; } return lastByte ; }
void test0 ( ) throws Throwable { FileStreamReceiver fileStreamReceiver0 = new FileStreamReceiver ( ) ; String string0 = fileStreamReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { FileReceiverThread fileReceiverThread0 = new FileReceiverThread ( ( XBUSSystem ) null ) ; fileReceiverThread0 . initializeThread ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverClassName ( ) ; / * * * Returns the address of a received message , used for example in the * tracing . The content of the address depends on the type of receiver . * FileReceivers will return filenames , the POP3Receiver will return an * email address . * * @return the address of a received message * / String getAddress ( ) ; / * * * Handles all actions to be taken , when a message cannot be processed , e . g . * rollback of transactional resources and notifying an administrator . * * @param taManager the transactional manager * @param message the content of the message that cannot be processed . * / void handleError ( TAManager taManager , Object message , String errorMessage ) { taManager . rollback ( ) ; taManager . close ( ) ; incrementErrorCounter ( ) ; NotifyError . notifyError ( this , getSource ( ) , errorMessage , message , null ) ; Trace . error ( "Error while processing " + getSource ( ) . getCompleteName ( ) ) ; Trace . error ( "Retry after " + getErrorTimeout ( ) / 1000 + " seconds" ) ; Trace . error ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; try { Thread . sleep ( getErrorTimeout ( ) ) ; } catch ( InterruptedException e1 ) { / / do nothing } }
void test2 ( ) throws Throwable { FileReceiverThread fileReceiverThread0 = new FileReceiverThread ( ( XBUSSystem ) null ) ; fileReceiverThread0 . registerResources ( ( TAManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverClassName ( ) ; / * * * Returns the address of a received message , used for example in the * tracing . The content of the address depends on the type of receiver . * FileReceivers will return filenames , the POP3Receiver will return an * email address . * * @return the address of a received message * / String getAddress ( ) ; / * * * Handles all actions to be taken , when a message cannot be processed , e . g . * rollback of transactional resources and notifying an administrator . * * @param taManager the transactional manager * @param message the content of the message that cannot be processed . * / void handleError ( TAManager taManager , Object message , String errorMessage ) { taManager . rollback ( ) ; taManager . close ( ) ; incrementErrorCounter ( ) ; NotifyError . notifyError ( this , getSource ( ) , errorMessage , message , null ) ; Trace . error ( "Error while processing " + getSource ( ) . getCompleteName ( ) ) ; Trace . error ( "Retry after " + getErrorTimeout ( ) / 1000 + " seconds" ) ; Trace . error ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; try { Thread . sleep ( getErrorTimeout ( ) ) ; } catch ( InterruptedException e1 ) { / / do nothing } }
void test3 ( ) throws Throwable { FileReceiverThread fileReceiverThread0 = new FileReceiverThread ( ( XBUSSystem ) null ) ; String string0 = fileReceiverThread0 . getReceiverClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReceiverClassName ( ) ; / * * * Returns the address of a received message , used for example in the * tracing . The content of the address depends on the type of receiver . * FileReceivers will return filenames , the POP3Receiver will return an * email address . * * @return the address of a received message * / String getAddress ( ) ; / * * * Handles all actions to be taken , when a message cannot be processed , e . g . * rollback of transactional resources and notifying an administrator . * * @param taManager the transactional manager * @param message the content of the message that cannot be processed . * / void handleError ( TAManager taManager , Object message , String errorMessage ) { taManager . rollback ( ) ; taManager . close ( ) ; incrementErrorCounter ( ) ; NotifyError . notifyError ( this , getSource ( ) , errorMessage , message , null ) ; Trace . error ( "Error while processing " + getSource ( ) . getCompleteName ( ) ) ; Trace . error ( "Retry after " + getErrorTimeout ( ) / 1000 + " seconds" ) ; Trace . error ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; try { Thread . sleep ( getErrorTimeout ( ) ) ; } catch ( InterruptedException e1 ) { / / do nothing } }
void test5 ( ) throws Throwable { FileReceiverThread fileReceiverThread0 = new FileReceiverThread ( ( XBUSSystem ) null ) ; FileReceiver fileReceiver0 = fileReceiverThread0 . createReceiver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test6 ( ) throws Throwable { FileReceiverThread fileReceiverThread0 = new FileReceiverThread ( ( XBUSSystem ) null ) ; Object object0 = fileReceiverThread0 . receive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void receive ( String system ) ; }
void test0 ( ) throws Throwable { FileReceiver fileReceiver0 = new FileReceiver ( ) ; fileReceiver0 . open ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test1 ( ) throws Throwable { FileReceiver fileReceiver0 = new FileReceiver ( ) ; String string0 = fileReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test3 ( ) throws Throwable { FileReceiver fileReceiver0 = new FileReceiver ( ) ; fileReceiver0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { FileByteArrayListReceiver fileByteArrayListReceiver0 = new FileByteArrayListReceiver ( ) ; String string0 = fileByteArrayListReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { JavaReceiver javaReceiver0 = new JavaReceiver ( ) ; String string0 = javaReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { JavaSender javaSender0 = new JavaSender ( ( XBUSSystem ) null ) ; String string0 = javaSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { LDAPSender lDAPSender0 = new LDAPSender ( ( XBUSSystem ) null ) ; String string0 = lDAPSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { FTPReceiver fTPReceiver0 = new FTPReceiver ( ) ; String string0 = fTPReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test4 ( ) throws Throwable { FTPReceiver fTPReceiver0 = new FTPReceiver ( ) ; fTPReceiver0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test1 ( ) throws Throwable { String string0 = FTPConnection . getWorkingDirectory ( "@MzZR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWorkingDirectory ( String name ) { String workDir = null ; int index = 0 ; if ( ( index = name . lastIndexOf ( " / " ) ) > = 0 ) { workDir = name . substring ( 0 , index ) ; } if ( ( workDir ! = null ) & & ( ! workDir . startsWith ( " / " ) ) ) { StringBuffer newWorkDir = new StringBuffer ( workDir . length ( ) + 1 ) ; newWorkDir . append ( " / " ) . append ( workDir ) ; workDir = newWorkDir . toString ( ) ; } return workDir ; }
void test2 ( ) throws Throwable { String string0 = FTPConnection . getWorkingDirectory ( " / QB } 9p / ~ [ ^F , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWorkingDirectory ( String name ) { String workDir = null ; int index = 0 ; if ( ( index = name . lastIndexOf ( " / " ) ) > = 0 ) { workDir = name . substring ( 0 , index ) ; } if ( ( workDir ! = null ) & & ( ! workDir . startsWith ( " / " ) ) ) { StringBuffer newWorkDir = new StringBuffer ( workDir . length ( ) + 1 ) ; newWorkDir . append ( " / " ) . append ( workDir ) ; workDir = newWorkDir . toString ( ) ; } return workDir ; }
void test3 ( ) throws Throwable { String string0 = FTPConnection . getFileName ( "@MzZR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return mConfigFilename ; }
void test0 ( ) throws Throwable { AS400ProgramSender aS400ProgramSender0 = new AS400ProgramSender ( ( XBUSSystem ) null ) ; AS400ProgramSender . Field aS400ProgramSender_Field0 = aS400ProgramSender0 . new Field ( ) ; AS400ProgramSender . Field aS400ProgramSender_Field1 = ( AS400ProgramSender . Field ) aS400ProgramSender_Field0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AS400ProgramSender ( XBUSSystem destination ) { mDestination = destination ; }
void test2 ( ) throws Throwable { AS400ProgramSender aS400ProgramSender0 = new AS400ProgramSender ( ( XBUSSystem ) null ) ; String string0 = aS400ProgramSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { AS400FileReceiver aS400FileReceiver0 = new AS400FileReceiver ( ) ; String string0 = aS400FileReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test1 ( ) throws Throwable { AS400FileReceiver aS400FileReceiver0 = new AS400FileReceiver ( ) ; aS400FileReceiver0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test2 ( ) throws Throwable { AS400FileReceiver aS400FileReceiver0 = new AS400FileReceiver ( ) ; AS400 aS400_0 = new AS400 ( " } 109" , " } 109" ) ; aS400FileReceiver0 . setAS400System ( aS400_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAS400System ( AS400 aS400System ) { mAS400System = aS400System ; }
void test3 ( ) throws Throwable { AS400FileReceiver aS400FileReceiver0 = new AS400FileReceiver ( ) ; aS400FileReceiver0 . open ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { AS400ByteArrayListReceiver aS400ByteArrayListReceiver0 = new AS400ByteArrayListReceiver ( ) ; String string0 = aS400ByteArrayListReceiver0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { DatabaseSender databaseSender0 = new DatabaseSender ( ( XBUSSystem ) null ) ; String string0 = databaseSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test0 ( ) throws Throwable { SocketSender socketSender0 = new SocketSender ( ( XBUSSystem ) null ) ; String string0 = socketSender0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getType ( ) { return mType ; }
void test1 ( ) throws Throwable { ReceiverServiceBootstrap receiverServiceBootstrap0 = new ReceiverServiceBootstrap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { ReceiverServiceAdministratorBootstrap receiverServiceAdministratorBootstrap0 = new ReceiverServiceAdministratorBootstrap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { JavaReceiverBootstrap javaReceiverBootstrap0 = new JavaReceiverBootstrap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
