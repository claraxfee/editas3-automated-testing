assertEquals ( false , spreadSubsample0 . getAdjustWeights ( ) )
assertEquals ( 1 , spreadSubsample0 . getRandomSeed ( ) )
assertEquals ( false , spreadSubsample0 . getAdjustWeights ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "Produces a random subsample of a dataset . The original dataset must fit entirely in memory . This filter allows you to specify the maximum \"spread\" between the rarest and most common class . For example , you may specify that there be at most a 2 : 1 difference in class frequencies . When used in batch mode , subsequent batches are NOT resampled . " , string0 )
assertEquals ( false , spreadSubsample0 . getAdjustWeights ( ) )
assertEquals ( false , spreadSubsample0 . getAdjustWeights ( ) )
assertEquals ( false , spreadSubsample0 . getAdjustWeights ( ) )
assertEquals ( false , spreadSubsample0 . getAdjustWeights ( ) )
assertNotNull ( string0 )
assertEquals ( false , resample0 . getInvertSelection ( ) )
assertEquals ( false , resample0 . getInvertSelection ( ) )
assertEquals ( false , resample0 . getInvertSelection ( ) )
assertEquals ( 1 , resample0 . getRandomSeed ( ) )
assertEquals ( 0 . 0 , resample0 . getBiasToUniformClass ( ) , 0 . 01D )
assertEquals ( 0 . 0 , resample0 . getBiasToUniformClass ( ) , 0 . 01D )
assertEquals ( "Whether to use bias towards a uniform class . A value of 0 leaves the class distribution as - is , a value of 1 ensures the class distribution is uniform in the output data . " , string0 )
assertNotNull ( stringArray0 )
assertEquals ( "Produces a random subsample of a dataset using either sampling with replacement or without replacement . \nThe original dataset must fit entirely in memory . The number of instances in the generated dataset may be specified . The dataset must have a nominal class attribute . If not , use the unsupervised version . The filter can be made to maintain the class distribution in the subsample , or to bias the class distribution toward a uniform distribution . When used in batch mode ( i . e . in the FilteredClassifier ) , subsequent batches are NOT resampled . " , string0 )
assertEquals ( 100 . 0 , resample0 . getSampleSizePercent ( ) , 0 . 01D )
assertEquals ( 302939489 , random0 . nextInt ( ) )
assertEquals ( true , resample0 . getInvertSelection ( ) )
assertEquals ( 1 , stratifiedRemoveFolds0 . getFold ( ) )
assertNotNull ( stringArray0 )
assertEquals ( 1 , stratifiedRemoveFolds0 . getFold ( ) )
assertEquals ( false , stratifiedRemoveFolds0 . getInvertSelection ( ) )
assertEquals ( 10 , stratifiedRemoveFolds0 . getNumFolds ( ) )
assertEquals ( 0L , stratifiedRemoveFolds0 . getSeed ( ) )
assertEquals ( 1 , stratifiedRemoveFolds0 . getFold ( ) )
assertEquals ( 1 , stratifiedRemoveFolds0 . getFold ( ) )
assertEquals ( false , stratifiedRemoveFolds0 . getInvertSelection ( ) )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertEquals ( false , discretize0 . getMakeBinary ( ) )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertEquals ( - 1253 , classOrder0 . getClassOrder ( ) )
assertEquals ( 0 , classOrder0 . getClassOrder ( ) )
assertEquals ( 1L , classOrder0 . getSeed ( ) )
assertEquals ( 1L , classOrder0 . getSeed ( ) )
assertEquals ( 1L , classOrder0 . getSeed ( ) )
assertEquals ( 2029L , classOrder0 . getSeed ( ) )
assertEquals ( 0 , classOrder0 . getClassOrder ( ) )
assertEquals ( "Changes the order of the classes so that the class values are no longer of in the order specified in the header . The values will be in the order specified by the user - - it could be either in ascending / descending order by the class frequency or in random order . Note that this filter currently does not change the header , only the class values of the instances , so there is not much point in using it in conjunction with the FilteredClassifier . The value can also be converted back using 'originalValue ( double value ) ' procedure . " , string0 )
assertEquals ( 1L , classOrder0 . getSeed ( ) )
assertEquals ( 0 , classOrder0 . getClassOrder ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , nominalToBinary0 . getBinaryAttributesNominal ( ) )
assertEquals ( false , nominalToBinary0 . getBinaryAttributesNominal ( ) )
assertEquals ( false , nominalToBinary0 . getBinaryAttributesNominal ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , nominalToBinary0 . getTransformAllValues ( ) )
assertEquals ( false , nominalToBinary0 . getTransformAllValues ( ) )
assertEquals ( false , nominalToBinary0 . getBinaryAttributesNominal ( ) )
assertEquals ( false , nominalToBinary0 . getTransformAllValues ( ) )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( mathExpression0 )
assertNotNull ( string0 )
assertEquals ( "A simple instance filter that renames the relation , all attribute names and all nominal ( and string ) attribute values . For exchanging sensitive datasets . Currently doesn't like string or relational attributes . " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "" , clusterMembership0 . getIgnoredAttributeIndices ( ) )
assertEquals ( "The clusterer that will generate membership values for the instances . " , clusterMembership0 . densityBasedClustererTipText ( ) )
assertEquals ( "The clusterer that will generate membership values for the instances . " , string0 )
assertEquals ( "A filter that uses a density - based clusterer to generate cluster membership values ; filtered instances are composed of these values plus the class attribute ( if set in the input data ) . If a ( nominal ) class attribute is set , the clusterer is run separately for each class . The class attribute ( if set ) and any user - specified attributes are ignored during the clustering operation" , string0 )
assertEquals ( "The range of attributes to be ignored by the clusterer . eg : first - 3 , 5 , 9 - last" , string0 )
assertNotNull ( stringArray0 )
assertEquals ( " { 0v_HyyvXE" , clusterMembership0 . getIgnoredAttributeIndices ( ) )
assertEquals ( true , clusterMembership0 . isNewBatch ( ) )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertEquals ( false , discretize0 . getUseEqualFrequency ( ) )
assertEquals ( false , discretize0 . getFindNumBins ( ) )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertEquals ( false , discretize0 . getMakeBinary ( ) )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( discretize0 )
assertNotNull ( stringArray0 )
assertEquals ( "last" , changeDateFormat0 . getAttributeIndex ( ) )
assertEquals ( "last" , changeDateFormat0 . getAttributeIndex ( ) )
assertEquals ( "last" , changeDateFormat0 . getAttributeIndex ( ) )
assertEquals ( "last" , changeDateFormat0 . getAttributeIndex ( ) )
assertEquals ( "last" , changeDateFormat0 . getAttributeIndex ( ) )
assertEquals ( "last" , changeDateFormat0 . getAttributeIndex ( ) )
assertNotNull ( string0 )
assertEquals ( "last" , mergeTwoValues0 . getAttributeIndex ( ) )
assertEquals ( "last" , mergeTwoValues0 . getAttributeIndex ( ) )
assertEquals ( "first" , mergeTwoValues0 . getFirstValueIndex ( ) )
assertEquals ( "first" , mergeTwoValues0 . getFirstValueIndex ( ) )
assertEquals ( "Merges two values of a nominal attribute into one value . " , string0 )
assertNotNull ( stringArray0 )
assertNotNull ( stringArray0 )
assertEquals ( "8034" , firstOrder0 . getRevision ( ) )
assertEquals ( "8034" , string0 )
assertEquals ( "1 , 1 , 1 , 1" , firstOrder0 . getAttributeIndices ( ) )
assertEquals ( "This instance filter takes a range of N numeric attributes and replaces them with N - 1 numeric attributes , the values of which are the difference between consecutive attribute values from the original instance . eg : \n\nOriginal attribute values\n\n 0 . 1 , 0 . 2 , 0 . 3 , 0 . 1 , 0 . 3\n\nNew attribute values\n\n 0 . 1 , 0 . 1 , - 0 . 2 , 0 . 2\n\nThe range of attributes used is taken in numeric order . That is , a range spec of 7 - 11 , 3 - 5 will use the attribute ordering 3 , 4 , 5 , 7 , 8 , 9 , 10 , 11 for the differences , NOT 7 , 8 , 9 , 10 , 11 , 3 , 4 , 5 . " , string0 )
assertEquals ( "Specify range of attributes to act on . This is a comma separated list of attribute indices , with \"first\" and \"last\" valid values . Specify an inclusive range with \" - \" . E . g : \"first - 3 , 5 , 6 - 10 , last\" . " , string0 )
assertNotNull ( enumeration0 )
assertEquals ( "8034" , string0 )
assertEquals ( "Whether to sort the labels alphabetically . " , string0 )
assertEquals ( "last" , addValues0 . getAttributeIndex ( ) )
assertEquals ( false , addValues0 . getSort ( ) )
assertEquals ( false , addValues0 . getSort ( ) )
assertEquals ( false , addValues0 . getSort ( ) )
assertNotNull ( stringArray0 )
assertNotNull ( stringArray0 )
assertEquals ( false , addValues0 . getSort ( ) )
assertEquals ( "'Expected end of range string' , ' found : '" , addValues0 . getLabels ( ) )
assertEquals ( "'M [ ( , yU' , r~" , addValues0 . getLabels ( ) )
assertEquals ( "'4 [ < U0j8Pq | Q } '" , addValues0 . getLabels ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "The range of values to merge . " , string0 )
assertEquals ( "merged" , mergeManyValues0 . getLabel ( ) )
assertEquals ( "The new label for the merged values . " , string0 )
assertEquals ( "merged" , mergeManyValues0 . getLabel ( ) )
assertEquals ( "1 , 2" , mergeManyValues0 . getMergeValueRange ( ) )
assertEquals ( "merged" , mergeManyValues0 . getLabel ( ) )
assertEquals ( "last" , addNoise0 . getAttributeIndex ( ) )
assertEquals ( "An instance filter that changes a percentage of a given attributes values . The attribute must be nominal . Missing value can be treated as value itself . " , string0 )
assertEquals ( false , addNoise0 . getUseMissing ( ) )
assertEquals ( false , addNoise0 . getUseMissing ( ) )
assertEquals ( 1 , addNoise0 . getRandomSeed ( ) )
assertEquals ( 1 , addNoise0 . getRandomSeed ( ) )
assertEquals ( 10 , addNoise0 . getPercent ( ) )
assertEquals ( "Flag to set if missing values are used . " , string0 )
assertNotNull ( stringArray0 )
assertEquals ( 1 . 0E - 6 , numericCleaner0 . getCloseToTolerance ( ) , 0 . 01D )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( "first - last" , numericCleaner0 . getAttributeIndices ( ) )
assertEquals ( ( - 1 . 7976931348623157E308 ) , numericCleaner0 . getMinThreshold ( ) , 0 . 01D )
assertEquals ( ( - 1 . 7976931348623157E308 ) , numericCleaner0 . getMinDefault ( ) , 0 . 01D )
assertEquals ( 1 . 0E - 6 , numericCleaner0 . getCloseToTolerance ( ) , 0 . 01D )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseToDefault ( ) , 0 . 01D )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( "The value below which values are considered close to . " , string0 )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseToDefault ( ) , 0 . 01D )
assertEquals ( false , numericCleaner0 . getIncludeClass ( ) )
assertEquals ( 1 . 7976931348623157E308 , numericCleaner0 . getMaxDefault ( ) , 0 . 01D )
assertEquals ( - 1 , numericCleaner0 . getDecimals ( ) )
assertEquals ( false , numericCleaner0 . getIncludeClass ( ) )
assertEquals ( false , numericCleaner0 . getIncludeClass ( ) )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseToDefault ( ) , 0 . 01D )
assertEquals ( - 1 , numericCleaner0 . getDecimals ( ) )
assertEquals ( ( - 1 . 7976931348623157E308 ) , numericCleaner0 . getMinThreshold ( ) , 0 . 01D )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( false , numericCleaner0 . getIncludeClass ( ) )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseToDefault ( ) , 0 . 01D )
assertEquals ( - 1 , numericCleaner0 . getDecimals ( ) )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( false , numericCleaner0 . getIncludeClass ( ) )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseToDefault ( ) , 0 . 01D )
assertEquals ( true , numericCleaner0 . getInvertSelection ( ) )
assertEquals ( false , numericCleaner0 . getIncludeClass ( ) )
assertNotNull ( stringArray0 )
assertEquals ( 0 . 0 , numericCleaner0 . getCloseTo ( ) , 0 . 01D )
assertEquals ( "first - last" , interquartileRange0 . getAttributeIndices ( ) )
assertEquals ( "1 , 1 , 1 , 1 , 1 , 1 , 1" , interquartileRange0 . getAttributeIndices ( ) )
assertEquals ( false , interquartileRange0 . getOutputOffsetMultiplier ( ) )
assertEquals ( false , interquartileRange0 . getOutputOffsetMultiplier ( ) )
assertEquals ( 6 . 0 , interquartileRange0 . getExtremeValuesFactor ( ) , 0 . 01D )
assertEquals ( false , interquartileRange0 . getExtremeValuesAsOutliers ( ) )
assertEquals ( 6 . 0 , interquartileRange0 . getExtremeValuesFactor ( ) , 0 . 01D )
assertEquals ( false , interquartileRange0 . getOutputOffsetMultiplier ( ) )
assertEquals ( "first - last" , interquartileRange0 . getAttributeIndices ( ) )
assertEquals ( "first - last" , interquartileRange0 . getAttributeIndices ( ) )
assertEquals ( "first - last" , interquartileRange0 . getAttributeIndices ( ) )
assertEquals ( "first - last" , interquartileRange0 . getAttributeIndices ( ) )
assertEquals ( false , interquartileRange0 . getExtremeValuesAsOutliers ( ) )
assertEquals ( false , interquartileRange0 . getDetectionPerAttribute ( ) )
assertEquals ( false , interquartileRange0 . getDetectionPerAttribute ( ) )
assertEquals ( 3 . 0 , interquartileRange0 . getOutlierFactor ( ) , 0 . 01D )
assertEquals ( true , interquartileRange0 . getDetectionPerAttribute ( ) )
assertEquals ( false , interquartileRange0 . getDetectionPerAttribute ( ) )
assertEquals ( 6 . 0 , interquartileRange0 . getExtremeValuesFactor ( ) , 0 . 01D )
assertEquals ( 6 . 0 , interquartileRange0 . getExtremeValuesFactor ( ) , 0 . 01D )
assertEquals ( false , interquartileRange0 . getDetectionPerAttribute ( ) )
assertEquals ( 6 . 0 , interquartileRange0 . getExtremeValuesFactor ( ) , 0 . 01D )
assertEquals ( false , interquartileRange0 . getDetectionPerAttribute ( ) )
assertEquals ( "" , addCluster0 . getIgnoredAttributeIndices ( ) )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertNotNull ( addCluster0 )
assertEquals ( false , addCluster0 . isFirstBatchDone ( ) )
assertEquals ( "a`gZ0Zp & e\"FoHAi / a`gZ0Zp & e\"FoHAi" , file0 . getPath ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "1" , makeIndicator0 . getValueIndices ( ) )
assertEquals ( "A filter that creates a new dataset with a boolean attribute replacing a nominal attribute . In the new dataset , a value of 1 is assigned to an instance that exhibits a particular range of attribute values , a 0 to an instance that doesn't . The boolean attribute is coded as numeric by default . " , string0 )
assertEquals ( "last" , makeIndicator0 . getValueIndices ( ) )
assertEquals ( "last" , makeIndicator0 . getAttributeIndex ( ) )
assertEquals ( "1 , 1 , 1" , makeIndicator0 . getValueIndices ( ) )
assertEquals ( true , makeIndicator0 . getNumeric ( ) )
assertEquals ( "last" , makeIndicator0 . getValueIndices ( ) )
assertEquals ( true , makeIndicator0 . getNumeric ( ) )
assertEquals ( "Converts all numeric attributes into binary attributes ( apart from the class attribute , if set ) : if the value of the numeric attribute is exactly zero , the value of the new attribute will be zero . If the value of the numeric attribute is missing , the value of the new attribute will be missing . Otherwise , the value of the new attribute will be one . The new attributes will be nominal . " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "Capabilities : [ Nominal attributes , Binary attributes , Unary attributes , Empty nominal attributes , Numeric attributes , Date attributes , String attributes , Relational attributes , Missing values , No class , Nominal class , Binary class , Unary class , Empty nominal class , Numeric class , Date class , String class , Relational class , Missing class values ] \nDependencies : [ ] \nmin # Instance : 0\n" , capabilities0 . toString ( ) )
assertEquals ( "last" , classAssigner0 . getClassIndex ( ) )
assertEquals ( "The index of the class attribute , starts with 1 , 'first' and 'last' are accepted as well , '0' unsets the class index . " , string0 )
assertNotNull ( string0 )
assertEquals ( "Filter that can set and unset the class index . " , string0 )
assertEquals ( "last" , classAssigner0 . getClassIndex ( ) )
assertNotNull ( stringArray0 )
assertNotNull ( stringArray0 )
assertEquals ( "last" , classAssigner0 . getClassIndex ( ) )
assertEquals ( "last" , classAssigner0 . getClassIndex ( ) )
assertNotNull ( instances1 )
assertNotNull ( stringArray0 )
assertNotNull ( string0 )
assertEquals ( "last" , nominalToString0 . getAttributeIndexes ( ) )
assertEquals ( "Converts a nominal attribute ( that is , a set number of values ) to string ( that is , an unspecified number of values ) . " , string0 )
assertEquals ( "last" , nominalToString0 . getAttributeIndexes ( ) )
assertEquals ( "last" , nominalToString0 . getAttributeIndexes ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "expression" , addExpression0 . getName ( ) )
assertEquals ( "a1^2" , addExpression0 . getExpression ( ) )
assertEquals ( false , addExpression0 . getDebug ( ) )
assertEquals ( false , addExpression0 . getDebug ( ) )
assertEquals ( "a1^2" , addExpression0 . getExpression ( ) )
assertEquals ( false , addExpression0 . getDebug ( ) )
assertEquals ( false , addExpression0 . getDebug ( ) )
assertEquals ( "first - last" , numericToNominal0 . getAttributeIndices ( ) )
assertNotNull ( enumeration0 )
assertEquals ( "Set attribute selection mode . If false , only selected ( numeric ) attributes in the range will be 'nominalized' ; if true , only non - selected attributes will be 'nominalized' . " , string0 )
assertEquals ( "Capabilities : [ Nominal attributes , Binary attributes , Unary attributes , Empty nominal attributes , Numeric attributes , Date attributes , String attributes , Relational attributes , Missing values , No class , Nominal class , Binary class , Unary class , Empty nominal class , Numeric class , Date class , String class , Relational class , Missing class values ] \nDependencies : [ ] \nmin # Instance : 0\n" , capabilities0 . toString ( ) )
assertEquals ( "first - last" , numericToNominal0 . getAttributeIndices ( ) )
assertEquals ( "1" , numericToNominal0 . getAttributeIndices ( ) )
assertEquals ( "first - last" , numericToNominal0 . getAttributeIndices ( ) )
assertEquals ( "first - last" , numericToNominal0 . getAttributeIndices ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "first - last" , numericToNominal0 . getAttributeIndices ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "@relation ) P\n\n@attribute ) P { } \n\n@data\n" , instances1 . toString ( ) )
assertNotNull ( instances1 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertEquals ( "1" , kernelFilter0 . getKernelFactorExpression ( ) )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertNotNull ( kernelFilter0 )
assertEquals ( "Centers all numeric attributes in the given dataset to have zero mean ( apart from the class attribute , if set ) . " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( false , copy0 . getInvertSelection ( ) )
assertEquals ( "An instance filter that copies a range of attributes in the dataset . This is used in conjunction with other filters that overwrite attribute values during the course of their operation - - this filter allows the original attributes to be kept as well as the new attributes . " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "Sets copy selected vs unselected action . If set to false , only the specified attributes will be copied ; If set to true , non - specified attributes will be copied . " , string0 )
assertEquals ( "1 , 1 , 1 , 1 , 1 , 1" , copy0 . getAttributeIndices ( ) )
assertEquals ( "Specify range of attributes to act on . This is a comma separated list of attribute indices , with \"first\" and \"last\" valid values . Specify an inclusive range with \" - \" . E . g : \"first - 3 , 5 , 6 - 10 , last\" . " , string0 )
assertEquals ( true , copy0 . getInvertSelection ( ) )
assertEquals ( "Sets copy selected vs unselected action . If set to false , only the specified attributes will be copied ; If set to true , non - specified attributes will be copied . " , copy0 . getAttributeIndices ( ) )
assertEquals ( "1 , 1 , 1 , 1 , 1" , timeSeriesDelta0 . getAttributeIndices ( ) )
assertEquals ( "For instances at the beginning or end of the dataset where the translated values are not known , use missing values ( default is to remove those instances ) " , string0 )
assertNotNull ( stringArray0 )
assertEquals ( true , timeSeriesDelta0 . getFillWithMissing ( ) )
assertEquals ( true , timeSeriesDelta0 . getFillWithMissing ( ) )
assertEquals ( false , timeSeriesDelta0 . getInvertSelection ( ) )
assertEquals ( "Specify range of attributes to act on . This is a comma separated list of attribute indices , with \"first\" and \"last\" valid values . Specify an inclusive range with \" - \" . E . g : \"first - 3 , 5 , 6 - 10 , last\" . " , string0 )
assertEquals ( - 1 , timeSeriesDelta0 . getInstanceRange ( ) )
assertNotNull ( stringArray0 )
assertEquals ( - 1 , timeSeriesDelta0 . getInstanceRange ( ) )
assertEquals ( 1784 , timeSeriesDelta0 . getInstanceRange ( ) )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertEquals ( false , nominalToBinary0 . getTransformAllValues ( ) )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertNotNull ( nominalToBinary0 )
assertEquals ( "ID" , addID0 . getAttributeName ( ) )
assertEquals ( "Set the new attribute's name . " , string0 )
assertEquals ( "first" , addID0 . getIDIndex ( ) )
assertEquals ( "first" , addID0 . getIDIndex ( ) )
assertEquals ( "first" , addID0 . getIDIndex ( ) )
assertEquals ( "first" , addID0 . getIDIndex ( ) )
assertEquals ( "ID" , addID0 . getAttributeName ( ) )
assertEquals ( "first" , addID0 . getIDIndex ( ) )
assertEquals ( "ID" , addID0 . getAttributeName ( ) )
assertEquals ( 0 . 0 , normalize0 . getTranslation ( ) , 0 . 01D )
assertEquals ( 0 . 0 , normalize0 . getTranslation ( ) , 0 . 01D )
assertEquals ( "The factor for scaling the output range ( default : 1 ) . " , string0 )
assertNotNull ( stringArray0 )
assertEquals ( 0 . 0 , normalize0 . getTranslation ( ) , 0 . 01D )
assertEquals ( 0 . 0 , normalize0 . getTranslation ( ) , 0 . 01D )
assertEquals ( 0 . 0 , normalize0 . getTranslation ( ) , 0 . 01D )
assertEquals ( "Normalizes all numeric values in the given dataset ( apart from the class attribute , if set ) . The resulting values are by default in [ 0 , 1 ] for the data used to compute the normalization intervals . But with the scale and translation parameters one can change that , e . g . , with scale = 2 . 0 and translation = - 1 . 0 you get values in the range [ - 1 , + 1 ] . " , string0 )
assertNotNull ( enumeration0 )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "The format of the date values ( see ISO - 8601 ) . " , string0 )
assertEquals ( "last" , add0 . getAttributeIndex ( ) )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "The list of value labels ( nominal attribute creation only ) . The list must be comma - separated , eg : \"red , green , blue\" . If this is empty , the created attribute will be numeric . " , string0 )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "unnamed" , add0 . getAttributeName ( ) )
assertEquals ( "" , string0 )
assertEquals ( "A filter that adds new attributes with user specified type and constant value . Numeric , nominal , string and date attributes can be created . Attribute name , and value can be set with environment variables . Date attributes can also specify a formatting string by which to parse the supplied date value . Alternatively , a current time stamp can be specified by supplying the special string \"now\" as the value for a date attribute . " , addUserFields0 . globalInfo ( ) )
assertEquals ( "Name : Type : Value : null" , addUserFields_AttributeSpec0 . toString ( ) )
assertEquals ( "" , string0 )
assertNull ( string0 )
assertNull ( addUserFields_AttributeSpec0 . getResolvedValue ( ) )
assertNotNull ( addUserFields_AttributeSpec0 )
assertEquals ( "@@" , addUserFields_AttributeSpec0 . toStringInternal ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "" , string0 )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( "Specifications of the new attributes to create" , string0 )
assertEquals ( "A filter that adds new attributes with user specified type and constant value . Numeric , nominal , string and date attributes can be created . Attribute name , and value can be set with environment variables . Date attributes can also specify a formatting string by which to parse the supplied date value . Alternatively , a current time stamp can be specified by supplying the special string \"now\" as the value for a date attribute . " , string0 )
assertNull ( string0 )
assertNull ( date0 )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertNull ( string0 )
assertNotNull ( addUserFields_AttributeSpec0 )
assertNotNull ( string0 )
assertNotNull ( stringArray0 )
assertEquals ( "8034" , string0 )
assertEquals ( "Specify range of attributes to act on . This is a comma separated list of attribute indices , with \"first\" and \"last\" valid values . Specify an inclusive range with \" - \" . E . g : \"first - 3 , 5 , 6 - 10 , last\" . " , string0 )
assertEquals ( "abs" , numericTransform0 . getMethodName ( ) )
assertEquals ( "Name of the method used for the transformation . " , string0 )
assertEquals ( false , numericTransform0 . getInvertSelection ( ) )
assertEquals ( "abs" , numericTransform0 . getMethodName ( ) )
assertNotNull ( stringArray0 )
assertNotNull ( stringArray0 )
assertEquals ( "abs" , numericTransform0 . getMethodName ( ) )
assertEquals ( "java . lang . Math" , numericTransform0 . getClassName ( ) )
assertNotNull ( stringArray0 )
assertEquals ( Double . NaN , pairedStats0 . sigLevel , 0 . 01D )
assertEquals ( 0 , int0 )
assertNotNull ( string0 )
assertEquals ( ( - 22 . 0 ) , pairedStats0 . count , 0 . 01D )
assertEquals ( 24 . 0 , pairedStats0 . count , 0 . 01D )
assertEquals ( 1 . 0 , pairedStats0 . differencesProbability , 0 . 01D )
assertEquals ( Double . POSITIVE_INFINITY , pairedStats0 . xySum , 0 . 01D )
assertEquals ( 2 . 0 , pairedStats0 . count , 0 . 01D )
assertEquals ( 2026 , pairedStats0 . getDegreesOfFreedom ( ) )
assertEquals ( ( - 1 . 0 ) , pairedStats0 . count , 0 . 01D )
assertNotNull ( outputZipper0 )
assertEquals ( "8034" , outputZipper0 . getRevision ( ) )
assertNotNull ( pairedTTester_Dataset0 )
assertEquals ( "8034" , string0 )
assertEquals ( false , pairedTTester0 . getShowStdDevs ( ) )
assertEquals ( false , pairedCorrectedTTester0 . getShowStdDevs ( ) )
assertEquals ( false , pairedTTester0 . getShowStdDevs ( ) )
assertEquals ( - 1 , pairedTTester0 . getRunColumn ( ) )
assertEquals ( false , pairedTTester0 . getShowStdDevs ( ) )
assertNotNull ( pairedTTester_Resultset0 )
assertNotNull ( string0 )
assertEquals ( 1956 , pairedTTester0 . getFoldColumn ( ) )
assertEquals ( - 1 , pairedCorrectedTTester0 . getRunColumn ( ) )
assertEquals ( 0 . 05 , pairedTTester0 . getSignificanceLevel ( ) , 0 . 01D )
assertEquals ( "No instances have been set" , pairedTTester0 . resultsetKey ( ) )
assertEquals ( 1 , pairedTTester0 . getNumResultsets ( ) )
assertNotNull ( stringArray0 )
assertNotNull ( stringArray0 )
assertNotNull ( stringArray0 )
assertEquals ( "No instances have been set" , pairedTTester0 . resultsetKey ( ) )
assertEquals ( 0 . 05 , pairedCorrectedTTester0 . getSignificanceLevel ( ) , 0 . 01D )
assertNotNull ( stringArray0 )
assertEquals ( - 1 , pairedTTester0 . getSortColumn ( ) )
assertEquals ( false , pairedTTester0 . getShowStdDevs ( ) )
assertEquals ( false , pairedTTester0 . getShowStdDevs ( ) )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( remoteExperiment0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertEquals ( "RegressionSplitEvaluator : weka . classifiers . rules . ZeroR ( version 48055541465867954 ) " , regressionSplitEvaluator0 . toString ( ) )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( regressionSplitEvaluator0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( instancesResultListener0 )
assertNotNull ( string0 )
assertEquals ( "R ; " , string0 )
assertEquals ( "Available properties" , string0 )
assertEquals ( "Performs test using corrected resampled t - test statistic ( Nadeau and Bengio ) " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "@article { Nadeau2001 , \n author = { Claude Nadeau and Yoshua Bengio } , \n journal = { Machine Learning } , \n title = { Inference for the Generalization Error } , \n year = { 2001 } , \n PDF = { http : / / www . iro . umontreal . ca / \\~lisa / bib / pub_subject / comparative / pointeurs / nadeau_MLJ1597 . pdf } \n } " , technicalInformation0 . toBibTex ( ) )
assertEquals ( "Paired T - Tester ( corrected ) " , string0 )
assertEquals ( true , remoteExperimentEvent0 . m_experimentFinished )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertEquals ( 2 . 01307020236E7 , ( double ) double0 , 0 . 01D )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertEquals ( false , explicitTestsetResultProducer0 . getRawOutput ( ) )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertEquals ( false , explicitTestsetResultProducer0 . getRawOutput ( ) )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertEquals ( false , explicitTestsetResultProducer0 . getRandomizeData ( ) )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( explicitTestsetResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertEquals ( false , randomSplitResultProducer0 . getRawOutput ( ) )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertEquals ( true , randomSplitResultProducer0 . getRandomizeData ( ) )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertNotNull ( randomSplitResultProducer0 )
assertEquals ( "SELECT * from ? " , instanceQuery0 . getQuery ( ) )
assertEquals ( "SELECT * from ? " , instanceQuery0 . getQuery ( ) )
assertEquals ( "The SQL query to execute against the database . " , string0 )
assertEquals ( "SELECT * from ? " , instanceQuery0 . getQuery ( ) )
assertEquals ( "\f\"J`" , instanceQuery0 . getQuery ( ) )
assertEquals ( "Encode data as sparse instances . " , string0 )
assertEquals ( "SELECT * from ? " , instanceQuery0 . getQuery ( ) )
assertEquals ( false , instanceQuery0 . getSparseData ( ) )
assertEquals ( "SELECT * from ? " , instanceQuery0 . getQuery ( ) )
assertEquals ( false , instanceQuery0 . getSparseData ( ) )
assertEquals ( "SELECT * from ? " , instanceQuery0 . getQuery ( ) )
assertEquals ( "Set the minmum number of instances in a dataset . Setting zero here will actually use < stepSize > number of instances at the first step ( since it makes no sense to use zero instances : - ) ) " , string0 )
assertEquals ( - 1 , learningRateResultProducer0 . getUpperSize ( ) )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "8034" , string0 )
assertEquals ( - 1 , learningRateResultProducer0 . getUpperSize ( ) )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertEquals ( "Set the resultProducer for which learning rate results should be generated . " , string0 )
assertEquals ( - 1 , learningRateResultProducer0 . getUpperSize ( ) )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertEquals ( 10 , learningRateResultProducer0 . getStepSize ( ) )
assertEquals ( - 2026 , learningRateResultProducer0 . getUpperSize ( ) )
assertEquals ( - 1 , learningRateResultProducer0 . getUpperSize ( ) )
assertEquals ( - 1 , learningRateResultProducer0 . getUpperSize ( ) )
assertNotNull ( averagingResultProducer0 )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertNotNull ( enumeration0 )
assertEquals ( 0 , learningRateResultProducer0 . getLowerSize ( ) )
assertNotNull ( enumeration0 )
assertEquals ( "LearningRateResultProducer : - W weka . experiment . AveragingResultProducer - - - X 10 - W weka . experiment . CrossValidationResultProducer - - - X 10 - W weka . experiment . ClassifierSplitEvaluator - - : < null Instances > " , learningRateResultProducer0 . toString ( ) )
assertEquals ( "8034" , string0 )
assertEquals ( 1 . 0 , pairedStatsCorrected0 . differencesProbability , 0 . 01D )
assertEquals ( ( - 1 ) , pairedStatsCorrected0 . differencesSignificance )
assertEquals ( 1 . 0 , pairedStatsCorrected0 . correlation , 0 . 01D )
assertEquals ( Double . NaN , pairedStatsCorrected0 . correlation , 0 . 01D )
assertEquals ( Double . NaN , pairedStatsCorrected0 . correlation , 0 . 01D )
assertNotNull ( remoteExperimentSubTask0 )
assertNotNull ( remoteExperimentSubTask0 )
assertNull ( experiment0 )
assertEquals ( "8034" , remoteExperimentSubTask0 . getRevision ( ) )
assertNotNull ( resultMatrixLatex0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixGnuPlot0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixHTML0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixHTML0 )
assertNotNull ( resultMatrixCSV0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixGnuPlot0 )
assertNotNull ( resultMatrixLatex0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixLatex0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixHTML0 )
assertNotNull ( resultMatrixLatex0 )
assertNotNull ( resultMatrixGnuPlot0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixGnuPlot0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixPlainText0 )
assertNotNull ( resultMatrixGnuPlot0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixSignificance0 )
assertNotNull ( resultMatrixSignificance0 )
assertEquals ( true , lookAndFeel0 . setLookAndFeel ( ) )
assertEquals ( "javax . swing . plaf . metal . MetalLookAndFeel" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( stringArray0 )
assertEquals ( 0 , int0 )
assertEquals ( 0 , propertySheetPanel0 . editableProperties ( ) )
assertEquals ( 0 , propertySheetPanel0 . editableProperties ( ) )
assertEquals ( 12 , propertySheetPanel0 . editableProperties ( ) )
assertEquals ( 1 , propertySheetPanel0 . countComponents ( ) )
assertEquals ( 1 , propertySheetPanel0 . getComponentCount ( ) )
assertEquals ( 0 , propertySheetPanel0 . editableProperties ( ) )
assertEquals ( 0 , propertySheetPanel0 . editableProperties ( ) )
assertNotNull ( logPanel0 )
assertNotNull ( logPanel0 )
assertNotNull ( logPanel0 )
assertEquals ( "04 : 19 : 37 : " , logPanel0 . getTimestamp ( ) )
assertNotNull ( logPanel0 )
assertNotNull ( logPanel0 )
assertNotNull ( logPanel0 )
assertNull ( frame0 )
assertNull ( jInternalFrame0 )
assertNull ( dialog0 )
assertNotNull ( instancesSummaryPanel0 )
assertNotNull ( instancesSummaryPanel0 )
assertEquals ( false , instancesSummaryPanel0 . getShowZeroInstancesAsUnknown ( ) )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( "null" , propertyText0 . getText ( ) )
assertEquals ( false , propertyText0 . isDoubleBuffered ( ) )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( hierarchyPropertyParser0 )
assertNotNull ( propertyPanel0 )
assertEquals ( false , propertyEditorSupport0 . supportsCustomEditor ( ) )
assertEquals ( true , propertyPanel0 . isOpaque ( ) )
assertNotNull ( propertyPanel0 )
assertNotNull ( propertyPanel0 )
assertNotNull ( propertyPanel0 )
assertNotNull ( propertyPanel0 )
assertNotNull ( propertyPanel0 )
assertEquals ( true , memoryUsagePanel0 . isMonitoring ( ) )
assertEquals ( false , memoryUsagePanel0 . isMonitoring ( ) )
assertEquals ( ( - 1 . 0 ) , point0 . getX ( ) , 0 . 01D )
assertNotNull ( memoryUsagePanel0 )
assertNotNull ( memoryUsagePanel0 )
assertNotNull ( jListHelper0 )
assertEquals ( 5 , jList0 . getMaxSelectionIndex ( ) )
assertEquals ( false , jList0 . isDoubleBuffered ( ) )
assertEquals ( true , jList0 . getAutoscrolls ( ) )
assertEquals ( false , jList0 . isSelectionEmpty ( ) )
assertEquals ( - 1 , jList0 . getFixedCellHeight ( ) )
assertEquals ( 2 , jList0 . getLeadSelectionIndex ( ) )
assertEquals ( - 1 , jList0 . getFixedCellWidth ( ) )
assertEquals ( false , jList0 . getScrollableTracksViewportHeight ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( "weka / gui / GenericObjectEditor . props" , genericPropertiesCreator0 . getOutputFilename ( ) )
assertEquals ( 41 , properties0 . size ( ) )
assertEquals ( "weka / gui / GenericObjectEditor . props" , genericPropertiesCreator0 . getOutputFilename ( ) )
assertEquals ( "weka / gui / GenericObjectEditor . props" , genericPropertiesCreator0 . getOutputFilename ( ) )
assertEquals ( 0 , properties0 . size ( ) )
assertEquals ( true , boolean0 )
assertEquals ( false , genericPropertiesCreator0 . getExplicitPropsFile ( ) )
assertEquals ( "weka / gui / GenericObjectEditor . props" , genericPropertiesCreator0 . getOutputFilename ( ) )
assertEquals ( "weka / gui / GenericObjectEditor . props" , genericPropertiesCreator0 . getOutputFilename ( ) )
assertEquals ( true , genericPropertiesCreator0 . getExplicitPropsFile ( ) )
assertTrue ( boolean1 = = boolean0 )
assertEquals ( "weka . classifiers . bayes . net . search . SearchAlgorithm" , genericPropertiesCreator0 . getInputFilename ( ) )
assertEquals ( - 1 , inputStreamReader0 . read ( ) )
assertNull ( inputStream0 )
assertNull ( uRL0 )
assertNull ( inputStreamReader0 )
assertEquals ( "weka . gui . filters . AddUserFieldsCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , addUserFieldsCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . filters . AddUserFieldsCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , addUserFieldsCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . filters . AddUserFieldsCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , addUserFieldsCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . filters . AddUserFieldsCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , addUserFieldsCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . filters . AddUserFieldsCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , addUserFieldsCustomizer0 . toString ( ) )
assertEquals ( Component . BaselineResizeBehavior . CONSTANT_ASCENT , hostListPanel0 . getBaselineResizeBehavior ( ) )
assertEquals ( Component . BaselineResizeBehavior . CONSTANT_ASCENT , hostListPanel0 . getBaselineResizeBehavior ( ) )
assertNotNull ( hostListPanel0 )
assertNotNull ( runNumberPanel0 )
assertNotNull ( runNumberPanel0 )
assertEquals ( 2 , resultMatrixPlainText0 . getMeanPrec ( ) )
assertEquals ( "Key_Scheme , Key_Scheme_options , Key_Scheme_version_ID" , string0 )
assertEquals ( 66 . 0 , double0 , 0 . 01D )
assertEquals ( "ARFF file" , string0 )
assertEquals ( "Cross - validation" , string0 )
assertEquals ( "percent_correct" , string0 )
assertEquals ( true , experimenterDefaults0 . getDatasetsFirst ( ) )
assertEquals ( true , properties0 . isEmpty ( ) )
assertEquals ( "Paired T - Tester ( corrected ) " , string0 )
assertEquals ( 10 , int0 )
assertEquals ( " . exp" , string0 )
assertEquals ( 10 , int0 )
assertEquals ( 0 . 05 , double0 , 0 . 01D )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( "Key_Dataset" , string0 )
assertNotNull ( file0 )
assertNotNull ( runPanel0 )
assertEquals ( false , runPanel0 . isLightweight ( ) )
assertNotNull ( runPanel0 )
assertNotNull ( runPanel0 )
assertNotNull ( runPanel0 )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertNotNull ( enumeration0 )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertEquals ( true , classifierErrorsPlotInstances0 . getSaveForVisualization ( ) )
assertSame ( capabilities1 , capabilities0 )
assertNull ( clusterer0 )
assertNull ( clusterEvaluation0 )
assertEquals ( "null ( null ) " , plotData2D0 . getPlotName ( ) )
assertEquals ( "null ( null ) " , plotData2D0 . getPlotNameHTML ( ) )
assertNull ( explorer0 )
assertEquals ( "Visualize" , string0 )
assertEquals ( "Explore the data" , string0 )
assertEquals ( "weka . gui . explorer . VisualizePanel [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , visualizePanel0 . toString ( ) )
assertEquals ( - 1 , classifierErrorsPlotInstances0 . getClassIndex ( ) )
assertEquals ( 0 , explorerDefaults0 . getASTestMode ( ) )
assertNotNull ( string0 )
assertEquals ( 1 , int0 )
assertEquals ( 66 , int0 )
assertEquals ( true , boolean0 )
assertNull ( object0 )
assertNotNull ( stringArray0 )
assertEquals ( 1 , int0 )
assertNull ( object0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( 1 , int0 )
assertNotNull ( clustererAssignmentsPlotInstances0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( 0 , properties0 . size ( ) )
assertEquals ( false , boolean0 )
assertEquals ( 3 , int0 )
assertNotNull ( string0 )
assertEquals ( 10 , int0 )
assertEquals ( 10 , int0 )
assertEquals ( 0 , int0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( false , zeroR0 . getDebug ( ) )
assertEquals ( 1 . 0E - 6 , eM0 . getMinStdDev ( ) , 0 . 01D )
assertEquals ( "Minimum metric score . Consider only rules with scores higher than this value . " , apriori0 . minMetricTipText ( ) )
assertEquals ( true , cfsSubsetEval0 . getLocallyPredictive ( ) )
assertEquals ( "8034" , bestFirst0 . getRevision ( ) )
assertEquals ( false , attributePanelEvent0 . m_yChange )
assertEquals ( 4610 , byteArrayOutputStream0 . size ( ) )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 0 41\n%%CreationDate : Tue Jul 02 05 : 13 : 53 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 1213 0\n%%CreationDate : Tue Jul 02 05 : 13 : 54 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertEquals ( 663 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 662 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 663 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 669 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 0 41\n%%CreationDate : Tue Jul 02 05 : 14 : 01 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 1750 - 2\n%%CreationDate : Tue Jul 02 05 : 14 : 08 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n - 1750 - 2 1846 1347 true Oval\n" , byteArrayOutputStream0 . toString ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 1093 - 1072\n%%CreationDate : Tue Jul 02 05 : 14 : 10 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 669 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 665 , byteArrayOutputStream0 . size ( ) )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 1093 - 1072\n%%CreationDate : Tue Jul 02 05 : 14 : 24 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertEquals ( 1354 , byteArrayOutputStream0 . size ( ) )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 1 - 1\n%%CreationDate : Tue Jul 02 05 : 14 : 27 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertEquals ( 669 , byteArrayOutputStream0 . size ( ) )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 0 41\n%%CreationDate : Tue Jul 02 05 : 14 : 36 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 0 41\n%%CreationDate : Tue Jul 02 05 : 14 : 37 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 686 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 666 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 12 - 12\n%%CreationDate : Tue Jul 02 05 : 14 : 48 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , byteArrayOutputStream0 . toString ( ) )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 665 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 666 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 669 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 666 , byteArrayOutputStream0 . size ( ) )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertNotNull ( postscriptGraphics0 )
assertEquals ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 12 - 12\n%%CreationDate : Tue Jul 02 05 : 15 : 15 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n / ( Helvetica . plain ) findfont\n12 scalefont setfont\n" , byteArrayOutputStream0 . toString ( ) )
assertNotNull ( postscriptGraphics0 )
assertEquals ( 662 , byteArrayOutputStream0 . size ( ) )
assertEquals ( 809 , int0 )
assertEquals ( 809 , visualizePanelEvent0 . getAttribute2 ( ) )
assertEquals ( 809 , int0 )
assertEquals ( 809 , visualizePanelEvent0 . getAttribute2 ( ) )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertNotNull ( plot2D0 )
assertEquals ( - 8356762 , color1 . getRGB ( ) )
assertNull ( color0 )
assertEquals ( "java . awt . Color [ r = 255 , g = 255 , b = 0 ] " , color2 . toString ( ) )
assertEquals ( false , bMPWriter0 . getScalingEnabled ( ) )
assertEquals ( false , bMPWriter0 . getScalingEnabled ( ) )
assertEquals ( false , bMPWriter0 . getScalingEnabled ( ) )
assertEquals ( " . bmp" , string0 )
assertEquals ( 1 . 0F , jPEGWriter0 . getQuality ( ) , 0 . 01F )
assertEquals ( 1 . 0F , jPEGWriter0 . getQuality ( ) , 0 . 01F )
assertEquals ( false , jPEGWriter0 . getScalingEnabled ( ) )
assertEquals ( 1809 . 5177F , jPEGWriter0 . getQuality ( ) , 0 . 01F )
assertNotNull ( legendPanel0 )
assertNotNull ( legendPanel0 )
assertNotNull ( legendPanel0 )
assertNotNull ( matrixPanel0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertNotNull ( plotData2D0 )
assertEquals ( ( - 1 ) , plotData2D0 . m_alwaysDisplayPointsOfThisSize )
assertEquals ( false , plotData2D0 . m_displayAllPoints )
assertEquals ( true , jCheckBoxMenuItem0 . isOptimizedDrawingEnabled ( ) )
assertEquals ( false , classPanel0 . isPreferredSizeSet ( ) )
assertEquals ( false , classPanel0 . isPreferredSizeSet ( ) )
assertEquals ( false , classPanel0 . requestDefaultFocus ( ) )
assertEquals ( 0 , classPanel0 . getComponentCount ( ) )
assertEquals ( true , attributePanel0 . isOpaque ( ) )
assertNull ( attributePanel0 . getName ( ) )
assertEquals ( false , attributePanel0 . isManagingFocus ( ) )
assertEquals ( "ScrollPaneUI" , attributePanel0 . getUIClassID ( ) )
assertEquals ( 30 , attributePanel0 . getHorizontalScrollBarPolicy ( ) )
assertEquals ( " . png" , string0 )
assertEquals ( false , pNGWriter0 . getScalingEnabled ( ) )
assertEquals ( "PNG - Image" , string0 )
assertEquals ( false , pNGWriter0 . getScalingEnabled ( ) )
assertNotNull ( visualizeUtils0 )
assertEquals ( 255 , color1 . getRed ( ) )
assertEquals ( "java . awt . Color [ r = 0 , g = 0 , b = 0 ] " , color1 . toString ( ) )
assertEquals ( 0 , color1 . getGreen ( ) )
assertEquals ( 0 , color1 . getGreen ( ) )
assertEquals ( 0 , color1 . getRed ( ) )
assertEquals ( 64 , color1 . getRed ( ) )
assertEquals ( - 8355712 , color1 . getRGB ( ) )
assertEquals ( "java . awt . Color [ r = 0 , g = 255 , b = 0 ] " , color1 . toString ( ) )
assertEquals ( - 4144960 , color1 . getRGB ( ) )
assertEquals ( "java . awt . Color [ r = 255 , g = 200 , b = 0 ] " , color1 . toString ( ) )
assertEquals ( 175 , color1 . getBlue ( ) )
assertEquals ( 0 , color1 . getRed ( ) )
assertEquals ( - 256 , color1 . getRGB ( ) )
assertEquals ( " . eps" , string0 )
assertEquals ( "Postscript - File" , postscriptWriter0 . getDescription ( ) )
assertEquals ( "Postscript - File" , postscriptWriter0 . getDescription ( ) )
assertEquals ( "Postscript - File" , string0 )
assertEquals ( - 1 , jPEGWriter0 . getCustomWidth ( ) )
assertEquals ( - 1 , postscriptWriter0 . getCustomWidth ( ) )
assertEquals ( 1 , postscriptWriter0 . getCustomWidth ( ) )
assertEquals ( true , postscriptWriter0 . getScalingEnabled ( ) )
assertEquals ( true , postscriptWriter0 . getScalingEnabled ( ) )
assertEquals ( true , postscriptWriter0 . getScalingEnabled ( ) )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertEquals ( true , syntaxDocument0 . getCaseSensitive ( ) )
assertNotNull ( syntaxDocument0 )
assertEquals ( true , syntaxDocument0 . getCaseSensitive ( ) )
assertNotNull ( syntaxDocument0 )
assertEquals ( true , syntaxDocument0 . getAddMatchingEndBlocks ( ) )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertEquals ( true , syntaxDocument0 . getMultiLineComment ( ) )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertEquals ( " * / " , syntaxDocument0 . getMultiLineCommentEnd ( ) )
assertNotNull ( syntaxDocument0 )
assertEquals ( true , syntaxDocument0 . getMultiLineComment ( ) )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertNotNull ( syntaxDocument0 )
assertEquals ( "Thread [ Thread - 9130 , 5 , Test Execution ] " , groovyScript_GroovyThread0 . toString ( ) )
assertEquals ( false , groovyScript0 . save ( ) )
assertEquals ( false , groovyScript0 . save ( ) )
assertNotNull ( extensionFileFilterArray0 )
assertEquals ( false , groovyScript_GroovyThread0 . interrupted ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , file0 . canRead ( ) )
assertNotNull ( scriptUtils0 )
assertEquals ( false , boolean0 )
assertNull ( string0 )
assertEquals ( " . py" , jythonScript0 . getDefaultExtension ( ) )
assertEquals ( false , boolean0 )
assertEquals ( "Thread [ Thread - 20410 , 5 , Test Execution ] " , jythonScript_JythonThread0 . toString ( ) )
assertEquals ( " . py" , jythonScript0 . getDefaultExtension ( ) )
assertEquals ( "" , jythonScript0 . getContent ( ) )
assertEquals ( " . py" , jythonScript0 . getDefaultExtension ( ) )
assertEquals ( 18 , defaultStyledDocument0 . getLength ( ) )
assertNotNull ( groovyScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( jythonScript0 )
assertEquals ( " { name = line . separator , resolver = AttributeSet , } \n { resolver = AttributeSet , } \n { name = tt [ f & _aIz@ , resolver = AttributeSet , } \n { resolver = AttributeSet , } \n { name = | t / f6N , } \n { name = tt [ f & _aIz@ , resolver = AttributeSet , } \n { name = . groovy , resolver = AttributeSet , } \n { name = Neithe66'run' nor 'main' method found ! . py . groovy , resolver = AttributeSet , } \n { name = | < NcM ; # + / = * $ , resolver = AttributeSet , } \n { name = line . separator , } \n { foreground = sun . swing . PrintColorUIResource [ r = 51 , g = 51 , b = 51 ] , family = Dialog , size = 12 , FONT_ATTRIBUTE_KEY = javax . swing . plaf . FontUIResource [ family = Dialog , name = Dialog , style = plain , size = 12 ] , bold = false , name = default , italic = false , } \n { name = Script execution failed , } \n { name = | < NcM ; # + / = * $ , } \n { name = . groovy , } \n { name = or . . XI$ . groovy , resolver = AttributeSet , } \n { name = Neithe66'run' nor 'main ; method found ! . pyDgroovy . groovy , } \n { name = U & , } \n { bidiLevel = 0 , } \n { name = SmallIcon , resolver = AttributeSet , } \n" , styleContext0 . toString ( ) )
assertNotNull ( groovyScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( groovyScript0 )
assertEquals ( false , jythonScript0 . isModified ( ) )
assertNotNull ( jythonScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( groovyScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( jythonScript0 )
assertNotNull ( groovyScript0 )
assertSame ( scriptExecutionEvent_Type0 , scriptExecutionEvent_Type1 )
assertEquals ( "" , jythonScript1 . toString ( ) )
assertNull ( object0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( infoPanel0 )
assertNotNull ( infoPanel0 )
assertNotNull ( infoPanel0 )
assertNotNull ( infoPanel0 )
assertNotNull ( infoPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertNotNull ( resultPanel0 )
assertEquals ( 0 , resultSetHelper0 . getMaxRows ( ) )
assertEquals ( 0 , resultSetHelper0 . getRowCount ( ) )
assertEquals ( 0 , resultSetHelper0 . getColumnCount ( ) )
assertEquals ( 0 , resultSetHelper0 . getColumnCount ( ) )
assertEquals ( - 5 , resultSetHelper0 . getMaxRows ( ) )
assertEquals ( 0 , resultSetHelper0 . getRowCount ( ) )
assertEquals ( 0 , resultSetHelper0 . getRowCount ( ) )
assertEquals ( 0 , resultSetHelper0 . getRowCount ( ) )
assertNotNull ( class0 )
assertEquals ( "java . lang . Float" , class0 . getName ( ) )
assertEquals ( "Short" , class0 . getSimpleName ( ) )
assertEquals ( "java . lang . Long" , class0 . getCanonicalName ( ) )
assertEquals ( "java . lang . String" , class0 . getName ( ) )
assertEquals ( "String" , class0 . getSimpleName ( ) )
assertEquals ( "class java . lang . String" , class0 . toString ( ) )
assertEquals ( "java . lang . String" , class0 . getName ( ) )
assertEquals ( "java . lang . String" , class0 . getCanonicalName ( ) )
assertEquals ( "java . lang . Character" , class0 . getName ( ) )
assertEquals ( "java . lang . Double" , class0 . getCanonicalName ( ) )
assertEquals ( "java . lang . Double" , class0 . getName ( ) )
assertEquals ( "java . lang . Integer" , class0 . getCanonicalName ( ) )
assertEquals ( "class java . lang . Short" , class0 . toString ( ) )
assertEquals ( "class java . lang . Double" , class0 . toString ( ) )
assertEquals ( false , class0 . isAnnotation ( ) )
assertEquals ( false , class0 . isInterface ( ) )
assertNotNull ( class0 )
assertNotNull ( class0 )
assertEquals ( "java . sql . Timestamp" , class0 . getName ( ) )
assertEquals ( false , class0 . isAnonymousClass ( ) )
assertNull ( class0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertNotNull ( queryPanel0 )
assertEquals ( 0 , resultSetTableModel0 . getRowCount ( ) )
assertNotNull ( resultSetTableModel0 )
assertEquals ( 0 , resultSetTableModel0 . getRowCount ( ) )
assertNotNull ( resultSetTableModel0 )
assertEquals ( 1 , resultSetTableModel0 . getColumnCount ( ) )
assertEquals ( false , jTable0 . isLightweight ( ) )
assertNull ( class0 )
assertEquals ( "" , string0 )
assertNull ( object0 )
assertNotNull ( resultSetTableModel0 )
assertNotNull ( resultSetTableModel0 )
assertNotNull ( resultSetTableModel0 )
assertEquals ( "0" , infoPanelCellRenderer0 . getText ( ) )
assertEquals ( true , infoPanelCellRenderer0 . isFontSet ( ) )
assertNull ( connection0 )
assertNotNull ( string0 )
assertNotNull ( resultSetTable0 )
assertNotNull ( resultSetTable0 )
assertNotNull ( resultSetTable0 )
assertEquals ( true , resultSetTableCellRenderer1 . isFocusable ( ) )
assertEquals ( 4 , resultSetTableCellRenderer0 . getHorizontalAlignment ( ) )
assertEquals ( 0 , resultSetTableCellRenderer0 . getHorizontalAlignment ( ) )
assertEquals ( 2 , resultSetTableCellRenderer0 . getHorizontalAlignment ( ) )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( arffTableModel0 )
assertNotNull ( treeBuild0 )
assertNotNull ( treeBuild0 )
assertEquals ( 0 . 5 , node0 . getTop ( ) , 0 . 01D )
assertEquals ( 0 , int0 )
assertEquals ( 0 , treeDisplayEvent0 . getCommand ( ) )
assertEquals ( 1 , treeDisplayEvent0 . getCommand ( ) )
assertEquals ( 2 , treeDisplayEvent0 . getCommand ( ) )
assertEquals ( 3 , treeDisplayEvent0 . getCommand ( ) )
assertEquals ( 4 , treeDisplayEvent0 . getCommand ( ) )
assertEquals ( 5 , treeDisplayEvent0 . getCommand ( ) )
assertEquals ( 3 , graphNode0 . nodeType )
assertEquals ( 0 , graphNode0 . nodeType )
assertEquals ( ( - 1995 ) , graphNode1 . nodeType )
assertEquals ( ( - 1 ) , streamTokenizer0 . ttype )
assertEquals ( 1 , streamTokenizer0 . lineno ( ) )
assertEquals ( "Token [ EOF ] , line 1" , streamTokenizer0 . toString ( ) )
assertEquals ( ( - 1 ) , streamTokenizer0 . ttype )
assertEquals ( " ( 1 , - 4 , - 1 ) " , graphEdge0 . toString ( ) )
assertNull ( jPanel0 . getToolTipText ( ) )
assertNull ( jProgressBar0 )
assertNotNull ( hierarchicalBCEngine0 )
assertEquals ( "weka . gui . graphvisualizer . LayoutCompleteEvent [ source = PasswordFieldUI ] " , layoutCompleteEvent0 . toString ( ) )
assertEquals ( "weka . gui . graphvisualizer . LayoutCompleteEvent [ source = disabledSelectedIcon ] " , layoutCompleteEvent0 . toString ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( string0 )
assertEquals ( " ( - 862 , - 862 , - 862 ) " , graphEdge0 . toString ( ) )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( " ( 917 , - 548 , 819 ) " , graphEdge0 . toString ( ) )
assertEquals ( false , boolean0 )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( propertyDescriptorArray0 )
assertEquals ( "ClassAssigner" , beanDescriptor0 . getName ( ) )
assertNotNull ( knowledgeFlow0 )
assertNotNull ( noteCustomizer0 )
assertNotNull ( noteCustomizer0 )
assertNotNull ( noteCustomizer0 )
assertNotNull ( noteCustomizer0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertEquals ( false , incrementalClassifierEvaluator0 . getOutputPerClassInfoRetrievalStats ( ) )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNull ( vector0 )
assertEquals ( " [ ] " , vector0 . toString ( ) )
assertEquals ( true , vector0 . isEmpty ( ) )
assertEquals ( 0 , vector0 . size ( ) )
assertEquals ( 10 , vector0 . capacity ( ) )
assertNotSame ( integerArray1 , integerArray0 )
assertEquals ( true , jTextArea0 . getVerifyInputWhenFocusTarget ( ) )
assertNotNull ( stripChartCustomizer0 )
assertNotNull ( stripChartCustomizer0 )
assertNotNull ( stripChartCustomizer0 )
assertNotNull ( classifierPerformanceEvaluatorCustomizer0 )
assertNotNull ( classifierPerformanceEvaluatorCustomizer0 )
assertNotNull ( classifierPerformanceEvaluatorCustomizer0 )
assertNotNull ( classifierPerformanceEvaluatorCustomizer0 )
assertNotNull ( classifierPerformanceEvaluatorCustomizer0 )
assertNotNull ( classifierPerformanceEvaluatorCustomizer0 )
assertNotNull ( propertyDescriptorArray0 )
assertEquals ( false , beanDescriptor0 . isExpert ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( naiveBayesUpdateable1 )
assertEquals ( 1518 , batchClassifierEvent0 . getMaxSetNumber ( ) )
assertEquals ( 1803 , batchClassifierEvent0 . getMaxSetNumber ( ) )
assertEquals ( 1 , batchClassifierEvent0 . getRunNumber ( ) )
assertEquals ( 0 , batchClassifierEvent0 . getMaxSetNumber ( ) )
assertEquals ( 1162 , batchClassifierEvent0 . getMaxSetNumber ( ) )
assertEquals ( - 1563 , batchClassifierEvent0 . getSetNumber ( ) )
assertEquals ( 1 , batchClassifierEvent0 . getRunNumber ( ) )
assertEquals ( 9223372036854775807L , batchClassifierEvent0 . getGroupIdentifier ( ) )
assertEquals ( 0 , batchClassifierEvent0 . getRunNumber ( ) )
assertEquals ( 9223372036854775807L , batchClassifierEvent0 . getGroupIdentifier ( ) )
assertEquals ( - 1951 , batchClassifierEvent0 . getMaxSetNumber ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( "Classifier" , beanDescriptor0 . getDisplayName ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( ( - 1 . 0 ) , chartEvent0 . getMin ( ) , 0 . 01D )
assertEquals ( 0 . 0 , chartEvent0 . getMax ( ) , 0 . 01D )
assertEquals ( ( - 1 . 0 ) , chartEvent0 . getMax ( ) , 0 . 01D )
assertNull ( doubleArray0 )
assertEquals ( 0 . 0 , chartEvent0 . getMax ( ) , 0 . 01D )
assertEquals ( false , boolean0 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( true , chartEvent0 . getReset ( ) )
assertNull ( vector0 )
assertEquals ( "weka . gui . beans . ChartEvent [ source = ] " , chartEvent0 . toString ( ) )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertEquals ( true , clustererPerformanceEvaluator0 . isBackgroundSet ( ) )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( clustererPerformanceEvaluator0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( attributeSummarizer0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( trainTestSplitMaker0 )
assertNotNull ( trainTestSplitMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( trainTestSplitMaker0 )
assertNotNull ( trainTestSplitMaker0 )
assertNotNull ( trainTestSplitMaker0 )
assertNotNull ( trainTestSplitMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( "Sorter" , beanDescriptor0 . getDisplayName ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( false , beanDescriptor0 . isExpert ( ) )
assertNotNull ( propertyDescriptorArray0 )
assertNotNull ( incrementalClassifierEvaluatorCustomizer0 )
assertNotNull ( incrementalClassifierEvaluatorCustomizer0 )
assertNotNull ( incrementalClassifierEvaluatorCustomizer0 )
assertNotNull ( incrementalClassifierEvaluatorCustomizer0 )
assertNotNull ( incrementalClassifierEvaluatorCustomizer0 )
assertNotNull ( incrementalClassifierEvaluatorCustomizer0 )
assertEquals ( 0 , scatterPlotMatrix0 . countComponents ( ) )
assertEquals ( 0 , scatterPlotMatrix0 . getComponentCount ( ) )
assertEquals ( "ScatterPlotMatrix" , scatterPlotMatrix0 . getCustomName ( ) )
assertEquals ( 0 , scatterPlotMatrix0 . getComponentCount ( ) )
assertEquals ( "Visualize incoming data / training / test sets in a scatter plot matrix . " , string0 )
assertEquals ( "weka . gui . beans . ScatterPlotMatrix [ , 0 , 0 , 0x0 , invalid , layout = java . awt . FlowLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , scatterPlotMatrix0 . toString ( ) )
assertEquals ( "Scatter plot matrix" , string0 )
assertEquals ( "Scatter plot matrix" , string0 )
assertEquals ( 0 , scatterPlotMatrix0 . getComponentCount ( ) )
assertEquals ( 0 , scatterPlotMatrix0 . getComponentCount ( ) )
assertNotNull ( testSetEvent0 )
assertNotNull ( testSetEvent0 )
assertNotNull ( testSetEvent0 )
assertNotNull ( testSetEvent0 )
assertNotNull ( testSetEvent0 )
assertNotNull ( testSetEvent0 )
assertNotNull ( testSetEvent0 )
assertEquals ( true , logPanel0 . isOptimizedDrawingEnabled ( ) )
assertEquals ( true , logPanel0 . isDoubleBuffered ( ) )
assertNotNull ( logPanel0 )
assertEquals ( true , logPanel0 . isRequestFocusEnabled ( ) )
assertEquals ( false , logPanel0 . requestDefaultFocus ( ) )
assertEquals ( false , logPanel0 . isLightweight ( ) )
assertEquals ( true , logPanel0 . isOptimizedDrawingEnabled ( ) )
assertEquals ( true , logPanel0 . isEnabled ( ) )
assertEquals ( false , logPanel0 . isCursorSet ( ) )
assertEquals ( true , list0 . isEmpty ( ) )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( "" , string0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( 0 , int0 )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( false , beanDescriptor0 . isHidden ( ) )
assertNotNull ( propertyDescriptorArray0 )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( instanceStreamToBatchMaker0 )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( Component . BaselineResizeBehavior . OTHER , loader0 . getBaselineResizeBehavior ( ) )
assertNotNull ( loader0 )
assertEquals ( true , loader0 . isOpaque ( ) )
assertEquals ( false , beanContextServicesSupport0 . needsGui ( ) )
assertEquals ( true , substringLabeler0 . isFontSet ( ) )
assertNull ( beanContext0 )
assertEquals ( 0 , loader0 . getDebugGraphicsOptions ( ) )
assertEquals ( false , textViewer0 . isShowing ( ) )
assertEquals ( false , loader0 . isFocusTraversalPolicySet ( ) )
assertEquals ( false , loader0 . getInheritsPopupMenu ( ) )
assertEquals ( false , loader0 . isPaintingTile ( ) )
assertEquals ( true , loader0 . isDoubleBuffered ( ) )
assertEquals ( false , beanDescriptor0 . isHidden ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( predictionAppenderCustomizer0 )
assertNotNull ( predictionAppenderCustomizer0 )
assertNotNull ( predictionAppenderCustomizer0 )
assertNotNull ( predictionAppenderCustomizer0 )
assertNotNull ( predictionAppenderCustomizer0 )
assertNotNull ( predictionAppenderCustomizer0 )
assertEquals ( "weka . gui . beans . ImageSaverCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , imageSaverCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . ImageSaverCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , imageSaverCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . ImageSaverCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , imageSaverCustomizer0 . toString ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertEquals ( "ClassValuePicker" , classValuePicker0 . getCustomName ( ) )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( classValuePicker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( trainingSetMaker0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( costBenefitAnalysis0 )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( "SerializedModelSaver" , beanDescriptor0 . getShortDescription ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( 0 , incrementalClassifierEvent0 . getStatus ( ) )
assertNull ( instance0 )
assertEquals ( 10 , incrementalClassifierEvent0 . getStatus ( ) )
assertEquals ( 0 , incrementalClassifierEvent0 . getStatus ( ) )
assertNull ( classifier0 )
assertEquals ( - 1 , incrementalClassifierEvent0 . getStatus ( ) )
assertEquals ( 0 , int0 )
assertNull ( instances0 )
assertEquals ( "weka . gui . beans . IncrementalClassifierEvent [ source = ] " , incrementalClassifierEvent0 . toString ( ) )
assertEquals ( " { q ; eM ( @N887 } fz~R + Sq" , string0 )
assertEquals ( " { q ; eM ( @N887 } fz~R + Sq" , string0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertEquals ( "PredictionAppender" , predictionAppender0 . getCustomName ( ) )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertEquals ( "PredictionAppender" , predictionAppender0 . getCustomName ( ) )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( predictionAppender0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertEquals ( "EM" , clusterer0 . getCustomName ( ) )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertNotNull ( clusterer0 )
assertEquals ( "CrossValidationFoldMaker" , beanDescriptor0 . getName ( ) )
assertNotNull ( propertyDescriptorArray0 )
assertNotNull ( propertyDescriptorArray0 )
assertEquals ( false , beanDescriptor0 . isHidden ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( false , beanDescriptor0 . isPreferred ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( false , beanDescriptor0 . isHidden ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( 0 , substringLabelerCustomizer0 . getY ( ) )
assertEquals ( false , substringLabelerCustomizer0 . isPaintingTile ( ) )
assertEquals ( 0 , substringLabelerCustomizer0 . countComponents ( ) )
assertEquals ( false , substringLabelerCustomizer0 . requestFocusInWindow ( ) )
assertNull ( substringLabelerCustomizer0 . getName ( ) )
assertNull ( attribute0 )
assertEquals ( 0 , plotData2D1 . getCindex ( ) )
assertEquals ( true , shadowBorder0 . isBorderOpaque ( ) )
assertEquals ( 1 , insets0 . left )
assertEquals ( true , boolean0 )
assertEquals ( "java . awt . Rectangle [ x = 1307 , y = 1307 , width = - 2 , height = - 2 ] " , rectangle0 . toString ( ) )
assertEquals ( "Clusterer" , beanDescriptor0 . getShortDescription ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( vector0 )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertNotNull ( vector0 )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( false , boolean0 )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertNotNull ( vector0 )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( false , boolean0 )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertNotNull ( vector0 )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "weka . gui . beans . MetaBean [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , metaBean0 . toString ( ) )
assertEquals ( "Group" , metaBean0 . getCustomName ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( classAssigner0 )
assertNotNull ( beanInstance0 )
assertEquals ( false , beanVisual0 . isFocusTraversalPolicySet ( ) )
assertEquals ( false , jInternalFrame_JDesktopIcon0 . isValidateRoot ( ) )
assertEquals ( false , jLabel0 . isDoubleBuffered ( ) )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertEquals ( "ArffSaver" , saver0 . getCustomName ( ) )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertEquals ( "weka . gui . beans . SerializedModelSaver [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , serializedModelSaver0 . toString ( ) )
assertEquals ( false , beanDescriptor0 . isPreferred ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertEquals ( "ModelPerformanceChart" , modelPerformanceChart0 . getCustomName ( ) )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertNotNull ( modelPerformanceChart0 )
assertEquals ( "weka . gui . beans . SubstringReplacerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , substringReplacerCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SubstringReplacerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , substringReplacerCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SubstringReplacerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , substringReplacerCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SubstringReplacerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , substringReplacerCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SubstringReplacerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , substringReplacerCustomizer0 . toString ( ) )
assertEquals ( - 29 , batchClustererEvent0 . getMaxSetNumber ( ) )
assertEquals ( - 29 , batchClustererEvent0 . getMaxSetNumber ( ) )
assertEquals ( 0 , batchClustererEvent0 . getMaxSetNumber ( ) )
assertEquals ( 0 , batchClustererEvent0 . getTestOrTrain ( ) )
assertEquals ( - 1 , batchClustererEvent0 . getSetNumber ( ) )
assertNull ( knowledgeFlowApp0 )
assertEquals ( " < html > < font color = blue > Writes to a destination that is in arff ( attribute relation file format ) format < / font > < br > < br > The data can be compressed with gzip in order to save space . < br > < / html > " , saver0 . globalInfo ( ) )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( saver0 )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( "weka . gui . beans . AttributeSummarizerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , attributeSummarizerCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . AttributeSummarizerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , attributeSummarizerCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . AttributeSummarizerCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , attributeSummarizerCustomizer0 . toString ( ) )
assertNotNull ( pluginManager0 )
assertNull ( set0 )
assertEquals ( "SubstringLabeler" , beanDescriptor0 . getName ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertEquals ( 0 , instanceEvent0 . getStatus ( ) )
assertNotNull ( sparseInstance1 )
assertEquals ( 0 , instanceEvent0 . getStatus ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 255 , instanceEvent0 . getStatus ( ) )
assertEquals ( 0 , instanceEvent0 . getStatus ( ) )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( note0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( testSetMaker0 )
assertNotNull ( crossValidationFoldMakerCustomizer0 )
assertNotNull ( crossValidationFoldMakerCustomizer0 )
assertNotNull ( crossValidationFoldMakerCustomizer0 )
assertNotNull ( crossValidationFoldMakerCustomizer0 )
assertNotNull ( crossValidationFoldMakerCustomizer0 )
assertNotNull ( crossValidationFoldMakerCustomizer0 )
assertEquals ( false , boolean0 )
assertNotNull ( dataSetEvent0 )
assertEquals ( false , dataSetEvent0 . isStructureOnly ( ) )
assertSame ( associationRules1 , associationRules0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertNotNull ( associator0 )
assertEquals ( "weka . gui . beans . ModelPerformanceChartCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , modelPerformanceChartCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . ModelPerformanceChartCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , modelPerformanceChartCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . ModelPerformanceChartCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , modelPerformanceChartCustomizer0 . toString ( ) )
assertNotNull ( textViewer0 )
assertNotNull ( textViewer0 )
assertEquals ( false , textViewer0 . isFocusTraversalPolicyProvider ( ) )
assertEquals ( true , textViewer0 . isBackgroundSet ( ) )
assertNull ( beanVisual0 )
assertNotNull ( textViewer0 )
assertEquals ( false , textViewer0 . getInheritsPopupMenu ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertEquals ( true , textViewer0 . isOpaque ( ) )
assertEquals ( 0 , textViewer0 . getWidth ( ) )
assertEquals ( false , textViewer0 . isFocusCycleRoot ( ) )
assertEquals ( true , textViewer0 . isOptimizedDrawingEnabled ( ) )
assertNotNull ( textViewer0 )
assertNotNull ( textViewer0 )
assertNull ( beanContext0 )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , textViewer0 . getDebugGraphicsOptions ( ) )
assertEquals ( false , textViewer0 . getInheritsPopupMenu ( ) )
assertEquals ( 0 , textViewer0 . getComponentCount ( ) )
assertNotNull ( textViewer0 )
assertEquals ( false , textViewer0 . isManagingFocus ( ) )
assertEquals ( true , textViewer0 . isEnabled ( ) )
assertEquals ( false , textViewer0 . isFocusOwner ( ) )
assertNotNull ( textViewer0 )
assertNotNull ( textViewer0 )
assertNotNull ( textViewer0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertNotNull ( loader0 )
assertEquals ( "weka . gui . beans . SorterCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , sorterCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SorterCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , sorterCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SorterCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , sorterCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SorterCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , sorterCustomizer0 . toString ( ) )
assertEquals ( "weka . gui . beans . SorterCustomizer [ , 0 , 0 , 0x0 , invalid , layout = java . awt . BorderLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 9 , maximumSize = , minimumSize = , preferredSize = ] " , sorterCustomizer0 . toString ( ) )
assertEquals ( "ClassifierPerformanceEvaluator" , beanDescriptor0 . getDisplayName ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( propertyDescriptorArray0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( crossValidationFoldMaker0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertNotNull ( beanVisual0 )
assertEquals ( "SubstringReplacer" , beanDescriptor0 . getDisplayName ( ) )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( classAssignerCustomizer0 )
assertNotNull ( eventSetDescriptorArray0 )
assertNotNull ( classValuePickerCustomizer0 )
assertNotNull ( classValuePickerCustomizer0 )
assertNotNull ( classValuePickerCustomizer0 )
assertNotNull ( classValuePickerCustomizer0 )
assertNotNull ( classValuePickerCustomizer0 )
assertNotNull ( classValuePickerCustomizer0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( classifierPerformanceEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( incrementalClassifierEvaluator0 )
assertNotNull ( string0 )
assertEquals ( "The BallSplitter algorithm set that would be used by the TopDown BallTree constructor . " , string0 )
assertNotNull ( string0 )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertEquals ( "Implements the Moore's method to split a node of a ball tree . \n\nFor more information please see section 2 of the 1st and 3 . 2 . 3 of the 2nd : \n\nAndrew W . Moore : The Anchors Hierarchy : Using the Triangle Inequality to Survive High Dimensional Data . In : UAI '00 : Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence , San Francisco , CA , USA , 397 - 405 , 2000 . \n\nAshraf Masood Kibriya ( 2007 ) . Fast Algorithms for Nearest Neighbour Search . Hamilton , New Zealand . " , pointsClosestToFurthestChildren0 . globalInfo ( ) )
assertEquals ( "8034" , topDownConstructor0 . getRevision ( ) )
assertEquals ( "Whether to contain fully the child balls . " , topDownConstructor0 . containChildBallsTipText ( ) )
assertEquals ( 0 , topDownConstructor0 . getNumLeaves ( ) )
assertEquals ( 0 , topDownConstructor0 . getNumLeaves ( ) )
assertEquals ( ( - 2 ) , ballNode0 . m_End )
assertEquals ( ( - 549 ) , ballNode0 . m_End )
assertEquals ( "The class implementing the TopDown construction method of ball trees . It further uses one of a number of different splitting methods to split a ball while constructing the tree top down . \n\nFor more information see also : \n\nStephen M . Omohundro ( 1989 ) . Five Balltree Construction Algorithms . " , topDownConstructor0 . globalInfo ( ) )
assertEquals ( "Implements the Moore's method to split a node of a ball tree . \n\nFor more information please see section 2 of the 1st and 3 . 2 . 3 of the 2nd : \n\nAndrew W . Moore : The Anchors Hierarchy : Using the Triangle Inequality to Survive High Dimensional Data . In : UAI '00 : Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence , San Francisco , CA , USA , 397 - 405 , 2000 . \n\nAshraf Masood Kibriya ( 2007 ) . Fast Algorithms for Nearest Neighbour Search . Hamilton , New Zealand . " , pointsClosestToFurthestChildren0 . globalInfo ( ) )
assertEquals ( "8034" , string0 )
assertNotNull ( string0 )
assertEquals ( true , medianOfWidestDimension0 . getNormalizeDimWidths ( ) )
assertNotNull ( stringArray0 )
assertNotNull ( string0 )
assertEquals ( true , medianOfWidestDimension0 . getNormalizeDimWidths ( ) )
assertEquals ( "Whether to normalize the widths ( ranges ) of the dimensions ( attributes ) before selecting the widest one . " , string0 )
assertEquals ( true , medianOfWidestDimension0 . getNormalizeDimWidths ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertEquals ( 35 , int0 )
assertEquals ( 0 , int0 )
assertEquals ( true , medianOfWidestDimension0 . getNormalizeDimWidths ( ) )
assertEquals ( ( - 1 . 0 ) , ballNode0 . m_SplitVal , 0 . 01D )
assertEquals ( 0 . 0 , ballNode0 . getRadius ( ) , 0 . 01D )
assertEquals ( ( - 1 ) , ballNode0 . m_SplitAttrib )
assertEquals ( ( - 1 . 0 ) , ballNode0 . m_SplitVal , 0 . 01D )
assertEquals ( 1 , ballNode0 . m_NumInstances )
assertEquals ( true , boolean0 )
assertEquals ( true , ballNode0 . isALeaf ( ) )
assertNotNull ( denseInstance0 )
assertNotNull ( denseInstance0 )
assertEquals ( true , minkowskiDistance0 . rangesSet ( ) )
assertNotNull ( string0 )
assertNotNull ( technicalInformation0 )
assertEquals ( "The class that constructs a ball tree bottom up . " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "Class that splits a BallNode of a ball tree using Uhlmann's described method . \n\nFor information see : \n\nJeffrey K . Uhlmann ( 1991 ) . Satisfying general proximity / similarity queries with metric trees . Information Processing Letters . 40 ( 4 ) : 175 - 179 . \n\nAshraf Masood Kibriya ( 2007 ) . Fast Algorithms for Nearest Neighbour Search . Hamilton , New Zealand . " , string0 )
assertEquals ( 17 , medianDistanceFromArbitraryPoint0 . getRandomSeed ( ) )
assertEquals ( 17 , medianDistanceFromArbitraryPoint0 . getRandomSeed ( ) )
assertEquals ( 17 , medianDistanceFromArbitraryPoint0 . getRandomSeed ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( stringArray0 )
assertEquals ( 0 , int0 )
assertEquals ( 0 , int0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( 1 , middleOutConstructor0 . getSeed ( ) )
assertEquals ( true , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertNotNull ( middleOutConstructor_MyIdxList0 )
assertEquals ( Double . NEGATIVE_INFINITY , double0 , 0 . 01D )
assertEquals ( true , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( true , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( true , middleOutConstructor0 . getContainChildBalls ( ) )
assertEquals ( 1 , middleOutConstructor0 . getSeed ( ) )
assertNotNull ( string0 )
assertEquals ( true , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( "Whether the initial anchor is chosen randomly . " , string0 )
assertEquals ( "The seed value for the random number generator . " , string0 )
assertEquals ( true , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( 1 , middleOutConstructor0 . getSeed ( ) )
assertEquals ( false , vector1 . isEmpty ( ) )
assertEquals ( false , boolean0 )
assertEquals ( true , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( 1 , middleOutConstructor_MyIdxList0 . length ( ) )
assertEquals ( 1 , middleOutConstructor0 . getSeed ( ) )
assertEquals ( 2 , middleOutConstructor_MyIdxList0 . length ( ) )
assertEquals ( 1 , middleOutConstructor0 . getSeed ( ) )
assertEquals ( "0" , string0 )
assertNotNull ( middleOutConstructor_MyIdxList0 )
assertEquals ( 2 , middleOutConstructor_MyIdxList0 . size ( ) )
assertEquals ( 0 . 0010 , bottomUpConstructor0 . getMaxRelativeLeafRadius ( ) , 0 . 01D )
assertEquals ( false , middleOutConstructor0 . getContainChildBalls ( ) )
assertEquals ( false , middleOutConstructor0 . getContainChildBalls ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 0 . 0010 , topDownConstructor0 . getMaxRelativeLeafRadius ( ) , 0 . 01D )
assertEquals ( 40 , bottomUpConstructor0 . getMaxInstancesInLeaf ( ) )
assertEquals ( 0 . 0010 , double0 , 0 . 01D )
assertEquals ( false , bottomUpConstructor0 . getContainChildBalls ( ) )
assertEquals ( false , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( false , topDownConstructor0 . getContainChildBalls ( ) )
assertEquals ( 40 , bottomUpConstructor0 . getMaxInstancesInLeaf ( ) )
assertEquals ( 40 , topDownConstructor0 . getMaxInstancesInLeaf ( ) )
assertEquals ( 85 . 54915821071111 , topDownConstructor0 . getMaxRelativeLeafRadius ( ) , 0 . 01D )
assertEquals ( false , middleOutConstructor0 . isInitialAnchorRandom ( ) )
assertEquals ( "Set attribute selection mode . If false , only selected attributes in the range will be used in the distance calculation ; if true , only non - selected attributes will be used for the calculation . " , euclideanDistance0 . invertSelectionTipText ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "Class that splits a BallNode of a ball tree using Uhlmann's described method . \n\nFor information see : \n\nJeffrey K . Uhlmann ( 1991 ) . Satisfying general proximity / similarity queries with metric trees . Information Processing Letters . 40 ( 4 ) : 175 - 179 . \n\nAshraf Masood Kibriya ( 2007 ) . Fast Algorithms for Nearest Neighbour Search . Hamilton , New Zealand . " , medianDistanceFromArbitraryPoint0 . globalInfo ( ) )
assertEquals ( "8034" , medianOfWidestDimension0 . getRevision ( ) )
assertEquals ( "The class that splits a node into two based on the midpoint value of the dimension in which the node's rectangle is widest . If after splitting one side is empty then it is slided towards the non - empty side until there is at least one point on the empty side . \n\nFor more information see also : \n\nDavid M . Mount ( 2006 ) . ANN Programming Manual . College Park , MD , USA . " , string0 )
assertNotNull ( string0 )
assertEquals ( 0 , int0 )
assertEquals ( "The class that splits a KDTree node based on the midpoint value of a dimension in which the node's points have the widest spread . \n\nFor more information see also : \n\nAndrew Moore ( 1991 ) . A tutorial on kd - trees . " , midPointOfWidestDimension0 . globalInfo ( ) )
assertEquals ( false , enumeration0 . hasMoreElements ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 0 , int0 )
assertEquals ( 0 , int0 )
assertEquals ( ( - 1606 ) , kDTreeNode0 . m_NodeNumber )
assertEquals ( 1 , kDTreeNode0 . numInstances ( ) )
assertEquals ( 1 , int0 )
assertEquals ( 1 , kDTreeNode0 . numInstances ( ) )
assertEquals ( false , kDTreeNode0 . isALeaf ( ) )
assertEquals ( 1 , kDTreeNode0 . numInstances ( ) )
assertNotNull ( string0 )
assertEquals ( "The class that splits a KDTree node based on the median value of a dimension in which the node's points have the widest spread . \n\nFor more information see also : \n\nJerome H . Friedman , Jon Luis Bentley , Raphael Ari Finkel ( 1977 ) . An Algorithm for Finding Best Matches in Logarithmic Expected Time . ACM Transactions on Mathematics Software . 3 ( 3 ) : 209 - 226 . " , string0 )
assertEquals ( 0 , int0 )
assertEquals ( "The class that splits a KDTree node based on the midpoint value of a dimension in which the node's points have the widest spread . \n\nFor more information see also : \n\nAndrew Moore ( 1991 ) . A tutorial on kd - trees . " , string0 )
assertNotNull ( string0 )
assertEquals ( 0 , int0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( 0 , instances0 . numAttributes ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( array0 )
assertEquals ( Array . ArrayType . REAL , array_ArrayType1 )
assertEquals ( 0 , int0 )
assertNotNull ( array0 )
assertNotNull ( array0 )
assertNotNull ( array0 )
assertNotNull ( array0 )
assertEquals ( Array . ArrayType . INT_SPARSE , sparseArray0 . getType ( ) )
assertEquals ( true , boolean0 )
assertEquals ( Array . ArrayType . REAL_SPARSE , sparseArray0 . getType ( ) )
assertNotNull ( array0 )
assertEquals ( " < 82 82 > " , sparseArray0 . toString ( ) )
assertNotNull ( sparseArray0 )
assertNotNull ( array0 )
assertNotNull ( array0 )
assertNotNull ( nominalItem0 )
assertNotNull ( binaryItem0 )
assertNotNull ( binaryItem0 )
assertNotNull ( binaryItem0 )
assertNotNull ( nominalItem0 )
assertNotNull ( nominalItem0 )
assertNotNull ( binaryItem0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( 0 , int0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( 0 , labeledItemSet0 . counter ( ) )
assertEquals ( 1 , labeledItemSet0 . support ( ) )
assertEquals ( true , instances0 . isEmpty ( ) )
assertNotNull ( fastVectorArray0 )
assertNotNull ( fastVectorArray0 )
assertNotNull ( string0 )
assertEquals ( 2 , checkAssociator0 . getNumNominal ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , checkAssociator0 . getDebug ( ) )
assertEquals ( false , checkAssociator0 . getDebug ( ) )
assertEquals ( false , checkAssociator0 . getSilent ( ) )
assertEquals ( false , checkAssociator0 . getSilent ( ) )
assertNotNull ( booleanArray0 )
assertNotNull ( booleanArray0 )
assertNotNull ( booleanArray0 )
assertEquals ( "The , quick , brown , fox , jumps , over , the , lazy , dog" , checkAssociator0 . getWords ( ) )
assertNotNull ( booleanArray0 )
assertNotNull ( booleanArray0 )
assertEquals ( 1 , checkAssociator0 . getNumRelational ( ) )
assertNotNull ( booleanArray0 )
assertNotNull ( booleanArray0 )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( true , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( 1 , itemSet0 . support ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( 46 , itemSet0 . support ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( false , boolean0 )
assertEquals ( 0 , itemSet0 . counter ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( 2 , itemSet0 . support ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( 2 , itemSet0 . support ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , itemSet0 . getTreatZeroAsMissing ( ) )
assertEquals ( "~t0b ? G$ { q$Dw = ~t0b ? G$ { q$Dw = 0" , string0 )
assertEquals ( 0 . 0 , instances0 . sumOfWeights ( ) , 0 . 01D )
assertEquals ( "java . lang . String" , filteredAssociationRules0 . getProducer ( ) )
assertNull ( associationRules0 )
assertNotNull ( string0 )
assertEquals ( " < CRITERE name = \"conv\" value = \" 0\" / > " , string0 )
assertEquals ( "lev" , string0 )
assertEquals ( 10 , int0 )
assertEquals ( 1 . 0 , defaultAssociationRule0 . getPrimaryMetricValue ( ) , 0 . 01D )
assertNotNull ( string0 )
assertEquals ( " [ ] : 513 = = > [ ] : 513 conf : ( 1 ) < lift : ( 1 ) > lev : ( 0 ) conv : ( 0 ) " , defaultAssociationRule0 . toString ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( " [ ] : 513 = = > [ ] : 513 conf : ( 1 ) < lift : ( 1 ) > lev : ( 0 ) conv : ( 0 ) " , defaultAssociationRule0 . toString ( ) )
assertEquals ( " [ ] : 513 = = > [ ] : 513 conf : ( 1 ) < lift : ( 1 ) > lev : ( 0 ) conv : ( 0 ) " , defaultAssociationRule0 . toString ( ) )
assertEquals ( 1534 , int0 )
assertEquals ( 0 . 0 , defaultAssociationRule0 . getPrimaryMetricValue ( ) , 0 . 01D )
assertEquals ( 0 . 0 , defaultAssociationRule0 . getPrimaryMetricValue ( ) , 0 . 01D )
assertNotNull ( stringArray0 )
assertEquals ( 0 , int0 )
assertEquals ( - 124 , numericItem0 . getFrequency ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( string0 )
assertEquals ( - 1 , numericItem0 . getFrequency ( ) )
assertEquals ( 1 , numericItem0 . getFrequency ( ) )
assertEquals ( 124 , numericItem0 . getFrequency ( ) )
assertEquals ( 1 , numericItem0 . getFrequency ( ) )
assertNotNull ( fPGrowth_FrequentBinaryItemSet0 )
assertNotNull ( fPGrowth_FrequentBinaryItemSet0 )
assertNotNull ( fPGrowth_FrequentBinaryItemSet0 )
assertNotNull ( fPGrowth_FrequentBinaryItemSet0 )
assertEquals ( 1 , hashMap0 . size ( ) )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( 2 , fPGrowth0 . getPositiveIndex ( ) )
assertEquals ( 0 . 05 , fPGrowth0 . getDelta ( ) , 0 . 01D )
assertEquals ( 2 , fPGrowth0 . getPositiveIndex ( ) )
assertEquals ( 0 . 1 , fPGrowth0 . getLowerBoundMinSupport ( ) , 0 . 01D )
assertEquals ( 10 , fPGrowth0 . getNumRulesToFind ( ) )
assertEquals ( 1 . 0 , fPGrowth0 . getUpperBoundMinSupport ( ) , 0 . 01D )
assertEquals ( " #_$ ) " , fPGrowth0 . getTransactionsMustContain ( ) )
assertEquals ( 0 . 9 , fPGrowth0 . getMinMetric ( ) , 0 . 01D )
assertEquals ( false , fPGrowth0 . getUseORForMustContainList ( ) )
assertEquals ( false , fPGrowth0 . getUseORForMustContainList ( ) )
assertNotNull ( stringArray0 )
assertEquals ( 10 , fPGrowth0 . getNumRulesToFind ( ) )
assertEquals ( false , fPGrowth0 . getUseORForMustContainList ( ) )
assertEquals ( 2 , fPGrowth0 . getPositiveIndex ( ) )
assertEquals ( - 1 , fPGrowth0 . getMaxNumberOfItems ( ) )
assertEquals ( false , fPGrowth0 . getUseORForMustContainList ( ) )
assertEquals ( "8034" , string0 )
assertNotNull ( stringArray0 )
assertEquals ( 0 . 05 , fPGrowth0 . getDelta ( ) , 0 . 01D )
assertNull ( fPGrowth_FPTreeNode1 )
assertEquals ( 0 , int0 )
assertNull ( binaryItem0 )
assertEquals ( 0 , fPGrowth_FrequentItemSets0 . getNumberOfTransactions ( ) )
assertEquals ( 6 , int0 )
assertEquals ( 1 , fPGrowth_FrequentItemSets0 . size ( ) )
assertEquals ( 2 , fPGrowth_FrequentItemSets0 . size ( ) )
assertEquals ( "No frequent items sets found ! " , string0 )
assertEquals ( 1 , fPGrowth_FrequentItemSets0 . size ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( list0 )
assertNotNull ( arrayList1 )
assertEquals ( 2 , fPGrowth0 . getPositiveIndex ( ) )
assertEquals ( 2 , fPGrowth0 . getPositiveIndex ( ) )
assertEquals ( 0 . 9 , fPGrowth0 . getMinMetric ( ) , 0 . 01D )
assertEquals ( false , fPGrowth0 . getFindAllRulesForSupportLevel ( ) )
assertEquals ( true , fPGrowth0 . getFindAllRulesForSupportLevel ( ) )
assertEquals ( false , fPGrowth0 . getUseORForMustContainList ( ) )
assertEquals ( false , fPGrowth0 . getUseORForMustContainList ( ) )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertEquals ( true , filteredAssociator0 . canProduceRules ( ) )
assertNotNull ( filteredAssociator0 )
assertNotNull ( filteredAssociator0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( numericItem0 )
assertNotNull ( stringArray0 )
assertEquals ( 1 , stacking0 . getSeed ( ) )
assertEquals ( 1 , stacking0 . getSeed ( ) )
assertEquals ( 1 , stacking0 . getSeed ( ) )
assertNotNull ( string0 )
assertEquals ( "weka . classifiers . rules . ZeroR" , cVParameterSelection0 . defaultClassifierString ( ) )
assertEquals ( "The base classifier to be used . " , string0 )
assertEquals ( "weka . classifiers . rules . ZeroR" , cVParameterSelection0 . defaultClassifierString ( ) )
assertEquals ( "Classification via Regression : No model built yet . " , classificationViaRegression0 . toString ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "Capabilities : [ Numeric class , Date class ] \nDependencies : [ Nominal attributes , Binary attributes , Unary attributes , Empty nominal attributes , Numeric attributes , Date attributes , String attributes , Relational attributes , Missing values , No class , Missing class values , Only multi - Instance data ] \nmin # Instance : 2\n" , capabilities0 . toString ( ) )
assertNotNull ( capabilities0 )
assertEquals ( "The random number seed to be used . " , string0 )
assertEquals ( 1 , randomCommittee0 . getSeed ( ) )
assertNotNull ( enumeration0 )
assertNotNull ( stringArray0 )
assertEquals ( 1 , costSensitiveClassifier0 . getSeed ( ) )
assertEquals ( "The random number seed to be used . " , string0 )
assertNotNull ( stringArray0 )
assertNotNull ( enumeration0 )
assertEquals ( "Class for building an ensemble of randomizable base classifiers . Each base classifiers is built using a different random number seed ( but based one the same data ) . The prediction is a straight average of the predictions generated by the individual base classifiers . " , string0 )
assertNull ( instances0 )
assertEquals ( "weka . classifiers . trees . RandomTree" , string0 )
assertNotNull ( string0 )
assertEquals ( "RandomCommittee : No model built yet . " , string0 )
assertNotNull ( stringArray0 )
assertNotNull ( string0 )
assertEquals ( 10 , stacking0 . getNumFolds ( ) )
assertEquals ( "The number of folds used for cross - validation . " , string0 )
assertEquals ( "Stacking\n\nBase classifiers\n\nZeroR predicts class value : class1\n\n\n\nMeta classifier\n\nZeroR predicts class value : class1" , stacking0 . toString ( ) )
assertEquals ( 10 , stacking0 . getNumFolds ( ) )
assertNotNull ( string0 )
assertEquals ( "Stacking : No model built yet . " , stacking0 . toString ( ) )
assertEquals ( "Stacking : No model built yet . " , string0 )
assertNotNull ( string0 )
assertEquals ( 0 . 5 , randomSubSpace0 . getSubSpaceSize ( ) , 0 . 01D )
assertNotNull ( stringArray0 )
assertEquals ( "8034" , string0 )
assertEquals ( 0 . 5 , randomSubSpace0 . getSubSpaceSize ( ) , 0 . 01D )
assertEquals ( 0 . 5 , randomSubSpace0 . getSubSpaceSize ( ) , 0 . 01D )
assertEquals ( "weka . classifiers . trees . REPTree" , randomSubSpace0 . defaultClassifierString ( ) )
assertEquals ( 0 . 5 , randomSubSpace0 . getSubSpaceSize ( ) , 0 . 01D )
assertEquals ( 1 , int0 )
assertEquals ( 0 . 38114965F , random0 . nextFloat ( ) , 0 . 01F )
assertEquals ( 0 . 2825253F , random0 . nextFloat ( ) , 0 . 01F )
assertNotNull ( string0 )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( false , regressionByDiscretization0 . getUseEqualFrequency ( ) )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( "Whether to delete empty bins after discretization . " , string0 )
assertEquals ( "Whether to minimize absolute error . " , string0 )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( false , regressionByDiscretization0 . getUseEqualFrequency ( ) )
assertNotNull ( stringArray0 )
assertEquals ( true , regressionByDiscretization0 . getDeleteEmptyBins ( ) )
assertEquals ( false , regressionByDiscretization0 . getUseEqualFrequency ( ) )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( false , regressionByDiscretization0 . getMinimizeAbsoluteError ( ) )
assertEquals ( "Class for combining classifiers . Different combinations of probability estimates for classification are available . \n\nFor more information see : \n\nLudmila I . Kuncheva ( 2004 ) . Combining Pattern Classifiers : Methods and Algorithms . John Wiley and Sons , Inc . . \n\nJ . Kittler , M . Hatef , Robert P . W . Duin , J . Matas ( 1998 ) . On combining classifiers . IEEE Transactions on Pattern Analysis and Machine Intelligence . 20 ( 3 ) : 226 - 239 . " , string0 )
assertEquals ( "9092" , string0 )
assertEquals ( "The base classifiers to be used . " , vote0 . classifiersTipText ( ) )
assertEquals ( "9092" , vote0 . getRevision ( ) )
assertEquals ( "The combination rule used . " , string0 )
assertEquals ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " , string0 )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \n\tweka . classifiers . meta . LogitBoost - P 100 - F 0 - R 1 - L - 1 . 7976931348623157E308 - H 1 . 0 - S 1 - I 10 - W weka . classifiers . trees . DecisionStump\n\tweka . classifiers . meta . Stacking - X 10 - M \"weka . classifiers . rules . ZeroR \" - S 1 - num - slots 1 - B \"weka . classifiers . rules . ZeroR \"\nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \n\tweka . classifiers . meta . Vote - S 1 - B \"weka . classifiers . rules . ZeroR \" - R AVG\nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertNotNull ( doubleArray0 )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \n\tweka . classifiers . meta . Vote - S 1 - B \"weka . classifiers . rules . ZeroR \" - R AVG\nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertNotNull ( doubleArray0 )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \n\tweka . classifiers . meta . Vote - S 1 - B \"weka . classifiers . rules . ZeroR \" - R AVG\nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertNotNull ( doubleArray0 )
assertNotNull ( doubleArray0 )
assertNotNull ( doubleArray0 )
assertNotNull ( doubleArray0 )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \n\tweka . classifiers . meta . Vote - S 1 - B \"weka . classifiers . rules . ZeroR \" - R AVG\nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertEquals ( "Vote combines the probability distributions of these base learners : \n\tweka . classifiers . rules . ZeroR \n\tweka . classifiers . meta . Vote - S 1 - B \"weka . classifiers . rules . ZeroR \" - R AVG\nusing the 'Average of Probabilities' combination rule \n" , vote0 . toString ( ) )
assertEquals ( "8034" , selectedTag0 . getRevision ( ) )
assertEquals ( "9092" , vote0 . getRevision ( ) )
assertNotSame ( fileArray1 , fileArray0 )
assertNotNull ( string0 )
assertEquals ( Double . NaN , jRip_NumericAntd0 . getAccuRate ( ) , 0 . 01D )
assertNotNull ( jRip_NominalAntd0 )
assertNotNull ( jRip_NominalAntd0 )
assertNotNull ( jRip_NominalAntd0 )
assertEquals ( true , jRip0 . getUsePruning ( ) )
assertEquals ( " < = NaN" , jRip_NumericAntd1 . toString ( ) )
assertNotNull ( jRip_NominalAntd0 )
assertNotNull ( jRip_NominalAntd0 )
assertNotNull ( jRip_NominalAntd0 )
assertEquals ( 3 , jRip0 . getFolds ( ) )
assertEquals ( false , jRip0 . getDebug ( ) )
assertEquals ( true , jRip0 . getCheckErrorRate ( ) )
assertEquals ( 2 . 0 , jRip0 . getMinNo ( ) , 0 . 01D )
assertEquals ( 3 , jRip0 . getFolds ( ) )
assertEquals ( "Whether pruning is performed . " , string0 )
assertEquals ( false , boolean0 )
assertEquals ( 2 . 0 , jRip0 . getMinNo ( ) , 0 . 01D )
assertEquals ( 3 , jRip0 . getFolds ( ) )
assertEquals ( false , jRip0 . getDebug ( ) )
assertEquals ( true , jRip0 . getUsePruning ( ) )
assertEquals ( true , jRip0 . getCheckErrorRate ( ) )
assertEquals ( 6L , jRip0 . getSeed ( ) )
assertEquals ( true , jRip0 . getCheckErrorRate ( ) )
assertEquals ( - 1403 , jRip0 . getOptimizations ( ) )
assertEquals ( 1L , jRip0 . getSeed ( ) )
assertEquals ( false , jRip0 . getDebug ( ) )
assertEquals ( true , jRip0 . getCheckErrorRate ( ) )
assertEquals ( 3 , jRip0 . getFolds ( ) )
assertEquals ( false , jRip0 . getDebug ( ) )
assertEquals ( false , jRip0 . getDebug ( ) )
assertEquals ( true , jRip0 . getCheckErrorRate ( ) )
assertEquals ( 1L , jRip0 . getSeed ( ) )
assertEquals ( 1L , jRip0 . getSeed ( ) )
assertEquals ( 2 . 0 , jRip0 . getMinNo ( ) , 0 . 01D )
assertEquals ( 0 . 0 , jRip_NumericAntd0 . getMaxInfoGain ( ) , 0 . 01D )
assertEquals ( ( - 1 . 0 ) , jRip_RipperRule0 . getConsequent ( ) , 0 . 01D )
assertNotNull ( decisionTableHashKey0 )
assertEquals ( "8034" , decisionTableHashKey0 . getRevision ( ) )
assertNotNull ( decisionTableHashKey0 )
assertEquals ( "8034" , decisionTableHashKey0 . getRevision ( ) )
assertNotNull ( decisionTableHashKey0 )
assertNotNull ( decisionTableHashKey0 )
assertNotNull ( decisionTableHashKey0 )
assertNotNull ( decisionTableHashKey0 )
assertEquals ( 1 , int0 )
assertEquals ( false , decisionTable0 . getDisplayRules ( ) )
assertEquals ( 1 , decisionTable0 . getCrossVal ( ) )
assertEquals ( false , decisionTable0 . getDisplayRules ( ) )
assertNotNull ( string0 )
assertNotNull ( selectedTag0 )
assertEquals ( 1 , decisionTable0 . getCrossVal ( ) )
assertEquals ( false , decisionTable0 . getUseIBk ( ) )
assertEquals ( false , decisionTable0 . getUseIBk ( ) )
assertEquals ( 1 , decisionTable0 . getCrossVal ( ) )
assertEquals ( false , decisionTable0 . getDisplayRules ( ) )
assertEquals ( false , decisionTable0 . getDisplayRules ( ) )
assertEquals ( false , decisionTable0 . getDisplayRules ( ) )
assertEquals ( "Decision Table : \n\nNumber of training instances : 20\nNumber of Rules : 4\nNon matches covered by Majority class . \n\tBest first . \n\tStart set : no attributes\n\tSearch direction : forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated : 1\n\tMerit of best subset found : 85 \nEvaluation ( for feature selection ) : CV ( leave one out ) \nFeature set : 1 , 2" , decisionTable0 . toString ( ) )
assertEquals ( 5 , decisionTable0 . getCrossVal ( ) )
assertEquals ( false , decisionTable0 . getUseIBk ( ) )
assertEquals ( 1 , decisionTable0 . getCrossVal ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , decisionTable0 . getUseIBk ( ) )
assertEquals ( false , decisionTable0 . getDisplayRules ( ) )
assertEquals ( "Decision Table : \n\nNumber of training instances : 20\nNumber of Rules : 1\nNon matches covered by IB1 . \n\tBest first . \n\tStart set : no attributes\n\tSearch direction : forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated : 1\n\tMerit of best subset found : 0 \nEvaluation ( for feature selection ) : CV ( leave one out ) \nFeature set : 2" , decisionTable0 . toString ( ) )
assertEquals ( "Decision Table : \n\nNumber of training instances : 20\nNumber of Rules : 1\nNon matches covered by Majority class . \n\tBest first . \n\tStart set : no attributes\n\tSearch direction : forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated : 1\n\tMerit of best subset found : 0 \nEvaluation ( for feature selection ) : CV ( leave one out ) \nFeature set : 2" , decisionTable0 . toString ( ) )
assertEquals ( false , decisionTable0 . getUseIBk ( ) )
assertEquals ( 2511 , decisionTable0 . getCrossVal ( ) )
assertEquals ( "Decision Table : \n\nNumber of training instances : 20\nNumber of Rules : 4\nNon matches covered by Majority class . \n\tBest first . \n\tStart set : no attributes\n\tSearch direction : forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated : 1\n\tMerit of best subset found : 85 \nEvaluation ( for feature selection ) : CV ( leave one out ) \nFeature set : 1 , 2\n\nRules : \n = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \nNumeric1 Class \n = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n' ( - inf - - 2147483640 . 5 ] ' class2\n' ( - 2147483640 . 5 - 7 . 5 ] ' class4\n' ( 2147483655 . 5 - inf ) ' class1\n' ( 7 . 5 - 2147483655 . 5 ] ' class2\n = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\n" , decisionTable0 . toString ( ) )
assertNotNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( "8034" , string0 )
assertEquals ( "The normalized polynomial kernel . \nK ( x , y ) = < x , y > / sqrt ( < x , x > < y , y > ) where < x , y > = PolyKernel ( x , y ) " , string0 )
assertEquals ( "Normalized Poly Kernel : K ( x , y ) = < x , y > ^2 . 0 / ( < x , x > ^2 . 0 * < y , y > ^2 . 0 ) ^ ( 1 / 2 ) " , string0 )
assertEquals ( "Normalized Poly Kernel with lower order : K ( x , y ) = ( < x , y > + 1 ) ^2 . 0 / ( ( < x , x > + 1 ) ^2 . 0 * ( < y , y > + 1 ) ^2 . 0 ) ^ ( 1 / 2 ) " , normalizedPolyKernel0 . toString ( ) )
assertEquals ( "set true to use variant 1 of the paper , otherwise use variant 2 . " , string0 )
assertNotNull ( string0 )
assertNotNull ( stringArray0 )
assertEquals ( 0 . 0010 , regSMOImproved0 . m_fTolerance , 0 . 01D )
assertEquals ( true , regSMOImproved0 . m_bUseVariant1 )
assertEquals ( true , boolean0 )
assertNotNull ( enumeration0 )
assertEquals ( true , regSMOImproved0 . m_bUseVariant1 )
assertEquals ( true , regSMOImproved0 . m_bUseVariant1 )
assertEquals ( 0 . 0010 , regSMOImproved0 . m_fTolerance , 0 . 01D )
assertEquals ( 0 . 0010 , regSMOImproved0 . m_fTolerance , 0 . 01D )
assertEquals ( 210 , rBFKernel0 . numEvals ( ) )
assertEquals ( "" , string0 )
assertNotNull ( string0 )
assertEquals ( "\nGeneral options : \n\n - t < training file > \n\tThe name of the training file . \n - c < class index > \n\tSets index of class attribute ( default : last ) . \n" , string0 )
assertEquals ( 210 , rBFKernel0 . numEvals ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertNotNull ( stringArray0 )
assertEquals ( "Whether to use normalization . " , string0 )
assertEquals ( 200003 , stringKernel0 . getInternalCacheSize ( ) )
assertEquals ( false , stringKernel0 . getUseNormalization ( ) )
assertEquals ( 9 , stringKernel0 . getMaxSubsequenceLength ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 9 , stringKernel0 . getMaxSubsequenceLength ( ) )
assertEquals ( "The subsequence length . " , string0 )
assertEquals ( 0 . 5 , stringKernel0 . getLambda ( ) , 0 . 01D )
assertEquals ( false , stringKernel0 . getUseNormalization ( ) )
assertEquals ( 200003 , stringKernel0 . getInternalCacheSize ( ) )
assertEquals ( "0" , selectedTag0 . toString ( ) )
assertEquals ( 0 . 5 , stringKernel0 . getLambda ( ) , 0 . 01D )
assertEquals ( 0 . 5 , stringKernel0 . getLambda ( ) , 0 . 01D )
assertEquals ( 0 . 5 , stringKernel0 . getLambda ( ) , 0 . 01D )
assertEquals ( 3 , stringKernel0 . getSubsequenceLength ( ) )
assertEquals ( false , stringKernel0 . getUseNormalization ( ) )
assertEquals ( 200003 , stringKernel0 . getInternalCacheSize ( ) )
assertEquals ( 0 , stringKernel0 . numEvals ( ) )
assertEquals ( 0 . 5 , stringKernel0 . getLambda ( ) , 0 . 01D )
assertEquals ( false , stringKernel0 . getUseNormalization ( ) )
assertEquals ( 200003 , stringKernel0 . getInternalCacheSize ( ) )
assertEquals ( 250007 , stringKernel0 . getCacheSize ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 9 , stringKernel0 . getMaxSubsequenceLength ( ) )
assertEquals ( 0 . 5 , stringKernel0 . getLambda ( ) , 0 . 01D )
assertEquals ( 3 , stringKernel0 . getSubsequenceLength ( ) )
assertEquals ( 250007 , stringKernel0 . getCacheSize ( ) )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( sMOset0 )
assertNotNull ( string0 )
assertEquals ( "RBF kernel : K ( x , y ) = e^ - ( 0 . 01 * < x - y , x - y > ^2 ) " , string0 )
assertEquals ( "The Gamma value . " , string0 )
assertEquals ( "The RBF kernel . K ( x , y ) = e^ - ( gamma * < x - y , x - y > ^2 ) " , string0 )
assertEquals ( "RBF kernel : K ( x , y ) = e^ - ( 0 . 01 * < x - y , x - y > ^2 ) " , rBFKernel0 . toString ( ) )
assertNotNull ( stringArray0 )
assertEquals ( 1 , rBFKernel0 . numEvals ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "The size of the cache ( a prime number ) , 0 for full cache and - 1 to turn it off . " , string0 )
assertEquals ( 0 , int0 )
assertEquals ( 0 , int0 )
assertEquals ( 250007 , rBFKernel0 . getCacheSize ( ) )
assertEquals ( 250007 , rBFKernel0 . getCacheSize ( ) )
assertEquals ( 1 , puk0 . numEvals ( ) )
assertEquals ( 250007 , puk0 . getCacheSize ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , precomputedKernelMatrixKernel1 . getChecksTurnedOff ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , rBFKernel0 . getChecksTurnedOff ( ) )
assertEquals ( false , rBFKernel0 . getDebug ( ) )
assertEquals ( false , stringKernel0 . getDebug ( ) )
assertEquals ( false , puk0 . getDebug ( ) )
assertEquals ( false , normalizedPolyKernel0 . getChecksTurnedOff ( ) )
assertEquals ( false , rBFKernel0 . getDebug ( ) )
assertEquals ( 0 , int0 )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertEquals ( "Capabilities : [ Nominal attributes , Binary attributes , Unary attributes , Empty nominal attributes , Nominal class , Binary class , Unary class , Empty nominal class , Numeric class , Date class , String class , Relational class , Missing class values ] \nDependencies : [ ] \nmin # Instance : 1\n" , capabilities0 . toString ( ) )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , string0 )
assertEquals ( "This kernel is based on a kernel matrix that is read from a file . Instances must have a single nominal attribute ( excluding the class ) . This attribute must be the first attribute in the file and its values are used to reference rows / columns in the kernel matrix . The second attribute must be the class attribute . " , string0 )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertNotNull ( string0 )
assertEquals ( 0 , int0 )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertEquals ( "Using kernel matrix from file with name : kernelMatrix . matrix" , precomputedKernelMatrixKernel0 . toString ( ) )
assertNotNull ( stringArray0 )
assertEquals ( 1 . 0 , puk0 . getSigma ( ) , 0 . 01D )
assertEquals ( "Puk kernel" , string0 )
assertEquals ( 1 . 0 , puk0 . getOmega ( ) , 0 . 01D )
assertEquals ( 1 . 0 , puk0 . getSigma ( ) , 0 . 01D )
assertEquals ( 1 . 0 , puk0 . getSigma ( ) , 0 . 01D )
assertEquals ( 1 . 0 , puk0 . getSigma ( ) , 0 . 01D )
assertEquals ( 1 . 0 , puk0 . getOmega ( ) , 0 . 01D )
assertEquals ( 1 , puk0 . numEvals ( ) )
assertNotNull ( string0 )
assertEquals ( 1 , checkKernel0 . getNumDate ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "The , quick , brown , fox , jumps , over , the , lazy , dog" , checkKernel0 . getWords ( ) )
assertEquals ( "8034" , checkKernel0 . getRevision ( ) )
assertEquals ( "The , quick , brown , fox , jumps , over , the , lazy , dog" , checkKernel0 . getWords ( ) )
assertEquals ( 10 , checkKernel0 . getNumInstancesRelational ( ) )
assertNotNull ( booleanArray0 )
assertNotNull ( booleanArray0 )
assertEquals ( 10 , checkKernel0 . getNumInstancesRelational ( ) )
assertNotNull ( booleanArray0 )
assertEquals ( "The epsilon parameter of the epsilon insensitive loss function . ( default 0 . 001 ) . " , string0 )
assertEquals ( - 1 , regOptimizer0 . getCacheHits ( ) )
assertEquals ( "8034" , string0 )
assertNotNull ( stringArray0 )
assertEquals ( - 1 , regOptimizer0 . getCacheHits ( ) )
assertEquals ( "SMOreg\n\nSupport vectors : \n + 0 \n\n\n\nNumber of kernel evaluations : 0" , regOptimizer0 . toString ( ) )
assertEquals ( false , regOptimizer0 . modelBuilt ( ) )
assertEquals ( - 1 , regOptimizer0 . getCacheHits ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 0 . 0010 , regOptimizer0 . getEpsilonParameter ( ) , 0 . 01D )
assertEquals ( - 1 , regSMOImproved0 . getCacheHits ( ) )
assertNotNull ( string0 )
assertEquals ( "The epsilon for round - off error ( shouldn't be changed ) . " , string0 )
assertEquals ( 1 . 0E - 12 , regSMO0 . getEpsilon ( ) , 0 . 01D )
assertNotNull ( stringArray0 )
assertEquals ( "Implementation of SMO for support vector regression as described in : \n\nA . J . Smola , B . Schoelkopf ( 1998 ) . A tutorial on support vector regression . " , string0 )
assertNotNull ( enumeration0 )
assertEquals ( false , boolean0 )
assertEquals ( 1 . 0E - 12 , regSMO0 . getEpsilon ( ) , 0 . 01D )
assertNotNull ( stringArray0 )
assertEquals ( "Whether to use lower - order terms . " , string0 )
assertEquals ( "Linear Kernel : K ( x , y ) = < x , y > " , polyKernel0 . toString ( ) )
assertEquals ( "8034" , string0 )
assertEquals ( "Linear Kernel : K ( x , y ) = < x , y > " , polyKernel0 . toString ( ) )
assertEquals ( "Normalized Poly Kernel : K ( x , y ) = < x , y > ^2 . 0 / ( < x , x > ^2 . 0 * < y , y > ^2 . 0 ) ^ ( 1 / 2 ) " , normalizedPolyKernel0 . toString ( ) )
assertNotNull ( enumeration0 )
assertEquals ( false , polyKernel0 . getUseLowerOrder ( ) )
assertEquals ( "Poly Kernel : K ( x , y ) = < x , y > ^464 . 47431712381893" , polyKernel0 . toString ( ) )
assertEquals ( "Linear Kernel : K ( x , y ) = < x , y > " , string0 )
assertEquals ( false , polyKernel0 . getUseLowerOrder ( ) )
assertEquals ( 464 . 47431712381893 , polyKernel0 . getExponent ( ) , 0 . 01D )
assertEquals ( true , inputMappedClassifier0 . getIgnoreCaseForNames ( ) )
assertEquals ( false , inputMappedClassifier0 . getTrim ( ) )
assertEquals ( true , inputMappedClassifier0 . getTrim ( ) )
assertEquals ( true , inputMappedClassifier0 . getTrim ( ) )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( "Wrapper classifier that addresses incompatible training and test data by building a mapping between the training data that a classifier has been built with and the incoming test instances' structure . Model attributes that are not found in the incoming instances receive missing values , so do incoming nominal attribute values that the classifier has not seen before . A new classifier can be trained or an existing one loaded from a file . " , string0 )
assertEquals ( "Ignore case when matching attribute names and nomina values . " , string0 )
assertEquals ( true , inputMappedClassifier0 . getTrim ( ) )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( true , inputMappedClassifier0 . getTrim ( ) )
assertNotNull ( enumeration0 )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( true , inputMappedClassifier0 . getTrim ( ) )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( true , inputMappedClassifier0 . getIgnoreCaseForNames ( ) )
assertNotNull ( string0 )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( true , inputMappedClassifier0 . getTrim ( ) )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertNotNull ( string0 )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertEquals ( false , inputMappedClassifier0 . getSuppressMappingReport ( ) )
assertNotNull ( propertyDescriptorArray0 )
assertEquals ( "No model loaded yet . " , serializedClassifier0 . toString ( ) )
assertNotNull ( serializedClassifier0 )
assertNotNull ( serializedClassifier0 )
assertNotNull ( serializedClassifier0 )
assertNotNull ( serializedClassifier0 )
assertNull ( classifier0 )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "8034" , serializedClassifier0 . getRevision ( ) )
assertNotNull ( serializedClassifier0 )
assertNotNull ( serializedClassifier0 )
assertNotNull ( serializedClassifier0 )
assertEquals ( "loglog" , string0 )
assertNull ( string0 )
assertEquals ( 0 . 6321205588285577 , double0 , 0 . 01D )
assertEquals ( 1 . 0 , double0 , 0 . 01D )
assertNotNull ( generalRegression_Parameter0 )
assertEquals ( 0 . 001003355084541968 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 1 . 0 , double0 , 0 . 01D )
assertEquals ( "logc" , string0 )
assertEquals ( - 0 . 0 , double0 , 0 . 01D )
assertNotNull ( generalRegression_PPCell0 )
assertEquals ( "igauss" , string0 )
assertEquals ( 0 . 7991528017874561 , double0 , 0 . 01D )
assertEquals ( 3 . 092159564696708E271 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 1640 . 712567260209 , double0 , 0 . 01D )
assertEquals ( 1 . 537707164E9 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertNotNull ( generalRegression_PCell0 )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( - 0 . 0 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( - 0 . 0 , double0 , 0 . 01D )
assertEquals ( 1104 . 2652856806033 , double0 , 0 . 01D )
assertEquals ( "softmax" , string0 )
assertEquals ( ( - 0 . 9543292402175665 ) , double0 , 0 . 01D )
assertEquals ( 1 . 0 , double0 , 0 . 01D )
assertEquals ( 1146 . 3911748358016 , double0 , 0 . 01D )
assertEquals ( Double . POSITIVE_INFINITY , double0 , 0 . 01D )
assertEquals ( 145 . 10196188488993 , double0 , 0 . 01D )
assertEquals ( 1 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 3 , double0 , 0 . 01D )
assertEquals ( ( - 0 . 9894454042909852 ) , double0 , 0 . 01D )
assertEquals ( 0 . 4502342634966595 , double0 , 0 . 01D )
assertEquals ( "cosine" , string0 )
assertEquals ( Double . POSITIVE_INFINITY , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertNotNull ( neuralNetwork_Neuron0 )
assertNotNull ( neuralNetwork_Neuron0 )
assertNotNull ( neuralNetwork_Neuron0 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 1 . 0 , double0 , 0 . 01D )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "Sigmoid kernel : K ( x , y ) = tanh ( 1 . 0 * < x , y > + 1 . 0 ) " , string0 )
assertEquals ( "Linear kernel : K ( x , y ) = < x , y > " , string0 )
assertNotNull ( treeModel0 )
assertEquals ( 1 , treeModel_Predicate_Eval0 . ordinal ( ) )
assertEquals ( "UNKNOWN" , treeModel_Predicate_Eval0 . toString ( ) )
assertEquals ( 0 , treeModel_Predicate_Eval0 . ordinal ( ) )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertNotNull ( treeModel0 )
assertEquals ( "8034" , string0 )
assertEquals ( 1 . 7976931348623157E308 , double0 , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertNotNull ( string0 )
assertEquals ( 1 , nBTreeNoSplit0 . numSubsets ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( "true" , string0 )
assertEquals ( 1 , nBTreeNoSplit0 . numSubsets ( ) )
assertEquals ( true , nBTreeNoSplit0 . checkModel ( ) )
assertEquals ( "8034" , nBTreeModelSelection0 . getRevision ( ) )
assertNull ( classifierSplitModel0 )
assertEquals ( "8034" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( "8034" , string0 )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( Double . NaN , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( "8984" , string0 )
assertEquals ( "8034" , nBTreeModelSelection0 . getRevision ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( - 244 , nBTreeSplit0 . attIndex ( ) )
assertEquals ( - 244 , nBTreeSplit0 . attIndex ( ) )
assertEquals ( 689 , int0 )
assertEquals ( 234 , binC45Split0 . attIndex ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( ( - 13 ) , int0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( true , noSplit0 . checkModel ( ) )
assertEquals ( "true" , string0 )
assertEquals ( 1 , noSplit0 . numSubsets ( ) )
assertEquals ( "8034" , string0 )
assertEquals ( 0 , c45Split0 . attIndex ( ) )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( Double . NEGATIVE_INFINITY , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 1 , int0 )
assertEquals ( "8034" , string0 )
assertEquals ( 0 , c45Split0 . attIndex ( ) )
assertEquals ( " > 0" , string0 )
assertEquals ( " < = 0" , string0 )
assertEquals ( "i [ - 1957 ] = = null" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( 0 , c45Split0 . attIndex ( ) )
assertNotNull ( doubleArray1 )
assertEquals ( 8026 . 207200809441 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( "8034" , string0 )
assertEquals ( "Can't print nb tree . " , string0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotNull ( distribution0 )
assertNotSame ( nBTreeSplit0 , nBTreeSplit1 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertNull ( distribution0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( "" , string0 )
assertNotNull ( instancesArray0 )
assertNull ( classifierSplitModel0 )
assertEquals ( "8034" , c45ModelSelection0 . getRevision ( ) )
assertNotNull ( string0 )
assertEquals ( ( - 14L ) , classifierTree0 . nextID ( ) )
assertEquals ( 1 , int0 )
assertEquals ( 234L , classifierTree0 . nextID ( ) )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertNotNull ( enumeration0 )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( 2 , int0 )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertNotNull ( stringArray0 )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( "Set the name of a file in BIF XML format . A Bayes network learned from data can be compared with the Bayes network represented by the BIF file . Statistics calculated are o . a . the number of missing and extra arcs . " , string0 )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertNotNull ( doubleArray0 )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertFalse ( stringArray0 . equals ( stringArray1 ) )
assertFalse ( stringArray1 . equals ( stringArray0 ) )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( ( - 1 ) , bayesNet0 . m_nNonDiscreteAttribute )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( 0 . 0 , double0 , 0 . 01D )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertEquals ( false , bayesNet0 . m_bUseADTree )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertEquals ( "The independent probability of a class\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \nclass1\t21 . 0\nclass2\t1 . 0\n\nThe probability of a word given the class\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n\tclass1\tclass2\t\n" , naiveBayesMultinomialText0 . toString ( ) )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertEquals ( false , naiveBayesMultinomialText0 . getNormalizeDocLength ( ) )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertNotNull ( naiveBayesMultinomialText0 )
assertEquals ( "8034" , string0 )
assertNotNull ( string0 )
assertEquals ( "The independent probability of a class\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n\nThe probability of a word given the class\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n\t\n" , string0 )
assertNotNull ( naiveBayesMultinomial0 )
assertNotNull ( naiveBayesMultinomial0 )
assertNotNull ( naiveBayesMultinomial0 )
assertNotNull ( naiveBayesMultinomial0 )
assertNotNull ( naiveBayesMultinomial0 )
assertEquals ( false , naiveBayesUpdateable0 . getUseSupervisedDiscretization ( ) )
assertEquals ( false , naiveBayes0 . getDisplayModelInOldFormat ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , naiveBayes0 . getDisplayModelInOldFormat ( ) )
assertEquals ( false , naiveBayes0 . getUseSupervisedDiscretization ( ) )
assertEquals ( false , naiveBayes0 . getUseSupervisedDiscretization ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , naiveBayes0 . getUseSupervisedDiscretization ( ) )
assertEquals ( false , naiveBayes0 . getUseKernelEstimator ( ) )
assertEquals ( false , naiveBayes0 . getUseSupervisedDiscretization ( ) )
assertEquals ( false , naiveBayesUpdateable0 . getUseKernelEstimator ( ) )
assertEquals ( false , naiveBayes0 . getUseSupervisedDiscretization ( ) )
assertEquals ( false , naiveBayesUpdateable0 . getDisplayModelInOldFormat ( ) )
assertEquals ( false , naiveBayesUpdateable0 . getUseKernelEstimator ( ) )
assertEquals ( false , naiveBayesUpdateable0 . getDisplayModelInOldFormat ( ) )
assertEquals ( "Class for a Naive Bayes classifier using estimator classes . This is the updateable version of NaiveBayes . \nThis classifier will use a default precision of 0 . 1 for numeric attributes when buildClassifier is called with zero training instances . \n\nFor more information on Naive Bayes classifiers , see\n\nGeorge H . John , Pat Langley : Estimating Continuous Distributions in Bayesian Classifiers . In : Eleventh Conference on Uncertainty in Artificial Intelligence , San Mateo , 338 - 345 , 1995 . " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( false , naiveBayesUpdateable0 . getUseSupervisedDiscretization ( ) )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertNotNull ( parentSet0 )
assertEquals ( 0 , instances0 . classIndex ( ) )
assertEquals ( "@relation ''\n\n@attribute '' { Value1 , Value2 , Value3 , Value4 , Value5 , Value6 , Value7 } \n\n@data\n" , instances0 . toString ( ) )
assertEquals ( " Delete Arc Action" , editableBayesNet0 . lastActionMsg ( ) )
assertEquals ( 0 , editableBayesNet0 . m_nCurrentEditAction )
assertEquals ( 0 , editableBayesNet0 . m_nCurrentEditAction )
assertEquals ( false , editableBayesNet0 . isChanged ( ) )
assertEquals ( true , editableBayesNet0 . m_bNeedsUndoAction )
assertEquals ( true , editableBayesNet0 . m_bNeedsUndoAction )
assertNotNull ( editableBayesNet0 )
assertNotNull ( editableBayesNet0 )
assertEquals ( "Relation Name : \nNum Instances : 0\nNum Attributes : 2\n\n Name Type Nom Int Real Missing Unique Dist\n 1 Num 0% 0% 0% 0 / 0% 0 / 0% 0 \n 2 x Nom 0% 0% 0% 0 / 0% 0 / 0% 0 \n" , instances0 . toSummaryString ( ) )
assertEquals ( false , editableBayesNet0 . isChanged ( ) )
assertEquals ( 0 , editableBayesNet0 . m_nCurrentEditAction )
assertEquals ( 0 , instances0 . classIndex ( ) )
assertEquals ( 0 , instances0 . classIndex ( ) )
assertEquals ( "Relation Name : \nNum Instances : 0\nNum Attributes : 2\n\n Name Type Nom Int Real Missing Unique Dist\n 1 Num 0% 0% 0% 0 / 0% 0 / 0% 0 \n 2 x Nom 0% 0% 0% 0 / 0% 0 / 0% 0 \n" , instances0 . toSummaryString ( ) )
assertNotNull ( editableBayesNet0 )
assertEquals ( 0 , instances0 . classIndex ( ) )
assertEquals ( 0 , instances0 . classIndex ( ) )
assertEquals ( 1 , instances0 . numAttributes ( ) )
assertEquals ( "@relation ''\n\n@attribute '' numeric\n\n@data\n" , instances0 . toString ( ) )
assertNotNull ( editableBayesNet0 )
assertNotNull ( string0 )
assertEquals ( 0 , instances0 . classIndex ( ) )
assertEquals ( false , editableBayesNet0 . isChanged ( ) )
assertEquals ( true , editableBayesNet0 . m_bNeedsUndoAction )
assertEquals ( false , editableBayesNet0 . isChanged ( ) )
assertEquals ( 0 , editableBayesNet0 . m_nCurrentEditAction )
assertNotNull ( string0 )
assertEquals ( "@relation ''\n\n\n@data\n" , instances0 . toString ( ) )
assertEquals ( 1938 , editableBayesNet_AddArcAction0 . m_nParent )
assertEquals ( true , editableBayesNet0 . m_bNeedsUndoAction )
assertEquals ( "8034" , string0 )
assertEquals ( ( - 812 ) , varyNode0 . m_iNode )
assertEquals ( ( - 812 ) , varyNode0 . m_iNode )
assertEquals ( "Builds a description of a Bayes Net classifier stored in XML BIF 0 . 3 format . \n\nFor more details on XML BIF see : \n\nFabio Cozman , Marek Druzdzel , Daniel Garcia ( 1998 ) . XML BIF version 0 . 3 . URL http : / / www - 2 . cs . cmu . edu / ~fgcozman / Research / InterchangeFormat / . " , string0 )
assertNull ( string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "" , string0 )
assertEquals ( "8064" , string0 )
assertNotNull ( marginCalculator_JunctionTreeSeparator0 )
assertNotNull ( marginCalculator_JunctionTreeSeparator0 )
assertNotNull ( marginCalculator_JunctionTreeSeparator0 )
assertEquals ( 0 , int0 )
assertNotNull ( intArray1 )
assertNotNull ( setArray0 )
assertNotNull ( technicalInformation0 )
assertEquals ( "8034" , string0 )
assertNotNull ( aDNode0 )
assertEquals ( 0 , aDNode0 . m_nStartNode )
assertEquals ( 0 , aDNode0 . m_nStartNode )
assertEquals ( "8034" , aDNode0 . getRevision ( ) )
assertNotNull ( aDNode0 )
assertNotNull ( stringArray0 )
assertNotNull ( string0 )
assertEquals ( 1 , bayesNetGenerator0 . m_nSeed )
assertEquals ( false , bayesNetGenerator0 . m_bGenerateNet )
assertEquals ( 10 , bayesNetGenerator0 . m_nNrOfArcs )
assertEquals ( "Classifier hasn't been built yet ! " , m5Rules0 . toString ( ) )
assertEquals ( "Alpha is used for estimating the probability tables and can be interpreted as the initial count on each value . " , string0 )
assertEquals ( 1 . 0E - 5 , bayesNetEstimator0 . getAlpha ( ) , 0 . 01D )
assertEquals ( 0 . 5 , bayesNetEstimator0 . getAlpha ( ) , 0 . 01D )
assertEquals ( 0 . 5 , bayesNetEstimator0 . getAlpha ( ) , 0 . 01D )
assertEquals ( 0 . 5 , double0 , 0 . 01D )
assertEquals ( "8034" , string0 )
assertNotNull ( stringArray0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertNotNull ( discreteEstimatorBayes0 )
assertEquals ( false , bMAEstimator0 . isUseK2Prior ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , bMAEstimator0 . isUseK2Prior ( ) )
assertNotNull ( enumeration0 )
assertEquals ( false , bMAEstimator0 . isUseK2Prior ( ) )
assertEquals ( true , multiNomialBMAEstimator0 . isUseK2Prior ( ) )
assertNotNull ( stringArray0 )
assertEquals ( true , multiNomialBMAEstimator0 . isUseK2Prior ( ) )
assertEquals ( true , multiNomialBMAEstimator0 . isUseK2Prior ( ) )
assertNotNull ( enumeration0 )
assertNotNull ( discreteEstimatorFullBayes0 )
assertNotNull ( string0 )
assertEquals ( "SimpleEstimator is used for estimating the conditional probability tables of a Bayes network once the structure has been learned . Estimates probabilities directly from data . " , string0 )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( "When set to true ( default is false ) , after a network structure is learned a Markov Blanket correction is applied to the network structure . This ensures that all nodes in the network are part of the Markov blanket of the classifier node . " , string0 )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( "When set to true ( default ) , the initial network used for structure learning is a Naive Bayes Network , that is , a network with an arrow from the classifier node to each other node . When set to false , an empty network is used as initial network structure" , string0 )
assertEquals ( false , k2_0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , searchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( false , boolean0 )
assertEquals ( "8034" , string0 )
assertNotNull ( stringArray0 )
assertEquals ( "The FromFile reads the structure of a Bayes net from a file in BIFF format . " , string0 )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertNotNull ( string0 )
assertEquals ( "The NaiveBayes class generates a fixed Bayes network structure with arrows from the class variable to each of the attribute variables . " , string0 )
assertEquals ( 0 . 0 , bayesNet0 . measureMissingArcs ( ) , 0 . 01D )
assertEquals ( 100000 , k2_0 . getMaxNrOfParents ( ) )
assertEquals ( false , k2_0 . m_bRandomOrder )
assertNotNull ( string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "When set to true , the order of the nodes in the network is random . Default random order is false and the order of the nodes in the dataset is used . In any case , when the network was initialized as Naive Bayes Network , the class variable is first in the ordering though . " , string0 )
assertEquals ( true , boolean0 )
assertEquals ( false , k2_0 . getInitAsNaiveBayes ( ) )
assertNotNull ( enumeration0 )
assertEquals ( false , k2_0 . m_bRandomOrder )
assertEquals ( false , simulatedAnnealing0 . m_bUseArcReversal )
assertEquals ( 1 , simulatedAnnealing0 . m_nSeed )
assertNotNull ( stringArray0 )
assertEquals ( 0 . 999 , simulatedAnnealing0 . m_fDelta , 0 . 01D )
assertEquals ( "Initialization value for random number generator . Setting the seed allows replicability of experiments . " , string0 )
assertEquals ( false , simulatedAnnealing0 . m_bUseArcReversal )
assertEquals ( 0 . 999 , simulatedAnnealing0 . m_fDelta , 0 . 01D )
assertNotNull ( enumeration0 )
assertEquals ( 1 , simulatedAnnealing0 . m_nSeed )
assertEquals ( false , geneticSearch0 . m_bUseTournamentSelection )
assertEquals ( 10 , geneticSearch0 . m_nRuns )
assertEquals ( "Sets the size of the population of descendants that is created each generation . " , string0 )
assertEquals ( false , geneticSearch0 . m_bUseMutation )
assertEquals ( 1 , geneticSearch0 . m_nSeed )
assertEquals ( true , geneticSearch0 . m_bUseMutation )
assertEquals ( true , geneticSearch0 . m_bUseCrossOver )
assertNotNull ( stringArray0 )
assertEquals ( 100 , geneticSearch0 . m_nDescendantPopulationSize )
assertEquals ( false , geneticSearch_BayesNetRepresentation0 . hasCycles ( ) )
assertEquals ( false , geneticSearch_BayesNetRepresentation0 . hasCycles ( ) )
assertEquals ( 10 , geneticSearch0 . m_nRuns )
assertNotNull ( selectedTag0 )
assertEquals ( 10 , globalScoreSearchAlgorithm0 . m_nNrOfFolds )
assertEquals ( true , globalScoreSearchAlgorithm0 . getMarkovBlanketClassifier ( ) )
assertEquals ( 10 , globalScoreSearchAlgorithm0 . m_nNrOfFolds )
assertEquals ( 0 , globalScoreSearchAlgorithm0 . m_nCVType )
assertEquals ( 0 , globalScoreSearchAlgorithm0 . m_nCVType )
assertEquals ( true , globalScoreSearchAlgorithm0 . m_bUseProb )
assertEquals ( 0 , globalScoreSearchAlgorithm0 . m_nCVType )
assertEquals ( true , globalScoreSearchAlgorithm0 . m_bUseProb )
assertEquals ( true , globalScoreSearchAlgorithm0 . m_bUseProb )
assertEquals ( 0 , globalScoreSearchAlgorithm0 . m_nCVType )
assertEquals ( 0 , globalScoreSearchAlgorithm0 . m_nCVType )
assertEquals ( true , globalScoreSearchAlgorithm0 . m_bUseProb )
assertEquals ( 0 , globalScoreSearchAlgorithm0 . m_nCVType )
assertEquals ( 1 , repeatedHillClimber0 . m_nSeed )
assertNotNull ( stringArray0 )
assertEquals ( 10 , repeatedHillClimber0 . m_nRuns )
assertEquals ( "Sets the number of times hill climbing is performed . " , string0 )
assertEquals ( 10 , repeatedHillClimber0 . m_nRuns )
assertNotNull ( enumeration0 )
assertEquals ( 100000 , repeatedHillClimber0 . getMaxNrOfParents ( ) )
assertEquals ( "This Bayes Network learning algorithm determines the maximum weight spanning tree and returns a Naive Bayes network augmented with a tree . \n\nFor more information see : \n\nN . Friedman , D . Geiger , M . Goldszmidt ( 1997 ) . Bayesian network classifiers . Machine Learning . 29 ( 2 - 3 ) : 131 - 163 . " , string0 )
assertEquals ( "8034" , string0 )
assertEquals ( "Select cross validation strategy to be used in searching for networks . LOO - CV = Leave one out cross validation\nk - Fold - CV = k fold cross validation\nCumulative - CV = cumulative cross validation . " , tAN0 . CVTypeTipText ( ) )
assertEquals ( true , enumeration0 . hasMoreElements ( ) )
assertEquals ( false , hillClimber0 . getUseArcReversal ( ) )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( 3 , hillClimber_Operation0 . m_nTail )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( 100000 , hillClimber0 . getMaxNrOfParents ( ) )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( ( - 1 . 0E100 ) , hillClimber_Operation0 . m_fScore , 0 . 01D )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( "8034" , string0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( ( - 1 . 0E100 ) , hillClimber_Operation0 . m_fScore , 0 . 01D )
assertEquals ( 0 , hillClimber_Operation0 . m_nHead )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( 3 , hillClimber_Operation0 . m_nOperation )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( true , hillClimber0 . getInitAsNaiveBayes ( ) )
assertEquals ( false , hillClimber0 . m_bUseArcReversal )
assertEquals ( "8034" , string0 )
assertEquals ( 275 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertEquals ( 2 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertEquals ( "This Bayes Network learning algorithm uses conditional independence tests to find a skeleton , finds V - nodes and applies a set of rules to find the directions of the remaining arrows . " , string0 )
assertNotNull ( string0 )
assertEquals ( 2 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertEquals ( 2 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertEquals ( 3 , iCSSearchAlgorithm0 . maxn ( ) )
assertEquals ( 2 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertEquals ( 2 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertNotNull ( enumeration0 )
assertEquals ( 2 , iCSSearchAlgorithm0 . getMaxCardinality ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "8034" , string0 )
assertEquals ( "The CISearchAlgorithm class supports Bayes net structure search algorithms that are based on conditional independence test ( as opposed to for example score based of cross validation based search algorithms ) . " , string0 )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertNotNull ( stringArray0 )
assertEquals ( false , iBk0 . getMeanSquared ( ) )
assertEquals ( 0 , iBk0 . getWindowSize ( ) )
assertEquals ( 1 , iBk0 . getKNN ( ) )
assertEquals ( "Whether the mean squared error is used rather than mean absolute error when doing cross - validation for regression problems . " , string0 )
assertEquals ( "The number of neighbours to use . " , string0 )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertEquals ( 753 , iBk0 . getKNN ( ) )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertEquals ( 21 , iBk0 . getKNN ( ) )
assertEquals ( false , iBk0 . getMeanSquared ( ) )
assertEquals ( 21 , iBk0 . getKNN ( ) )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertEquals ( false , iBk0 . getMeanSquared ( ) )
assertNotNull ( enumeration0 )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertEquals ( 1 . 0 , double0 , 0 . 01D )
assertEquals ( 1 , iBk0 . getKNN ( ) )
assertEquals ( false , iBk0 . getMeanSquared ( ) )
assertEquals ( 1 , iBk0 . getKNN ( ) )
assertEquals ( 0 , iBk0 . getWindowSize ( ) )
assertEquals ( false , iBk0 . getCrossValidate ( ) )
assertNotNull ( instances1 )
assertEquals ( 753 , iBk0 . getKNN ( ) )
