void test0 ( ) throws Throwable { LayoutStyle . ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle . ComponentPlacement . INDENT ; PreferredGapSettings preferredGapSettings0 = new PreferredGapSettings ( layoutStyle_ComponentPlacement0 , 1148 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PreferredGapSettings ( ComponentPlacement type ) { this . type = type ; sizes = new SpecialGapSizes ( GroupLayout . DEFAULT_SIZE , GroupLayout . DEFAULT_SIZE ) ; }
void test1 ( ) throws Throwable { LayoutStyle . ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle . ComponentPlacement . INDENT ; PreferredGapSettings preferredGapSettings0 = new PreferredGapSettings ( layoutStyle_ComponentPlacement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PreferredGapSettings ( ComponentPlacement type ) { this . type = type ; sizes = new SpecialGapSizes ( GroupLayout . DEFAULT_SIZE , GroupLayout . DEFAULT_SIZE ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "char position " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; verticalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; Set < VWordPosition > vLines = getIntersectingVLines ( ) ; if ( vLines . size ( ) > 0 ) return extractParallelSubblocksSeparatedByLines ( vLines ) ; else return extractParallelSubblocksWithoutLines ( ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "kc | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; List < Block > list0 = verticalBlock0 . extractSequentialSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractSequentialSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; List < Block > result = new LinkedList < Block > ( ) ; VerticalBlock firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstSequentialSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( this . x1 , firstBlock . y2 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "i" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 , 0 , 0 , 1 , 0 ) ; TreeSet < VWordPosition > treeSet0 = new TreeSet < VWordPosition > ( ) ; List < Block > list0 = verticalBlock0 . extractParallelSubblocksSeparatedByLines ( ( Set < VWordPosition > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksSeparatedByLines ( Set < VWordPosition > vLines ) { removeSmallVLinesFrom ( vLines ) ; return extractParallelSubblocksSeparatedBy ( vLines ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "i" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 , 1 , 0 , 1 , 0 ) ; List < Block > list0 = verticalBlock0 . extractSequentialSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractSequentialSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; List < Block > result = new LinkedList < Block > ( ) ; VerticalBlock firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstSequentialSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( this . x1 , firstBlock . y2 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " . " ; stringArray0 [ 1 ] = " . " ; stringArray0 [ 2 ] = " . " ; stringArray0 [ 3 ] = " . " ; stringArray0 [ 4 ] = " . " ; stringArray0 [ 5 ] = " . " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; List < Block > list0 = verticalBlock0 . extractSequentialSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractSequentialSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; List < Block > result = new LinkedList < Block > ( ) ; VerticalBlock firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstSequentialSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( this . x1 , firstBlock . y2 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "kc | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; stringArray0 [ 0 ] = "\" , #6v ( j ? * " ; List < Block > list0 = verticalBlock0 . extractSequentialSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractSequentialSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; List < Block > result = new LinkedList < Block > ( ) ; VerticalBlock firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstSequentialSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( this . x1 , firstBlock . y2 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; CharPosition1 charPosition1_0 = new CharPosition1 ( 0 , 0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 , ( CharPosition ) charPosition1_0 , ( CharPosition ) charPosition1_0 ) ; List < Block > list0 = verticalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; Set < VWordPosition > vLines = getIntersectingVLines ( ) ; if ( vLines . size ( ) > 0 ) return extractParallelSubblocksSeparatedByLines ( vLines ) ; else return extractParallelSubblocksWithoutLines ( ) ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "kc | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; stringArray0 [ 0 ] = "\" , #6v ( j ? * " ; verticalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "p8K - Z - 6OB9LN" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; Set < VWordPosition > set0 = scheme0 . getVLinesPositions ( ) ; List < Block > list0 = verticalBlock0 . extractParallelSubblocksSeparatedByLines ( set0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksSeparatedByLines ( Set < VWordPosition > vLines ) { removeSmallVLinesFrom ( vLines ) ; return extractParallelSubblocksSeparatedBy ( vLines ) ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "p8K - Z - 6OB9LN" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; List < Block > list0 = verticalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; Set < VWordPosition > vLines = getIntersectingVLines ( ) ; if ( vLines . size ( ) > 0 ) return extractParallelSubblocksSeparatedByLines ( vLines ) ; else return extractParallelSubblocksWithoutLines ( ) ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = " . " ; stringArray0 [ 1 ] = " . " ; stringArray0 [ 2 ] = " . " ; stringArray0 [ 3 ] = " . " ; stringArray0 [ 4 ] = " . " ; stringArray0 [ 5 ] = " . " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; List < Block > list0 = verticalBlock0 . extractParallelSubblocksWithoutLines ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksWithoutLines ( ) { List < Block > result = new LinkedList < Block > ( ) ; Block firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstParallelSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( firstBlock . x2 , this . y1 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 3 ] = " - | " ; stringArray0 [ 2 ] = " - | " ; stringArray0 [ 4 ] = " - | " ; stringArray0 [ 0 ] = " - | " ; stringArray0 [ 1 ] = " - | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrivial ( ) ; boolean contains ( int x , int y ) ; boolean contains ( CharPosition pos ) { return contains ( pos . x , pos . y ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrivial ( ) ; boolean contains ( int x , int y ) ; boolean contains ( CharPosition pos ) { return contains ( pos . x , pos . y ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "wrong word position parameters" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; CharPosition1 charPosition1_0 = scheme0 . getPos1 ( ) ; VWordPosition vWordPosition0 = scheme0 . verticalLineAt ( ( CharPosition ) charPosition1_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VWordPosition verticalLineAt ( int x , int y ) { if ( ! contains ( x , y ) ) return null ; char c = charAt ( x , y ) ; if ( c = = ' ' | | c = = ' - ' ) return null ; Set < VWordPosition > v = vWordsAtXs . get ( new Integer ( x ) ) ; if ( v ! = null ) for ( VWordPosition vwp : v ) if ( vwp . contains ( x , y ) ) return vwp ; return null ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "wrong word position parameters" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HWordPosition hWordPosition0 = scheme0 . firstWord_Horizontally ( ) ; CharPosition2 charPosition2_0 = hWordPosition0 . getEnd ( ) ; HWordPosition hWordPosition1 = scheme0 . anyHElementAt ( ( CharPosition ) charPosition2_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HWordPosition anyHElementAt ( int x , int y ) { if ( ! contains ( x , y ) ) return null ; char c = charAt ( x , y ) ; if ( c = = ' ' | | c = = ' | ' ) return null ; Set < HWordPosition > h = hWordsAtYs . get ( new Integer ( y ) ) ; if ( h ! = null ) for ( HWordPosition hwp : h ) if ( hwp . contains ( x , y ) ) return hwp ; return null ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " . " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < HWordPosition > getHLinesPositions ( ) { return Collections . unmodifiableSet ( positions . hLines ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "Pdy - 9yC" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < VWordPosition > getVLinesPositions ( ) { return Collections . unmodifiableSet ( positions . vLines ) ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " | " ; stringArray0 [ 1 ] = " | " ; stringArray0 [ 2 ] = " | " ; stringArray0 [ 3 ] = "8" ; stringArray0 [ 4 ] = " | " ; stringArray0 [ 5 ] = " | " ; stringArray0 [ 6 ] = " | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsComponentName ( String name ) { return names . components . contains ( name ) ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " - " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Scheme ( String . . . strings ) { lines = strings ; calculateAndCheckSize ( ) ; recognizeContent ( ) ; extractNamesFromPositions ( ) ; organizeFastElementsSearch ( ) ; recognizeGapsAtLines ( ) ; }
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "cCQrC9N" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HWordPosition anyHElementAt ( int x , int y ) { if ( ! contains ( x , y ) ) return null ; char c = charAt ( x , y ) ; if ( c = = ' ' | | c = = ' | ' ) return null ; Set < HWordPosition > h = hWordsAtYs . get ( new Integer ( y ) ) ; if ( h ! = null ) for ( HWordPosition hwp : h ) if ( hwp . contains ( x , y ) ) return hwp ; return null ; }
void test18 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "wrong word position parameters" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test19 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " | " ; stringArray0 [ 1 ] = " | " ; stringArray0 [ 2 ] = " | " ; stringArray0 [ 3 ] = "8" ; stringArray0 [ 4 ] = " | " ; stringArray0 [ 5 ] = " | " ; stringArray0 [ 6 ] = " | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test20 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " . " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HWordPosition hWordPosition0 = scheme0 . gapAt ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrivial ( ) ; boolean contains ( int x , int y ) ; boolean contains ( CharPosition pos ) { return contains ( pos . x , pos . y ) ; }
void test21 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "cCQ | C9N" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrivial ( ) ; boolean contains ( int x , int y ) ; boolean contains ( CharPosition pos ) { return contains ( pos . x , pos . y ) ; }
void test22 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VWordPosition vWordPosition0 = scheme0 . verticalLineAt ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VWordPosition verticalLineAt ( int x , int y ) { if ( ! contains ( x , y ) ) return null ; char c = charAt ( x , y ) ; if ( c = = ' ' | | c = = ' - ' ) return null ; Set < VWordPosition > v = vWordsAtXs . get ( new Integer ( x ) ) ; if ( v ! = null ) for ( VWordPosition vwp : v ) if ( vwp . contains ( x , y ) ) return vwp ; return null ; }
void test23 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = " | " ; stringArray0 [ 1 ] = " | " ; stringArray0 [ 2 ] = " | " ; stringArray0 [ 3 ] = "8" ; stringArray0 [ 4 ] = " | " ; stringArray0 [ 5 ] = " | " ; stringArray0 [ 6 ] = " | " ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return y2 - y1 ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "cCQrC9N" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HWordPosition gapAtLine ( WordPosition line ) { if ( gapsAtLines = = null ) return null ; return gapsAtLines . get ( line ) ; }
void test25 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "B" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( scheme0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HorizontalBlock ( Scheme scheme , int x1 , int y1 , int x2 , int y2 ) { super ( scheme , x1 , y1 , x2 , y2 ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnoprstuvw - yz_1234567890" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 , 0 , 0 , 62 , 1 ) ; List < Block > list0 = horizontalBlock0 . extractSequentialSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractSequentialSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; List < Block > result = new LinkedList < Block > ( ) ; VerticalBlock firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstSequentialSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( this . x1 , firstBlock . y2 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnoprstuvw - yz_1234567890" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 , 0 , 0 , 62 , 1 ) ; List < Block > list0 = horizontalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; Set < VWordPosition > vLines = getIntersectingVLines ( ) ; if ( vLines . size ( ) > 0 ) return extractParallelSubblocksSeparatedByLines ( vLines ) ; else return extractParallelSubblocksWithoutLines ( ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "B" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; CharPosition1 charPosition1_0 = new CharPosition1 ( 0 , 1 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( scheme0 , ( CharPosition ) charPosition1_0 , ( CharPosition ) charPosition1_0 ) ; List < Block > list0 = horizontalBlock0 . extractSequentialSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractSequentialSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; List < Block > result = new LinkedList < Block > ( ) ; VerticalBlock firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstSequentialSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( this . x1 , firstBlock . y2 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; horizontalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "yv" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; List < Block > list0 = horizontalBlock0 . extractParallelSubblocks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocks ( ) { this . optimize ( ) ; if ( isTrivial ( ) ) return new LinkedList < Block > ( ) ; Set < VWordPosition > vLines = getIntersectingVLines ( ) ; if ( vLines . size ( ) > 0 ) return extractParallelSubblocksSeparatedByLines ( vLines ) ; else return extractParallelSubblocksWithoutLines ( ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "B" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; CharPosition1 charPosition1_0 = new CharPosition1 ( 0 , 1 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; HashSet < HWordPosition > hashSet0 = new HashSet < HWordPosition > ( ) ; HWordPosition hWordPosition0 = new HWordPosition ( ( CharPosition ) charPosition1_0 ) ; hashSet0 . add ( hWordPosition0 ) ; List < Block > list0 = horizontalBlock0 . extractParallelSubblocksSeparatedByLines ( ( Set < HWordPosition > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "B" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; stringArray0 [ 0 ] = " > nI5UpSz > \"" ; CharPosition1 charPosition1_0 = new CharPosition1 ( 0 , 1 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; HashSet < HWordPosition > hashSet0 = new HashSet < HWordPosition > ( ) ; HWordPosition hWordPosition0 = new HWordPosition ( ( CharPosition ) charPosition1_0 ) ; hashSet0 . add ( hWordPosition0 ) ; horizontalBlock0 . extractParallelSubblocksSeparatedByLines ( ( Set < HWordPosition > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksSeparatedByLines ( Set < VWordPosition > vLines ) { removeSmallVLinesFrom ( vLines ) ; return extractParallelSubblocksSeparatedBy ( vLines ) ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "yv" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; HashSet < HWordPosition > hashSet0 = new HashSet < HWordPosition > ( ) ; List < Block > list0 = horizontalBlock0 . extractParallelSubblocksSeparatedByLines ( ( Set < HWordPosition > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksSeparatedByLines ( Set < VWordPosition > vLines ) { removeSmallVLinesFrom ( vLines ) ; return extractParallelSubblocksSeparatedBy ( vLines ) ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; HashSet < HWordPosition > hashSet0 = new HashSet < HWordPosition > ( ) ; List < Block > list0 = horizontalBlock0 . extractParallelSubblocksSeparatedByLines ( ( Set < HWordPosition > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksSeparatedByLines ( Set < VWordPosition > vLines ) { removeSmallVLinesFrom ( vLines ) ; return extractParallelSubblocksSeparatedBy ( vLines ) ; }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VerticalBlock verticalBlock0 = new VerticalBlock ( scheme0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( ( Block ) verticalBlock0 ) ; List < Block > list0 = horizontalBlock0 . extractParallelSubblocksWithoutLines ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Block > extractParallelSubblocksWithoutLines ( ) { List < Block > result = new LinkedList < Block > ( ) ; Block firstBlock ; VerticalBlock theRest = this ; do { firstBlock = theRest . extractFirstParallelSubblock ( ) ; theRest = theRest . cloneWith ( new CharPosition1 ( firstBlock . x2 , this . y1 ) ) ; firstBlock . optimize ( ) ; if ( ! firstBlock . isTrivial ( ) ) result . add ( firstBlock ) ; theRest . optimize ( ) ; } while ( ! theRest . isTrivial ( ) ) ; return result ; }
void test0 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , ( - 4 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test1 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test2 ( ) throws Throwable { CharPosition charPosition0 = new CharPosition ( 346 , 346 ) ; VWordPosition vWordPosition0 = new VWordPosition ( 346 , charPosition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String textAt ( int x1 , int x2 , int y ) { try { return lines [ y ] . substring ( x1 , x2 ) ; } catch ( RuntimeException re ) { throw new IllegalArgumentException ( "Improper subline coodinates . " ) ; } }
void test3 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 1589 , 1589 , 1589 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test4 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test5 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 1 , ( - 1175 ) , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return y2 - y1 ; }
void test7 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , ( - 4 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test8 ( ) throws Throwable { CharPosition charPosition0 = new CharPosition ( 346 , 346 ) ; VWordPosition vWordPosition0 = new VWordPosition ( 346 , charPosition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test9 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , ( - 4 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test10 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test11 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test12 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 1 , ( - 1175 ) , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test13 ( ) throws Throwable { CharPosition charPosition0 = new CharPosition ( 346 , 346 ) ; VWordPosition vWordPosition0 = new VWordPosition ( 346 , charPosition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test14 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test15 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( ( - 2 ) , ( - 26 ) , ( - 2 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return y2 - y1 ; }
void test16 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test17 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 2 , 2 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test18 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test19 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , ( - 4 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test20 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 4 , 4 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test21 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return y2 - y1 ; }
void test22 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 32 , 32 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test23 ( ) throws Throwable { CharPosition charPosition0 = new CharPosition ( ( - 66 ) , 346 ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VWordPosition vWordPosition0 = new VWordPosition ( charPosition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test24 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , ( - 4 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test25 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 4 , 4 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test26 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test27 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "H" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return y2 - y1 ; }
void test28 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test29 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 0 , ( - 4 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return y2 - y1 ; }
void test30 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 1589 , 1589 , 1589 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrivial ( ) ; boolean contains ( int x , int y ) ; boolean contains ( CharPosition pos ) { return contains ( pos . x , pos . y ) ; }
void test0 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 45 , 45 , 45 ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; CharPosition2 charPosition2_0 = scheme0 . getPos2 ( ) ; boolean boolean0 = vWordPosition0 . contains ( ( CharPosition ) charPosition2_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( int x , int y ) ; boolean contains ( CharPosition pos ) { return contains ( pos . x , pos . y ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( scheme0 ) ; HWordPosition hWordPosition0 = new HWordPosition ( ( Block ) horizontalBlock0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( scheme0 ) ; HWordPosition hWordPosition0 = new HWordPosition ( 2 , 2 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( scheme0 ) ; HWordPosition hWordPosition0 = new HWordPosition ( 2 , 2 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String textAt ( int x1 , int x2 , int y ) { try { return lines [ y ] . substring ( x1 , x2 ) ; } catch ( RuntimeException re ) { throw new IllegalArgumentException ( "Improper subline coodinates . " ) ; } }
void test3 ( ) throws Throwable { CharPosition charPosition0 = new CharPosition ( 1013 , 1013 ) ; HWordPosition hWordPosition0 = new HWordPosition ( 21 , charPosition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test4 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 2 , 2 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test5 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 28 , 28 , 28 ) ; CharPosition2 charPosition2_0 = vWordPosition0 . getEnd ( ) ; HWordPosition hWordPosition0 = new HWordPosition ( ( CharPosition ) charPosition2_0 , 28 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test6 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 2 , 2 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test8 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( ( - 764 ) , ( - 764 ) , ( - 764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test9 ( ) throws Throwable { VWordPosition vWordPosition0 = new VWordPosition ( 28 , 28 , 28 ) ; CharPosition2 charPosition2_0 = vWordPosition0 . getEnd ( ) ; HWordPosition hWordPosition0 = new HWordPosition ( ( CharPosition ) charPosition2_0 , 28 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test10 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test11 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( ( - 764 ) , ( - 764 ) , ( - 764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test12 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( ( - 764 ) , ( - 764 ) , ( - 764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test13 ( ) throws Throwable { CharPosition charPosition0 = new CharPosition ( 1013 , 1013 ) ; HWordPosition hWordPosition0 = new HWordPosition ( 21 , charPosition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test14 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 2 , 2 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test15 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test16 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test17 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( ( - 778 ) , ( - 778 ) , ( - 778 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return x2 - x1 ; }
void test18 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( ( - 778 ) , ( - 778 ) , ( - 778 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test19 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test20 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test21 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( ( - 778 ) , ( - 778 ) , ( - 778 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test22 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test23 ( ) throws Throwable { HWordPosition hWordPosition0 = new HWordPosition ( 1 , 1 , 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; Scheme scheme0 = new Scheme ( stringArray0 ) ; HorizontalBlock horizontalBlock0 = new HorizontalBlock ( scheme0 ) ; HWordPosition hWordPosition0 = new HWordPosition ( ( Block ) horizontalBlock0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this = = HORIZONTAL ? "horizontal" : "vertical" ; }
