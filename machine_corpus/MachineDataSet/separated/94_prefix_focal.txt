void test1 ( ) throws Throwable { Boolean boolean0 = Boolean . valueOf ( true ) ; JCLO jCLO0 = new JCLO ( " | : 8#2IzBh5" , ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String r = "" ; boolean first = true ; for ( int i = 0 ; i < fields . length ; i + + ) { Field field = fields [ i ] ; String key = field . getName ( ) ; Class type = field . getType ( ) ; Object object = getObject ( field ) ; if ( ! first ) r + = "\n" ; first = false ; if ( type . isArray ( ) ) { r + = getArrayType ( type ) + " [ ] " + " : " + key + " = " ; r + = java . util . Arrays . toString ( ( Object [ ] ) object ) ; } else { r + = type . toString ( ) . replaceFirst ( "class java . lang . " , "" ) + " : " + key + " = " + object ; } } return ( r ) ; }
void test5 ( ) throws Throwable { JCLO jCLO0 = new JCLO ( ( Object ) "11" ) ; float [ ] floatArray0 = jCLO0 . getFloats ( " - hash int\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float [ ] getFloats ( String key ) { return ( ( float [ ] ) getValue ( key ) ) ; }
void test6 ( ) throws Throwable { Float float0 = new Float ( ( double ) ' * ' ) ; JCLO jCLO0 = new JCLO ( " - " , ( Object ) float0 ) ; byte [ ] byteArray0 = jCLO0 . getBytes ( " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytes ( String key ) { return ( ( byte [ ] ) getValue ( key ) ) ; }
void test8 ( ) throws Throwable { Integer integer0 = new Integer ( ( int ) ( byte ) ( - 34 ) ) ; JCLO jCLO0 = new JCLO ( " - 34" , ( Object ) integer0 ) ; short [ ] shortArray0 = jCLO0 . getShorts ( " - 34" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] getShorts ( String key ) { return ( ( short [ ] ) getValue ( key ) ) ; }
void test9 ( ) throws Throwable { JCLO jCLO0 = new JCLO ( ( Object ) "11" ) ; char [ ] charArray0 = jCLO0 . getChars ( " - hash int\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] getChars ( String key ) { return ( ( char [ ] ) getValue ( key ) ) ; }
void test10 ( ) throws Throwable { Boolean boolean0 = Boolean . TRUE ; JCLO jCLO0 = new JCLO ( "u0`guO . " , ( Object ) boolean0 ) ; String string0 = jCLO0 . getString ( "u0`guO . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String key ) { return ( ( String ) getValue ( key ) ) ; }
void test11 ( ) throws Throwable { Float float0 = new Float ( ( double ) ' * ' ) ; JCLO jCLO0 = new JCLO ( " - " , ( Object ) float0 ) ; double [ ] doubleArray0 = jCLO0 . getDoubles ( " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] getDoubles ( String key ) { return ( ( double [ ] ) getValue ( key ) ) ; }
void test14 ( ) throws Throwable { Float float0 = new Float ( ( double ) ' * ' ) ; JCLO jCLO0 = new JCLO ( " - " , ( Object ) float0 ) ; String [ ] stringArray0 = jCLO0 . getStrings ( " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStrings ( String key ) { return ( ( String [ ] ) getValue ( key ) ) ; }
void test16 ( ) throws Throwable { Byte byte0 = Byte . valueOf ( ( byte ) 6 ) ; JCLO jCLO0 = new JCLO ( "class java . lang . " , ( Object ) byte0 ) ; long [ ] longArray0 = jCLO0 . getLongs ( "0 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long [ ] getLongs ( String key ) { return ( ( long [ ] ) getValue ( key ) ) ; }
void test17 ( ) throws Throwable { JCLO jCLO0 = new JCLO ( ( Object ) "11" ) ; int [ ] intArray0 = jCLO0 . getInts ( " - hash int\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getInts ( String key ) { return ( ( int [ ] ) getValue ( key ) ) ; }
void test19 ( ) throws Throwable { Float float0 = new Float ( ( - 1 . 0 ) ) ; String [ ] [ ] stringArray0 = new String [ 10 ] [ 10 ] ; JCLO jCLO0 = new JCLO ( ( Object ) float0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String r = "" ; boolean first = true ; for ( int i = 0 ; i < fields . length ; i + + ) { Field field = fields [ i ] ; String key = field . getName ( ) ; Class type = field . getType ( ) ; Object object = getObject ( field ) ; if ( ! first ) r + = "\n" ; first = false ; if ( type . isArray ( ) ) { r + = getArrayType ( type ) + " [ ] " + " : " + key + " = " ; r + = java . util . Arrays . toString ( ( Object [ ] ) object ) ; } else { r + = type . toString ( ) . replaceFirst ( "class java . lang . " , "" ) + " : " + key + " = " + object ; } } return ( r ) ; }
void test20 ( ) throws Throwable { JCLO jCLO0 = new JCLO ( ( Object ) "11" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String usage ( ) { boolean additional = false ; String a [ ] = new String [ fields . length ] ; int count = 0 ; for ( int i = 0 ; i < fields . length ; i + + ) { Field field = fields [ i ] ; String key = field . getName ( ) ; Class type = field . getType ( ) ; if ( key . equals ( "additional" ) ) continue ; if ( prefix ! = null ) { if ( ! key . startsWith ( prefix ) ) continue ; else key = key . replaceFirst ( "^" + prefix , "" ) ; } if ( Modifier . isFinal ( field . getModifiers ( ) ) ) continue ; key = key . replaceFirst ( "^_ ( [ 0 - 9 ] ) " , "$1" ) ; key = key . replaceAll ( "__" , " - " ) ; key = key . replaceAll ( "_\\$" , " . " ) ; a [ count + + ] = ( doubleDashes ? " - - " : " - " ) + key + getUsageType ( type ) + "\n" ; } String r = "" ; java . util . Arrays . sort ( a , 0 , count ) ; for ( int i = 0 ; i < a . length ; i + + ) if ( a [ i ] ! = null ) r + = a [ i ] ; return ( r ) ; }
void test21 ( ) throws Throwable { Float float0 = new Float ( ( double ) ' * ' ) ; JCLO jCLO0 = new JCLO ( " - " , ( Object ) float0 ) ; String string0 = jCLO0 . usage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String usage ( ) { boolean additional = false ; String a [ ] = new String [ fields . length ] ; int count = 0 ; for ( int i = 0 ; i < fields . length ; i + + ) { Field field = fields [ i ] ; String key = field . getName ( ) ; Class type = field . getType ( ) ; if ( key . equals ( "additional" ) ) continue ; if ( prefix ! = null ) { if ( ! key . startsWith ( prefix ) ) continue ; else key = key . replaceFirst ( "^" + prefix , "" ) ; } if ( Modifier . isFinal ( field . getModifiers ( ) ) ) continue ; key = key . replaceFirst ( "^_ ( [ 0 - 9 ] ) " , "$1" ) ; key = key . replaceAll ( "__" , " - " ) ; key = key . replaceAll ( "_\\$" , " . " ) ; a [ count + + ] = ( doubleDashes ? " - - " : " - " ) + key + getUsageType ( type ) + "\n" ; } String r = "" ; java . util . Arrays . sort ( a , 0 , count ) ; for ( int i = 0 ; i < a . length ; i + + ) if ( a [ i ] ! = null ) r + = a [ i ] ; return ( r ) ; }
void test22 ( ) throws Throwable { JCLO jCLO0 = new JCLO ( "" , " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String usage ( ) { boolean additional = false ; String a [ ] = new String [ fields . length ] ; int count = 0 ; for ( int i = 0 ; i < fields . length ; i + + ) { Field field = fields [ i ] ; String key = field . getName ( ) ; Class type = field . getType ( ) ; if ( key . equals ( "additional" ) ) continue ; if ( prefix ! = null ) { if ( ! key . startsWith ( prefix ) ) continue ; else key = key . replaceFirst ( "^" + prefix , "" ) ; } if ( Modifier . isFinal ( field . getModifiers ( ) ) ) continue ; key = key . replaceFirst ( "^_ ( [ 0 - 9 ] ) " , "$1" ) ; key = key . replaceAll ( "__" , " - " ) ; key = key . replaceAll ( "_\\$" , " . " ) ; a [ count + + ] = ( doubleDashes ? " - - " : " - " ) + key + getUsageType ( type ) + "\n" ; } String r = "" ; java . util . Arrays . sort ( a , 0 , count ) ; for ( int i = 0 ; i < a . length ; i + + ) if ( a [ i ] ! = null ) r + = a [ i ] ; return ( r ) ; }
void test23 ( ) throws Throwable { Byte byte0 = Byte . valueOf ( ( byte ) 6 ) ; JCLO jCLO0 = new JCLO ( "class java . lang . " , ( Object ) byte0 ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "0 . 0" ; jCLO0 . parse ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String usage ( ) { boolean additional = false ; String a [ ] = new String [ fields . length ] ; int count = 0 ; for ( int i = 0 ; i < fields . length ; i + + ) { Field field = fields [ i ] ; String key = field . getName ( ) ; Class type = field . getType ( ) ; if ( key . equals ( "additional" ) ) continue ; if ( prefix ! = null ) { if ( ! key . startsWith ( prefix ) ) continue ; else key = key . replaceFirst ( "^" + prefix , "" ) ; } if ( Modifier . isFinal ( field . getModifiers ( ) ) ) continue ; key = key . replaceFirst ( "^_ ( [ 0 - 9 ] ) " , "$1" ) ; key = key . replaceAll ( "__" , " - " ) ; key = key . replaceAll ( "_\\$" , " . " ) ; a [ count + + ] = ( doubleDashes ? " - - " : " - " ) + key + getUsageType ( type ) + "\n" ; } String r = "" ; java . util . Arrays . sort ( a , 0 , count ) ; for ( int i = 0 ; i < a . length ; i + + ) if ( a [ i ] ! = null ) r + = a [ i ] ; return ( r ) ; }
void test24 ( ) throws Throwable { String [ ] [ ] stringArray0 = new String [ 3 ] [ 2 ] ; String [ ] stringArray1 = new String [ 1 ] ; stringArray1 [ 0 ] = " - 60" ; stringArray0 [ 0 ] = stringArray1 ; JCLO jCLO0 = new JCLO ( ( Object ) " - 60" , ( String [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( String args [ ] ) { for ( int i = 0 ; i < args . length ; i + + ) { if ( ! args [ i ] . startsWith ( " - " ) ) { parseAdditional ( args , i ) ; return ; } doubleDashes = args [ i ] . startsWith ( " - - " ) ; hasEquals = args [ i ] . indexOf ( " = " ) ! = - 1 ; String key = getKey ( args [ i ] ) ; Field field = getField ( key ) ; if ( field = = null ) { throw ( new IllegalArgumentException ( "No such option : \"" + key + "\"" ) ) ; } Class type = field . getType ( ) ; String name = type . getName ( ) ; if ( type . isArray ( ) ) name = type . getComponentType ( ) . getName ( ) ; String value = null ; if ( name . equals ( "boolean" ) ) value = getBooleanValue ( args [ i ] ) ; else if ( doubleDashes | | hasEquals ) value = getEqualsValue ( args [ i ] ) ; else value = args [ + + i ] ; Object o = makeObject ( name , value ) ; if ( o = = null ) continue ; if ( type . isArray ( ) ) o = addToArray ( field , o ) ; setObject ( field , o ) ; } }
