void test0 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ( Node ) null , 1L , 2 , 2 ) ; long long0 = defaultNode0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test1 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1792L ) ; DefaultNode defaultNode0 = new DefaultNode ( ( Node ) dirtyNode0 , ( long ) 0 , 0 , ( - 1781 ) ) ; int int0 = defaultNode0 . compareTo ( ( Object ) defaultNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test2 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getY ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test3 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test5 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setVisibility ( ( float ) 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getVisibility ( ) { return visibility ; }
void test6 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getTotal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test7 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1792L ) ; DefaultNode defaultNode0 = new DefaultNode ( ( Node ) dirtyNode0 , ( long ) 0 , 0 , ( - 1781 ) ) ; defaultNode0 . setX ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test8 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; String string0 = defaultNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test9 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test11 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ( Node ) null , 1L , 2 , 2 ) ; Node [ ] nodeArray0 = defaultNode0 . getAllChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test12 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test13 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setCost ( ( float ) 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getCost ( ) { return cost ; }
void test14 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ( Node ) null , 1L , 2 , 2 ) ; defaultNode0 . addChildNode ( ( Node ) defaultNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test15 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setParent ( ( Node ) defaultNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test16 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setY ( ( float ) 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test17 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getZ ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test18 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setData ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test19 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setLocation ( 1258 , 1258 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test20 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ( Node ) null , 1L , 2 , 2 ) ; defaultNode0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test21 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setTotal ( ( float ) 1607L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test23 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setZ ( ( float ) 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getZ ( ) { return z ; }
void test24 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; float float0 = defaultNode0 . getVisibility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test26 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setLocation ( ( - 1635 . 1593F ) , ( float ) 0L , ( - 1635 . 1593F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getTotal ( ) { return total ; }
void test27 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ( Node ) null , 1L , 2 , 2 ) ; defaultNode0 . setClosed ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test28 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return ( state & CLOSED ) > 0 ; }
void test29 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; boolean boolean0 = defaultNode0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test30 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setOpen ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test31 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test32 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; boolean boolean0 = defaultNode0 . isOpen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test33 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setVisible ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test34 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setVisible ( true ) ; boolean boolean0 = defaultNode0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getVisibility ( ) { return visibility ; }
void test35 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; boolean boolean0 = defaultNode0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test36 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setScore ( ( - 121 . 10783F ) ) ; DefaultNode defaultNode1 = new DefaultNode ( ) ; int int0 = defaultNode0 . compareTo ( defaultNode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScore ( ) { return score ; }
void test37 ( ) throws Throwable { DefaultNode defaultNode0 = new DefaultNode ( ) ; defaultNode0 . setScore ( ( - 121 . 10783F ) ) ; DefaultNode defaultNode1 = new DefaultNode ( ) ; int int0 = defaultNode1 . compareTo ( defaultNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScore ( ) { return score ; }
void test0 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1952L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test1 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test2 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test3 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 1594L ) , 1353 , 1353 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test4 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test5 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test6 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return y ; }
void test7 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test8 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return y ; }
void test9 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 1594L ) , 1353 , 1353 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test10 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1673L , ( - 10 ) , ( - 10 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSolid ( ) { throw new RuntimeException ( "Method not implemented ! " ) ; }
void test11 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test12 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test13 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visibility > 0 . 0f ; }
void test14 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test15 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1952L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test16 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 17L , ( - 932 ) , ( - 932 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSolid ( boolean b ) { throw new RuntimeException ( "Method not implemented ! " ) ; }
void test17 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test18 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test19 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test20 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test21 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test22 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test23 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test24 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return y ; }
void test25 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 17L , ( - 932 ) , ( - 932 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test26 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test27 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test28 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1673L , ( - 10 ) , ( - 10 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test29 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return ( state & CLOSED ) > 0 ; }
void test30 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test31 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return ( state & CLOSED ) > 0 ; }
void test32 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) { return ( state & OPEN ) > 0 ; }
void test33 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test34 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1862L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test35 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test36 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test37 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1952L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object obj ) { return compareTo ( ( DirtyNode ) obj ) ; }
void test38 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( 1952L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object obj ) { return compareTo ( ( DirtyNode ) obj ) ; }
void test39 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( - 392L ) , 133 , 133 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test40 ( ) throws Throwable { DirtyNode dirtyNode0 = new DirtyNode ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test0 ( ) throws Throwable { DefaultPath defaultPath0 = new DefaultPath ( ) ; int int0 = defaultPath0 . length ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int length ( ) ; Node next ( ) ; boolean isEmpty ( ) ; Iterator iterator ( ) ; Node [ ] asNodeArray ( ) ; }
void test1 ( ) throws Throwable { Node [ ] nodeArray0 = new Node [ 5 ] ; DefaultPath defaultPath0 = new DefaultPath ( nodeArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; Iterator iterator ( ) ; Node [ ] asNodeArray ( ) ; }
void test2 ( ) throws Throwable { Node [ ] nodeArray0 = new Node [ 5 ] ; DefaultPath defaultPath0 = new DefaultPath ( nodeArray0 ) ; Node [ ] nodeArray1 = defaultPath0 . asNodeArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return equals ( ( DirtyNode ) obj ) ; }
void test4 ( ) throws Throwable { Node [ ] nodeArray0 = new Node [ 5 ] ; DefaultNode defaultNode0 = new DefaultNode ( ) ; DefaultNode defaultNode1 = new DefaultNode ( ( Node ) defaultNode0 , 7L , 0 , 0 ) ; nodeArray0 [ 4 ] = ( Node ) defaultNode1 ; DefaultPath defaultPath0 = new DefaultPath ( nodeArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test5 ( ) throws Throwable { DefaultPath defaultPath0 = new DefaultPath ( ) ; defaultPath0 . reconstruct ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; Iterator iterator ( ) ; Node [ ] asNodeArray ( ) ; }
void test6 ( ) throws Throwable { Node [ ] nodeArray0 = new Node [ 5 ] ; DefaultPath defaultPath0 = new DefaultPath ( nodeArray0 ) ; String string0 = defaultPath0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test7 ( ) throws Throwable { Node [ ] nodeArray0 = new Node [ 5 ] ; DefaultNode defaultNode0 = new DefaultNode ( ) ; DefaultNode defaultNode1 = new DefaultNode ( ( Node ) defaultNode0 , 7L , 0 , 0 ) ; nodeArray0 [ 4 ] = ( Node ) defaultNode1 ; DefaultPath defaultPath0 = new DefaultPath ( nodeArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test0 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumDead ( ) { return numDead ; }
void test1 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test2 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test3 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumDead ( ) { return numDead ; }
void test4 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 1324L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test5 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test6 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test7 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test8 ( ) throws Throwable { GameState gameState0 = new GameState ( 6L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test9 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test10 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumDead ( ) { return numDead ; }
void test11 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test12 ( ) throws Throwable { GameState gameState0 = new GameState ( 1328L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentRound ( ) { return currentRound ; }
void test13 ( ) throws Throwable { GameState gameState0 = new GameState ( 6L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test14 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGameState ( ) { return gamestate ; }
void test15 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test16 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumDead ( ) { return numDead ; }
void test17 ( ) throws Throwable { GameState gameState0 = new GameState ( ( - 6L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test18 ( ) throws Throwable { GameState gameState0 = new GameState ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumDead ( ) { return numDead ; }
void test19 ( ) throws Throwable { GameState gameState0 = new GameState ( 6L ) ; Player player0 = new Player ( 1 , "glWindowPos4dvMESA" , "glWindowPos4dvMESA" , 1 ) ; gameState0 . addPlayer ( player0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test20 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test21 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test22 ( ) throws Throwable { GameState gameState0 = new GameState ( 1321L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test23 ( ) throws Throwable { GameState gameState0 = new GameState ( 1328L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test24 ( ) throws Throwable { GameState gameState0 = new GameState ( 1328L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test25 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test26 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test27 ( ) throws Throwable { GameState gameState0 = new GameState ( 1328L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test28 ( ) throws Throwable { GameState gameState0 = new GameState ( 0L ) ; Player player0 = new Player ( 1 , "glReplacementCodeuiColor4fNormal3fVertex3fSUN" , "glReplacementCodeuiColor4fNormal3fVertex3fSUN" , 1 ) ; gameState0 . addPlayer ( player0 ) ; player0 . setConnected ( false ) ; gameState0 . pack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test29 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGamestart ( ) { return gamestart ; }
void test30 ( ) throws Throwable { GameState gameState0 = new GameState ( ) ; Player player0 = new Player ( 13 , "glConvolutionFilter1D" , 13 ) ; gameState0 . addPlayer ( player0 ) ; Player player1 = new Player ( 2305 , "glConvolutionFilter1D" , 2305 ) ; player0 . boss = ( state . Party ) player1 ; byte [ ] byteArray0 = gameState0 . pack ( ) ; gameState0 . unpack ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test31 ( ) throws Throwable { GameState gameState0 = new GameState ( 1328L ) ; Player player0 = new Player ( 23 , "glWindowPos4d@0vMSA" , "glWindowPos4d@0vMSA" , 23 ) ; gameState0 . addPlayer ( player0 ) ; Player player1 = ( Player ) player0 . gangBoss ( ) ; player1 . id = 18 ; gameState0 . addPlayer ( player0 ) ; gameState0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumOfPlayers ( ) { return numOfPlayers ; }
void test0 ( ) throws Throwable { Party party0 = new Party ( ) ; int int0 = party0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Party party0 = new Party ( ) ; party0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test2 ( ) throws Throwable { Party party0 = new Party ( ) ; Party party1 = party0 . gangBoss ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoss ( ) { return boss = = null ; }
void test4 ( ) throws Throwable { Party party0 = new Party ( ) ; party0 . add ( party0 ) ; party0 . add ( party0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoss ( ) { return boss = = null ; }
void test5 ( ) throws Throwable { Party party0 = new Party ( ) ; party0 . remove ( ( Party ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test6 ( ) throws Throwable { Party party0 = new Party ( ) ; party0 . remove ( party0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test7 ( ) throws Throwable { Party party0 = new Party ( ) ; LinkedList < Party > linkedList0 = party0 . getSubparty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LinkedList < Party > getSubparty ( ) { LinkedList < Party > plist = new LinkedList < Party > ( ) ; Party tmp ; plist . add ( this ) ; for ( tmp = head ; tmp ! = null ; tmp = tmp . next ) { plist . addAll ( tmp . getSubparty ( ) ) ; } return plist ; }
void test0 ( ) throws Throwable { Player player0 = new Player ( ( - 11 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStrength ( ) { return strength ; }
void test1 ( ) throws Throwable { Player player0 = new Player ( 1394 , "" , 1394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMoney ( ) { return money ; }
void test2 ( ) throws Throwable { Player player0 = new Player ( 13 , "tUdXjP6j" , 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int gangStrength ( ) { int str = 0 ; LinkedList < Party > gang = gangBoss ( ) . getSubparty ( ) ; for ( Party p : gang ) { str + = ( ( Player ) p ) . strength ; } return str ; }
void test3 ( ) throws Throwable { Player player0 = new Player ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int gangStrength ( ) { int str = 0 ; LinkedList < Party > gang = gangBoss ( ) . getSubparty ( ) ; for ( Party p : gang ) { str + = ( ( Player ) p ) . strength ; } return str ; }
void test4 ( ) throws Throwable { Player player0 = new Player ( 1394 , "" , 1394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test5 ( ) throws Throwable { Player player0 = new Player ( 13 , "tUdXjP6j" , 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeOfDeath ( ) { return deathtime ; }
void test6 ( ) throws Throwable { Player player0 = new Player ( 0 , ( String ) null , ( String ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int gangStrength ( ) { int str = 0 ; LinkedList < Party > gang = gangBoss ( ) . getSubparty ( ) ; for ( Party p : gang ) { str + = ( ( Player ) p ) . strength ; } return str ; }
void test7 ( ) throws Throwable { Player player0 = new Player ( 225 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test8 ( ) throws Throwable { Player player0 = new Player ( 1394 , "" , 1394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPictureId ( ) { return pictureid ; }
void test9 ( ) throws Throwable { Player player0 = new Player ( 1668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test10 ( ) throws Throwable { Player player0 = new Player ( 1394 , "" , 1394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeOfDeath ( ) { return deathtime ; }
void test11 ( ) throws Throwable { Player player0 = new Player ( 1668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return ! alive ; }
void test12 ( ) throws Throwable { Player player0 = new Player ( 0 , ( String ) null , ( String ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStrength ( ) { return strength ; }
void test13 ( ) throws Throwable { Player player0 = new Player ( 1394 , "" , 1394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return ! alive ; }
void test14 ( ) throws Throwable { Player player0 = new Player ( 0 , ( String ) null , ( String ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPictureId ( ) { return pictureid ; }
void test15 ( ) throws Throwable { Player player0 = new Player ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test16 ( ) throws Throwable { Player player0 = new Player ( ( - 13 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return x ; }
void test17 ( ) throws Throwable { Player player0 = new Player ( 1668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test18 ( ) throws Throwable { Player player0 = new Player ( 1668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return connected ; }
void test19 ( ) throws Throwable { Player player0 = new Player ( 13 , "tUdXjP6j" , 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStrength ( ) { return strength ; }
void test20 ( ) throws Throwable { Player player0 = new Player ( 1394 , "" , 1394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return connected ; }
void test21 ( ) throws Throwable { Player player0 = new Player ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return ! alive ; }
void test22 ( ) throws Throwable { Player player0 = new Player ( 0 , ( String ) null , ( String ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDead ( ) { return ! alive ; }
void test23 ( ) throws Throwable { Player player0 = new Player ( 0 , ( String ) null , ( String ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return y ; }
void test24 ( ) throws Throwable { Player player0 = new Player ( 13 , "tUdXjP6j" , 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeOfDeath ( ) { return deathtime ; }
void test25 ( ) throws Throwable { Player player0 = new Player ( 225 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return y ; }
void test26 ( ) throws Throwable { Player player0 = new Player ( ( - 13 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test27 ( ) throws Throwable { Player player0 = new Player ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { ActionFactory actionFactory0 = ActionFactory . getInstance ( ) ; Action action0 = actionFactory0 . createAction ( 0 , ( int ) ( byte ) ( - 78 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Actor getActor ( Player player ) { return actors . get ( player ) ; }
void test1 ( ) throws Throwable { ActionFactory actionFactory0 = ActionFactory . getInstance ( ) ; Action action0 = actionFactory0 . createMoveAction ( 0 , ( byte ) ( - 78 ) , ( byte ) ( - 78 ) , ( byte ) ( - 78 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test0 ( ) throws Throwable { Point point0 = Map . worldTransform ( 1000 . 0F , 1000 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test1 ( ) throws Throwable { Point point0 = Map . gridTransform ( 1918 , 1918 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test2 ( ) throws Throwable { Point point0 = Map . pixelTransform ( 62 , 166 , 166 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test4 ( ) throws Throwable { Player player0 = new Player ( 166 ) ; Map . MapPlayerCell map_MapPlayerCell0 = new Map . MapPlayerCell ( player0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test5 ( ) throws Throwable { Map . MapCell map_MapCell0 = new Map . MapCell ( 20 , 20 , 20 ) ; String string0 = map_MapCell0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test6 ( ) throws Throwable { Map . MapTile map_MapTile0 = new Map . MapTile ( "MapCell [ x = 20 . 000000 , y = 20 . 000000 , tile = 20 , layer = 0 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map ( String fileName ) throws IOException { open ( fileName ) ; }
void test0 ( ) throws Throwable { ToolTipRenderer toolTipRenderer0 = new ToolTipRenderer ( ) ; Dimension dimension0 = toolTipRenderer0 . getMinimumSize ( ) ; Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 7 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 1 ] ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) null ) ; toolTipRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) dimension0 , true , true , 2 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object color , boolean isSelected , boolean hasFocus , int row , int column ) { JComponent c = null ; try { Object v = null ; ToolTipManager t = ToolTipManager . sharedInstance ( ) ; t . setInitialDelay ( 10 ) ; t . setReshowDelay ( 10 ) ; c = ( JComponent ) super . getTableCellRendererComponent ( table , color , isSelected , hasFocus , row , column ) ; v = table . getValueAt ( row , column ) ; if ( v ! = null ) { c . setToolTipText ( v . toString ( ) ) ; } } catch ( NullPointerException e ) { System . err . println ( "ToolTipRenderer : [ NPE ] " ) ; } catch ( ClassCastException e ) { System . err . println ( "ToolTipRenderer : [ CCE ] " ) ; } catch ( Exception e ) { System . err . println ( "ToolTipRenderer : [ X ] " ) ; } return c ; }
void test1 ( ) throws Throwable { ToolTipRenderer toolTipRenderer0 = new ToolTipRenderer ( ) ; Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 7 ] ; Object [ ] objectArray1 = new Object [ 8 ] ; objectArray1 [ 2 ] = ( Object ) toolTipRenderer0 ; objectArray0 [ 0 ] = objectArray1 ; objectArray0 [ 2 ] = objectArray0 [ 0 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 1 ] ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) null ) ; toolTipRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) toolTipRenderer0 , true , true , 2 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object color , boolean isSelected , boolean hasFocus , int row , int column ) { JComponent c = null ; try { Object v = null ; ToolTipManager t = ToolTipManager . sharedInstance ( ) ; t . setInitialDelay ( 10 ) ; t . setReshowDelay ( 10 ) ; c = ( JComponent ) super . getTableCellRendererComponent ( table , color , isSelected , hasFocus , row , column ) ; v = table . getValueAt ( row , column ) ; if ( v ! = null ) { c . setToolTipText ( v . toString ( ) ) ; } } catch ( NullPointerException e ) { System . err . println ( "ToolTipRenderer : [ NPE ] " ) ; } catch ( ClassCastException e ) { System . err . println ( "ToolTipRenderer : [ CCE ] " ) ; } catch ( Exception e ) { System . err . println ( "ToolTipRenderer : [ X ] " ) ; } return c ; }
void test0 ( ) throws Throwable { Kernel kernel0 = new Kernel ( ) ; DebugPanel debugPanel0 = new DebugPanel ( kernel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void append ( Message msg ) { try { dump . addRow ( new Object [ ] { new Long ( msg . getID ( ) ) , new Long ( msg . getSID ( ) ) , msg . getHeader ( ) , msg . getSender ( ) , msg . getRecipient ( ) , new Integer ( msg . getState ( ) ) , new Long ( msg . getTTL ( ) ) , new Long ( msg . getTimeStamp ( ) ) , msg . getBody ( ) } ) ; } catch ( NullPointerException e ) { System . err . println ( "DebugPanel . append ( ) : * * * WARNING * * * [ NPE ] " + "caught null pointer exception . " ) ; e . printStackTrace ( System . err ) ; } catch ( Exception e ) { System . err . println ( "DebugPanel . append ( ) : * * * WARNING * * * [ X ] " + "caught unknown exception . " ) ; e . printStackTrace ( System . err ) ; } }
void test1 ( ) throws Throwable { Kernel kernel0 = new Kernel ( ) ; DebugPanel debugPanel0 = new DebugPanel ( kernel0 ) ; String string0 = AbstractButton . DISABLED_ICON_CHANGED_PROPERTY ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) string0 , 1 , ( String ) null ) ; debugPanel0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( "close" ) ) { this . dispose ( ) ; } }
void test1 ( ) throws Throwable { AudioManager audioManager0 = new AudioManager ( false ) ; boolean boolean0 = audioManager0 . loadSample ( "0Yb + M ) 3~" , "0Yb + M ) 3~" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean loadSample ( String filename , String handle , boolean loops ) { if ( ready ) { if ( handles . containsKey ( handle ) ) { System . out . println ( "AudioManager : handle exists" ) ; return false ; } / / variables to load into int [ ] format = new int [ 1 ] ; int [ ] size = new int [ 1 ] ; ByteBuffer [ ] data = new ByteBuffer [ 1 ] ; int [ ] freq = new int [ 1 ] ; int [ ] loop = new int [ 1 ] ; / / Load wav data into a buffer . ALut . alutLoadWAVFile ( filename , format , data , size , freq , loop ) ; al . alBufferData ( buffers [ nSamples ] , format [ 0 ] , data [ 0 ] , size [ 0 ] , freq [ 0 ] ) ; ALut . alutUnloadWAV ( format [ 0 ] , data [ 0 ] , size [ 0 ] , freq [ 0 ] ) ; / / Bind buffer with a source . if ( al . alGetError ( ) ! = AL . AL_NO_ERROR ) { System . out . println ( "AudioManager : Couldn't create sources" ) ; return false ; } float [ ] sourcePos = { ( ( float ) Math . random ( ) %4 . 0f - 2 . 0f ) , ( ( float ) Math . random ( ) %4 . 0f - 2 . 0f ) , ( ( float ) Math . random ( ) %4 . 0f - 2 . 0f ) } ; al . alSourcei ( source [ nSamples ] , AL . AL_BUFFER , buffers [ nSamples ] ) ; al . alSourcef ( source [ nSamples ] , AL . AL_PITCH , 1 . 0f ) ; al . alSourcef ( source [ nSamples ] , AL . AL_GAIN , 1 . 0f ) ; al . alSourcefv ( source [ nSamples ] , AL . AL_POSITION , sourcePos ) ; al . alSourcefv ( source [ nSamples ] , AL . AL_VELOCITY , sourceVel ) ; if ( loops ) { al . alSourcei ( source [ nSamples ] , AL . AL_LOOPING , AL . AL_TRUE ) ; } else { al . alSourcei ( source [ nSamples ] , AL . AL_LOOPING , AL . AL_FALSE ) ; } / / Do another error check and return . int i = al . alGetError ( ) ; if ( i = = AL . AL_NO_ERROR ) { System . out . println ( "AudioManager : All ok" ) ; handles . put ( handle , new Integer ( nSamples ) ) ; nSamples + + ; ready = true ; return true ; } System . out . println ( "LoadSample , error : " + i ) ; System . out . println ( AL . AL_INVALID_OPERATION ) ; System . out . println ( AL . AL_OUT_OF_MEMORY ) ; System . out . println ( AL . AL_INVALID_VALUE ) ; System . out . println ( al . AL_INVALID_NAME ) ; } return false ; }
void test10 ( ) throws Throwable { AudioManager audioManager0 = new AudioManager ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean moveSource ( String handle , float x , float y , float z ) { if ( ready & & handles . containsKey ( handle ) ) { Integer i = ( Integer ) handles . get ( handle ) ; al . alSource3f ( source [ i . intValue ( ) ] , AL . AL_POSITION , x , y , z ) ; return true ; } return false ; }
void test0 ( ) throws Throwable { Color color0 = Color . RED ; Color3f color3f0 = new Color3f ( color0 ) ; Point3f point3f0 = new Point3f ( ( Tuple3f ) color3f0 ) ; Vector3f vector3f0 = new Vector3f ( ( Tuple3f ) point3f0 ) ; PickRay pickRay0 = new PickRay ( point3f0 , vector3f0 ) ; Vector3f vector3f1 = pickRay0 . getDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector3f getDirection ( ) { return new Vector3f ( direction ) ; }
void test1 ( ) throws Throwable { Color3f color3f0 = new Color3f ( 0 . 0F , 0 . 0F , 0 . 0F ) ; Point3f point3f0 = new Point3f ( ( Tuple3f ) color3f0 ) ; Vector3f vector3f0 = new Vector3f ( ( Tuple3f ) point3f0 ) ; PickRay pickRay0 = new PickRay ( point3f0 , vector3f0 ) ; Point3f point3f1 = pickRay0 . getOrigin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return equals ( ( DirtyNode ) obj ) ; }
void test0 ( ) throws Throwable { World world0 = new World ( 824 , 824 , 824 ) ; world0 . save ( "glVertexAttr6b2hvNV ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { World world0 = new World ( 1342 , 1342 , 1342 ) ; world0 . panZ ( ( float ) 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void panZ ( float dist ) { offset . z + = dist ; }
void test2 ( ) throws Throwable { World world0 = new World ( 1342 , 1342 , 1342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test3 ( ) throws Throwable { World world0 = new World ( 3 , 3 , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test4 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCellNode ( int row , int col , TransformGroup tg ) { cells [ row ] [ col ] = tg ; }
void test5 ( ) throws Throwable { World world0 = new World ( 0 , 0 , 2038 . 1143F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test6 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test7 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTexture ( String tex ) { TextureAttributes [ ] textureAttrs = new TextureAttributes [ 2 ] ; TextureUnitState [ ] textureUnitStates = new TextureUnitState [ 2 ] ; Texture2D [ ] textures = new Texture2D [ 2 ] ; try { TextureLoader tl = TextureLoader . getInstance ( ) ; / / these paths should be registered elsewhere . tl . registerPath ( " . / " ) ; tl . registerPath ( " . / dat / mdl" ) ; tl . registerPath ( " . / dat / tex" ) ; tl . registerPath ( " . / dat / gfx" ) ; textures [ 0 ] = ( Texture2D ) tl . getMinMapTexture ( "grass2 . png" ) ; textures [ 1 ] = ( Texture2D ) tl . getMinMapTexture ( "stone . png" ) ; textureAttrs [ 0 ] = new TextureAttributes ( ) ; textureAttrs [ 0 ] . setTextureMode ( TextureAttributes . DECAL ) ; textureAttrs [ 1 ] = new TextureAttributes ( ) ; textureAttrs [ 1 ] . setTextureMode ( TextureAttributes . MODULATE ) ; textureUnitStates [ 0 ] = new TextureUnitState ( textures [ 0 ] , textureAttrs [ 0 ] , null ) ; textureUnitStates [ 1 ] = new TextureUnitState ( textures [ 1 ] , textureAttrs [ 1 ] , null ) ; / / Set polygon offset so that we can see objects lying in the / / same plane as the grid . PolygonAttributes polyAttr = new PolygonAttributes ( ) ; polyAttr . setPolygonOffset ( 10 . 0f ) ; polyAttr . setPolygonOffsetFactor ( 20 . 0f ) ; Appearance a = new Appearance ( ) ; a . setTextureUnitState ( textureUnitStates ) ; a . setPolygonAttributes ( polyAttr ) ; addChild ( new Shape3D ( createQuad ( 0f , 0f , cols * size , 1f , 2 * cols ) , a ) ) ; } catch ( Exception e ) { e . printStackTrace ( System . err ) ; } }
void test8 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test9 ( ) throws Throwable { World world0 = new World ( 824 , 824 , 824 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test11 ( ) throws Throwable { World world0 = new World ( 0 , 0 , 2038 . 1143F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test12 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test13 ( ) throws Throwable { World world0 = new World ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Path findPath ( int srcX , int srcY , int dstX , int dstY ) throws PathNotFoundException { map . Node src = map . getNodeAt ( srcX , srcY ) ; map . Node dst = map . getNodeAt ( dstX , dstY ) ; map . reset ( ) ; return map . coalescePath ( map . search ( src , dst ) ) ; }
void test14 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGridVisible ( ) { boolean visible = false ; try { Appearance ap = grid . getAppearance ( ) ; RenderingAttributes attr = ap . getRenderingAttributes ( ) ; visible = attr . getVisible ( ) ; } catch ( NullPointerException e ) { / / e . printStackTrace ( System . err ) ; } return visible ; }
void test15 ( ) throws Throwable { World world0 = new World ( 3 , 3 , 3 ) ; world0 . panY ( ( - 513 . 3716F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void panY ( float dist ) { offset . y + = dist ; }
void test16 ( ) throws Throwable { World world0 = new World ( 0 , 0 , 2038 . 1143F ) ; SpotLight spotLight0 = new SpotLight ( ) ; Point3f point3f0 = new Point3f ( 0 . 0F , 1 . 0F , 2038 . 1143F ) ; Vector3f vector3f0 = spotLight0 . getDirection ( ) ; PickRay pickRay0 = new PickRay ( point3f0 , vector3f0 ) ; Point3f point3f1 = world0 . intersect ( pickRay0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Point3f intersect ( PickRay r ) { Vector3f v = r . getDirection ( ) ; / / ray direction in world space . Point3f p = r . getOrigin ( ) ; / / ray origin in world space . Point3f q = null ; / / intersection point in grid space . Transform3D tf = null ; / / world to grid transform . / / Get a copy of the grid transform . tf = new Transform3D ( getTransform ( ) ) ; / / Transform the ray by the inverse grid transform . This way we / / get the ray in grid coordinate space . tf . invert ( ) ; tf . transform ( p ) ; tf . transform ( v ) ; / / Check that the ray is not parallell to the grid . if ( v . y ! = 0 ) { / / Assume that the grid lies in the xz - plane . It will always / / lie in the xz - plane ! float t = ( offset . y - p . y ) / v . y ; q = new Point3f ( p . x + t * v . x , 0 . 0f , p . z + t * v . z ) ; } return q ; }
void test17 ( ) throws Throwable { World world0 = new World ( 1352 , 1352 , 1352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCellTexture ( int row , int col , String name , boolean blend ) { TransformGroup tg = null ; Shape3D sh = null ; try { tg = getCellNode ( row , col ) ; } catch ( ArrayIndexOutOfBoundsException e ) { return ; / / craps ! } if ( name = = null | | name . length ( ) = = 0 ) { removeChild ( tg ) ; setCellNode ( row , col , null ) ; return ; } if ( tg = = null ) { tg = new TransformGroup ( ) ; / / sh = new Shape3D ( createPlane ( size , 1 ) ) ; / / setTexture2D ( sh , " . / dat / tex / " + name , blend , blend , true ) ; sh = createTexturedPlane ( name , size , 1 ) ; tg . addChild ( sh ) ; setCellNode ( row , col , tg ) ; addChild ( tg ) ; } else { sh = ( Shape3D ) tg . getChild ( 0 ) ; TextureLoader tl = TextureLoader . getInstance ( ) ; Texture2D tex = ( Texture2D ) tl . getMinMapTexture ( name ) ; / / setTexture2D ( sh , " . / dat / tex / " + name , blend , blend , true ) ; } Vector3f pos = new Vector3f ( row * size , 0 . 01f , col * size ) ; Transform3D tf = tg . getTransform ( ) ; tf . setTranslation ( pos ) ; tg . setTransform ( tf ) ; }
void test0 ( ) throws Throwable { Color3f color3f0 = new Color3f ( ( - 208 . 59392F ) , ( - 208 . 59392F ) , ( - 208 . 59392F ) ) ; LineArray lineArray0 = ( LineArray ) Util3D . createRectangle ( ( - 19 . 452162F ) , ( - 1114 . 5267F ) , color3f0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Geometry createRectangle ( float w , float h , Color3f color ) { Point3f [ ] coords = new Point3f [ ] { new Point3f ( 0f , 0f , 0f ) , new Point3f ( w , 0f , 0f ) , new Point3f ( w , 0f , 0f ) , new Point3f ( w , 0f , h ) , new Point3f ( w , 0f , h ) , new Point3f ( 0f , 0f , h ) , new Point3f ( 0f , 0f , h ) , new Point3f ( 0f , 0f , 0f ) } ; LineArray lines = new LineArray ( coords . length , GeometryArray . COORDINATES | GeometryArray . COLOR_3 ) ; Color3f [ ] colors = new Color3f [ ] { new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) , new Color3f ( color . x , color . y , color . z ) } ; lines . setCoordinates ( 0 , coords ) ; lines . setColors ( 0 , colors ) ; return lines ; }
void test1 ( ) throws Throwable { float float0 = Util3D . deg ( ( - 1114 . 5267F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float deg ( float ang ) { return ( float ) ( ang / PI * 180 . 0 ) ; }
void test2 ( ) throws Throwable { float float0 = Util3D . rad ( ( - 1114 . 5267F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float rad ( float ang ) { return ( float ) ( ang / 180 . 0 * PI ) ; }
void test3 ( ) throws Throwable { QuadArray quadArray0 = ( QuadArray ) Util3D . createPlane ( ( - 1793 . 9939F ) , ( - 1793 . 9939F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Geometry createPlane ( float size , float r ) { return createQuad ( 0 , 0 , size , r , r ) ; }
void test7 ( ) throws Throwable { LineArray lineArray0 = ( LineArray ) Util3D . createCoordAxes ( 1693 . 442F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Geometry createCoordAxes ( float size ) { Point3f [ ] coords = new Point3f [ ] { new Point3f ( 0 , 0 , 0 ) , new Point3f ( size , 0 , 0 ) , new Point3f ( 0 , 0 , 0 ) , new Point3f ( 0 , size , 0 ) , new Point3f ( 0 , 0 , 0 ) , new Point3f ( 0 , 0 , size ) } ; Color3f [ ] colors = new Color3f [ ] { new Color3f ( 0 , 0 , 1 ) , new Color3f ( 0 , 0 , 1 ) , new Color3f ( 1 , 0 , 0 ) , new Color3f ( 1 , 0 , 0 ) , new Color3f ( 0 , 1 , 0 ) , new Color3f ( 0 , 1 , 0 ) } ; LineArray lines = new LineArray ( coords . length , GeometryArray . COORDINATES | GeometryArray . COLOR_3 ) ; lines . setCoordinates ( 0 , coords ) ; lines . setColors ( 0 , colors ) ; return lines ; }
void test8 ( ) throws Throwable { Util3D util3D0 = new Util3D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test12 ( ) throws Throwable { Shape3D shape3D0 = Util3D . createGrid ( 35169 , 35169 , 35169 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Shape3D createGrid ( int cols , int rows , float size ) { rows + + ; cols + + ; Point3f [ ] coords = new Point3f [ 2 * ( rows + cols ) ] ; LineArray grid = new LineArray ( coords . length , GeometryArray . COORDINATES ) ; for ( int i = 1 ; i < 2 * rows ; i + = 2 ) { coords [ i - 1 ] = new Point3f ( 0 , 0 . 01f , . 5f * size * ( i - 1 ) ) ; coords [ i ] = new Point3f ( ( cols - 1 ) * size , 0 . 01f , . 5f * size * ( i - 1 ) ) ; } for ( int j = 1 ; j < 2 * cols ; j + = 2 ) { coords [ 2 * rows + j - 1 ] = new Point3f ( . 5f * size * ( j - 1 ) , 0 . 01f , 0 ) ; coords [ 2 * rows + j ] = new Point3f ( . 5f * size * ( j - 1 ) , 0 . 01f , ( rows - 1 ) * size ) ; } grid . setCoordinates ( 0 , coords ) ; return new Shape3D ( grid ) ; }
void test15 ( ) throws Throwable { SharedGroup sharedGroup0 = new SharedGroup ( ) ; BranchGroup branchGroup0 = new BranchGroup ( ) ; sharedGroup0 . moveTo ( branchGroup0 ) ; Util3D . setPickable ( ( Node ) branchGroup0 , " > * 4gB | D8N | W ] h^YKO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPickable ( Node node , String name ) { Node g = node . getParent ( ) ; while ( g ! = null ) { g . setPickable ( true ) ; g = g . getParent ( ) ; } if ( node instanceof Group ) { setPickableRecursive ( ( Group ) node , name ) ; } }
void test16 ( ) throws Throwable { SharedGroup sharedGroup0 = new SharedGroup ( ) ; Link link0 = new Link ( sharedGroup0 ) ; Util3D . setPickable ( ( Node ) link0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPickable ( Node node , String name ) { Node g = node . getParent ( ) ; while ( g ! = null ) { g . setPickable ( true ) ; g = g . getParent ( ) ; } if ( node instanceof Group ) { setPickableRecursive ( ( Group ) node , name ) ; } }
void test18 ( ) throws Throwable { SharedGroup sharedGroup0 = new SharedGroup ( ) ; BranchGroup branchGroup0 = new BranchGroup ( ) ; sharedGroup0 . moveTo ( branchGroup0 ) ; Util3D . setPickable ( ( Node ) sharedGroup0 , "EQJ\"B8zN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPickable ( Node node , String name ) { Node g = node . getParent ( ) ; while ( g ! = null ) { g . setPickable ( true ) ; g = g . getParent ( ) ; } if ( node instanceof Group ) { setPickableRecursive ( ( Group ) node , name ) ; } }
void test1 ( ) throws Throwable { FrameStats frameStats0 = FrameStats . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionFactory getInstance ( ) { return instance ! = null ? instance : new ActionFactory ( ) ; }
void test1 ( ) throws Throwable { World world0 = new World ( 9 , 9 , 9 ) ; Actor . setPickableRecursive ( ( Group ) world0 , "v~d ] Xun\"7Y } 3N : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPickableRecursive ( Group group , String name ) { if ( group = = null ) { return ; } group . setPickable ( true ) ; java . util . Enumeration e = group . getAllChildren ( ) ; while ( e . hasMoreElements ( ) ) { Node node = ( Node ) e . nextElement ( ) ; / / if it's a group rename all children if ( node instanceof Group ) { setPickableRecursive ( ( Group ) node , name ) ; } else { node . setPickable ( true ) ; if ( node instanceof Shape3D ) { node . setName ( name ) ; } } } }
void test0 ( ) throws Throwable { BasicMessageRules basicMessageRules0 = new BasicMessageRules ( ) ; TextMessage textMessage0 = new TextMessage ( ) ; GameState gameState0 = new GameState ( ) ; boolean boolean0 = basicMessageRules0 . checkRules ( textMessage0 , gameState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkRules ( Action action , GameState state ) ; }
void test1 ( ) throws Throwable { Kernel kernel0 = new Kernel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { ModuleInfo moduleInfo0 = new ModuleInfo ( ) ; moduleInfo0 . set ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test3 ( ) throws Throwable { ModuleInfo moduleInfo0 = new ModuleInfo ( ) ; String string0 = moduleInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test0 ( ) throws Throwable { Action action0 = new Action ( 6 , 6 , 6 ) ; GameState gameState0 = new GameState ( ) ; gameState0 . setGameState ( 6 ) ; BasicRules basicRules0 = new BasicRules ( ) ; boolean boolean0 = basicRules0 . checkRules ( action0 , gameState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkRules ( Action action , GameState state ) ; }
void test1 ( ) throws Throwable { Action action0 = new Action ( 6 , 6 , 6 ) ; GameState gameState0 = new GameState ( ) ; BasicRules basicRules0 = new BasicRules ( ) ; boolean boolean0 = basicRules0 . checkRules ( action0 , gameState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkRules ( Action action , GameState state ) ; }
void test2 ( ) throws Throwable { Action action0 = new Action ( 6 , 6 , 6 ) ; GameState gameState0 = new GameState ( ) ; gameState0 . setGameState ( 6 ) ; BasicRules basicRules0 = new BasicRules ( ) ; Player player0 = new Player ( 6 ) ; gameState0 . addPlayer ( player0 ) ; boolean boolean0 = basicRules0 . checkRules ( action0 , gameState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkRules ( Action action , GameState state ) ; }
void test0 ( ) throws Throwable { Message message0 = MessageFactory . createUnloadMessage ( "X ! ? u@ * Rb ( X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 5 ] ; Message message0 = MessageFactory . createErrorMessage ( "" , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
void test2 ( ) throws Throwable { MessageFactory messageFactory0 = MessageFactory . getInstance ( ) ; Message message0 = messageFactory0 . createMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalProduced ( ) { return totalObjectsProduced ; }
void test3 ( ) throws Throwable { Message message0 = MessageFactory . createConnectionDroppedMessage ( 34 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message createConnectionDroppedMessage ( int id , String addr ) { Message msg = getInstance ( ) . createObject ( ) ; msg . set ( "DROPPED" , " * " , "ID : " + id + " IP : " + addr ) ; return msg ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = Packer . pack16 ( ( short ) 1457 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float unpackf ( byte [ ] b ) { return Float . intBitsToFloat ( unpack32 ( b ) ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = Packer . packd ( ( double ) 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double unpackd ( byte [ ] b ) { return Double . longBitsToDouble ( unpack64 ( b ) ) ; }
void test9 ( ) throws Throwable { float [ ] floatArray0 = new float [ 10 ] ; byte [ ] byteArray0 = Packer . packfv ( floatArray0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] packfv ( float [ ] fv , int start , int count ) { byte [ ] buf = new byte [ count < < 4 ] ; count + = start ; for ( int i = start , j = 0 ; i < count ; i + + , j + = 4 ) { pack32 ( Float . floatToIntBits ( fv [ i ] ) , buf , j ) ; } return buf ; }
void test10 ( ) throws Throwable { Packer packer0 = new Packer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test11 ( ) throws Throwable { byte [ ] byteArray0 = Packer . pack16 ( ( short ) 1457 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unpacks ( byte [ ] b , int offset , int length ) { try { return new String ( b , offset , length , "UTF - 8" ) ; } catch ( java . io . UnsupportedEncodingException e ) { / * all jvm : s support UTF - 8 * / } return null ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; int int0 = Packer . unpacki ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int unpacki ( byte [ ] b ) { return unpack32 ( b ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = Packer . pack16 ( ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short unpack16 ( byte [ ] b , int offset ) { short y = 0 ; y | = ( ( short ) b [ offset + + ] & 0xff ) < < 8 ; y | = ( ( short ) b [ offset + + ] & 0xff ) ; return y ; }
void test0 ( ) throws Throwable { TaintedByteArrayInputStream taintedByteArrayInputStream0 = new TaintedByteArrayInputStream ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; taintedByteArrayInputStream0 . setByteArray ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setByteArray ( byte [ ] buf ) { this . buf = buf ; this . pos = 0 ; this . count = buf . length ; this . mark = 0 ; }
void test0 ( ) throws Throwable { ActionFactory actionFactory0 = ActionFactory . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalProduced ( ) { return totalObjectsProduced ; }
void test1 ( ) throws Throwable { ActionFactory actionFactory0 = ActionFactory . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalProduced ( ) { return totalObjectsProduced ; }
void test2 ( ) throws Throwable { ActionFactory actionFactory0 = ActionFactory . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalProduced ( ) { return totalObjectsProduced ; }
void test3 ( ) throws Throwable { MessageFactory messageFactory0 = MessageFactory . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalProduced ( ) { return totalObjectsProduced ; }
void test4 ( ) throws Throwable { ActionFactory actionFactory0 = ActionFactory . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalProduced ( ) { return totalObjectsProduced ; }
void test0 ( ) throws Throwable { TaintedByteArrayOutputStream taintedByteArrayOutputStream0 = new TaintedByteArrayOutputStream ( ) ; byte [ ] byteArray0 = taintedByteArrayOutputStream0 . getByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getByteArray ( ) { return buf ; }
void test1 ( ) throws Throwable { TaintedByteArrayOutputStream taintedByteArrayOutputStream0 = new TaintedByteArrayOutputStream ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "DirtyNode [ x = " + x + " , y = " + y + " , score = " + score + " ] " ; }
