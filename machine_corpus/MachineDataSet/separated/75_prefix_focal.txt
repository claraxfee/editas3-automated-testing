void test0 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; role0 . rebind ( ( Name ) compositeName0 , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { Role role0 = new Role ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; Object object0 = role0 . lookupLink ( ( Name ) compoundName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookupLink ( Name name ) { return null ; }
void test2 ( ) throws Throwable { Role role0 = new Role ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test3 ( ) throws Throwable { Role role0 = new Role ( ) ; NameParser nameParser0 = role0 . getNameParser ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameParser getNameParser ( Name name ) { return null ; }
void test4 ( ) throws Throwable { Role role0 = new Role ( ) ; Object object0 = role0 . lookup ( "w8jlHY3w@8Jt . Bp & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookup ( Name name ) { return null ; }
void test5 ( ) throws Throwable { Role role0 = new Role ( ) ; ModificationItem [ ] modificationItemArray0 = new ModificationItem [ 3 ] ; role0 . modifyAttributes ( ( Name ) null , modificationItemArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test6 ( ) throws Throwable { Role role0 = new Role ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; role0 . bind ( ( Name ) compoundName0 , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test7 ( ) throws Throwable { Role role0 = new Role ( ) ; DirContext dirContext0 = role0 . getSchema ( " / LZ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchema ( Name name ) { return null ; }
void test8 ( ) throws Throwable { Role role0 = new Role ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "b" , properties0 ) ; NameParser nameParser0 = role0 . getNameParser ( ( Name ) compoundName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameParser getNameParser ( Name name ) { return null ; }
void test9 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( "w8jlHY3w@8Jt . Bp & " ) ; Context context0 = role0 . createSubcontext ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test10 ( ) throws Throwable { Role role0 = new Role ( " + ; ZU$I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test11 ( ) throws Throwable { Role role0 = new Role ( ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( ) ; String [ ] stringArray0 = new String [ 19 ] ; NamingEnumeration < Object > namingEnumeration0 = role0 . search ( "" , ( Attributes ) basicAttributes0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test12 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . listBindings ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration listBindings ( Name name ) { return null ; }
void test13 ( ) throws Throwable { Role role0 = new Role ( " + ; ZU$I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test14 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; Object object0 = role0 . lookup ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookup ( Name name ) { return null ; }
void test15 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( " ; M_dl0vpsSL" ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( ) ; role0 . rebind ( ( Name ) compositeName0 , ( Object ) role0 , ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rebind ( Name name , Object obj , Attributes attrs ) { }
void test16 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . list ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration list ( Name name ) { return null ; }
void test17 ( ) throws Throwable { Role role0 = new Role ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; DirContext dirContext0 = role0 . getSchemaClassDefinition ( ( Name ) compoundName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchemaClassDefinition ( Name name ) { return null ; }
void test18 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . setDn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test19 ( ) throws Throwable { Role role0 = new Role ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( " / LZ" , properties0 ) ; role0 . modifyAttributes ( ( Name ) compoundName0 , 210 , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test20 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . unbind ( "YB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test21 ( ) throws Throwable { Role role0 = new Role ( ) ; DirContext dirContext0 = role0 . getSchemaClassDefinition ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchemaClassDefinition ( Name name ) { return null ; }
void test22 ( ) throws Throwable { Role role0 = new Role ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test23 ( ) throws Throwable { Role role0 = new Role ( ) ; DirContext dirContext0 = role0 . createSubcontext ( "java . naming . provider . url" , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test24 ( ) throws Throwable { Role role0 = new Role ( ) ; String string0 = role0 . getNameInNamespace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test25 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . bind ( ( String ) null , "YB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test26 ( ) throws Throwable { Role role0 = new Role ( ) ; ModificationItem [ ] modificationItemArray0 = new ModificationItem [ 3 ] ; role0 . modifyAttributes ( "u > ZUAS57@" , modificationItemArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test27 ( ) throws Throwable { Role role0 = new Role ( ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( ) ; DirContext dirContext0 = role0 . createSubcontext ( ( Name ) null , ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test28 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; DirContext dirContext0 = role0 . getSchema ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchema ( Name name ) { return null ; }
void test29 ( ) throws Throwable { Role role0 = new Role ( " + ; ZU$I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test30 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . search ( ( Name ) compositeName0 , "u" , ( SearchControls ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test31 ( ) throws Throwable { Role role0 = new Role ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test32 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; Object [ ] objectArray0 = new Object [ 2 ] ; NamingEnumeration < Object > namingEnumeration0 = role0 . search ( ( Name ) compositeName0 , "" , objectArray0 , ( SearchControls ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test33 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; role0 . unbind ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test34 ( ) throws Throwable { Role role0 = new Role ( ) ; String string0 = role0 . getCn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test35 ( ) throws Throwable { Role role0 = new Role ( ) ; String string0 = role0 . getDn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test36 ( ) throws Throwable { Role role0 = new Role ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . listBindings ( "u > ZUAS57@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration listBindings ( Name name ) { return null ; }
void test37 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; role0 . destroySubcontext ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test38 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . rename ( "u" , "u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test39 ( ) throws Throwable { Role role0 = new Role ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . search ( ( Name ) compositeName0 , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test40 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . rebind ( "" , ( Object ) "java . naming . provider . url" , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test41 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . modifyAttributes ( "" , 1738 , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test42 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . bind ( "java . naming . provider . url" , ( Object ) null , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test43 ( ) throws Throwable { Role role0 = new Role ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test44 ( ) throws Throwable { Role role0 = new Role ( ) ; Object object0 = role0 . addToEnvironment ( "Japanese" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object addToEnvironment ( String propName , Object propVal ) { return null ; }
void test45 ( ) throws Throwable { Role role0 = new Role ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . list ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration list ( Name name ) { return null ; }
void test46 ( ) throws Throwable { Role role0 = new Role ( ) ; role0 . rebind ( ( String ) null , "java . naming . factory . url . pkgs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test47 ( ) throws Throwable { Role role0 = new Role ( " + ; ZU$I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test48 ( ) throws Throwable { Role role0 = new Role ( ) ; String string0 = role0 . composeName ( "w8jlHY3w@8Jt . Bp & " , "w8jlHY3w@8Jt . Bp & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Name composeName ( Name name , Name prefix ) { return null ; }
void test49 ( ) throws Throwable { Role role0 = new Role ( ) ; Context context0 = role0 . createSubcontext ( "u > ZUAS57@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test50 ( ) throws Throwable { Role role0 = new Role ( ) ; Hashtable < Object , Object > hashtable0 = role0 . getEnvironment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Hashtable getEnvironment ( ) { return null ; }
void test51 ( ) throws Throwable { Role role0 = new Role ( ) ; SearchControls searchControls0 = new SearchControls ( ) ; NamingEnumeration < Object > namingEnumeration0 = role0 . search ( "" , "" , searchControls0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test52 ( ) throws Throwable { Role role0 = new Role ( ) ; Object object0 = role0 . removeFromEnvironment ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object removeFromEnvironment ( String propName ) { return null ; }
void test53 ( ) throws Throwable { Role role0 = new Role ( ) ; Name name0 = role0 . composeName ( ( Name ) null , ( Name ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Name composeName ( Name name , Name prefix ) { return null ; }
void test54 ( ) throws Throwable { Role role0 = new Role ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; role0 . bind ( ( Name ) compoundName0 , ( Object ) null , role0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test56 ( ) throws Throwable { Role role0 = new Role ( " + ; ZU$I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test58 ( ) throws Throwable { Role role0 = new Role ( "xu > 7JD , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attributes getAttributes ( ) throws NamingException { return myAttrs ; }
void test59 ( ) throws Throwable { Role role0 = new Role ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = "" ; stringArray0 [ 7 ] = "" ; BasicAttributes basicAttributes0 = ( BasicAttributes ) role0 . getAttributes ( "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attributes getAttributes ( ) throws NamingException { return myAttrs ; }
void test1 ( ) throws Throwable { InitialLdapContext initialLdapContext0 = new InitialLdapContext ( ) ; LdapService ldapService0 = new LdapService ( ( LdapContext ) initialLdapContext0 ) ; Collection < Object > collection0 = ldapService0 . getPeople ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getPeople ( ) { / / if ( people = = null ) { people = new ArrayList ( ) ; String [ ] at = { "uid" , "cn" } ; NamingEnumeration answer = fetch ( "ou = people , " + basedn , at , " ( uid = * ) " ) ; try { cat . debug ( "People found : " ) ; while ( answer . hasMore ( ) ) { SearchResult sr = ( SearchResult ) answer . next ( ) ; Attributes attrs = sr . getAttributes ( ) ; String person_cn = null ; String person_uid = null ; if ( attrs = = null ) { cat . debug ( "This result has no attributes" ) ; } else { for ( NamingEnumeration naming_enum = attrs . getAll ( ) ; naming_enum . hasMore ( ) ; ) { Attribute attrib = ( Attribute ) naming_enum . next ( ) ; if ( attrib . getID ( ) . equals ( "cn" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { person_cn = ( String ) e . next ( ) ; } } else if ( attrib . getID ( ) . equals ( "uid" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { person_uid = ( String ) e . next ( ) ; } } if ( ( person_cn ! = null ) & & ( person_uid ! = null ) ) { people . add ( new Person ( person_uid , person_cn ) ) ; cat . debug ( person_cn + " ( " + person_uid + " ) " ) ; person_cn = null ; person_uid = null ; } } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } / / } Collections . sort ( people , new peopleComparator ( ) ) ; return people ; }
void test3 ( ) throws Throwable { InitialLdapContext initialLdapContext0 = new InitialLdapContext ( ) ; LdapService ldapService0 = new LdapService ( ( LdapContext ) initialLdapContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean deleteGroup ( String dn ) { / / for now we are using simple authentication for LDAP since there seems to be the following / / error with GSSAPI authentication ( which works for search ) while requesting a modification to LDAP : / / javax . naming . AuthenticationNotSupportedException : / / [ LDAP : error code 8 - modifications require authentication ] / / Awaiting reply from mailing lists . / / String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; / / String basedn = props . getProperty ( "basedn" , "dc = arch , dc = org" ) ; / / Set up the environment for creating the initial context / / Hashtable env = new Hashtable ( 11 ) ; / / env . put ( Context . INITIAL_CONTEXT_FACTORY , / / "com . sun . jndi . ldap . LdapCtxFactory" ) ; / / env . put ( Context . PROVIDER_URL , ldapurl ) ; / / env . put ( Context . SECURITY_AUTHENTICATION , "simple" ) ; / / env . put ( Context . SECURITY_PRINCIPAL , "cn = xxx , dc = arch , dc = org" ) ; / / specify the username / / env . put ( Context . SECURITY_CREDENTIALS , "secret" ) ; / / specify the password try { / / Create the initial context / / LdapContext ctx = new InitialLdapContext ( env , null ) ; dctx . destroySubcontext ( dn ) ; return true ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; return false ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
void test4 ( ) throws Throwable { LdapService ldapService0 = new LdapService ( ( LdapContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRole ( String role ) { if ( roles = = null ) roles = new HashSet ( ) ; roles . add ( role ) ; }
void test5 ( ) throws Throwable { LdapService ldapService0 = new LdapService ( ( LdapContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean deletePerson ( String dn ) { / / for now we are using simple authentication for LDAP since there seems to be the following / / error with GSSAPI authentication ( which works for search ) while requesting a modification to LDAP : / / javax . naming . AuthenticationNotSupportedException : / / [ LDAP : error code 8 - modifications require authentication ] / / Awaiting reply from mailing lists . / / String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; / / String basedn = props . getProperty ( "basedn" , "dc = arch , dc = org" ) ; / / Set up the environment for creating the initial context / / Hashtable env = new Hashtable ( 11 ) ; / / env . put ( Context . INITIAL_CONTEXT_FACTORY , / / "com . sun . jndi . ldap . LdapCtxFactory" ) ; / / env . put ( Context . PROVIDER_URL , ldapurl ) ; / / env . put ( Context . SECURITY_AUTHENTICATION , "simple" ) ; / / env . put ( Context . SECURITY_PRINCIPAL , "cn = xxx , dc = arch , dc = org" ) ; / / specify the username / / env . put ( Context . SECURITY_CREDENTIALS , "secret" ) ; / / specify the password try { / / Create the initial context / / LdapContext ctx = new InitialLdapContext ( env , null ) ; dctx . destroySubcontext ( dn ) ; return true ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; return false ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
void test6 ( ) throws Throwable { LdapService ldapService0 = new LdapService ( ( LdapContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateGroup ( Group grp ) { / / for now we are using simple authentication for LDAP since there seems to be the following / / error with GSSAPI authentication ( which works for search ) while requesting a modification to LDAP : / / javax . naming . AuthenticationNotSupportedException : / / [ LDAP : error code 8 - modifications require authentication ] / / Awaiting reply from mailing lists . / / String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; / / String basedn = props . getProperty ( "basedn" , "dc = arch , dc = org" ) ; / / Set up the environment for creating the initial context / / Hashtable env = new Hashtable ( 11 ) ; / / env . put ( Context . INITIAL_CONTEXT_FACTORY , / / "com . sun . jndi . ldap . LdapCtxFactory" ) ; / / env . put ( Context . PROVIDER_URL , ldapurl ) ; / / env . put ( Context . SECURITY_AUTHENTICATION , "simple" ) ; / / env . put ( Context . SECURITY_PRINCIPAL , "cn = xxx , dc = arch , dc = org" ) ; / / specify the username / / env . put ( Context . SECURITY_CREDENTIALS , "secret" ) ; / / specify the password try { / / Create the initial context / / LdapContext ctx = new InitialLdapContext ( env , null ) ; dctx . modifyAttributes ( grp . getDn ( ) , DirContext . REPLACE_ATTRIBUTE , grp . getAttributes ( ) ) ; return true ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; return false ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
void test7 ( ) throws Throwable { LdapService ldapService0 = new LdapService ( ( LdapContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addGroup ( String group ) { if ( groups = = null ) groups = new HashSet ( ) ; groups . add ( group ) ; }
void test8 ( ) throws Throwable { InitialLdapContext initialLdapContext0 = new InitialLdapContext ( ) ; LdapService ldapService0 = new LdapService ( ( LdapContext ) initialLdapContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean deleteRole ( String dn ) { / / for now we are using simple authentication for LDAP since there seems to be the following / / error with GSSAPI authentication ( which works for search ) while requesting a modification to LDAP : / / javax . naming . AuthenticationNotSupportedException : / / [ LDAP : error code 8 - modifications require authentication ] / / Awaiting reply from mailing lists . / / String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; / / String basedn = props . getProperty ( "basedn" , "dc = arch , dc = org" ) ; / / Set up the environment for creating the initial context / / Hashtable env = new Hashtable ( 11 ) ; / / env . put ( Context . INITIAL_CONTEXT_FACTORY , / / "com . sun . jndi . ldap . LdapCtxFactory" ) ; / / env . put ( Context . PROVIDER_URL , ldapurl ) ; / / env . put ( Context . SECURITY_AUTHENTICATION , "simple" ) ; / / env . put ( Context . SECURITY_PRINCIPAL , "cn = xxx , dc = arch , dc = org" ) ; / / specify the username / / env . put ( Context . SECURITY_CREDENTIALS , "secret" ) ; / / specify the password try { / / Create the initial context / / LdapContext ctx = new InitialLdapContext ( env , null ) ; dctx . destroySubcontext ( dn ) ; return true ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; return false ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
void test9 ( ) throws Throwable { LdapService ldapService0 = new LdapService ( ( LdapContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addPerson ( Person person ) { / / for now we are using simple authentication for LDAP since there seems to be the following / / error with GSSAPI authentication ( which works for search ) while requesting a modification to LDAP : / / javax . naming . AuthenticationNotSupportedException : / / [ LDAP : error code 8 - modifications require authentication ] / / Awaiting reply from mailing lists . / / String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; / / Set up the environment for creating the initial context / / Hashtable env = new Hashtable ( 11 ) ; / / env . put ( Context . INITIAL_CONTEXT_FACTORY , / / "com . sun . jndi . ldap . LdapCtxFactory" ) ; / / env . put ( Context . PROVIDER_URL , ldapurl ) ; / / env . put ( Context . SECURITY_AUTHENTICATION , "simple" ) ; / / env . put ( Context . SECURITY_PRINCIPAL , "cn = xxx , dc = arch , dc = org" ) ; / / specify the username / / env . put ( Context . SECURITY_CREDENTIALS , "secret" ) ; / / specify the password try { / / Create the initial context / / LdapContext ctx = new InitialLdapContext ( env , null ) ; dctx . bind ( person . getDn ( ) , person ) ; / / was getting error code 8 return true ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; return false ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
void test10 ( ) throws Throwable { InitialLdapContext initialLdapContext0 = new InitialLdapContext ( ) ; LdapService ldapService0 = new LdapService ( ( LdapContext ) initialLdapContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updatePerson ( Person person , String olddn ) { / / for now we are using simple authentication for LDAP since there seems to be the following / / error with GSSAPI authentication ( which works for search ) while requesting a modification to LDAP : / / javax . naming . AuthenticationNotSupportedException : / / [ LDAP : error code 8 - modifications require authentication ] / / Awaiting reply from mailing lists . / / String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; / / String basedn = props . getProperty ( "basedn" , "dc = arch , dc = org" ) ; / / Set up the environment for creating the initial context / / Hashtable env = new Hashtable ( 11 ) ; / / env . put ( Context . INITIAL_CONTEXT_FACTORY , / / "com . sun . jndi . ldap . LdapCtxFactory" ) ; / / env . put ( Context . PROVIDER_URL , ldapurl ) ; / / env . put ( Context . SECURITY_AUTHENTICATION , "simple" ) ; / / env . put ( Context . SECURITY_PRINCIPAL , "cn = xxx , dc = arch , dc = org" ) ; / / specify the username / / env . put ( Context . SECURITY_CREDENTIALS , "secret" ) ; / / specify the password try { / / Create the initial context / / LdapContext ctx = new InitialLdapContext ( env , null ) ; String newdn = person . getDn ( ) ; if ( olddn . compareTo ( newdn ) ! = 0 ) dctx . rename ( olddn , newdn ) ; person . setAttributes ( ) ; dctx . modifyAttributes ( newdn , DirContext . REPLACE_ATTRIBUTE , person . getAttributes ( ) ) ; return true ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; return false ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
void test0 ( ) throws Throwable { Person person0 = new Person ( "log4j . logger . " , "log4j . logger . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test1 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( " ! | Oz / / " ) ; DirContext dirContext0 = person0 . getSchema ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchema ( Name name ) { return null ; }
void test2 ( ) throws Throwable { Person person0 = new Person ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( " : xey . 8 = X = H , l_" , properties0 ) ; NamingEnumeration < Object > namingEnumeration0 = person0 . search ( ( Name ) compoundName0 , person0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test3 ( ) throws Throwable { Person person0 = new Person ( "^" , "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPassvalidstart ( String passvalidstart ) { this . passvalidstart = passvalidstart ; }
void test4 ( ) throws Throwable { Person person0 = new Person ( " = F" , " = F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test5 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test6 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test7 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test8 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPostalAddress ( ) { return postalAddress ; }
void test9 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test10 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSn ( ) { return sn ; }
void test11 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test12 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test13 ( ) throws Throwable { Person person0 = new Person ( ) ; DirContext dirContext0 = person0 . createSubcontext ( "" , person0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test14 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test15 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test16 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test17 ( ) throws Throwable { Person person0 = new Person ( " = F" , " = F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test18 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTelephoneNumber ( ) { return telephoneNumber ; }
void test19 ( ) throws Throwable { Person person0 = new Person ( ) ; String [ ] stringArray0 = new String [ 2 ] ; person0 . setRoles ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEmail ( ) { return email ; }
void test20 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test21 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test22 ( ) throws Throwable { Person person0 = new Person ( " = F" , " = F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test23 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test24 ( ) throws Throwable { Person person0 = new Person ( " = F" , " = F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test25 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( " : xey . 8 = X = H , l_" ) ; person0 . rebind ( ( Name ) compositeName0 , ( Object ) " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPostalAddress ( ) { return postalAddress ; }
void test26 ( ) throws Throwable { Person person0 = new Person ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "gz6@ : 6" , properties0 ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( ) ; String [ ] stringArray0 = new String [ 1 ] ; NamingEnumeration < Object > namingEnumeration0 = person0 . search ( ( Name ) compoundName0 , ( Attributes ) basicAttributes0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test27 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test28 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test29 ( ) throws Throwable { Person person0 = new Person ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "gz6@ : 6" , properties0 ) ; person0 . bind ( ( Name ) compoundName0 , ( Object ) "GZ6@ : 6" , person0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPostalAddress ( ) { return postalAddress ; }
void test30 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test31 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test32 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test33 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test34 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test35 ( ) throws Throwable { Person person0 = new Person ( ) ; String string0 = person0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test36 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test37 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test38 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassvalidstart ( ) { return passvalidstart ; }
void test40 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( "" ) ; person0 . rename ( ( Name ) compositeName0 , ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test41 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . bind ( "_ * deZwW^E" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassvalidstart ( ) { return passvalidstart ; }
void test42 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test43 ( ) throws Throwable { Person person0 = new Person ( "m5_jB'W%w . : TTHvEb" , "m5_jB'W%w . : TTHvEb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test44 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test45 ( ) throws Throwable { Person person0 = new Person ( ) ; DirContext dirContext0 = person0 . getSchema ( " ! | Oz / / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchema ( Name name ) { return null ; }
void test46 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test47 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; ModificationItem [ ] modificationItemArray0 = new ModificationItem [ 2 ] ; person0 . modifyAttributes ( ( Name ) compositeName0 , modificationItemArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSn ( ) { return sn ; }
void test48 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test49 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test50 ( ) throws Throwable { Person person0 = new Person ( "^" , "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test51 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test52 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test53 ( ) throws Throwable { Person person0 = new Person ( ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( ) ; person0 . modifyAttributes ( "gz6@ : 6" , ( - 1 ) , ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassvalidstart ( ) { return passvalidstart ; }
void test54 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test55 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test56 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassrenewal ( ) { return passrenewal ; }
void test57 ( ) throws Throwable { Person person0 = new Person ( ) ; Object object0 = person0 . lookupLink ( "GZ6@ : 6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookupLink ( Name name ) { return null ; }
void test58 ( ) throws Throwable { Person person0 = new Person ( "m5_jB'W%w . : TTHvEb" , "m5_jB'W%w . : TTHvEb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test59 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test60 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test61 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test62 ( ) throws Throwable { Person person0 = new Person ( ) ; Object object0 = person0 . addToEnvironment ( "n" , "java . naming . language" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object addToEnvironment ( String propName , Object propVal ) { return null ; }
void test63 ( ) throws Throwable { Person person0 = new Person ( ) ; Object object0 = person0 . removeFromEnvironment ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object removeFromEnvironment ( String propName ) { return null ; }
void test64 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( "cn" ) ; DirContext dirContext0 = person0 . createSubcontext ( ( Name ) compositeName0 , person0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test65 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( " : xey . 8 = X = H , l_" ) ; DirContext dirContext0 = person0 . getSchemaClassDefinition ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchemaClassDefinition ( Name name ) { return null ; }
void test66 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( "gz6@ : 6" ) ; NameParser nameParser0 = person0 . getNameParser ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameParser getNameParser ( Name name ) { return null ; }
void test67 ( ) throws Throwable { Person person0 = new Person ( ) ; String [ ] stringArray0 = new String [ 2 ] ; NamingEnumeration < Object > namingEnumeration0 = person0 . search ( "" , person0 . myAttrs , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test68 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test69 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test70 ( ) throws Throwable { Person person0 = new Person ( "m5_jB'W%w . : TTHvEb" , "m5_jB'W%w . : TTHvEb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test71 ( ) throws Throwable { Person person0 = new Person ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGivenname ( ) { return givenname ; }
void test72 ( ) throws Throwable { Person person0 = new Person ( ) ; String [ ] stringArray0 = new String [ 2 ] ; person0 . setGroups ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test73 ( ) throws Throwable { Person person0 = new Person ( ) ; CompositeName compositeName0 = new CompositeName ( "cn" ) ; person0 . unbind ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPostalAddress ( ) { return postalAddress ; }
void test74 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test75 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . unbind ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTelephoneNumber ( ) { return telephoneNumber ; }
void test76 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test77 ( ) throws Throwable { Person person0 = new Person ( "^" , "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test78 ( ) throws Throwable { Person person0 = new Person ( ) ; String string0 = person0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEmail ( ) { return email ; }
void test79 ( ) throws Throwable { Person person0 = new Person ( " , leftAlign = " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test80 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test81 ( ) throws Throwable { Person person0 = new Person ( " * OD" , " * OD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test82 ( ) throws Throwable { Person person0 = new Person ( "log4j . logger . " , "log4j . logger . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test84 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; Person person0 = new Person ( "" , "" , "" , "" , stringArray0 , stringArray0 , "" , "" , "" , "" , "l ) LRw / _Pv^G" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test85 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = " , leftAlign = " ; stringArray0 [ 1 ] = " , leftAlign = " ; stringArray0 [ 2 ] = " , leftAlign = " ; Person person0 = new Person ( " , leftAlign = " , " , leftAlign = " , " , leftAlign = " , " , leftAlign = " , stringArray0 , stringArray0 , "" , " , leftAlign = " , " , leftAlign = " , " , leftAlign = " , "" , "oNIP'#2h4 ? [ ^% - n" , " , leftAlign = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set getAllowedips ( ) { return allowedips ; }
void test86 ( ) throws Throwable { Person person0 = new Person ( "log4j . logger . " , "log4j . logger . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set getAllowedips ( ) { return allowedips ; }
void test88 ( ) throws Throwable { Person person0 = new Person ( "log4j . logger . " , "log4j . logger . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attributes getAttributes ( ) throws NamingException { return myAttrs ; }
void test89 ( ) throws Throwable { Person person0 = new Person ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUid ( ) { return uid ; }
void test0 ( ) throws Throwable { KrbUserMgr krbUserMgr0 = new KrbUserMgr ( ) ; User user0 = krbUserMgr0 . getUser ( "'lNY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( ) { return user ; }
void test2 ( ) throws Throwable { KrbUserMgr krbUserMgr0 = new KrbUserMgr ( ) ; User user0 = krbUserMgr0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( ) { return user ; }
void test3 ( ) throws Throwable { KrbUserMgr krbUserMgr0 = new KrbUserMgr ( ) ; boolean boolean0 = krbUserMgr0 . checkSecret ( "'lNY" , "'lNY" , "'lNY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkSecret ( String userid , String password , String authType ) { if ( password = = null ) return false ; if ( authType . equals ( "krb5" ) ) { / / strip only the unique username from the userid int ind = userid . indexOf ( "@" ) ; String tmp_userid = "" ; if ( ind > 0 ) tmp_userid = userid . substring ( 0 , ind ) ; user = new User ( ) ; user . setUserId ( userid ) ; String jaaslogin = props . getProperty ( "jaaslogin" , "AACSLogin" ) ; cat . info ( "Starting Kerberos Authentication" ) ; / / Kerberos Authentication PassiveCallbackHandler cbh = new PassiveCallbackHandler ( tmp_userid , password ) ; try { lctx = new LoginContext ( jaaslogin , cbh ) ; } catch ( LoginException le ) { cat . warn ( "LoginContext cannot be created . " + le . getMessage ( ) ) ; return false ; } catch ( SecurityException se ) { cat . warn ( "LoginContext cannot be created . " + se . getMessage ( ) ) ; } try { lctx . login ( ) ; } catch ( AccountExpiredException aee ) { cat . warn ( "Your account has expired . " + "Please notify your administrator . " ) ; return false ; } catch ( CredentialExpiredException cee ) { cat . warn ( "Your credentials have expired . " ) ; return false ; } catch ( LoginException le ) { System . out . println ( "Authentication failed . " + le . getMessage ( ) ) ; return false ; } catch ( Exception e ) { cat . warn ( "Unexpected Exception - unable to continue" ) ; e . printStackTrace ( ) ; return false ; } cat . info ( "Authentication succeeded . \n" ) ; Subject subject = lctx . getSubject ( ) ; Set princs = subject . getPrincipals ( ) ; Iterator princs_iter = princs . iterator ( ) ; while ( princs_iter . hasNext ( ) ) { cat . debug ( "Principal : " + princs_iter . next ( ) ) ; } LdapFetch action = new LdapFetch ( subject , user ) ; Subject . doAsPrivileged ( subject , action , null ) ; return true ; } else return false ; }
void test4 ( ) throws Throwable { KrbUserMgr krbUserMgr0 = new KrbUserMgr ( ) ; boolean boolean0 = krbUserMgr0 . checkSecret ( ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkSecret ( String userid , String password , String authType ) { if ( password = = null ) return false ; if ( authType . equals ( "krb5" ) ) { / / strip only the unique username from the userid int ind = userid . indexOf ( "@" ) ; String tmp_userid = "" ; if ( ind > 0 ) tmp_userid = userid . substring ( 0 , ind ) ; user = new User ( ) ; user . setUserId ( userid ) ; String jaaslogin = props . getProperty ( "jaaslogin" , "AACSLogin" ) ; cat . info ( "Starting Kerberos Authentication" ) ; / / Kerberos Authentication PassiveCallbackHandler cbh = new PassiveCallbackHandler ( tmp_userid , password ) ; try { lctx = new LoginContext ( jaaslogin , cbh ) ; } catch ( LoginException le ) { cat . warn ( "LoginContext cannot be created . " + le . getMessage ( ) ) ; return false ; } catch ( SecurityException se ) { cat . warn ( "LoginContext cannot be created . " + se . getMessage ( ) ) ; } try { lctx . login ( ) ; } catch ( AccountExpiredException aee ) { cat . warn ( "Your account has expired . " + "Please notify your administrator . " ) ; return false ; } catch ( CredentialExpiredException cee ) { cat . warn ( "Your credentials have expired . " ) ; return false ; } catch ( LoginException le ) { System . out . println ( "Authentication failed . " + le . getMessage ( ) ) ; return false ; } catch ( Exception e ) { cat . warn ( "Unexpected Exception - unable to continue" ) ; e . printStackTrace ( ) ; return false ; } cat . info ( "Authentication succeeded . \n" ) ; Subject subject = lctx . getSubject ( ) ; Set princs = subject . getPrincipals ( ) ; Iterator princs_iter = princs . iterator ( ) ; while ( princs_iter . hasNext ( ) ) { cat . debug ( "Principal : " + princs_iter . next ( ) ) ; } LdapFetch action = new LdapFetch ( subject , user ) ; Subject . doAsPrivileged ( subject , action , null ) ; return true ; } else return false ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { KrbUserMgr krbUserMgr0 = new KrbUserMgr ( ) ; boolean boolean0 = krbUserMgr0 . checkSecret ( " ? @s5" , "krb5" , "krb5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkSecret ( String userid , String password , String authType ) { if ( password = = null ) return false ; if ( authType . equals ( "krb5" ) ) { / / strip only the unique username from the userid int ind = userid . indexOf ( "@" ) ; String tmp_userid = "" ; if ( ind > 0 ) tmp_userid = userid . substring ( 0 , ind ) ; user = new User ( ) ; user . setUserId ( userid ) ; String jaaslogin = props . getProperty ( "jaaslogin" , "AACSLogin" ) ; cat . info ( "Starting Kerberos Authentication" ) ; / / Kerberos Authentication PassiveCallbackHandler cbh = new PassiveCallbackHandler ( tmp_userid , password ) ; try { lctx = new LoginContext ( jaaslogin , cbh ) ; } catch ( LoginException le ) { cat . warn ( "LoginContext cannot be created . " + le . getMessage ( ) ) ; return false ; } catch ( SecurityException se ) { cat . warn ( "LoginContext cannot be created . " + se . getMessage ( ) ) ; } try { lctx . login ( ) ; } catch ( AccountExpiredException aee ) { cat . warn ( "Your account has expired . " + "Please notify your administrator . " ) ; return false ; } catch ( CredentialExpiredException cee ) { cat . warn ( "Your credentials have expired . " ) ; return false ; } catch ( LoginException le ) { System . out . println ( "Authentication failed . " + le . getMessage ( ) ) ; return false ; } catch ( Exception e ) { cat . warn ( "Unexpected Exception - unable to continue" ) ; e . printStackTrace ( ) ; return false ; } cat . info ( "Authentication succeeded . \n" ) ; Subject subject = lctx . getSubject ( ) ; Set princs = subject . getPrincipals ( ) ; Iterator princs_iter = princs . iterator ( ) ; while ( princs_iter . hasNext ( ) ) { cat . debug ( "Principal : " + princs_iter . next ( ) ) ; } LdapFetch action = new LdapFetch ( subject , user ) ; Subject . doAsPrivileged ( subject , action , null ) ; return true ; } else return false ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { KrbUserMgr krbUserMgr0 = new KrbUserMgr ( ) ; boolean boolean0 = krbUserMgr0 . checkSecret ( "krb5" , "krb5" , "krb5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkSecret ( String userid , String password , String authType ) { if ( password = = null ) return false ; if ( authType . equals ( "krb5" ) ) { / / strip only the unique username from the userid int ind = userid . indexOf ( "@" ) ; String tmp_userid = "" ; if ( ind > 0 ) tmp_userid = userid . substring ( 0 , ind ) ; user = new User ( ) ; user . setUserId ( userid ) ; String jaaslogin = props . getProperty ( "jaaslogin" , "AACSLogin" ) ; cat . info ( "Starting Kerberos Authentication" ) ; / / Kerberos Authentication PassiveCallbackHandler cbh = new PassiveCallbackHandler ( tmp_userid , password ) ; try { lctx = new LoginContext ( jaaslogin , cbh ) ; } catch ( LoginException le ) { cat . warn ( "LoginContext cannot be created . " + le . getMessage ( ) ) ; return false ; } catch ( SecurityException se ) { cat . warn ( "LoginContext cannot be created . " + se . getMessage ( ) ) ; } try { lctx . login ( ) ; } catch ( AccountExpiredException aee ) { cat . warn ( "Your account has expired . " + "Please notify your administrator . " ) ; return false ; } catch ( CredentialExpiredException cee ) { cat . warn ( "Your credentials have expired . " ) ; return false ; } catch ( LoginException le ) { System . out . println ( "Authentication failed . " + le . getMessage ( ) ) ; return false ; } catch ( Exception e ) { cat . warn ( "Unexpected Exception - unable to continue" ) ; e . printStackTrace ( ) ; return false ; } cat . info ( "Authentication succeeded . \n" ) ; Subject subject = lctx . getSubject ( ) ; Set princs = subject . getPrincipals ( ) ; Iterator princs_iter = princs . iterator ( ) ; while ( princs_iter . hasNext ( ) ) { cat . debug ( "Principal : " + princs_iter . next ( ) ) ; } LdapFetch action = new LdapFetch ( subject , user ) ; Subject . doAsPrivileged ( subject , action , null ) ; return true ; } else return false ; }
void test7 ( ) throws Throwable { SimpleUserMgr simpleUserMgr0 = new SimpleUserMgr ( ) ; boolean boolean0 = simpleUserMgr0 . checkSecret ( "userID : " , "userID : " , "userID : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkSecret ( String userid , String password , String authType ) { if ( password = = null ) return false ; if ( authType . equals ( "krb5" ) ) { / / strip only the unique username from the userid int ind = userid . indexOf ( "@" ) ; String tmp_userid = "" ; if ( ind > 0 ) tmp_userid = userid . substring ( 0 , ind ) ; user = new User ( ) ; user . setUserId ( userid ) ; String jaaslogin = props . getProperty ( "jaaslogin" , "AACSLogin" ) ; cat . info ( "Starting Kerberos Authentication" ) ; / / Kerberos Authentication PassiveCallbackHandler cbh = new PassiveCallbackHandler ( tmp_userid , password ) ; try { lctx = new LoginContext ( jaaslogin , cbh ) ; } catch ( LoginException le ) { cat . warn ( "LoginContext cannot be created . " + le . getMessage ( ) ) ; return false ; } catch ( SecurityException se ) { cat . warn ( "LoginContext cannot be created . " + se . getMessage ( ) ) ; } try { lctx . login ( ) ; } catch ( AccountExpiredException aee ) { cat . warn ( "Your account has expired . " + "Please notify your administrator . " ) ; return false ; } catch ( CredentialExpiredException cee ) { cat . warn ( "Your credentials have expired . " ) ; return false ; } catch ( LoginException le ) { System . out . println ( "Authentication failed . " + le . getMessage ( ) ) ; return false ; } catch ( Exception e ) { cat . warn ( "Unexpected Exception - unable to continue" ) ; e . printStackTrace ( ) ; return false ; } cat . info ( "Authentication succeeded . \n" ) ; Subject subject = lctx . getSubject ( ) ; Set princs = subject . getPrincipals ( ) ; Iterator princs_iter = princs . iterator ( ) ; while ( princs_iter . hasNext ( ) ) { cat . debug ( "Principal : " + princs_iter . next ( ) ) ; } LdapFetch action = new LdapFetch ( subject , user ) ; Subject . doAsPrivileged ( subject , action , null ) ; return true ; } else return false ; }
void test19 ( ) throws Throwable { SimpleUserMgr simpleUserMgr0 = new SimpleUserMgr ( ) ; User user0 = simpleUserMgr0 . getUser ( ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( ) { return user ; }
void test21 ( ) throws Throwable { SimpleUserMgr simpleUserMgr0 = new SimpleUserMgr ( ) ; User user0 = simpleUserMgr0 . getUser ( ( String ) null , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( ) { return user ; }
void test0 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test1 ( ) throws Throwable { Group group0 = new Group ( ) ; String string0 = group0 . getDn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test2 ( ) throws Throwable { Group group0 = new Group ( ) ; Object object0 = group0 . removeFromEnvironment ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object removeFromEnvironment ( String propName ) { return null ; }
void test3 ( ) throws Throwable { Group group0 = new Group ( "" , "vIn' , = ] m~~c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test4 ( ) throws Throwable { Group group0 = new Group ( "" ) ; BasicAttributes basicAttributes0 = ( BasicAttributes ) group0 . getAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test5 ( ) throws Throwable { Group group0 = new Group ( ) ; String [ ] stringArray0 = new String [ 10 ] ; SearchControls searchControls0 = new SearchControls ( 0 , 284L , 0 , stringArray0 , false , false ) ; NamingEnumeration < Object > namingEnumeration0 = group0 . search ( ( Name ) null , " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" , searchControls0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test6 ( ) throws Throwable { Group group0 = new Group ( ) ; NameParser nameParser0 = group0 . getNameParser ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameParser getNameParser ( Name name ) { return null ; }
void test7 ( ) throws Throwable { Group group0 = new Group ( ) ; String string0 = group0 . composeName ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Name composeName ( Name name , Name prefix ) { return null ; }
void test8 ( ) throws Throwable { Group group0 = new Group ( "R + mm ] " , ( ArrayList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test9 ( ) throws Throwable { Group group0 = new Group ( "W'ie%" ) ; group0 . list ( "Using URL [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test10 ( ) throws Throwable { Group group0 = new Group ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; group0 . bind ( ( Name ) compoundName0 , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test11 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . rename ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test12 ( ) throws Throwable { Group group0 = new Group ( "" ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; group0 . createSubcontext ( ( Name ) compoundName0 , group0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test13 ( ) throws Throwable { Group group0 = new Group ( "" , "vIn' , = ] m~~c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test14 ( ) throws Throwable { Group group0 = new Group ( "" , "vIn' , = ] m~~c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test15 ( ) throws Throwable { Group group0 = new Group ( ) ; DirContext dirContext0 = group0 . getSchemaClassDefinition ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchemaClassDefinition ( Name name ) { return null ; }
void test16 ( ) throws Throwable { Group group0 = new Group ( ) ; Object [ ] objectArray0 = new Object [ 1 ] ; String [ ] stringArray0 = new String [ 2 ] ; SearchControls searchControls0 = new SearchControls ( 130 , 1024L , 130 , stringArray0 , false , false ) ; NamingEnumeration < Object > namingEnumeration0 = group0 . search ( "log4j warning : " , "log4j warning : " , objectArray0 , searchControls0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration search ( Name name , Attributes matchingAttributes ) { return null ; }
void test17 ( ) throws Throwable { Group group0 = new Group ( ) ; CompositeName compositeName0 = new CompositeName ( "basedn" ) ; group0 . destroySubcontext ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test18 ( ) throws Throwable { Group group0 = new Group ( "" ) ; group0 . rebind ( "" , ( Object ) null , group0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test19 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test20 ( ) throws Throwable { Group group0 = new Group ( ) ; Context context0 = group0 . createSubcontext ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext createSubcontext ( Name name , Attributes attrs ) { return null ; }
void test21 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . bind ( "" , ( Object ) " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" , group0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test22 ( ) throws Throwable { Group group0 = new Group ( "W'ie%" ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( true ) ; group0 . modifyAttributes ( "x5PzKkbE" , ( - 1854 ) , ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test23 ( ) throws Throwable { Group group0 = new Group ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; Name name0 = group0 . composeName ( ( Name ) compoundName0 , ( Name ) compoundName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Name composeName ( Name name , Name prefix ) { return null ; }
void test24 ( ) throws Throwable { Group group0 = new Group ( ) ; DirContext dirContext0 = group0 . getSchema ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchema ( Name name ) { return null ; }
void test25 ( ) throws Throwable { Group group0 = new Group ( "" , "vIn' , = ] m~~c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test26 ( ) throws Throwable { Group group0 = new Group ( ) ; NamingEnumeration < Object > namingEnumeration0 = group0 . list ( ( Name ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration list ( Name name ) { return null ; }
void test27 ( ) throws Throwable { Group group0 = new Group ( ) ; Object object0 = group0 . lookup ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookup ( Name name ) { return null ; }
void test28 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test29 ( ) throws Throwable { Group group0 = new Group ( "" ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; group0 . lookupLink ( ( Name ) compoundName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test30 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test31 ( ) throws Throwable { Group group0 = new Group ( "" ) ; group0 . lookupLink ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test32 ( ) throws Throwable { Group group0 = new Group ( ) ; CompositeName compositeName0 = new CompositeName ( "basedn" ) ; group0 . rename ( ( Name ) compositeName0 , ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test33 ( ) throws Throwable { Group group0 = new Group ( ) ; String string0 = group0 . getCn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test34 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . setCn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test35 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . unbind ( ( Name ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test36 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test37 ( ) throws Throwable { Group group0 = new Group ( "" ) ; CompositeName compositeName0 = new CompositeName ( ) ; group0 . listBindings ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test38 ( ) throws Throwable { Group group0 = new Group ( "" ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; String [ ] stringArray0 = new String [ 7 ] ; group0 . search ( ( Name ) compoundName0 , group0 . myAttrs , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test39 ( ) throws Throwable { Group group0 = new Group ( ) ; ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; Object object0 = group0 . addToEnvironment ( "" , ( Object ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object addToEnvironment ( String propName , Object propVal ) { return null ; }
void test40 ( ) throws Throwable { Group group0 = new Group ( ) ; Object object0 = group0 . lookup ( ( Name ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookup ( Name name ) { return null ; }
void test41 ( ) throws Throwable { Group group0 = new Group ( ) ; String string0 = group0 . getNameInNamespace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test42 ( ) throws Throwable { Group group0 = new Group ( "W'ie%" ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( true ) ; CompositeName compositeName0 = new CompositeName ( "W'ie%" ) ; group0 . search ( ( Name ) compositeName0 , ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test43 ( ) throws Throwable { Group group0 = new Group ( "R + mm ] " , ( ArrayList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test44 ( ) throws Throwable { Group group0 = new Group ( ) ; CompositeName compositeName0 = new CompositeName ( "" ) ; DirContext dirContext0 = group0 . getSchema ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirContext getSchema ( Name name ) { return null ; }
void test45 ( ) throws Throwable { Group group0 = new Group ( "" ) ; CompositeName compositeName0 = new CompositeName ( ) ; BasicAttributes basicAttributes0 = new BasicAttributes ( true ) ; group0 . rebind ( ( Name ) compositeName0 , ( Object ) "UTF8" , ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test46 ( ) throws Throwable { Group group0 = new Group ( "W'ie%" ) ; CompositeName compositeName0 = new CompositeName ( "W'ie%" ) ; group0 . getSchemaClassDefinition ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test47 ( ) throws Throwable { Group group0 = new Group ( "IG ] a , S ? ; R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test48 ( ) throws Throwable { Group group0 = new Group ( ) ; ModificationItem [ ] modificationItemArray0 = new ModificationItem [ 1 ] ; group0 . modifyAttributes ( "V" , modificationItemArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test49 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test50 ( ) throws Throwable { Group group0 = new Group ( ) ; NamingEnumeration < Object > namingEnumeration0 = group0 . listBindings ( "V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingEnumeration listBindings ( Name name ) { return null ; }
void test51 ( ) throws Throwable { Group group0 = new Group ( "IG ] a , S ? ; R" ) ; group0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test52 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . modifyAttributes ( ( Name ) null , 0 , group0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) { return null ; }
void test54 ( ) throws Throwable { Group group0 = new Group ( "" , "vIn' , = ] m~~c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test55 ( ) throws Throwable { Group group0 = new Group ( "g3J ( " , ( ArrayList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test56 ( ) throws Throwable { Group group0 = new Group ( "" ) ; group0 . createSubcontext ( "" , group0 . myAttrs ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test57 ( ) throws Throwable { Group group0 = new Group ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test58 ( ) throws Throwable { ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; arrayList0 . add ( "" ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test59 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . addAllowedip ( "basedn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCn ( ) { return cn ; }
void test60 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . addAllowedip ( "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test61 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Group group0 = new Group ( "" , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDn ( ) { return dn ; }
void test62 ( ) throws Throwable { Group group0 = new Group ( " - q \"\"cpw - pw " , " - q \"\"cpw - pw " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attributes getAttributes ( ) throws NamingException { return myAttrs ; }
void test63 ( ) throws Throwable { Group group0 = new Group ( ) ; CompositeName compositeName0 = new CompositeName ( "" ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" ; stringArray0 [ 4 ] = " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" ; stringArray0 [ 5 ] = " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" ; stringArray0 [ 6 ] = "cn = none" ; stringArray0 [ 7 ] = "" ; stringArray0 [ 8 ] = " / mnt / fastdata / ac1gf / SF110 / dist / 75_openhre" ; stringArray0 [ 9 ] = "" ; BasicAttributes basicAttributes0 = ( BasicAttributes ) group0 . getAttributes ( ( Name ) compositeName0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attributes getAttributes ( ) throws NamingException { return myAttrs ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; StreamHandler streamHandler0 = new StreamHandler ( ( InputStream ) byteArrayInputStream0 , "ERROR" ) ; streamHandler0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; StreamHandler streamHandler0 = new StreamHandler ( ( InputStream ) byteArrayInputStream0 , "OUTPUT" ) ; streamHandler0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; StreamHandler streamHandler0 = new StreamHandler ( ( InputStream ) byteArrayInputStream0 , "hQvyD_ , j82" ) ; streamHandler0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { Login login0 = new Login ( "R" , "R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setUsername ( String username ) { / / System . out . println ( "setting username : " + username ) ; / / user = null ; this . username = username . trim ( ) ; / / user = userMgr . getUser ( username , organization ) ; user . setUserName ( username ) ; cat . debug ( "setUserName : " + username ) ; }
void test4 ( ) throws Throwable { Login login0 = new Login ( "Lu4" ) ; login0 . setPassword ( "Lu4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecurityLogFilePath ( ) { return securityLogFilePath ; }
void test5 ( ) throws Throwable { Login login0 = new Login ( "" ) ; User user0 = login0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( ) { return user ; }
void test6 ( ) throws Throwable { String string0 = Login . getSecurityLogFilePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecurityLogFilePath ( ) { return securityLogFilePath ; }
void test8 ( ) throws Throwable { Login login0 = new Login ( "35C : x , ) > L gf" ) ; String string0 = login0 . getUsername ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsername ( ) { if ( user ! = null ) return user . getUserName ( ) ; else return username ; }
void test9 ( ) throws Throwable { Login login0 = new Login ( "7'G" , "7'G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIpAddr ( ) { return ipAddr ; }
void test10 ( ) throws Throwable { Login login0 = new Login ( "R" , "R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIpAddr ( ) { return ipAddr ; }
void test11 ( ) throws Throwable { Login login0 = new Login ( "" ) ; String string0 = login0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEmail ( ) { return email ; }
void test12 ( ) throws Throwable { Login login0 = new Login ( "7'G" , "7'G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LdapService getLdapService ( ) { if ( lservice = = null ) return ( lservice = new LdapService ( user . getLdapContext ( ) ) ) ; else return lservice ; }
void test13 ( ) throws Throwable { Login login0 = new Login ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accessDecision ( User usr , String resource , String action ) { if ( "simple" . equals ( authType ) ) { cat . debug ( "accessDecision ( ) always true for simple authType" ) ; return true ; } if ( cat . isDebugEnabled ( ) ) { cat . debug ( "User for accessDecision ( ) is " + usr ) ; cat . debug ( "resource is " + resource ) ; cat . debug ( "action is " + action ) ; cat . debug ( "XACMLConfig is " + xacmlConfig ) ; } if ( usr = = null ) return false ; boolean ac_result = false ; try { / / create XACML request RequestCtx request = new RequestCtx ( RequestBuilder . setupSubjects ( usr . getUserId ( ) , usr . getRoles ( ) , usr . getActivegroups ( ) = = null ? usr . getGroups ( ) : usr . getActivegroups ( ) ) , RequestBuilder . setupResource ( resource ) , RequestBuilder . setupAction ( action ) , new HashSet ( ) ) ; / / encode the Request and print it to standard out request . encode ( System . out , new Indenter ( ) ) ; if ( pdpadapter . makeDecision ( request ) = = 0 ) ac_result = true ; else ac_result = false ; cat . debug ( "Access Decision : " + ac_result ) ; } catch ( Exception e ) { cat . error ( e ) ; e . printStackTrace ( ) ; } return ac_result ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Login login0 = new Login ( "35C : x , ) > L gf" ) ; User user0 = new User ( "35C : x , ) > L gf" , "35C : x , ) > L gf" ) ; login0 . log ( user0 , "35C : x , ) > L gf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCountry ( ) { return country ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Login login0 = new Login ( " / . " , " / . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIpAddr ( ) { return ipAddr ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Subject subject0 = new Subject ( ) ; User user0 = new User ( "$arSk'geV ;  ( " , "$arSk'geV ;  ( " ) ; LdapFetch ldapFetch0 = new LdapFetch ( subject0 , user0 ) ; Object object0 = ldapFetch0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object run ( ) { try { / / read the configuration properties Login . loadProperties ( props , configFile ) ; String ldapurl = props . getProperty ( "ldapurl" , "ldap : / / someldapserver . com : 389" ) ; String basedn = props . getProperty ( "basedn" , "dc = arch , dc = org" ) ; String mutualauth = props . getProperty ( "mutualauth" , "false" ) ; String truststore = props . getProperty ( "truststore" , "open . keystore" ) ; String starttls = props . getProperty ( "starttls" , "yes" ) ; / / System . setProperty ( "javax . net . ssl . trustStore" , "C : \\openhre . keystore" ) ; System . setProperty ( "javax . net . ssl . trustStore" , truststore ) ; / / Set up the environment for creating the initial context Hashtable env = new Hashtable ( 11 ) ; env . put ( Context . INITIAL_CONTEXT_FACTORY , "com . sun . jndi . ldap . LdapCtxFactory" ) ; env . put ( Context . PROVIDER_URL , ldapurl ) ; / / Request the use of the "GSSAPI" SASL mechanism / / Authenticate by using already established Kerberos credentials env . put ( Context . SECURITY_AUTHENTICATION , "GSSAPI" ) ; / / env . put ( "javax . security . sasl . server . authentication" , mutualauth ) ; / / mutual authentication / / Set authzId = u : < username > , since OpenLDAP expects SASL to provide authzId of the form / / u : < username > or dn : < LDAP - DN > Set princs = subjct . getPrincipals ( ) ; Iterator princs_iter = princs . iterator ( ) ; String princ_name = "" ; if ( princs_iter . hasNext ( ) ) { princ_name = princs_iter . next ( ) . toString ( ) . trim ( ) ; int indx = princ_name . indexOf ( "@" ) ; princ_name = princ_name . substring ( 0 , indx ) ; } String authzId = "u : " + princ_name ; cat . debug ( "AuthzID : " + authzId ) ; env . put ( "java . naming . security . sasl . authorizationId" , authzId ) ; / / Create the initial context LdapContext dctx = new InitialLdapContext ( env , null ) ; user . setLdapContext ( dctx ) ; if ( starttls . toLowerCase ( ) . equals ( "yes" ) ) { / / Start TLS cat . info ( "Starting TLS" ) ; StartTlsResponse tls = ( StartTlsResponse ) dctx . extendedOperation ( new StartTlsRequest ( ) ) ; SSLSession sess = tls . negotiate ( ) ; } else cat . info ( "No TLS support" ) ; / / Search all entries . SearchControls determines scope of search and what gets / / returned as a result of the search . SearchControls ctls = new SearchControls ( ) ; ctls . setReturningObjFlag ( false ) ; ctls . setSearchScope ( SearchControls . SUBTREE_SCOPE ) ; String filter = " ( uid = " + princ_name + " ) " ; NamingEnumeration answer = dctx . search ( basedn , filter , ctls ) ; setUserAttributes ( answer ) ; / / dctx . close ( ) ; } catch ( NamingException ne ) { ne . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { Subject subject0 = new Subject ( ) ; User user0 = new User ( "$arSk'geV ;  ( " , "$arSk'geV ;  ( " ) ; LdapFetch ldapFetch0 = new LdapFetch ( subject0 , user0 ) ; BasicAttribute basicAttribute0 = new BasicAttribute ( "$arSk'geV ;  ( " , true ) ; NamingEnumeration < ? > namingEnumeration0 = basicAttribute0 . getAll ( ) ; ldapFetch0 . setUserAttributes ( namingEnumeration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setUserAttributes ( NamingEnumeration naming_enum ) throws Exception { try { while ( naming_enum . hasMore ( ) ) { SearchResult sr = ( SearchResult ) naming_enum . next ( ) ; Attributes attrs = sr . getAttributes ( ) ; if ( attrs = = null ) { cat . debug ( "This result has no attributes" ) ; } else { for ( naming_enum = attrs . getAll ( ) ; naming_enum . hasMore ( ) ; ) { Attribute attrib = ( Attribute ) naming_enum . next ( ) ; if ( attrib . getID ( ) . equals ( "dn" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String user_dn = ( String ) e . next ( ) ; user . setDN ( user_dn ) ; cat . debug ( "dn : " + user_dn ) ; } } / / user ID ; make userId = uid@arch . org else if ( attrib . getID ( ) . equals ( "uid" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String user_uid = ( String ) e . next ( ) ; / / String domain = basedn . replaceAll ( "dc = " , "" ) ; / / user_uid = user_uid + "@" + domain . replaceAll ( " , " , " . " ) ; / / user . setUserId ( user_uid ) ; cat . debug ( "uid : " + user_uid ) ; } } / / user's complete name else if ( attrib . getID ( ) . equals ( "cn" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String user_cn = ( String ) e . next ( ) ; user . setUserName ( user_cn ) ; cat . debug ( "cn : " + user_cn ) ; } } / / group membership else if ( attrib . getID ( ) . equals ( "ou" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String group = ( String ) e . next ( ) ; user . addGroup ( group ) ; cat . debug ( "group : " + group ) ; } } / / role membership else if ( attrib . getID ( ) . equals ( "employeeType" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String role = ( String ) e . next ( ) ; user . addRole ( role ) ; cat . debug ( "role : " + role ) ; } } / / allowed IP addresses else if ( attrib . getID ( ) . equals ( "ipHostNumber" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String allowed_ip = ( String ) e . next ( ) ; user . addAllowedip ( allowed_ip ) ; cat . debug ( "allowed ip : " + allowed_ip ) ; } } / / password validity start date else if ( attrib . getID ( ) . equals ( "krb5ValidStart" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String pwvalidstart = ( String ) e . next ( ) ; user . setPassvalidstart ( pwvalidstart ) ; cat . debug ( "Password valid from : " + pwvalidstart ) ; } } / / password renewal time else if ( attrib . getID ( ) . equals ( "krb5MaxRenew" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String pwrenewal = ( String ) e . next ( ) ; user . setPassrenewal ( pwrenewal ) ; cat . debug ( "Password renewal time : " + pwrenewal + " days" ) ; } } / / user password change required if value = - 1 else if ( attrib . getID ( ) . equals ( "krb5MaxLife" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { String pwchange = ( String ) e . next ( ) ; if ( pwchange . trim ( ) . equals ( " - 1" ) ) user . setPasschange ( true ) ; cat . debug ( "Password change : " + pwchange ) ; } } } } } } catch ( NamingException e ) { e . printStackTrace ( ) ; } }
void test0 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . setEmail ( "TT : : Qwp = fP#fD7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDN ( ) { return "cn = " + userName + " , o = " + organization + " , c = " + country ; / / return dn ; }
void test1 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; user0 . update ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test2 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . getPassvalidstart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test3 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; boolean boolean0 = user0 . getPasschange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . setPassvalidstart ( "TT : : Qwp = fP#fD7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setIpAddr ( "A" ) ; boolean boolean0 = user0 . equals ( ( Object ) user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; Properties properties0 = user0 . getCredentials ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test7 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . setCountry ( "TT : : Qwp = fP#fD7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test8 ( ) throws Throwable { User user0 = new User ( ) ; user0 . getAllowedips ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test9 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; user0 . setLdapContext ( ( LdapContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test11 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . getPassrenewal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test12 ( ) throws Throwable { User user0 = new User ( ) ; user0 . getLdapContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test14 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setUserName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test15 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; String string0 = user0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test16 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setPassrenewal ( "\" xariaq`le . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test17 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; user0 . setPasschange ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test18 ( ) throws Throwable { User user0 = new User ( "#nl > O } KHq" , "#nl > O } KHq" ) ; user0 . setOrg ( "#nl > O } KHq" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test19 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setSurName ( "G { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test20 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setPassword ( ( String ) null ) ; user0 . encodePassword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test21 ( ) throws Throwable { User user0 = new User ( ) ; user0 . getActivegroups ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test22 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setUserId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test23 ( ) throws Throwable { User user0 = new User ( ) ; user0 . encodePassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test24 ( ) throws Throwable { User user0 = new User ( " { ssha" , " { ssha" ) ; user0 . encodePassword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test25 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . checkPassword ( "TT : : Qwp = fP#fD7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDN ( ) { return "cn = " + userName + " , o = " + organization + " , c = " + country ; / / return dn ; }
void test26 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setPassword ( ( String ) null ) ; boolean boolean0 = user0 . checkPassword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test27 ( ) throws Throwable { User user0 = new User ( ) ; user0 . addRole ( "" ) ; user0 . addRole ( "cn = 033" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test28 ( ) throws Throwable { User user0 = new User ( " { sha } gzojofx6 ? v ; bz" , " { sha } gzojofx6 ? v ; bz" ) ; user0 . addGroup ( " { sha } gzojofx6 ? v ; bz" ) ; user0 . addGroup ( " { sha } gzojofx6 ? v ; bz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test29 ( ) throws Throwable { User user0 = new User ( "#nl > O } KHq" , "#nl > O } KHq" ) ; user0 . addActivegroup ( "#nl > O } KHq" ) ; user0 . addActivegroup ( "#nl > O } KHq" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test30 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; user0 . addAllowedip ( "yOkR" ) ; user0 . addAllowedip ( "yOkR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPasschange ( ) { return passchange ; }
void test31 ( ) throws Throwable { User user0 = new User ( "xml" , "xml" ) ; user0 . setDN ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDN ( ) { return "cn = " + userName + " , o = " + organization + " , c = " + country ; / / return dn ; }
void test32 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setDN ( "cn = 033" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return userName ; }
void test33 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setDN ( "dn : cn = , o = null , c = \ncn : \nid : \nsn : \nuserPassword : \nobjectClass : top\nobjectClass : person\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOrg ( ) { return organization ; }
void test34 ( ) throws Throwable { User user0 = new User ( ) ; user0 . addRole ( "\" xariaq`le . " ) ; String string0 = user0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test35 ( ) throws Throwable { User user0 = new User ( "yOkR" , "yOkR" ) ; user0 . addGroup ( "" ) ; String string0 = user0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test36 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . setIpAddr ( "TT : : Qwp = fP#fD7" ) ; String string0 = user0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test37 ( ) throws Throwable { User user0 = new User ( ) ; user0 . addRole ( "" ) ; user0 . addGroup ( "" ) ; String string0 = user0 . toString ( "cn = 033" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test38 ( ) throws Throwable { User user0 = new User ( ) ; User user1 = new User ( "G { " , "G { " ) ; boolean boolean0 = user0 . equals ( ( Object ) user1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test39 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . encodePassword ( "TT : : Qwp = fP#fD7" ) ; user0 . encodePassword ( "TT : : Qwp = fP#fD7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test41 ( ) throws Throwable { User user0 = new User ( "TT : : Qwp = fP#fD7" , "TT : : Qwp = fP#fD7" ) ; user0 . encodePassword ( "TT : : Qwp = fP#fD7" ) ; boolean boolean0 = user0 . checkPassword ( "TT : : Qwp = fP#fD7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return passwd ; }
void test0 ( ) throws Throwable { Set < Object > set0 = RequestBuilder . setupAction ( "JNTj~oa ! > b6j^ ! eFrD + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { RequestBuilder requestBuilder0 = new RequestBuilder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Set < Object > set0 = RequestBuilder . setupSubjects ( "g + T`O@6 [ a` [ T > T } , " , ( Set ) null , ( Set ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set setupSubjects ( String subject , Set roles , Set groups ) throws URISyntaxException { HashSet attributes = new HashSet ( ) ; / / setup the id and value for the requesting subject URI subjectId = new URI ( "urn : oasis : names : tc : xacml : 1 . 0 : subject : subject - id" ) ; RFC822NameAttribute value = new RFC822NameAttribute ( subject ) ; / / create the subject section with three attributes , the first with / / the subject's identity . . . attributes . add ( new Attribute ( subjectId , null , null , value ) ) ; Iterator it = null ; / / . . . and the second with the subject's role membership ( s ) if ( roles = = null ) { cat . warn ( "Subject " + subject + " has null roles" ) ; } else { it = roles . iterator ( ) ; while ( it . hasNext ( ) ) attributes . add ( new Attribute ( new URI ( "urn : openhre : names : security : 1 . 0 : role" ) , null , null , new StringAttribute ( ( String ) ( it . next ( ) ) ) ) ) ; } / / . . . and the third with the subject's group membership ( s ) if ( groups = = null ) { cat . warn ( "Subject " + subject + " has null groups" ) ; } else { it = groups . iterator ( ) ; while ( it . hasNext ( ) ) attributes . add ( new Attribute ( new URI ( "urn : openhre : names : security : 1 . 0 : group" ) , null , null , new StringAttribute ( ( String ) ( it . next ( ) ) ) ) ) ; } / / bundle the attributes in a Subject with the default category HashSet subjects = new HashSet ( ) ; subjects . add ( new Subject ( attributes ) ) ; return subjects ; }
void test4 ( ) throws Throwable { LinkedHashSet < RequestBuilder > linkedHashSet0 = new LinkedHashSet < RequestBuilder > ( ) ; HashSet < Object > hashSet0 = new HashSet < Object > ( ) ; hashSet0 . add ( ( Object ) null ) ; Set < Object > set0 = RequestBuilder . setupSubjects ( "g + T`O@6 [ a` [ T > T } , " , ( Set ) linkedHashSet0 , ( Set ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set setupSubjects ( String subject , Set roles , Set groups ) throws URISyntaxException { HashSet attributes = new HashSet ( ) ; / / setup the id and value for the requesting subject URI subjectId = new URI ( "urn : oasis : names : tc : xacml : 1 . 0 : subject : subject - id" ) ; RFC822NameAttribute value = new RFC822NameAttribute ( subject ) ; / / create the subject section with three attributes , the first with / / the subject's identity . . . attributes . add ( new Attribute ( subjectId , null , null , value ) ) ; Iterator it = null ; / / . . . and the second with the subject's role membership ( s ) if ( roles = = null ) { cat . warn ( "Subject " + subject + " has null roles" ) ; } else { it = roles . iterator ( ) ; while ( it . hasNext ( ) ) attributes . add ( new Attribute ( new URI ( "urn : openhre : names : security : 1 . 0 : role" ) , null , null , new StringAttribute ( ( String ) ( it . next ( ) ) ) ) ) ; } / / . . . and the third with the subject's group membership ( s ) if ( groups = = null ) { cat . warn ( "Subject " + subject + " has null groups" ) ; } else { it = groups . iterator ( ) ; while ( it . hasNext ( ) ) attributes . add ( new Attribute ( new URI ( "urn : openhre : names : security : 1 . 0 : group" ) , null , null , new StringAttribute ( ( String ) ( it . next ( ) ) ) ) ) ; } / / bundle the attributes in a Subject with the default category HashSet subjects = new HashSet ( ) ; subjects . add ( new Subject ( attributes ) ) ; return subjects ; }
void test0 ( ) throws Throwable { FilePolicyModule filePolicyModule0 = new FilePolicyModule ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdReferenceSupported ( ) { return true ; }
void test2 ( ) throws Throwable { FilePolicyModule filePolicyModule0 = new FilePolicyModule ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIdReferenceSupported ( ) { return true ; }
void test3 ( ) throws Throwable { FilePolicyModule filePolicyModule0 = new FilePolicyModule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilePolicyModule ( ) { super ( ) ; String schemaName = System . getProperty ( PolicyReader . POLICY_SCHEMA_PROPERTY ) ; if ( schemaName ! = null ) schemaFile = new File ( schemaName ) ; }
void test4 ( ) throws Throwable { FilePolicyModule filePolicyModule0 = new FilePolicyModule ( "ELEMENT_PSVI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilePolicyModule ( ) { super ( ) ; String schemaName = System . getProperty ( PolicyReader . POLICY_SCHEMA_PROPERTY ) ; if ( schemaName ! = null ) schemaFile = new File ( schemaName ) ; }
void test5 ( ) throws Throwable { LinkedList < PolicySet > linkedList0 = new LinkedList < PolicySet > ( ) ; FilePolicyModule filePolicyModule0 = new FilePolicyModule ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilePolicyModule ( ) { super ( ) ; String schemaName = System . getProperty ( PolicyReader . POLICY_SCHEMA_PROPERTY ) ; if ( schemaName ! = null ) schemaFile = new File ( schemaName ) ; }
void test6 ( ) throws Throwable { LinkedList < PolicySet > linkedList0 = new LinkedList < PolicySet > ( ) ; FilePolicyModule filePolicyModule0 = new FilePolicyModule ( ( List ) linkedList0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilePolicyModule ( ) { super ( ) ; String schemaName = System . getProperty ( PolicyReader . POLICY_SCHEMA_PROPERTY ) ; if ( schemaName ! = null ) schemaFile = new File ( schemaName ) ; }
void test7 ( ) throws Throwable { LinkedList < FilePolicyModule > linkedList0 = new LinkedList < FilePolicyModule > ( ) ; FilePolicyModule filePolicyModule0 = new FilePolicyModule ( ( List ) linkedList0 , "ELEMENT_PSVI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilePolicyModule ( ) { super ( ) ; String schemaName = System . getProperty ( PolicyReader . POLICY_SCHEMA_PROPERTY ) ; if ( schemaName ! = null ) schemaFile = new File ( schemaName ) ; }
void test0 ( ) throws Throwable { HL7DefaultConfigurationMakerImpl hL7DefaultConfigurationMakerImpl0 = new HL7DefaultConfigurationMakerImpl ( ) ; HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = ( HL7VersionConfigurationMapImpl ) hL7DefaultConfigurationMakerImpl0 . readConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7DefaultConvertorImpl hL7DefaultConvertorImpl0 = new HL7DefaultConvertorImpl ( ) ; HL7DefaultConvertorHandler hL7DefaultConvertorHandler0 = hL7DefaultConvertorImpl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test2 ( ) throws Throwable { HL7DefaultConvertorImpl hL7DefaultConvertorImpl0 = new HL7DefaultConvertorImpl ( ) ; MessageTranslatorImpl messageTranslatorImpl0 = ( MessageTranslatorImpl ) hL7DefaultConvertorImpl0 . getMessageTranslator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test3 ( ) throws Throwable { HL7DefaultConvertorImpl hL7DefaultConvertorImpl0 = new HL7DefaultConvertorImpl ( ) ; HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; hL7DefaultConvertorImpl0 . setConfigurations ( ( HL7VersionConfigurationMap ) hL7VersionConfigurationMapImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { HL7DefaultConvertorImpl hL7DefaultConvertorImpl0 = new HL7DefaultConvertorImpl ( ) ; HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = ( HL7VersionConfigurationMapImpl ) hL7DefaultConvertorImpl0 . getConfigurations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { Connection connection0 = new Connection ( ) ; connection0 . setElementID ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test1 ( ) throws Throwable { Connection connection0 = new Connection ( ) ; int int0 = connection0 . getElementID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test2 ( ) throws Throwable { Connection connection0 = new Connection ( ) ; connection0 . setFrom ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrom ( ) { return from ; }
void test3 ( ) throws Throwable { Connection connection0 = new Connection ( ) ; int int0 = connection0 . getTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTo ( ) { return to ; }
void test4 ( ) throws Throwable { Connection connection0 = new Connection ( ) ; int int0 = connection0 . getFrom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrom ( ) { return from ; }
void test5 ( ) throws Throwable { Connection connection0 = new Connection ( ) ; connection0 . setTo ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTo ( ) { return to ; }
void test0 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; Connection connection0 = new Connection ( ) ; connectionList0 . addItem ( connection0 ) ; String string0 = connectionList0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; connectionList0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; Connection connection0 = connectionList0 . getItem ( ( - 1585 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; Connection connection0 = connectionList0 . getItem ( 1734 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; Connection connection0 = new Connection ( ) ; connectionList0 . setItem ( ( - 1 ) , connection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; Connection connection0 = new Connection ( ) ; connectionList0 . setItem ( 0 , connection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; Connection connection0 = new Connection ( ) ; connectionList0 . addItem ( connection0 ) ; connectionList0 . setItem ( 0 , connection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; connectionList0 . removeItem ( ( - 655 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test8 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; connectionList0 . removeItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test9 ( ) throws Throwable { ConnectionList connectionList0 = new ConnectionList ( ) ; connectionList0 . addItem ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; int int0 = expressionImpl0 . getNumberOfElementTypes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test1 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . setNumberOfElementTypes ( ( - 1420 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test3 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; ExpressionPart expressionPart0 = expressionImpl0 . getItem ( ( - 872 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionImpl0 . readFromStringForDebug ( "Z * [ esQ + - " ) ; String string0 = expressionImpl0 . toString ( ( ExpressionElementMapper ) expressionElementMapperImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test5 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; ExpressionPart expressionPart0 = expressionImpl0 . getItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test6 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . setItem ( ( - 872 ) , ( ExpressionPart ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . setItem ( 0 , ( ExpressionPart ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test8 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . readFromStringForDebug ( " * RQW1m_8 ] G5 / - " ) ; expressionImpl0 . setItem ( 4 , ( ExpressionPart ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test9 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . removeItem ( ( - 1127 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test10 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . removeItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test11 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionImpl0 . addItem ( ( ExpressionPart ) expressionPartImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test15 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setType ( ( - 1396 ) ) ; expressionImpl0 . addItem ( ( ExpressionPart ) expressionPartImpl0 ) ; String string0 = expressionImpl0 . toString ( ( ExpressionElementMapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test16 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . readFromStringForDebug ( "8 en0 } Ef * E33" ) ; String string0 = expressionImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElementTypes ( ) ; / * * * set the number of elements expresion * @param numberOfElements * / void setNumberOfElementTypes ( int numberOfElements ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionPart item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionPart getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionPart value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; String toString ( ExpressionElementMapper mapper ) ; }
void test0 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; int int0 = expressionMatrixImpl0 . getNumberOfElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElements ( ) ; / * * * get number of nodes ( in this A [ B ] [ C ] D for example 5 . ) . If the matrix is well builded the next expression is always true * < pre > getNumberOfElements ( ) + 1 = = getNumberOfNodes ( ) < / pre > * @return number of nodes * / int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test1 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; int int0 = expressionMatrixImpl0 . getNumberOfNodes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test2 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . setValue ( ( - 11 ) , 100 , 100 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test3 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . setValue ( 2 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test4 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 2 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test5 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 0 , ( - 11 ) , ( - 11 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test6 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 2 , 0 , 1 ) ; expressionMatrixImpl0 . outNoStandardConnections ( true , ( ExpressionElementMapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test7 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; int int0 = expressionMatrixImpl0 . getValue ( ( - 275 ) , ( - 275 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test8 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; int int0 = expressionMatrixImpl0 . getValue ( 736 , 736 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test9 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; int int0 = expressionMatrixImpl0 . getValue ( 1 , ( - 1718 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test11 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 1 , 1 , 1 ) ; String string0 = expressionMatrixImpl0 . outNoStandardConnections ( false , ( ExpressionElementMapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElements ( ) ; / * * * get number of nodes ( in this A [ B ] [ C ] D for example 5 . ) . If the matrix is well builded the next expression is always true * < pre > getNumberOfElements ( ) + 1 = = getNumberOfNodes ( ) < / pre > * @return number of nodes * / int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test12 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 2 , 0 , 1 ) ; String string0 = expressionMatrixImpl0 . outNoStandardConnections ( false , ( ExpressionElementMapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test13 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 2 , 11 , 11 ) ; String string0 = expressionMatrixImpl0 . outNoStandardConnections ( true , ( ExpressionElementMapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElements ( ) ; / * * * get number of nodes ( in this A [ B ] [ C ] D for example 5 . ) . If the matrix is well builded the next expression is always true * < pre > getNumberOfElements ( ) + 1 = = getNumberOfNodes ( ) < / pre > * @return number of nodes * / int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test14 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 2 , 11 , 11 ) ; String string0 = expressionMatrixImpl0 . outNoStandardConnections ( false , ( ExpressionElementMapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElements ( ) ; / * * * get number of nodes ( in this A [ B ] [ C ] D for example 5 . ) . If the matrix is well builded the next expression is always true * < pre > getNumberOfElements ( ) + 1 = = getNumberOfNodes ( ) < / pre > * @return number of nodes * / int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test15 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 2 , 0 , 1 ) ; String string0 = expressionMatrixImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test16 ( ) throws Throwable { ExpressionMatrixImpl expressionMatrixImpl0 = new ExpressionMatrixImpl ( ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . creatMatrix ( 74 ) ; expressionMatrixImpl0 . addNewNode ( ) ; expressionMatrixImpl0 . setValue ( 1 , 1 , 1 ) ; String string0 = expressionMatrixImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfElements ( ) ; / * * * get number of nodes ( in this A [ B ] [ C ] D for example 5 . ) . If the matrix is well builded the next expression is always true * < pre > getNumberOfElements ( ) + 1 = = getNumberOfNodes ( ) < / pre > * @return number of nodes * / int getNumberOfNodes ( ) ; / * * * initialize the matrix * @param numberOfElements * / void creatMatrix ( int numberOfElements ) ; / * * * set the realtion node - - elementID - - > value * @param node * @param elementID * @param value * / void setValue ( int node , int elementID , int value ) ; / * * * get the relation * @param node * @param elementID * @return target node or - 1 if the relation doesn't exist * / int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test0 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionElementMapperImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperImpl0 . addItem ( ( ExpressionElementMapperItem ) expressionElementMapperItemImpl0 ) ; String string0 = expressionElementMapperImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; ExpressionElementMapperItem expressionElementMapperItem0 = expressionElementMapperImpl0 . getItem ( ( - 65 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; ExpressionElementMapperItem expressionElementMapperItem0 = expressionElementMapperImpl0 . getItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionElementMapperImpl0 . setItem ( ( - 1255 ) , ( ExpressionElementMapperItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionElementMapperImpl0 . setItem ( 0 , ( ExpressionElementMapperItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionElementMapperImpl0 . addItem ( ( ExpressionElementMapperItem ) null ) ; expressionElementMapperImpl0 . setItem ( 0 , ( ExpressionElementMapperItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionElementMapperImpl0 . removeItem ( ( - 1863 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test8 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; expressionElementMapperImpl0 . removeItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test9 ( ) throws Throwable { ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl ( ) ; ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperImpl0 . addItem ( ( ExpressionElementMapperItem ) expressionElementMapperItemImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl ( ) ; ExpressionMatrix expressionMatrix0 = messageTracerImpl0 . getMatrix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionMatrix getMatrix ( ) ; void setMatrix ( ExpressionMatrix matrix ) ; ExpressionElementMapper getMapper ( ) ; void setMapper ( ExpressionElementMapper mapper ) ; MessageTracerHandler getHandler ( ) ; void setHandler ( MessageTracerHandler handler ) ; void reset ( ) ; }
void test4 ( ) throws Throwable { MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl ( ) ; ExpressionElementMapper expressionElementMapper0 = messageTracerImpl0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapper getMapper ( ) ; void setMapper ( ExpressionElementMapper mapper ) ; MessageTracerHandler getHandler ( ) ; void setHandler ( MessageTracerHandler handler ) ; void reset ( ) ; }
void test5 ( ) throws Throwable { MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl ( ) ; MessageTracerHandler messageTracerHandler0 = messageTracerImpl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test9 ( ) throws Throwable { MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl ( ) ; ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . setRepeatable ( true ) ; messageTracerImpl0 . processGroup ( ( Expression ) expressionImpl0 , ( HL7MessageGroup ) hL7MessageGroupImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test10 ( ) throws Throwable { MessageTracerImpl messageTracerImpl0 = new MessageTracerImpl ( ) ; ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . setRequired ( true ) ; messageTracerImpl0 . processGroup ( ( Expression ) expressionImpl0 , ( HL7MessageGroup ) hL7MessageGroupImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { ExpressionNodeWithLevel expressionNodeWithLevel0 = new ExpressionNodeWithLevel ( 1818 , 1818 ) ; expressionNodeWithLevel0 . setLevel ( 1818 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( ) { return level ; }
void test1 ( ) throws Throwable { ExpressionNodeWithLevel expressionNodeWithLevel0 = new ExpressionNodeWithLevel ( 1818 , 1818 ) ; expressionNodeWithLevel0 . setNode ( 1818 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNode ( ) { return node ; }
void test2 ( ) throws Throwable { ExpressionNodeWithLevel expressionNodeWithLevel0 = new ExpressionNodeWithLevel ( 0 , 0 ) ; int int0 = expressionNodeWithLevel0 . getNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( ) { return level ; }
void test3 ( ) throws Throwable { ExpressionNodeWithLevel expressionNodeWithLevel0 = new ExpressionNodeWithLevel ( 0 , 0 ) ; String string0 = expressionNodeWithLevel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { ExpressionNodeWithLevel expressionNodeWithLevel0 = new ExpressionNodeWithLevel ( 1818 , 1818 ) ; int int0 = expressionNodeWithLevel0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNode ( ) { return node ; }
void test1 ( ) throws Throwable { ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . readFromStringForDebug ( "5 [ - reQo ] " ) ; expressionImpl0 . readFromStringForDebug ( "5 [ - reQo ] " ) ; ExpressionMatrixBuilderImpl expressionMatrixBuilderImpl0 = new ExpressionMatrixBuilderImpl ( ) ; ExpressionMatrixImpl expressionMatrixImpl0 = ( ExpressionMatrixImpl ) expressionMatrixBuilderImpl0 . buildMatrix ( ( Expression ) expressionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { ExpressionMatrixBuilderImpl expressionMatrixBuilderImpl0 = new ExpressionMatrixBuilderImpl ( ) ; ExpressionImpl expressionImpl0 = new ExpressionImpl ( ) ; expressionImpl0 . readFromStringForDebug ( " { p } 2fWY ] KQ2 + 1" ) ; expressionImpl0 . readFromStringForDebug ( " { p } 2fWY ] KQ2 + 1" ) ; ExpressionMatrixImpl expressionMatrixImpl0 = ( ExpressionMatrixImpl ) expressionMatrixBuilderImpl0 . buildMatrix ( ( Expression ) expressionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . addItem ( ( - 1564 ) ) ; boolean boolean0 = expressionNodeList0 . isInList ( ( - 1794 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . addItem ( 1 ) ; expressionNodeList0 . addExpressionList ( expressionNodeList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test3 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . addItem ( 1 ) ; ExpressionNodeList expressionNodeList1 = new ExpressionNodeList ( ) ; expressionNodeList1 . addExpressionList ( expressionNodeList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; int int0 = expressionNodeList0 . getItem ( ( - 1794 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test5 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; int int0 = expressionNodeList0 . getItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test6 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . setItem ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . setItem ( 135 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test8 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . addItem ( ( - 1364 ) ) ; expressionNodeList0 . setItem ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test9 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . removeItem ( ( - 442 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test10 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . removeItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test11 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . addItem ( 1272 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test12 ( ) throws Throwable { ExpressionNodeList expressionNodeList0 = new ExpressionNodeList ( ) ; expressionNodeList0 . addItem ( ( - 1564 ) ) ; String string0 = expressionNodeList0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; HL7Segment hL7Segment0 = expressionElementMapperItemImpl0 . getSegment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test1 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; String string0 = expressionElementMapperItemImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test2 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperItemImpl0 . setType ( ( - 1475 ) ) ; String string0 = expressionElementMapperItemImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test3 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperItemImpl0 . setSegment ( ( HL7Segment ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test4 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperItemImpl0 . setID ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test5 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; int int0 = expressionElementMapperItemImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test6 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; String string0 = expressionElementMapperItemImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test7 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperItemImpl0 . setType ( 1 ) ; String string0 = expressionElementMapperItemImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test8 ( ) throws Throwable { ExpressionElementMapperItemImpl expressionElementMapperItemImpl0 = new ExpressionElementMapperItemImpl ( ) ; expressionElementMapperItemImpl0 . setType ( 2 ) ; String string0 = expressionElementMapperItemImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test0 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setElementID ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test1 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; int int0 = expressionPartImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test2 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; int int0 = expressionPartImpl0 . getElementID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test3 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setType ( 1 ) ; String string0 = expressionPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test4 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; String string0 = expressionPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setType ( 2 ) ; String string0 = expressionPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test6 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setType ( 3 ) ; String string0 = expressionPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test7 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setType ( 4 ) ; String string0 = expressionPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test8 ( ) throws Throwable { ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl ( ) ; expressionPartImpl0 . setType ( 1685 ) ; String string0 = expressionPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test0 ( ) throws Throwable { NodeStack nodeStack0 = new NodeStack ( ) ; nodeStack0 . push ( 1660 ) ; int int0 = nodeStack0 . pop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int pop ( ) throws InvalidExpressionException { if ( ! stack . isEmpty ( ) ) { return ( ( Integer ) stack . pop ( ) ) . intValue ( ) ; } else { throw new InvalidExpressionException ( ) ; } }
void test0 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; HL7DataType hL7DataType0 = hL7DataTypePartSubPartImpl0 . getSubType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DataType getSubType ( ) ; / * * * Sets the subtype * * @param subType subtype * / void setSubType ( HL7DataType subType ) ; }
void test1 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; String string0 = hL7DataTypePartSubPartImpl0 . getSubPartID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubPartID ( ) ; / * * * Sets the subtype id * * @param subPartID subtype id * / void setSubPartID ( String subPartID ) ; / * * * Returns the subtype * * @return subtype * / HL7DataType getSubType ( ) ; / * * * Sets the subtype * * @param subType subtype * / void setSubType ( HL7DataType subType ) ; }
void test2 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypePartSubPartImpl0 . setSubType ( ( HL7DataType ) hL7DataTypeImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test3 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; int int0 = hL7DataTypePartSubPartImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test4 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; hL7DataTypePartSubPartImpl0 . setSubPartID ( "" ) ; String string0 = hL7DataTypePartSubPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; hL7DataTypePartSubPartImpl0 . setSubPartID ( "\"" ) ; String string0 = hL7DataTypePartSubPartImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; HL7FieldListImpl hL7FieldListImpl0 = ( HL7FieldListImpl ) hL7SegmentImpl0 . getFields ( ) ; hL7SegmentImpl0 . setFields ( ( HL7FieldList ) hL7FieldListImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test1 ( ) throws Throwable { HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; hL7SegmentImpl0 . setID ( "Xx$J9 , Hj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test2 ( ) throws Throwable { HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; String string0 = hL7SegmentImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test3 ( ) throws Throwable { HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; String string0 = hL7SegmentImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test4 ( ) throws Throwable { HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; hL7SegmentImpl0 . setDescription ( "" ) ; String string0 = hL7SegmentImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; hL7SegmentImpl0 . setDescription ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n segment id = \"null\"\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n\n" ) ; String string0 = hL7SegmentImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; hL7DataTypePartListImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; hL7DataTypePartListImpl0 . addItem ( ( HL7DataTypePart ) hL7DataTypePartPrimitiveImpl0 ) ; String string0 = hL7DataTypePartListImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; HL7DataTypePart hL7DataTypePart0 = hL7DataTypePartListImpl0 . getItem ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; HL7DataTypePart hL7DataTypePart0 = hL7DataTypePartListImpl0 . getItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; hL7DataTypePartListImpl0 . setItem ( ( - 1860 ) , ( HL7DataTypePart ) hL7DataTypePartSubPartImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test5 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; hL7DataTypePartListImpl0 . setItem ( 290 , ( HL7DataTypePart ) hL7DataTypePartPrimitiveImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; hL7DataTypePartListImpl0 . addItem ( ( HL7DataTypePart ) null ) ; hL7DataTypePartListImpl0 . setItem ( 0 , ( HL7DataTypePart ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; hL7DataTypePartListImpl0 . removeItem ( ( - 11 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test8 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; hL7DataTypePartListImpl0 . removeItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test9 ( ) throws Throwable { HL7DataTypePartListImpl hL7DataTypePartListImpl0 = new HL7DataTypePartListImpl ( ) ; hL7DataTypePartListImpl0 . addItem ( ( HL7DataTypePart ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { DOMUtils dOMUtils0 = new DOMUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { QName qName0 = WSDDConstants . QNAME_JAXRPC_HEADER ; RPCParam rPCParam0 = new RPCParam ( qName0 , ( Object ) "" ) ; String string0 = DOMUtils . getParameter ( ( Node ) rPCParam0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getParameter ( Node node , String name ) { NamedNodeMap attributes = node . getAttributes ( ) ; Node attribute = attributes . getNamedItem ( name ) ; if ( attribute ! = null ) { return attribute . getNodeValue ( ) . trim ( ) ; } else { return "" ; } }
void test4 ( ) throws Throwable { QName qName0 = WSDDConstants . QNAME_JAXRPC_HEADER ; RPCParam rPCParam0 = new RPCParam ( qName0 , ( Object ) "" ) ; String string0 = DOMUtils . getTextContent ( ( Node ) rPCParam0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTextContent ( Node node ) { NodeList children = node . getChildNodes ( ) ; String ret = "" ; if ( children ! = null ) { for ( int i = 0 ; i < children . getLength ( ) ; i + + ) { if ( children . item ( i ) . getNodeType ( ) = = Node . TEXT_NODE ) { ret + = children . item ( i ) . getNodeValue ( ) ; } } } ret = ret . trim ( ) ; ret = ret . replace ( '\n' , ' ' ) ; ret = ret . replace ( '\r' , ' ' ) ; ret = ret . replace ( '\t' , ' ' ) ; return ret ; }
void test0 ( ) throws Throwable { HL7DataTypeMapImpl hL7DataTypeMapImpl0 = new HL7DataTypeMapImpl ( ) ; hL7DataTypeMapImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { HL7DataTypeMapImpl hL7DataTypeMapImpl0 = new HL7DataTypeMapImpl ( ) ; int int0 = hL7DataTypeMapImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7DataTypeMapImpl hL7DataTypeMapImpl0 = new HL7DataTypeMapImpl ( ) ; HL7DataType hL7DataType0 = hL7DataTypeMapImpl0 . getItem ( "`AI - = 2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7DataTypeMapImpl hL7DataTypeMapImpl0 = new HL7DataTypeMapImpl ( ) ; HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypeMapImpl0 . addItem ( ( HL7DataType ) hL7DataTypeImpl0 ) ; String string0 = hL7DataTypeMapImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { HL7DataTypeMapImpl hL7DataTypeMapImpl0 = new HL7DataTypeMapImpl ( ) ; hL7DataTypeMapImpl0 . removeItem ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test5 ( ) throws Throwable { HL7DataTypeMapImpl hL7DataTypeMapImpl0 = new HL7DataTypeMapImpl ( ) ; HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypeMapImpl0 . addItem ( ( HL7DataType ) hL7DataTypeImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; hL7VersionConfigurationMapImpl0 . addConfiguration ( "" , ( HL7Configuration ) null ) ; hL7VersionConfigurationMapImpl0 . getConfigurationsKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; int int0 = hL7VersionConfigurationMapImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; hL7VersionConfigurationMapImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; String [ ] stringArray0 = hL7VersionConfigurationMapImpl0 . getConfigurationsKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getConfigurationsKeys ( ) ; / * * * clear all configurations * / void clearAll ( ) ; / * * * add to configuration to the map * @param version identifier of version * @param configuration configuration * / void addConfiguration ( String version , HL7Configuration configuration ) ; / * * * get the configuration for my version identifier . * @param version identifier * @return configuration * / HL7Configuration getSuitableConfiguration ( String version ) ; }
void test4 ( ) throws Throwable { HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; HL7Configuration hL7Configuration0 = hL7VersionConfigurationMapImpl0 . getSuitableConfiguration ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Configuration getSuitableConfiguration ( String version ) ; }
void test5 ( ) throws Throwable { HL7VersionConfigurationMapImpl hL7VersionConfigurationMapImpl0 = new HL7VersionConfigurationMapImpl ( ) ; hL7VersionConfigurationMapImpl0 . addConfiguration ( "" , ( HL7Configuration ) null ) ; hL7VersionConfigurationMapImpl0 . getSuitableConfiguration ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; hL7FieldListImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; HL7Field hL7Field0 = hL7FieldListImpl0 . getItem ( ( - 159 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; HL7Field hL7Field0 = hL7FieldListImpl0 . getItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldListImpl0 . addItem ( ( HL7Field ) hL7FieldImpl0 ) ; String string0 = hL7FieldListImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; hL7FieldListImpl0 . setItem ( ( - 1481 ) , ( HL7Field ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldListImpl0 . setItem ( 306 , ( HL7Field ) hL7FieldImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test6 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldListImpl0 . addItem ( ( HL7Field ) hL7FieldImpl0 ) ; hL7FieldListImpl0 . setItem ( 0 , ( HL7Field ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; hL7FieldListImpl0 . removeItem ( ( - 2014 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test8 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; hL7FieldListImpl0 . removeItem ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test9 ( ) throws Throwable { HL7FieldListImpl hL7FieldListImpl0 = new HL7FieldListImpl ( ) ; HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldListImpl0 . addItem ( ( HL7Field ) hL7FieldImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7TableItemImpl hL7TableItemImpl0 = new HL7TableItemImpl ( ) ; hL7TableItemImpl0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test1 ( ) throws Throwable { HL7TableItemImpl hL7TableItemImpl0 = new HL7TableItemImpl ( ) ; String string0 = hL7TableItemImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test2 ( ) throws Throwable { HL7TableItemImpl hL7TableItemImpl0 = new HL7TableItemImpl ( ) ; String string0 = hL7TableItemImpl0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( int node , int elementID ) ; / * * * get the number of new node * @return number of node * / int addNewNode ( ) ; / * * * this method write out only the interesting connections for debuging . In this example * < pre > * A [ B ] { [ C ] D }
void test3 ( ) throws Throwable { HL7TableItemImpl hL7TableItemImpl0 = new HL7TableItemImpl ( ) ; hL7TableItemImpl0 . setDescription ( "" ) ; String string0 = hL7TableItemImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7TableItemImpl hL7TableItemImpl0 = new HL7TableItemImpl ( ) ; hL7TableItemImpl0 . setDescription ( "yv * ZlEV" ) ; String string0 = hL7TableItemImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { HL7FieldGivenDependingProcessorImpl hL7FieldGivenDependingProcessorImpl0 = new HL7FieldGivenDependingProcessorImpl ( ) ; String string0 = hL7FieldGivenDependingProcessorImpl0 . getFrom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrom ( ) { return from ; }
void test2 ( ) throws Throwable { HL7FieldGivenDependingProcessorImpl hL7FieldGivenDependingProcessorImpl0 = new HL7FieldGivenDependingProcessorImpl ( ) ; hL7FieldGivenDependingProcessorImpl0 . setFrom ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrom ( ) { return from ; }
void test0 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; hL7ConfigurationImpl0 . setPatterns ( ( HL7PatternsForCatchValues ) hL7PatternsForCatchValuesImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; HL7TableMapImpl hL7TableMapImpl0 = ( HL7TableMapImpl ) hL7ConfigurationImpl0 . getTables ( ) ; hL7ConfigurationImpl0 . setTables ( ( HL7TableMap ) hL7TableMapImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; HL7DataTypeMapImpl hL7DataTypeMapImpl0 = ( HL7DataTypeMapImpl ) hL7ConfigurationImpl0 . getDataTypes ( ) ; hL7ConfigurationImpl0 . setDataTypes ( ( HL7DataTypeMap ) hL7DataTypeMapImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test3 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; String string0 = hL7ConfigurationImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; HL7MessageMapImpl hL7MessageMapImpl0 = ( HL7MessageMapImpl ) hL7ConfigurationImpl0 . getMessages ( ) ; hL7ConfigurationImpl0 . setMessages ( ( HL7MessageMap ) hL7MessageMapImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = ( HL7PatternsForCatchValuesImpl ) hL7ConfigurationImpl0 . getPatterns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test7 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; HL7SegmentMapImpl hL7SegmentMapImpl0 = ( HL7SegmentMapImpl ) hL7ConfigurationImpl0 . getSegments ( ) ; hL7ConfigurationImpl0 . setSegments ( ( HL7SegmentMap ) hL7SegmentMapImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test11 ( ) throws Throwable { HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl ( ) ; hL7ConfigurationImpl0 . connectConfigurations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; hL7DataTypePartPrimitiveImpl0 . setDescription ( "$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test1 ( ) throws Throwable { HL7DataTypePartSubPartImpl hL7DataTypePartSubPartImpl0 = new HL7DataTypePartSubPartImpl ( ) ; String string0 = hL7DataTypePartSubPartImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test0 ( ) throws Throwable { HL7FieldRepeatableDependingProcessorImpl hL7FieldRepeatableDependingProcessorImpl0 = new HL7FieldRepeatableDependingProcessorImpl ( ) ; Detail detail0 = new Detail ( ) ; detail0 . addChildElement ( "p" , "p" ) ; hL7FieldRepeatableDependingProcessorImpl0 . readConfiguration ( ( Node ) detail0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { HL7FieldRepeatableDependingProcessorImpl hL7FieldRepeatableDependingProcessorImpl0 = new HL7FieldRepeatableDependingProcessorImpl ( ) ; Detail detail0 = new Detail ( ) ; detail0 . addTextNode ( ( String ) null ) ; hL7FieldRepeatableDependingProcessorImpl0 . readConfiguration ( ( Node ) detail0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7VersionConfigurationMap readConfiguration ( ) throws InvalidConfigDataStructureException , IOException , SAXException ; }
void test0 ( ) throws Throwable { HL7TableMapImpl hL7TableMapImpl0 = new HL7TableMapImpl ( ) ; int int0 = hL7TableMapImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7TableMapImpl hL7TableMapImpl0 = new HL7TableMapImpl ( ) ; hL7TableMapImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { HL7TableMapImpl hL7TableMapImpl0 = new HL7TableMapImpl ( ) ; HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; hL7TableMapImpl0 . addItem ( ( HL7Table ) hL7TableImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { HL7TableMapImpl hL7TableMapImpl0 = new HL7TableMapImpl ( ) ; HL7Table hL7Table0 = hL7TableMapImpl0 . getItem ( " = . Zh * d { r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test5 ( ) throws Throwable { HL7TableMapImpl hL7TableMapImpl0 = new HL7TableMapImpl ( ) ; hL7TableMapImpl0 . removeItem ( " description = \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { HL7TableMapImpl hL7TableMapImpl0 = new HL7TableMapImpl ( ) ; String string0 = hL7TableMapImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setTable ( " field sequential = \"C . \" length = \"0\" required = \"R\" repeatable = \"false\"" ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; String string0 = hL7FieldImpl0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test2 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; int int0 = hL7FieldImpl0 . getRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test3 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setRequired ( 458746 ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test4 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; HL7FieldDependingProcessor hL7FieldDependingProcessor0 = hL7FieldImpl0 . getDependingProcessor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test5 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; String string0 = hL7FieldImpl0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReference ( ) ; / * * * Sets the reference number * * @param reference reference number * / void setReference ( String reference ) ; / * * * Returns the field description * * @return description * / String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test7 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; String string0 = hL7FieldImpl0 . getSequential ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSequential ( ) ; / * * * Sets the sequential number * * @param sequential sequential number * / void setSequential ( String sequential ) ; / * * * Returns the reference number * * @return reference number * / String getReference ( ) ; / * * * Sets the reference number * * @param reference reference number * / void setReference ( String reference ) ; / * * * Returns the field description * * @return description * / String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test8 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; HL7Table hL7Table0 = hL7FieldImpl0 . getTableObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test9 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; int int0 = hL7FieldImpl0 . getMaximumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test10 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setDescription ( " - P0h\"lD , " ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test11 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setTableObject ( ( HL7Table ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test12 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; int int0 = hL7FieldImpl0 . getDependingType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test13 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; HL7DataType hL7DataType0 = hL7FieldImpl0 . getDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test14 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setMaximumLength ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test15 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; HL7FieldRepeatableDependingProcessorImpl hL7FieldRepeatableDependingProcessorImpl0 = new HL7FieldRepeatableDependingProcessorImpl ( ) ; hL7FieldImpl0 . setDependingProcessor ( ( HL7FieldDependingProcessor ) hL7FieldRepeatableDependingProcessorImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSequential ( ) ; / * * * Sets the sequential number * * @param sequential sequential number * / void setSequential ( String sequential ) ; / * * * Returns the reference number * * @return reference number * / String getReference ( ) ; / * * * Sets the reference number * * @param reference reference number * / void setReference ( String reference ) ; / * * * Returns the field description * * @return description * / String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test16 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setRepeatable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test17 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; String string0 = hL7FieldImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test18 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setSequential ( "C . " ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test19 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setDataTypeID ( " - P0h\"lD , " ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test20 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; boolean boolean0 = hL7FieldImpl0 . isRepeatable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test21 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setReference ( "C . " ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test22 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; String string0 = hL7FieldImpl0 . getDataTypeID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test23 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setDataType ( ( HL7DataType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test25 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setDependingType ( ( - 1554 ) ) ; HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7FieldImpl0 . getActualDataType ( ( HL7Configuration ) null , ( HL7CheckerState ) hL7CheckerStateImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test26 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test27 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setRequired ( 1 ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test28 ( ) throws Throwable { HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl ( ) ; hL7FieldImpl0 . setRequired ( 4 ) ; String string0 = hL7FieldImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test0 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; boolean boolean0 = hL7PatternsForCatchValuesImpl0 . patternExist ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean patternExist ( String pattern ) ; / * * * Returns array of ids in map * * @return array of ids * / String [ ] getPatterns ( ) ; / * * * Remove all items from map * / void clearAll ( ) ; / * * * Add pattern item to map * * @param pattern pattern * / void addPattern ( String pattern ) ; / * * * Set the value for pattern * @param pattern pattern * @param value value * / void setValueForPattern ( String pattern , String value ) ; / * * * Set the pattern value * @param pattern pattern * @return value * / String getValueForPattern ( String pattern ) ; / * * * Clear patterns values * / void clearPatternValues ( ) ; }
void test1 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; hL7PatternsForCatchValuesImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; int int0 = hL7PatternsForCatchValuesImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; hL7PatternsForCatchValuesImpl0 . setValueForPattern ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test4 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; hL7PatternsForCatchValuesImpl0 . addPattern ( "" ) ; hL7PatternsForCatchValuesImpl0 . clearPatternValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test5 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; String string0 = hL7PatternsForCatchValuesImpl0 . getValueForPattern ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueForPattern ( String pattern ) ; / * * * Clear patterns values * / void clearPatternValues ( ) ; }
void test6 ( ) throws Throwable { HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl ( ) ; hL7PatternsForCatchValuesImpl0 . addPattern ( "" ) ; hL7PatternsForCatchValuesImpl0 . getValueForPattern ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; String string0 = hL7MessageGroupImpl0 . getAdditional ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdditional ( ) ; void setAdditional ( String additional ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( HL7MessageGroupItem item ) ; / * * * Returns group item with < CODE > index < / CODE > * * @return item part * / HL7MessageGroupItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , HL7MessageGroupItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . setAdditional ( "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) ; / * * * Sets the whether the segment required * * @param required whether the segment required * / void setRequired ( boolean required ) ; }
void test2 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test3 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; String string0 = hL7MessageGroupImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; int int0 = hL7MessageGroupImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test5 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; HL7MessageGroupItem hL7MessageGroupItem0 = hL7MessageGroupImpl0 . getItem ( ( - 351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test6 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; HL7MessageGroupItem hL7MessageGroupItem0 = hL7MessageGroupImpl0 . getItem ( 165 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test8 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . setItem ( ( - 1 ) , ( HL7MessageGroupItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test9 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . setItem ( 0 , ( HL7MessageGroupItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test10 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . addItem ( ( HL7MessageGroupItem ) null ) ; hL7MessageGroupImpl0 . setItem ( 0 , ( HL7MessageGroupItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test11 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . removeItem ( ( - 1623 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test12 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . removeItem ( 50 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdditional ( ) ; void setAdditional ( String additional ) ; / * * * Returns size of list * * @return size of list * / int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( HL7MessageGroupItem item ) ; / * * * Returns group item with < CODE > index < / CODE > * * @return item part * / HL7MessageGroupItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , HL7MessageGroupItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test13 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . addItem ( ( HL7MessageGroupItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; boolean boolean0 = hL7MessageSegmentImpl0 . isRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) ; / * * * Sets the whether the segment required * * @param required whether the segment required * / void setRequired ( boolean required ) ; }
void test1 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; hL7MessageSegmentImpl0 . setRequired ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; hL7MessageGroupImpl0 . setRepeatable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test3 ( ) throws Throwable { HL7MessageGroupImpl hL7MessageGroupImpl0 = new HL7MessageGroupImpl ( ) ; boolean boolean0 = hL7MessageGroupImpl0 . isRepeatable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test0 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; HL7TableItemMapImpl hL7TableItemMapImpl0 = ( HL7TableItemMapImpl ) hL7TableImpl0 . getItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; hL7TableImpl0 . setDescription ( "CT - T > " ) ; String string0 = hL7TableImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; String string0 = hL7TableImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test3 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; hL7TableImpl0 . setID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test4 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; String string0 = hL7TableImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test5 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; hL7TableImpl0 . setItems ( ( HL7TableItemMap ) hL7TableItemMapImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { HL7TableImpl hL7TableImpl0 = new HL7TableImpl ( ) ; hL7TableImpl0 . setDescription ( "" ) ; String string0 = hL7TableImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; String string0 = hL7DataTypeImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test1 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; String string0 = hL7DataTypeImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test2 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; int int0 = hL7DataTypeImpl0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getContentType ( ) ; / * * * Sets the type of content * possible values are : * < CODE > CONTENT_TYPE_PARTLIST < / CODE > * < CODE > CONTENT_TYPE_COMBINATION < / CODE > * * @param contentType type of content * / void setContentType ( int contentType ) ; / * * * Returns list of parts * * @return list of parts * / HL7DataTypePartList getParts ( ) ; / * * * Sets list of parts * * @param parts list of parts * / void setParts ( HL7DataTypePartList parts ) ; }
void test3 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypeImpl0 . setID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; HL7DataTypePartListImpl hL7DataTypePartListImpl0 = ( HL7DataTypePartListImpl ) hL7DataTypeImpl0 . getParts ( ) ; hL7DataTypeImpl0 . setParts ( ( HL7DataTypePartList ) hL7DataTypePartListImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test5 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypeImpl0 . setDescription ( "VLM^yWIGIpMRS" ) ; String string0 = hL7DataTypeImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test6 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypeImpl0 . setContentType ( 1 ) ; String string0 = hL7DataTypeImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getContentType ( ) ; / * * * Sets the type of content * possible values are : * < CODE > CONTENT_TYPE_PARTLIST < / CODE > * < CODE > CONTENT_TYPE_COMBINATION < / CODE > * * @param contentType type of content * / void setContentType ( int contentType ) ; / * * * Returns list of parts * * @return list of parts * / HL7DataTypePartList getParts ( ) ; / * * * Sets list of parts * * @param parts list of parts * / void setParts ( HL7DataTypePartList parts ) ; }
void test7 ( ) throws Throwable { HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7DataTypeImpl0 . setContentType ( ( - 204 ) ) ; String string0 = hL7DataTypeImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getContentType ( ) ; / * * * Sets the type of content * possible values are : * < CODE > CONTENT_TYPE_PARTLIST < / CODE > * < CODE > CONTENT_TYPE_COMBINATION < / CODE > * * @param contentType type of content * / void setContentType ( int contentType ) ; / * * * Returns list of parts * * @return list of parts * / HL7DataTypePartList getParts ( ) ; / * * * Sets list of parts * * @param parts list of parts * / void setParts ( HL7DataTypePartList parts ) ; }
void test0 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; hL7DataTypePartPrimitiveImpl0 . setTable ( ( HL7Table ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test1 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; String string0 = hL7DataTypePartPrimitiveImpl0 . getIDTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDTable ( ) ; / * * * Sets the table id * * @param idTable table id * / void setIDTable ( String idTable ) ; / * * * Returns the table * * @return table * / HL7Table getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( HL7Table table ) ; }
void test2 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; int int0 = hL7DataTypePartPrimitiveImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test3 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; String string0 = hL7DataTypePartPrimitiveImpl0 . getReader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReader ( ) ; / * * * Sets the class name of reader for this part * * @param className class name * / void setReader ( String className ) ; / * * * Returns the instance of < CODE > HL7PrimitiveDataTypeReader < / CODE > * * @return instance of reader * / HL7PrimitiveDataTypeReader getInstanceReader ( ) ; / * * * Sets the instance of < CODE > HL7PrimitiveDataTypeReader < / CODE > * * @param instanceOfReader instance of reader * / void setInstanceReader ( HL7PrimitiveDataTypeReader instanceOfReader ) ; / * * * Returns the id of table * * @return table id * / String getIDTable ( ) ; / * * * Sets the table id * * @param idTable table id * / void setIDTable ( String idTable ) ; / * * * Returns the table * * @return table * / HL7Table getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( HL7Table table ) ; }
void test4 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; HL7PrimitiveDataTypeReader hL7PrimitiveDataTypeReader0 = hL7DataTypePartPrimitiveImpl0 . getInstanceReader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7PrimitiveDataTypeReader getInstanceReader ( ) ; / * * * Sets the instance of < CODE > HL7PrimitiveDataTypeReader < / CODE > * * @param instanceOfReader instance of reader * / void setInstanceReader ( HL7PrimitiveDataTypeReader instanceOfReader ) ; / * * * Returns the id of table * * @return table id * / String getIDTable ( ) ; / * * * Sets the table id * * @param idTable table id * / void setIDTable ( String idTable ) ; / * * * Returns the table * * @return table * / HL7Table getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( HL7Table table ) ; }
void test5 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; HL7Table hL7Table0 = hL7DataTypePartPrimitiveImpl0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test6 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; NumericDataTypeReader numericDataTypeReader0 = new NumericDataTypeReader ( ) ; hL7DataTypePartPrimitiveImpl0 . setInstanceReader ( ( HL7PrimitiveDataTypeReader ) numericDataTypeReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test7 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; hL7DataTypePartPrimitiveImpl0 . setReader ( "^ ? : qj . ] Pl" ) ; String string0 = hL7DataTypePartPrimitiveImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test8 ( ) throws Throwable { HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl ( ) ; hL7DataTypePartPrimitiveImpl0 . setIDTable ( "O ) PasF ? ^$ ! fm ! S#CJ" ) ; String string0 = hL7DataTypePartPrimitiveImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7SegmentMapImpl hL7SegmentMapImpl0 = new HL7SegmentMapImpl ( ) ; hL7SegmentMapImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { HL7SegmentMapImpl hL7SegmentMapImpl0 = new HL7SegmentMapImpl ( ) ; int int0 = hL7SegmentMapImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7SegmentMapImpl hL7SegmentMapImpl0 = new HL7SegmentMapImpl ( ) ; String string0 = hL7SegmentMapImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7SegmentMapImpl hL7SegmentMapImpl0 = new HL7SegmentMapImpl ( ) ; HL7Segment hL7Segment0 = hL7SegmentMapImpl0 . getItem ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test5 ( ) throws Throwable { HL7SegmentMapImpl hL7SegmentMapImpl0 = new HL7SegmentMapImpl ( ) ; hL7SegmentMapImpl0 . removeItem ( "@K I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test6 ( ) throws Throwable { HL7SegmentMapImpl hL7SegmentMapImpl0 = new HL7SegmentMapImpl ( ) ; HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; hL7SegmentMapImpl0 . addItem ( ( HL7Segment ) hL7SegmentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7MessageMapImpl hL7MessageMapImpl0 = new HL7MessageMapImpl ( ) ; hL7MessageMapImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test1 ( ) throws Throwable { HL7MessageMapImpl hL7MessageMapImpl0 = new HL7MessageMapImpl ( ) ; int int0 = hL7MessageMapImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7MessageMapImpl hL7MessageMapImpl0 = new HL7MessageMapImpl ( ) ; HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; hL7MessageMapImpl0 . addItem ( ( HL7Message ) hL7MessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7MessageMapImpl hL7MessageMapImpl0 = new HL7MessageMapImpl ( ) ; String string0 = hL7MessageMapImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7MessageMapImpl hL7MessageMapImpl0 = new HL7MessageMapImpl ( ) ; HL7Message hL7Message0 = hL7MessageMapImpl0 . getItem ( "1 , / ~ : ? 6KdNOQ%7LbvB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test6 ( ) throws Throwable { HL7MessageMapImpl hL7MessageMapImpl0 = new HL7MessageMapImpl ( ) ; hL7MessageMapImpl0 . removeItem ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test0 ( ) throws Throwable { HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; hL7TableItemMapImpl0 . clearAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; int int0 = hL7TableItemMapImpl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test2 ( ) throws Throwable { HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; HL7TableItemImpl hL7TableItemImpl0 = new HL7TableItemImpl ( ) ; hL7TableItemMapImpl0 . addItem ( ( HL7TableItem ) hL7TableItemImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test3 ( ) throws Throwable { HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; String string0 = hL7TableItemMapImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test5 ( ) throws Throwable { HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; HL7TableItem hL7TableItem0 = hL7TableItemMapImpl0 . getItem ( " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n ITEMS\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test6 ( ) throws Throwable { HL7TableItemMapImpl hL7TableItemMapImpl0 = new HL7TableItemMapImpl ( ) ; hL7TableItemMapImpl0 . removeItem ( "XZ\"_EQx_H8ME" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Add new item to list * * @param item new item * / void addItem ( ExpressionElementMapperItem item ) ; / * * * Returns part with < CODE > index < / CODE > * * @return item part * / ExpressionElementMapperItem getItem ( int index ) ; / * * * Sets item with < CODE > index < / CODE > to new value * * @param index index * @param value value * / void setItem ( int index , ExpressionElementMapperItem value ) ; / * * * Remove item with < CODE > index < / CODE > * * @param index index * / void removeItem ( int index ) ; / * * * Remove all items in list * / void clearAll ( ) ; }
void test0 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; hL7MessageSegmentImpl0 . setSegment ( ( HL7Segment ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test1 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; String string0 = hL7MessageSegmentImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test2 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; String string0 = hL7MessageSegmentImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test3 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; hL7MessageSegmentImpl0 . setID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test4 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; HL7Segment hL7Segment0 = hL7MessageSegmentImpl0 . getSegment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test5 ( ) throws Throwable { HL7MessageSegmentImpl hL7MessageSegmentImpl0 = new HL7MessageSegmentImpl ( ) ; int int0 = hL7MessageSegmentImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) ; / * * * set the element type . Possible values are : * < CODE > ELEMENT < / CODE > , < CODE > OPEN_REPEATABLE < / CODE > , < CODE > CLOSE_REPEATABLE < / CODE > , < CODE > OPEN_OPTIONAL < / CODE > , < CODE > CLOSE_OPTIONAL < / CODE > * @param type type * / void setType ( int type ) ; / * * * get the ID of element ( only in case getType ( ) = = ELEMENT ) * @return element id * / int getElementID ( ) ; / * * * set the ID of element ( only in case getType ( ) = = ELEMENT ) * @param elementID element id * / void setElementID ( int elementID ) ; }
void test0 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; MessageTracer messageTracer0 = hL7MessageImpl0 . getTracer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageTracer getTracer ( ) ; void setTracer ( MessageTracer tracer ) ; }
void test1 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; String string0 = hL7MessageImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test2 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; hL7MessageImpl0 . setTracer ( ( MessageTracer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test3 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; String string0 = hL7MessageImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test4 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; HL7MessageGroup hL7MessageGroup0 = hL7MessageImpl0 . getGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Group getGroup ( String cn ) { Group grp = new Group ( cn ) ; NamingEnumeration answer = fetch ( "ou = groups , " + basedn , null , " ( cn = " + cn + " ) " ) ; try { while ( answer . hasMore ( ) ) { SearchResult sr = ( SearchResult ) answer . next ( ) ; Attributes attrs = sr . getAttributes ( ) ; if ( attrs = = null ) { cat . debug ( "This result has no attributes" ) ; } else { for ( NamingEnumeration naming_enum = attrs . getAll ( ) ; naming_enum . hasMore ( ) ; ) { Attribute attrib = ( Attribute ) naming_enum . next ( ) ; if ( attrib . getID ( ) . equals ( "ipHostNumber" ) ) { for ( NamingEnumeration e = attrib . getAll ( ) ; e . hasMore ( ) ; ) { grp . addAllowedip ( ( String ) e . next ( ) ) ; } } } / / end for } / / end else } } catch ( Exception e ) { e . printStackTrace ( ) ; } return grp ; }
void test5 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; hL7MessageImpl0 . setID ( "41A$qu\" ! r ! F ? L^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) ; / * * * Sets the field description * * @param description field description * / void setDescription ( String description ) ; / * * * Returns the data type id or id field defines data type binding . * It depends on value of isDataTypeBinding . * * @return data type id * / String getDataTypeID ( ) ; / * * * Sets the data type id or id field defines data type binding * It depends on value of isDataTypeBinding . * * @param dataTypeID data type id * / void setDataTypeID ( String dataTypeID ) ; / * * * Returns the data type object on case that the field data type isn't binding * * @return data type object * / HL7DataType getDataType ( ) ; / * * * Sets the data type object * * @param dataType data type object * / void setDataType ( HL7DataType dataType ) ; / * * * Returns type of data type depending on something * possible values are : * < CODE > TYPE_DEPENDING_NORMAL < / CODE > * < CODE > TYPE_DEPENDING_REPEATABLE < / CODE > * < CODE > TYPE_DEPENDING_GIVEN < / CODE > * @return type of depending * / int getDependingType ( ) ; / * * * Sets the data type depending * * @param dependingType depending type * / void setDependingType ( int dependingType ) ; HL7FieldDependingProcessor getDependingProcessor ( ) ; void setDependingProcessor ( HL7FieldDependingProcessor dependingProcessor ) ; / * * * Returns the length of field * * @return length of field * / int getMaximumLength ( ) ; / * * * Sets the maximum length of attribute * * @param length maximum length of attribute * / void setMaximumLength ( int length ) ; / * * * Returns required code * possible values are : * < CODE > REQUIRED_R < / CODE > * < CODE > REQUIRED_O < / CODE > * < CODE > REQUIRED_C < / CODE > * < CODE > REQUIRED_X < / CODE > * < CODE > REQUIRED_B < / CODE > * * @return required code * / int getRequired ( ) ; / * * * Sets the required code * * @param required required code * / void setRequired ( int required ) ; / * * * Returns whether the field repeatable * * @return whether the field repeatable * / boolean isRepeatable ( ) ; / * * * Sets the whether the field repeatable * * @param repeatable whether the field repeatable * / void setRepeatable ( boolean repeatable ) ; / * * * Returns the table * * @return table * / String getTable ( ) ; / * * * Sets the table * * @param table table * / void setTable ( String table ) ; / * * * Returns the table object * * @return table object * / HL7Table getTableObject ( ) ; / * * * Sets the table object * * @param tableObject table object * / void setTableObject ( HL7Table tableObject ) ; }
void test6 ( ) throws Throwable { HL7MessageImpl hL7MessageImpl0 = new HL7MessageImpl ( ) ; hL7MessageImpl0 . setGroup ( ( HL7MessageGroup ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) ; / * * * set the id of segment or name of additional tag * @param id or name * / void setID ( String id ) ; / * * * get configuration for segment ( only in case type = = SEGMENT_ITEM ) * @return configuration for segment * / HL7Segment getSegment ( ) ; / * * * set configuration for segment ( only in case type = = SEGMENT_ITEM ) * @param segment segment * / void setSegment ( HL7Segment segment ) ; }
void test2 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . setHandler ( ( HL7SAXEventGeneratorHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test4 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; HL7CheckerImpl hL7CheckerImpl0 = new HL7CheckerImpl ( ) ; hL7SAXEventGeneratorImpl0 . setChecker ( ( HL7Checker ) hL7CheckerImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test6 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; HL7SAXEventGeneratorHandler hL7SAXEventGeneratorHandler0 = hL7SAXEventGeneratorImpl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test7 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; HL7CheckerImpl hL7CheckerImpl0 = ( HL7CheckerImpl ) hL7SAXEventGeneratorImpl0 . getChecker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Checker getChecker ( ) ; void setChecker ( HL7Checker checker ) ; }
void test8 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; ContentHandler contentHandler0 = hL7SAXEventGeneratorImpl0 . getContentHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentHandler getContentHandler ( ) ; void setContentHandler ( ContentHandler contentHandler ) ; HL7SAXEventGeneratorHandler getHandler ( ) ; void setHandler ( HL7SAXEventGeneratorHandler handler ) ; HL7Checker getChecker ( ) ; void setChecker ( HL7Checker checker ) ; / * * * This id file will be sending during conversion with error events * @return id file * / String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test9 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . setIDFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test10 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl ( ) ; StylesheetHandler stylesheetHandler0 = ( StylesheetHandler ) transformerFactoryImpl0 . newTemplatesHandler ( ) ; hL7SAXEventGeneratorImpl0 . setContentHandler ( ( ContentHandler ) stylesheetHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setContentHandler ( ContentHandler contentHandler ) ; HL7SAXEventGeneratorHandler getHandler ( ) ; void setHandler ( HL7SAXEventGeneratorHandler handler ) ; HL7Checker getChecker ( ) ; void setChecker ( HL7Checker checker ) ; / * * * This id file will be sending during conversion with error events * @return id file * / String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test13 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; String string0 = hL7SAXEventGeneratorImpl0 . getIDFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test14 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . beginField ( "U1R4" , 696 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test16 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . beginComponent ( ( String ) null , ( - 1548 ) , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test18 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . endComponent ( ( String ) null , 285 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test20 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . subComponent ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test22 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; hL7SAXEventGeneratorImpl0 . error ( ( - 854 ) , ( - 854 ) , " * \"TzsYAt : ^IT" , " * \"TzsYAt : ^IT" , " * \"TzsYAt : ^IT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test0 ( ) throws Throwable { HL72XMLImpl hL72XMLImpl0 = new HL72XMLImpl ( ) ; HL72XMLHandler hL72XMLHandler0 = hL72XMLImpl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test0 ( ) throws Throwable { HL7CheckerImpl hL7CheckerImpl0 = new HL7CheckerImpl ( ) ; HL7Configuration hL7Configuration0 = hL7CheckerImpl0 . getConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7Parser getParser ( ) ; void setParser ( HL7Parser parser ) ; HL7CheckerState getState ( ) ; void setState ( HL7CheckerState state ) ; HL7CheckerHandler getHandler ( ) ; void setHandler ( HL7CheckerHandler handler ) ; }
void test5 ( ) throws Throwable { HL7CheckerImpl hL7CheckerImpl0 = new HL7CheckerImpl ( ) ; HL7CheckerStateImpl hL7CheckerStateImpl0 = ( HL7CheckerStateImpl ) hL7CheckerImpl0 . getState ( ) ; hL7CheckerImpl0 . setState ( ( HL7CheckerState ) hL7CheckerStateImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test7 ( ) throws Throwable { HL7CheckerImpl hL7CheckerImpl0 = new HL7CheckerImpl ( ) ; HL7ParserImpl hL7ParserImpl0 = ( HL7ParserImpl ) hL7CheckerImpl0 . getParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7Parser getParser ( ) ; void setParser ( HL7Parser parser ) ; HL7CheckerState getState ( ) ; void setState ( HL7CheckerState state ) ; HL7CheckerHandler getHandler ( ) ; void setHandler ( HL7CheckerHandler handler ) ; }
void test9 ( ) throws Throwable { HL7CheckerImpl hL7CheckerImpl0 = new HL7CheckerImpl ( ) ; HL7CheckerHandler hL7CheckerHandler0 = hL7CheckerImpl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test10 ( ) throws Throwable { HL72XMLImpl hL72XMLImpl0 = new HL72XMLImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL72XMLImpl ( ) { checker = new HL7CheckerImpl ( ) ; checker . setHandler ( this ) ; xmlUtils = new XMLUtils ( ) ; }
void test0 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . setSubComponentSeparator ( '~' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test1 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; char char0 = sAXEvents2HL7Impl0 . getSubComponentSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getComponentSeparator ( ) ; void setComponentSeparator ( char componentSeparator ) ; char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test2 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; String string0 = sAXEvents2HL7Impl0 . getSegmentSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test3 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; char char0 = sAXEvents2HL7Impl0 . getRepeatableSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test4 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; char char0 = sAXEvents2HL7Impl0 . getComponentSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getFieldSeparator ( ) ; void setFieldSeparator ( char fieldSeparator ) ; char getComponentSeparator ( ) ; void setComponentSeparator ( char componentSeparator ) ; char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test5 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . setEscapeCharacter ( ' & ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test6 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; char char0 = sAXEvents2HL7Impl0 . getEscapeCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test8 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; sAXEvents2HL7Impl0 . setWriter ( ( Writer ) stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getComponentSeparator ( ) ; void setComponentSeparator ( char componentSeparator ) ; char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test9 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . setComponentSeparator ( '~' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test10 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getFieldSeparator ( ) ; void setFieldSeparator ( char fieldSeparator ) ; char getComponentSeparator ( ) ; void setComponentSeparator ( char componentSeparator ) ; char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test11 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . getWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test12 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; char char0 = sAXEvents2HL7Impl0 . getFieldSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test13 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . setFieldSeparator ( '^' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test14 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . setRepeatableSeparator ( '~' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test15 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . processStartTag ( "MSH" ) ; sAXEvents2HL7Impl0 . processStartTag ( "MSH" ) ; sAXEvents2HL7Impl0 . processEndTag ( "MSH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getComponentSeparator ( ) ; void setComponentSeparator ( char componentSeparator ) ; char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test17 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . processStartTag ( "AoDemV#s~J0I\"q_f - 0bV" ) ; sAXEvents2HL7Impl0 . processStartTag ( "AoDemV#s~J0I\"q_f - 0bV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSegmentSeparator ( ) ; void setSegmentSeparator ( String segmentSeparator ) ; char getFieldSeparator ( ) ; void setFieldSeparator ( char fieldSeparator ) ; char getComponentSeparator ( ) ; void setComponentSeparator ( char componentSeparator ) ; char getRepeatableSeparator ( ) ; void setRepeatableSeparator ( char repeatableSeparator ) ; char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test19 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . processText ( "MSH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test20 ( ) throws Throwable { SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; sAXEvents2HL7Impl0 . processEndTag ( "AoDemV#s~J0I\"q_f - 0bV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getSubComponentSeparator ( ) ; void setSubComponentSeparator ( char subComponentSeparator ) ; char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test0 ( ) throws Throwable { XMLUtils xMLUtils0 = new XMLUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeString ( String text ) { StringBuffer buffer = new StringBuffer ( ) ; String esc = "" ; for ( int i = 0 ; i < text . length ( ) ; i + + ) { esc = "" ; char c = text . charAt ( i ) ; if ( ( c > 0xfffd ) | | ( ( c < 0x0020 ) & & ! ( ( c = = 0x0009 ) | | ( c = = 0x000A ) | | ( c = = 0x000D ) ) ) ) { esc = null ; } else { Integer code = new Integer ( c ) ; if ( codes2entity . containsKey ( code ) ) { esc = ( String ) codes2entity . get ( new Integer ( c ) ) ; } } / / else escape with numeric char refs if ( esc . equals ( "" ) ) { buffer . append ( c ) ; } else if ( esc = = null ) { / / nothing - no character } else { buffer . append ( ' & ' ) ; buffer . append ( esc ) ; buffer . append ( ' ; ' ) ; } } return buffer . toString ( ) ; }
void test0 ( ) throws Throwable { HL7SAXEventGeneratorImpl hL7SAXEventGeneratorImpl0 = new HL7SAXEventGeneratorImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDFile ( ) ; / * * * This id file will be sending during conversion with error events * @param idFile some file id ( path ) * / void setIDFile ( String idFile ) ; }
void test1 ( ) throws Throwable { HL7ParserImpl hL7ParserImpl0 = new HL7ParserImpl ( 618 ) ; HL7ParserHandler hL7ParserHandler0 = hL7ParserImpl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test2 ( ) throws Throwable { HL7ParserImpl hL7ParserImpl0 = new HL7ParserImpl ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void readData ( Reader source , String messageID ) throws IOException , ParserException ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7Parser getParser ( ) ; void setParser ( HL7Parser parser ) ; HL7CheckerState getState ( ) ; void setState ( HL7CheckerState state ) ; HL7CheckerHandler getHandler ( ) ; void setHandler ( HL7CheckerHandler handler ) ; }
void test4 ( ) throws Throwable { HL7ParserImpl hL7ParserImpl0 = new HL7ParserImpl ( 618 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void readData ( Reader source , String messageID ) throws IOException , ParserException ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7Parser getParser ( ) ; void setParser ( HL7Parser parser ) ; HL7CheckerState getState ( ) ; void setState ( HL7CheckerState state ) ; HL7CheckerHandler getHandler ( ) ; void setHandler ( HL7CheckerHandler handler ) ; }
void test0 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setActualDataTypePartsPossition ( 3913 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; hL7CheckerStateImpl0 . setActualSegment ( ( HL7Segment ) hL7SegmentImpl0 ) ; hL7CheckerStateImpl0 . eventBeginField ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test2 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getActualDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test3 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getActualComponentDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setActualFieldRepeatableIndex ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test6 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; int int0 = hL7CheckerStateImpl0 . getActualFieldRepeatableIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test8 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setActualFieldPosition ( 1350 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test9 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getMessageTracer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test10 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . isSeriousError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualFieldLength ( ) ; void setActualFieldLength ( int actualFieldLength ) ; int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test11 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; int int0 = hL7CheckerStateImpl0 . getActualDataTypeSubPartsPossition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test12 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setActualFieldLength ( 3913 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test13 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; int int0 = hL7CheckerStateImpl0 . getActualDataTypePartsPossition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test14 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getActualSubComponentDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test15 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setSeriousError ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test16 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; int int0 = hL7CheckerStateImpl0 . getActualFieldPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test17 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getActualSegment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test18 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; int int0 = hL7CheckerStateImpl0 . getActualFieldLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test19 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getCheckerHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test20 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setCheckerHandler ( ( HL7CheckerHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualFieldLength ( ) ; void setActualFieldLength ( int actualFieldLength ) ; int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test21 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void generateWarning ( int code , String message ) ; HL7CheckerHandler getCheckerHandler ( ) ; void setCheckerHandler ( HL7CheckerHandler handler ) ; HL7Segment getActualSegment ( ) ; void setActualSegment ( HL7Segment actualSegment ) ; int getActualFieldPosition ( ) ; void setActualFieldPosition ( int actualFieldPosition ) ; HL7Field getActualField ( ) ; void setActualField ( HL7Field actualField ) ; int getActualFieldLength ( ) ; void setActualFieldLength ( int actualFieldLength ) ; int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test22 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7CheckerStateImpl0 . setActualSubComponentDataType ( ( HL7DataType ) hL7DataTypeImpl0 ) ; String string0 = hL7CheckerStateImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test23 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . addToActualFieldLength ( ( - 314 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualFieldLength ( ) ; void setActualFieldLength ( int actualFieldLength ) ; int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test24 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7CheckerStateImpl0 . setActualDataType ( ( HL7DataType ) hL7DataTypeImpl0 ) ; String string0 = hL7CheckerStateImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test25 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getActualField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test26 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . getConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test27 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . setMessageTracer ( ( MessageTracer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test28 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . eventBeginSubComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualFieldLength ( ) ; void setActualFieldLength ( int actualFieldLength ) ; int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test30 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . eventBeginComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getActualDataTypePartsPossition ( ) ; void setActualDataTypePartsPossition ( int actualDataTypePartsPossition ) ; int getActualDataTypeSubPartsPossition ( ) ; void setActualDataTypeSubPartsPossition ( int actualDataTypeSubPartsPossition ) ; int getActualFieldRepeatableIndex ( ) ; void setActualFieldRepeatableIndex ( int actualFieldPositionRepeatableIndex ) ; HL7DataType getActualDataType ( ) ; void setActualDataType ( HL7DataType actualDataType ) ; HL7Configuration getConfiguration ( ) ; void setConfiguration ( HL7Configuration configuration ) ; HL7DataType getActualComponentDataType ( ) ; void setActualComponentDataType ( HL7DataType actualComponentDataType ) ; HL7DataType getActualSubComponentDataType ( ) ; void setActualSubComponentDataType ( HL7DataType actualSubComponentDataType ) ; }
void test32 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; hL7CheckerStateImpl0 . eventBeginField ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test37 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl ( ) ; hL7CheckerStateImpl0 . setActualSegment ( ( HL7Segment ) hL7SegmentImpl0 ) ; String string0 = hL7CheckerStateImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test38 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test39 ( ) throws Throwable { HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl ( ) ; HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl ( ) ; hL7CheckerStateImpl0 . setActualComponentDataType ( ( HL7DataType ) hL7DataTypeImpl0 ) ; String string0 = hL7CheckerStateImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test1 ( ) throws Throwable { XML2HL7Impl xML2HL7Impl0 = new XML2HL7Impl ( ) ; SAXEvents2HL7Impl sAXEvents2HL7Impl0 = new SAXEvents2HL7Impl ( ) ; xML2HL7Impl0 . setSaxEvents2HL7 ( ( SAXEvents2HL7 ) sAXEvents2HL7Impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getEscapeCharacter ( ) ; void setEscapeCharacter ( char escapeCharacter ) ; }
void test4 ( ) throws Throwable { XML2HL7Impl xML2HL7Impl0 = new XML2HL7Impl ( ) ; XML2HL7Handler xML2HL7Handler0 = xML2HL7Impl0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HL7DefaultConvertorHandler getHandler ( ) ; void setHandler ( HL7DefaultConvertorHandler handler ) ; MessageTranslator getMessageTranslator ( ) ; void setMessageTranspator ( MessageTranslator translator ) ; }
void test6 ( ) throws Throwable { XML2HL7Impl xML2HL7Impl0 = new XML2HL7Impl ( ) ; SAXEvents2HL7 sAXEvents2HL7_0 = xML2HL7Impl0 . getSaxEvents2HL7 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SAXEvents2HL7 getSaxEvents2HL7 ( ) ; void setSaxEvents2HL7 ( SAXEvents2HL7 saxEvents2HL7 ) ; XML2HL7Handler getHandler ( ) ; void setHandler ( XML2HL7Handler handler ) ; }
void test0 ( ) throws Throwable { AACSPrincipal aACSPrincipal0 = new AACSPrincipal ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object user ) { / / Return true if the result of the compareTo ( ) method is zero return compareTo ( user ) = = 0 ; }
void test1 ( ) throws Throwable { AACSPrincipal aACSPrincipal0 = new AACSPrincipal ( "Y$_TEs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { / / Improve hashcode calculation using member variables of this class return 13 * userId . hashCode ( ) + 7 * ipAddr . hashCode ( ) ; }
void test2 ( ) throws Throwable { AACSPrincipal aACSPrincipal0 = new AACSPrincipal ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / char sep = '\n' ; StringBuffer buff = new StringBuffer ( ) ; buff . append ( "dn : " + getDN ( ) + sep ) ; buff . append ( "cn : " + getUserName ( ) + sep ) ; buff . append ( "id : " + getUserId ( ) + sep ) ; buff . append ( "sn : " + getSurName ( ) + sep ) ; buff . append ( "userPassword : " + getPassword ( ) + sep ) ; if ( getRoles ( ) ! = null ) { Iterator it = getRoles ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "role : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getGroups ( ) ! = null ) { Iterator it = getGroups ( ) . iterator ( ) ; while ( it . hasNext ( ) ) buff . append ( "group : " + ( String ) ( it . next ( ) ) + sep ) ; } if ( getIpAddr ( ) ! = null ) buff . append ( "ip : " + getIpAddr ( ) + sep ) ; buff . append ( "objectClass : top" + sep ) ; buff . append ( "objectClass : person" + sep ) ; return buff . toString ( ) ; }
void test4 ( ) throws Throwable { AACSPrincipal aACSPrincipal0 = new AACSPrincipal ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object user ) { / / Return true if the result of the compareTo ( ) method is zero return compareTo ( user ) = = 0 ; }
void test5 ( ) throws Throwable { AACSPrincipal aACSPrincipal0 = new AACSPrincipal ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object user ) { / / Return true if the result of the compareTo ( ) method is zero return compareTo ( user ) = = 0 ; }
void test6 ( ) throws Throwable { AACSPrincipal aACSPrincipal0 = new AACSPrincipal ( "Y$_TEs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object user ) { / / Return true if the result of the compareTo ( ) method is zero return compareTo ( user ) = = 0 ; }
void test1 ( ) throws Throwable { AACSLoginModule aACSLoginModule0 = new AACSLoginModule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean commit ( ) throws LoginException { if ( succeeded = = false ) { return false ; } else { / / add a Principal ( authenticated identity ) / / to the Subject / / add an AACSUserPrincipal to the Subject userPrincipal = new AACSUserPrincipal ( username ) ; if ( ! subject . getPrincipals ( ) . contains ( userPrincipal ) ) subject . getPrincipals ( ) . add ( userPrincipal ) ; if ( debug ) { System . out . println ( "\t\t [ AACSLoginModule ] " + "added AACSUserPrincipal [ " + userPrincipal + " ] to Subject" ) ; } / / add the "aacs_role" to the Subject rolePrincipal = new AACSRolePrincipal ( "aacs_role" ) ; if ( ! subject . getPrincipals ( ) . contains ( rolePrincipal ) ) subject . getPrincipals ( ) . add ( rolePrincipal ) ; if ( debug ) { System . out . println ( "\t\t [ AACSLoginModule ] " + "added AACSRolePrincipal [ " + rolePrincipal + " ] to Subject" ) ; } / / in any case , clean out state username = null ; for ( int i = 0 ; i < password . length ; i + + ) password [ i ] = ' ' ; password = null ; commitSucceeded = true ; return true ; } }
void test2 ( ) throws Throwable { AACSLoginModule aACSLoginModule0 = new AACSLoginModule ( ) ; boolean boolean0 = aACSLoginModule0 . abort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean abort ( ) throws LoginException { if ( succeeded = = false ) { return false ; } else if ( succeeded = = true & & commitSucceeded = = false ) { / / login succeeded but overall authentication failed succeeded = false ; username = null ; if ( password ! = null ) { for ( int i = 0 ; i < password . length ; i + + ) password [ i ] = ' ' ; password = null ; } userPrincipal = null ; rolePrincipal = null ; } else { / / overall authentication succeeded and commit succeeded , / / but someone else's commit failed logout ( ) ; } return true ; }
void test11 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "'nn5% * ( `3q`8V" , "'nn5% * ( `3q`8V" , 97 , "'nn5% * ( `3q`8V" , ( URLStreamHandler ) handler0 ) ; JMSURLConnection jMSURLConnection0 = new JMSURLConnection ( uRL0 ) ; ClientHttpRequest clientHttpRequest0 = new ClientHttpRequest ( ( URLConnection ) jMSURLConnection0 ) ; String [ ] stringArray0 = new String [ 4 ] ; clientHttpRequest0 . setCookies ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCookies ( Map cookies ) throws IOException { if ( cookies = = null ) return ; this . cookies . putAll ( cookies ) ; }
void test12 ( ) throws Throwable { JMSURLConnection jMSURLConnection0 = new JMSURLConnection ( ( URL ) null ) ; ClientHttpRequest clientHttpRequest0 = new ClientHttpRequest ( ( URLConnection ) jMSURLConnection0 ) ; Map < String , List < String > > map0 = jMSURLConnection0 . getHeaderFields ( ) ; clientHttpRequest0 . setCookies ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCookies ( Map cookies ) throws IOException { if ( cookies = = null ) return ; this . cookies . putAll ( cookies ) ; }
void test13 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "'nn5% * ( `3q`8V" , "'nn5% * ( `3q`8V" , 97 , "'nn5% * ( `3q`8V" , ( URLStreamHandler ) handler0 ) ; JMSURLConnection jMSURLConnection0 = new JMSURLConnection ( uRL0 ) ; ClientHttpRequest clientHttpRequest0 = new ClientHttpRequest ( ( URLConnection ) jMSURLConnection0 ) ; clientHttpRequest0 . setParameters ( ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String randomString ( ) { return Long . toString ( random . nextLong ( ) , 36 ) ; }
void test14 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "'nn5% * ( `3q`8V" , "'nn5% * ( `3q`8V" , 97 , "'nn5% * ( `3q`8V" , ( URLStreamHandler ) handler0 ) ; JMSURLConnection jMSURLConnection0 = new JMSURLConnection ( uRL0 ) ; ClientHttpRequest clientHttpRequest0 = new ClientHttpRequest ( ( URLConnection ) jMSURLConnection0 ) ; Object [ ] objectArray0 = new Object [ 1 ] ; clientHttpRequest0 . setParameters ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String randomString ( ) { return Long . toString ( random . nextLong ( ) , 36 ) ; }
