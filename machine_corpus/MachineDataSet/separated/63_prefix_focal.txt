void test0 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; FocusManager focusManager0 = explorerFigure0 . getFocusManager ( ) ; FocusManager focusManager1 = explorerFigure0 . getFocusManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FocusManager getFocusManager ( ) { if ( this . focusManager = = null ) { this . setFocusManager ( new FocusManager ( this ) ) ; } return this . focusManager ; }
void test2 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; DrawEvent drawEvent0 = new DrawEvent ( ( Object ) "horizontalTextPosition" ) ; explorerFigure0 . draw ( drawEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test3 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; explorerFigure0 . setModel ( ( Model ) explorerModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test6 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; Model model0 = explorerFigure0 . getModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Model getModel ( ) { return this . model ; }
void test8 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ( - 24 ) , ( - 24 ) , ( - 24 ) , ( - 24 ) ) ; explorerFigure0 . add ( ( Figure ) filledRectangleFigure0 ) ; JPanel jPanel0 = new JPanel ( ( LayoutManager ) null , false ) ; Point point0 = jPanel0 . getLocation ( ) ; FilledRectangleFigure filledRectangleFigure1 = ( FilledRectangleFigure ) explorerFigure0 . getListBoxFigureForPoint ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getListBoxFigureForPoint ( Point pt ) { StandardEnumeration explFigParts = null ; try { explFigParts = this . getFigures ( ) ; } catch ( Exception ex ) { ExplorerFigure . logger . error ( ResourceBundlePurchaser . getMessage ( ExplorerFigure . EXPLORERFIGURE_ERROR_FINDING_HIT_FIGURE ) , ex ) ; Warning . showWarning ( ResourceBundlePurchaser . getMessage ( ExplorerFigure . EXPLORERFIGURE_ERROR_FINDING_HIT_FIGURE ) ) ; } Figure tempFig = null ; Figure hitFig = null ; if ( explFigParts ! = null ) { while ( explFigParts . hasMoreElements ( ) ) { tempFig = ( Figure ) explFigParts . nextElement ( ) ; if ( tempFig . containsPoint ( pt . x , pt . y ) ) { if ( tempFig instanceof ListBoxFigure ) { hitFig = tempFig ; } } } } return hitFig ; }
void test9 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ( - 24 ) , ( - 24 ) , ( - 24 ) , ( - 24 ) ) ; explorerFigure0 . add ( ( Figure ) filledRectangleFigure0 ) ; filledRectangleFigure0 . setSize ( 1819 , 1819 ) ; JPanel jPanel0 = new JPanel ( ( LayoutManager ) null , false ) ; Point point0 = jPanel0 . getLocation ( ) ; FilledRectangleFigure filledRectangleFigure1 = ( FilledRectangleFigure ) explorerFigure0 . getListBoxFigureForPoint ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getListBoxFigureForPoint ( Point pt ) { StandardEnumeration explFigParts = null ; try { explFigParts = this . getFigures ( ) ; } catch ( Exception ex ) { ExplorerFigure . logger . error ( ResourceBundlePurchaser . getMessage ( ExplorerFigure . EXPLORERFIGURE_ERROR_FINDING_HIT_FIGURE ) , ex ) ; Warning . showWarning ( ResourceBundlePurchaser . getMessage ( ExplorerFigure . EXPLORERFIGURE_ERROR_FINDING_HIT_FIGURE ) ) ; } Figure tempFig = null ; Figure hitFig = null ; if ( explFigParts ! = null ) { while ( explFigParts . hasMoreElements ( ) ) { tempFig = ( Figure ) explFigParts . nextElement ( ) ; if ( tempFig . containsPoint ( pt . x , pt . y ) ) { if ( tempFig instanceof ListBoxFigure ) { hitFig = tempFig ; } } } } return hitFig ; }
void test11 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ( - 24 ) , ( - 24 ) , ( - 24 ) , ( - 24 ) ) ; explorerFigure0 . add ( ( Figure ) filledRectangleFigure0 ) ; JPanel jPanel0 = new JPanel ( ( LayoutManager ) null , false ) ; Point point0 = jPanel0 . getLocation ( ) ; FilledRectangleFigure filledRectangleFigure1 = ( FilledRectangleFigure ) explorerFigure0 . getTextBoxFigureForPoint ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getTextBoxFigureForPoint ( Point pt ) { Figure hitFig = null , tempFig ; try { StandardEnumeration enumeration = this . getFigures ( ) ; while ( enumeration . hasMoreElements ( ) ) { tempFig = ( Figure ) enumeration . nextElement ( ) ; if ( tempFig instanceof TextBoxFigure ) { if ( ( ( TextBoxFigure ) tempFig ) . isVisible ( ) ) { if ( tempFig . containsPoint ( pt . x , pt . y ) ) { hitFig = tempFig ; } } } } } catch ( Exception ex ) { ListBoxFigure . logger . error ( ResourceBundlePurchaser . getMessage ( ListBoxFigure . ERROR_WHILE_ASKING ) , ex ) ; Warning . showWarning ( ResourceBundlePurchaser . getMessage ( ListBoxFigure . ERROR_WHILE_ASKING ) ) ; } return hitFig ; }
void test12 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ( - 24 ) , ( - 24 ) , ( - 24 ) , ( - 24 ) ) ; explorerFigure0 . add ( ( Figure ) filledRectangleFigure0 ) ; filledRectangleFigure0 . setSize ( 1819 , 1819 ) ; JPanel jPanel0 = new JPanel ( ( LayoutManager ) null , false ) ; Point point0 = jPanel0 . getLocation ( ) ; FilledRectangleFigure filledRectangleFigure1 = ( FilledRectangleFigure ) explorerFigure0 . getTextBoxFigureForPoint ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getTextBoxFigureForPoint ( Point pt ) { Figure hitFig = null , tempFig ; try { StandardEnumeration enumeration = this . getFigures ( ) ; while ( enumeration . hasMoreElements ( ) ) { tempFig = ( Figure ) enumeration . nextElement ( ) ; if ( tempFig instanceof TextBoxFigure ) { if ( ( ( TextBoxFigure ) tempFig ) . isVisible ( ) ) { if ( tempFig . containsPoint ( pt . x , pt . y ) ) { hitFig = tempFig ; } } } } } catch ( Exception ex ) { ListBoxFigure . logger . error ( ResourceBundlePurchaser . getMessage ( ListBoxFigure . ERROR_WHILE_ASKING ) , ex ) ; Warning . showWarning ( ResourceBundlePurchaser . getMessage ( ListBoxFigure . ERROR_WHILE_ASKING ) ) ; } return hitFig ; }
void test0 ( ) throws Throwable { FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( 600 , 600 , 600 , 0 ) ; ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; NullDisplayBox nullDisplayBox0 = ( NullDisplayBox ) explorerFieldListBoxFigure0 . getDisplayBox ( ) ; FigureChangeEvent figureChangeEvent0 = new FigureChangeEvent ( ( Figure ) filledRectangleFigure0 , ( DisplayBox ) nullDisplayBox0 , 0 ) ; FilledRectangleFigure filledRectangleFigure1 = ( FilledRectangleFigure ) figureChangeEvent0 . getFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test1 ( ) throws Throwable { ColorRectangleFigure colorRectangleFigure0 = new ColorRectangleFigure ( ) ; ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; StandardRectangularDisplayBox standardRectangularDisplayBox0 = ( StandardRectangularDisplayBox ) colorRectangleFigure0 . getDisplayBox ( ) ; FigureChangeEvent figureChangeEvent0 = new FigureChangeEvent ( ( Figure ) explorerFigure0 , ( DisplayBox ) standardRectangularDisplayBox0 , ( - 670 ) ) ; StandardRectangularDisplayBox standardRectangularDisplayBox1 = ( StandardRectangularDisplayBox ) figureChangeEvent0 . getDisplayBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test2 ( ) throws Throwable { ColorRectangleFigure colorRectangleFigure0 = new ColorRectangleFigure ( ) ; ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; StandardRectangularDisplayBox standardRectangularDisplayBox0 = ( StandardRectangularDisplayBox ) colorRectangleFigure0 . getDisplayBox ( ) ; FigureChangeEvent figureChangeEvent0 = new FigureChangeEvent ( ( Figure ) explorerFigure0 , ( DisplayBox ) standardRectangularDisplayBox0 , ( - 670 ) ) ; int int0 = figureChangeEvent0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test1 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; List < ExplorerFieldListBoxFigure > list0 = explorerFieldListBoxFigure0 . getChildren ( ) ; explorerFieldListBoxFigure0 . setChildren ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setChildren ( List < ExplorerFieldListBoxFigure > newChildren ) { this . children = newChildren ; }
void test3 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; List < ExplorerFieldListBoxFigure > list0 = explorerFieldListBoxFigure0 . getAllChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ExplorerFieldListBoxFigure > getAllChildren ( ) { List < ExplorerFieldListBoxFigure > allChildFigures = new Vector < ExplorerFieldListBoxFigure > ( ) ; Iterator < ExplorerFieldListBoxFigure > it = this . getChildren ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { ExplorerFieldListBoxFigure child = it . next ( ) ; allChildFigures . add ( child ) ; List < ExplorerFieldListBoxFigure > allChildAdaptorChildren = child . getAllChildren ( ) ; allChildFigures . addAll ( allChildAdaptorChildren ) ; } return allChildFigures ; }
void test0 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; explorerFieldListBoxFigure0 . setModel ( ( Model ) standardAttributeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test1 ( ) throws Throwable { ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; Model model0 = listBoxFigure0 . getModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Model getModel ( ) { return this . model ; }
void test3 ( ) throws Throwable { ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; StandardConnectionFigure standardConnectionFigure0 = new StandardConnectionFigure ( ) ; listBoxFigure0 . add ( ( Figure ) standardConnectionFigure0 ) ; Figure figure0 = listBoxFigure0 . getTextBoxFigureForPoint ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getTextBoxFigureForPoint ( Point pt ) { Figure hitFig = null , tempFig ; try { StandardEnumeration enumeration = this . getFigures ( ) ; while ( enumeration . hasMoreElements ( ) ) { tempFig = ( Figure ) enumeration . nextElement ( ) ; if ( tempFig instanceof TextBoxFigure ) { if ( ( ( TextBoxFigure ) tempFig ) . isVisible ( ) ) { if ( tempFig . containsPoint ( pt . x , pt . y ) ) { hitFig = tempFig ; } } } } } catch ( Exception ex ) { ListBoxFigure . logger . error ( ResourceBundlePurchaser . getMessage ( ListBoxFigure . ERROR_WHILE_ASKING ) , ex ) ; Warning . showWarning ( ResourceBundlePurchaser . getMessage ( ListBoxFigure . ERROR_WHILE_ASKING ) ) ; } return hitFig ; }
void test0 ( ) throws Throwable { FigureChangeManager figureChangeManager0 = new FigureChangeManager ( ) ; ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; figureChangeManager0 . addChangeListener ( ( FigureChangeListener ) explorerFieldListBoxFigure0 ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( 0 , 0 , 0 , 0 ) ; boolean boolean0 = figureChangeManager0 . isInStore ( ( FigureChangeListener ) filledRectangleFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInStore ( Figure f ) { for ( int i = 0 ; i < this . figures . size ( ) ; i + + ) { if ( f = = this . figures . elementAt ( i ) ) { return true ; } } return false ; }
void test1 ( ) throws Throwable { FigureChangeManager figureChangeManager0 = new FigureChangeManager ( ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ) ; figureChangeManager0 . addChangeListener ( ( FigureChangeListener ) filledRectangleFigure0 ) ; figureChangeManager0 . removeChangeListener ( ( FigureChangeListener ) filledRectangleFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test2 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( 0 , 0 , 0 , 0 ) ; filledRectangleFigure0 . addChangeListener ( ( FigureChangeListener ) explorerFieldListBoxFigure0 ) ; filledRectangleFigure0 . setBounds ( 0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test0 ( ) throws Throwable { ExplorerFigureBuilder explorerFigureBuilder0 = ExplorerFigureBuilder . getInstance ( ) ; ExplorerFigure explorerFigure0 = explorerFigureBuilder0 . createNewExplorerFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExplorerFigure createNewExplorerFigure ( ) { return new ExplorerFigure ( ) ; }
void test0 ( ) throws Throwable { FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ) ; boolean boolean0 = filledRectangleFigure0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test1 ( ) throws Throwable { FilledRectangleFigure filledRectangleFigure0 = new FilledRectangleFigure ( ( - 325 ) , ( - 325 ) , ( - 1 ) , 1642 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test0 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . setUnvisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test1 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . getModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test2 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . getForeground ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test3 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . setText ( "vdI53" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test4 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . setModel ( ( Model ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test5 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void draw ( Graphics g ) { if ( this . isVisible ( ) ) { super . draw ( g ) ; int leftMargin = TextBoxFigure . NUMBER_3 ; int bottomHeight = 1 ; String localtext = this . getText ( ) ; int descent = g . getFontMetrics ( this . getFont ( ) ) . getMaxDescent ( ) ; Rectangle rect = this . getDisplayBox ( ) . getRectangle ( ) ; int x = rect . x + leftMargin ; int y = rect . y + rect . height - descent - bottomHeight ; Font localFont = g . getFont ( ) ; g . setFont ( this . getFont ( ) ) ; Color color = g . getColor ( ) ; g . setColor ( this . getForeground ( ) ) ; g . drawString ( localtext , x , y ) ; g . setFont ( localFont ) ; g . setColor ( color ) ; } }
void test6 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer ( ) ; FontUIResource fontUIResource0 = ( FontUIResource ) defaultTableCellRenderer0 . getFont ( ) ; textBoxFigure0 . setFont ( ( Font ) fontUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test7 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . draw ( ( Graphics ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test8 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; textBoxFigure0 . getFont ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test9 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; Color color0 = Color . gray ; textBoxFigure0 . setForeground ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test10 ( ) throws Throwable { TextBoxFigure textBoxFigure0 = new TextBoxFigure ( ) ; String string0 = textBoxFigure0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test0 ( ) throws Throwable { RectangleFigure rectangleFigure0 = new RectangleFigure ( ) ; rectangleFigure0 . basicMoveBy ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test1 ( ) throws Throwable { RectangleFigure rectangleFigure0 = new RectangleFigure ( 1450 , 1450 , ( - 1887 ) , ( - 1887 ) ) ; rectangleFigure0 . draw ( ( Graphics ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test2 ( ) throws Throwable { ColorRectangleFigure colorRectangleFigure0 = new ColorRectangleFigure ( ) ; boolean boolean0 = colorRectangleFigure0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test0 ( ) throws Throwable { ColorRectangleFigure colorRectangleFigure0 = new ColorRectangleFigure ( ) ; Color color0 = colorRectangleFigure0 . getBackground ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getBackground ( ) { return this . background ; }
void test2 ( ) throws Throwable { ColorRectangleFigure colorRectangleFigure0 = new ColorRectangleFigure ( ) ; colorRectangleFigure0 . setBackground ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test1 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; FigureChangeEvent figureChangeEvent0 = new FigureChangeEvent ( ( Figure ) explorerFieldListBoxFigure0 , ( DisplayBox ) null , ( - 1129 ) ) ; explorerFieldListBoxFigure0 . figureInvalidated ( figureChangeEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test3 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; boolean boolean0 = explorerFigure0 . containsFigure ( ( Figure ) explorerFieldListBoxFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsFigure ( Figure f ) throws FigureException { throw new FigureException ( ResourceBundlePurchaser . getMessage ( AbstractFigure . TRYING2CHECK_WHETER_A_FIGURE_IS_PART_OF_A_NON_COMPOSITE_FIGURE ) ) ; }
void test4 ( ) throws Throwable { ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; StandardRectangularDisplayBox standardRectangularDisplayBox0 = new StandardRectangularDisplayBox ( 844 , 844 , 823 , 844 ) ; FigureChangeEvent figureChangeEvent0 = new FigureChangeEvent ( ( Figure ) listBoxFigure0 , ( DisplayBox ) standardRectangularDisplayBox0 , 823 ) ; listBoxFigure0 . figureAppeared ( figureChangeEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test5 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; explorerFieldListBoxFigure0 . add ( ( Figure ) explorerFigure0 ) ; StandardEnumerator standardEnumerator0 = ( StandardEnumerator ) explorerFieldListBoxFigure0 . getFigures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) ; void insertElementAt ( Object obj , int index ) ; boolean isInEnumeration ( Object object ) ; / / aus Oberklasse Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test5 ( ) throws Throwable { StandardConnectionFigure standardConnectionFigure0 = new StandardConnectionFigure ( ) ; ConnectionModel connectionModel0 = standardConnectionFigure0 . getModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Model getModel ( ) { return this . model ; }
void test3 ( ) throws Throwable { TextBoxFigureBuilder textBoxFigureBuilder0 = new TextBoxFigureBuilder ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; textBoxFigureBuilder0 . updateAttributes ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test3 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; ExplorerModel explorerModel0 = new ExplorerModel ( ) ; StandardEnumerator standardEnumerator0 = ( StandardEnumerator ) explorerModel0 . getObjectModels ( ) ; explorerFigure0 . setFigures ( ( StandardEnumeration ) standardEnumerator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return this . count ; }
void test4 ( ) throws Throwable { StandardCompositeFigure standardCompositeFigure0 = new StandardCompositeFigure ( ) ; boolean boolean0 = standardCompositeFigure0 . containsPoint ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( int x , int y ) { return this . getDisplayBox ( ) . isInside ( x , y ) ; }
void test0 ( ) throws Throwable { FigureStore figureStore0 = new FigureStore ( ) ; StandardEnumerator standardEnumerator0 = ( StandardEnumerator ) figureStore0 . getFigures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) ; void insertElementAt ( Object obj , int index ) ; boolean isInEnumeration ( Object object ) ; / / aus Oberklasse Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test3 ( ) throws Throwable { FigureStore figureStore0 = new FigureStore ( ) ; ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; figureStore0 . add ( ( Figure ) null ) ; boolean boolean0 = figureStore0 . isInStore ( ( Figure ) listBoxFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInStore ( Figure f ) { for ( int i = 0 ; i < this . figures . size ( ) ; i + + ) { if ( f = = this . figures . elementAt ( i ) ) { return true ; } } return false ; }
void test0 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; boolean boolean0 = explorerFieldListBoxFigure0 . containsPoint ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( int x , int y ) { return this . getDisplayBox ( ) . isInside ( x , y ) ; }
void test1 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; Figure figure0 = explorerFieldListBoxFigure0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getParent ( ) { return this . parent ; }
void test4 ( ) throws Throwable { ExplorerFieldListBoxFigure explorerFieldListBoxFigure0 = new ExplorerFieldListBoxFigure ( ) ; Dimension dimension0 = explorerFieldListBoxFigure0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test5 ( ) throws Throwable { RectangleFigure rectangleFigure0 = new RectangleFigure ( ( - 1851 ) , ( - 1851 ) , ( - 1851 ) , ( - 1851 ) ) ; rectangleFigure0 . setBounds ( 1522 , ( - 1851 ) , 1522 , ( - 1851 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test0 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . addConnectionModel ( ( ConnectionModel ) null ) ; objectModel0 . removeConnectionModel ( ( ConnectionModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test1 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; boolean boolean0 = objectModel0 . isObjectModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test2 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setObjectViewManager ( ( ObjectViewManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test4 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; Figure figure0 = objectModel0 . getFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getFigure ( ) { return this . figure ; }
void test5 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; boolean boolean0 = objectModel0 . isNullObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullObject ( ) { return NullObject . isNullObject ( this . getObject ( ) ) ; }
void test6 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; RectangleFigure rectangleFigure0 = new RectangleFigure ( ) ; objectModel0 . setFigure ( ( Figure ) rectangleFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test7 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . removeConnectionModel ( ( ConnectionModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test8 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setExplorerModel ( ( ExplorerModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test9 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; ObjectHeaderModel objectHeaderModel0 = objectModel0 . getHeaderModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ObjectHeaderModel getHeaderModel ( ) { return this . headerModel ; }
void test11 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setHeaderModel ( ( ObjectHeaderModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test12 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; AttributeModel attributeModel0 = new AttributeModel ( ) ; objectModel0 . getAttributeModels ( ) ; objectModel0 . addAttributeModel ( attributeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test13 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; Class < ? > class0 = NumberFormat . class ; Vector < Field > vector0 = objectModel0 . getDeclaredFields ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test14 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setObject ( ( Object ) "caret - end - word" ) ; int int0 = objectModel0 . getNumberOfAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfAttributes ( ) { if ( this . isArrayObject ( ) ) { return Array . getLength ( this . getObject ( ) ) ; } if ( this . isStringObject ( ) | | this . isNullObject ( ) ) { return 0 ; } return this . getDeclaredFields ( ) . size ( ) ; }
void test0 ( ) throws Throwable { StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; boolean boolean0 = standardAttributeModel0 . isObjectHeaderModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test1 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; boolean boolean0 = arrayAttributeModel0 . isExplorerModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test2 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; boolean boolean0 = connectionModel0 . isObjectModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test3 ( ) throws Throwable { ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setObject ( ( Object ) "section" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringObject ( ) { return this . getObject ( ) . getClass ( ) = = String . class ; }
void test4 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; boolean boolean0 = explorerModel0 . isAttributeModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test5 ( ) throws Throwable { StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; Object object0 = standardAttributeModel0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) { return this . object ; }
void test6 ( ) throws Throwable { StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; standardAttributeModel0 . setFigureInModel ( ( Figure ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test7 ( ) throws Throwable { StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; Figure figure0 = standardAttributeModel0 . getFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getFigure ( ) { return this . figure ; }
void test0 ( ) throws Throwable { boolean boolean0 = NullObject . isNullObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullObject ( ) { return NullObject . isNullObject ( this . getObject ( ) ) ; }
void test1 ( ) throws Throwable { NullObject nullObject0 = NullObject . getNullObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullObject ( ) { return NullObject . isNullObject ( this . getObject ( ) ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = NullObject . isNullObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullObject ( ) { return NullObject . isNullObject ( this . getObject ( ) ) ; }
void test0 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; ObjectHeaderModel objectHeaderModel0 = connectionModel0 . getHeaderModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ObjectHeaderModel getHeaderModel ( ) { return this . headerModel ; }
void test1 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; connectionModel0 . setHeaderModel ( ( ObjectHeaderModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test2 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; Figure figure0 = connectionModel0 . getFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getFigure ( ) { return this . figure ; }
void test3 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; AttributeModel attributeModel0 = connectionModel0 . getAttributeModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AttributeModel getAttributeModel ( ) { return this . attributeModel ; }
void test4 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; RectangleFigure rectangleFigure0 = new RectangleFigure ( ) ; connectionModel0 . setFigure ( ( Figure ) rectangleFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test5 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; connectionModel0 . setAttributeModel ( ( AttributeModel ) arrayAttributeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test6 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; ExplorerModel explorerModel0 = connectionModel0 . getExplorerModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExplorerModel getExplorerModel ( ) { return this . explorerModel ; }
void test7 ( ) throws Throwable { ConnectionModel connectionModel0 = new ConnectionModel ( ) ; connectionModel0 . setExplorerModel ( ( ExplorerModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test3 ( ) throws Throwable { ObjectModelBuilder objectModelBuilder0 = ObjectModelBuilder . getInstance ( ) ; Object [ ] objectArray0 = new Object [ 7 ] ; StandardEnumerator standardEnumerator0 = ( StandardEnumerator ) objectModelBuilder0 . asEnumeration ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) ; void insertElementAt ( Object obj , int index ) ; boolean isInEnumeration ( Object object ) ; / / aus Oberklasse Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test0 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; arrayAttributeModel0 . setPos ( ( - 24 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test0 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; arrayAttributeModel0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test1 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; ObjectModel objectModel0 = arrayAttributeModel0 . getObjectModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ObjectModel getObjectModel ( ) ; }
void test2 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; arrayAttributeModel0 . setFigure ( ( Figure ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test3 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; ConnectionModel connectionModel0 = arrayAttributeModel0 . getConnectionModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionModel getConnectionModel ( ) { return this . connectionModel ; }
void test4 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; boolean boolean0 = arrayAttributeModel0 . isAttributeModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test5 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; arrayAttributeModel0 . setValue ( ( Object ) "mnemonic" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test6 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; arrayAttributeModel0 . setModifiers ( 26 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test9 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; arrayAttributeModel0 . setConnectionModel ( ( ConnectionModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test10 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; arrayAttributeModel0 . setObjectModel ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test11 ( ) throws Throwable { StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; Class < ? > class0 = AttributeModel . class ; standardAttributeModel0 . setType ( class0 ) ; String string0 = standardAttributeModel0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return this . getObjectTitleManager ( ) . getTitle ( this . getObjectModel ( ) ) ; }
void test2 ( ) throws Throwable { ObjectHeaderModel objectHeaderModel0 = new ObjectHeaderModel ( ) ; Figure figure0 = objectHeaderModel0 . getFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getFigure ( ) { return this . figure ; }
void test3 ( ) throws Throwable { ObjectHeaderModel objectHeaderModel0 = new ObjectHeaderModel ( ) ; objectHeaderModel0 . setObjectModel ( ( ObjectModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test4 ( ) throws Throwable { ObjectHeaderModel objectHeaderModel0 = new ObjectHeaderModel ( ) ; ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; objectHeaderModel0 . setFigure ( ( Figure ) listBoxFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test5 ( ) throws Throwable { ObjectHeaderModel objectHeaderModel0 = new ObjectHeaderModel ( ) ; boolean boolean0 = objectHeaderModel0 . isObjectHeaderModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test0 ( ) throws Throwable { StandardAttributeModel standardAttributeModel0 = new StandardAttributeModel ( ) ; standardAttributeModel0 . setField ( ( Field ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test1 ( ) throws Throwable { AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder . getInstance ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; attributeModelBuilder0 . createArrayAttributeModel ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test2 ( ) throws Throwable { AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder . getInstance ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; attributeModelBuilder0 . setArrayAttributeData ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullObject ( ) { return NullObject . isNullObject ( this . getObject ( ) ) ; }
void test3 ( ) throws Throwable { AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder . getInstance ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setObject ( ( Object ) "ToolTipText" ) ; attributeModelBuilder0 . createStandardAttributeModel ( objectModel0 ) ; attributeModelBuilder0 . setStandardAttributeData ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringObject ( ) { return this . getObject ( ) . getClass ( ) = = String . class ; }
void test2 ( ) throws Throwable { ExplorerModelBuilder explorerModelBuilder0 = ExplorerModelBuilder . getInstance ( ) ; ExplorerManager explorerManager0 = explorerModelBuilder0 . getExplorerManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExplorerManager getExplorerManager ( ) { return ExplorerManager . INSTANCE ; }
void test0 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; explorerModel0 . setDrawingFrameEventConverter ( ( ExplorerFrameEventConverter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test1 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ExplorerManager explorerManager0 = ExplorerManager . INSTANCE ; explorerModel0 . setExplorerManager ( explorerManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test2 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; Figure figure0 = explorerModel0 . getFigure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure getFigure ( ) { return this . figure ; }
void test3 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; boolean boolean0 = explorerModel0 . isExplorerModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplorerModel ( ) { return false ; }
void test4 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; explorerModel0 . addObjectModel ( ( ObjectModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectHeaderModel ( ) { return false ; }
void test5 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; explorerModel0 . setFigure ( ( Figure ) listBoxFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test6 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ExplorerFrameEventConverter explorerFrameEventConverter0 = explorerModel0 . getDrawingFrameEventConverter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExplorerFrameEventConverter getDrawingFrameEventConverter ( ) { return this . drawingFrameEventConverter ; }
void test7 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; explorerModel0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test8 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; String string0 = explorerModel0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test9 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ExplorerColorManager explorerColorManager0 = explorerModel0 . getColorManager ( ) ; ExplorerColorManager explorerColorManager1 = explorerModel0 . getColorManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExplorerColorManager getColorManager ( ) { return this . getExplorerModel ( ) . getColorManager ( ) ; }
void test10 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; explorerModel0 . getObjectModels ( ) ; explorerModel0 . removeObjectModel ( ( ObjectModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test1 ( ) throws Throwable { ObjectViewDialogEventConverter objectViewDialogEventConverter0 = new ObjectViewDialogEventConverter ( ( ExplorerFigure ) null ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "Hide Object with Dependencies" , true , true , true ) ; JInternalFrame . JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0 . getDesktopIcon ( ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jInternalFrame_JDesktopIcon0 , 0 , ( long ) 0 , 0 , 0 , 't' , 1 ) ; objectViewDialogEventConverter0 . keyRealsed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyRealsed ( KeyEvent e ) { }
void test9 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; ObjectViewDialogEventConverter objectViewDialogEventConverter0 = new ObjectViewDialogEventConverter ( explorerFigure0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "title" , 0 , "title" , 0 ) ; objectViewDialogEventConverter0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test5 ( ) throws Throwable { ArrayAttributeModel arrayAttributeModel0 = new ArrayAttributeModel ( ) ; Class < ? > class0 = TextBoxFigure . class ; arrayAttributeModel0 . setType ( class0 ) ; ExplorerActionConverter explorerActionConverter0 = ExplorerActionConverter . getInstance ( ) ; explorerActionConverter0 . updateAttribute ( ( AttributeModel ) arrayAttributeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test7 ( ) throws Throwable { ExplorerActionConverter explorerActionConverter0 = new ExplorerActionConverter ( ) ; ObjectHeaderModel objectHeaderModel0 = new ObjectHeaderModel ( ) ; explorerActionConverter0 . saveAttribute ( objectHeaderModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAttributeModel ( ) { return false ; }
void test3 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; AboutDialogEventConverter aboutDialogEventConverter0 = new AboutDialogEventConverter ( explorerFigure0 ) ; HyperlinkEvent . EventType hyperlinkEvent_EventType0 = HyperlinkEvent . EventType . EXITED ; HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent ( ( Object ) "59" , hyperlinkEvent_EventType0 , ( URL ) null ) ; aboutDialogEventConverter0 . hyperlinkUpdate ( hyperlinkEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void hyperlinkUpdate ( HyperlinkEvent event ) { if ( event . getEventType ( ) = = HyperlinkEvent . EventType . ACTIVATED ) { try { Runtime . getRuntime ( ) . exec ( AboutDialogEventConverter . RUNDLL32_SHELL32_DLL_SHELL_EXEC_RUN_D_L_L + event . getDescription ( ) , null ) ; } catch ( IOException ex ) { AboutDialogEventConverter . logger . error ( AboutDialogEventConverter . IOEXCEPTION , ex ) ; } catch ( Throwable t ) { AboutDialogEventConverter . logger . error ( AboutDialogEventConverter . THROWABLE , t ) ; } } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; AboutDialogEventConverter aboutDialogEventConverter0 = new AboutDialogEventConverter ( explorerFigure0 ) ; HyperlinkEvent . EventType hyperlinkEvent_EventType0 = HyperlinkEvent . EventType . ACTIVATED ; HyperlinkEvent hyperlinkEvent0 = new HyperlinkEvent ( ( Object ) "COLUMN_HEADER" , hyperlinkEvent_EventType0 , ( URL ) null , "COLUMN_HEADER" , ( Element ) null ) ; aboutDialogEventConverter0 . hyperlinkUpdate ( hyperlinkEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test0 ( ) throws Throwable { DrawEvent drawEvent0 = new DrawEvent ( ( Object ) "ShortDescription" , ( Graphics ) null ) ; Graphics graphics0 = drawEvent0 . getGraphics ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . awt . Graphics getGraphics ( TextBoxFigure teBoFi ) { ObjectModel objModl = ( ( ObjectModelPart ) teBoFi . getModel ( ) ) . getObjectModel ( ) ; ExplorerFigure explFig = ( ExplorerFigure ) objModl . getExplorerModel ( ) . getFigure ( ) ; return explFig . getFrame ( ) . getGraphics ( ) ; }
void test1 ( ) throws Throwable { DrawEvent drawEvent0 = new DrawEvent ( ( Object ) "ButtonUI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test4 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; ObjectCopyDialogEventConverter objectCopyDialogEventConverter0 = new ObjectCopyDialogEventConverter ( explorerFigure0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Name" , ( - 16 ) , "Name" , ( long ) ( - 16 ) , ( - 16 ) ) ; objectCopyDialogEventConverter0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getModifiers ( ) { return this . modifiers ; }
void test5 ( ) throws Throwable { ExplorerFigure explorerFigure0 = new ExplorerFigure ( ) ; ObjectCopyDialogEventConverter objectCopyDialogEventConverter0 = new ObjectCopyDialogEventConverter ( explorerFigure0 ) ; ListSelectionEvent listSelectionEvent0 = new ListSelectionEvent ( ( Object ) " * o" , 127 , 127 , false ) ; objectCopyDialogEventConverter0 . valueChanged ( listSelectionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void valueChanged ( ListSelectionEvent event ) { if ( event . getValueIsAdjusting ( ) ) { for ( int i = 0 ; i < this . getAllOtherExplorers ( ) . size ( ) ; i + + ) { if ( this . getCopyDialog ( ) . getSelectionModel ( ) . isSelectedIndex ( i ) ) { this . setSelectedObject ( this . getAllOtherExplorers ( ) . elementAt ( i ) ) ; this . getCopyDialog ( ) . setOKButtonEnabled ( true ) ; } } } }
void test0 ( ) throws Throwable { NullDisplayBox nullDisplayBox0 = new NullDisplayBox ( ) ; Rectangle rectangle0 = nullDisplayBox0 . getRectangle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test1 ( ) throws Throwable { NullDisplayBox nullDisplayBox0 = new NullDisplayBox ( ) ; NullDisplayBox nullDisplayBox1 = ( NullDisplayBox ) nullDisplayBox0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) { try { super . clone ( ) ; int x = this . getRectangle ( ) . x ; int y = this . getRectangle ( ) . y ; int width = this . getRectangle ( ) . width ; int height = this . getRectangle ( ) . height ; return new StandardRectangularDisplayBox ( x , y , width , height ) ; } catch ( CloneNotSupportedException ex ) { throw new InternalError ( ) ; } }
void test2 ( ) throws Throwable { NullDisplayBox nullDisplayBox0 = new NullDisplayBox ( ) ; boolean boolean0 = nullDisplayBox0 . isInside ( 1940 , 917 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInside ( int x , int y ) { return this . getRectangle ( ) . contains ( x , y ) ; }
void test1 ( ) throws Throwable { ExplorerDrawingPanel explorerDrawingPanel0 = new ExplorerDrawingPanel ( ( LayoutManager ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExplorerDrawingPanel ( ) { super ( ) ; this . initialize ( ) ; }
void test0 ( ) throws Throwable { DisplayBoxComposer displayBoxComposer0 = new DisplayBoxComposer ( ) ; ListBoxFigure listBoxFigure0 = new ListBoxFigure ( ) ; NullDisplayBox nullDisplayBox0 = ( NullDisplayBox ) displayBoxComposer0 . compose ( ( CompositeFigure ) listBoxFigure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DisplayBox compose ( CompositeFigure client ) { StandardEnumeration figures = null ; Figure currentFigure ; try { figures = client . getFigures ( ) ; } catch ( FigureException e ) { return this . getNewNullDisplayBox ( ) ; } if ( figures = = null ) { return this . getNewNullDisplayBox ( ) ; } int leftBorder = 0 ; int rightBorder = 0 ; int lowBorder = 0 ; int highBorder = 0 ; if ( ! figures . hasMoreElements ( ) ) { return this . getNewNullDisplayBox ( ) ; } try { currentFigure = ( Figure ) figures . nextElement ( ) ; leftBorder = this . calcLeft ( currentFigure ) ; rightBorder = this . calcRight ( currentFigure ) ; lowBorder = this . calcLow ( currentFigure ) ; highBorder = this . calcHigh ( currentFigure ) ; while ( figures . hasMoreElements ( ) ) { currentFigure = ( Figure ) figures . nextElement ( ) ; leftBorder = Math . min ( leftBorder , this . calcLeft ( currentFigure ) ) ; rightBorder = Math . max ( rightBorder , this . calcRight ( currentFigure ) ) ; lowBorder = Math . min ( lowBorder , this . calcLow ( currentFigure ) ) ; highBorder = Math . max ( highBorder , this . calcHigh ( currentFigure ) ) ; } } catch ( FigureException ex ) { DisplayBoxComposer . logger . error ( ResourceBundlePurchaser . getMessage ( DisplayBoxComposer . ERROR_IN_THIS_OBJECT ) , ex ) ; Warning . showWarning ( ResourceBundlePurchaser . getMessage ( DisplayBoxComposer . ERROR_IN_THIS_OBJECT ) ) ; } int x = leftBorder ; int y = lowBorder ; int width = rightBorder - x ; int height = highBorder - y ; return new StandardRectangularDisplayBox ( x , y , width , height ) ; }
void test0 ( ) throws Throwable { StandardRectangularDisplayBox standardRectangularDisplayBox0 = new StandardRectangularDisplayBox ( ) ; StandardRectangularDisplayBox standardRectangularDisplayBox1 = ( StandardRectangularDisplayBox ) standardRectangularDisplayBox0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) { try { super . clone ( ) ; int x = this . getRectangle ( ) . x ; int y = this . getRectangle ( ) . y ; int width = this . getRectangle ( ) . width ; int height = this . getRectangle ( ) . height ; return new StandardRectangularDisplayBox ( x , y , width , height ) ; } catch ( CloneNotSupportedException ex ) { throw new InternalError ( ) ; } }
void test1 ( ) throws Throwable { StandardRectangularDisplayBox standardRectangularDisplayBox0 = new StandardRectangularDisplayBox ( 0 , 1918 , 0 , 0 ) ; boolean boolean0 = standardRectangularDisplayBox0 . isInside ( 0 , ( - 801 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInside ( int x , int y ) { return this . getRectangle ( ) . contains ( x , y ) ; }
void test0 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; vector0 . add ( ( Object ) vector0 ) ; vector0 . add ( ( Object ) " [ this ] " ) ; String string0 = ToStringConverter . convertVectorToString ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertVectorToString ( Vector < Object > vector ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ToStringConverter . OPEN_SQUARE_BRACKET ) ; int maxIndex = vector . size ( ) - 1 ; for ( int i = 0 ; i < = maxIndex ; i + + ) { if ( vector . elementAt ( i ) ! = vector ) { buf . append ( String . valueOf ( vector . elementAt ( i ) ) ) ; } else { buf . append ( ToStringConverter . THIS ) ; } if ( i < maxIndex ) { buf . append ( ToStringConverter . COMMA_BLANK ) ; } } buf . append ( ToStringConverter . CLOSE_SQUARE_BRACKET ) ; return buf . toString ( ) ; }
void test0 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) ; void insertElementAt ( Object obj , int index ) ; boolean isInEnumeration ( Object object ) ; / / aus Oberklasse Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test2 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; boolean boolean0 = standardEnumerator0 . isInEnumeration ( ( Object ) "closed" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInEnumeration ( Object object ) ; / / aus Oberklasse Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test3 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return this . count ; }
void test4 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return this . count ; }
void test5 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) ; void insertElementAt ( Object obj , int index ) ; boolean isInEnumeration ( Object object ) ; / / aus Oberklasse Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test6 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object nextElement ( ) ; void removeElement ( Object object ) ; }
void test7 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure nextFigure ( ) { ( this . getVector ( ) ) { if ( this . getCount ( ) < this . getVector ( ) . size ( ) ) { this . setCount ( this . getCount ( ) + 1 ) ; return ( Figure ) this . getVector ( ) . elementAt ( this . getCount ( ) - 1 ) ; } } throw new NoSuchElementException ( ResourceBundlePurchaser . getMessage ( StandardEnumerator . NO_SUCH_ELEMENT_EXCEPTION ) ) ; }
void test8 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Figure nextFigure ( ) { ( this . getVector ( ) ) { if ( this . getCount ( ) < this . getVector ( ) . size ( ) ) { this . setCount ( this . getCount ( ) + 1 ) ; return ( Figure ) this . getVector ( ) . elementAt ( this . getCount ( ) - 1 ) ; } } throw new NoSuchElementException ( ResourceBundlePurchaser . getMessage ( StandardEnumerator . NO_SUCH_ELEMENT_EXCEPTION ) ) ; }
void test9 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return this . count ; }
void test10 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return this . count ; }
void test11 ( ) throws Throwable { StandardEnumerator standardEnumerator0 = new StandardEnumerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { / / Insert code to print the receiver here . / / This implementation forwards the message to super . You may replace or / / supplement this . return super . toString ( ) ; }
void test0 ( ) throws Throwable { AttributeModel attributeModel0 = new AttributeModel ( ) ; Class < ? > class0 = AttributeTitleManager . class ; AttributeTitleManager attributeTitleManager0 = AttributeTitleManager . getSingleton ( ) ; attributeModel0 . setType ( class0 ) ; String string0 = attributeTitleManager0 . getTitle ( attributeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return this . getObjectTitleManager ( ) . getTitle ( this . getObjectModel ( ) ) ; }
void test3 ( ) throws Throwable { ConnectionBuilder connectionBuilder0 = ConnectionBuilder . getInstance ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; connectionBuilder0 . removeConnections ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObjectModel ( ) { return true ; }
void test4 ( ) throws Throwable { ConnectionBuilder connectionBuilder0 = ConnectionBuilder . getInstance ( ) ; AttributeModel attributeModel0 = new AttributeModel ( ) ; connectionBuilder0 . removeSingleConnection ( attributeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ExplorerColorManager explorerColorManager0 = explorerModel0 . getColorManager ( ) ; Color color0 = explorerColorManager0 . getCopyBackground ( ) ; Color color1 = explorerColorManager0 . getCopyBackground ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getCopyBackground ( ) { if ( this . copyBackground = = null ) { this . setCopyBackground ( this . getDefaultCopyBackground ( ) ) ; } return this . copyBackground ; }
void test1 ( ) throws Throwable { ExplorerModel explorerModel0 = new ExplorerModel ( ) ; ExplorerColorManager explorerColorManager0 = explorerModel0 . getColorManager ( ) ; explorerColorManager0 . getFocusForeground ( ) ; Color color0 = explorerColorManager0 . getFocusForeground ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getFocusForeground ( ) { if ( this . focusForeground = = null ) { this . setFocusForeground ( this . getDefaultFocusForeground ( ) ) ; } return this . focusForeground ; }
void test2 ( ) throws Throwable { ExplorerColorManager explorerColorManager0 = new ExplorerColorManager ( ) ; DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel ( ) ; Color color0 = defaultColorSelectionModel0 . getSelectedColor ( ) ; explorerColorManager0 . setAttributeBackground ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAttributeBackground ( Color newAttributeBackground ) { this . attributeBackground = newAttributeBackground ; }
void test3 ( ) throws Throwable { ExplorerColorManager explorerColorManager0 = new ExplorerColorManager ( ) ; DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel ( ) ; Color color0 = defaultColorSelectionModel0 . getSelectedColor ( ) ; explorerColorManager0 . setAttributeForeground ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAttributeForeground ( Color newAttributeForeground ) { this . attributeForeground = newAttributeForeground ; }
void test5 ( ) throws Throwable { ExplorerColorManager explorerColorManager0 = new ExplorerColorManager ( ) ; explorerColorManager0 . getFocusBackground ( ) ; Color color0 = explorerColorManager0 . getFocusBackground ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getFocusBackground ( ) { if ( this . focusBackground = = null ) { this . setFocusBackground ( this . getDefaultFocusBackground ( ) ) ; } return this . focusBackground ; }
void test6 ( ) throws Throwable { ExplorerColorManager explorerColorManager0 = new ExplorerColorManager ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; ColorUIResource colorUIResource0 = ( ColorUIResource ) defaultTreeCellRenderer0 . getBackgroundNonSelectionColor ( ) ; explorerColorManager0 . setObjectForeground ( ( Color ) colorUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObjectForeground ( Color newObjectForeground ) { this . objectForeground = newObjectForeground ; }
void test7 ( ) throws Throwable { Color color0 = ExplorerColorManager . getDefaultExplorerObjectBackground ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . awt . Color getDefaultExplorerObjectBackground ( ) { if ( ExplorerColorManager . defaultExplorerObjectBackground = = null ) { ExplorerColorManager . setDefaultExplorerObjectBackground ( new java . awt . Color ( ExplorerColorManager . NUMBER_153 , ExplorerColorManager . NUMBER_153 , ExplorerColorManager . NUMBER_255 ) ) ; } return ExplorerColorManager . defaultExplorerObjectBackground ; }
void test0 ( ) throws Throwable { ObjectTitleManager objectTitleManager0 = ObjectTitleManager . getSingleton ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setObject ( ( Object ) "print - quality" ) ; String string0 = objectTitleManager0 . getTitle ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return this . getObjectTitleManager ( ) . getTitle ( this . getObjectModel ( ) ) ; }
void test2 ( ) throws Throwable { ObjectTitleManager objectTitleManager0 = ObjectTitleManager . getSingleton ( ) ; ObjectModel objectModel0 = new ObjectModel ( ) ; objectModel0 . setObject ( ( Object ) "print - quality" ) ; String string0 = objectTitleManager0 . getCompleteTitle ( objectModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompleteTitle ( ) { return null ; }
