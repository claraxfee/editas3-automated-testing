void test0 ( ) throws Throwable { WithinContextImpl withinContextImpl0 = new WithinContextImpl ( ) ; withinContextImpl0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean enabled ( ) { return enabled ; }
void test1 ( ) throws Throwable { WithinContextImpl withinContextImpl0 = new WithinContextImpl ( ) ; withinContextImpl0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean enabled ( ) { return enabled ; }
void test2 ( ) throws Throwable { WithinContextImpl withinContextImpl0 = new WithinContextImpl ( ) ; boolean boolean0 = withinContextImpl0 . enabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean enabled ( ) { return enabled ; }
void test6 ( ) throws Throwable { OperationsImpl operationsImpl0 = new OperationsImpl ( ( OperationsHelper ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "OBzimadJ | - UfXa#ZpQ^" ) ; List < Node > list0 = operationsImpl0 . attributes ( ( Node ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Attribute > attributes ( ) ; / * * * Verifica se o elemento contém elementos filhos . * * @return * < code > true < / code > se o elemento tiver elementos filhos . * / boolean containsChildren ( ) ; / * * * Retorna a quantidade de elementos filhos do elemento XML . * * @return * < code > int < / code > contendo a quantidade de elementos filhos . * / int numberOfChildren ( ) ; / * * * Retorna a quantidade de elementos filhos do elemento XML com o nome especificado por parâmetro . * * @param name * < code > java . lang . String < / code > contendo o nome dos elementos filhos que serão verificados . * * @return * < code > int < / code > contendo a quantidade de elementos filhos com o nome especificado por parâmetro . * / int numberOfChildren ( String name ) ; / * * * Retorna o elemento filho localizado na posição < code > index < / code > especificada por parâmetro . * * @param index * < code > int < / code > contendo a posição do elemento filho que deverá ser retornado . * Deve ser especificado um valor entre < code > 0 < / code > e { @link #numberOfChildren ( ) }
void test7 ( ) throws Throwable { OperationsImpl operationsImpl0 = new OperationsImpl ( ( OperationsHelper ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "x ( 9IX" ) ; boolean boolean0 = operationsImpl0 . containsAttribute ( ( Node ) iIOMetadataNode0 , "x ( 9IX" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsAttribute ( String name ) ; / * * * Retorna o valor de determinado atributo . * * < p > * Se o atributo não for localizado , a instância de { @link Value }
void test8 ( ) throws Throwable { OperationsImpl operationsImpl0 = new OperationsImpl ( ( OperationsHelper ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "a" ) ; boolean boolean0 = operationsImpl0 . containsAttributes ( ( Node ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsAttributes ( ) ; / * * * Verifica se o elemento contém determinado atributo . * * @param name * < code > java . lang . String < / code > contendo o nome do atributo * que será verificado . * * @return * < code > true < / code > se o elemento contiver o atributo especificado * por parâmetro . * / boolean containsAttribute ( String name ) ; / * * * Retorna o valor de determinado atributo . * * < p > * Se o atributo não for localizado , a instância de { @link Value }
void test9 ( ) throws Throwable { OperationsImpl operationsImpl0 = new OperationsImpl ( ( OperationsHelper ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "a" ) ; String string0 = operationsImpl0 . path ( ( Node ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String path ( ) ; / * * * Verifica se o elemento contém atributos . * * @return * < code > true < / code > se o elemento tiver atributos . * / boolean containsAttributes ( ) ; / * * * Verifica se o elemento contém determinado atributo . * * @param name * < code > java . lang . String < / code > contendo o nome do atributo * que será verificado . * * @return * < code > true < / code > se o elemento contiver o atributo especificado * por parâmetro . * / boolean containsAttribute ( String name ) ; / * * * Retorna o valor de determinado atributo . * * < p > * Se o atributo não for localizado , a instância de { @link Value }
void test0 ( ) throws Throwable { DateFormatter dateFormatter0 = new DateFormatter ( "" ) ; Class < Date > class0 = dateFormatter0 . type ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < T > type ( ) ; / * * * Deve retornar < code > java . lang . String < / code > correspondente a formatação * do objeto especificado por parâmetro . * * @param value * objeto que será formatado . * * @return * < code > java . lang . String < / code > correspondente à formatação do * objeto especificado por parâmetro . * / String format ( T value ) ; / * * * Deve fazer o processo inverso de { @link #format ( Object ) }
void test2 ( ) throws Throwable { DateFormatter dateFormatter0 = new DateFormatter ( "" ) ; Date date0 = new Date ( ) ; String string0 = dateFormatter0 . format ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( T value ) ; / * * * Deve fazer o processo inverso de { @link #format ( Object ) }
void test0 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; boolean boolean0 = nullValue0 . equals ( ( Object ) nullValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return o instanceof NullValue ; }
void test2 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; Date date0 = nullValue0 . asDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test4 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; BigDecimal bigDecimal0 = nullValue0 . asBigDecimal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test5 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; Date date0 = nullValue0 . asDate ( " U = @iPCN ] hSp6\"b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test6 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; Class < ? > class0 = NullValue . class ; Object object0 = nullValue0 . asType ( ( Class < Object > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > List < T > asType ( Class < T > type ) throws FormatterNotConfiguredException ; }
void test7 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; BigInteger bigInteger0 = nullValue0 . asBigInteger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test9 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; int int0 = nullValue0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return 0 ; }
void test12 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; String string0 = nullValue0 . asString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test15 ( ) throws Throwable { NullValue nullValue0 = NullValue . INSTANCE ; String string0 = nullValue0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return null ; }
void test0 ( ) throws Throwable { ValidationsImpl validationsImpl0 = new ValidationsImpl ( ( Factory ) null ) ; Object [ ] objectArray0 = new Object [ 1 ] ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ValidationsImpl ( Factory factory ) { this . factory = factory ; }
void test1 ( ) throws Throwable { ValidationsImpl validationsImpl0 = new ValidationsImpl ( ( Factory ) null ) ; String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 1 ] = "net . sf . xisemele . invalid . name" ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" ValidationsImpl ( Factory factory ) { this . factory = factory ; }
void test2 ( ) throws Throwable { ValidationsImpl validationsImpl0 = new ValidationsImpl ( ( Factory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ValidationsImpl ( Factory factory ) { this . factory = factory ; }
void test3 ( ) throws Throwable { ValidationsImpl validationsImpl0 = new ValidationsImpl ( ( Factory ) null ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" ValidationsImpl ( Factory factory ) { this . factory = factory ; }
void test4 ( ) throws Throwable { ValidationsImpl validationsImpl0 = new ValidationsImpl ( ( Factory ) null ) ; String [ ] stringArray0 = new String [ 4 ] ; Object object0 = validationsImpl0 . getFirstNotNull ( ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > T getFirstNotNull ( T . . . values ) ; }
void test5 ( ) throws Throwable { ValidationsImpl validationsImpl0 = new ValidationsImpl ( ( Factory ) null ) ; Object [ ] objectArray0 = new Object [ 3 ] ; objectArray0 [ 0 ] = ( Object ) validationsImpl0 ; ValidationsImpl validationsImpl1 = ( ValidationsImpl ) validationsImpl0 . getFirstNotNull ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > T getFirstNotNull ( T . . . values ) ; }
void test1 ( ) throws Throwable { FormatterProviderImpl formatterProviderImpl0 = new FormatterProviderImpl ( ) ; Class < ? > class0 = FormatterProviderImpl . class ; Formatter < Formatter < Formatter < Integer > > > formatter0 = formatterProviderImpl0 . getFormatter ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > Formatter < T > getFormatter ( Class < ? > type ) ; }
void test0 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Byte > list0 = valueListImpl0 . asByte ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Byte > asByte ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Short < / code > . * * @return * lista de < code > java . lang . Short < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Short > asShort ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Integer < / code > . * * @return * lista de < code > java . lang . Integer < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Integer > asInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Long < / code > . * * @return * lista de < code > java . lang . Long < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Long > asLong ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Float < / code > . * * @return * lista de < code > java . lang . Float < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Float > asFloat ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Double < / code > . * * @return * lista de < code > java . lang . Double < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Double > asDouble ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigInteger < / code > . * * @return * lista de < code > java . math . BigInteger < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test2 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Short > list0 = valueListImpl0 . asShort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Short > asShort ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Integer < / code > . * * @return * lista de < code > java . lang . Integer < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Integer > asInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Long < / code > . * * @return * lista de < code > java . lang . Long < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Long > asLong ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Float < / code > . * * @return * lista de < code > java . lang . Float < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Float > asFloat ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Double < / code > . * * @return * lista de < code > java . lang . Double < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Double > asDouble ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigInteger < / code > . * * @return * lista de < code > java . math . BigInteger < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test4 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Integer > list0 = valueListImpl0 . asInteger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Integer > asInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Long < / code > . * * @return * lista de < code > java . lang . Long < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Long > asLong ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Float < / code > . * * @return * lista de < code > java . lang . Float < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Float > asFloat ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Double < / code > . * * @return * lista de < code > java . lang . Double < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Double > asDouble ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigInteger < / code > . * * @return * lista de < code > java . math . BigInteger < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test6 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Long > list0 = valueListImpl0 . asLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > asLong ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Float < / code > . * * @return * lista de < code > java . lang . Float < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Float > asFloat ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Double < / code > . * * @return * lista de < code > java . lang . Double < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Double > asDouble ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigInteger < / code > . * * @return * lista de < code > java . math . BigInteger < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test8 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Float > list0 = valueListImpl0 . asFloat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Float > asFloat ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Double < / code > . * * @return * lista de < code > java . lang . Double < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Double > asDouble ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigInteger < / code > . * * @return * lista de < code > java . math . BigInteger < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test10 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Double > list0 = valueListImpl0 . asDouble ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Double > asDouble ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigInteger < / code > . * * @return * lista de < code > java . math . BigInteger < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test12 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < BigInteger > list0 = valueListImpl0 . asBigInteger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BigInteger > asBigInteger ( ) ; / * * * Converte os valores para uma lista de < code > java . math . BigDecimal < / code > . * * @return * lista de < code > java . math . BigDecimal < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test14 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < BigDecimal > list0 = valueListImpl0 . asBigDecimal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BigDecimal > asBigDecimal ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . Boolean < / code > . * * @return * lista de < code > java . lang . Boolean < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test16 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Boolean > list0 = valueListImpl0 . asBoolean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Boolean > asBoolean ( ) ; / * * * Converte os valores para uma lista de < code > java . lang . String < / code > . * * @return * lista de < code > java . lang . String < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test18 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < String > list0 = valueListImpl0 . asString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test20 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Date > list0 = valueListImpl0 . asDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test22 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; List < Date > list0 = valueListImpl0 . asDate ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test24 ( ) throws Throwable { LinkedList < Value > linkedList0 = new LinkedList < Value > ( ) ; ValueListImpl valueListImpl0 = new ValueListImpl ( ( List < Value > ) linkedList0 ) ; Class < ? > class0 = ValueListImpl . class ; List < BigInteger > list0 = valueListImpl0 . asType ( ( Class < BigInteger > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > List < T > asType ( Class < T > type ) throws FormatterNotConfiguredException ; }
void test0 ( ) throws Throwable { OperationsHelperImpl operationsHelperImpl0 = new OperationsHelperImpl ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; IIOMetadataNode iIOMetadataNode1 = ( IIOMetadataNode ) iIOMetadataNode0 . appendChild ( ( Node ) iIOMetadataNode0 ) ; List < Node > list0 = operationsHelperImpl0 . children ( ( Node ) iIOMetadataNode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node nodeWithName ( List < Node > nodes , String name ) { for ( Node node : nodes ) { if ( node . getNodeName ( ) . equals ( name ) ) { return node ; } } return null ; }
void test1 ( ) throws Throwable { OperationsHelperImpl operationsHelperImpl0 = new OperationsHelperImpl ( ) ; Node node0 = operationsHelperImpl0 . find ( ( Document ) null , " / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element find ( String path ) throws ElementNotFoundException ; }
void test3 ( ) throws Throwable { OperationsHelperImpl operationsHelperImpl0 = new OperationsHelperImpl ( ) ; LinkedList < Node > linkedList0 = new LinkedList < Node > ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; linkedList0 . add ( ( Node ) iIOMetadataNode0 ) ; IIOMetadataNode iIOMetadataNode1 = ( IIOMetadataNode ) operationsHelperImpl0 . nodeWithName ( ( List < Node > ) linkedList0 , " [ javax . imageio . metadata . IIOMetadataNode@29dc8ca4 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node nodeWithName ( List < Node > nodes , String name ) { for ( Node node : nodes ) { if ( node . getNodeName ( ) . equals ( name ) ) { return node ; } } return null ; }
void test4 ( ) throws Throwable { OperationsHelperImpl operationsHelperImpl0 = new OperationsHelperImpl ( ) ; LinkedList < Node > linkedList0 = new LinkedList < Node > ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; linkedList0 . add ( ( Node ) iIOMetadataNode0 ) ; List < Node > list0 = operationsHelperImpl0 . sublistWithName ( ( List < Node > ) linkedList0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Node > sublistWithName ( List < Node > nodes , String name ) { ArrayList < Node > sublist = new ArrayList < Node > ( ) ; for ( Node node : nodes ) { if ( node . getNodeName ( ) . equals ( name ) ) { sublist . add ( node ) ; } } return sublist ; }
void test5 ( ) throws Throwable { OperationsHelperImpl operationsHelperImpl0 = new OperationsHelperImpl ( ) ; LinkedList < Node > linkedList0 = new LinkedList < Node > ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; linkedList0 . add ( ( Node ) iIOMetadataNode0 ) ; List < Node > list0 = operationsHelperImpl0 . sublistWithName ( ( List < Node > ) linkedList0 , " [ javax . imageio . metadata . IIOMetadataNode@29dc8ca4 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Node > sublistWithName ( List < Node > nodes , String name ) { ArrayList < Node > sublist = new ArrayList < Node > ( ) ; for ( Node node : nodes ) { if ( node . getNodeName ( ) . equals ( name ) ) { sublist . add ( node ) ; } } return sublist ; }
void test0 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; StringWriter stringWriter0 = factoryImpl0 . createStringWriter ( ) ; StreamResult streamResult0 = factoryImpl0 . createStreamResult ( ( Writer ) stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StreamResult createStreamResult ( java . io . Writer writer ) { return new StreamResult ( writer ) ; }
void test2 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; DocumentBuilderImpl documentBuilderImpl0 = ( DocumentBuilderImpl ) factoryImpl0 . createDocumentBuilder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DocumentBuilder createDocumentBuilder ( ) { DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl ( ) ; factory . setNamespaceAware ( true ) ; factory . setIgnoringComments ( true ) ; factory . setValidating ( false ) ; try { DocumentBuilder builder = factory . newDocumentBuilder ( ) ; builder . setErrorHandler ( new NullErrorHandler ( ) ) ; return builder ; } catch ( ParserConfigurationException e ) { throw new InternalError ( e . getMessage ( ) ) ; } }
void test3 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; DOMSource dOMSource0 = factoryImpl0 . createDOMSource ( ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DOMSource createDOMSource ( Document document ) { return new DOMSource ( document ) ; }
void test6 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; Value value0 = factoryImpl0 . createNullValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > asString ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da * lista de determinados elementos XML . * / List < Date > asDate ( ) ; / * * * Converte os valores para uma lista de < code > java . util . Date < / code > de acordo com o padrão especificado * por parâmetro . * * @param pattern * < code > java . lang . String < / code > contendo o padrão que será aplicado na conversão do valor . * * @return * lista de < code > java . util . Date < / code > contendo os valores correspondentes da lista * de determinados elementos XML . * / List < Date > asDate ( String pattern ) ; / * * * Converte os valores para uma lista do tipo especificado por parâmetro . * * < p > * Esse método espera que um { @link Formatter formatador }
void test7 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; TransformerImpl transformerImpl0 = ( TransformerImpl ) factoryImpl0 . createTransformer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transformer createTransformer ( ) throws TransformerConfigurationException , TransformerFactoryConfigurationError { return TransformerFactory . newInstance ( ) . newTransformer ( ) ; }
void test8 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; LinkedList < Node > linkedList0 = new LinkedList < Node > ( ) ; linkedList0 . add ( ( Node ) iIOMetadataNode0 ) ; ValueList valueList0 = factoryImpl0 . createValueList ( ( List < Node > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ValueList createValueList ( List < Node > nodes ) { ArrayList < Value > values = new ArrayList < Value > ( ) ; for ( Node node : nodes ) { values . add ( createValue ( node . getTextContent ( ) ) ) ; } return new ValueListImpl ( values ) ; }
void test9 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; LinkedList < Node > linkedList0 = new LinkedList < Node > ( ) ; linkedList0 . add ( ( Node ) iIOMetadataNode0 ) ; List < Element > list0 = factoryImpl0 . createElements ( ( List < Node > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Element > createElements ( List < Node > nodes ) { ArrayList < Element > elements = new ArrayList < Element > ( ) ; for ( Node node : nodes ) { elements . add ( createElement ( node ) ) ; } return elements ; }
void test11 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; Reader reader0 = factoryImpl0 . createReader ( ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Reader createReader ( String xml ) throws ParseXMLException ; / * * * Cria uma nova instância de { @link Reader }
void test12 ( ) throws Throwable { FactoryImpl factoryImpl0 = new FactoryImpl ( ( FormatterProvider ) null ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; LinkedList < Node > linkedList0 = new LinkedList < Node > ( ) ; linkedList0 . add ( ( Node ) iIOMetadataNode0 ) ; factoryImpl0 . createAttributes ( ( List < Node > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Attribute > createAttributes ( List < Node > nodes ) { List < Attribute > attributes = new ArrayList < Attribute > ( ) ; for ( Node node : nodes ) { attributes . add ( new AttributeImpl ( node . getNodeName ( ) , new ValueImpl ( this , formatterProvider , node . getNodeValue ( ) ) ) ) ; } return attributes ; }
void test12 ( ) throws Throwable { ValueImpl valueImpl0 = new ValueImpl ( ( Factory ) null , ( FormatterProvider ) null , ( String ) null ) ; String string0 = valueImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return null ; }
void test13 ( ) throws Throwable { ValueImpl valueImpl0 = new ValueImpl ( ( Factory ) null , ( FormatterProvider ) null , "8 > u2G m | egM" ) ; int int0 = valueImpl0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return 0 ; }
void test15 ( ) throws Throwable { ValueImpl valueImpl0 = new ValueImpl ( ( Factory ) null , ( FormatterProvider ) null , ( String ) null ) ; Double double0 = new Double ( ( - 1 . 0 ) ) ; boolean boolean0 = valueImpl0 . equals ( ( Object ) double0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return o instanceof NullValue ; }
void test16 ( ) throws Throwable { ValueImpl valueImpl0 = new ValueImpl ( ( Factory ) null , ( FormatterProvider ) null , "8 > u2G m | egM" ) ; boolean boolean0 = valueImpl0 . equals ( ( Object ) valueImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return o instanceof NullValue ; }
void test0 ( ) throws Throwable { AttributeImpl attributeImpl0 = new AttributeImpl ( "" , ( Value ) null ) ; Value value0 = attributeImpl0 . value ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Value value ( ) ; / * * * Retorna o < i > path < / i > que representa a localização do elemento no documento XML . * * < p > * O formato do atalho retornado é correspondente ao que pode ser especificado como parâmetro para o método * { @link Reader#find ( String ) Reader . element ( path ) }
void test1 ( ) throws Throwable { AttributeImpl attributeImpl0 = new AttributeImpl ( " ? " , ( Value ) null ) ; String string0 = attributeImpl0 . name ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String name ( ) ; / * * * Retorna instância de { @link Value }
void test3 ( ) throws Throwable { AttributeImpl attributeImpl0 = new AttributeImpl ( " ? " , ( Value ) null ) ; boolean boolean0 = attributeImpl0 . equals ( ( Object ) " ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return o instanceof NullValue ; }
void test5 ( ) throws Throwable { AttributeImpl attributeImpl0 = new AttributeImpl ( " ? " , ( Value ) null ) ; AttributeImpl attributeImpl1 = new AttributeImpl ( "`#9NQLv , " , ( Value ) null ) ; boolean boolean0 = attributeImpl0 . equals ( ( Object ) attributeImpl1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return o instanceof NullValue ; }
