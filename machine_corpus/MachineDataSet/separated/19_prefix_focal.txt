void test0 ( ) throws Throwable { JMCAParser jMCAParser0 = new JMCAParser ( ) ; char [ ] charArray0 = new char [ 2 ] ; charArray0 [ 0 ] = 'I' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; ASTNode aSTNode0 = jMCAParser0 . parse ( ( Reader ) charArrayReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASTNode parse ( java . io . Reader rdr ) ; }
void test1 ( ) throws Throwable { UILayoutDisplayAnalyzer uILayoutDisplayAnalyzer0 = new UILayoutDisplayAnalyzer ( ) ; String string0 = uILayoutDisplayAnalyzer0 . analyze ( ( ASTNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test0 ( ) throws Throwable { JMCAController jMCAController0 = new JMCAController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMCAController ( ) { }
void test1 ( ) throws Throwable { String string0 = JMCAController . analyze ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test2 ( ) throws Throwable { String string0 = JMCAController . analyze ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test0 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; aSTNode0 . display ( ( Writer ) stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test1 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( ) ; ASTNode aSTNode1 = aSTNode0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASTNode getParent ( ) { return parent ; }
void test2 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( ( ASTNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIdentity ( ) { return identity ; }
void test4 ( ) throws Throwable { ASTNode aSTNode0 = ASTNode . getTree ( "y * r0BY ) ; : 1KOF1%E3s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASTNode getTree ( String filename ) { ObjectInputStream rdr = null ; ASTNode rootNode = null ; try { FileInputStream flstrm = new FileInputStream ( new File ( filename ) ) ; rdr = new ObjectInputStream ( flstrm ) ; rootNode = ( ASTNode ) rdr . readObject ( ) ; rdr . close ( ) ; } catch ( java . io . IOException ie ) { } finally { return rootNode ; } }
void test5 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( "9mXn@S } 72 < 0dQ" , "9mXn@S } 72 < 0dQ" , ( ASTNode ) null ) ; ASTNode aSTNode1 = new ASTNode ( ) ; int int0 = aSTNode0 . compareTo ( ( Object ) aSTNode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test6 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( "9mXn@S } 72 < 0dQ" , "9mXn@S } 72 < 0dQ" , ( ASTNode ) null ) ; ASTNode aSTNode1 = new ASTNode ( "9mXn@S } 72 < 0dQ" , "8 | " , ( ASTNode ) null ) ; int int0 = aSTNode0 . compareTo ( ( Object ) aSTNode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( "9mXn@S } 72 < 0dQ" , "9mXn@S } 72 < 0dQ" , ( ASTNode ) null ) ; ASTNode aSTNode1 = new ASTNode ( "9mXn@S } 72 < 0dQ" , "9mXn@S } 72 < 0dQ" , ( ASTNode ) null ) ; aSTNode0 . addChild ( aSTNode1 ) ; int int0 = aSTNode0 . compareTo ( ( Object ) aSTNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test9 ( ) throws Throwable { ASTNode aSTNode0 = new ASTNode ( ) ; DefaultMutableTreeNode defaultMutableTreeNode0 = aSTNode0 . createTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test1 ( ) throws Throwable { JMCAAnalyzer jMCAAnalyzer0 = new JMCAAnalyzer ( ) ; String string0 = jMCAAnalyzer0 . analyze ( ( ASTNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test2 ( ) throws Throwable { JMCAAnalyzer jMCAAnalyzer0 = new JMCAAnalyzer ( ) ; ASTNode aSTNode0 = new ASTNode ( ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . setIdentity ( "StatementExpression" ) ; aSTNode0 . setType ( "MethodDeclaration" ) ; String string0 = jMCAAnalyzer0 . analyze ( aSTNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test3 ( ) throws Throwable { JMCAAnalyzer jMCAAnalyzer0 = new JMCAAnalyzer ( ) ; ASTNode aSTNode0 = new ASTNode ( ) ; ASTNode aSTNode1 = new ASTNode ( " + " , " + " , aSTNode0 ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . addChild ( aSTNode1 ) ; aSTNode0 . setIdentity ( "StatementExpression" ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . setType ( "MethodDeclaration" ) ; aSTNode1 . identity = " - = " ; String string0 = jMCAAnalyzer0 . analyze ( aSTNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test4 ( ) throws Throwable { JMCAAnalyzer jMCAAnalyzer0 = new JMCAAnalyzer ( ) ; ASTNode aSTNode0 = new ASTNode ( ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . setIdentity ( "StatementExpression" ) ; aSTNode0 . setType ( "MethodDeclaration" ) ; String string0 = jMCAAnalyzer0 . analyze ( aSTNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test5 ( ) throws Throwable { JMCAAnalyzer jMCAAnalyzer0 = new JMCAAnalyzer ( ) ; ASTNode aSTNode0 = new ASTNode ( ) ; ASTNode aSTNode1 = new ASTNode ( " + " , " + " , aSTNode0 ) ; aSTNode0 . addChild ( aSTNode0 ) ; aSTNode0 . addChild ( aSTNode1 ) ; aSTNode0 . addChild ( aSTNode1 ) ; aSTNode0 . setIdentity ( "StatementExpression" ) ; aSTNode0 . setType ( "MethodDeclaration" ) ; String string0 = jMCAAnalyzer0 . analyze ( aSTNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( ASTNode root ) ; / * * * Store the file name parsed for formatted display purposes * @param fileName String * / void setFileName ( String fileName ) ; }
void test2 ( ) throws Throwable { JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) null , 0 , 0 ) ; JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager ( javaCharStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDebugStream ( java . io . PrintStream ds ) { debugStream = ds ; }
void test5 ( ) throws Throwable { char [ ] charArray0 = new char [ 2 ] ; charArray0 [ 0 ] = 'w' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; BufferedReader bufferedReader0 = new BufferedReader ( ( Reader ) charArrayReader0 , ( int ) 'w' ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) bufferedReader0 , ( int ) 'w' ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) pushbackReader0 , ( int ) 'w' , ( int ) 'w' ) ; JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager ( javaCharStream0 ) ; Token token0 = javaParserTokenManager0 . getNextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test8 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "pU | | H" ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) stringReader0 , 1551 , ( int ) '6' ) ; JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager ( javaCharStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test12 ( ) throws Throwable { char [ ] charArray0 = new char [ 5 ] ; charArray0 [ 0 ] = 'a' ; charArray0 [ 1 ] = 'a' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) charArrayReader0 ) ; JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager ( javaCharStream0 ) ; Token token0 = javaParserTokenManager0 . getNextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test14 ( ) throws Throwable { char [ ] charArray0 = new char [ 2 ] ; charArray0 [ 0 ] = 'w' ; charArray0 [ 1 ] = 'w' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; BufferedReader bufferedReader0 = new BufferedReader ( ( Reader ) charArrayReader0 , ( int ) 'w' ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) bufferedReader0 , ( int ) 'w' ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) pushbackReader0 , ( int ) 'w' , ( int ) 'w' ) ; JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager ( javaCharStream0 ) ; Token token0 = javaParserTokenManager0 . getNextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test20 ( ) throws Throwable { char [ ] charArray0 = new char [ 5 ] ; charArray0 [ 1 ] = '7' ; charArray0 [ 0 ] = 'a' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) charArrayReader0 ) ; JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager ( javaCharStream0 ) ; Token token0 = javaParserTokenManager0 . getNextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String returnString = type + " : : " + identity ; return returnString ; }
void test0 ( ) throws Throwable { TestJava testJava0 = new TestJava ( ) ; testJava0 . method1 ( 1 , 1 . 0 , ( JavaParser ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void method1 ( int param1 , double param2 , JavaParser P ) { classLevelVariable = param1 ; switch ( classLevelVariable ) { case 1 : anotherClassVariable = 1 + param2 ; break ; case 2 : anotherClassVariable = param2 ; break ; default : System . out . println ( "Default Value Used" ) ; } }
void test1 ( ) throws Throwable { TestJava testJava0 = new TestJava ( ) ; testJava0 . method1 ( 2 , ( double ) 2 , ( JavaParser ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void method1 ( int param1 , double param2 , JavaParser P ) { classLevelVariable = param1 ; switch ( classLevelVariable ) { case 1 : anotherClassVariable = 1 + param2 ; break ; case 2 : anotherClassVariable = param2 ; break ; default : System . out . println ( "Default Value Used" ) ; } }
void test2 ( ) throws Throwable { TestJava testJava0 = new TestJava ( ) ; testJava0 . method1 ( ( - 1 ) , ( double ) 2 , ( JavaParser ) null ) ; testJava0 . method2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void method2 ( ) { if ( classLevelVariable > = 0 ) { int tmpVar = 5 ; } else if ( classLevelVariable = = 0 ) { int tmpVar = ( int ) anotherClassVariable ; } }
void test3 ( ) throws Throwable { TestJava testJava0 = new TestJava ( ) ; testJava0 . method2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void method2 ( ) { if ( classLevelVariable > = 0 ) { int tmpVar = 5 ; } else if ( classLevelVariable = = 0 ) { int tmpVar = ( int ) anotherClassVariable ; } }
void test0 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) pipedReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEndColumn ( ) { return bufcolumn [ bufpos ] ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) byteArrayInputStream0 , ( int ) ( byte ) 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return bufcolumn [ bufpos ] ; }
void test2 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 , 12 , ( - 351 ) , ( - 351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLine ( ) { return bufline [ bufpos ] ; }
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLine ( ) { return bufline [ bufpos ] ; }
void test4 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 , 12 , ( - 351 ) , ( - 351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginLine ( ) { return bufline [ tokenBegin ] ; }
void test5 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) pipedReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEndColumn ( ) { return bufcolumn [ bufpos ] ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) byteArrayInputStream0 , 1 , ( int ) ( byte ) 0 , 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginColumn ( ) { return bufcolumn [ tokenBegin ] ; }
void test7 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) pipedReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return bufcolumn [ bufpos ] ; }
void test8 ( ) throws Throwable { int int0 = JavaCharStream . hexval ( '9' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hexval ( char c ) throws java . io . IOException { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; case 'a' : case 'A' : return 10 ; case 'b' : case 'B' : return 11 ; case 'c' : case 'C' : return 12 ; case 'd' : case 'D' : return 13 ; case 'e' : case 'E' : return 14 ; case 'f' : case 'F' : return 15 ; } throw new java . io . IOException ( ) ; / / Should never come here }
void test9 ( ) throws Throwable { int int0 = JavaCharStream . hexval ( '6' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hexval ( char c ) throws java . io . IOException { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; case 'a' : case 'A' : return 10 ; case 'b' : case 'B' : return 11 ; case 'c' : case 'C' : return 12 ; case 'd' : case 'D' : return 13 ; case 'e' : case 'E' : return 14 ; case 'f' : case 'F' : return 15 ; } throw new java . io . IOException ( ) ; / / Should never come here }
void test10 ( ) throws Throwable { int int0 = JavaCharStream . hexval ( 'B' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hexval ( char c ) throws java . io . IOException { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; case 'a' : case 'A' : return 10 ; case 'b' : case 'B' : return 11 ; case 'c' : case 'C' : return 12 ; case 'd' : case 'D' : return 13 ; case 'e' : case 'E' : return 14 ; case 'f' : case 'F' : return 15 ; } throw new java . io . IOException ( ) ; / / Should never come here }
void test11 ( ) throws Throwable { int int0 = JavaCharStream . hexval ( 'F' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hexval ( char c ) throws java . io . IOException { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; case 'a' : case 'A' : return 10 ; case 'b' : case 'B' : return 11 ; case 'c' : case 'C' : return 12 ; case 'd' : case 'D' : return 13 ; case 'e' : case 'E' : return 14 ; case 'f' : case 'F' : return 15 ; } throw new java . io . IOException ( ) ; / / Should never come here }
void test18 ( ) throws Throwable { int int0 = JavaCharStream . hexval ( 'a' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hexval ( char c ) throws java . io . IOException { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; case 'a' : case 'A' : return 10 ; case 'b' : case 'B' : return 11 ; case 'c' : case 'C' : return 12 ; case 'd' : case 'D' : return 13 ; case 'e' : case 'E' : return 14 ; case 'f' : case 'F' : return 15 ; } throw new java . io . IOException ( ) ; / / Should never come here }
void test19 ( ) throws Throwable { int int0 = JavaCharStream . hexval ( 'd' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hexval ( char c ) throws java . io . IOException { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; case 'a' : case 'A' : return 10 ; case 'b' : case 'B' : return 11 ; case 'c' : case 'C' : return 12 ; case 'd' : case 'D' : return 13 ; case 'e' : case 'E' : return 14 ; case 'f' : case 'F' : return 15 ; } throw new java . io . IOException ( ) ; / / Should never come here }
void test23 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char BeginToken ( ) throws java . io . IOException { if ( inBuf > 0 ) { - - inBuf ; if ( + + bufpos = = bufsize ) bufpos = 0 ; tokenBegin = bufpos ; return buffer [ bufpos ] ; } tokenBegin = 0 ; bufpos = - 1 ; return readChar ( ) ; }
void test24 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( Reader ) pipedReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginColumn ( ) { return bufcolumn [ tokenBegin ] ; }
void test25 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) byteArrayInputStream0 , 1 , ( int ) ( byte ) 0 , 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginLine ( ) { return bufline [ tokenBegin ] ; }
void test27 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginLine ( ) { return bufline [ tokenBegin ] ; }
void test28 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) byteArrayInputStream0 , 1 , ( int ) ( byte ) 0 , 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] GetSuffix ( int len ) { char [ ] ret = new char [ len ] ; if ( ( bufpos + 1 ) > = len ) System . arraycopy ( buffer , bufpos - len + 1 , ret , 0 , len ) ; else { System . arraycopy ( buffer , bufsize - ( len - bufpos - 1 ) , ret , 0 , len - bufpos - 1 ) ; System . arraycopy ( buffer , 0 , ret , len - bufpos - 1 , bufpos + 1 ) ; } return ret ; }
void test29 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 , 12 , ( - 351 ) , ( - 351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginColumn ( ) { return bufcolumn [ tokenBegin ] ; }
void test30 ( ) throws Throwable { PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) null , ( int ) '9' ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pushbackInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBeginColumn ( ) { return bufcolumn [ tokenBegin ] ; }
void test31 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; JavaCharStream javaCharStream0 = new JavaCharStream ( ( InputStream ) pipedInputStream0 , 12 , ( - 351 ) , ( - 351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEndLine ( ) { return bufline [ bufpos ] ; }
void test0 ( ) throws Throwable { SaxProcessor saxProcessor0 = new SaxProcessor ( ( InputStream ) null ) ; ASTNode aSTNode0 = saxProcessor0 . getCurrNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASTNode getCurrNode ( ) { return currNode ; }
void test1 ( ) throws Throwable { SaxProcessor saxProcessor0 = new SaxProcessor ( ) ; State state0 = saxProcessor0 . getCurrState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getCurrState ( ) { return currState ; }
void test2 ( ) throws Throwable { SaxProcessor saxProcessor0 = new SaxProcessor ( ) ; ASTNode aSTNode0 = saxProcessor0 . getRootNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASTNode getRootNode ( ) { return rootNode ; }
void test6 ( ) throws Throwable { SaxProcessor saxProcessor0 = new SaxProcessor ( ) ; AttributesImpl attributesImpl0 = new AttributesImpl ( ) ; Attributes2Impl attributes2Impl0 = new Attributes2Impl ( ( Attributes ) attributesImpl0 ) ; saxProcessor0 . startElement ( "PU ( k / W , w`5 + . D4A . X3" , "PU ( k / W , w`5 + . D4A . X3" , "PU ( k / W , w`5 + . D4A . X3" , ( Attributes ) attributes2Impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startElement ( String namespaceURI , String sName , / / simple name ( localName ) String qName , / / qualified name Attributes attrs ) throws SAXException { / / String eName = sName ; / / element name / / System . out . println ( qName ) ; currState . processState ( qName ) ; }
void test9 ( ) throws Throwable { SaxProcessor saxProcessor0 = new SaxProcessor ( ( InputStream ) null ) ; State state0 = saxProcessor0 . getParentofCurrentClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getParentofCurrentClass ( ) { if ( parentStateofCurrentClass . empty ( ) ) return null ; return parentStateofCurrentClass . peek ( ) ; }
void test12 ( ) throws Throwable { SaxProcessor saxProcessor0 = new SaxProcessor ( ( InputStream ) null ) ; State state0 = saxProcessor0 . getReturnState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getReturnState ( ) { if ( returnState . empty ( ) ) return null ; return returnState . peek ( ) ; }
