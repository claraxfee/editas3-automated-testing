void test0 ( ) throws Throwable { BlindIcon blindIcon0 = new BlindIcon ( 906 ) ; blindIcon0 . paintIcon ( ( Component ) null , ( Graphics ) null , ( - 2038 ) , ( - 2038 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconHeight ( ) { return length ; }
void test1 ( ) throws Throwable { BlindIcon blindIcon0 = new BlindIcon ( 906 ) ; int int0 = blindIcon0 . getIconHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconHeight ( ) { return length ; }
void test2 ( ) throws Throwable { BlindIcon blindIcon0 = new BlindIcon ( 906 ) ; int int0 = blindIcon0 . getIconWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconWidth ( ) { return length ; }
void test0 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "EB > ES { zSm~2G ! 7K : 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXml ( ) { return Tools . marshall ( mLastStatesMap ) ; }
void test1 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "" ) ; int int0 = lastStateStorageManagement0 . getLastFocussedTab ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastFocussedTab ( ) { return mLastStatesMap . getLastFocusedTab ( ) ; }
void test2 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "" ) ; String string0 = lastStateStorageManagement0 . getXml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXml ( ) { return Tools . marshall ( mLastStatesMap ) ; }
void test3 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > < mindmap_last_state_map_storage > < / mindmap_last_state_map_storage > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastFocussedTab ( ) { return mLastStatesMap . getLastFocusedTab ( ) ; }
void test4 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getLastOpenList ( ) { Vector ret = new Vector ( ) ; for ( Iterator it = mLastStatesMap . getListMindmapLastStateStorageList ( ) . iterator ( ) ; it . hasNext ( ) ; ) { MindmapLastStateStorage store = ( MindmapLastStateStorage ) it . next ( ) ; if ( store . getTabIndex ( ) > = 0 ) { ret . add ( store ) ; } } Collections . sort ( ret , new Comparator ( ) { int compare ( Object arg0 , Object arg1 ) { MindmapLastStateStorage store0 = ( MindmapLastStateStorage ) arg0 ; MindmapLastStateStorage store1 = ( MindmapLastStateStorage ) arg1 ; return store0 . getTabIndex ( ) - store1 . getTabIndex ( ) ; } } ) ; return ret ; }
void test5 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "EB > ES { zSm~2G ! 7K : 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changeOrAdd ( MindmapLastStateStorage pStore ) { boolean found = false ; for ( Iterator it = mLastStatesMap . getListMindmapLastStateStorageList ( ) . iterator ( ) ; it . hasNext ( ) ; ) { MindmapLastStateStorage store = ( MindmapLastStateStorage ) it . next ( ) ; if ( Tools . safeEquals ( pStore . getRestorableName ( ) , store . getRestorableName ( ) ) ) { / / deep copy store . setLastZoom ( pStore . getLastZoom ( ) ) ; store . setLastSelected ( pStore . getLastSelected ( ) ) ; store . setX ( pStore . getX ( ) ) ; store . setY ( pStore . getY ( ) ) ; Vector listCopy = new Vector ( pStore . getListNodeListMemberList ( ) ) ; store . clearNodeListMemberList ( ) ; for ( Iterator it2 = listCopy . iterator ( ) ; it2 . hasNext ( ) ; ) { NodeListMember member = ( NodeListMember ) it2 . next ( ) ; store . addNodeListMember ( member ) ; } found = true ; setLastChanged ( store ) ; break ; } } if ( ! found ) { setLastChanged ( pStore ) ; mLastStatesMap . addMindmapLastStateStorage ( pStore ) ; } / / size limit if ( mLastStatesMap . sizeMindmapLastStateStorageList ( ) > LIST_AMOUNT_LIMIT ) { / / make map from date to object : TreeMap dateToStoreMap = new TreeMap ( ) ; for ( Iterator it = mLastStatesMap . getListMindmapLastStateStorageList ( ) . iterator ( ) ; it . hasNext ( ) ; ) { MindmapLastStateStorage store = ( MindmapLastStateStorage ) it . next ( ) ; dateToStoreMap . put ( Long . valueOf ( - store . getLastChanged ( ) ) , store ) ; } / / clear list mLastStatesMap . clearMindmapLastStateStorageList ( ) ; / / rebuild int counter = 0 ; for ( Iterator it = dateToStoreMap . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Entry entry = ( Entry ) it . next ( ) ; mLastStatesMap . addMindmapLastStateStorage ( ( MindmapLastStateStorage ) entry . getValue ( ) ) ; counter + + ; if ( counter > = LIST_AMOUNT_LIMIT ) { / / drop the rest of the elements . break ; } } } }
void test6 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "" ) ; MindmapLastStateStorage mindmapLastStateStorage0 = new MindmapLastStateStorage ( ) ; lastStateStorageManagement0 . changeOrAdd ( mindmapLastStateStorage0 ) ; MindmapLastStateStorage mindmapLastStateStorage1 = lastStateStorageManagement0 . getStorage ( " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > < mindmap_last_state_map_storage > < / mindmap_last_state_map_storage > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MindmapLastStateStorage getStorage ( String pRestorableName ) { for ( Iterator it = mLastStatesMap . getListMindmapLastStateStorageList ( ) . iterator ( ) ; it . hasNext ( ) ; ) { MindmapLastStateStorage store = ( MindmapLastStateStorage ) it . next ( ) ; if ( Tools . safeEquals ( pRestorableName , store . getRestorableName ( ) ) ) { setLastChanged ( store ) ; return store ; } } return null ; }
void test7 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "" ) ; MindmapLastStateStorage mindmapLastStateStorage0 = new MindmapLastStateStorage ( ) ; lastStateStorageManagement0 . changeOrAdd ( mindmapLastStateStorage0 ) ; MindmapLastStateStorage mindmapLastStateStorage1 = lastStateStorageManagement0 . getStorage ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MindmapLastStateStorage getStorage ( String pRestorableName ) { for ( Iterator it = mLastStatesMap . getListMindmapLastStateStorageList ( ) . iterator ( ) ; it . hasNext ( ) ; ) { MindmapLastStateStorage store = ( MindmapLastStateStorage ) it . next ( ) ; if ( Tools . safeEquals ( pRestorableName , store . getRestorableName ( ) ) ) { setLastChanged ( store ) ; return store ; } } return null ; }
void test8 ( ) throws Throwable { LastStateStorageManagement lastStateStorageManagement0 = new LastStateStorageManagement ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return elements . size ( ) ; }
void test4 ( ) throws Throwable { MapModuleManager mapModuleManager0 = new MapModuleManager ( ( Controller ) null ) ; List < Object > list0 = mapModuleManager0 . getMapModuleVector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getMapModuleVector ( ) { return Collections . unmodifiableList ( mapModuleVector ) ; }
void test6 ( ) throws Throwable { BrowseMode browseMode0 = new BrowseMode ( ) ; MapModuleManager mapModuleManager0 = new MapModuleManager ( ( Controller ) null ) ; mapModuleManager0 . listener . afterMapClose ( ( MapModule ) null , ( Mode ) browseMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test7 ( ) throws Throwable { MapModuleManager mapModuleManager0 = new MapModuleManager ( ( Controller ) null ) ; MapModule mapModule0 = mapModuleManager0 . getModuleGivenModeController ( ( ModeController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MapModule getModuleGivenModeController ( ModeController pModeController ) { MapModule mapModule = null ; for ( Iterator iter = getMapModules ( ) . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry mapEntry = ( Map . Entry ) iter . next ( ) ; mapModule = ( MapModule ) mapEntry . getValue ( ) ; if ( pModeController . equals ( mapModule . getModeController ( ) ) ) { break ; } mapModule = null ; } return mapModule ; }
void test10 ( ) throws Throwable { MapModuleManager mapModuleManager0 = new MapModuleManager ( ( Controller ) null ) ; boolean boolean0 = mapModuleManager0 . tryToChangeToMapModule ( "before - edge" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean tryToChangeToMapModule ( String mapModule ) { if ( mapModule ! = null & & getMapKeys ( ) . contains ( mapModule ) ) { changeToMapModule ( mapModule ) ; return true ; } else { return false ; } }
void test11 ( ) throws Throwable { MapModuleManager mapModuleManager0 = new MapModuleManager ( ( Controller ) null ) ; String string0 = mapModuleManager0 . checkIfFileIsAlreadyOpened ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String checkIfFileIsAlreadyOpened ( URL urlToCheck ) throws MalformedURLException { for ( Iterator iter = mapModuleVector . iterator ( ) ; iter . hasNext ( ) ; ) { MapModule module = ( MapModule ) iter . next ( ) ; if ( module . getModel ( ) ! = null ) { URL moduleUrl = module . getModel ( ) . getURL ( ) ; if ( sameFile ( urlToCheck , moduleUrl ) ) return module . getDisplayName ( ) ; } } return null ; }
void test13 ( ) throws Throwable { FileMode fileMode0 = new FileMode ( ) ; MapModuleManager mapModuleManager0 = new MapModuleManager ( ( Controller ) null ) ; mapModuleManager0 . changeToMapOfMode ( ( Mode ) fileMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { NodeDragListener nodeDragListener0 = new NodeDragListener ( ( Controller ) null ) ; Cursor cursor0 = nodeDragListener0 . getCursorByAction ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Cursor getCursorByAction ( int dragAction ) { switch ( dragAction ) { case DnDConstants . ACTION_COPY : return DragSource . DefaultCopyDrop ; case DnDConstants . ACTION_LINK : return DragSource . DefaultLinkDrop ; default : return DragSource . DefaultMoveDrop ; } }
void test1 ( ) throws Throwable { NodeDragListener nodeDragListener0 = new NodeDragListener ( ( Controller ) null ) ; Cursor cursor0 = nodeDragListener0 . getCursorByAction ( 16711680 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Cursor getCursorByAction ( int dragAction ) { switch ( dragAction ) { case DnDConstants . ACTION_COPY : return DragSource . DefaultCopyDrop ; case DnDConstants . ACTION_LINK : return DragSource . DefaultLinkDrop ; default : return DragSource . DefaultMoveDrop ; } }
void test0 ( ) throws Throwable { FreeMindPopupMenu freeMindPopupMenu0 = new FreeMindPopupMenu ( ) ; StructuredMenuHolder . StructuredMenuListener structuredMenuHolder_StructuredMenuListener0 = new StructuredMenuHolder . StructuredMenuListener ( ) ; freeMindPopupMenu0 . addMenuListener ( ( MenuListener ) structuredMenuHolder_StructuredMenuListener0 ) ; freeMindPopupMenu0 . firePopupMenuCanceled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void firePopupMenuCanceled ( ) { super . firePopupMenuCanceled ( ) ; / / logger . info ( "Popup firePopupMenuCanceled called . " ) ; for ( Iterator i = listeners . iterator ( ) ; i . hasNext ( ) ; ) { MenuListener listener = ( MenuListener ) i . next ( ) ; listener . menuCanceled ( null ) ; } }
void test1 ( ) throws Throwable { FreeMindPopupMenu freeMindPopupMenu0 = new FreeMindPopupMenu ( ) ; StructuredMenuHolder . StructuredMenuListener structuredMenuHolder_StructuredMenuListener0 = new StructuredMenuHolder . StructuredMenuListener ( ) ; freeMindPopupMenu0 . removeMenuListener ( ( MenuListener ) structuredMenuHolder_StructuredMenuListener0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeMenuListener ( MenuListener listener ) { listeners . remove ( listener ) ; }
void test2 ( ) throws Throwable { FreeMindPopupMenu freeMindPopupMenu0 = new FreeMindPopupMenu ( ) ; StructuredMenuHolder . StructuredMenuListener structuredMenuHolder_StructuredMenuListener0 = new StructuredMenuHolder . StructuredMenuListener ( ) ; freeMindPopupMenu0 . addMenuListener ( ( MenuListener ) structuredMenuHolder_StructuredMenuListener0 ) ; freeMindPopupMenu0 . firePopupMenuWillBecomeVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void firePopupMenuWillBecomeVisible ( ) { super . firePopupMenuWillBecomeVisible ( ) ; logger . fine ( "Popup firePopupMenuWillBecomeVisible called . " ) ; for ( Iterator i = listeners . iterator ( ) ; i . hasNext ( ) ; ) { MenuListener listener = ( MenuListener ) i . next ( ) ; listener . menuSelected ( null ) ; } }
void test3 ( ) throws Throwable { FreeMindPopupMenu freeMindPopupMenu0 = new FreeMindPopupMenu ( ) ; freeMindPopupMenu0 . firePopupMenuCanceled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void firePopupMenuCanceled ( ) { super . firePopupMenuCanceled ( ) ; / / logger . info ( "Popup firePopupMenuCanceled called . " ) ; for ( Iterator i = listeners . iterator ( ) ; i . hasNext ( ) ; ) { MenuListener listener = ( MenuListener ) i . next ( ) ; listener . menuCanceled ( null ) ; } }
void test4 ( ) throws Throwable { FreeMindPopupMenu freeMindPopupMenu0 = new FreeMindPopupMenu ( ) ; StructuredMenuHolder . StructuredMenuListener structuredMenuHolder_StructuredMenuListener0 = new StructuredMenuHolder . StructuredMenuListener ( ) ; freeMindPopupMenu0 . addMenuListener ( ( MenuListener ) structuredMenuHolder_StructuredMenuListener0 ) ; freeMindPopupMenu0 . firePopupMenuWillBecomeInvisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void firePopupMenuWillBecomeInvisible ( ) { super . firePopupMenuWillBecomeInvisible ( ) ; / / logger . info ( "Popup firePopupMenuWillBecomeInvisible called . " ) ; for ( Iterator i = listeners . iterator ( ) ; i . hasNext ( ) ; ) { MenuListener listener = ( MenuListener ) i . next ( ) ; listener . menuDeselected ( null ) ; } }
void test0 ( ) throws Throwable { ColorSwatch colorSwatch0 = new ColorSwatch ( ) ; int int0 = colorSwatch0 . getIconWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconWidth ( ) { return length ; }
void test1 ( ) throws Throwable { ColorSwatch colorSwatch0 = new ColorSwatch ( ) ; int int0 = colorSwatch0 . getIconHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconHeight ( ) { return length ; }
void test2 ( ) throws Throwable { Color color0 = Color . MAGENTA ; ColorSwatch colorSwatch0 = new ColorSwatch ( color0 ) ; Color color1 = colorSwatch0 . getColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( ) { return color ; }
void test0 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( "" , "" , "" , "" , " | * x & 2eW { E | MP * 8hZ" , "" , ( List ) linkedList0 , ( List ) linkedList0 ) ; Clipboard clipboard0 = new Clipboard ( "" ) ; StringSelection stringSelection0 = new StringSelection ( "" ) ; mindMapNodesSelection0 . lostOwnership ( clipboard0 , ( Transferable ) stringSelection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( List ) linkedList0 , ( List ) linkedList0 ) ; DataFlavor [ ] dataFlavorArray0 = mindMapNodesSelection0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return new DataFlavor [ ] { DataFlavor . imageFlavor , DataFlavor . stringFlavor , mindMapNodesFlavor , rtfFlavor , htmlFlavor , dropActionFlavor , copyNodeIdsFlavor } ; }
void test3 ( ) throws Throwable { DataFlavor dataFlavor0 = MindMapNodesSelection . htmlFlavor ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , ( List ) linkedList0 , ( List ) linkedList0 ) ; String string0 = ( String ) mindMapNodesSelection0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException { if ( flavor . equals ( DataFlavor . imageFlavor ) ) { return imageContent ; } if ( flavor . equals ( DataFlavor . stringFlavor ) ) { return stringContent ; } if ( flavor . equals ( mindMapNodesFlavor ) ) { return nodesContent ; } if ( flavor . equals ( dropActionFlavor ) ) { return dropActionContent ; } if ( flavor . equals ( rtfFlavor ) ) { byte [ ] byteArray = rtfContent . getBytes ( ) ; / / for ( int i = 0 ; i < byteArray . length ; + + i ) { / / System . out . println ( byteArray [ i ] ) ; } return new ByteArrayInputStream ( byteArray ) ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return htmlContent ; } if ( flavor . equals ( fileListFlavor ) ) { return fileList ; } if ( flavor . equals ( copyNodeIdsFlavor ) ) { return nodeIdsContent ; } throw new UnsupportedFlavorException ( flavor ) ; }
void test4 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , " ) pplicationFfreeoind - node - idsL class = java . util . List" , ( List ) linkedList0 , ( List ) linkedList0 ) ; LinkedList < Object > linkedList1 = ( LinkedList < Object > ) mindMapNodesSelection0 . getTransferData ( MindMapNodesSelection . fileListFlavor ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException { if ( flavor . equals ( DataFlavor . imageFlavor ) ) { return imageContent ; } if ( flavor . equals ( DataFlavor . stringFlavor ) ) { return stringContent ; } if ( flavor . equals ( mindMapNodesFlavor ) ) { return nodesContent ; } if ( flavor . equals ( dropActionFlavor ) ) { return dropActionContent ; } if ( flavor . equals ( rtfFlavor ) ) { byte [ ] byteArray = rtfContent . getBytes ( ) ; / / for ( int i = 0 ; i < byteArray . length ; + + i ) { / / System . out . println ( byteArray [ i ] ) ; } return new ByteArrayInputStream ( byteArray ) ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return htmlContent ; } if ( flavor . equals ( fileListFlavor ) ) { return fileList ; } if ( flavor . equals ( copyNodeIdsFlavor ) ) { return nodeIdsContent ; } throw new UnsupportedFlavorException ( flavor ) ; }
void test5 ( ) throws Throwable { DataFlavor dataFlavor0 = MindMapNodesSelection . dropActionFlavor ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( "" , "" , "" , "" , "" , "" , ( List ) linkedList0 , ( List ) linkedList0 ) ; boolean boolean0 = mindMapNodesSelection0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { if ( flavor . equals ( DataFlavor . imageFlavor ) & & imageContent ! = null ) { return true ; } if ( flavor . equals ( DataFlavor . stringFlavor ) & & stringContent ! = null ) { return true ; } if ( flavor . equals ( mindMapNodesFlavor ) & & nodesContent ! = null ) { return true ; } if ( flavor . equals ( rtfFlavor ) & & rtfContent ! = null ) { return true ; } if ( flavor . equals ( dropActionFlavor ) & & dropActionContent ! = null ) { return true ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return true ; } if ( flavor . equals ( fileListFlavor ) & & ( fileList ! = null ) & & fileList . size ( ) > 0 ) { return true ; } if ( flavor . equals ( copyNodeIdsFlavor ) & & nodeIdsContent ! = null ) { return true ; } return false ; }
void test6 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( "% ( V$d K_ ] Cq ; '" , "% ( V$d K_ ] Cq ; '" , "% ( V$d K_ ] Cq ; '" , "% ( V$d K_ ] Cq ; '" , "% ( V$d K_ ] Cq ; '" , "% ( V$d K_ ] Cq ; '" , ( List ) linkedList0 , ( List ) linkedList0 ) ; boolean boolean0 = mindMapNodesSelection0 . isDataFlavorSupported ( mindMapNodesSelection0 . mindMapNodesFlavor ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { if ( flavor . equals ( DataFlavor . imageFlavor ) & & imageContent ! = null ) { return true ; } if ( flavor . equals ( DataFlavor . stringFlavor ) & & stringContent ! = null ) { return true ; } if ( flavor . equals ( mindMapNodesFlavor ) & & nodesContent ! = null ) { return true ; } if ( flavor . equals ( rtfFlavor ) & & rtfContent ! = null ) { return true ; } if ( flavor . equals ( dropActionFlavor ) & & dropActionContent ! = null ) { return true ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return true ; } if ( flavor . equals ( fileListFlavor ) & & ( fileList ! = null ) & & fileList . size ( ) > 0 ) { return true ; } if ( flavor . equals ( copyNodeIdsFlavor ) & & nodeIdsContent ! = null ) { return true ; } return false ; }
void test7 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( "" , "" , "" , "" , " | * x & 2eW { E | MP * 8hZ" , "" , ( List ) linkedList0 , ( List ) linkedList0 ) ; DataFlavor dataFlavor0 = MindMapNodesSelection . fileListFlavor ; boolean boolean0 = mindMapNodesSelection0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { if ( flavor . equals ( DataFlavor . imageFlavor ) & & imageContent ! = null ) { return true ; } if ( flavor . equals ( DataFlavor . stringFlavor ) & & stringContent ! = null ) { return true ; } if ( flavor . equals ( mindMapNodesFlavor ) & & nodesContent ! = null ) { return true ; } if ( flavor . equals ( rtfFlavor ) & & rtfContent ! = null ) { return true ; } if ( flavor . equals ( dropActionFlavor ) & & dropActionContent ! = null ) { return true ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return true ; } if ( flavor . equals ( fileListFlavor ) & & ( fileList ! = null ) & & fileList . size ( ) > 0 ) { return true ; } if ( flavor . equals ( copyNodeIdsFlavor ) & & nodeIdsContent ! = null ) { return true ; } return false ; }
void test8 ( ) throws Throwable { DataFlavor dataFlavor0 = MindMapNodesSelection . copyNodeIdsFlavor ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( List ) linkedList0 , ( List ) linkedList0 ) ; boolean boolean0 = mindMapNodesSelection0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { if ( flavor . equals ( DataFlavor . imageFlavor ) & & imageContent ! = null ) { return true ; } if ( flavor . equals ( DataFlavor . stringFlavor ) & & stringContent ! = null ) { return true ; } if ( flavor . equals ( mindMapNodesFlavor ) & & nodesContent ! = null ) { return true ; } if ( flavor . equals ( rtfFlavor ) & & rtfContent ! = null ) { return true ; } if ( flavor . equals ( dropActionFlavor ) & & dropActionContent ! = null ) { return true ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return true ; } if ( flavor . equals ( fileListFlavor ) & & ( fileList ! = null ) & & fileList . size ( ) > 0 ) { return true ; } if ( flavor . equals ( copyNodeIdsFlavor ) & & nodeIdsContent ! = null ) { return true ; } return false ; }
void test9 ( ) throws Throwable { MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( "" , "" , "" , "" , "" , "" , ( List ) null , ( List ) null ) ; DataFlavor dataFlavor0 = new DataFlavor ( ) ; boolean boolean0 = mindMapNodesSelection0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { if ( flavor . equals ( DataFlavor . imageFlavor ) & & imageContent ! = null ) { return true ; } if ( flavor . equals ( DataFlavor . stringFlavor ) & & stringContent ! = null ) { return true ; } if ( flavor . equals ( mindMapNodesFlavor ) & & nodesContent ! = null ) { return true ; } if ( flavor . equals ( rtfFlavor ) & & rtfContent ! = null ) { return true ; } if ( flavor . equals ( dropActionFlavor ) & & dropActionContent ! = null ) { return true ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return true ; } if ( flavor . equals ( fileListFlavor ) & & ( fileList ! = null ) & & fileList . size ( ) > 0 ) { return true ; } if ( flavor . equals ( copyNodeIdsFlavor ) & & nodeIdsContent ! = null ) { return true ; } return false ; }
void test10 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection ( "" , "" , "" , "" , " | * x & 2eW { E | MP * 8hZ" , "" , ( List ) linkedList0 , ( List ) linkedList0 ) ; linkedList0 . add ( " | * x & 2eW { E | MP * 8hZ" ) ; boolean boolean0 = mindMapNodesSelection0 . isDataFlavorSupported ( mindMapNodesSelection0 . fileListFlavor ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { if ( flavor . equals ( DataFlavor . imageFlavor ) & & imageContent ! = null ) { return true ; } if ( flavor . equals ( DataFlavor . stringFlavor ) & & stringContent ! = null ) { return true ; } if ( flavor . equals ( mindMapNodesFlavor ) & & nodesContent ! = null ) { return true ; } if ( flavor . equals ( rtfFlavor ) & & rtfContent ! = null ) { return true ; } if ( flavor . equals ( dropActionFlavor ) & & dropActionContent ! = null ) { return true ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return true ; } if ( flavor . equals ( fileListFlavor ) & & ( fileList ! = null ) & & fileList . size ( ) > 0 ) { return true ; } if ( flavor . equals ( copyNodeIdsFlavor ) & & nodeIdsContent ! = null ) { return true ; } return false ; }
void test1 ( ) throws Throwable { Collection < Object > collection0 = Controller . getPropertyChangeListeners ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getPropertyChangeListeners ( ) { return Collections . unmodifiableCollection ( propertyChangeListeners ) ; }
void test6 ( ) throws Throwable { Controller . Closer controller_Closer0 = new Controller . Closer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Controller ( FreeMindMain frame ) { this . frame = frame ; if ( logger = = null ) { logger = frame . getLogger ( this . getClass ( ) . getName ( ) ) ; } }
void test0 ( ) throws Throwable { FreeMindToolBar freeMindToolBar0 = new FreeMindToolBar ( 0 ) ; DefaultEditorKit . InsertBreakAction defaultEditorKit_InsertBreakAction0 = new DefaultEditorKit . InsertBreakAction ( ) ; freeMindToolBar0 . add ( ( Action ) defaultEditorKit_InsertBreakAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton add ( Action arg0 ) { Object actionName = arg0 . getValue ( Action . NAME ) ; arg0 . putValue ( Action . SHORT_DESCRIPTION , Tools . removeMnemonic ( actionName . toString ( ) ) ) ; JButton returnValue = super . add ( arg0 ) ; returnValue . setName ( actionName . toString ( ) ) ; returnValue . setText ( "" ) ; returnValue . setMargin ( nullInsets ) ; returnValue . setFocusable ( false ) ; / / fc , 20 . 6 . 2004 : try to make the toolbar looking good under Mac OS X . if ( Tools . isMacOsX ( ) ) { returnValue . setBorderPainted ( false ) ; } returnValue . setContentAreaFilled ( false ) ; return returnValue ; }
void test1 ( ) throws Throwable { FreeMindToolBar freeMindToolBar0 = new FreeMindToolBar ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FreeMindToolBar ( ) { this ( "" , JToolBar . HORIZONTAL ) ; }
void test2 ( ) throws Throwable { FreeMindToolBar freeMindToolBar0 = new FreeMindToolBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FreeMindToolBar ( ) { this ( "" , JToolBar . HORIZONTAL ) ; }
void test6 ( ) throws Throwable { MapMouseMotionListener mapMouseMotionListener0 = new MapMouseMotionListener ( ( Controller ) null ) ; JMenuItem jMenuItem0 = new JMenuItem ( ) ; MenuElement [ ] menuElementArray0 = new MenuElement [ 3 ] ; MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager ( ) ; MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent ( ( Component ) jMenuItem0 , 195 , ( long ) 195 , 209 , ( - 1 ) , 0 , ( - 96 ) , true , menuElementArray0 , menuSelectionManager0 ) ; mapMouseMotionListener0 . mouseDragged ( ( MouseEvent ) menuDragMouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseDragged ( MouseEvent e ) { if ( mListener ! = null ) mListener . mouseDragged ( e ) ; }
void test7 ( ) throws Throwable { MapMouseMotionListener mapMouseMotionListener0 = new MapMouseMotionListener ( ( Controller ) null ) ; JMenuItem jMenuItem0 = new JMenuItem ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jMenuItem0 , 0 , 1945L , 0 , 0 , 353 , 0 , 0 , 353 , false , ( - 96 ) , 195 , 195 ) ; mapMouseMotionListener0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { if ( mListener ! = null ) mListener . mousePressed ( e ) ; }
void test0 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; boolean boolean0 = sortedMapListModel0 . contains ( ( Object ) "lighten" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object element ) { return model . contains ( element ) ; }
void test2 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . add ( ( Object ) "darkkhaki" ) ; int int0 = sortedMapListModel0 . getIndexOf ( ( Object ) "darkkhaki" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test6 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . add ( ( Object ) "font - variant" ) ; sortedMapListModel0 . add ( ( Object ) "font - variant" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test7 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test8 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . replace ( ( Object ) "x - large" , ( Object ) "direction" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test9 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . add ( ( Object ) "font - variant" ) ; int int0 = sortedMapListModel0 . getIndexOf ( ( Object ) "feDiffuseLighting" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test10 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . replace ( ( Object ) "font - variant" , ( Object ) "font - variant" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test11 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . add ( ( Object ) "darkkhaki" ) ; sortedMapListModel0 . replace ( ( Object ) "stroke - linecap" , ( Object ) "darkkhaki" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test12 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . remove ( ( Object ) "stop - opacity" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test13 ( ) throws Throwable { SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . add ( ( Object ) "darkkhaki" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test0 ( ) throws Throwable { SortedComboBoxModel sortedComboBoxModel0 = new SortedComboBoxModel ( ) ; JComboBox jComboBox0 = new JComboBox ( ( ComboBoxModel ) sortedComboBoxModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { SortedComboBoxModel sortedComboBoxModel0 = new SortedComboBoxModel ( ) ; sortedComboBoxModel0 . setSelectedItem ( ( Object ) "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test0 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; int int0 = sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test1 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; sortedMapVector0 . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test2 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test3 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; int int0 = sortedMapVector0 . capacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test7 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , ( Object ) "Zl" ) ; sortedMapVector0 . getValue ( ( Comparable ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test8 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; boolean boolean0 = sortedMapVector0 . containsKey ( ( Comparable ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test9 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , ( Object ) "Zl" ) ; int int0 = sortedMapVector0 . indexOf ( ( Comparable ) ( - 467 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test10 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . add ( ( Comparable ) ( - 15 ) , ( Object ) ( - 1 ) ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; sortedMapVector0 . add ( ( Comparable ) 1276 , ( Object ) "2353" ) ; sortedMapVector0 . add ( ( Comparable ) ( - 1 ) , ( Object ) 2 ) ; boolean boolean0 = sortedMapVector0 . containsKey ( ( Comparable ) ( - 15 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test11 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . add ( ( Comparable ) ( - 15 ) , ( Object ) ( - 1 ) ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; sortedMapVector0 . add ( ( Comparable ) 1276 , ( Object ) "2353" ) ; sortedMapVector0 . add ( ( Comparable ) ( - 1 ) , ( Object ) 2 ) ; boolean boolean0 = sortedMapVector0 . remove ( ( Comparable ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test12 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . add ( ( Comparable ) ( - 15 ) , ( Object ) ( - 1 ) ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; sortedMapVector0 . add ( ( Comparable ) 1276 , ( Object ) "2353" ) ; int int0 = sortedMapVector0 . indexOf ( ( Comparable ) 1259 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test13 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; sortedMapVector0 . add ( ( Comparable ) ( - 15 ) , ( Object ) ( - 1 ) ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; sortedMapVector0 . add ( ( Comparable ) 1276 , ( Object ) "2353" ) ; int int0 = sortedMapVector0 . indexOf ( ( Comparable ) 1276 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test14 ( ) throws Throwable { SortedMapVector sortedMapVector0 = new SortedMapVector ( ) ; Object object0 = new Object ( ) ; sortedMapVector0 . add ( ( Comparable ) 0 , object0 ) ; boolean boolean0 = sortedMapVector0 . remove ( ( Comparable ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return elements . capacity ( ) ; }
void test0 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedMapListModel0 ) ; extendedComboBoxModel0 . addSortedElement ( ( Object ) "z" ) ; sortedMapListModel0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test1 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; extendedComboBoxModel0 . removeElement ( ( Object ) "T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test2 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; extendedComboBoxModel0 . insertElementAt ( ( Object ) "mediumpurple" , 1498 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOf ( Object o ) { Iterator i = iterator ( ) ; int count = - 1 ; while ( i . hasNext ( ) ) { count + + ; if ( i . next ( ) . equals ( o ) ) return count ; } return - 1 ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test4 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedMapListModel0 ) ; SortedComboBoxModel sortedComboBoxModel0 = new SortedComboBoxModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedComboBoxModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test5 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; SortedComboBoxModel sortedComboBoxModel0 = new SortedComboBoxModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedComboBoxModel0 ) ; sortedComboBoxModel0 . add ( ( Object ) null ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedMapListModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test6 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; sortedMapListModel0 . add ( ( Object ) null ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedMapListModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test7 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test8 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; Object object0 = extendedComboBoxModel0 . getElementAt ( 1385 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getElementAt ( int index ) { return model . toArray ( ) [ index ] ; }
void test10 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; extendedComboBoxModel0 . removeAllElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test11 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedMapListModel0 ) ; extendedComboBoxModel0 . removeAllElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test12 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; extendedComboBoxModel0 . removeElementAt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test13 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; extendedComboBoxModel0 . addSortedElement ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return model . size ( ) ; }
void test14 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; int int0 = extendedComboBoxModel0 . getIndexOf ( ( Object ) "over" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOf ( Object o ) { Iterator i = iterator ( ) ; int count = - 1 ; while ( i . hasNext ( ) ) { count + + ; if ( i . next ( ) . equals ( o ) ) return count ; } return - 1 ; }
void test15 ( ) throws Throwable { ExtendedComboBoxModel extendedComboBoxModel0 = new ExtendedComboBoxModel ( ) ; SortedMapListModel sortedMapListModel0 = new SortedMapListModel ( ) ; extendedComboBoxModel0 . setExtensionList ( ( SortedListModel ) sortedMapListModel0 ) ; int int0 = extendedComboBoxModel0 . getIndexOf ( ( Object ) "over" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOf ( Object o ) { Iterator i = iterator ( ) ; int count = - 1 ; while ( i . hasNext ( ) ) { count + + ; if ( i . next ( ) . equals ( o ) ) return count ; } return - 1 ; }
void test0 ( ) throws Throwable { SelectedViewCondition selectedViewCondition0 = new SelectedViewCondition ( ) ; selectedViewCondition0 . save ( ( XMLElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { SelectedViewCondition selectedViewCondition0 = new SelectedViewCondition ( ) ; String string0 = selectedViewCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { SelectedViewCondition selectedViewCondition0 = new SelectedViewCondition ( ) ; JCondition jCondition0 = ( JCondition ) selectedViewCondition0 . getListCellRendererComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFocusTraversalKeysEnabled ( ) { return false ; }
void test3 ( ) throws Throwable { SelectedViewCondition selectedViewCondition0 = ( SelectedViewCondition ) SelectedViewCondition . CreateCondition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { JCondition jCondition0 = new JCondition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { AttributeExistsCondition attributeExistsCondition0 = new AttributeExistsCondition ( "2ePD" ) ; XMLElement xMLElement0 = new XMLElement ( true ) ; attributeExistsCondition0 . save ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countChildren ( ) { return this . children . size ( ) ; }
void test1 ( ) throws Throwable { AttributeNotExistsCondition attributeNotExistsCondition0 = new AttributeNotExistsCondition ( "# ; 8 + 8" ) ; JCondition jCondition0 = ( JCondition ) attributeNotExistsCondition0 . getListCellRendererComponent ( ) ; JCondition jCondition1 = ( JCondition ) attributeNotExistsCondition0 . getListCellRendererComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JComponent getListCellRendererComponent ( ) { JCondition component = new JCondition ( ) ; component . add ( new JLabel ( " ( " ) ) ; Condition cond = ( Condition ) conditions [ 0 ] ; JComponent rendererComponent = cond . getListCellRendererComponent ( ) ; rendererComponent . setOpaque ( false ) ; component . add ( rendererComponent ) ; int i ; for ( i = 1 ; i < conditions . length ; i + + ) { String and = Tools . removeMnemonic ( Resources . getInstance ( ) . getResourceString ( "filter_and" ) ) ; String text = ' ' + and + ' ' ; component . add ( new JLabel ( text ) ) ; cond = ( Condition ) conditions [ i ] ; rendererComponent = cond . getListCellRendererComponent ( ) ; rendererComponent . setOpaque ( false ) ; component . add ( rendererComponent ) ; } component . add ( new JLabel ( " ) " ) ) ; return component ; }
void test2 ( ) throws Throwable { AttributeExistsCondition attributeExistsCondition0 = new AttributeExistsCondition ( "N : $x [ D [ JzE4wBG , " ) ; attributeExistsCondition0 . getListCellRendererComponent ( ) ; String string0 = attributeExistsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { NoFilteringCondition noFilteringCondition0 = ( NoFilteringCondition ) NoFilteringCondition . createCondition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( false ) ; NodeCompareCondition nodeCompareCondition0 = ( NodeCompareCondition ) NodeCompareCondition . load ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createDesctiption ( ) { String nodeCondition = Resources . getInstance ( ) . getResourceString ( ConditionFactory . FILTER_NODE ) ; return super . createDescription ( nodeCondition , comparationResult , succeed ) ; }
void test1 ( ) throws Throwable { NodeCompareCondition nodeCompareCondition0 = new NodeCompareCondition ( "" , false , ( - 1 ) , false ) ; XMLElement xMLElement0 = new XMLElement ( false ) ; nodeCompareCondition0 . save ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createDesctiption ( ) { String nodeCondition = Resources . getInstance ( ) . getResourceString ( ConditionFactory . FILTER_NODE ) ; return super . createDescription ( nodeCondition , comparationResult , succeed ) ; }
void test2 ( ) throws Throwable { NodeCompareCondition nodeCompareCondition0 = new NodeCompareCondition ( "" , false , ( - 1 ) , false ) ; JCondition jCondition0 = ( JCondition ) nodeCompareCondition0 . getListCellRendererComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( true ) ; IgnoreCaseNodeContainsCondition ignoreCaseNodeContainsCondition0 = new IgnoreCaseNodeContainsCondition ( "" ) ; ignoreCaseNodeContainsCondition0 . save ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { IgnoreCaseNodeContainsCondition ignoreCaseNodeContainsCondition0 = new IgnoreCaseNodeContainsCondition ( "" ) ; ignoreCaseNodeContainsCondition0 . getListCellRendererComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createDesctiption ( ) { String nodeCondition = Resources . getInstance ( ) . getResourceString ( ConditionFactory . FILTER_NODE ) ; return super . createDescription ( nodeCondition , comparationResult , succeed ) ; }
void test0 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; NodeContainsCondition nodeContainsCondition0 = ( NodeContainsCondition ) NodeContainsCondition . load ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createDesctiption ( ) { String nodeCondition = Resources . getInstance ( ) . getResourceString ( ConditionFactory . FILTER_NODE ) ; return super . createDescription ( nodeCondition , comparationResult , succeed ) ; }
void test1 ( ) throws Throwable { NodeContainsCondition nodeContainsCondition0 = new NodeContainsCondition ( ( String ) null ) ; String string0 = nodeContainsCondition0 . createDesctiption ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createDesctiption ( ) { String nodeCondition = Resources . getInstance ( ) . getResourceString ( ConditionFactory . FILTER_NODE ) ; return super . createDescription ( nodeCondition , comparationResult , succeed ) ; }
void test0 ( ) throws Throwable { Base64Coding base64Coding0 = new Base64Coding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { byte [ ] byteArray0 = Base64Coding . decode64 ( "I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode64 ( String s ) { ByteArrayOutputStream bs = new ByteArrayOutputStream ( ( s . length ( ) / 4 ) * 3 ) ; char [ ] c = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , c , 0 ) ; / / Convert from base64 chars int endchar = - 1 ; for ( int j = 0 ; j < c . length & & endchar = = - 1 ; j + + ) { if ( c [ j ] > = 'A' & & c [ j ] < = 'Z' ) { c [ j ] - = 'A' ; } else if ( c [ j ] > = 'a' & & c [ j ] < = 'z' ) { c [ j ] = ( char ) ( c [ j ] + 26 - 'a' ) ; } else if ( c [ j ] > = '0' & & c [ j ] < = '9' ) { c [ j ] = ( char ) ( c [ j ] + 52 - '0' ) ; } else if ( c [ j ] = = ' + ' ) { c [ j ] = 62 ; } else if ( c [ j ] = = ' / ' ) { c [ j ] = 63 ; } else if ( c [ j ] = = ' = ' ) { endchar = j ; } else { logger . severe ( "Found illegal character in base64 coding : '" + c [ j ] + "'" ) ; return null ; / / encoding exception } } int remaining = endchar = = - 1 ? c . length : endchar ; int i = 0 ; while ( remaining > 0 ) { / / Four input chars ( 6 bits ) are decoded as three bytes as / / 000000 001111 111122 222222 byte b0 = ( byte ) ( c [ i ] < < 2 ) ; if ( remaining > = 2 ) { b0 + = ( c [ i + 1 ] & 0x30 ) > > 4 ; } bs . write ( b0 ) ; if ( remaining > = 3 ) { byte b1 = ( byte ) ( ( c [ i + 1 ] & 0x0F ) < < 4 ) ; b1 + = ( byte ) ( ( c [ i + 2 ] & 0x3C ) > > 2 ) ; bs . write ( b1 ) ; } if ( remaining > = 4 ) { byte b2 = ( byte ) ( ( c [ i + 2 ] & 0x03 ) < < 6 ) ; b2 + = c [ i + 3 ] ; bs . write ( b2 ) ; } i + = 4 ; remaining - = 4 ; } return bs . toByteArray ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = Base64Coding . decode64 ( "AAAAAA = = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode64 ( String s ) { ByteArrayOutputStream bs = new ByteArrayOutputStream ( ( s . length ( ) / 4 ) * 3 ) ; char [ ] c = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , c , 0 ) ; / / Convert from base64 chars int endchar = - 1 ; for ( int j = 0 ; j < c . length & & endchar = = - 1 ; j + + ) { if ( c [ j ] > = 'A' & & c [ j ] < = 'Z' ) { c [ j ] - = 'A' ; } else if ( c [ j ] > = 'a' & & c [ j ] < = 'z' ) { c [ j ] = ( char ) ( c [ j ] + 26 - 'a' ) ; } else if ( c [ j ] > = '0' & & c [ j ] < = '9' ) { c [ j ] = ( char ) ( c [ j ] + 52 - '0' ) ; } else if ( c [ j ] = = ' + ' ) { c [ j ] = 62 ; } else if ( c [ j ] = = ' / ' ) { c [ j ] = 63 ; } else if ( c [ j ] = = ' = ' ) { endchar = j ; } else { logger . severe ( "Found illegal character in base64 coding : '" + c [ j ] + "'" ) ; return null ; / / encoding exception } } int remaining = endchar = = - 1 ? c . length : endchar ; int i = 0 ; while ( remaining > 0 ) { / / Four input chars ( 6 bits ) are decoded as three bytes as / / 000000 001111 111122 222222 byte b0 = ( byte ) ( c [ i ] < < 2 ) ; if ( remaining > = 2 ) { b0 + = ( c [ i + 1 ] & 0x30 ) > > 4 ; } bs . write ( b0 ) ; if ( remaining > = 3 ) { byte b1 = ( byte ) ( ( c [ i + 1 ] & 0x0F ) < < 4 ) ; b1 + = ( byte ) ( ( c [ i + 2 ] & 0x3C ) > > 2 ) ; bs . write ( b1 ) ; } if ( remaining > = 4 ) { byte b2 = ( byte ) ( ( c [ i + 2 ] & 0x03 ) < < 6 ) ; b2 + = c [ i + 3 ] ; bs . write ( b2 ) ; } i + = 4 ; remaining - = 4 ; } return bs . toByteArray ( ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = Base64Coding . decode64 ( " + FYd ] ~ ) K { r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode64 ( String s ) { ByteArrayOutputStream bs = new ByteArrayOutputStream ( ( s . length ( ) / 4 ) * 3 ) ; char [ ] c = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , c , 0 ) ; / / Convert from base64 chars int endchar = - 1 ; for ( int j = 0 ; j < c . length & & endchar = = - 1 ; j + + ) { if ( c [ j ] > = 'A' & & c [ j ] < = 'Z' ) { c [ j ] - = 'A' ; } else if ( c [ j ] > = 'a' & & c [ j ] < = 'z' ) { c [ j ] = ( char ) ( c [ j ] + 26 - 'a' ) ; } else if ( c [ j ] > = '0' & & c [ j ] < = '9' ) { c [ j ] = ( char ) ( c [ j ] + 52 - '0' ) ; } else if ( c [ j ] = = ' + ' ) { c [ j ] = 62 ; } else if ( c [ j ] = = ' / ' ) { c [ j ] = 63 ; } else if ( c [ j ] = = ' = ' ) { endchar = j ; } else { logger . severe ( "Found illegal character in base64 coding : '" + c [ j ] + "'" ) ; return null ; / / encoding exception } } int remaining = endchar = = - 1 ? c . length : endchar ; int i = 0 ; while ( remaining > 0 ) { / / Four input chars ( 6 bits ) are decoded as three bytes as / / 000000 001111 111122 222222 byte b0 = ( byte ) ( c [ i ] < < 2 ) ; if ( remaining > = 2 ) { b0 + = ( c [ i + 1 ] & 0x30 ) > > 4 ; } bs . write ( b0 ) ; if ( remaining > = 3 ) { byte b1 = ( byte ) ( ( c [ i + 1 ] & 0x0F ) < < 4 ) ; b1 + = ( byte ) ( ( c [ i + 2 ] & 0x3C ) > > 2 ) ; bs . write ( b1 ) ; } if ( remaining > = 4 ) { byte b2 = ( byte ) ( ( c [ i + 2 ] & 0x03 ) < < 6 ) ; b2 + = c [ i + 3 ] ; bs . write ( b2 ) ; } i + = 4 ; remaining - = 4 ; } return bs . toByteArray ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = Base64Coding . decode64 ( "~7s8hSDs } K ; 1R - \" ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode64 ( String s ) { ByteArrayOutputStream bs = new ByteArrayOutputStream ( ( s . length ( ) / 4 ) * 3 ) ; char [ ] c = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , c , 0 ) ; / / Convert from base64 chars int endchar = - 1 ; for ( int j = 0 ; j < c . length & & endchar = = - 1 ; j + + ) { if ( c [ j ] > = 'A' & & c [ j ] < = 'Z' ) { c [ j ] - = 'A' ; } else if ( c [ j ] > = 'a' & & c [ j ] < = 'z' ) { c [ j ] = ( char ) ( c [ j ] + 26 - 'a' ) ; } else if ( c [ j ] > = '0' & & c [ j ] < = '9' ) { c [ j ] = ( char ) ( c [ j ] + 52 - '0' ) ; } else if ( c [ j ] = = ' + ' ) { c [ j ] = 62 ; } else if ( c [ j ] = = ' / ' ) { c [ j ] = 63 ; } else if ( c [ j ] = = ' = ' ) { endchar = j ; } else { logger . severe ( "Found illegal character in base64 coding : '" + c [ j ] + "'" ) ; return null ; / / encoding exception } } int remaining = endchar = = - 1 ? c . length : endchar ; int i = 0 ; while ( remaining > 0 ) { / / Four input chars ( 6 bits ) are decoded as three bytes as / / 000000 001111 111122 222222 byte b0 = ( byte ) ( c [ i ] < < 2 ) ; if ( remaining > = 2 ) { b0 + = ( c [ i + 1 ] & 0x30 ) > > 4 ; } bs . write ( b0 ) ; if ( remaining > = 3 ) { byte b1 = ( byte ) ( ( c [ i + 1 ] & 0x0F ) < < 4 ) ; b1 + = ( byte ) ( ( c [ i + 2 ] & 0x3C ) > > 2 ) ; bs . write ( b1 ) ; } if ( remaining > = 4 ) { byte b2 = ( byte ) ( ( c [ i + 2 ] & 0x03 ) < < 6 ) ; b2 + = c [ i + 3 ] ; bs . write ( b2 ) ; } i + = 4 ; remaining - = 4 ; } return bs . toByteArray ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = Base64Coding . decode64 ( "0@P ) nxut : ) CQtDl ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode64 ( String s ) { ByteArrayOutputStream bs = new ByteArrayOutputStream ( ( s . length ( ) / 4 ) * 3 ) ; char [ ] c = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , c , 0 ) ; / / Convert from base64 chars int endchar = - 1 ; for ( int j = 0 ; j < c . length & & endchar = = - 1 ; j + + ) { if ( c [ j ] > = 'A' & & c [ j ] < = 'Z' ) { c [ j ] - = 'A' ; } else if ( c [ j ] > = 'a' & & c [ j ] < = 'z' ) { c [ j ] = ( char ) ( c [ j ] + 26 - 'a' ) ; } else if ( c [ j ] > = '0' & & c [ j ] < = '9' ) { c [ j ] = ( char ) ( c [ j ] + 52 - '0' ) ; } else if ( c [ j ] = = ' + ' ) { c [ j ] = 62 ; } else if ( c [ j ] = = ' / ' ) { c [ j ] = 63 ; } else if ( c [ j ] = = ' = ' ) { endchar = j ; } else { logger . severe ( "Found illegal character in base64 coding : '" + c [ j ] + "'" ) ; return null ; / / encoding exception } } int remaining = endchar = = - 1 ? c . length : endchar ; int i = 0 ; while ( remaining > 0 ) { / / Four input chars ( 6 bits ) are decoded as three bytes as / / 000000 001111 111122 222222 byte b0 = ( byte ) ( c [ i ] < < 2 ) ; if ( remaining > = 2 ) { b0 + = ( c [ i + 1 ] & 0x30 ) > > 4 ; } bs . write ( b0 ) ; if ( remaining > = 3 ) { byte b1 = ( byte ) ( ( c [ i + 1 ] & 0x0F ) < < 4 ) ; b1 + = ( byte ) ( ( c [ i + 2 ] & 0x3C ) > > 2 ) ; bs . write ( b1 ) ; } if ( remaining > = 4 ) { byte b2 = ( byte ) ( ( c [ i + 2 ] & 0x03 ) < < 6 ) ; b2 + = c [ i + 3 ] ; bs . write ( b2 ) ; } i + = 4 ; remaining - = 4 ; } return bs . toByteArray ( ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = Base64Coding . decode64 ( "fnUA / K0bAB0 = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode64 ( String s ) { ByteArrayOutputStream bs = new ByteArrayOutputStream ( ( s . length ( ) / 4 ) * 3 ) ; char [ ] c = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , c , 0 ) ; / / Convert from base64 chars int endchar = - 1 ; for ( int j = 0 ; j < c . length & & endchar = = - 1 ; j + + ) { if ( c [ j ] > = 'A' & & c [ j ] < = 'Z' ) { c [ j ] - = 'A' ; } else if ( c [ j ] > = 'a' & & c [ j ] < = 'z' ) { c [ j ] = ( char ) ( c [ j ] + 26 - 'a' ) ; } else if ( c [ j ] > = '0' & & c [ j ] < = '9' ) { c [ j ] = ( char ) ( c [ j ] + 52 - '0' ) ; } else if ( c [ j ] = = ' + ' ) { c [ j ] = 62 ; } else if ( c [ j ] = = ' / ' ) { c [ j ] = 63 ; } else if ( c [ j ] = = ' = ' ) { endchar = j ; } else { logger . severe ( "Found illegal character in base64 coding : '" + c [ j ] + "'" ) ; return null ; / / encoding exception } } int remaining = endchar = = - 1 ? c . length : endchar ; int i = 0 ; while ( remaining > 0 ) { / / Four input chars ( 6 bits ) are decoded as three bytes as / / 000000 001111 111122 222222 byte b0 = ( byte ) ( c [ i ] < < 2 ) ; if ( remaining > = 2 ) { b0 + = ( c [ i + 1 ] & 0x30 ) > > 4 ; } bs . write ( b0 ) ; if ( remaining > = 3 ) { byte b1 = ( byte ) ( ( c [ i + 1 ] & 0x0F ) < < 4 ) ; b1 + = ( byte ) ( ( c [ i + 2 ] & 0x3C ) > > 2 ) ; bs . write ( b1 ) ; } if ( remaining > = 4 ) { byte b2 = ( byte ) ( ( c [ i + 2 ] & 0x03 ) < < 6 ) ; b2 + = c [ i + 3 ] ; bs . write ( b2 ) ; } i + = 4 ; remaining - = 4 ; } return bs . toByteArray ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; String string0 = Base64Coding . encode64 ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encode64 ( byte [ ] b ) { StringBuffer sb = new StringBuffer ( ( b . length / 3 ) * 4 ) ; int i = 0 ; int remaining = b . length ; char c [ ] = new char [ 4 ] ; while ( remaining > 0 ) { / / Three input bytes are encoded as four chars ( 6 bits ) as / / 00000011 11112222 22333333 c [ 0 ] = ( char ) ( ( b [ i ] & 0xFC ) > > 2 ) ; c [ 1 ] = ( char ) ( ( b [ i ] & 0x03 ) < < 4 ) ; if ( remaining > = 2 ) { c [ 1 ] + = ( char ) ( ( b [ i + 1 ] & 0xF0 ) > > 4 ) ; c [ 2 ] = ( char ) ( ( b [ i + 1 ] & 0x0F ) < < 2 ) ; if ( remaining > = 3 ) { c [ 2 ] + = ( char ) ( ( b [ i + 2 ] & 0xC0 ) > > 6 ) ; c [ 3 ] = ( char ) ( b [ i + 2 ] & 0x3F ) ; } else { c [ 3 ] = 64 ; } } else { c [ 2 ] = 64 ; c [ 3 ] = 64 ; } / / Convert to base64 chars for ( int j = 0 ; j < 4 ; j + + ) { if ( c [ j ] < 26 ) { c [ j ] + = 'A' ; } else if ( c [ j ] < 52 ) { c [ j ] = ( char ) ( c [ j ] - 26 + 'a' ) ; } else if ( c [ j ] < 62 ) { c [ j ] = ( char ) ( c [ j ] - 52 + '0' ) ; } else if ( c [ j ] = = 62 ) { c [ j ] = ' + ' ; } else if ( c [ j ] = = 63 ) { c [ j ] = ' / ' ; } else { c [ j ] = ' = ' ; } } sb . append ( c ) ; i + = 3 ; remaining - = 3 ; } return sb . toString ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 1 ] = ( byte ) ( - 99 ) ; String string0 = Base64Coding . encode64 ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encode64 ( byte [ ] b ) { StringBuffer sb = new StringBuffer ( ( b . length / 3 ) * 4 ) ; int i = 0 ; int remaining = b . length ; char c [ ] = new char [ 4 ] ; while ( remaining > 0 ) { / / Three input bytes are encoded as four chars ( 6 bits ) as / / 00000011 11112222 22333333 c [ 0 ] = ( char ) ( ( b [ i ] & 0xFC ) > > 2 ) ; c [ 1 ] = ( char ) ( ( b [ i ] & 0x03 ) < < 4 ) ; if ( remaining > = 2 ) { c [ 1 ] + = ( char ) ( ( b [ i + 1 ] & 0xF0 ) > > 4 ) ; c [ 2 ] = ( char ) ( ( b [ i + 1 ] & 0x0F ) < < 2 ) ; if ( remaining > = 3 ) { c [ 2 ] + = ( char ) ( ( b [ i + 2 ] & 0xC0 ) > > 6 ) ; c [ 3 ] = ( char ) ( b [ i + 2 ] & 0x3F ) ; } else { c [ 3 ] = 64 ; } } else { c [ 2 ] = 64 ; c [ 3 ] = 64 ; } / / Convert to base64 chars for ( int j = 0 ; j < 4 ; j + + ) { if ( c [ j ] < 26 ) { c [ j ] + = 'A' ; } else if ( c [ j ] < 52 ) { c [ j ] = ( char ) ( c [ j ] - 26 + 'a' ) ; } else if ( c [ j ] < 62 ) { c [ j ] = ( char ) ( c [ j ] - 52 + '0' ) ; } else if ( c [ j ] = = 62 ) { c [ j ] = ' + ' ; } else if ( c [ j ] = = 63 ) { c [ j ] = ' / ' ; } else { c [ j ] = ' = ' ; } } sb . append ( c ) ; i + = 3 ; remaining - = 3 ; } return sb . toString ( ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 5 ] = ( byte ) ( - 66 ) ; String string0 = Base64Coding . encode64 ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encode64 ( byte [ ] b ) { StringBuffer sb = new StringBuffer ( ( b . length / 3 ) * 4 ) ; int i = 0 ; int remaining = b . length ; char c [ ] = new char [ 4 ] ; while ( remaining > 0 ) { / / Three input bytes are encoded as four chars ( 6 bits ) as / / 00000011 11112222 22333333 c [ 0 ] = ( char ) ( ( b [ i ] & 0xFC ) > > 2 ) ; c [ 1 ] = ( char ) ( ( b [ i ] & 0x03 ) < < 4 ) ; if ( remaining > = 2 ) { c [ 1 ] + = ( char ) ( ( b [ i + 1 ] & 0xF0 ) > > 4 ) ; c [ 2 ] = ( char ) ( ( b [ i + 1 ] & 0x0F ) < < 2 ) ; if ( remaining > = 3 ) { c [ 2 ] + = ( char ) ( ( b [ i + 2 ] & 0xC0 ) > > 6 ) ; c [ 3 ] = ( char ) ( b [ i + 2 ] & 0x3F ) ; } else { c [ 3 ] = 64 ; } } else { c [ 2 ] = 64 ; c [ 3 ] = 64 ; } / / Convert to base64 chars for ( int j = 0 ; j < 4 ; j + + ) { if ( c [ j ] < 26 ) { c [ j ] + = 'A' ; } else if ( c [ j ] < 52 ) { c [ j ] = ( char ) ( c [ j ] - 26 + 'a' ) ; } else if ( c [ j ] < 62 ) { c [ j ] = ( char ) ( c [ j ] - 52 + '0' ) ; } else if ( c [ j ] = = 62 ) { c [ j ] = ' + ' ; } else if ( c [ j ] = = 63 ) { c [ j ] = ' / ' ; } else { c [ j ] = ' = ' ; } } sb . append ( c ) ; i + = 3 ; remaining - = 3 ; } return sb . toString ( ) ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 6 ] = ( byte ) 11 ; byteArray0 [ 7 ] = ( byte ) ( - 6 ) ; String string0 = Base64Coding . encode64 ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encode64 ( byte [ ] b ) { StringBuffer sb = new StringBuffer ( ( b . length / 3 ) * 4 ) ; int i = 0 ; int remaining = b . length ; char c [ ] = new char [ 4 ] ; while ( remaining > 0 ) { / / Three input bytes are encoded as four chars ( 6 bits ) as / / 00000011 11112222 22333333 c [ 0 ] = ( char ) ( ( b [ i ] & 0xFC ) > > 2 ) ; c [ 1 ] = ( char ) ( ( b [ i ] & 0x03 ) < < 4 ) ; if ( remaining > = 2 ) { c [ 1 ] + = ( char ) ( ( b [ i + 1 ] & 0xF0 ) > > 4 ) ; c [ 2 ] = ( char ) ( ( b [ i + 1 ] & 0x0F ) < < 2 ) ; if ( remaining > = 3 ) { c [ 2 ] + = ( char ) ( ( b [ i + 2 ] & 0xC0 ) > > 6 ) ; c [ 3 ] = ( char ) ( b [ i + 2 ] & 0x3F ) ; } else { c [ 3 ] = 64 ; } } else { c [ 2 ] = 64 ; c [ 3 ] = 64 ; } / / Convert to base64 chars for ( int j = 0 ; j < 4 ; j + + ) { if ( c [ j ] < 26 ) { c [ j ] + = 'A' ; } else if ( c [ j ] < 52 ) { c [ j ] = ( char ) ( c [ j ] - 26 + 'a' ) ; } else if ( c [ j ] < 62 ) { c [ j ] = ( char ) ( c [ j ] - 52 + '0' ) ; } else if ( c [ j ] = = 62 ) { c [ j ] = ' + ' ; } else if ( c [ j ] = = 63 ) { c [ j ] = ' / ' ; } else { c [ j ] = ' = ' ; } } sb . append ( c ) ; i + = 3 ; remaining - = 3 ; } return sb . toString ( ) ; }
void test0 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( "3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "oi > / { . " ; ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test2 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( ( String ) null , "D * G9`mTL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test3 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( "Y . pv . H" , "Y . pv . H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( stringArray0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test5 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( "Y . pv . H" , "Y . pv . H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test6 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = exampleFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test7 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( ) ; File file0 = new File ( " [ ) g4Fw ) wEfR . " ) ; boolean boolean0 = exampleFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( stringArray0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test9 ( ) throws Throwable { ExampleFileFilter exampleFileFilter0 = new ExampleFileFilter ( ( String ) null , "D * G9`mTL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test1 ( ) throws Throwable { Logger logger0 = Logger . getAnonymousLogger ( ) ; Level level0 = Level . FINER ; LoggingOutputStream loggingOutputStream0 = new LoggingOutputStream ( logger0 , level0 ) ; loggingOutputStream0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return elements . size ( ) ; }
void test0 ( ) throws Throwable { Hashtable < Vector < XMLElement > , XMLElement > hashtable0 = new Hashtable < Vector < XMLElement > , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { Hashtable < Double , XMLElement > hashtable0 = new Hashtable < Double , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseString ( String string ) throws XMLParseException { try { this . parseFromReader ( new StringReader ( string ) , / * startingLineNr * / 1 ) ; } catch ( IOException e ) { / / Java exception handling suxx } }
void test2 ( ) throws Throwable { Hashtable < Double , String > hashtable0 = new Hashtable < Double , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntAttribute ( String name ) { return this . getIntAttribute ( name , 0 ) ; }
void test3 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test4 ( ) throws Throwable { Hashtable < Double , XMLElement > hashtable0 = new Hashtable < Double , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void skipComment ( ) throws IOException { int dashesToRead = 2 ; while ( dashesToRead > 0 ) { char ch = this . readChar ( ) ; if ( ch = = ' - ' ) { dashesToRead - = 1 ; } else { dashesToRead = 2 ; } } if ( this . readChar ( ) ! = ' > ' ) { throw this . expectedInput ( " > " ) ; } }
void test5 ( ) throws Throwable { Hashtable < Integer , Integer > hashtable0 = new Hashtable < Integer , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntAttribute ( String name ) { return this . getIntAttribute ( name , 0 ) ; }
void test6 ( ) throws Throwable { Hashtable < Object , XMLElement > hashtable0 = new Hashtable < Object , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringProperty ( String name , Hashtable valueSet , String defaultKey ) { return this . getStringAttribute ( name , valueSet , defaultKey , false ) ; }
void test7 ( ) throws Throwable { Hashtable < Integer , Double > hashtable0 = new Hashtable < Integer , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseFromReader ( Reader reader ) throws IOException , XMLParseException { this . parseFromReader ( reader , / * startingLineNr * / 1 ) ; }
void test8 ( ) throws Throwable { Hashtable < String , XMLElement > hashtable0 = new Hashtable < String , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test9 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test10 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test11 ( ) throws Throwable { Hashtable < Double , String > hashtable0 = new Hashtable < Double , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseString ( String string ) throws XMLParseException { try { this . parseFromReader ( new StringReader ( string ) , / * startingLineNr * / 1 ) ; } catch ( IOException e ) { / / Java exception handling suxx } }
void test12 ( ) throws Throwable { Hashtable < Double , String > hashtable0 = new Hashtable < Double , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return this . contents ; }
void test13 ( ) throws Throwable { Hashtable < String , XMLElement > hashtable0 = new Hashtable < String , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test14 ( ) throws Throwable { Hashtable < Double , Object > hashtable0 = new Hashtable < Double , Object > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test15 ( ) throws Throwable { Hashtable < Integer , Integer > hashtable0 = new Hashtable < Integer , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test16 ( ) throws Throwable { Hashtable < Integer , Double > hashtable0 = new Hashtable < Integer , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseString ( String string ) throws XMLParseException { try { this . parseFromReader ( new StringReader ( string ) , / * startingLineNr * / 1 ) ; } catch ( IOException e ) { / / Java exception handling suxx } }
void test17 ( ) throws Throwable { Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test18 ( ) throws Throwable { Hashtable < Integer , Double > hashtable0 = new Hashtable < Integer , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test19 ( ) throws Throwable { Hashtable < Integer , Double > hashtable0 = new Hashtable < Integer , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test20 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseCharArray ( char [ ] input , int offset , int end ) throws XMLParseException { this . parseCharArray ( input , offset , end , / * startingLineNr * / 1 ) ; }
void test21 ( ) throws Throwable { Hashtable < XMLElement , String > hashtable0 = new Hashtable < XMLElement , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false ) ; hashtable0 . put ( xMLElement0 , " < `" ) ; XMLElement xMLElement1 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test22 ( ) throws Throwable { Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test23 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAttribute ( String name ) { return this . getAttribute ( name , null ) ; }
void test24 ( ) throws Throwable { Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test25 ( ) throws Throwable { Hashtable < String , Double > hashtable0 = new Hashtable < String , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test26 ( ) throws Throwable { Hashtable < Double , Object > hashtable0 = new Hashtable < Double , Object > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test27 ( ) throws Throwable { Hashtable < String , XMLElement > hashtable0 = new Hashtable < String , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntAttribute ( String name ) { return this . getIntAttribute ( name , 0 ) ; }
void test28 ( ) throws Throwable { Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test29 ( ) throws Throwable { Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringAttribute ( String name ) { return this . getStringAttribute ( name , null ) ; }
void test30 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAttribute ( String name ) { return this . getAttribute ( name , null ) ; }
void test31 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAttribute ( String name ) { return this . getAttribute ( name , null ) ; }
void test32 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringAttribute ( String name ) { return this . getStringAttribute ( name , null ) ; }
void test33 ( ) throws Throwable { Hashtable < Integer , Integer > hashtable0 = new Hashtable < Integer , Integer > ( ) ; Integer integer0 = new Integer ( ( - 14 ) ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( String key ) { return mProperties . getProperty ( key ) ; }
void test34 ( ) throws Throwable { Hashtable < String , XMLElement > hashtable0 = new Hashtable < String , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntAttribute ( String name ) { return this . getIntAttribute ( name , 0 ) ; }
void test35 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSpecialIntProperty ( String name , Hashtable valueSet , String defaultKey ) { return this . getIntAttribute ( name , valueSet , defaultKey , true ) ; }
void test36 ( ) throws Throwable { Hashtable < Integer , Integer > hashtable0 = new Hashtable < Integer , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test37 ( ) throws Throwable { Hashtable < Vector < Integer > , Integer > hashtable0 = new Hashtable < Vector < Integer > , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test38 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test39 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleAttribute ( String name ) { return this . getDoubleAttribute ( name , 0 . ) ; }
void test40 ( ) throws Throwable { Hashtable < String , Double > hashtable0 = new Hashtable < String , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( String key ) { return mProperties . getProperty ( key ) ; }
void test41 ( ) throws Throwable { Hashtable < String , Double > hashtable0 = new Hashtable < String , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( String key ) { return mProperties . getProperty ( key ) ; }
void test42 ( ) throws Throwable { Hashtable < String , Double > hashtable0 = new Hashtable < String , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( String key ) { return mProperties . getProperty ( key ) ; }
void test43 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanAttribute ( String name , String trueValue , String falseValue , boolean defaultValue ) { if ( this . ignoreCase ) { name = name . toUpperCase ( Locale . ENGLISH ) ; } Object value = this . attributes . get ( name ) ; if ( value = = null ) { return defaultValue ; } else if ( value . equals ( trueValue ) ) { return true ; } else if ( value . equals ( falseValue ) ) { return false ; } else { throw this . invalidValue ( name , ( String ) value ) ; } }
void test44 ( ) throws Throwable { Hashtable < String , Integer > hashtable0 = new Hashtable < String , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanAttribute ( String name , String trueValue , String falseValue , boolean defaultValue ) { if ( this . ignoreCase ) { name = name . toUpperCase ( Locale . ENGLISH ) ; } Object value = this . attributes . get ( name ) ; if ( value = = null ) { return defaultValue ; } else if ( value . equals ( trueValue ) ) { return true ; } else if ( value . equals ( falseValue ) ) { return false ; } else { throw this . invalidValue ( name , ( String ) value ) ; } }
void test45 ( ) throws Throwable { Hashtable < String , Double > hashtable0 = new Hashtable < String , Double > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test46 ( ) throws Throwable { Hashtable < Double , XMLElement > hashtable0 = new Hashtable < Double , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNr ( ) { return this . lineNr ; }
void test47 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test48 ( ) throws Throwable { Hashtable < Double , Object > hashtable0 = new Hashtable < Double , Object > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test49 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countChildren ( ) { return this . children . size ( ) ; }
void test51 ( ) throws Throwable { Hashtable < Double , Object > hashtable0 = new Hashtable < Double , Object > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test52 ( ) throws Throwable { Hashtable < Vector < XMLElement > , Integer > hashtable0 = new Hashtable < Vector < XMLElement > , Integer > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseString ( String string ) throws XMLParseException { try { this . parseFromReader ( new StringReader ( string ) , / * startingLineNr * / 1 ) ; } catch ( IOException e ) { / / Java exception handling suxx } }
void test53 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseCharArray ( char [ ] input , int offset , int end ) throws XMLParseException { this . parseCharArray ( input , offset , end , / * startingLineNr * / 1 ) ; }
void test55 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseCharArray ( char [ ] input , int offset , int end ) throws XMLParseException { this . parseCharArray ( input , offset , end , / * startingLineNr * / 1 ) ; }
void test56 ( ) throws Throwable { Hashtable < Double , XMLElement > hashtable0 = new Hashtable < Double , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void skipComment ( ) throws IOException { int dashesToRead = 2 ; while ( dashesToRead > 0 ) { char ch = this . readChar ( ) ; if ( ch = = ' - ' ) { dashesToRead - = 1 ; } else { dashesToRead = 2 ; } } if ( this . readChar ( ) ! = ' > ' ) { throw this . expectedInput ( " > " ) ; } }
void test57 ( ) throws Throwable { Hashtable < Vector < Integer > , XMLElement > hashtable0 = new Hashtable < Vector < Integer > , XMLElement > ( ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void skipSpecialTag ( int bracketLevel ) throws IOException { int tagLevel = 1 ; / / < char stringDelimiter = '\0' ; if ( bracketLevel = = 0 ) { char ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' - ' ) { ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } else if ( ch = = ' - ' ) { this . skipComment ( ) ; return ; } } } while ( tagLevel > 0 ) { char ch = this . readChar ( ) ; if ( stringDelimiter = = '\0' ) { if ( ( ch = = '"' ) | | ( ch = = '\'' ) ) { stringDelimiter = ch ; } else if ( bracketLevel < = 0 ) { if ( ch = = ' < ' ) { tagLevel + = 1 ; } else if ( ch = = ' > ' ) { tagLevel - = 1 ; } } if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } } else { if ( ch = = stringDelimiter ) { stringDelimiter = '\0' ; } } } }
void test58 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void skipSpecialTag ( int bracketLevel ) throws IOException { int tagLevel = 1 ; / / < char stringDelimiter = '\0' ; if ( bracketLevel = = 0 ) { char ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' - ' ) { ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } else if ( ch = = ' - ' ) { this . skipComment ( ) ; return ; } } } while ( tagLevel > 0 ) { char ch = this . readChar ( ) ; if ( stringDelimiter = = '\0' ) { if ( ( ch = = '"' ) | | ( ch = = '\'' ) ) { stringDelimiter = ch ; } else if ( bracketLevel < = 0 ) { if ( ch = = ' < ' ) { tagLevel + = 1 ; } else if ( ch = = ' > ' ) { tagLevel - = 1 ; } } if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } } else { if ( ch = = stringDelimiter ) { stringDelimiter = '\0' ; } } } }
void test59 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void skipSpecialTag ( int bracketLevel ) throws IOException { int tagLevel = 1 ; / / < char stringDelimiter = '\0' ; if ( bracketLevel = = 0 ) { char ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' - ' ) { ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } else if ( ch = = ' - ' ) { this . skipComment ( ) ; return ; } } } while ( tagLevel > 0 ) { char ch = this . readChar ( ) ; if ( stringDelimiter = = '\0' ) { if ( ( ch = = '"' ) | | ( ch = = '\'' ) ) { stringDelimiter = ch ; } else if ( bracketLevel < = 0 ) { if ( ch = = ' < ' ) { tagLevel + = 1 ; } else if ( ch = = ' > ' ) { tagLevel - = 1 ; } } if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } } else { if ( ch = = stringDelimiter ) { stringDelimiter = '\0' ; } } } }
void test60 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void skipSpecialTag ( int bracketLevel ) throws IOException { int tagLevel = 1 ; / / < char stringDelimiter = '\0' ; if ( bracketLevel = = 0 ) { char ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' - ' ) { ch = this . readChar ( ) ; if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } else if ( ch = = ' - ' ) { this . skipComment ( ) ; return ; } } } while ( tagLevel > 0 ) { char ch = this . readChar ( ) ; if ( stringDelimiter = = '\0' ) { if ( ( ch = = '"' ) | | ( ch = = '\'' ) ) { stringDelimiter = ch ; } else if ( bracketLevel < = 0 ) { if ( ch = = ' < ' ) { tagLevel + = 1 ; } else if ( ch = = ' > ' ) { tagLevel - = 1 ; } } if ( ch = = ' [ ' ) { bracketLevel + = 1 ; } else if ( ch = = ' ] ' ) { bracketLevel - = 1 ; } } else { if ( ch = = stringDelimiter ) { stringDelimiter = '\0' ; } } } }
void test61 ( ) throws Throwable { Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; XMLElement xMLElement0 = new XMLElement ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkLiteral ( String literal ) throws IOException { int length = literal . length ( ) ; for ( int i = 0 ; i < length ; i + = 1 ) { if ( this . readChar ( ) ! = literal . charAt ( i ) ) { return false ; } } return true ; }
void test63 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseCharArray ( char [ ] input , int offset , int end ) throws XMLParseException { this . parseCharArray ( input , offset , end , / * startingLineNr * / 1 ) ; }
void test65 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseCharArray ( char [ ] input , int offset , int end ) throws XMLParseException { this . parseCharArray ( input , offset , end , / * startingLineNr * / 1 ) ; }
void test4 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; resources0 . logException ( ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFreemindDirectory ( ) { return " . " ; }
void test6 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; ResourceBundle resourceBundle0 = resources0 . getResources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceBundle getResources ( ) { return null ; }
void test7 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; String string0 = resources0 . getText ( " ; k ! xMK c ! yw * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( String pKey ) { return getResourceString ( pKey ) ; }
void test8 ( ) throws Throwable { Resources resources0 = Resources . resourcesInstance ; Logger logger0 = resources0 . getLogger ( " } e2n8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Logger getLogger ( String forClass ) { return java . util . logging . Logger . getLogger ( forClass ) ; }
void test9 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; FreeMindMain . VersionInformation freeMindMain_VersionInformation0 = resources0 . getFreemindVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VersionInformation getFreemindVersion ( ) { return new VersionInformation ( 1 , 0 , 0 , FreeMindMain . VERSION_TYPE_ALPHA , 42 ) ; }
void test10 ( ) throws Throwable { Resources resources0 = Resources . resourcesInstance ; Object [ ] objectArray0 = new Object [ 4 ] ; String string0 = resources0 . format ( " } e2n8" , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( String resourceKey , Object [ ] messageArguments ) { MessageFormat formatter = new MessageFormat ( getResourceString ( resourceKey ) ) ; String stringResult = formatter . format ( messageArguments ) ; return stringResult ; }
void test11 ( ) throws Throwable { Resources resources0 = Resources . resourcesInstance ; String string0 = resources0 . getResourceString ( " } e2n8" , " } e2n8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResourceString ( String key ) { return key ; }
void test12 ( ) throws Throwable { Resources resources0 = Resources . resourcesInstance ; int int0 = resources0 . getIntProperty ( " } e2n8" , 8905 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntProperty ( String key , int defaultValue ) { try { return Integer . parseInt ( getProperty ( key ) ) ; } catch ( NumberFormatException nfe ) { return defaultValue ; } }
void test13 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; NamedObject namedObject0 = resources0 . createTranslatedString ( " " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test14 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; HashMap < Object , Object > hashMap0 = resources0 . getCountryMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { HtmlTools . IndexPair htmlTools_IndexPair0 = new HtmlTools . IndexPair ( ( - 1384 ) , ( - 1384 ) , ( - 1384 ) , ( - 1384 ) , false ) ; String string0 = htmlTools_IndexPair0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { String string0 = HtmlTools . removeAllTagsFromString ( "\t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeAllTagsFromString ( String text ) { return TAGS_PATTERN . matcher ( text ) . replaceAll ( "" ) ; }
void test2 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; String string0 = htmlTools0 . toHtml ( " & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHtml ( String xhtmlText ) { / / Remove ' / ' from < . . . / > of elements that do not have ' / ' there in HTML return SLASHED_TAGS_PATTERN . matcher ( xhtmlText ) . replaceAll ( " < $1 > " ) ; }
void test3 ( ) throws Throwable { String string0 = HtmlTools . makeValidXml ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeValidXml ( String pXmlNoteText ) { return pXmlNoteText . replaceAll ( "\0" , "" ) . replaceAll ( " & #0 ; " , "" ) ; }
void test4 ( ) throws Throwable { String string0 = HtmlTools . toXMLUnescapedText ( " & #7 ; [ 01 ] ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLUnescapedText ( String text ) { return text . replaceAll ( " & lt ; " , " < " ) . replaceAll ( " & gt ; " , " > " ) . replaceAll ( " & quot ; " , "\"" ) . replaceAll ( " & amp ; " , " & " ) ; }
void test6 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWellformedXml ( String xml ) { try { / / Create a builder factory SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; factory . setValidating ( false ) ; / / Create the builder and parse the file factory . newSAXParser ( ) . parse ( new InputSource ( new StringReader ( xml ) ) , new DefaultHandler ( ) ) ; return true ; } catch ( SAXParseException e ) { logger . log ( Level . SEVERE , "XmlParseError on line " + e . getLineNumber ( ) + " of " + xml , e ) ; } catch ( Exception e ) { logger . log ( Level . SEVERE , "XmlParseError" , e ) ; } return false ; }
void test7 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; Pattern pattern0 = Pattern . compile ( " 4a9WyZ~ ] t2bl4J\"br" , ( - 19 ) ) ; String string0 = htmlTools0 . getReplaceResult ( pattern0 , " < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4 & #x7f ; J\"br" , " < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4J\"br" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReplaceResult ( Pattern pattern , String replacement , String text ) { ArrayList splittedStringList = new ArrayList ( ) ; String stringWithoutTags = null ; / / remove tags and denote their positions : { StringBuffer sb = new StringBuffer ( ) ; Matcher matcher = FIND_TAGS_PATTERN . matcher ( text ) ; int lastMatchEnd = 0 ; while ( matcher . find ( ) ) { String textWithoutTag = matcher . group ( 1 ) ; / / Append text without tags : int replStart = sb . length ( ) ; matcher . appendReplacement ( sb , "$1" ) ; IndexPair indexPair ; if ( textWithoutTag . length ( ) > 0 ) { indexPair = new IndexPair ( lastMatchEnd , matcher . end ( 1 ) , replStart , sb . length ( ) , false ) ; lastMatchEnd = matcher . end ( 1 ) ; / / System . out . println ( sb . toString ( ) / / + " , " / / + input . substring ( indexPair . originalStart , / / indexPair . originalEnd ) + " , " + indexPair ) ; splittedStringList . add ( indexPair ) ; } / / String tag = matcher . group ( 2 ) ; replStart = sb . length ( ) ; indexPair = new IndexPair ( lastMatchEnd , matcher . end ( 2 ) , replStart , sb . length ( ) , true ) ; lastMatchEnd = matcher . end ( 2 ) ; / / System . out . println ( sb . toString ( ) + " , " + / / input . substring ( indexPair . originalStart , / / indexPair . originalEnd ) + " , " + indexPair ) ; splittedStringList . add ( indexPair ) ; } int replStart = sb . length ( ) ; matcher . appendTail ( sb ) ; / / append tail only if there is a tail if ( sb . length ( ) ! = replStart ) { IndexPair indexPair = new IndexPair ( lastMatchEnd , text . length ( ) , replStart , sb . length ( ) , false ) ; / / System . out . println ( sb . toString ( ) + " , " + indexPair ) ; splittedStringList . add ( indexPair ) ; } / / System . out . println ( sb . toString ( ) ) ; stringWithoutTags = sb . toString ( ) ; } / / / / give it out : / / for ( Iterator iter = splittedStringList . iterator ( ) ; iter . hasNext ( ) ; ) / / { / / IndexPair pair = ( IndexPair ) iter . next ( ) ; / / System . out . println ( text . substring ( pair . originalStart , / / pair . originalEnd ) + " , " + pair ) ; / / } / * * * For each pair which is not a tag we find concurrences and replace * them , if pair is a tag then we just append * / StringBuffer sbResult = new StringBuffer ( ) ; for ( Iterator iter = splittedStringList . iterator ( ) ; iter . hasNext ( ) ; ) { IndexPair pair = ( IndexPair ) iter . next ( ) ; if ( pair . mIsTag ) append ( sbResult , text , pair . originalStart , pair . originalEnd ) ; else { Matcher matcher = pattern . matcher ( text . substring ( pair . originalStart , pair . originalEnd ) ) ; int mStart = 0 ; int mEnd = 0 ; int mEndOld = 0 ; int mStartOld = 0 ; while ( matcher . find ( ) ) { mStart = matcher . start ( ) ; mEnd = matcher . end ( ) ; append ( sbResult , text , pair . originalStart + mEndOld , pair . originalStart + mStart ) ; / * * * If it's a first iteration then we append text between * start and first concurrence , and when it's not first * iteration ( mEndOld ! = 0 ) we append text between two * concurrences * / / / sbResult . append ( text , pair . originalStart + mStart , / / pair . originalStart + mEnd ) ; / / original text sbResult . append ( replacement ) ; mEndOld = mEnd ; mStartOld = mStart ; } append ( sbResult , text , pair . originalStart + mEndOld , pair . originalEnd ) ; / / append tail } } / / System . out . println ( "Result : '" + sbResult . toString ( ) + "'" ) ; return sbResult . toString ( ) ; }
void test8 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; String string0 = htmlTools0 . toXhtml ( " & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXhtml ( String htmlText ) { if ( ! isHtmlNode ( htmlText ) ) { return null ; } logger . fine ( "Enter toXhtml with " + htmlText ) ; StringReader reader = new StringReader ( htmlText ) ; StringWriter writer = new StringWriter ( ) ; try { XHTMLWriter . html2xhtml ( reader , writer ) ; String resultXml = writer . toString ( ) ; / / for safety : if ( ! isWellformedXml ( resultXml ) ) { return toXMLEscapedText ( htmlText ) ; } logger . fine ( "Leave toXhtml with " + resultXml ) ; return resultXml ; } catch ( IOException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } catch ( BadLocationException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } / / fallback : htmlText = htmlText . replaceAll ( " < " , " & gt ; " ) ; htmlText = htmlText . replaceAll ( " > " , " & lt ; " ) ; logger . fine ( "Leave toXhtml with fallback " + htmlText ) ; return htmlText ; }
void test10 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; Pattern pattern0 = Pattern . compile ( "" , 0 ) ; String string0 = htmlTools0 . getReplaceResult ( pattern0 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReplaceResult ( Pattern pattern , String replacement , String text ) { ArrayList splittedStringList = new ArrayList ( ) ; String stringWithoutTags = null ; / / remove tags and denote their positions : { StringBuffer sb = new StringBuffer ( ) ; Matcher matcher = FIND_TAGS_PATTERN . matcher ( text ) ; int lastMatchEnd = 0 ; while ( matcher . find ( ) ) { String textWithoutTag = matcher . group ( 1 ) ; / / Append text without tags : int replStart = sb . length ( ) ; matcher . appendReplacement ( sb , "$1" ) ; IndexPair indexPair ; if ( textWithoutTag . length ( ) > 0 ) { indexPair = new IndexPair ( lastMatchEnd , matcher . end ( 1 ) , replStart , sb . length ( ) , false ) ; lastMatchEnd = matcher . end ( 1 ) ; / / System . out . println ( sb . toString ( ) / / + " , " / / + input . substring ( indexPair . originalStart , / / indexPair . originalEnd ) + " , " + indexPair ) ; splittedStringList . add ( indexPair ) ; } / / String tag = matcher . group ( 2 ) ; replStart = sb . length ( ) ; indexPair = new IndexPair ( lastMatchEnd , matcher . end ( 2 ) , replStart , sb . length ( ) , true ) ; lastMatchEnd = matcher . end ( 2 ) ; / / System . out . println ( sb . toString ( ) + " , " + / / input . substring ( indexPair . originalStart , / / indexPair . originalEnd ) + " , " + indexPair ) ; splittedStringList . add ( indexPair ) ; } int replStart = sb . length ( ) ; matcher . appendTail ( sb ) ; / / append tail only if there is a tail if ( sb . length ( ) ! = replStart ) { IndexPair indexPair = new IndexPair ( lastMatchEnd , text . length ( ) , replStart , sb . length ( ) , false ) ; / / System . out . println ( sb . toString ( ) + " , " + indexPair ) ; splittedStringList . add ( indexPair ) ; } / / System . out . println ( sb . toString ( ) ) ; stringWithoutTags = sb . toString ( ) ; } / / / / give it out : / / for ( Iterator iter = splittedStringList . iterator ( ) ; iter . hasNext ( ) ; ) / / { / / IndexPair pair = ( IndexPair ) iter . next ( ) ; / / System . out . println ( text . substring ( pair . originalStart , / / pair . originalEnd ) + " , " + pair ) ; / / } / * * * For each pair which is not a tag we find concurrences and replace * them , if pair is a tag then we just append * / StringBuffer sbResult = new StringBuffer ( ) ; for ( Iterator iter = splittedStringList . iterator ( ) ; iter . hasNext ( ) ; ) { IndexPair pair = ( IndexPair ) iter . next ( ) ; if ( pair . mIsTag ) append ( sbResult , text , pair . originalStart , pair . originalEnd ) ; else { Matcher matcher = pattern . matcher ( text . substring ( pair . originalStart , pair . originalEnd ) ) ; int mStart = 0 ; int mEnd = 0 ; int mEndOld = 0 ; int mStartOld = 0 ; while ( matcher . find ( ) ) { mStart = matcher . start ( ) ; mEnd = matcher . end ( ) ; append ( sbResult , text , pair . originalStart + mEndOld , pair . originalStart + mStart ) ; / * * * If it's a first iteration then we append text between * start and first concurrence , and when it's not first * iteration ( mEndOld ! = 0 ) we append text between two * concurrences * / / / sbResult . append ( text , pair . originalStart + mStart , / / pair . originalStart + mEnd ) ; / / original text sbResult . append ( replacement ) ; mEndOld = mEnd ; mStartOld = mStart ; } append ( sbResult , text , pair . originalStart + mEndOld , pair . originalEnd ) ; / / append tail } } / / System . out . println ( "Result : '" + sbResult . toString ( ) + "'" ) ; return sbResult . toString ( ) ; }
void test13 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; HtmlTools . IndexPair htmlTools_IndexPair0 = new HtmlTools . IndexPair ( 240 , 240 , 240 , 240 , false ) ; ArrayList < HtmlTools . IndexPair > arrayList0 = new ArrayList < HtmlTools . IndexPair > ( ) ; arrayList0 . add ( htmlTools_IndexPair0 ) ; int int0 = htmlTools0 . getMinimalOriginalPosition ( 240 , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test15 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; HtmlTools . IndexPair htmlTools_IndexPair0 = new HtmlTools . IndexPair ( ( - 1233 ) , ( - 1233 ) , ( - 1233 ) , ( - 1233 ) , true ) ; ArrayList < HtmlTools . IndexPair > arrayList0 = new ArrayList < HtmlTools . IndexPair > ( ) ; arrayList0 . add ( htmlTools_IndexPair0 ) ; int int0 = htmlTools0 . getMaximalOriginalPosition ( ( - 1233 ) , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test16 ( ) throws Throwable { HtmlTools htmlTools0 = HtmlTools . getInstance ( ) ; HtmlTools . IndexPair htmlTools_IndexPair0 = new HtmlTools . IndexPair ( 240 , 240 , 240 , 240 , false ) ; ArrayList < HtmlTools . IndexPair > arrayList0 = new ArrayList < HtmlTools . IndexPair > ( ) ; arrayList0 . add ( htmlTools_IndexPair0 ) ; int int0 = htmlTools0 . getMaximalOriginalPosition ( 240 , ( ArrayList ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test17 ( ) throws Throwable { String string0 = HtmlTools . htmlToPlain ( "\t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String htmlToPlain ( String text ) { return htmlToPlain ( text , / * strictHTMLOnly = * / true ) ; }
void test18 ( ) throws Throwable { String string0 = HtmlTools . htmlToPlain ( " < html > < body > < p > & nbsp ; \r < br > - ' ( ) + , . / : = ? ; ! * #@$_%0123456789" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String htmlToPlain ( String text ) { return htmlToPlain ( text , / * strictHTMLOnly = * / true ) ; }
void test19 ( ) throws Throwable { String string0 = HtmlTools . unicodeToHTMLUnicodeEntity ( " < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4J\"br" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unicodeToHTMLUnicodeEntity ( String text , boolean pPreserveNewlines ) { / * * Heuristic reserve for expansion : factor 1 . 2 * / StringBuffer result = new StringBuffer ( ( int ) ( text . length ( ) * 1 . 2 ) ) ; int intValue ; char myChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; intValue = ( int ) text . charAt ( i ) ; boolean outOfRange = intValue < 32 | | intValue > 126 ; if ( pPreserveNewlines & & myChar = = '\n' ) { outOfRange = false ; } if ( outOfRange ) { result . append ( " & #x" ) . append ( Integer . toString ( intValue , 16 ) ) . append ( ' ; ' ) ; } else { result . append ( myChar ) ; } } return result . toString ( ) ; }
void test20 ( ) throws Throwable { String string0 = HtmlTools . unicodeToHTMLUnicodeEntity ( " \r\n - ' ( ) + , . : = ? ; ! * #@$_%02456789" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unicodeToHTMLUnicodeEntity ( String text , boolean pPreserveNewlines ) { / * * Heuristic reserve for expansion : factor 1 . 2 * / StringBuffer result = new StringBuffer ( ( int ) ( text . length ( ) * 1 . 2 ) ) ; int intValue ; char myChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; intValue = ( int ) text . charAt ( i ) ; boolean outOfRange = intValue < 32 | | intValue > 126 ; if ( pPreserveNewlines & & myChar = = '\n' ) { outOfRange = false ; } if ( outOfRange ) { result . append ( " & #x" ) . append ( Integer . toString ( intValue , 16 ) ) . append ( ' ; ' ) ; } else { result . append ( myChar ) ; } } return result . toString ( ) ; }
void test21 ( ) throws Throwable { String string0 = HtmlTools . unicodeToHTMLUnicodeEntity ( " \r\n - 'H ) + , . : = ? ; ! * #@$_%0123456789" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unicodeToHTMLUnicodeEntity ( String text , boolean pPreserveNewlines ) { / * * Heuristic reserve for expansion : factor 1 . 2 * / StringBuffer result = new StringBuffer ( ( int ) ( text . length ( ) * 1 . 2 ) ) ; int intValue ; char myChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; intValue = ( int ) text . charAt ( i ) ; boolean outOfRange = intValue < 32 | | intValue > 126 ; if ( pPreserveNewlines & & myChar = = '\n' ) { outOfRange = false ; } if ( outOfRange ) { result . append ( " & #x" ) . append ( Integer . toString ( intValue , 16 ) ) . append ( ' ; ' ) ; } else { result . append ( myChar ) ; } } return result . toString ( ) ; }
void test22 ( ) throws Throwable { String string0 = HtmlTools . unescapeHTMLUnicodeEntity ( "\t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unescapeHTMLUnicodeEntity ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( entityChar ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { if ( isXMLValidCharacter ( myChar ) ) entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test23 ( ) throws Throwable { String string0 = HtmlTools . unescapeHTMLUnicodeEntity ( " & \u00A0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unescapeHTMLUnicodeEntity ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( entityChar ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { if ( isXMLValidCharacter ( myChar ) ) entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test24 ( ) throws Throwable { String string0 = HtmlTools . htmlToPlain ( " & lt ; html } 4 / 't4tD ! / O & gt ; " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String htmlToPlain ( String text ) { return htmlToPlain ( text , / * strictHTMLOnly = * / true ) ; }
void test25 ( ) throws Throwable { String string0 = HtmlTools . htmlToPlain ( " & #7 ; [ 01 ] ; " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String htmlToPlain ( String text ) { return htmlToPlain ( text , / * strictHTMLOnly = * / true ) ; }
void test26 ( ) throws Throwable { String string0 = HtmlTools . unescapeHTMLUnicodeEntity ( " & #xd ; & #xa ; - 'H ) + , . : = ? ; ! * #@$_%0123456789" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unescapeHTMLUnicodeEntity ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( entityChar ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { if ( isXMLValidCharacter ( myChar ) ) entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test27 ( ) throws Throwable { String string0 = HtmlTools . unescapeHTMLUnicodeEntity ( "\u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unescapeHTMLUnicodeEntity ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( entityChar ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { if ( isXMLValidCharacter ( myChar ) ) entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test28 ( ) throws Throwable { String string0 = HtmlTools . removeHtmlTagsFromString ( "jp > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeHtmlTagsFromString ( String text ) { if ( HtmlTools . isHtmlNode ( text ) ) { return removeAllTagsFromString ( text ) ; / / ( ? s ) enables that . matches / / newline . } else { return text ; } }
void test29 ( ) throws Throwable { String string0 = HtmlTools . plainToHTML ( " [ IndexPair : originalStart : - 1384 originalEnd : - 1384 replacedStart : - 1384 replacedEnd : - 1384 is a tag : false ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String plainToHTML ( String text ) { char myChar ; String textTabsExpanded = text . replaceAll ( "\t" , " " ) ; / / Use / / eight / / spaces / / as / / tab / / width . StringBuffer result = new StringBuffer ( textTabsExpanded . length ( ) ) ; / / Heuristic int lengthMinus1 = textTabsExpanded . length ( ) - 1 ; result . append ( " < html > < body > < p > " ) ; for ( int i = 0 ; i < textTabsExpanded . length ( ) ; + + i ) { myChar = textTabsExpanded . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < lengthMinus1 & & ( int ) textTabsExpanded . charAt ( i - 1 ) > 32 & & ( int ) textTabsExpanded . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; case '\n' : result . append ( " < br > " ) ; break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test30 ( ) throws Throwable { String string0 = HtmlTools . plainToHTML ( " \r\n - ' ( ) + , . / : = ? ; ! * #@$_%0123456789" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String plainToHTML ( String text ) { char myChar ; String textTabsExpanded = text . replaceAll ( "\t" , " " ) ; / / Use / / eight / / spaces / / as / / tab / / width . StringBuffer result = new StringBuffer ( textTabsExpanded . length ( ) ) ; / / Heuristic int lengthMinus1 = textTabsExpanded . length ( ) - 1 ; result . append ( " < html > < body > < p > " ) ; for ( int i = 0 ; i < textTabsExpanded . length ( ) ; + + i ) { myChar = textTabsExpanded . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < lengthMinus1 & & ( int ) textTabsExpanded . charAt ( i - 1 ) > 32 & & ( int ) textTabsExpanded . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; case '\n' : result . append ( " < br > " ) ; break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test31 ( ) throws Throwable { String string0 = HtmlTools . plainToHTML ( " & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String plainToHTML ( String text ) { char myChar ; String textTabsExpanded = text . replaceAll ( "\t" , " " ) ; / / Use / / eight / / spaces / / as / / tab / / width . StringBuffer result = new StringBuffer ( textTabsExpanded . length ( ) ) ; / / Heuristic int lengthMinus1 = textTabsExpanded . length ( ) - 1 ; result . append ( " < html > < body > < p > " ) ; for ( int i = 0 ; i < textTabsExpanded . length ( ) ; + + i ) { myChar = textTabsExpanded . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < lengthMinus1 & & ( int ) textTabsExpanded . charAt ( i - 1 ) > 32 & & ( int ) textTabsExpanded . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; case '\n' : result . append ( " < br > " ) ; break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test32 ( ) throws Throwable { String string0 = HtmlTools . plainToHTML ( " < html > < body > < p > & nbsp ; \r < br > - ' ( ) + , . / : = ? ; ! * #@$_%0123456789" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String plainToHTML ( String text ) { char myChar ; String textTabsExpanded = text . replaceAll ( "\t" , " " ) ; / / Use / / eight / / spaces / / as / / tab / / width . StringBuffer result = new StringBuffer ( textTabsExpanded . length ( ) ) ; / / Heuristic int lengthMinus1 = textTabsExpanded . length ( ) - 1 ; result . append ( " < html > < body > < p > " ) ; for ( int i = 0 ; i < textTabsExpanded . length ( ) ; + + i ) { myChar = textTabsExpanded . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < lengthMinus1 & & ( int ) textTabsExpanded . charAt ( i - 1 ) > 32 & & ( int ) textTabsExpanded . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; case '\n' : result . append ( " < br > " ) ; break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test33 ( ) throws Throwable { String string0 = HtmlTools . toXMLEscapedTextExpandingWhitespace ( " & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLEscapedTextExpandingWhitespace ( String text ) { / / Spaces and tabs are handled text = text . replaceAll ( "\t" , " " ) ; / / Use eight spaces as tab / / width . int len = text . length ( ) ; StringBuffer result = new StringBuffer ( len ) ; char myChar ; for ( int i = 0 ; i < len ; + + i ) { myChar = text . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < len - 1 & & ( int ) text . charAt ( i - 1 ) > 32 & & ( int ) text . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test34 ( ) throws Throwable { String string0 = HtmlTools . toXMLEscapedTextExpandingWhitespace ( " < html } 4 / 't4tD ! / O > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLEscapedTextExpandingWhitespace ( String text ) { / / Spaces and tabs are handled text = text . replaceAll ( "\t" , " " ) ; / / Use eight spaces as tab / / width . int len = text . length ( ) ; StringBuffer result = new StringBuffer ( len ) ; char myChar ; for ( int i = 0 ; i < len ; + + i ) { myChar = text . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < len - 1 & & ( int ) text . charAt ( i - 1 ) > 32 & & ( int ) text . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test35 ( ) throws Throwable { String string0 = HtmlTools . toXMLEscapedTextExpandingWhitespace ( "`suKMpL 9 , 2 + xh ? . Z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLEscapedTextExpandingWhitespace ( String text ) { / / Spaces and tabs are handled text = text . replaceAll ( "\t" , " " ) ; / / Use eight spaces as tab / / width . int len = text . length ( ) ; StringBuffer result = new StringBuffer ( len ) ; char myChar ; for ( int i = 0 ; i < len ; + + i ) { myChar = text . charAt ( i ) ; switch ( myChar ) { case ' & ' : result . append ( " & amp ; " ) ; break ; case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' ' : if ( i > 0 & & i < len - 1 & & ( int ) text . charAt ( i - 1 ) > 32 & & ( int ) text . charAt ( i + 1 ) > 32 ) { result . append ( ' ' ) ; } else { result . append ( " & nbsp ; " ) ; } break ; default : result . append ( myChar ) ; } } return result . toString ( ) ; }
void test36 ( ) throws Throwable { String string0 = HtmlTools . toXMLEscapedText ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLEscapedText ( String text ) { if ( text = = null ) { return "ERROR : none" ; } return text . replaceAll ( " & " , " & amp ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( " > " , " & gt ; " ) . replaceAll ( "\"" , " & quot ; " ) ; }
void test37 ( ) throws Throwable { String string0 = HtmlTools . toXMLEscapedText ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLEscapedText ( String text ) { if ( text = = null ) { return "ERROR : none" ; } return text . replaceAll ( " & " , " & amp ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( " > " , " & gt ; " ) . replaceAll ( "\"" , " & quot ; " ) ; }
void test38 ( ) throws Throwable { String string0 = HtmlTools . removeInvalidXmlCharacters ( " < ht$laA & KJxcQ / ! = cN4 ) X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeInvalidXmlCharacters ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { / / The following test is superfluous under the assumption / / that the string only contains unicode in XML entities . / / Removing this test could significantly speed up this / / method ; maybe . if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test39 ( ) throws Throwable { String string0 = HtmlTools . removeInvalidXmlCharacters ( " < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4 & #x7f ; J\"br" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeInvalidXmlCharacters ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { / / The following test is superfluous under the assumption / / that the string only contains unicode in XML entities . / / Removing this test could significantly speed up this / / method ; maybe . if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test40 ( ) throws Throwable { String string0 = HtmlTools . removeInvalidXmlCharacters ( " & #7 ; [ 01 ] ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeInvalidXmlCharacters ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { / / The following test is superfluous under the assumption / / that the string only contains unicode in XML entities . / / Removing this test could significantly speed up this / / method ; maybe . if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test41 ( ) throws Throwable { String string0 = HtmlTools . removeInvalidXmlCharacters ( "\u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeInvalidXmlCharacters ( String text ) { StringBuffer result = new StringBuffer ( text . length ( ) ) ; StringBuffer entity = new StringBuffer ( ) ; boolean readingEntity = false ; char myChar ; char entityChar ; for ( int i = 0 ; i < text . length ( ) ; + + i ) { myChar = text . charAt ( i ) ; if ( readingEntity ) { if ( myChar = = ' ; ' ) { if ( entity . charAt ( 0 ) = = '#' ) { try { if ( entity . charAt ( 1 ) = = 'x' ) { / / Hexadecimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 2 ) , 16 ) ; } else { / / Decimal entityChar = ( char ) Integer . parseInt ( entity . substring ( 1 ) , 10 ) ; } if ( isXMLValidCharacter ( entityChar ) ) result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } catch ( NumberFormatException e ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } } else { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } entity . setLength ( 0 ) ; readingEntity = false ; } else { entity . append ( myChar ) ; } } else { if ( myChar = = ' & ' ) { readingEntity = true ; } else { / / The following test is superfluous under the assumption / / that the string only contains unicode in XML entities . / / Removing this test could significantly speed up this / / method ; maybe . if ( isXMLValidCharacter ( myChar ) ) result . append ( myChar ) ; } } } if ( entity . length ( ) > 0 ) { result . append ( ' & ' ) . append ( entity ) . append ( ' ; ' ) ; } return result . toString ( ) ; }
void test42 ( ) throws Throwable { String string0 = HtmlTools . extractHtmlBody ( " & \u00A0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractHtmlBody ( String output ) { if ( output . startsWith ( " < html" ) ) { output = output . substring ( 6 ) ; / / do not write } int start = output . indexOf ( " < body" ) ; if ( start = = - 1 ) { start = output . indexOf ( ' > ' ) + 1 ; } else { start = output . indexOf ( ' > ' , start + 5 ) + 1 ; } int end = output . indexOf ( " < / body > " ) ; if ( end = = - 1 ) { end = output . indexOf ( " < / html > " ) ; } if ( end = = - 1 ) { end = output . length ( ) ; } output = output . substring ( start , end ) ; return output ; }
void test43 ( ) throws Throwable { String string0 = HtmlTools . extractHtmlBody ( " < html < html > < body > jp > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractHtmlBody ( String output ) { if ( output . startsWith ( " < html" ) ) { output = output . substring ( 6 ) ; / / do not write } int start = output . indexOf ( " < body" ) ; if ( start = = - 1 ) { start = output . indexOf ( ' > ' ) + 1 ; } else { start = output . indexOf ( ' > ' , start + 5 ) + 1 ; } int end = output . indexOf ( " < / body > " ) ; if ( end = = - 1 ) { end = output . indexOf ( " < / html > " ) ; } if ( end = = - 1 ) { end = output . length ( ) ; } output = output . substring ( start , end ) ; return output ; }
void test44 ( ) throws Throwable { String string0 = HtmlTools . replaceSpacesToNonbreakableSpaces ( " & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceSpacesToNonbreakableSpaces ( String input ) { StringBuffer result = new StringBuffer ( input . length ( ) ) ; boolean readingSpaces = false ; char myChar ; for ( int i = 0 ; i < input . length ( ) ; + + i ) { myChar = input . charAt ( i ) ; if ( myChar = = ' ' ) { if ( readingSpaces ) { result . append ( NBSP ) ; } else { result . append ( myChar ) ; readingSpaces = true ; } } else { readingSpaces = false ; result . append ( myChar ) ; } } return result . toString ( ) ; }
void test0 ( ) throws Throwable { StdFormatter stdFormatter0 = new StdFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( String resourceKey , Object [ ] messageArguments ) { MessageFormat formatter = new MessageFormat ( getResourceString ( resourceKey ) ) ; String stringResult = formatter . format ( messageArguments ) ; return stringResult ; }
void test0 ( ) throws Throwable { StyleSheet styleSheet0 = new StyleSheet ( ) ; HTMLDocument hTMLDocument0 = new HTMLDocument ( styleSheet0 ) ; FixedHTMLWriter fixedHTMLWriter0 = new FixedHTMLWriter ( ( Writer ) null , hTMLDocument0 ) ; fixedHTMLWriter0 . writeAttributes ( ( AttributeSet ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler ( true ) ; PrintWriter printWriter0 = defaultErrorHandler0 . getErrorWriter ( ) ; HTMLDocument hTMLDocument0 = new HTMLDocument ( ) ; FixedHTMLWriter fixedHTMLWriter0 = new FixedHTMLWriter ( ( Writer ) printWriter0 , hTMLDocument0 , 0 , 0 ) ; StyleSheet styleSheet0 = hTMLDocument0 . getStyleSheet ( ) ; JTextPane jTextPane0 = new JTextPane ( ) ; StyleContext . NamedStyle styleContext_NamedStyle0 = ( StyleContext . NamedStyle ) jTextPane0 . getLogicalStyle ( ) ; StyleContext . NamedStyle styleContext_NamedStyle1 = ( StyleContext . NamedStyle ) styleSheet0 . addAttributes ( ( AttributeSet ) styleContext_NamedStyle0 , ( AttributeSet ) styleContext_NamedStyle0 ) ; fixedHTMLWriter0 . writeAttributes ( ( AttributeSet ) styleContext_NamedStyle1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler ( true ) ; PrintWriter printWriter0 = defaultErrorHandler0 . getErrorWriter ( ) ; HTMLDocument hTMLDocument0 = new HTMLDocument ( ) ; FixedHTMLWriter fixedHTMLWriter0 = new FixedHTMLWriter ( ( Writer ) printWriter0 , hTMLDocument0 , 0 , 0 ) ; fixedHTMLWriter0 . write ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( Writer writer ) throws IOException { write ( writer , true ) ; }
void test3 ( ) throws Throwable { HTMLDocument hTMLDocument0 = new HTMLDocument ( ) ; FixedHTMLWriter fixedHTMLWriter0 = new FixedHTMLWriter ( ( Writer ) null , hTMLDocument0 ) ; JTextField jTextField0 = new JTextField ( "d%D'\" - ? ^" , 1259 ) ; JTextComponent . AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0 . new AccessibleJTextComponent ( ) ; AbstractDocument . LeafElement abstractDocument_LeafElement0 = ( AbstractDocument . LeafElement ) jTextComponent_AccessibleJTextComponent0 . getCharacterAttribute ( 1259 ) ; fixedHTMLWriter0 . writeAttributes ( ( AttributeSet ) abstractDocument_LeafElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeAttributes ( AttributeSet attr ) throws IOException { / / translate css attributes to html if ( attr instanceof Element ) { Element elem = ( Element ) attr ; if ( elem . isLeaf ( ) | | elem . getName ( ) . equalsIgnoreCase ( "p - implied" ) ) { super . writeAttributes ( attr ) ; return ; } } convAttr . removeAttributes ( convAttr ) ; convertToHTML ( attr , convAttr ) ; Enumeration names = convAttr . getAttributeNames ( ) ; while ( names . hasMoreElements ( ) ) { Object name = names . nextElement ( ) ; if ( name instanceof HTML . Tag | | name instanceof StyleConstants | | name = = HTML . Attribute . ENDTAG ) { continue ; } write ( " " + name + " = \"" + convAttr . getAttribute ( name ) + "\"" ) ; } }
void test0 ( ) throws Throwable { FreeMindStarter . ProxyAuthenticator freeMindStarter_ProxyAuthenticator0 = new FreeMindStarter . ProxyAuthenticator ( "V - 038" , "V - 038" ) ; PasswordAuthentication passwordAuthentication0 = freeMindStarter_ProxyAuthenticator0 . getPasswordAuthentication ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { / / Get host name String hostname = getHostName ( ) ; return System . getProperty ( "user . name" ) + "@" + hostname ; }
void test1 ( ) throws Throwable { StringWriter stringWriter0 = new StringWriter ( 0 ) ; GapContent gapContent0 = new GapContent ( 0 ) ; StyleSheet styleSheet0 = new StyleSheet ( ) ; HTMLDocument hTMLDocument0 = new HTMLDocument ( ( AbstractDocument . Content ) gapContent0 , styleSheet0 ) ; XHTMLWriter xHTMLWriter0 = new XHTMLWriter ( ( Writer ) stringWriter0 , hTMLDocument0 ) ; xHTMLWriter0 . write ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { StringWriter stringWriter0 = new StringWriter ( 687 ) ; HTMLDocument hTMLDocument0 = new HTMLDocument ( ) ; StyleSheet styleSheet0 = hTMLDocument0 . getStyleSheet ( ) ; XHTMLWriter xHTMLWriter0 = new XHTMLWriter ( ( Writer ) stringWriter0 , hTMLDocument0 ) ; JTextPane jTextPane0 = new JTextPane ( ) ; StyleContext . NamedStyle styleContext_NamedStyle0 = ( StyleContext . NamedStyle ) jTextPane0 . getLogicalStyle ( ) ; StyleContext . NamedStyle styleContext_NamedStyle1 = styleSheet0 . new NamedStyle ( ( Style ) styleContext_NamedStyle0 ) ; Option option0 = new Option ( ( AttributeSet ) styleContext_NamedStyle1 ) ; xHTMLWriter0 . writeOption ( option0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test3 ( ) throws Throwable { StringWriter stringWriter0 = new StringWriter ( 0 ) ; XHTMLWriter . XHTMLFilterWriter xHTMLWriter_XHTMLFilterWriter0 = new XHTMLWriter . XHTMLFilterWriter ( ( Writer ) stringWriter0 ) ; xHTMLWriter_XHTMLFilterWriter0 . write ( " ; HITBaP$FMt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { File file0 = new File ( "edge_color_format_action" ) ; String string0 = Tools . getFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFile ( File pInputFile ) { try { return getFile ( getReaderFromFile ( pInputFile ) ) ; } catch ( FileNotFoundException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; return null ; } }
void test1 ( ) throws Throwable { Vector < Object > vector0 = Tools . getVectorWithSingleElement ( ( Object ) "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return elements . size ( ) ; }
void test2 ( ) throws Throwable { String string0 = Tools . decompress ( " / f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decompress ( String compressedMessage ) { byte [ ] compressedData = fromBase64 ( compressedMessage ) ; / / Create the decompressor and give it the data to compress Inflater decompressor = new Inflater ( ) ; decompressor . setInput ( compressedData ) ; / / Create an expandable byte array to hold the decompressed data ByteArrayOutputStream bos = new ByteArrayOutputStream ( compressedData . length ) ; / / Decompress the data byte [ ] buf = new byte [ 1024 ] ; boolean errorOccured = false ; while ( ! decompressor . finished ( ) & & ! errorOccured ) { try { int count = decompressor . inflate ( buf ) ; bos . write ( buf , 0 , count ) ; } catch ( DataFormatException e ) { errorOccured = true ; } } try { bos . close ( ) ; } catch ( IOException e ) { } / / Get the decompressed data byte [ ] decompressedData = bos . toByteArray ( ) ; return byteArrayToUTF8String ( decompressedData ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = Tools . isHeadless ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHeadless ( ) { return GraphicsEnvironment . getLocalGraphicsEnvironment ( ) . isHeadless ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = Tools . uTF8StringToByteArray ( " } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] uTF8StringToByteArray ( String uncompressedData ) { / / Code using utf - 8 try { return uncompressedData . getBytes ( "UTF8" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( "UTF8 packing not allowed" ) ; } }
void test5 ( ) throws Throwable { JCheckBox jCheckBox0 = new JCheckBox ( ) ; Tools . setLabelAndMnemonic ( ( AbstractButton ) jCheckBox0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( String pKey ) { return getResourceString ( pKey ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = Tools . isAvailableFontFamily ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAvailableFontFamily ( String fontFamilyName ) { return getAvailableFontFamilyNames ( ) . contains ( fontFamilyName ) ; }
void test7 ( ) throws Throwable { XmlAction xmlAction0 = Tools . unMarshall ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XmlAction unMarshall ( String inputString ) { return XmlBindingTools . getInstance ( ) . unMarshall ( inputString ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { String string0 = Tools . getHostIpAsString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test10 ( ) throws Throwable { Paper paper0 = new Paper ( ) ; String string0 = Tools . getPageFormatAsString ( paper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPageFormatAsString ( Paper pPaper ) { return pPaper . getWidth ( ) + " ; " + pPaper . getHeight ( ) + " ; " + pPaper . getImageableX ( ) + " ; " + pPaper . getImageableY ( ) + " ; " + pPaper . getImageableWidth ( ) + " ; " + pPaper . getImageableHeight ( ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = Tools . executableByExtension ( "bh )  ) @#m < = t^fq$N > - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean executableByExtension ( String file ) { return executableExtensions . contains ( getExtension ( file ) ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { String string0 = Tools . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test14 ( ) throws Throwable { Tools tools0 = new Tools ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHostIpAsString ( ) { try { return InetAddress . getLocalHost ( ) . getHostAddress ( ) ; } catch ( UnknownHostException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } return null ; }
void test15 ( ) throws Throwable { StringBuffer stringBuffer0 = new StringBuffer ( ) ; Tools . SingleDesEncrypter tools_SingleDesEncrypter0 = new Tools . SingleDesEncrypter ( stringBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean decrypt ( StringBuffer givenPassword ) { if ( ! checkPassword ( givenPassword ) ) { return false ; } setAccessible ( true ) ; if ( ! isDecrypted ) { try { MindMapNode node = null ; String childXml = decryptXml ( encryptedContent , password ) ; / / is it a map at all ? if ( childXml . startsWith ( MindMapMapModel . MAP_INITIAL_START ) ) { node = getNodeFromXml ( childXml ) ; } else { / / old handling up to version 0 . 9 . 0_rc8 : String [ ] childs = childXml . split ( ModeController . NODESEPARATOR ) ; / / and now ? paste it : / / make a 0 . 8 . 0 map out of it : String mapContent = MindMapMapModel . MAP_INITIAL_START + "0 . 8 . 0\" > < node TEXT = \"DUMMY\" > " ; for ( int j = 0 ; j < childs . length ; j + + ) { String nodeContent = childs [ j ] ; mapContent + = nodeContent ; } mapContent + = " < / node > < / map > " ; node = getNodeFromXml ( mapContent ) ; } int index = 0 ; for ( ListIterator i = node . childrenUnfolded ( ) ; i . hasNext ( ) ; ) { MindMapNodeModel importNode = ( MindMapNodeModel ) i . next ( ) ; ( ( MindMapController ) getModeController ( ) ) . insertNodeInto ( importNode , this , index + + ) ; } isDecrypted = true ; } catch ( Exception e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; setAccessible ( false ) ; } } setFolded ( false ) ; getMap ( ) . getRegistry ( ) . registrySubtree ( this , false ) ; return true ; }
void test16 ( ) throws Throwable { Tools . ObjectHolder tools_ObjectHolder0 = new Tools . ObjectHolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test17 ( ) throws Throwable { Tools . BooleanHolder tools_BooleanHolder0 = new Tools . BooleanHolder ( true ) ; tools_BooleanHolder0 . setValue ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test18 ( ) throws Throwable { Tools . BooleanHolder tools_BooleanHolder0 = new Tools . BooleanHolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test19 ( ) throws Throwable { StringBuffer stringBuffer0 = new StringBuffer ( ( CharSequence ) "6b#me8J { r ! L < Uke } n1" ) ; Tools . TripleDesEncrypter tools_TripleDesEncrypter0 = new Tools . TripleDesEncrypter ( stringBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test20 ( ) throws Throwable { Tools . Pair tools_Pair0 = new Tools . Pair ( ( Object ) null , ( Object ) null ) ; Object object0 = tools_Pair0 . getSecond ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test21 ( ) throws Throwable { Tools . IntHolder tools_IntHolder0 = new Tools . IntHolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test22 ( ) throws Throwable { Tools . IntHolder tools_IntHolder0 = new Tools . IntHolder ( 405 ) ; int int0 = tools_IntHolder0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test24 ( ) throws Throwable { String string0 = Tools . PointToXml ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String PointToXml ( Point col ) { if ( col = = null ) return null ; / / throw new IllegalArgumentException ( "Point was / / null" ) ; Vector l = new Vector ( ) ; l . add ( Integer . toString ( col . x ) ) ; l . add ( Integer . toString ( col . y ) ) ; return listToString ( ( List ) l ) ; }
void test26 ( ) throws Throwable { String string0 = Tools . BooleanToXml ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String BooleanToXml ( boolean col ) { return ( col ) ? "true" : "false" ; }
void test27 ( ) throws Throwable { boolean boolean0 = Tools . xmlToBoolean ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean xmlToBoolean ( String string ) { if ( string = = null ) return false ; if ( string . equals ( "true" ) ) return true ; return false ; }
void test28 ( ) throws Throwable { boolean boolean0 = Tools . xmlToBoolean ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean xmlToBoolean ( String string ) { if ( string = = null ) return false ; if ( string . equals ( "true" ) ) return true ; return false ; }
void test29 ( ) throws Throwable { BrowseHookFactory browseHookFactory0 = new BrowseHookFactory ( ) ; Vector < Object > vector0 = browseHookFactory0 . getPossibleNodeHooks ( ) ; String string0 = Tools . listToString ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String listToString ( List list ) { ListIterator it = list . listIterator ( 0 ) ; String str = new String ( ) ; while ( it . hasNext ( ) ) { str + = it . next ( ) . toString ( ) + " ; " ; } return str ; }
void test30 ( ) throws Throwable { boolean boolean0 = Tools . safeEquals ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEquals ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . equals ( string2 ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test31 ( ) throws Throwable { boolean boolean0 = Tools . safeEquals ( ( Object ) "flood - opacity" , ( Object ) "evenodd" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEquals ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . equals ( string2 ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test32 ( ) throws Throwable { boolean boolean0 = Tools . safeEqualsIgnoreCase ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEqualsIgnoreCase ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . toLowerCase ( ) . equals ( string2 . toLowerCase ( ) ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test33 ( ) throws Throwable { boolean boolean0 = Tools . safeEqualsIgnoreCase ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEqualsIgnoreCase ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . toLowerCase ( ) . equals ( string2 . toLowerCase ( ) ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test34 ( ) throws Throwable { boolean boolean0 = Tools . safeEqualsIgnoreCase ( "6b#me8J { r ! L < Uke } n1" , "evenodd" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEqualsIgnoreCase ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . toLowerCase ( ) . equals ( string2 . toLowerCase ( ) ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test35 ( ) throws Throwable { boolean boolean0 = Tools . safeEquals ( ( Color ) null , ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEquals ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . equals ( string2 ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test36 ( ) throws Throwable { String string0 = Tools . expandPlaceholders ( "feMorphology" , "feMorphology" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String expandPlaceholders ( String message , String s1 ) { String result = message ; if ( s1 ! = null ) { s1 = s1 . replaceAll ( "\\\\" , "\\\\\\\\" ) ; / / Replace \ with \\ result = result . replaceAll ( "\\$1" , s1 ) ; } return result ; }
void test37 ( ) throws Throwable { Tools . BooleanHolder tools_BooleanHolder0 = new Tools . BooleanHolder ( true ) ; boolean boolean0 = Tools . safeEquals ( tools_BooleanHolder0 , tools_BooleanHolder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test38 ( ) throws Throwable { boolean boolean0 = Tools . safeEquals ( ( Tools . BooleanHolder ) null , ( Tools . BooleanHolder ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean safeEquals ( String string1 , String string2 ) { return ( string1 ! = null & & string2 ! = null & & string1 . equals ( string2 ) ) | | ( string1 = = null & & string2 = = null ) ; }
void test39 ( ) throws Throwable { boolean boolean0 = Tools . isMacOsX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMacOsX ( ) { boolean underMac = false ; String osName = System . getProperty ( "os . name" ) ; if ( osName . startsWith ( "Mac OS" ) ) { underMac = true ; } return underMac ; }
void test40 ( ) throws Throwable { KeyStroke keyStroke0 = Tools . getKeyStroke ( "iWSm * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeyStroke getKeyStroke ( String keyStrokeDescription ) { if ( keyStrokeDescription = = null ) { return null ; } KeyStroke keyStroke = KeyStroke . getKeyStroke ( keyStrokeDescription ) ; if ( keyStroke ! = null ) return keyStroke ; return KeyStroke . getKeyStroke ( "typed " + keyStrokeDescription ) ; }
void test41 ( ) throws Throwable { String string0 = Tools . compareText ( "1" , "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String compareText ( String pText1 , String pText2 ) { if ( pText1 = = null | | pText2 = = null ) { return "One of the Strings is null " + pText1 + " , " + pText2 ; } StringBuffer b = new StringBuffer ( ) ; if ( pText1 . length ( ) > pText2 . length ( ) ) { b . append ( "First string is longer : " + pText1 . substring ( pText2 . length ( ) ) + "\n" ) ; } if ( pText1 . length ( ) < pText2 . length ( ) ) { b . append ( "Second string is longer : " + pText2 . substring ( pText1 . length ( ) ) + "\n" ) ; } for ( int i = 0 ; i < Math . min ( pText1 . length ( ) , pText2 . length ( ) ) ; i + + ) { if ( pText1 . charAt ( i ) ! = pText2 . charAt ( i ) ) { b . append ( "Difference at " + i + " : " + pText1 . charAt ( i ) + " ! = " + pText2 . charAt ( i ) + "\n" ) ; } } return b . toString ( ) ; }
void test42 ( ) throws Throwable { String string0 = Tools . compareText ( "6b#me8J { r ! L < Uke } n1" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String compareText ( String pText1 , String pText2 ) { if ( pText1 = = null | | pText2 = = null ) { return "One of the Strings is null " + pText1 + " , " + pText2 ; } StringBuffer b = new StringBuffer ( ) ; if ( pText1 . length ( ) > pText2 . length ( ) ) { b . append ( "First string is longer : " + pText1 . substring ( pText2 . length ( ) ) + "\n" ) ; } if ( pText1 . length ( ) < pText2 . length ( ) ) { b . append ( "Second string is longer : " + pText2 . substring ( pText1 . length ( ) ) + "\n" ) ; } for ( int i = 0 ; i < Math . min ( pText1 . length ( ) , pText2 . length ( ) ) ; i + + ) { if ( pText1 . charAt ( i ) ! = pText2 . charAt ( i ) ) { b . append ( "Difference at " + i + " : " + pText1 . charAt ( i ) + " ! = " + pText2 . charAt ( i ) + "\n" ) ; } } return b . toString ( ) ; }
void test43 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 7 ] ; Object object0 = RenderingHints . VALUE_ANTIALIAS_DEFAULT ; objectArray0 [ 0 ] = object0 ; JCheckBox jCheckBox0 = new JCheckBox ( ) ; objectArray0 [ 1 ] = objectArray0 [ 0 ] ; objectArray0 [ 2 ] = ( Object ) jCheckBox0 ; objectArray0 [ 3 ] = objectArray0 [ 0 ] ; objectArray0 [ 4 ] = objectArray0 [ 3 ] ; objectArray0 [ 5 ] = objectArray0 [ 0 ] ; objectArray0 [ 6 ] = objectArray0 [ 5 ] ; Object object1 = Tools . getField ( objectArray0 , " ] )  ? = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getField ( Object [ ] pObjects , String pField ) throws IllegalArgumentException , SecurityException , IllegalAccessException , NoSuchFieldException { for ( int i = 0 ; i < pObjects . length ; i + + ) { Object object = pObjects [ i ] ; for ( int j = 0 ; j < object . getClass ( ) . getFields ( ) . length ; j + + ) { Field f = object . getClass ( ) . getFields ( ) [ j ] ; if ( Tools . safeEquals ( pField , f . getName ( ) ) ) { return object . getClass ( ) . getField ( pField ) . get ( object ) ; } } } return null ; }
void test45 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "NameAttribute" ; stringArray0 [ 1 ] = " & E~piG2" ; stringArray0 [ 2 ] = " / fb9o + ! UfsQV" ; stringArray0 [ 3 ] = " . jpg" ; stringArray0 [ 4 ] = " & E~piG2" ; stringArray0 [ 5 ] = "fuchsia" ; stringArray0 [ 6 ] = "1 + nBKV | v ? 6h" ; String string0 = Tools . arrayToUrls ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String arrayToUrls ( String [ ] pArgs ) { StringBuffer b = new StringBuffer ( ) ; for ( int i = 0 ; i < pArgs . length ; i + + ) { String fileName = pArgs [ i ] ; try { b . append ( fileToUrl ( new File ( fileName ) ) ) ; b . append ( '\n' ) ; } catch ( MalformedURLException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } } return b . toString ( ) ; }
void test46 ( ) throws Throwable { int int0 = Tools . countOccurrences ( "edge_color_format_action" , " } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countOccurrences ( String pString , String pSearchString ) { int amount = 0 ; while ( true ) { int index = pString . indexOf ( pSearchString ) ; if ( index < 0 ) { break ; } amount + + ; pString = pString . substring ( index + pSearchString . length ( ) ) ; } return amount ; }
void test47 ( ) throws Throwable { Paper paper0 = new Paper ( ) ; Tools . setPageFormatFromString ( paper0 , "s ] 6Dle ( 7jU & + ZL%IN7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPageFormatFromString ( Paper pPaper , String pPageFormatProperty ) { try { / / parse string : StringTokenizer tokenizer = new StringTokenizer ( pPageFormatProperty , " ; " ) ; if ( tokenizer . countTokens ( ) ! = 6 ) { logger . warning ( "Page format property has not the correct format : " + pPageFormatProperty ) ; return ; } pPaper . setSize ( nt ( tokenizer ) , nt ( tokenizer ) ) ; pPaper . setImageableArea ( nt ( tokenizer ) , nt ( tokenizer ) , nt ( tokenizer ) , nt ( tokenizer ) ) ; } catch ( Exception e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } }
void test0 ( ) throws Throwable { LogFileLogHandler logFileLogHandler0 = new LogFileLogHandler ( ) ; logFileLogHandler0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { if ( internalIn2 = = null ) return null ; return internalIn2 . getEncoding ( ) ; }
void test1 ( ) throws Throwable { LogFileLogHandler logFileLogHandler0 = new LogFileLogHandler ( ) ; logFileLogHandler0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { if ( internalIn2 = = null ) return null ; return internalIn2 . getEncoding ( ) ; }
void test2 ( ) throws Throwable { LogFileLogHandler logFileLogHandler0 = new LogFileLogHandler ( ) ; LogFileLogHandler . LogReceiver logFileLogHandler_LogReceiver0 = logFileLogHandler0 . getLogReceiver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LogReceiver getLogReceiver ( ) { return mLogReceiver ; }
void test3 ( ) throws Throwable { LogFileLogHandler logFileLogHandler0 = new LogFileLogHandler ( ) ; Level level0 = Level . INFO ; LogRecord logRecord0 = new LogRecord ( level0 , " < 7a4Z" ) ; logFileLogHandler0 . publish ( logRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void publish ( LogRecord pRecord ) { if ( mLogReceiver ! = null ) { if ( ! isLoggable ( pRecord ) ) { return ; } mLogReceiver . receiveLog ( pRecord ) ; } }
void test5 ( ) throws Throwable { LogFileViewer logFileViewer0 = new LogFileViewer ( ) ; LogFileLogHandler logFileLogHandler0 = new LogFileLogHandler ( ( LogFileLogHandler . LogReceiver ) logFileViewer0 ) ; Level level0 = Level . FINER ; logFileLogHandler0 . setLevel ( level0 ) ; Level level1 = Level . ALL ; LogRecord logRecord0 = new LogRecord ( level1 , "w1^`tGnoNx ? 6DMlN~ > z" ) ; logFileLogHandler0 . publish ( logRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void publish ( LogRecord pRecord ) { if ( mLogReceiver ! = null ) { if ( ! isLoggable ( pRecord ) ) { return ; } mLogReceiver . receiveLog ( pRecord ) ; } }
void test0 ( ) throws Throwable { StylePatternFactory stylePatternFactory0 = new StylePatternFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { Pattern pattern0 = StylePatternFactory . getPatternFromString ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Pattern getPatternFromString ( String pattern ) { String patternString = pattern ; if ( patternString = = null ) { patternString = PATTERN_DUMMY ; } Pattern pat = ( Pattern ) XmlBindingTools . getInstance ( ) . unMarshall ( patternString ) ; return pat ; }
void test7 ( ) throws Throwable { Patterns patterns0 = StylePatternFactory . getPatternsFromString ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Patterns getPatternsFromString ( String patterns ) { String patternsString = patterns ; if ( patternsString = = null ) { patternsString = PATTERNS_DUMMY ; } Patterns pat = ( Patterns ) XmlBindingTools . getInstance ( ) . unMarshall ( patternsString ) ; return pat ; }
void test8 ( ) throws Throwable { Patterns patterns0 = StylePatternFactory . getPatternsFromString ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Patterns getPatternsFromString ( String patterns ) { String patternsString = patterns ; if ( patternsString = = null ) { patternsString = PATTERNS_DUMMY ; } Patterns pat = ( Patterns ) XmlBindingTools . getInstance ( ) . unMarshall ( patternsString ) ; return pat ; }
void test9 ( ) throws Throwable { Pattern pattern0 = StylePatternFactory . getPatternFromString ( ( String ) null ) ; PatternNodeFontSize patternNodeFontSize0 = new PatternNodeFontSize ( ) ; pattern0 . setPatternNodeFontSize ( patternNodeFontSize0 ) ; Pattern pattern1 = StylePatternFactory . intersectPattern ( pattern0 , pattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( true ) ; StylePattern stylePattern0 = new StylePattern ( xMLElement0 , ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRecursive ( ) { return recursive ; }
void test1 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; String string0 = stylePattern0 . getNodeStyle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeStyle ( ) { return nodeStyle ; }
void test2 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setNodeFontItalic ( ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeStyle ( ) { return nodeStyle ; }
void test3 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setChildrenStylePattern ( ( StylePattern ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToChildren ( ) { return mChildrenStylePattern ! = null ; }
void test4 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToEdge ( ) { return edgeColor ! = null | | edgeStyle ! = null | | edgeWidth ! = null ; }
void test5 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; String string0 = stylePattern0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( String pKey ) { return getResourceString ( pKey ) ; }
void test6 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; String string0 = stylePattern0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test7 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setText ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNodeIcon ( ) { return nodeIcon ! = null ; }
void test8 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; boolean boolean0 = stylePattern0 . getRecursive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRecursive ( ) { return recursive ; }
void test10 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setNodeFontSize ( ( Integer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeFontFamily ( ) { return nodeFontFamily ; }
void test11 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; Color color0 = stylePattern0 . getEdgeColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getEdgeColor ( ) { return edgeColor ; }
void test12 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setNodeBackgroundColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNodeIcon ( ) { return nodeIcon ! = null ; }
void test13 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; String string0 = stylePattern0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test18 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( true ) ; StylePattern stylePattern0 = new StylePattern ( xMLElement0 , ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRecursive ( ) { return recursive ; }
void test19 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; Color color0 = stylePattern0 . getNodeColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getNodeColor ( ) { return nodeColor ; }
void test20 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setNodeColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test21 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEdgeStyle ( ) { return edgeStyle ; }
void test22 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; MindIcon mindIcon0 = stylePattern0 . getNodeIcon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MindIcon getNodeIcon ( ) { return nodeIcon ; }
void test23 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setEdgeStyle ( "_~s } ~ & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test24 ( ) throws Throwable { XMLElement xMLElement0 = new XMLElement ( true ) ; StylePattern stylePattern0 = new StylePattern ( xMLElement0 , ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRecursive ( ) { return recursive ; }
void test25 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; StylePattern stylePattern1 = stylePattern0 . getChildrenStylePattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StylePattern getChildrenStylePattern ( ) { return mChildrenStylePattern ; }
void test26 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; String string0 = stylePattern0 . getNodeFontFamily ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeFontFamily ( ) { return nodeFontFamily ; }
void test27 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setEdgeColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNodeStyle ( ) { return nodeStyle ; }
void test28 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNodeFont ( ) { return nodeFontBold ! = null | | nodeFontFamily ! = null | | nodeFontItalic ! = null | | nodeFontSize ! = null ; }
void test29 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setNodeFontBold ( ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( String pKey ) { return getResourceString ( pKey ) ; }
void test30 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNode ( ) { return nodeBackgroundColor ! = null | | nodeColor ! = null | | nodeStyle ! = null ; }
void test31 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; stylePattern0 . setNodeIcon ( ( MindIcon ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test32 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; boolean boolean0 = stylePattern0 . getAppliesToEdge ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToEdge ( ) { return edgeColor ! = null | | edgeStyle ! = null | | edgeWidth ! = null ; }
void test33 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; boolean boolean0 = stylePattern0 . getAppliesToNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNode ( ) { return nodeBackgroundColor ! = null | | nodeColor ! = null | | nodeStyle ! = null ; }
void test34 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; boolean boolean0 = stylePattern0 . getAppliesToNodeFont ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNodeFont ( ) { return nodeFontBold ! = null | | nodeFontFamily ! = null | | nodeFontItalic ! = null | | nodeFontSize ! = null ; }
void test35 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; boolean boolean0 = stylePattern0 . getAppliesToNodeIcon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToNodeIcon ( ) { return nodeIcon ! = null ; }
void test36 ( ) throws Throwable { StylePattern stylePattern0 = new StylePattern ( ) ; boolean boolean0 = stylePattern0 . getAppliesToChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppliesToChildren ( ) { return mChildrenStylePattern ! = null ; }
void test1 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; Object [ ] objectArray0 = new Object [ 7 ] ; SpinnerListModel spinnerListModel0 = new SpinnerListModel ( objectArray0 ) ; JSpinner jSpinner0 = new JSpinner ( ( SpinnerModel ) spinnerListModel0 ) ; JSpinner . ListEditor jSpinner_ListEditor0 = new JSpinner . ListEditor ( jSpinner0 ) ; attributeRegistry0 . addChangeListener ( ( ChangeListener ) jSpinner_ListEditor0 ) ; attributeRegistry0 . setRestricted ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVisibleElementsNumber ( ) { return visibleElementsNumber ; }
void test2 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . registry ( "VtTZwI | %q ? " ) ; boolean boolean0 = attributeRegistry0 . exist ( "VtTZwI | %q ? " , "k" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return elements . size ( ) ; }
void test3 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . containsElement ( "vj~ : ) 7\"ky9F : ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRestricted ( ) { return isRestricted ; }
void test4 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . decrementVisibleElementsNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVisibleElementsNumber ( ) { return visibleElementsNumber ; }
void test5 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ) ; int int0 = attributeRegistry0 . getVisibleElementsNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontSize ( ) { if ( getFont ( ) ! = null ) { return new Integer ( getFont ( ) . getSize ( ) ) . toString ( ) ; } else { return getFrame ( ) . getProperty ( "defaultfontsize" ) ; } }
void test9 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . isRestricted ( "rel" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRestricted ( ) { return isRestricted ; }
void test10 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test11 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ) ; attributeRegistry0 . getAttributeViewType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontSize ( ) { if ( getFont ( ) ! = null ) { return new Integer ( getFont ( ) . getSize ( ) ) . toString ( ) ; } else { return getFrame ( ) . getProperty ( "defaultfontsize" ) ; } }
void test12 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . incrementVisibleElementsNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRestricted ( ) { return isRestricted ; }
void test15 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . setRestricted ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRestricted ( ) { return isRestricted ; }
void test21 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ) ; attributeRegistry0 . setFontSize ( 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontSize ( ) { if ( getFont ( ) ! = null ) { return new Integer ( getFont ( ) . getSize ( ) ) . toString ( ) ; } else { return getFrame ( ) . getProperty ( "defaultfontsize" ) ; } }
void test22 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 0 ) ; attributeRegistry0 . setFontSize ( 1472 ) ; attributeRegistry0 . save ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test23 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 0 ) ; attributeRegistry0 . registry ( "VtTZwI | %q ? " ) ; attributeRegistry0 . save ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test24 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void resetChanges ( ) { if ( isAttributeLayoutChanged = = false ) return ; restrictionModel = Boolean . valueOf ( isRestricted ) ; for ( int i = 0 ; i < elements . size ( ) ; i + + ) { AttributeRegistryElement element = getElement ( i ) ; element . setVisibilityModel ( Boolean . valueOf ( element . isVisible ( ) ) ) ; element . setRestrictionModel ( Boolean . valueOf ( element . isRestricted ( ) ) ) ; } isAttributeLayoutChanged = false ; }
void test25 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; attributeRegistry0 . resetChanges ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontSize ( ) { if ( getFont ( ) ! = null ) { return new Integer ( getFont ( ) . getSize ( ) ) . toString ( ) ; } else { return getFrame ( ) . getProperty ( "defaultfontsize" ) ; } }
void test26 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ) ; attributeRegistry0 . applyChanges ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontSize ( ) { if ( getFont ( ) ! = null ) { return new Integer ( getFont ( ) . getSize ( ) ) . toString ( ) ; } else { return getFrame ( ) . getProperty ( "defaultfontsize" ) ; } }
void test27 ( ) throws Throwable { AttributeRegistry attributeRegistry0 = new AttributeRegistry ( ( MapRegistry ) null ) ; boolean boolean0 = attributeRegistry0 . exist ( "rel" , "filterUnits" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeViewType ( ) { return attributeViewType ; }
void test0 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " [ HF } k & Q" , " [ HF } k & Q" ) ; attribute0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "M3ximFj | ktp" ) ; String string0 = attribute0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " [ HF } k & Q" , " [ HF } k & Q" ) ; attribute0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " [ HF } k & Q" , " [ HF } k & Q" ) ; Attribute attribute1 = new Attribute ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test4 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "M3ximFj | ktp" ) ; String string0 = attribute0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " [ HF } k & Q" , " [ HF } k & Q" ) ; String string0 = attribute0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { FileMode fileMode0 = new FileMode ( ) ; JToolBar jToolBar0 = fileMode0 . getToolbar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JToolBar getToolbar ( ) { return toolbar ; }
void test2 ( ) throws Throwable { FileMode fileMode0 = new FileMode ( ) ; String string0 = fileMode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test5 ( ) throws Throwable { FileMode fileMode0 = new FileMode ( ) ; fileMode0 . restore ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { MindMapMode mindMapMode0 = new MindMapMode ( ) ; Controller controller0 = mindMapMode0 . getController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Controller getController ( ) { return null ; }
void test3 ( ) throws Throwable { MindMapMode mindMapMode0 = new MindMapMode ( ) ; String string0 = mindMapMode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; MindMapHTMLWriter mindMapHTMLWriter0 = new MindMapHTMLWriter ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void saveHTML ( List mindMapNodes ) throws IOException { fileout . write ( " < html > " + el + " < head > " + el ) ; writeStyle ( ) ; fileout . write ( el + " < / head > " + el + " < body > " + el ) ; Iterator iterator = mindMapNodes . iterator ( ) ; while ( iterator . hasNext ( ) ) { MindMapNodeModel node = ( MindMapNodeModel ) iterator . next ( ) ; saveHTML ( node , "1" , 0 , / * isRoot * / true , true , / * depth * / 1 ) ; } fileout . write ( " < / body > " + el ) ; fileout . write ( " < / html > " + el ) ; fileout . close ( ) ; }
void test2 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 0 ) ; MindMapHTMLWriter mindMapHTMLWriter0 = new MindMapHTMLWriter ( ( Writer ) charArrayWriter0 ) ; JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer ( ) ; DefaultHelpModel defaultHelpModel0 = ( DefaultHelpModel ) jHelpContentViewer0 . getModel ( ) ; JHelp jHelp0 = new JHelp ( ( TextHelpModel ) defaultHelpModel0 ) ; DefaultHelpHistoryModel defaultHelpHistoryModel0 = new DefaultHelpHistoryModel ( jHelp0 ) ; Vector < Object > vector0 = defaultHelpHistoryModel0 . getForwardHistory ( ) ; mindMapHTMLWriter0 . saveHTML ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return elements . size ( ) ; }
void test0 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; JAutoScrollBarPane jAutoScrollBarPane0 = new JAutoScrollBarPane ( ( Component ) jInternalFrame0 ) ; JButton jButton0 = new JButton ( "" ) ; JAutoScrollBarPane jAutoScrollBarPane1 = new JAutoScrollBarPane ( ( Component ) jButton0 ) ; jAutoScrollBarPane1 . setRowHeaderView ( ( Component ) jAutoScrollBarPane0 ) ; Dimension dimension0 = jAutoScrollBarPane1 . getPreferredSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) ; int getRealWidth ( ) ; String toString ( ) ; / * * The node to which this line is associated . * / void setTarget ( MindMapNode node ) ; Object clone ( ) ; }
void test0 ( ) throws Throwable { MindMapMapModel . StringReaderCreator mindMapMapModel_StringReaderCreator0 = new MindMapMapModel . StringReaderCreator ( "@z { t" ) ; StringReader stringReader0 = ( StringReader ) mindMapMapModel_StringReaderCreator0 . createReader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MindMapMapModel ( FreeMindMain frame , ModeController modeController ) { this ( null , frame , modeController ) ; }
void test1 ( ) throws Throwable { MindMapMapModel . StringReaderCreator mindMapMapModel_StringReaderCreator0 = new MindMapMapModel . StringReaderCreator ( "@z { t" ) ; String string0 = mindMapMapModel_StringReaderCreator0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { int int0 = ApplyPatternAction . edgeWidthStringToInt ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int edgeWidthStringToInt ( String value ) { if ( value = = null ) { return EdgeAdapter . DEFAULT_WIDTH ; } if ( value . equals ( EdgeAdapter . EDGE_WIDTH_THIN_STRING ) ) { return EdgeAdapter . WIDTH_THIN ; } return Integer . valueOf ( value ) . intValue ( ) ; }
void test2 ( ) throws Throwable { int int0 = ApplyPatternAction . edgeWidthStringToInt ( "thin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int edgeWidthStringToInt ( String value ) { if ( value = = null ) { return EdgeAdapter . DEFAULT_WIDTH ; } if ( value . equals ( EdgeAdapter . EDGE_WIDTH_THIN_STRING ) ) { return EdgeAdapter . WIDTH_THIN ; } return Integer . valueOf ( value ) . intValue ( ) ; }
void test3 ( ) throws Throwable { String string0 = ApplyPatternAction . edgeWidthIntToString ( ( - 850 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String edgeWidthIntToString ( int value ) { if ( value = = EdgeAdapter . DEFAULT_WIDTH ) { return null ; } if ( value = = EdgeAdapter . WIDTH_THIN ) { return EdgeAdapter . EDGE_WIDTH_THIN_STRING ; } return Integer . toString ( value ) ; }
void test4 ( ) throws Throwable { String string0 = ApplyPatternAction . edgeWidthIntToString ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String edgeWidthIntToString ( int value ) { if ( value = = EdgeAdapter . DEFAULT_WIDTH ) { return null ; } if ( value = = EdgeAdapter . WIDTH_THIN ) { return EdgeAdapter . EDGE_WIDTH_THIN_STRING ; } return Integer . toString ( value ) ; }
void test0 ( ) throws Throwable { ColorProperty colorProperty0 = new ColorProperty ( "" , "" , "T%l = 7Yhrw < 1F" , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { ColorProperty colorProperty0 = new ColorProperty ( "" , "" , "" , ( TextTranslator ) null ) ; String string0 = colorProperty0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test2 ( ) throws Throwable { ColorProperty colorProperty0 = new ColorProperty ( "" , "" , "T%l = 7Yhrw < 1F" , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test3 ( ) throws Throwable { ColorProperty colorProperty0 = new ColorProperty ( "" , "" , "T%l = 7Yhrw < 1F" , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layout ( ) { int contentHeight = getChildContentHeight ( true ) ; int childVerticalShift = getChildVerticalShift ( true ) ; int childHorizontalShift = getChildHorizontalShift ( ) ; int x = Math . max ( getSpaceAround ( ) , - childHorizontalShift ) ; if ( getView ( ) . isContentVisible ( ) ) { getContent ( ) . setVisible ( true ) ; Dimension contentPreferredSize = getContent ( ) . getPreferredSize ( ) ; childVerticalShift + = ( contentPreferredSize . height - contentHeight ) / 2 ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , contentPreferredSize . width , contentPreferredSize . height ) ; } else { getContent ( ) . setVisible ( false ) ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , 0 , contentHeight ) ; } placeLeftChildren ( childVerticalShift ) ; }
void test4 ( ) throws Throwable { ColorProperty colorProperty0 = new ColorProperty ( "" , "" , "" , ( TextTranslator ) null ) ; colorProperty0 . setValue ( "#000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test5 ( ) throws Throwable { ColorProperty colorProperty0 = new ColorProperty ( "" , "" , "T%l = 7Yhrw < 1F" , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test0 ( ) throws Throwable { FilterAlphaRable filterAlphaRable0 = new FilterAlphaRable ( ( Filter ) null ) ; Vector < Object > vector0 = filterAlphaRable0 . getSources ( ) ; IconProperty iconProperty0 = new IconProperty ( " ) " , "` = o ? ) q ] [ < mFh" , ( FreeMindMain ) null , ( Vector ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { FilterAlphaRable filterAlphaRable0 = new FilterAlphaRable ( ( Filter ) null ) ; Vector < Object > vector0 = filterAlphaRable0 . getSources ( ) ; IconProperty iconProperty0 = new IconProperty ( " ) " , "` = o ? ) q ] [ < mFh" , ( FreeMindMain ) null , ( Vector ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test2 ( ) throws Throwable { FilterAlphaRable filterAlphaRable0 = new FilterAlphaRable ( ( Filter ) null ) ; Vector < Object > vector0 = filterAlphaRable0 . getSources ( ) ; IconProperty iconProperty0 = new IconProperty ( " ) " , "` = o ? ) q ] [ < mFh" , ( FreeMindMain ) null , ( Vector ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { StringProperty stringProperty0 = new StringProperty ( "7Fzs" , "7Fzs" ) ; String string0 = stringProperty0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test2 ( ) throws Throwable { StringProperty stringProperty0 = new StringProperty ( "7Fzs" , "7Fzs" ) ; String string0 = stringProperty0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test3 ( ) throws Throwable { StringProperty stringProperty0 = new StringProperty ( ( String ) null , ( String ) null ) ; stringProperty0 . setEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test4 ( ) throws Throwable { StringProperty stringProperty0 = new StringProperty ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test3 ( ) throws Throwable { XmlBindingTools xmlBindingTools0 = XmlBindingTools . getInstance ( ) ; XmlAction xmlAction0 = XmlAction . JiBX_binding_newinstance_1_0 ( ( UnmarshallingContext ) null ) ; String string0 = xmlBindingTools0 . marshall ( xmlAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String marshall ( XmlAction action ) { return XmlBindingTools . getInstance ( ) . marshall ( action ) ; }
void test0 ( ) throws Throwable { DontShowNotificationProperty dontShowNotificationProperty0 = new DontShowNotificationProperty ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test0 ( ) throws Throwable { PasswordProperty passwordProperty0 = new PasswordProperty ( "\" > v''VjLui + j" , "\" > v''VjLui + j" ) ; passwordProperty0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { DontShowNotificationProperty dontShowNotificationProperty0 = new DontShowNotificationProperty ( "G . g$" , "" ) ; BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI ( ) ; dontShowNotificationProperty0 . addPropertyChangeListener ( ( PropertyChangeListener ) basicRootPaneUI0 ) ; dontShowNotificationProperty0 . firePropertyChangeEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test0 ( ) throws Throwable { FontProperty fontProperty0 = new FontProperty ( " ; $ ( i" , " ; $ ( i" , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test1 ( ) throws Throwable { FontProperty fontProperty0 = new FontProperty ( "oC } o5 * cLV { ; IL" , "oC } o5 * cLV { ; IL" , ( TextTranslator ) null ) ; fontProperty0 . setEnabled ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test2 ( ) throws Throwable { FontProperty fontProperty0 = new FontProperty ( "oC } o5 * cLV { ; IL" , "oC } o5 * cLV { ; IL" , ( TextTranslator ) null ) ; String string0 = fontProperty0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test4 ( ) throws Throwable { FontProperty fontProperty0 = new FontProperty ( "PakTypeNaqsh" , "PakTypeNaqsh" , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test0 ( ) throws Throwable { NextLineProperty nextLineProperty0 = new NextLineProperty ( ) ; FormLayout formLayout0 = new FormLayout ( "" ) ; DefaultFormBuilder defaultFormBuilder0 = new DefaultFormBuilder ( formLayout0 ) ; nextLineProperty0 . layout ( defaultFormBuilder0 , ( TextTranslator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layout ( ) { int contentHeight = getChildContentHeight ( true ) ; int childVerticalShift = getChildVerticalShift ( true ) ; int childHorizontalShift = getChildHorizontalShift ( ) ; int x = Math . max ( getSpaceAround ( ) , - childHorizontalShift ) ; if ( getView ( ) . isContentVisible ( ) ) { getContent ( ) . setVisible ( true ) ; Dimension contentPreferredSize = getContent ( ) . getPreferredSize ( ) ; childVerticalShift + = ( contentPreferredSize . height - contentHeight ) / 2 ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , contentPreferredSize . width , contentPreferredSize . height ) ; } else { getContent ( ) . setVisible ( false ) ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , 0 , contentHeight ) ; } placeLeftChildren ( childVerticalShift ) ; }
void test1 ( ) throws Throwable { NextLineProperty nextLineProperty0 = new NextLineProperty ( ) ; String string0 = nextLineProperty0 . getLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test2 ( ) throws Throwable { NextLineProperty nextLineProperty0 = new NextLineProperty ( ) ; nextLineProperty0 . setEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test3 ( ) throws Throwable { NextLineProperty nextLineProperty0 = new NextLineProperty ( ) ; String string0 = nextLineProperty0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test0 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test1 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "wd_y , k" , "wd_y , k" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test2 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "wd_y , k" , "wd_y , k" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layout ( ) { int contentHeight = getChildContentHeight ( true ) ; int childVerticalShift = getChildVerticalShift ( true ) ; int childHorizontalShift = getChildHorizontalShift ( ) ; int x = Math . max ( getSpaceAround ( ) , - childHorizontalShift ) ; if ( getView ( ) . isContentVisible ( ) ) { getContent ( ) . setVisible ( true ) ; Dimension contentPreferredSize = getContent ( ) . getPreferredSize ( ) ; childVerticalShift + = ( contentPreferredSize . height - contentHeight ) / 2 ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , contentPreferredSize . width , contentPreferredSize . height ) ; } else { getContent ( ) . setVisible ( false ) ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , 0 , contentHeight ) ; } placeLeftChildren ( childVerticalShift ) ; }
void test3 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test4 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( int row , Object newValue ) { Attribute attr = ( Attribute ) attributes . get ( row ) ; attr . setValue ( newValue . toString ( ) ) ; fireTableRowsUpdated ( row , row ) ; }
void test5 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test6 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "%yUm" , "%yUm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( int row , Object newValue ) { Attribute attr = ( Attribute ) attributes . get ( row ) ; attr . setValue ( newValue . toString ( ) ) ; fireTableRowsUpdated ( row , row ) ; }
void test7 ( ) throws Throwable { BooleanProperty booleanProperty0 = new BooleanProperty ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 85 , ( - 1 ) ) ; UnicodeReader unicodeReader0 = new UnicodeReader ( ( InputStream ) byteArrayInputStream0 , "_ W > [ BhU" ) ; String string0 = unicodeReader0 . getDefaultEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultEncoding ( ) { return defaultEnc ; }
void test2 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; UnicodeReader unicodeReader0 = new UnicodeReader ( ( InputStream ) pipedInputStream0 , "" ) ; String string0 = unicodeReader0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { if ( internalIn2 = = null ) return null ; return internalIn2 . getEncoding ( ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 ) ; UnicodeReader unicodeReader0 = new UnicodeReader ( ( InputStream ) pushbackInputStream0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( char [ ] cbuf , int off , int len ) throws IOException { init ( ) ; return internalIn2 . read ( cbuf , off , len ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 0 ] = ( byte ) ( - 12 ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 ) ; UnicodeReader unicodeReader0 = new UnicodeReader ( ( InputStream ) pushbackInputStream0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( char [ ] cbuf , int off , int len ) throws IOException { init ( ) ; return internalIn2 . read ( cbuf , off , len ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; Rectangle rectangle0 = new Rectangle ( 0 , 0 , 0 , ( - 1257 ) ) ; TurbulenceRable8Bit turbulenceRable8Bit0 = new TurbulenceRable8Bit ( ( Rectangle2D ) rectangle0 ) ; Vector < RenderableImage > vector0 = turbulenceRable8Bit0 . getSources ( ) ; ComboProperty comboProperty0 = new ComboProperty ( "" , "http : / / www . w3 . org / TR / XPTR" , stringArray0 , ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; Resources resources0 = Resources . getInstance ( ) ; ComboProperty comboProperty0 = new ComboProperty ( " > 3OB5' = eNN ( T" , " > 3OB5' = eNN ( T" , stringArray0 , ( TextTranslator ) resources0 ) ; comboProperty0 . setEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test3 ( ) throws Throwable { XPathContext xPathContext0 = new XPathContext ( ) ; Stack < Object > stack0 = xPathContext0 . getAxesIteratorStackStacks ( ) ; ComboProperty comboProperty0 = new ComboProperty ( "4" , "4" , ( List ) stack0 , ( List ) stack0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = " > 3OB5' = eNN ( T" ; Resources resources0 = Resources . getInstance ( ) ; ComboProperty comboProperty0 = new ComboProperty ( " > 3OB5' = eNN ( T" , " > 3OB5' = eNN ( T" , stringArray0 , ( TextTranslator ) resources0 ) ; comboProperty0 . setValue ( " > 3OB5' = eNN ( T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test5 ( ) throws Throwable { XPathContext xPathContext0 = new XPathContext ( ) ; Stack < Object > stack0 = xPathContext0 . getAxesIteratorStackStacks ( ) ; ComboProperty comboProperty0 = new ComboProperty ( "4" , "4" , ( List ) stack0 , ( List ) stack0 ) ; comboProperty0 . setValue ( "menu_attributes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { PasswordProperty passwordProperty0 = new PasswordProperty ( "q#vQ : DF" , "q#vQ : DF" ) ; String string0 = passwordProperty0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test0 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( "_" , "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test1 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test2 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( "onmousemove" , "onmousemove" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test3 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( "gxad / u" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layout ( ) { int contentHeight = getChildContentHeight ( true ) ; int childVerticalShift = getChildVerticalShift ( true ) ; int childHorizontalShift = getChildHorizontalShift ( ) ; int x = Math . max ( getSpaceAround ( ) , - childHorizontalShift ) ; if ( getView ( ) . isContentVisible ( ) ) { getContent ( ) . setVisible ( true ) ; Dimension contentPreferredSize = getContent ( ) . getPreferredSize ( ) ; childVerticalShift + = ( contentPreferredSize . height - contentHeight ) / 2 ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , contentPreferredSize . width , contentPreferredSize . height ) ; } else { getContent ( ) . setVisible ( false ) ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , 0 , contentHeight ) ; } placeLeftChildren ( childVerticalShift ) ; }
void test4 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( int row , Object newValue ) { Attribute attr = ( Attribute ) attributes . get ( row ) ; attr . setValue ( newValue . toString ( ) ) ; fireTableRowsUpdated ( row , row ) ; }
void test5 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test6 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( "bz~gaO * cev9 | " , "bz~gaO * cev9 | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( int row , Object newValue ) { Attribute attr = ( Attribute ) attributes . get ( row ) ; attr . setValue ( newValue . toString ( ) ) ; fireTableRowsUpdated ( row , row ) ; }
void test7 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test8 ( ) throws Throwable { ThreeCheckBoxProperty threeCheckBoxProperty0 = new ThreeCheckBoxProperty ( "bz~gaO * cev9 | " , "bz~gaO * cev9 | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test0 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 1896 ) , ( - 1896 ) , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { return ( ( Integer ) ( spinner . getValue ( ) ) ) . intValue ( ) ; }
void test1 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 699 ) , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layout ( ) { int contentHeight = getChildContentHeight ( true ) ; int childVerticalShift = getChildVerticalShift ( true ) ; int childHorizontalShift = getChildHorizontalShift ( ) ; int x = Math . max ( getSpaceAround ( ) , - childHorizontalShift ) ; if ( getView ( ) . isContentVisible ( ) ) { getContent ( ) . setVisible ( true ) ; Dimension contentPreferredSize = getContent ( ) . getPreferredSize ( ) ; childVerticalShift + = ( contentPreferredSize . height - contentHeight ) / 2 ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , contentPreferredSize . width , contentPreferredSize . height ) ; } else { getContent ( ) . setVisible ( false ) ; int y = Math . max ( getSpaceAround ( ) , - childVerticalShift ) ; getContent ( ) . setBounds ( x , y , 0 , contentHeight ) ; } placeLeftChildren ( childVerticalShift ) ; }
void test2 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 1896 ) , ( - 1896 ) , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { return ( ( Integer ) ( spinner . getValue ( ) ) ) . intValue ( ) ; }
void test3 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 1896 ) , ( - 1896 ) , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test4 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 1896 ) , ( - 1896 ) , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { return ( ( Integer ) ( spinner . getValue ( ) ) ) . intValue ( ) ; }
void test5 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 1896 ) , ( - 1896 ) , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { return ( ( Integer ) ( spinner . getValue ( ) ) ) . intValue ( ) ; }
void test6 ( ) throws Throwable { NumberProperty numberProperty0 = new NumberProperty ( "" , "" , ( - 1896 ) , ( - 1896 ) , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { return ( ( Integer ) ( spinner . getValue ( ) ) ) . intValue ( ) ; }
void test0 ( ) throws Throwable { Resources resources0 = Resources . getInstance ( ) ; OptionalDontShowMeAgainDialog . StandardPropertyHandler optionalDontShowMeAgainDialog_StandardPropertyHandler0 = new OptionalDontShowMeAgainDialog . StandardPropertyHandler ( ( Controller ) null , "gh@'ans" ) ; OptionalDontShowMeAgainDialog optionalDontShowMeAgainDialog0 = new OptionalDontShowMeAgainDialog ( ( JFrame ) null , ( Component ) null , "gh@'ans" , "gh@'ans" , ( TextTranslator ) resources0 , ( OptionalDontShowMeAgainDialog . DontShowPropertyHandler ) optionalDontShowMeAgainDialog_StandardPropertyHandler0 , ( - 385 ) ) ; int int0 = optionalDontShowMeAgainDialog0 . getResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResult ( ) { return result ; }
void test0 ( ) throws Throwable { SeparatorProperty separatorProperty0 = new SeparatorProperty ( ( String ) null ) ; separatorProperty0 . setEnabled ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test1 ( ) throws Throwable { SeparatorProperty separatorProperty0 = new SeparatorProperty ( ( String ) null ) ; String string0 = separatorProperty0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test0 ( ) throws Throwable { NamedObject namedObject0 = NamedObject . literal ( " : Y'3\"3h" ) ; String string0 = ( String ) namedObject0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) { return object ; }
void test1 ( ) throws Throwable { NamedObject namedObject0 = new NamedObject ( ( Object ) " : Y'3\"3h" , " : Y'3\"3h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { NamedObject namedObject0 = NamedObject . literal ( " : Y'3\"3h" ) ; String string0 = namedObject0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test3 ( ) throws Throwable { NamedObject namedObject0 = NamedObject . literal ( " : Y'3\"3h" ) ; boolean boolean0 = namedObject0 . equals ( ( Object ) " : Y'3\"3h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( StringBuffer givenPassword , StringBuffer password2 ) { if ( givenPassword . length ( ) ! = password . length ( ) ) return false ; for ( int i = 0 ; i < password2 . length ( ) ; i + + ) { char c1 = password2 . charAt ( i ) ; char c2 = givenPassword . charAt ( i ) ; if ( c1 ! = c2 ) return false ; } return true ; }
void test4 ( ) throws Throwable { NamedObject namedObject0 = NamedObject . literal ( " : Y'3\"3h" ) ; boolean boolean0 = namedObject0 . equals ( ( Object ) namedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( StringBuffer givenPassword , StringBuffer password2 ) { if ( givenPassword . length ( ) ! = password . length ( ) ) return false ; for ( int i = 0 ; i < password2 . length ( ) ; i + + ) { char c1 = password2 . charAt ( i ) ; char c2 = givenPassword . charAt ( i ) ; if ( c1 ! = c2 ) return false ; } return true ; }
void test0 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; mapNodePositionHolder0 . registerFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onUpdateNodeHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test3 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; mapNodePositionHolder0 . onAddChildren ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test4 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onViewRemovedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test5 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onRemoveChildren ( ( MindMapNode ) null , ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test6 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . executeTransaction ( ( ActionPair ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test8 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onNewChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test9 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; XMLElement xMLElement0 = new XMLElement ( false ) ; permanentNodeHookAdapter0 . loadFrom ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test10 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test11 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onUpdateChildrenHook ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test12 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . deregisterFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test13 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onViewCreatedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test14 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; ActionPair actionPair0 = permanentNodeHookAdapter0 . filterAction ( ( ActionPair ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionPair filterAction ( ActionPair pair ) ; / * * * @author foltin This is a marker interface . Final Action Filter are always * called last and * should * not alter the action pair . * / interface FinalActionFilter extends ActionFilter { }
void test15 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onAddChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test16 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onRemoveChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test17 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . shutdownMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test18 ( ) throws Throwable { PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter ( ) ; permanentNodeHookAdapter0 . onLostFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { PermanentNodeHookSubstituteUnknown permanentNodeHookSubstituteUnknown0 = new PermanentNodeHookSubstituteUnknown ( " * 4Z4PZG ( att : q`#5^q" ) ; XMLElement xMLElement0 = new XMLElement ( true ) ; permanentNodeHookSubstituteUnknown0 . loadFrom ( xMLElement0 ) ; xMLElement0 . addChild ( xMLElement0 ) ; permanentNodeHookSubstituteUnknown0 . save ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countChildren ( ) { return this . children . size ( ) ; }
void test0 ( ) throws Throwable { HookAdapter hookAdapter0 = new HookAdapter ( ) ; hookAdapter0 . shutdownMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test3 ( ) throws Throwable { ExportHook exportHook0 = new ExportHook ( ) ; exportHook0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; String string0 = socketConnectionHook0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test7 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . setPluginBaseClass ( ( MindMapHook . PluginBaseClassSearcher ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test8 ( ) throws Throwable { HookAdapter hookAdapter0 = new HookAdapter ( ) ; hookAdapter0 . setController ( ( ModeController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; Properties properties0 = mindMapMaster0 . getProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . setProperties ( ( Properties ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test1 ( ) throws Throwable { PermanentNodeHookSubstituteUnknown permanentNodeHookSubstituteUnknown0 = new PermanentNodeHookSubstituteUnknown ( "I8HpM + " ) ; permanentNodeHookSubstituteUnknown0 . shutdownMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; MindMap mindMap0 = mindMapMaster0 . getMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; MindMapNode mindMapNode0 = mindMapMaster0 . getNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test4 ( ) throws Throwable { PermanentNodeHookSubstituteUnknown permanentNodeHookSubstituteUnknown0 = new PermanentNodeHookSubstituteUnknown ( "filetypes" ) ; permanentNodeHookSubstituteUnknown0 . invoke ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { BrowseHookFactory browseHookFactory0 = new BrowseHookFactory ( ) ; HookFactory . RegistrationContainer hookFactory_RegistrationContainer0 = new HookFactory . RegistrationContainer ( ) ; browseHookFactory0 . registerRegistrationContainer ( hookFactory_RegistrationContainer0 , ( HookRegistration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void registerRegistrationContainer ( HookFactory . RegistrationContainer container , HookRegistration instanciatedRegistrationObject ) ; void deregisterAllRegistrationContainer ( ) ; / * * * A plugin base class is a common registration class of multiple plugins . * It is useful to embrace several related plugins ( example : EncryptedNote * - > Registration ) . * * @return the base class if declared and successfully instanciated or NULL . * / Object getPluginBaseClass ( String hookName ) ; }
void test0 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = HookInstanciationMethod . getAllInstanciationMethods ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return elements . size ( ) ; }
void test1 ( ) throws Throwable { HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod . Other ; boolean boolean0 = hookInstanciationMethod0 . isUndoable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUndoable ( ) { return isUndoable ; }
void test2 ( ) throws Throwable { HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod . OnceForAllNodes ; boolean boolean0 = hookInstanciationMethod0 . isSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingleton ( ) { return isSingleton ; }
void test3 ( ) throws Throwable { HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod . Other ; Vector < Object > vector0 = new Vector < Object > ( ) ; Collection < Object > collection0 = hookInstanciationMethod0 . getDestinationNodes ( ( ModeController ) null , ( MindMapNode ) null , ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getDestinationNodes ( ModeController controller , MindMapNode focussed , List selecteds ) { return getter . getDestinationNodes ( controller , focussed , selecteds ) ; }
void test4 ( ) throws Throwable { HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod . Other ; Vector < Object > vector0 = new Vector < Object > ( ) ; MindMapNode mindMapNode0 = hookInstanciationMethod0 . getCenterNode ( ( ModeController ) null , ( MindMapNode ) null , ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MindMapNode getCenterNode ( ModeController controller , MindMapNode focussed , List selecteds ) { return getter . getCenterNode ( controller , focussed , selecteds ) ; }
void test5 ( ) throws Throwable { HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod . ApplyToRoot ; boolean boolean0 = hookInstanciationMethod0 . isPermanent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermanent ( ) { return isPermanent ; }
void test0 ( ) throws Throwable { ExportHook . ImageFilter exportHook_ImageFilter0 = new ExportHook . ImageFilter ( ( String ) null , ( String ) null ) ; String string0 = exportHook_ImageFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test2 ( ) throws Throwable { ExportHook . ImageFilter exportHook_ImageFilter0 = new ExportHook . ImageFilter ( "M" , "M" ) ; FileUtil fileUtil0 = FileUtil . getDefaultInstance ( ) ; File file0 = fileUtil0 . canonicalFile ( "M" ) ; boolean boolean0 = exportHook_ImageFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f ! = null ) { if ( f . isDirectory ( ) ) { return true ; } String extension = getExtension ( f ) ; if ( extension ! = null & & filters . get ( getExtension ( f ) ) ! = null ) { return true ; } ; } return false ; }
void test3 ( ) throws Throwable { ExportHook . ImageFilter exportHook_ImageFilter0 = new ExportHook . ImageFilter ( "M" , "M" ) ; FileUtil fileUtil0 = FileUtil . getDefaultInstance ( ) ; File file0 = fileUtil0 . canonicalFile ( "M" ) ; File file1 = file0 . getParentFile ( ) ; boolean boolean0 = exportHook_ImageFilter0 . accept ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f ! = null ) { if ( f . isDirectory ( ) ) { return true ; } String extension = getExtension ( f ) ; if ( extension ! = null & & filters . get ( getExtension ( f ) ) ! = null ) { return true ; } ; } return false ; }
void test4 ( ) throws Throwable { ExportHook . ImageFilter exportHook_ImageFilter0 = new ExportHook . ImageFilter ( "M" , "M" ) ; String string0 = exportHook_ImageFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test5 ( ) throws Throwable { ExportHook exportHook0 = new ExportHook ( ) ; exportHook0 . copyFromResource ( "r & gYS^ ) } " , "r & gYS^ ) } " , "r & gYS^ ) } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test6 ( ) throws Throwable { ExportHook exportHook0 = new ExportHook ( ) ; exportHook0 . copyFromFile ( "r & gYS^ ) } " , "r & gYS^ ) } " , "r & gYS^ ) } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { EncryptNode encryptNode0 = new EncryptNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { RevisionPlugin revisionPlugin0 = new RevisionPlugin ( ) ; revisionPlugin0 . startTransaction ( "V~^bL . @%pl1s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startTransaction ( String name ) { }
void test2 ( ) throws Throwable { RevisionPlugin revisionPlugin0 = new RevisionPlugin ( ) ; revisionPlugin0 . endTransaction ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test4 ( ) throws Throwable { RevisionPlugin revisionPlugin0 = new RevisionPlugin ( ) ; revisionPlugin0 . executeAction ( ( XmlAction ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void executeAction ( XmlAction action ) { ActorXml actor = factory . getActor ( action ) ; / / exception handling is done by the caller . actor . act ( action ) ; }
void test3 ( ) throws Throwable { ClonePlugin clonePlugin0 = ClonePasteAction . getHook ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClonePlugin getHook ( MindMapNode originalNode ) { if ( originalNode = = null ) { return null ; } for ( Iterator it2 = originalNode . getActivatedHooks ( ) . iterator ( ) ; it2 . hasNext ( ) ; ) { PermanentNodeHook hook = ( PermanentNodeHook ) it2 . next ( ) ; if ( hook instanceof ClonePlugin ) { ClonePlugin cloneHook = ( ClonePlugin ) hook ; return cloneHook ; } } return null ; }
void test0 ( ) throws Throwable { ApplyFormatPlugin applyFormatPlugin0 = new ApplyFormatPlugin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { BlinkingNodeHook blinkingNodeHook0 = new BlinkingNodeHook ( ) ; BlinkingNodeHook . TimerColorChanger blinkingNodeHook_TimerColorChanger0 = blinkingNodeHook0 . new TimerColorChanger ( ) ; blinkingNodeHook_TimerColorChanger0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void run ( ) { for ( ; ; ) { if ( abort ) return ; Socket client = null ; try { client = socket . accept ( ) ; / / Stop script kiddies from opening the edit / / server port and just leaving it open , as a / / DoS client . setSoTimeout ( 1000 ) ; logger . info ( client + " : connected" ) ; DataInputStream in = new DataInputStream ( client . getInputStream ( ) ) ; if ( ! handleClient ( client , in ) ) abort = true ; } catch ( Exception e ) { if ( ! abort ) logger . info ( "" + e ) ; abort = true ; } finally { / * * if ( client ! = null ) { try { client . close ( ) ; } catch ( Exception * e ) { logger . info ( e ) ; } * * client = null ; } * / } } }
void test0 ( ) throws Throwable { NewParentNode newParentNode0 = new NewParentNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { AutomaticLayout . StylePatternProperty automaticLayout_StylePatternProperty0 = new AutomaticLayout . StylePatternProperty ( "" , "" , ( TextTranslator ) null , ( MindMapController ) null ) ; String string0 = automaticLayout_StylePatternProperty0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test1 ( ) throws Throwable { AutomaticLayout . StylePatternProperty automaticLayout_StylePatternProperty0 = new AutomaticLayout . StylePatternProperty ( "e / / Jm~c\"y ? ) " , "e / / Jm~c\"y ? ) " , ( TextTranslator ) null , ( MindMapController ) null ) ; automaticLayout_StylePatternProperty0 . setEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test2 ( ) throws Throwable { AutomaticLayout . StylePatternProperty automaticLayout_StylePatternProperty0 = new AutomaticLayout . StylePatternProperty ( "e / / Jm~c\"y ? ) " , "e / / Jm~c\"y ? ) " , ( TextTranslator ) null , ( MindMapController ) null ) ; String string0 = automaticLayout_StylePatternProperty0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { if ( fullDescription = = null ) { if ( description = = null | | isExtensionListInDescription ( ) ) { fullDescription = description = = null ? " ( " : description + " ( " ; / / build the description from the extension list Enumeration extensions = filters . keys ( ) ; if ( extensions ! = null ) { fullDescription + = " . " + ( String ) extensions . nextElement ( ) ; while ( extensions . hasMoreElements ( ) ) { fullDescription + = " , . " + ( String ) extensions . nextElement ( ) ; } } fullDescription + = " ) " ; } else { fullDescription = description ; } } return fullDescription ; }
void test4 ( ) throws Throwable { AutomaticLayout . StylePatternProperty automaticLayout_StylePatternProperty0 = new AutomaticLayout . StylePatternProperty ( "" , "" , ( TextTranslator ) null , ( MindMapController ) null ) ; String string0 = automaticLayout_StylePatternProperty0 . getLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test9 ( ) throws Throwable { AutomaticLayout . StylePatternListProperty automaticLayout_StylePatternListProperty0 = new AutomaticLayout . StylePatternListProperty ( "main / search / . " , "main / search / . " , ( TextTranslator ) null , ( MindMapController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( MindMapNode target ) { ID_BasicState state = getState ( target ) ; if ( getState ( target ) instanceof ID_Registered ) { return ( ( ID_Registered ) state ) . getID ( ) ; } return null ; }
void test10 ( ) throws Throwable { AutomaticLayout . StylePatternListProperty automaticLayout_StylePatternListProperty0 = new AutomaticLayout . StylePatternListProperty ( "main / search / . " , "main / search / . " , ( TextTranslator ) null , ( MindMapController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( int row , Object newValue ) { Attribute attr = ( Attribute ) attributes . get ( row ) ; attr . setValue ( newValue . toString ( ) ) ; fireTableRowsUpdated ( row , row ) ; }
void test0 ( ) throws Throwable { SortNodes sortNodes0 = new SortNodes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . onPreDeleteNode ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . onSaveNode ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test4 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . onPostDeleteNode ( ( MindMapNode ) null , ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test7 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . onUpdateNodeHook ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test9 ( ) throws Throwable { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; clonePlugin0 . onSelectionChange ( ( NodeView ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ClonePlugin clonePlugin0 = new ClonePlugin ( ) ; MindMapClient mindMapClient0 = new MindMapClient ( ) ; ActionPair actionPair0 = mindMapClient0 . getEmptyActionPair ( ) ; ActionPair actionPair1 = clonePlugin0 . filterAction ( actionPair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test0 ( ) throws Throwable { ExportWithXSLT exportWithXSLT0 = new ExportWithXSLT ( ) ; boolean boolean0 = exportWithXSLT0 . isTransformResultWithoutError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTransformResultWithoutError ( ) { return mTransformResultWithoutError ; }
void test1 ( ) throws Throwable { ExportWithXSLT exportWithXSLT0 = new ExportWithXSLT ( ) ; RowInputBinary rowInputBinary0 = new RowInputBinary ( ) ; File file0 = OsmFileCacheTileLoader . getDefaultCacheDir ( ) ; boolean boolean0 = exportWithXSLT0 . transform ( ( Source ) null , ( InputStream ) rowInputBinary0 , file0 , "icoX_Lostio" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTransformResultWithoutError ( ) { return mTransformResultWithoutError ; }
void test0 ( ) throws Throwable { ShowCloneNodes showCloneNodes0 = new ShowCloneNodes ( ) ; PadMode padMode0 = PadMode . ZERO_PAD ; PadRable8Bit padRable8Bit0 = new PadRable8Bit ( ( Filter ) null , ( Rectangle2D ) null , padMode0 ) ; Vector < RenderableImage > vector0 = padRable8Bit0 . getSources ( ) ; showCloneNodes0 . addClonesToList ( ( Vector ) vector0 , ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { SplitNode splitNode0 = new SplitNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { SaveAll saveAll0 = new SaveAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { IconSelectionPlugin iconSelectionPlugin0 = new IconSelectionPlugin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { FormularEditor formularEditor0 = new FormularEditor ( ) ; formularEditor0 . onLostFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { FormularEditor formularEditor0 = new FormularEditor ( ) ; formularEditor0 . shutdownMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { FormularEditor formularEditor0 = new FormularEditor ( ) ; XMLElement xMLElement0 = new XMLElement ( ) ; formularEditor0 . loadFrom ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test3 ( ) throws Throwable { FormularEditor formularEditor0 = new FormularEditor ( ) ; formularEditor0 . setName ( "UndeclaredElementInContentSpec" ) ; XMLElement xMLElement0 = new XMLElement ( false ) ; formularEditor0 . save ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return this . contents ; }
void test0 ( ) throws Throwable { FitToPage fitToPage0 = new FitToPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ShadowClonePlugin shadowClonePlugin0 = new ShadowClonePlugin ( ) ; shadowClonePlugin0 . setOriginalNodeId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { ShadowClonePlugin shadowClonePlugin0 = new ShadowClonePlugin ( ) ; shadowClonePlugin0 . shutdownMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ImportMindmanagerFiles importMindmanagerFiles0 = new ImportMindmanagerFiles ( ) ; DOMSource dOMSource0 = new DOMSource ( ) ; String string0 = importMindmanagerFiles0 . transForm ( ( Source ) dOMSource0 , ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void transForm ( Source xmlSource , InputStream xsltStream , File resultFile , String areaCode ) { / / System . out . println ( "set xsl" ) ; Source xsltSource = new StreamSource ( xsltStream ) ; / / System . out . println ( "set result" ) ; Result result = new StreamResult ( resultFile ) ; / / create an instance of TransformerFactory try { / / System . out . println ( "make transform instance" ) ; TransformerFactory transFact = TransformerFactory . newInstance ( ) ; Transformer trans = transFact . newTransformer ( xsltSource ) ; / / set parameter : / / relative directory < filename > _files trans . setParameter ( "destination_dir" , resultFile . getName ( ) + "_files / " ) ; trans . setParameter ( "area_code" , areaCode ) ; trans . setParameter ( "folding_type" , getController ( ) . getFrame ( ) . getProperty ( "html_export_folding" ) ) ; trans . transform ( xmlSource , result ) ; } catch ( Exception e ) { / / System . err . println ( "error applying the xslt file " + e ) ; freemind . main . Resources . getInstance ( ) . logException ( e ) ; } ; return ; }
void test0 ( ) throws Throwable { JumpLastEditLocation jumpLastEditLocation0 = new JumpLastEditLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ChangeNodeLevelAction changeNodeLevelAction0 = new ChangeNodeLevelAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ManagePatterns managePatterns0 = new ManagePatterns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { RemoveNote removeNote0 = new RemoveNote ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { FormatPaste formatPaste0 = new FormatPaste ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { NodeHistory nodeHistory0 = new NodeHistory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { LogFileViewer . Registration logFileViewer_Registration0 = new LogFileViewer . Registration ( ( ModeController ) null , ( MindMap ) null ) ; logFileViewer_Registration0 . register ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void register ( KeyListener listener ) { this . mListener = listener ; }
void test1 ( ) throws Throwable { LogFileViewer . Registration logFileViewer_Registration0 = new LogFileViewer . Registration ( ( ModeController ) null , ( MindMap ) null ) ; logFileViewer_Registration0 . deRegister ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deRegister ( ) ; }
void test2 ( ) throws Throwable { LogFileViewer . Registration logFileViewer_Registration0 = new LogFileViewer . Registration ( ( ModeController ) null , ( MindMap ) null ) ; boolean boolean0 = logFileViewer_Registration0 . isPrintActionActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { LogFileViewer logFileViewer0 = new LogFileViewer ( ) ; logFileViewer0 . beforeMapModuleChange ( ( MapModule ) null , ( Mode ) null , ( MapModule ) null , ( Mode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test7 ( ) throws Throwable { LogFileViewer logFileViewer0 = new LogFileViewer ( ) ; boolean boolean0 = logFileViewer0 . isMapModuleChangeAllowed ( ( MapModule ) null , ( Mode ) null , ( MapModule ) null , ( Mode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMapModuleChangeAllowed ( MapModule oldMapModule , Mode oldMode , MapModule newMapModule , Mode newMode ) { return true ; }
void test8 ( ) throws Throwable { LogFileViewer logFileViewer0 = new LogFileViewer ( ) ; Logger logger0 = logFileViewer0 . getBaseLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Logger getBaseLogger ( ) { return logger . getParent ( ) ; }
void test10 ( ) throws Throwable { LogFileViewer logFileViewer0 = new LogFileViewer ( ) ; logFileViewer0 . numberOfOpenMapInformation ( 485 , 485 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test12 ( ) throws Throwable { LogFileViewer logFileViewer0 = new LogFileViewer ( ) ; LogFileLogHandler logFileLogHandler0 = logFileViewer0 . getBaseHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LogFileLogHandler getBaseHandler ( ) { for ( int i = 0 ; i < logger . getHandlers ( ) . length ; i + + ) { Handler handler = logger . getHandlers ( ) [ i ] ; if ( handler instanceof LogFileLogHandler ) { LogFileLogHandler logHandler = ( LogFileLogHandler ) handler ; return logHandler ; } } return null ; }
void test0 ( ) throws Throwable { ArrayListTransferHandler arrayListTransferHandler0 = new ArrayListTransferHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( JComponent c , Transferable t ) { JList target = null ; ArrayList alist = null ; if ( ! canImport ( c , t . getTransferDataFlavors ( ) ) ) { return false ; } try { target = ( JList ) c ; if ( hasLocalArrayListFlavor ( t . getTransferDataFlavors ( ) ) ) { alist = ( ArrayList ) t . getTransferData ( localArrayListFlavor ) ; } else { return false ; } } catch ( UnsupportedFlavorException ufe ) { System . out . println ( "importData : unsupported data flavor" ) ; return false ; } catch ( IOException ioe ) { System . out . println ( "importData : I / O exception" ) ; return false ; } / / At this point we use the same code to retrieve the data / / locally or serially . / / We'll drop at the current selected index . int index = target . getSelectedIndex ( ) ; / / Prevent the user from dropping data back on itself . / / For example , if the user is moving items #4 , #5 , #6 and #7 and / / attempts to insert the items after item #5 , this would / / be problematic when removing the original items . / / This is interpreted as dropping the same data on itself / / and has no effect . if ( source . equals ( target ) ) { if ( indices ! = null & & index > = indices [ 0 ] - 1 & & index < = indices [ indices . length - 1 ] ) { indices = null ; return true ; } } PatternListModel listModel = ( PatternListModel ) target . getModel ( ) ; int max = listModel . getSize ( ) ; if ( index < 0 ) { index = max ; } else { index + + ; if ( index > max ) { index = max ; } } addIndex = index ; addCount = alist . size ( ) ; for ( int i = 0 ; i < alist . size ( ) ; i + + ) { listModel . add ( index + + , alist . get ( i ) ) ; } return true ; }
void test1 ( ) throws Throwable { ArrayListTransferHandler arrayListTransferHandler0 = new ArrayListTransferHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSourceActions ( JComponent c ) { return COPY_OR_MOVE ; }
void test2 ( ) throws Throwable { ArrayListTransferHandler arrayListTransferHandler0 = new ArrayListTransferHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( JComponent c , Transferable t ) { JList target = null ; ArrayList alist = null ; if ( ! canImport ( c , t . getTransferDataFlavors ( ) ) ) { return false ; } try { target = ( JList ) c ; if ( hasLocalArrayListFlavor ( t . getTransferDataFlavors ( ) ) ) { alist = ( ArrayList ) t . getTransferData ( localArrayListFlavor ) ; } else { return false ; } } catch ( UnsupportedFlavorException ufe ) { System . out . println ( "importData : unsupported data flavor" ) ; return false ; } catch ( IOException ioe ) { System . out . println ( "importData : I / O exception" ) ; return false ; } / / At this point we use the same code to retrieve the data / / locally or serially . / / We'll drop at the current selected index . int index = target . getSelectedIndex ( ) ; / / Prevent the user from dropping data back on itself . / / For example , if the user is moving items #4 , #5 , #6 and #7 and / / attempts to insert the items after item #5 , this would / / be problematic when removing the original items . / / This is interpreted as dropping the same data on itself / / and has no effect . if ( source . equals ( target ) ) { if ( indices ! = null & & index > = indices [ 0 ] - 1 & & index < = indices [ indices . length - 1 ] ) { indices = null ; return true ; } } PatternListModel listModel = ( PatternListModel ) target . getModel ( ) ; int max = listModel . getSize ( ) ; if ( index < 0 ) { index = max ; } else { index + + ; if ( index > max ) { index = max ; } } addIndex = index ; addCount = alist . size ( ) ; for ( int i = 0 ; i < alist . size ( ) ; i + + ) { listModel . add ( index + + , alist . get ( i ) ) ; } return true ; }
void test3 ( ) throws Throwable { ArrayListTransferHandler arrayListTransferHandler0 = new ArrayListTransferHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportDone ( JComponent c , Transferable data , int action ) { if ( ( action = = MOVE ) & & ( indices ! = null ) ) { PatternListModel model = ( PatternListModel ) source . getModel ( ) ; / / If we are moving items around in the same list , we / / need to adjust the indices accordingly since those / / after the insertion point have moved . if ( addCount > 0 ) { for ( int i = 0 ; i < indices . length ; i + + ) { if ( indices [ i ] > addIndex ) { indices [ i ] + = addCount ; } } } for ( int i = indices . length - 1 ; i > = 0 ; i - - ) model . remove ( indices [ i ] ) ; } indices = null ; addIndex = - 1 ; addCount = 0 ; }
void test4 ( ) throws Throwable { ArrayListTransferHandler arrayListTransferHandler0 = new ArrayListTransferHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transferable createTransferable ( JComponent c ) { if ( c instanceof JList ) { source = ( JList ) c ; indices = source . getSelectedIndices ( ) ; Object [ ] values = source . getSelectedValues ( ) ; if ( values = = null | | values . length = = 0 ) { return null ; } ArrayList alist = new ArrayList ( values . length ) ; for ( int i = 0 ; i < values . length ; i + + ) { Object o = values [ i ] ; String str = o . toString ( ) ; if ( str = = null ) str = "" ; alist . add ( str ) ; } return new ArrayListTransferable ( alist ) ; } return null ; }
void test5 ( ) throws Throwable { ArrayListTransferHandler arrayListTransferHandler0 = new ArrayListTransferHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException { if ( flavor . equals ( DataFlavor . imageFlavor ) ) { return imageContent ; } if ( flavor . equals ( DataFlavor . stringFlavor ) ) { return stringContent ; } if ( flavor . equals ( mindMapNodesFlavor ) ) { return nodesContent ; } if ( flavor . equals ( dropActionFlavor ) ) { return dropActionContent ; } if ( flavor . equals ( rtfFlavor ) ) { byte [ ] byteArray = rtfContent . getBytes ( ) ; / / for ( int i = 0 ; i < byteArray . length ; + + i ) { / / System . out . println ( byteArray [ i ] ) ; } return new ByteArrayInputStream ( byteArray ) ; } if ( flavor . equals ( htmlFlavor ) & & htmlContent ! = null ) { return htmlContent ; } if ( flavor . equals ( fileListFlavor ) ) { return fileList ; } if ( flavor . equals ( copyNodeIdsFlavor ) ) { return nodeIdsContent ; } throw new UnsupportedFlavorException ( flavor ) ; }
void test0 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test1 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test3 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test4 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test5 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test6 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test7 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test8 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test9 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test10 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test11 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLocale ( Locale l ) { if ( ! initialized ) { super . setLocale ( l ) ; } else { locale = l ; initNames ( ) ; } }
void test12 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test13 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test14 ( ) throws Throwable { JMonthChooser jMonthChooser0 = new JMonthChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test0 ( ) throws Throwable { TimeManagement timeManagement0 = new TimeManagement ( ) ; timeManagement0 . numberOfOpenMapInformation ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { TimeManagement timeManagement0 = new TimeManagement ( ) ; BrowseMode browseMode0 = new BrowseMode ( ) ; timeManagement0 . afterMapClose ( ( MapModule ) null , ( Mode ) browseMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test4 ( ) throws Throwable { TimeManagement timeManagement0 = new TimeManagement ( ) ; BrowseMode browseMode0 = new BrowseMode ( ) ; boolean boolean0 = timeManagement0 . isMapModuleChangeAllowed ( ( MapModule ) null , ( Mode ) null , ( MapModule ) null , ( Mode ) browseMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMapModuleChangeAllowed ( MapModule oldMapModule , Mode oldMode , MapModule newMapModule , Mode newMode ) { return true ; }
void test5 ( ) throws Throwable { TimeManagement timeManagement0 = new TimeManagement ( ) ; BrowseMode browseMode0 = new BrowseMode ( ) ; timeManagement0 . afterMapModuleChange ( ( MapModule ) null , ( Mode ) browseMode0 , ( MapModule ) null , ( Mode ) browseMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test7 ( ) throws Throwable { TimeManagement timeManagement0 = new TimeManagement ( ) ; PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent ( ( Object ) "stroke - dasharray" , "stroke - dasharray" , ( Object ) "stroke - dasharray" , ( Object ) "stroke - dasharray" ) ; timeManagement0 . propertyChange ( propertyChangeEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JCalendar ( ) { this ( null , null , true , true ) ; }
void test2 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , ( Locale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDate ( ) { return calendarWidget . getDate ( ) ; }
void test3 ( ) throws Throwable { FavoritesItem favoritesItem0 = new FavoritesItem ( ) ; Locale locale0 = favoritesItem0 . getLocale ( ) ; JCalendar jCalendar0 = new JCalendar ( locale0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test4 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , ( - 1082 ) , 0 , 0 , 0 ) ; JCalendar jCalendar0 = new JCalendar ( ( Calendar ) gregorianCalendar0 ) ; jCalendar0 . getDecorationBackgroundColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test5 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date setMaxSelectableDate ( Date max ) { if ( max = = null ) { maxSelectableDate = defaultMaxSelectableDate ; } else { maxSelectableDate = max ; } drawDays ( ) ; return maxSelectableDate ; }
void test6 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test7 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test8 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test9 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDaysInMonth ( ) { return calendar . getActualMaximum ( Calendar . DAY_OF_MONTH ) ; }
void test10 ( ) throws Throwable { Locale locale0 = Locale . ITALY ; JCalendar jCalendar0 = new JCalendar ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test11 ( ) throws Throwable { Locale locale0 = Locale . ITALY ; JCalendar jCalendar0 = new JCalendar ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date setMinSelectableDate ( Date min ) { if ( min = = null ) { minSelectableDate = defaultMinSelectableDate ; } else { minSelectableDate = min ; } drawDays ( ) ; return minSelectableDate ; }
void test12 ( ) throws Throwable { Locale locale0 = JComponent . getDefaultLocale ( ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( locale0 ) ; JCalendar jCalendar0 = new JCalendar ( ( Calendar ) gregorianCalendar0 ) ; jCalendar0 . setSelectableDateRange ( ( Date ) null , ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test13 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test14 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , ( - 1082 ) , 0 , 0 , 0 ) ; JCalendar jCalendar0 = new JCalendar ( ( Calendar ) gregorianCalendar0 ) ; jCalendar0 . setWeekdayForeground ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test15 ( ) throws Throwable { Locale locale0 = new Locale ( "oj2 - ( ? 9WM < " ) ; JCalendar jCalendar0 = new JCalendar ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test16 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test17 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test18 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test19 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test20 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , ( Locale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test21 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test23 ( ) throws Throwable { Locale locale0 = Locale . ITALY ; JCalendar jCalendar0 = new JCalendar ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test24 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test25 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ( Date ) null , ( Locale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test26 ( ) throws Throwable { JCalendar jCalendar0 = new JCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test27 ( ) throws Throwable { Locale locale0 = new Locale ( "oj2 - ( ? 9WM < " ) ; JCalendar jCalendar0 = new JCalendar ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test0 ( ) throws Throwable { JYearChooser jYearChooser0 = new JYearChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { JYearChooser jYearChooser0 = new JYearChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinimum ( ) { return min ; }
void test2 ( ) throws Throwable { JYearChooser jYearChooser0 = new JYearChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test3 ( ) throws Throwable { JYearChooser jYearChooser0 = new JYearChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test4 ( ) throws Throwable { JYearChooser jYearChooser0 = new JYearChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartYear ( ) { return getMinimum ( ) ; }
void test5 ( ) throws Throwable { JYearChooser jYearChooser0 = new JYearChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return super . getValue ( ) ; }
void test0 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test2 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ( - 130 ) , ( - 130 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setHorizontalAlignment ( int alignment ) { textField . setHorizontalAlignment ( alignment ) ; }
void test3 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinimum ( ) { return min ; }
void test4 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test5 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ( - 1 ) , ( - 83 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinimum ( ) { return min ; }
void test6 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinimum ( ) { return min ; }
void test7 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( 520 , 712 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test8 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ( - 17 ) , ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test9 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximum ( ) { return max ; }
void test10 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximum ( ) { return max ; }
void test11 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test12 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( 520 , 712 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test13 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinimum ( ) { return min ; }
void test14 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test15 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( int index ) { return ( ( MapElement ) elements . get ( index ) ) . getValue ( ) ; }
void test16 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test17 ( ) throws Throwable { JSpinField jSpinField0 = new JSpinField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinimum ( ) { return min ; }
void test0 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test1 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test2 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test3 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDecorationBordersVisible ( ) { return decorationBordersVisible ; }
void test4 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDecorationBackgroundVisible ( ) { return decorationBackgroundVisible ; }
void test5 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDaysInMonth ( ) { return calendar . getActualMaximum ( Calendar . DAY_OF_MONTH ) ; }
void test6 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDayBordersVisible ( ) { return dayBordersVisible ; }
void test7 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDayBordersVisible ( ) { return dayBordersVisible ; }
void test8 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDaysInMonth ( ) { return calendar . getActualMaximum ( Calendar . DAY_OF_MONTH ) ; }
void test9 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test10 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test11 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeekOfYearVisible ( ) { return weekOfYearVisible ; }
void test12 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getMaxSelectableDate ( ) { return maxSelectableDate ; }
void test13 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test14 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test15 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test16 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test17 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test18 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test19 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDecorationBackgroundVisible ( ) { return decorationBackgroundVisible ; }
void test20 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test21 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelectableDateRange ( Date min , Date max ) { if ( min = = null ) { minSelectableDate = defaultMinSelectableDate ; } else { minSelectableDate = min ; } if ( max = = null ) { maxSelectableDate = defaultMaxSelectableDate ; } else { maxSelectableDate = max ; } if ( maxSelectableDate . before ( minSelectableDate ) ) { minSelectableDate = defaultMinSelectableDate ; maxSelectableDate = defaultMaxSelectableDate ; } drawDays ( ) ; }
void test22 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test23 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test24 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test25 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDayBordersVisible ( ) { return dayBordersVisible ; }
void test26 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test27 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test28 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDecorationBackgroundVisible ( ) { return decorationBackgroundVisible ; }
void test29 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDecorationBackgroundVisible ( ) { return decorationBackgroundVisible ; }
void test30 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test31 ( ) throws Throwable { JDayChooser jDayChooser0 = new JDayChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test0 ( ) throws Throwable { TimeList . IconsRenderer timeList_IconsRenderer0 = new TimeList . IconsRenderer ( ( ModeController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = TimeList . getRegularExpression ( "UT`'j = h4#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRegularExpression ( String text ) throws BadLocationException { text = " . * ( " + text + " ) . * " ; return text ; }
void test2 ( ) throws Throwable { String string0 = TimeList . getPureRegularExpression ( "UT`'j = h4#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPureRegularExpression ( String text ) { / / remove regexp : text = text . replaceAll ( " ( [ ( ) . \\ [ \\ ] ^$ | ] ) " , "\\\\$1" ) ; text = text . replaceAll ( "\\ * " , " . * " ) ; return text ; }
void test3 ( ) throws Throwable { TimeList timeList0 = new TimeList ( ) ; timeList0 . numberOfOpenMapInformation ( ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test5 ( ) throws Throwable { TimeList . NodeRenderer timeList_NodeRenderer0 = new TimeList . NodeRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test8 ( ) throws Throwable { TimeList . NotesRenderer timeList_NotesRenderer0 = new TimeList . NotesRenderer ( ) ; timeList_NotesRenderer0 . setValue ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( int row , Object newValue ) { Attribute attr = ( Attribute ) attributes . get ( row ) ; attr . setValue ( newValue . toString ( ) ) ; fireTableRowsUpdated ( row , row ) ; }
void test0 ( ) throws Throwable { RemoveReminderHook removeReminderHook0 = new RemoveReminderHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel ( ( TableModel ) defaultTableModel0 , 8028 ) ; int int0 = flatNodeTableFilterModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 4 ; }
void test1 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; DefaultTableModel defaultTableModel0 = ( DefaultTableModel ) jTable0 . getModel ( ) ; FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel ( ( TableModel ) defaultTableModel0 , 10096 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { switch ( column ) { case 0 : if ( attributeColumnName = = null ) attributeColumnName = Resources . getInstance ( ) . getResourceString ( "attributes_attribute" ) ; return attributeColumnName ; case 1 : if ( visibilityColumnName = = null ) visibilityColumnName = Resources . getInstance ( ) . getResourceString ( "attributes_visible" ) ; return visibilityColumnName ; case 2 : if ( restrictionColumnName = = null ) restrictionColumnName = Resources . getInstance ( ) . getResourceString ( "attributes_restriction" ) ; return restrictionColumnName ; case 3 : if ( editorColumnName = = null ) editorColumnName = Resources . getInstance ( ) . getResourceString ( "attributes_edit" ) ; return editorColumnName ; } return null ; }
void test3 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel ( ( TableModel ) defaultTableModel0 , 8712 ) ; Class < Object > class0 = flatNodeTableFilterModel0 . getColumnClass ( 8712 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int c ) { switch ( c ) { case 0 : return String . class ; case 1 : return Boolean . class ; case 2 : return Boolean . class ; case 3 : return SortedListModel . class ; } return Object . class ; }
void test4 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel ( ( TableModel ) defaultTableModel0 , 8712 ) ; defaultTableModel0 . addColumn ( ( Object ) "feBlend" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 4 ; }
void test0 ( ) throws Throwable { JTripleCalendar jTripleCalendar0 = new JTripleCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCalendar ( Calendar c ) { calendarWidget . setCalendar ( c ) ; }
void test1 ( ) throws Throwable { JTripleCalendar jTripleCalendar0 = new JTripleCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { JTripleCalendar jTripleCalendar0 = new JTripleCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test3 ( ) throws Throwable { JTripleCalendar jTripleCalendar0 = new JTripleCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JTripleCalendar ( ) { this . setName ( "JTripleCalendar" ) ; GridLayout gridLayout = new GridLayout ( 3 , 1 ) ; gridLayout . setHgap ( 50 ) ; setLayout ( gridLayout ) ; leftPanel = createInfoPanel ( ) ; leftPanel . getCalendarWidget ( ) . addPropertyChangeListener ( this ) ; rightPanel = createInfoPanel ( ) ; rightPanel . getCalendarWidget ( ) . addPropertyChangeListener ( this ) ; add ( leftPanel ) ; calendarWidget = new JCalendar ( ) ; calendarWidget . addPropertyChangeListener ( this ) ; add ( calendarWidget ) ; add ( rightPanel ) ; }
void test4 ( ) throws Throwable { JTripleCalendar jTripleCalendar0 = new JTripleCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDate ( Date date ) { calendarWidget . setDate ( date ) ; }
void test5 ( ) throws Throwable { JTripleCalendar jTripleCalendar0 = new JTripleCalendar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getCalendar ( ) { return calendarWidget . getCalendar ( ) ; }
void test0 ( ) throws Throwable { ClickableImageCreator . AreaHolder clickableImageCreator_AreaHolder0 = new ClickableImageCreator . AreaHolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClickableImageCreator ( MindMapNode root , ModeController modeController , String regExpLinkReplacement ) { super ( ) ; this . root = root ; this . regExpLinkReplacement = regExpLinkReplacement ; mapView = modeController . getView ( ) ; if ( mapView ! = null ) { innerBounds = mapView . getInnerBounds ( ) ; } else { / / test case : give any bounds : innerBounds = new Rectangle ( 0 , 0 , 100 , 100 ) ; } this . modeController = modeController ; createArea ( ) ; }
void test0 ( ) throws Throwable { WindowClosingAdapter windowClosingAdapter0 = new WindowClosingAdapter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WindowClosingAdapter ( boolean exitSystem ) { this . exitSystem = exitSystem ; }
void test0 ( ) throws Throwable { MapDialog mapDialog0 = new MapDialog ( ) ; Place place0 = new Place ( ) ; MapSearchMarkerLocation mapSearchMarkerLocation0 = new MapSearchMarkerLocation ( mapDialog0 , place0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test1 ( ) throws Throwable { MapDialog mapDialog0 = new MapDialog ( ) ; Place place0 = new Place ( ) ; MapSearchMarkerLocation mapSearchMarkerLocation0 = new MapSearchMarkerLocation ( mapDialog0 , place0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Place getPlace ( ) { return mPlace ; }
void test0 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; tileImage0 . getImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawingDone ( ) { return mWaitingForCallbacks < = 0 ; }
void test2 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; boolean boolean0 = tileImage0 . isImageCreated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawingDone ( ) { return mWaitingForCallbacks < = 0 ; }
void test3 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; File file0 = new File ( "" ) ; tileImage0 . load ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawingDone ( ) { return mWaitingForCallbacks < = 0 ; }
void test4 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; String string0 = tileImage0 . save ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImageCreated ( ) { return mImageCreated ; }
void test6 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; boolean boolean0 = tileImage0 . isLoaded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImageCreated ( ) { return mImageCreated ; }
void test7 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; tileImage0 . load ( "" ) ; ScanexTileSource scanexTileSource0 = new ScanexTileSource ( "" ) ; MemoryTileCache memoryTileCache0 = new MemoryTileCache ( ) ; JMapViewer jMapViewer0 = new JMapViewer ( ( TileCache ) memoryTileCache0 , ( - 1 ) ) ; TileController tileController0 = new TileController ( ( TileSource ) scanexTileSource0 , ( TileCache ) memoryTileCache0 , ( TileLoaderListener ) jMapViewer0 ) ; Jdk14Logger jdk14Logger0 = new Jdk14Logger ( "" ) ; Logger logger0 = jdk14Logger0 . getLogger ( ) ; tileImage0 . setTiles ( 0 , 0 , 334 , 0 , tileController0 , logger0 , 1 , ( - 464 ) ) ; boolean boolean0 = tileImage0 . isLoaded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImageCreated ( ) { return mImageCreated ; }
void test9 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; boolean boolean0 = tileImage0 . hasErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImageCreated ( ) { return mImageCreated ; }
void test10 ( ) throws Throwable { TileImage tileImage0 = new TileImage ( ) ; TMSTileSource tMSTileSource0 = new TMSTileSource ( "Added focused " , "Added focused " , ( - 1851 ) , 32 ) ; JMapViewer jMapViewer0 = new JMapViewer ( ) ; TileController tileController0 = new TileController ( ( TileSource ) tMSTileSource0 , ( TileCache ) null , ( TileLoaderListener ) jMapViewer0 ) ; Logger logger0 = Logger . getLogger ( "Added focused " ) ; tileImage0 . setTiles ( 0 , ( - 2016 ) , 0 , ( - 2016 ) , tileController0 , logger0 , ( - 386 ) , ( - 1403 ) ) ; tileImage0 . hasErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isImageCreated ( ) { return mImageCreated ; }
void test1 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; mapNodePositionHolder0 . setMapCenter ( ( Coordinate ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test5 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; Coordinate coordinate0 = mapNodePositionHolder0 . getMapCenter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changePosition ( MapNodePositionHolder pHolder , Coordinate pPosition , Coordinate pMapCenter , int pZoom , String pTileSource ) { MindMapNode node = pHolder . getNode ( ) ; PlaceNodeXmlAction doAction = createPlaceNodeXmlActionAction ( node , pPosition , pMapCenter , pZoom , pTileSource ) ; PlaceNodeXmlAction undoAction = createPlaceNodeXmlActionAction ( node , pHolder . getPosition ( ) , pHolder . getMapCenter ( ) , pHolder . getZoom ( ) , pHolder . getTileSource ( ) ) ; ActionFactory actionFactory = controller . getActionFactory ( ) ; actionFactory . doTransaction ( PLUGINS_MAP_NODE_POSITION , new ActionPair ( doAction , undoAction ) ) ; }
void test8 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; Coordinate coordinate0 = mapNodePositionHolder0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test10 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; String string0 = mapNodePositionHolder0 . getTileSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test11 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; int int0 = mapNodePositionHolder0 . getZoom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test13 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; mapNodePositionHolder0 . setTileSource ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test15 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; JMapViewer jMapViewer0 = new JMapViewer ( ) ; Coordinate coordinate0 = jMapViewer0 . getPosition ( 0 , 0 ) ; mapNodePositionHolder0 . setPosition ( coordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test16 ( ) throws Throwable { MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { SpringUtilities springUtilities0 = new SpringUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { JLabel jLabel0 = new JLabel ( ) ; SpringUtilities . printSizes ( ( Component ) jLabel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void printSizes ( Component c ) { System . out . println ( "minimumSize = " + c . getMinimumSize ( ) ) ; System . out . println ( "preferredSize = " + c . getPreferredSize ( ) ) ; System . out . println ( "maximumSize = " + c . getMaximumSize ( ) ) ; }
void test1 ( ) throws Throwable { UpdateThread updateThread0 = new UpdateThread ( ( Connection ) null , ( MindMapController ) null ) ; updateThread0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test2 ( ) throws Throwable { UpdateThread updateThread0 = new UpdateThread ( ( Connection ) null , ( MindMapController ) null ) ; updateThread0 . signalEndOfSession ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test4 ( ) throws Throwable { UpdateThread updateThread0 = new UpdateThread ( ( Connection ) null , ( MindMapController ) null ) ; updateThread0 . setHost ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test5 ( ) throws Throwable { UpdateThread updateThread0 = new UpdateThread ( ( Connection ) null , ( MindMapController ) null ) ; updateThread0 . setPort ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test6 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; UpdateThread updateThread0 = new UpdateThread ( ( Connection ) jdbcConnection0 , ( MindMapController ) null ) ; updateThread0 . shutdown ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test7 ( ) throws Throwable { UpdateThread updateThread0 = new UpdateThread ( ( Connection ) null , ( MindMapController ) null ) ; updateThread0 . shutdown ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test0 ( ) throws Throwable { DatabaseConnector databaseConnector0 = new DatabaseConnector ( ) ; Integer integer0 = databaseConnector0 . getRole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getRole ( ) { return ROLE_SLAVE ; }
void test0 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . deregisterFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . loadFrom ( ( XMLElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test2 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onViewRemovedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test3 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onRemoveChildren ( ( MindMapNode ) null , ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test4 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onUpdateNodeHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test5 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onUpdateChildrenHook ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test6 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . registerFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; ActionPair actionPair0 = socketConnectionHook0 . getEmptyActionPair ( ) ; ActionPair actionPair1 = databaseStarter0 . filterAction ( actionPair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test8 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onRemoveChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test9 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onViewCreatedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test10 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; XMLElement xMLElement0 = new XMLElement ( false ) ; databaseStarter0 . save ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test11 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onAddChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test12 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; Integer integer0 = databaseStarter0 . getRole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getRole ( ) { return ROLE_SLAVE ; }
void test13 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onNewChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test14 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; MindMapClient mindMapClient0 = new MindMapClient ( ) ; ActionPair actionPair0 = mindMapClient0 . getEmptyActionPair ( ) ; databaseStarter0 . executeTransaction ( actionPair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test16 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onLostFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test17 ( ) throws Throwable { DatabaseStarter databaseStarter0 = new DatabaseStarter ( ) ; databaseStarter0 . onAddChildren ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; Integer integer0 = mindMapMaster0 . getRole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onRemoveChildren ( ( MindMapNode ) null , ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onViewCreatedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . shutdown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onUpdateChildrenHook ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onViewRemovedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . loadFrom ( ( XMLElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; CollaborationUserInformation collaborationUserInformation0 = mindMapMaster0 . getMasterInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onUpdateNodeHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . onAddChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . save ( ( XMLElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; mindMapMaster0 . broadcastCommand ( "r ) 91" , "r ) 91" , "r ) 91" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapClient mindMapClient0 = new MindMapClient ( ) ; mindMapClient0 . executeTransaction ( ( ActionPair ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; ActionPair actionPair0 = socketConnectionHook0 . getEmptyActionPair ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapMaster mindMapMaster0 = new MindMapMaster ( ) ; String string0 = mindMapMaster0 . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapClient mindMapClient0 = new MindMapClient ( ) ; mindMapClient0 . shutdown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapClient mindMapClient0 = new MindMapClient ( ) ; mindMapClient0 . unlock ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapClient mindMapClient0 = new MindMapClient ( ) ; int int0 = mindMapClient0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapClient mindMapClient0 = new MindMapClient ( ) ; Integer integer0 = mindMapClient0 . getRole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { MindMapClient mindMapClient0 = new MindMapClient ( ) ; String string0 = mindMapClient0 . lock ( "h~JN - LtnfjLkh < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { MindMapClient mindMapClient0 = new MindMapClient ( ) ; mindMapClient0 . broadcastCommand ( "h~JN - LtnfjLkh < " , "h~JN - LtnfjLkh < " , "h~JN - LtnfjLkh < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MindMapClient mindMapClient0 = new MindMapClient ( ) ; CollaborationUserInformation collaborationUserInformation0 = mindMapClient0 . getMasterInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . save ( ( XMLElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onUpdateChildrenHook ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . unlock ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onViewCreatedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onNewChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . setClientCommunication ( ( ClientCommunication ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; Integer integer0 = socketConnectionHook0 . getRole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onRemoveChildren ( ( MindMapNode ) null , ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . loadFrom ( ( XMLElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onUpdateNodeHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; ClientCommunication clientCommunication0 = socketConnectionHook0 . getClientCommunication ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onAddChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onRemoveChild ( ( MindMapNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onViewRemovedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook ( ) ; socketConnectionHook0 . onLostFocusNode ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int get ( ) { return info ; }
void test0 ( ) throws Throwable { ScriptEditorPanel . ScriptHolder scriptEditorPanel_ScriptHolder0 = new ScriptEditorPanel . ScriptHolder ( "" , "" ) ; ScriptEditorPanel . ScriptHolder scriptEditorPanel_ScriptHolder1 = scriptEditorPanel_ScriptHolder0 . setScriptName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScriptEditorPanel ( ScriptModel pScriptModel , FreeMindMain pFrame , boolean pHasNewScriptFunctionality ) { super ( pFrame . getJFrame ( ) , true / * modal * / ) ; logger = pFrame . getLogger ( this . getClass ( ) . getName ( ) ) ; mScriptModel = pScriptModel ; mFrame = pFrame ; / / build the panel : this . setTitle ( pFrame . getResourceString ( "plugins / ScriptEditor / window . title" ) ) ; this . setDefaultCloseOperation ( WindowConstants . DO_NOTHING_ON_CLOSE ) ; this . addWindowListener ( new WindowAdapter ( ) { void windowClosing ( WindowEvent event ) { disposeDialog ( true ) ; } } ) ; Tools . addEscapeActionToDialog ( this , new AbstractAction ( ) { void actionPerformed ( ActionEvent arg0 ) { disposeDialog ( true ) ; } } ) ; Container contentPane = this . getContentPane ( ) ; contentPane . setLayout ( new BorderLayout ( ) ) ; mListModel = new DefaultListModel ( ) ; mScriptList = new JList ( mListModel ) ; mScriptList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; mScriptList . addListSelectionListener ( new ListSelectionListener ( ) { void valueChanged ( ListSelectionEvent pEvent ) { if ( pEvent . getValueIsAdjusting ( ) ) return ; / / System . out . println ( "List selection : " + pEvent ) ; select ( mScriptList . getSelectedIndex ( ) ) ; } } ) ; / / add ( mScriptList , BorderLayout . WEST ) ; mScriptTextField = new JTextArea ( ) ; mScriptTextField . setFont ( new Font ( "Monospaced" , Font . PLAIN , 12 ) ) ; mScriptTextField . setEnabled ( false ) ; mScriptTextField . setTabSize ( 2 ) ; mCentralUpperPanel = new JSplitPane ( JSplitPane . HORIZONTAL_SPLIT , mScriptList , new JScrollPane ( mScriptTextField ) ) ; mCentralUpperPanel . setContinuousLayout ( true ) ; mScriptResultField = new JTextArea ( ) ; mScriptResultField . setEditable ( false ) ; mScriptResultField . setWrapStyleWord ( true ) ; mCentralPanel = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , mCentralUpperPanel , new JScrollPane ( mScriptResultField ) ) ; mCentralPanel . setDividerLocation ( 0 . 8 ) ; mCentralPanel . setContinuousLayout ( true ) ; contentPane . add ( mCentralPanel , BorderLayout . CENTER ) ; mStatus = new JLabel ( ) ; contentPane . add ( mStatus , BorderLayout . SOUTH ) ; mScriptTextField . addCaretListener ( new CaretListener ( ) { void caretUpdate ( CaretEvent arg0 ) { int caretPosition = mScriptTextField . getCaretPosition ( ) ; try { int lineOfOffset = mScriptTextField . getLineOfOffset ( caretPosition ) ; mStatus . setText ( "Line : " + ( lineOfOffset + 1 ) + " , Column : " + ( caretPosition - mScriptTextField . getLineStartOffset ( lineOfOffset ) + 1 ) ) ; } catch ( BadLocationException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } } } ) ; updateFields ( ) ; mScriptTextField . repaint ( ) ; / / menu : JMenuBar menuBar = new JMenuBar ( ) ; JMenu menu = new JMenu ( ) ; Tools . setLabelAndMnemonic ( menu , pFrame . getResourceString ( "plugins / ScriptEditor . menu_actions" ) ) ; if ( pHasNewScriptFunctionality ) { addAction ( menu , new NewScriptAction ( pFrame . getResourceString ( "plugins / ScriptEditor . new_script" ) ) ) ; } mRunAction = new RunAction ( pFrame . getResourceString ( "plugins / ScriptEditor . run" ) ) ; mRunAction . setEnabled ( false ) ; addAction ( menu , mRunAction ) ; mSignAction = new SignAction ( pFrame . getResourceString ( "plugins / ScriptEditor . sign" ) ) ; mSignAction . setEnabled ( false ) ; addAction ( menu , mSignAction ) ; AbstractAction cancelAction = new CancelAction ( pFrame . getResourceString ( "plugins / ScriptEditor . cancel" ) ) ; addAction ( menu , cancelAction ) ; AbstractAction exitAction = new ExitAction ( pFrame . getResourceString ( "plugins / ScriptEditor . exit" ) ) ; addAction ( menu , exitAction ) ; menuBar . add ( menu ) ; this . setJMenuBar ( menuBar ) ; / / Retrieve window size and column positions . ScriptEditorWindowConfigurationStorage storage = mScriptModel . decorateDialog ( this , WINDOW_PREFERENCE_STORAGE_PROPERTY ) ; if ( storage ! = null ) { mCentralUpperPanel . setDividerLocation ( storage . getLeftRatio ( ) ) ; mCentralPanel . setDividerLocation ( storage . getTopRatio ( ) ) ; } else { / / bug fix : for new users , this is set to some reasonable values . mCentralUpperPanel . setDividerLocation ( 100 ) ; mCentralPanel . setDividerLocation ( 240 ) ; } }
void test1 ( ) throws Throwable { ScriptEditorPanel . ScriptHolder scriptEditorPanel_ScriptHolder0 = new ScriptEditorPanel . ScriptHolder ( "" , "" ) ; ScriptEditorPanel . ScriptHolder scriptEditorPanel_ScriptHolder1 = scriptEditorPanel_ScriptHolder0 . setScript ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScriptEditorPanel ( ScriptModel pScriptModel , FreeMindMain pFrame , boolean pHasNewScriptFunctionality ) { super ( pFrame . getJFrame ( ) , true / * modal * / ) ; logger = pFrame . getLogger ( this . getClass ( ) . getName ( ) ) ; mScriptModel = pScriptModel ; mFrame = pFrame ; / / build the panel : this . setTitle ( pFrame . getResourceString ( "plugins / ScriptEditor / window . title" ) ) ; this . setDefaultCloseOperation ( WindowConstants . DO_NOTHING_ON_CLOSE ) ; this . addWindowListener ( new WindowAdapter ( ) { void windowClosing ( WindowEvent event ) { disposeDialog ( true ) ; } } ) ; Tools . addEscapeActionToDialog ( this , new AbstractAction ( ) { void actionPerformed ( ActionEvent arg0 ) { disposeDialog ( true ) ; } } ) ; Container contentPane = this . getContentPane ( ) ; contentPane . setLayout ( new BorderLayout ( ) ) ; mListModel = new DefaultListModel ( ) ; mScriptList = new JList ( mListModel ) ; mScriptList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; mScriptList . addListSelectionListener ( new ListSelectionListener ( ) { void valueChanged ( ListSelectionEvent pEvent ) { if ( pEvent . getValueIsAdjusting ( ) ) return ; / / System . out . println ( "List selection : " + pEvent ) ; select ( mScriptList . getSelectedIndex ( ) ) ; } } ) ; / / add ( mScriptList , BorderLayout . WEST ) ; mScriptTextField = new JTextArea ( ) ; mScriptTextField . setFont ( new Font ( "Monospaced" , Font . PLAIN , 12 ) ) ; mScriptTextField . setEnabled ( false ) ; mScriptTextField . setTabSize ( 2 ) ; mCentralUpperPanel = new JSplitPane ( JSplitPane . HORIZONTAL_SPLIT , mScriptList , new JScrollPane ( mScriptTextField ) ) ; mCentralUpperPanel . setContinuousLayout ( true ) ; mScriptResultField = new JTextArea ( ) ; mScriptResultField . setEditable ( false ) ; mScriptResultField . setWrapStyleWord ( true ) ; mCentralPanel = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , mCentralUpperPanel , new JScrollPane ( mScriptResultField ) ) ; mCentralPanel . setDividerLocation ( 0 . 8 ) ; mCentralPanel . setContinuousLayout ( true ) ; contentPane . add ( mCentralPanel , BorderLayout . CENTER ) ; mStatus = new JLabel ( ) ; contentPane . add ( mStatus , BorderLayout . SOUTH ) ; mScriptTextField . addCaretListener ( new CaretListener ( ) { void caretUpdate ( CaretEvent arg0 ) { int caretPosition = mScriptTextField . getCaretPosition ( ) ; try { int lineOfOffset = mScriptTextField . getLineOfOffset ( caretPosition ) ; mStatus . setText ( "Line : " + ( lineOfOffset + 1 ) + " , Column : " + ( caretPosition - mScriptTextField . getLineStartOffset ( lineOfOffset ) + 1 ) ) ; } catch ( BadLocationException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } } } ) ; updateFields ( ) ; mScriptTextField . repaint ( ) ; / / menu : JMenuBar menuBar = new JMenuBar ( ) ; JMenu menu = new JMenu ( ) ; Tools . setLabelAndMnemonic ( menu , pFrame . getResourceString ( "plugins / ScriptEditor . menu_actions" ) ) ; if ( pHasNewScriptFunctionality ) { addAction ( menu , new NewScriptAction ( pFrame . getResourceString ( "plugins / ScriptEditor . new_script" ) ) ) ; } mRunAction = new RunAction ( pFrame . getResourceString ( "plugins / ScriptEditor . run" ) ) ; mRunAction . setEnabled ( false ) ; addAction ( menu , mRunAction ) ; mSignAction = new SignAction ( pFrame . getResourceString ( "plugins / ScriptEditor . sign" ) ) ; mSignAction . setEnabled ( false ) ; addAction ( menu , mSignAction ) ; AbstractAction cancelAction = new CancelAction ( pFrame . getResourceString ( "plugins / ScriptEditor . cancel" ) ) ; addAction ( menu , cancelAction ) ; AbstractAction exitAction = new ExitAction ( pFrame . getResourceString ( "plugins / ScriptEditor . exit" ) ) ; addAction ( menu , exitAction ) ; menuBar . add ( menu ) ; this . setJMenuBar ( menuBar ) ; / / Retrieve window size and column positions . ScriptEditorWindowConfigurationStorage storage = mScriptModel . decorateDialog ( this , WINDOW_PREFERENCE_STORAGE_PROPERTY ) ; if ( storage ! = null ) { mCentralUpperPanel . setDividerLocation ( storage . getLeftRatio ( ) ) ; mCentralPanel . setDividerLocation ( storage . getTopRatio ( ) ) ; } else { / / bug fix : for new users , this is set to some reasonable values . mCentralUpperPanel . setDividerLocation ( 100 ) ; mCentralPanel . setDividerLocation ( 240 ) ; } }
void test2 ( ) throws Throwable { ScriptEditorPanel . ScriptHolder scriptEditorPanel_ScriptHolder0 = new ScriptEditorPanel . ScriptHolder ( "" , "" ) ; String string0 = scriptEditorPanel_ScriptHolder0 . getScriptName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScriptEditorPanel ( ScriptModel pScriptModel , FreeMindMain pFrame , boolean pHasNewScriptFunctionality ) { super ( pFrame . getJFrame ( ) , true / * modal * / ) ; logger = pFrame . getLogger ( this . getClass ( ) . getName ( ) ) ; mScriptModel = pScriptModel ; mFrame = pFrame ; / / build the panel : this . setTitle ( pFrame . getResourceString ( "plugins / ScriptEditor / window . title" ) ) ; this . setDefaultCloseOperation ( WindowConstants . DO_NOTHING_ON_CLOSE ) ; this . addWindowListener ( new WindowAdapter ( ) { void windowClosing ( WindowEvent event ) { disposeDialog ( true ) ; } } ) ; Tools . addEscapeActionToDialog ( this , new AbstractAction ( ) { void actionPerformed ( ActionEvent arg0 ) { disposeDialog ( true ) ; } } ) ; Container contentPane = this . getContentPane ( ) ; contentPane . setLayout ( new BorderLayout ( ) ) ; mListModel = new DefaultListModel ( ) ; mScriptList = new JList ( mListModel ) ; mScriptList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; mScriptList . addListSelectionListener ( new ListSelectionListener ( ) { void valueChanged ( ListSelectionEvent pEvent ) { if ( pEvent . getValueIsAdjusting ( ) ) return ; / / System . out . println ( "List selection : " + pEvent ) ; select ( mScriptList . getSelectedIndex ( ) ) ; } } ) ; / / add ( mScriptList , BorderLayout . WEST ) ; mScriptTextField = new JTextArea ( ) ; mScriptTextField . setFont ( new Font ( "Monospaced" , Font . PLAIN , 12 ) ) ; mScriptTextField . setEnabled ( false ) ; mScriptTextField . setTabSize ( 2 ) ; mCentralUpperPanel = new JSplitPane ( JSplitPane . HORIZONTAL_SPLIT , mScriptList , new JScrollPane ( mScriptTextField ) ) ; mCentralUpperPanel . setContinuousLayout ( true ) ; mScriptResultField = new JTextArea ( ) ; mScriptResultField . setEditable ( false ) ; mScriptResultField . setWrapStyleWord ( true ) ; mCentralPanel = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , mCentralUpperPanel , new JScrollPane ( mScriptResultField ) ) ; mCentralPanel . setDividerLocation ( 0 . 8 ) ; mCentralPanel . setContinuousLayout ( true ) ; contentPane . add ( mCentralPanel , BorderLayout . CENTER ) ; mStatus = new JLabel ( ) ; contentPane . add ( mStatus , BorderLayout . SOUTH ) ; mScriptTextField . addCaretListener ( new CaretListener ( ) { void caretUpdate ( CaretEvent arg0 ) { int caretPosition = mScriptTextField . getCaretPosition ( ) ; try { int lineOfOffset = mScriptTextField . getLineOfOffset ( caretPosition ) ; mStatus . setText ( "Line : " + ( lineOfOffset + 1 ) + " , Column : " + ( caretPosition - mScriptTextField . getLineStartOffset ( lineOfOffset ) + 1 ) ) ; } catch ( BadLocationException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } } } ) ; updateFields ( ) ; mScriptTextField . repaint ( ) ; / / menu : JMenuBar menuBar = new JMenuBar ( ) ; JMenu menu = new JMenu ( ) ; Tools . setLabelAndMnemonic ( menu , pFrame . getResourceString ( "plugins / ScriptEditor . menu_actions" ) ) ; if ( pHasNewScriptFunctionality ) { addAction ( menu , new NewScriptAction ( pFrame . getResourceString ( "plugins / ScriptEditor . new_script" ) ) ) ; } mRunAction = new RunAction ( pFrame . getResourceString ( "plugins / ScriptEditor . run" ) ) ; mRunAction . setEnabled ( false ) ; addAction ( menu , mRunAction ) ; mSignAction = new SignAction ( pFrame . getResourceString ( "plugins / ScriptEditor . sign" ) ) ; mSignAction . setEnabled ( false ) ; addAction ( menu , mSignAction ) ; AbstractAction cancelAction = new CancelAction ( pFrame . getResourceString ( "plugins / ScriptEditor . cancel" ) ) ; addAction ( menu , cancelAction ) ; AbstractAction exitAction = new ExitAction ( pFrame . getResourceString ( "plugins / ScriptEditor . exit" ) ) ; addAction ( menu , exitAction ) ; menuBar . add ( menu ) ; this . setJMenuBar ( menuBar ) ; / / Retrieve window size and column positions . ScriptEditorWindowConfigurationStorage storage = mScriptModel . decorateDialog ( this , WINDOW_PREFERENCE_STORAGE_PROPERTY ) ; if ( storage ! = null ) { mCentralUpperPanel . setDividerLocation ( storage . getLeftRatio ( ) ) ; mCentralPanel . setDividerLocation ( storage . getTopRatio ( ) ) ; } else { / / bug fix : for new users , this is set to some reasonable values . mCentralUpperPanel . setDividerLocation ( 100 ) ; mCentralPanel . setDividerLocation ( 240 ) ; } }
void test3 ( ) throws Throwable { ScriptEditorPanel . ScriptHolder scriptEditorPanel_ScriptHolder0 = new ScriptEditorPanel . ScriptHolder ( "" , "" ) ; String string0 = scriptEditorPanel_ScriptHolder0 . getScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScriptEditorPanel ( ScriptModel pScriptModel , FreeMindMain pFrame , boolean pHasNewScriptFunctionality ) { super ( pFrame . getJFrame ( ) , true / * modal * / ) ; logger = pFrame . getLogger ( this . getClass ( ) . getName ( ) ) ; mScriptModel = pScriptModel ; mFrame = pFrame ; / / build the panel : this . setTitle ( pFrame . getResourceString ( "plugins / ScriptEditor / window . title" ) ) ; this . setDefaultCloseOperation ( WindowConstants . DO_NOTHING_ON_CLOSE ) ; this . addWindowListener ( new WindowAdapter ( ) { void windowClosing ( WindowEvent event ) { disposeDialog ( true ) ; } } ) ; Tools . addEscapeActionToDialog ( this , new AbstractAction ( ) { void actionPerformed ( ActionEvent arg0 ) { disposeDialog ( true ) ; } } ) ; Container contentPane = this . getContentPane ( ) ; contentPane . setLayout ( new BorderLayout ( ) ) ; mListModel = new DefaultListModel ( ) ; mScriptList = new JList ( mListModel ) ; mScriptList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; mScriptList . addListSelectionListener ( new ListSelectionListener ( ) { void valueChanged ( ListSelectionEvent pEvent ) { if ( pEvent . getValueIsAdjusting ( ) ) return ; / / System . out . println ( "List selection : " + pEvent ) ; select ( mScriptList . getSelectedIndex ( ) ) ; } } ) ; / / add ( mScriptList , BorderLayout . WEST ) ; mScriptTextField = new JTextArea ( ) ; mScriptTextField . setFont ( new Font ( "Monospaced" , Font . PLAIN , 12 ) ) ; mScriptTextField . setEnabled ( false ) ; mScriptTextField . setTabSize ( 2 ) ; mCentralUpperPanel = new JSplitPane ( JSplitPane . HORIZONTAL_SPLIT , mScriptList , new JScrollPane ( mScriptTextField ) ) ; mCentralUpperPanel . setContinuousLayout ( true ) ; mScriptResultField = new JTextArea ( ) ; mScriptResultField . setEditable ( false ) ; mScriptResultField . setWrapStyleWord ( true ) ; mCentralPanel = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , mCentralUpperPanel , new JScrollPane ( mScriptResultField ) ) ; mCentralPanel . setDividerLocation ( 0 . 8 ) ; mCentralPanel . setContinuousLayout ( true ) ; contentPane . add ( mCentralPanel , BorderLayout . CENTER ) ; mStatus = new JLabel ( ) ; contentPane . add ( mStatus , BorderLayout . SOUTH ) ; mScriptTextField . addCaretListener ( new CaretListener ( ) { void caretUpdate ( CaretEvent arg0 ) { int caretPosition = mScriptTextField . getCaretPosition ( ) ; try { int lineOfOffset = mScriptTextField . getLineOfOffset ( caretPosition ) ; mStatus . setText ( "Line : " + ( lineOfOffset + 1 ) + " , Column : " + ( caretPosition - mScriptTextField . getLineStartOffset ( lineOfOffset ) + 1 ) ) ; } catch ( BadLocationException e ) { freemind . main . Resources . getInstance ( ) . logException ( e ) ; } } } ) ; updateFields ( ) ; mScriptTextField . repaint ( ) ; / / menu : JMenuBar menuBar = new JMenuBar ( ) ; JMenu menu = new JMenu ( ) ; Tools . setLabelAndMnemonic ( menu , pFrame . getResourceString ( "plugins / ScriptEditor . menu_actions" ) ) ; if ( pHasNewScriptFunctionality ) { addAction ( menu , new NewScriptAction ( pFrame . getResourceString ( "plugins / ScriptEditor . new_script" ) ) ) ; } mRunAction = new RunAction ( pFrame . getResourceString ( "plugins / ScriptEditor . run" ) ) ; mRunAction . setEnabled ( false ) ; addAction ( menu , mRunAction ) ; mSignAction = new SignAction ( pFrame . getResourceString ( "plugins / ScriptEditor . sign" ) ) ; mSignAction . setEnabled ( false ) ; addAction ( menu , mSignAction ) ; AbstractAction cancelAction = new CancelAction ( pFrame . getResourceString ( "plugins / ScriptEditor . cancel" ) ) ; addAction ( menu , cancelAction ) ; AbstractAction exitAction = new ExitAction ( pFrame . getResourceString ( "plugins / ScriptEditor . exit" ) ) ; addAction ( menu , exitAction ) ; menuBar . add ( menu ) ; this . setJMenuBar ( menuBar ) ; / / Retrieve window size and column positions . ScriptEditorWindowConfigurationStorage storage = mScriptModel . decorateDialog ( this , WINDOW_PREFERENCE_STORAGE_PROPERTY ) ; if ( storage ! = null ) { mCentralUpperPanel . setDividerLocation ( storage . getLeftRatio ( ) ) ; mCentralPanel . setDividerLocation ( storage . getTopRatio ( ) ) ; } else { / / bug fix : for new users , this is set to some reasonable values . mCentralUpperPanel . setDividerLocation ( 100 ) ; mCentralPanel . setDividerLocation ( 240 ) ; } }
void test0 ( ) throws Throwable { ScriptEditor scriptEditor0 = new ScriptEditor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { ScriptingEngine scriptingEngine0 = new ScriptingEngine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test1 ( ) throws Throwable { int int0 = ScriptingEngine . findLineNumberInString ( "6 & bo'" , 1567 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int findLineNumberInString ( String resultString , int lineNumber ) { java . util . regex . Pattern pattern = java . util . regex . Pattern . compile ( " . * @ line ( [ 0 - 9 ] + ) . * " , java . util . regex . Pattern . DOTALL ) ; Matcher matcher = pattern . matcher ( resultString ) ; if ( matcher . matches ( ) ) { lineNumber = Integer . parseInt ( matcher . group ( 1 ) ) ; } return lineNumber ; }
void test2 ( ) throws Throwable { LatexNodeHook latexNodeHook0 = new LatexNodeHook ( ) ; latexNodeHook0 . onViewRemovedHook ( ( NodeView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test3 ( ) throws Throwable { LatexNodeHook latexNodeHook0 = new LatexNodeHook ( ) ; JSlider jSlider0 = new JSlider ( ) ; Hashtable < Object , Object > hashtable0 = jSlider0 . createStandardLabels ( 1618 ) ; XMLElement xMLElement0 = new XMLElement ( ( Hashtable ) hashtable0 , false ) ; latexNodeHook0 . loadFrom ( xMLElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { mIndent = 0 ; mOutputString = "" ; updateMenus ( new PrintMenuAdder ( ) , menuMap , new PrintMenuAdderCreator ( ) ) ; return mOutputString ; }
void test5 ( ) throws Throwable { LatexNodeHook latexNodeHook0 = new LatexNodeHook ( ) ; latexNodeHook0 . shutdownMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
void test0 ( ) throws Throwable { FreemindHelpStarter freemindHelpStarter0 = new FreemindHelpStarter ( ) ; freemindHelpStarter0 . startupMapHook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return this . name ; }
