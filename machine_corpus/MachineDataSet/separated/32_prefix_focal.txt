void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 11 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ScreenInputFilter screenInputFilter0 = new ScreenInputFilter ( ( InputStream ) byteArrayInputStream0 ) ; int int0 = screenInputFilter0 . read ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) { int character = 0 ; try { character = super . read ( ) ; if ( character = = 0x0A ) return character ; else if ( character < 0x20 ) { return 0x58 ; } } catch ( IOException ex ) { Logger . getLogger ( ScreenInputFilter . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return character ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 11 ] ; byteArray0 [ 0 ] = ( byte ) ( - 30 ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ScreenInputFilter screenInputFilter0 = new ScreenInputFilter ( ( InputStream ) byteArrayInputStream0 ) ; int int0 = screenInputFilter0 . read ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) { int character = 0 ; try { character = super . read ( ) ; if ( character = = 0x0A ) return character ; else if ( character < 0x20 ) { return 0x58 ; } } catch ( IOException ex ) { Logger . getLogger ( ScreenInputFilter . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return character ; }
void test0 ( ) throws Throwable { HttpFileUtils httpFileUtils0 = new HttpFileUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ParamsUrlTools paramsUrlTools0 = new ParamsUrlTools ( ) ; List < NameValuePair > list0 = paramsUrlTools0 . getPairParams ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < NameValuePair > getPairParams ( String params ) { String [ ] requestParams = params . split ( " & " ) ; List < NameValuePair > nvps = new ArrayList < NameValuePair > ( ) ; for ( int i = 0 ; i < requestParams . length ; i + + ) { String workVal = requestParams [ i ] ; System . out . println ( "Val = " + workVal + " = " ) ; if ( ! workVal . isEmpty ( ) ) { int f_index = requestParams [ i ] . indexOf ( " = " ) ; String key = requestParams [ i ] . substring ( 0 , f_index ) ; String val = requestParams [ i ] . substring ( f_index + 1 ) ; / / System . out . println ( "i = " + i + " , string = " + requestParams [ i ] ) ; System . out . println ( "key = " + key + " , val = " + val ) ; nvps . add ( new BasicNameValuePair ( key , val ) ) ; } } System . out . println ( "" ) ; return nvps ; }
void test1 ( ) throws Throwable { ParamsUrlTools paramsUrlTools0 = new ParamsUrlTools ( ) ; List < NameValuePair > list0 = paramsUrlTools0 . getPairParams ( "AsSLNaxcr + MuO : m = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < NameValuePair > getPairParams ( String params ) { String [ ] requestParams = params . split ( " & " ) ; List < NameValuePair > nvps = new ArrayList < NameValuePair > ( ) ; for ( int i = 0 ; i < requestParams . length ; i + + ) { String workVal = requestParams [ i ] ; System . out . println ( "Val = " + workVal + " = " ) ; if ( ! workVal . isEmpty ( ) ) { int f_index = requestParams [ i ] . indexOf ( " = " ) ; String key = requestParams [ i ] . substring ( 0 , f_index ) ; String val = requestParams [ i ] . substring ( f_index + 1 ) ; / / System . out . println ( "i = " + i + " , string = " + requestParams [ i ] ) ; System . out . println ( "key = " + key + " , val = " + val ) ; nvps . add ( new BasicNameValuePair ( key , val ) ) ; } } System . out . println ( "" ) ; return nvps ; }
void test1 ( ) throws Throwable { HttpAnalyzerApp httpAnalyzerApp0 = HttpAnalyzerApp . getApplication ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpAnalyzerApp getApplication ( ) { return Application . getInstance ( HttpAnalyzerApp . class ) ; }
void test3 ( ) throws Throwable { SwingTools swingTools0 = new SwingTools ( ( JFrame ) null ) ; Vector < DefaultTableModel > vector0 = new Vector < DefaultTableModel > ( ) ; JComboBox jComboBox0 = new JComboBox ( vector0 ) ; boolean boolean0 = swingTools0 . checkAddComboItem ( jComboBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkAddComboItem ( JComboBox targetCombo ) { int lenCombo = targetCombo . getItemCount ( ) ; String currentItem = ( String ) targetCombo . getSelectedItem ( ) ; boolean result = false ; / / System . out . println ( "Curr" + currentItem ) ; for ( int i = 0 ; i < lenCombo ; i + + ) { / / System . out . println ( "Check " + targetCombo . getItemAt ( i ) ) ; if ( targetCombo . getItemAt ( i ) . equals ( currentItem ) ) { result = true ; } else if ( currentItem . isEmpty ( ) ) { result = true ; } } return result ; }
void test0 ( ) throws Throwable { HeaderSettings headerSettings0 = new HeaderSettings ( ) ; String [ ] stringArray0 = HeaderSettings . userAgents ; String string0 = headerSettings0 . setUserAgent ; Header [ ] headerArray0 = HeaderSettings . setHeaders ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showHeaders ( HttpRequestBase baseRequest ) { Header [ ] headers = baseRequest . getAllHeaders ( ) ; StringBuffer strBuf = new StringBuffer ( ) ; for ( int i = 0 ; i < headers . length ; i + + ) { strBuf . append ( headers [ i ] . toString ( ) + "\n" ) ; } String headersString = strBuf . toString ( ) ; return headersString ; }
void test3 ( ) throws Throwable { HttpHead httpHead0 = new HttpHead ( ( URI ) null ) ; httpHead0 . setHeader ( "HTTP entity too large to be buffered in memory" , "HTTP entity too large to be buffered in memory" ) ; String string0 = HeaderSettings . showHeaders ( ( HttpRequestBase ) httpHead0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showHeaders ( HttpRequestBase baseRequest ) { Header [ ] headers = baseRequest . getAllHeaders ( ) ; StringBuffer strBuf = new StringBuffer ( ) ; for ( int i = 0 ; i < headers . length ; i + + ) { strBuf . append ( headers [ i ] . toString ( ) + "\n" ) ; } String headersString = strBuf . toString ( ) ; return headersString ; }
void test4 ( ) throws Throwable { HeaderSettings headerSettings0 = new HeaderSettings ( ) ; String string0 = headerSettings0 . setUserAgent ; HeaderSettings headerSettings1 = new HeaderSettings ( ) ; Header [ ] headerArray0 = HeaderSettings . setHeaders ( ) ; HeaderSettings . getHeaders ( ) ; String string1 = headerSettings1 . setUserAgent ; HeaderSettings . getHeaders ( ) ; HeaderSettings . showHeaders ( headerArray0 ) ; HeaderSettings . showHeaders ( headerArray0 ) ; HeaderSettings . clearCookie ( ) ; HeaderSettings headerSettings2 = new HeaderSettings ( ) ; HeaderSettings . getHeaders ( ) ; HeaderSettings . getHeaders ( ) ; HeaderSettings . clearCookie ( ) ; HeaderSettings . getHeaders ( ) ; HttpPost httpPost0 = new HttpPost ( ) ; String string2 = headerSettings2 . setUserAgent ; HeaderSettings . showHeaders ( ( HttpRequestBase ) httpPost0 ) ; HeaderSettings . getHeaders ( ) ; HeaderSettings . setCookie ( ( String ) null ) ; HeaderSettings . setHeaders ( ) ; String string3 = HeaderSettings . showHeaders ( headerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showHeaders ( HttpRequestBase baseRequest ) { Header [ ] headers = baseRequest . getAllHeaders ( ) ; StringBuffer strBuf = new StringBuffer ( ) ; for ( int i = 0 ; i < headers . length ; i + + ) { strBuf . append ( headers [ i ] . toString ( ) + "\n" ) ; } String headersString = strBuf . toString ( ) ; return headersString ; }
void test0 ( ) throws Throwable { Password password0 = new Password ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = Password . crypt ( "F rBA - rX [ aEYkD . " , "F rBA - rX [ aEYkD . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String crypt ( String strpw , String strsalt ) { char [ ] pw = strpw . toCharArray ( ) ; char [ ] salt = strsalt . toCharArray ( ) ; byte [ ] pwb = new byte [ 66 ] ; char [ ] result = new char [ 13 ] ; byte [ ] new_etr = new byte [ etr . length ] ; int n = 0 ; int m = 0 ; while ( m < pw . length & & n < 64 ) { for ( int j = 6 ; j > = 0 ; j - - ) { pwb [ n + + ] = ( byte ) ( ( pw [ m ] > > j ) & 1 ) ; } m + + ; / / Increment pw pwb [ n + + ] = 0 ; } while ( n < 64 ) { pwb [ n + + ] = 0 ; } definekey ( pwb ) ; for ( n = 0 ; n < 66 ; n + + ) { pwb [ n ] = 0 ; } System . arraycopy ( etr , 0 , new_etr , 0 , new_etr . length ) ; EP = new_etr ; for ( int i = 0 ; i < 2 ; i + + ) { char c = salt [ i ] ; result [ i ] = c ; if ( c > 'Z' ) { c - = 6 + 7 + ' . ' ; / / c was a lowercase letter } else if ( c > '9' ) { c - = 7 + ' . ' ; / / c was a uppercase letter } else { c - = ' . ' ; / / c was a digit , ' . ' or ' / ' } / / now , 0 < = c < = 63 for ( int j = 0 ; j < 6 ; j + + ) { if ( ( ( c > > j ) & 1 ) = = 1 ) { byte t = ( byte ) ( 6 * i + j ) ; byte temp = new_etr [ t ] ; new_etr [ t ] = new_etr [ t + 24 ] ; new_etr [ t + 24 ] = temp ; } } } if ( result [ 1 ] = = 0 ) { result [ 1 ] = result [ 0 ] ; } for ( int i = 0 ; i < 25 ; i + + ) { encrypt ( pwb , 0 ) ; } EP = etr ; m = 2 ; n = 0 ; while ( n < 66 ) { int c = 0 ; for ( int j = 6 ; j > 0 ; j - - ) { c < < = 1 ; c | = pwb [ n + + ] ; } c + = ' . ' ; / / becomes > = ' . ' if ( c > '9' ) { c + = 7 ; / / not in [ . / 0 - 9 ] , becomes upper } if ( c > 'Z' ) { c + = 6 ; / / not in [ A - Z ] , becomes lower } result [ m + + ] = ( char ) c ; } return ( new String ( result ) ) ; }
void test2 ( ) throws Throwable { String string0 = Password . crypt ( "lQ4" , "lQ4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String crypt ( String strpw , String strsalt ) { char [ ] pw = strpw . toCharArray ( ) ; char [ ] salt = strsalt . toCharArray ( ) ; byte [ ] pwb = new byte [ 66 ] ; char [ ] result = new char [ 13 ] ; byte [ ] new_etr = new byte [ etr . length ] ; int n = 0 ; int m = 0 ; while ( m < pw . length & & n < 64 ) { for ( int j = 6 ; j > = 0 ; j - - ) { pwb [ n + + ] = ( byte ) ( ( pw [ m ] > > j ) & 1 ) ; } m + + ; / / Increment pw pwb [ n + + ] = 0 ; } while ( n < 64 ) { pwb [ n + + ] = 0 ; } definekey ( pwb ) ; for ( n = 0 ; n < 66 ; n + + ) { pwb [ n ] = 0 ; } System . arraycopy ( etr , 0 , new_etr , 0 , new_etr . length ) ; EP = new_etr ; for ( int i = 0 ; i < 2 ; i + + ) { char c = salt [ i ] ; result [ i ] = c ; if ( c > 'Z' ) { c - = 6 + 7 + ' . ' ; / / c was a lowercase letter } else if ( c > '9' ) { c - = 7 + ' . ' ; / / c was a uppercase letter } else { c - = ' . ' ; / / c was a digit , ' . ' or ' / ' } / / now , 0 < = c < = 63 for ( int j = 0 ; j < 6 ; j + + ) { if ( ( ( c > > j ) & 1 ) = = 1 ) { byte t = ( byte ) ( 6 * i + j ) ; byte temp = new_etr [ t ] ; new_etr [ t ] = new_etr [ t + 24 ] ; new_etr [ t + 24 ] = temp ; } } } if ( result [ 1 ] = = 0 ) { result [ 1 ] = result [ 0 ] ; } for ( int i = 0 ; i < 25 ; i + + ) { encrypt ( pwb , 0 ) ; } EP = etr ; m = 2 ; n = 0 ; while ( n < 66 ) { int c = 0 ; for ( int j = 6 ; j > 0 ; j - - ) { c < < = 1 ; c | = pwb [ n + + ] ; } c + = ' . ' ; / / becomes > = ' . ' if ( c > '9' ) { c + = 7 ; / / not in [ . / 0 - 9 ] , becomes upper } if ( c > 'Z' ) { c + = 6 ; / / not in [ A - Z ] , becomes lower } result [ m + + ] = ( char ) c ; } return ( new String ( result ) ) ; }
void test3 ( ) throws Throwable { String string0 = Password . hashMD5 ( "%txz7O [ Oc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String hashMD5 ( String baseString ) { MessageDigest digest = null ; StringBuffer hexString = new StringBuffer ( ) ; try { digest = java . security . MessageDigest . getInstance ( "MD5" ) ; digest . update ( baseString . getBytes ( ) ) ; byte [ ] hash = digest . digest ( ) ; for ( int i = 0 ; i < hash . length ; i + + ) { if ( ( 0xff & hash [ i ] ) < 0x10 ) { hexString . append ( "0" + Integer . toHexString ( ( 0xFF & hash [ i ] ) ) ) ; } else { hexString . append ( Integer . toHexString ( 0xFF & hash [ i ] ) ) ; } } } catch ( NoSuchAlgorithmException ex ) { Logger . getLogger ( Password . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return hexString . toString ( ) ; }
void test0 ( ) throws Throwable { ParamsTools paramsTools0 = new ParamsTools ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { List < NameValuePair > list0 = ParamsTools . getPairParams ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < NameValuePair > getPairParams ( String params ) { String [ ] requestParams = params . split ( " & " ) ; List < NameValuePair > nvps = new ArrayList < NameValuePair > ( ) ; for ( int i = 0 ; i < requestParams . length ; i + + ) { String workVal = requestParams [ i ] ; System . out . println ( "Val = " + workVal + " = " ) ; if ( ! workVal . isEmpty ( ) ) { int f_index = requestParams [ i ] . indexOf ( " = " ) ; String key = requestParams [ i ] . substring ( 0 , f_index ) ; String val = requestParams [ i ] . substring ( f_index + 1 ) ; / / System . out . println ( "i = " + i + " , string = " + requestParams [ i ] ) ; System . out . println ( "key = " + key + " , val = " + val ) ; nvps . add ( new BasicNameValuePair ( key , val ) ) ; } } System . out . println ( "" ) ; return nvps ; }
void test0 ( ) throws Throwable { InitBasicParams initBasicParams0 = new InitBasicParams ( ) ; String string0 = initBasicParams0 . getProxyEnv ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProxyEnv ( ) { String proxyEnv = System . getenv ( "http_proxy" ) ; String proxyString = null ; if ( proxyEnv ! = null ) { proxyString = proxyEnv . substring ( 7 ) ; } return proxyString ; }
void test0 ( ) throws Throwable { String string0 = RequestParamsDialog . getRequestParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestParams ( ) { return " & " + paramsString ; }
void test1 ( ) throws Throwable { boolean boolean0 = RequestParamsDialog . isDataChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataChanged ( ) { return dataChanged ; }
void test1 ( ) throws Throwable { int int0 = IntelSaveDialog . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return status ; }
void test2 ( ) throws Throwable { String string0 = IntelSaveDialog . getFilename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilename ( ) { return fileName ; }
