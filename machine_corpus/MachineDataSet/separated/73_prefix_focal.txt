void test0 ( ) throws Throwable { Logger logger0 = ModernChatServer . getLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { Hashtable < String , String > hashtable0 = ChatClientApp . getEmotionImages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Hashtable < String , String > getEmotionImages ( ) { return emotionImages ; }
void test0 ( ) throws Throwable { EmotionPanel emotionPanel0 = new EmotionPanel ( ( JDialog ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test0 ( ) throws Throwable { SettingPanel settingPanel0 = new SettingPanel ( ( JDialog ) null , ( ChatClientApp ) null ) ; String [ ] stringArray0 = new String [ 6 ] ; settingPanel0 . updateStatusList ( stringArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateStatusList ( String [ ] statusList , int defaultStatus ) { statusComboBox . setModel ( new javax . swing . DefaultComboBoxModel ( statusList ) ) ; statusComboBox . setSelectedIndex ( defaultStatus - 1 ) ; statusComboBox . validate ( ) ; }
void test0 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( ( JDialog ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test2 ( ) throws Throwable { ChatSysTray chatSysTray0 = new ChatSysTray ( ( ChatClientApp ) null ) ; Image image0 = chatSysTray0 . getStatusImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Image getStatusImage ( ) { return statusImage ; }
void test0 ( ) throws Throwable { ChangePassPanel changePassPanel0 = new ChangePassPanel ( ( JDialog ) null , ( ChatClientApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test0 ( ) throws Throwable { TreeModelGenerator treeModelGenerator0 = new TreeModelGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , user0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test2 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , user0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test3 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; group0 . setUsers ( vector1 ) ; vector1 . add ( user0 ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , user0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test4 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; group0 . setUsers ( vector1 ) ; vector1 . add ( user0 ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , ( User ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test5 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; group0 . setUsers ( vector1 ) ; user0 . setId ( 949 ) ; vector1 . add ( user0 ) ; User user1 = new User ( ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , user1 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test6 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; group0 . setUsers ( vector1 ) ; user0 . setId ( 949 ) ; vector1 . add ( user0 ) ; User user1 = new User ( ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , user1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test7 ( ) throws Throwable { Vector < Group > vector0 = new Vector < Group > ( ) ; Group group0 = new Group ( ) ; vector0 . add ( group0 ) ; User user0 = new User ( ) ; Vector < User > vector1 = new Vector < User > ( ) ; group0 . setUsers ( vector1 ) ; user0 . setId ( 949 ) ; vector1 . add ( user0 ) ; User user1 = new User ( ) ; user0 . setStatus_id ( 949 ) ; DefaultTreeModel defaultTreeModel0 = TreeModelGenerator . getModel ( "^Q1Q" , ( Vector ) vector0 , ( Vector ) vector1 , user1 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( String rootNodeStr , Vector groups , Vector rooms , User user , boolean showOnlineOnly , boolean showUsersOnly ) { DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode ( rootNodeStr ) ; for ( int i = 0 ; i < groups . size ( ) ; i + + ) { if ( showUsersOnly ) { if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( rootNode , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } else { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( groups . get ( i ) ) ; rootNode . add ( nodeTemp ) ; if ( ( ( Group ) groups . get ( i ) ) . getUsers ( ) ! = null ) { setChildes ( nodeTemp , ( ( Group ) groups . get ( i ) ) . getUsers ( ) , user , showOnlineOnly ) ; } } } for ( int i = 0 ; i < rooms . size ( ) ; i + + ) { DefaultMutableTreeNode nodeTemp = new DefaultMutableTreeNode ( rooms . get ( i ) ) ; rootNode . add ( nodeTemp ) ; } return new DefaultTreeModel ( rootNode ) ; }
void test0 ( ) throws Throwable { JFontChooser jFontChooser0 = new JFontChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test1 ( ) throws Throwable { JFontChooser jFontChooser0 = new JFontChooser ( ( Font ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test2 ( ) throws Throwable { JFontChooser jFontChooser0 = new JFontChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Font showDialog ( Component component , String title ) { FontTracker ok = new FontTracker ( this ) ; JDialog dialog = createDialog ( component , title , true , ok , null ) ; dialog . addWindowListener ( new FontChooserDialog . Closer ( ) ) ; dialog . addComponentListener ( new FontChooserDialog . DisposeOnClose ( ) ) ; dialog . setAlwaysOnTop ( true ) ; dialog . setVisible ( true ) ; / / blocks until user brings dialog down . . . return ok . getFont ( ) ; }
void test3 ( ) throws Throwable { JFontChooser jFontChooser0 = new JFontChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test4 ( ) throws Throwable { JFontChooser jFontChooser0 = new JFontChooser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelectionModel ( FontSelectionModel newModel ) { FontSelectionModel oldModel = selectionModel ; selectionModel = newModel ; oldModel . removeChangeListener ( labelUpdater ) ; newModel . addChangeListener ( labelUpdater ) ; firePropertyChange ( "selectionModel" , oldModel , newModel ) ; }
void test0 ( ) throws Throwable { ContactRenderer contactRenderer0 = new ContactRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTreeCellRendererComponent ( JTree tree , Object value , boolean selected , boolean expanded , boolean leaf , int row , boolean hasFocus ) { ImageIcon icon = null ; returnLabel . setOpaque ( true ) ; returnLabel . setBackground ( Color . white ) ; returnLabel . setFont ( ONLINE_USER_FONT ) ; DefaultMutableTreeNode selectedNode = ( DefaultMutableTreeNode ) value ; if ( selectedNode . getUserObject ( ) instanceof Group ) { icon = group ; returnLabel . setFont ( GROUP_FONT ) ; } else if ( selectedNode . getUserObject ( ) instanceof User ) { if ( ( ( User ) selectedNode . getUserObject ( ) ) . getStatus_id ( ) = = IConstant . ONLINE ) { icon = online ; returnLabel . setFont ( ONLINE_USER_FONT ) ; } else if ( ( ( User ) selectedNode . getUserObject ( ) ) . getStatus_id ( ) = = IConstant . BUSY ) { icon = busy ; returnLabel . setFont ( ONLINE_USER_FONT ) ; } else if ( ( ( User ) selectedNode . getUserObject ( ) ) . getStatus_id ( ) = = IConstant . AWAY ) { icon = away ; returnLabel . setFont ( ONLINE_USER_FONT ) ; } else { icon = offline ; returnLabel . setFont ( OFFLINE_USER_FONT ) ; } } else if ( selectedNode . getUserObject ( ) instanceof Room ) { icon = room ; returnLabel . setFont ( GROUP_FONT ) ; } else { icon = new ImageIcon ( java . awt . Toolkit . getDefaultToolkit ( ) . getImage ( getClass ( ) . getResource ( " / images / chat . jpg" ) ) . getScaledInstance ( 20 , 20 , Image . SCALE_SMOOTH ) ) ; returnLabel . setFont ( ROOT_FONT ) ; } if ( selected = = true ) { returnLabel . setForeground ( Color . WHITE ) ; returnLabel . setBackground ( Color . BLUE ) ; } else { returnLabel . setForeground ( Color . BLACK ) ; returnLabel . setBackground ( Color . WHITE ) ; } returnLabel . setText ( value . toString ( ) ) ; returnLabel . setIcon ( icon ) ; returnLabel . setPreferredSize ( new Dimension ( 200 , 20 ) ) ; return returnLabel ; }
void test1 ( ) throws Throwable { ContactRenderer contactRenderer0 = new ContactRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTreeCellRendererComponent ( JTree tree , Object value , boolean selected , boolean expanded , boolean leaf , int row , boolean hasFocus ) { ImageIcon icon = null ; returnLabel . setOpaque ( true ) ; returnLabel . setBackground ( Color . white ) ; returnLabel . setFont ( ONLINE_USER_FONT ) ; DefaultMutableTreeNode selectedNode = ( DefaultMutableTreeNode ) value ; if ( selectedNode . getUserObject ( ) instanceof Group ) { icon = group ; returnLabel . setFont ( GROUP_FONT ) ; } else if ( selectedNode . getUserObject ( ) instanceof User ) { if ( ( ( User ) selectedNode . getUserObject ( ) ) . getStatus_id ( ) = = IConstant . ONLINE ) { icon = online ; returnLabel . setFont ( ONLINE_USER_FONT ) ; } else if ( ( ( User ) selectedNode . getUserObject ( ) ) . getStatus_id ( ) = = IConstant . BUSY ) { icon = busy ; returnLabel . setFont ( ONLINE_USER_FONT ) ; } else if ( ( ( User ) selectedNode . getUserObject ( ) ) . getStatus_id ( ) = = IConstant . AWAY ) { icon = away ; returnLabel . setFont ( ONLINE_USER_FONT ) ; } else { icon = offline ; returnLabel . setFont ( OFFLINE_USER_FONT ) ; } } else if ( selectedNode . getUserObject ( ) instanceof Room ) { icon = room ; returnLabel . setFont ( GROUP_FONT ) ; } else { icon = new ImageIcon ( java . awt . Toolkit . getDefaultToolkit ( ) . getImage ( getClass ( ) . getResource ( " / images / chat . jpg" ) ) . getScaledInstance ( 20 , 20 , Image . SCALE_SMOOTH ) ) ; returnLabel . setFont ( ROOT_FONT ) ; } if ( selected = = true ) { returnLabel . setForeground ( Color . WHITE ) ; returnLabel . setBackground ( Color . BLUE ) ; } else { returnLabel . setForeground ( Color . BLACK ) ; returnLabel . setBackground ( Color . WHITE ) ; } returnLabel . setText ( value . toString ( ) ) ; returnLabel . setIcon ( icon ) ; returnLabel . setPreferredSize ( new Dimension ( 200 , 20 ) ) ; return returnLabel ; }
void test1 ( ) throws Throwable { ClosableTabbedPaneUI closableTabbedPaneUI0 = new ClosableTabbedPaneUI ( ( ChatClientApp ) null ) ; ClosableTabbedPaneUI . TestPlafLayout closableTabbedPaneUI_TestPlafLayout0 = ( ClosableTabbedPaneUI . TestPlafLayout ) closableTabbedPaneUI0 . createLayoutManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LayoutManager createLayoutManager ( ) { return new TestPlafLayout ( ) ; }
void test0 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; SendFileThread sendFileThread0 = new SendFileThread ( ( File ) null , ( ChatWindowPanel ) null , binaryMessage0 , ( ChatClientApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; SendChatThread sendChatThread0 = new SendChatThread ( ( ChatWindowPanel ) null , textMessage0 , ( ChatClientApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { SendAnnouncementThread sendAnnouncementThread0 = new SendAnnouncementThread ( ( ChatClientApp ) null , ( TextMessage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { PingServerThread pingServerThread0 = new PingServerThread ( ( ChatClientApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; ReceiveFileThread receiveFileThread0 = new ReceiveFileThread ( ( ChatWindowPanel ) null , binaryMessage0 , ( ChatClientApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { FileBO fileBO0 = new FileBO ( "hYUt$zgJm { Xl ( `\" & | q^" , ( ModernChatServer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updatePassword ( int userId , String oldPass , String newPass ) { return businessObject . updatePassword ( userId , oldPass , newPass ) ; }
void test3 ( ) throws Throwable { FileBO fileBO0 = new FileBO ( " < / jobTitle > " , ( ModernChatServer ) null ) ; User user0 = fileBO0 . getAdminUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getAdminUser ( ) { return adminUser ; }
void test5 ( ) throws Throwable { FileBO fileBO0 = new FileBO ( ( String ) null , ( ModernChatServer ) null ) ; Hashtable < Integer , String > hashtable0 = fileBO0 . getPasswords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test13 ( ) throws Throwable { FileBO fileBO0 = new FileBO ( " < / jobTitle > " , ( ModernChatServer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector < Group > loadGroupsAndUsers ( String authToken ) throws RemoteException ; Vector < Room > loadRooms ( String authToken ) throws RemoteException ; Hashtable < Integer , String > returnOnlineIPs ( String authToken ) throws RemoteException ; / / create , update , delete and change password methods String getRootNode ( String authToken ) throws RemoteException ; boolean setRootNode ( String rootNode , String authToken ) throws RemoteException ; User createUser ( User user , String authToken ) throws RemoteException ; Group createGroup ( Group group , String authToken ) throws RemoteException ; Room createRoom ( Room room , String authToken ) throws RemoteException ; User delUser ( User user , String authToken ) throws RemoteException ; Group delGroup ( Group group , String authToken ) throws RemoteException ; Room delRoom ( Room room , String authToken ) throws RemoteException ; User updateUser ( User user , String authToken ) throws RemoteException ; User updateUserGroup ( User user , String authToken ) throws RemoteException ; Group updateGroup ( Group group , String authToken ) throws RemoteException ; Room updateRoom ( Room room , String authToken ) throws RemoteException ; boolean setNewDefaultPassword ( String newPass , String authToken ) throws RemoteException ; User resetUserPass ( User user , String authToken ) throws RemoteException ; / / sign in methods LoginBean signInAsAdmin ( String emailAddr , String password ) throws RemoteException ; ResultBean changeAdminPassword ( String emailAddr , String oldPass , String newPass ) throws RemoteException ; / / ping and shutdown server boolean ping ( ) throws RemoteException ; boolean refreshContactList ( String authToken ) throws RemoteException ; void shutdownServer ( String justification , String authToken ) throws RemoteException ; / / kick of user or all users . boolean kickOffUsers ( String justification , String authToken ) throws RemoteException ; boolean kickOffUser ( int userId , String authToken ) throws RemoteException ; / / log and security methids boolean setLogLevel ( int level , boolean save , String authToken ) throws RemoteException ; int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test14 ( ) throws Throwable { FileBO fileBO0 = new FileBO ( "" , ( ModernChatServer ) null ) ; Vector < Room > vector0 = fileBO0 . loadRooms ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector < Room > loadRooms ( String authToken ) throws RemoteException ; Hashtable < Integer , String > returnOnlineIPs ( String authToken ) throws RemoteException ; / / create , update , delete and change password methods String getRootNode ( String authToken ) throws RemoteException ; boolean setRootNode ( String rootNode , String authToken ) throws RemoteException ; User createUser ( User user , String authToken ) throws RemoteException ; Group createGroup ( Group group , String authToken ) throws RemoteException ; Room createRoom ( Room room , String authToken ) throws RemoteException ; User delUser ( User user , String authToken ) throws RemoteException ; Group delGroup ( Group group , String authToken ) throws RemoteException ; Room delRoom ( Room room , String authToken ) throws RemoteException ; User updateUser ( User user , String authToken ) throws RemoteException ; User updateUserGroup ( User user , String authToken ) throws RemoteException ; Group updateGroup ( Group group , String authToken ) throws RemoteException ; Room updateRoom ( Room room , String authToken ) throws RemoteException ; boolean setNewDefaultPassword ( String newPass , String authToken ) throws RemoteException ; User resetUserPass ( User user , String authToken ) throws RemoteException ; / / sign in methods LoginBean signInAsAdmin ( String emailAddr , String password ) throws RemoteException ; ResultBean changeAdminPassword ( String emailAddr , String oldPass , String newPass ) throws RemoteException ; / / ping and shutdown server boolean ping ( ) throws RemoteException ; boolean refreshContactList ( String authToken ) throws RemoteException ; void shutdownServer ( String justification , String authToken ) throws RemoteException ; / / kick of user or all users . boolean kickOffUsers ( String justification , String authToken ) throws RemoteException ; boolean kickOffUser ( int userId , String authToken ) throws RemoteException ; / / log and security methids boolean setLogLevel ( int level , boolean save , String authToken ) throws RemoteException ; int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test0 ( ) throws Throwable { SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread0 = new SendKickOffByLoginMessageThread ( ( ClientInterface ) null , false ) ; sendKickOffByLoginMessageThread0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { User user0 = new User ( ) ; SendUserUpdatedStatusThread sendUserUpdatedStatusThread0 = new SendUserUpdatedStatusThread ( ( ClientInterface ) null , user0 ) ; sendUserUpdatedStatusThread0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { SendRefreshContactThread sendRefreshContactThread0 = new SendRefreshContactThread ( ( ClientInterface ) null , ( Vector < Group > ) null ) ; sendRefreshContactThread0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test0 ( ) throws Throwable { SendKickOffMessageThread sendKickOffMessageThread0 = new SendKickOffMessageThread ( ( ClientInterface ) null , "p ] MFZ < VGiNY [ } h#WpFk" ) ; sendKickOffMessageThread0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test0 ( ) throws Throwable { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; String string0 = adminSettingBean0 . getAdminEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdminEmail ( ) { return adminEmail ; }
void test1 ( ) throws Throwable { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; String string0 = adminSettingBean0 . getServerPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerPort ( ) { return serverPort ; }
void test2 ( ) throws Throwable { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; adminSettingBean0 . setServerURL ( "$L ) p75\"# / config / admin . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdminEmail ( ) { return adminEmail ; }
void test3 ( ) throws Throwable { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; String string0 = adminSettingBean0 . getServerURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerURL ( ) { return serverURL ; }
void test4 ( ) throws Throwable { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdminEmail ( ) { return adminEmail ; }
void test5 ( ) throws Throwable { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerPort ( ) { return serverPort ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { AdminSettingBean adminSettingBean0 = new AdminSettingBean ( "$L ) p75\"#" ) ; adminSettingBean0 . updateSettings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdminEmail ( ) { return adminEmail ; }
void test0 ( ) throws Throwable { Status status0 = new Status ( ) ; int int0 = status0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Status status0 = new Status ( ) ; String string0 = status0 . getDesc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesc ( ) { return desc ; }
void test2 ( ) throws Throwable { Status status0 = new Status ( ) ; status0 . setCustomMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesc ( ) { return desc ; }
void test3 ( ) throws Throwable { Status status0 = new Status ( ) ; status0 . setDesc ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomMessage ( ) { return customMessage ; }
void test4 ( ) throws Throwable { Status status0 = new Status ( ) ; String string0 = status0 . getCustomMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomMessage ( ) { return customMessage ; }
void test5 ( ) throws Throwable { Status status0 = new Status ( ) ; status0 . setId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; String string0 = textMessage0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test1 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; textMessage0 . setFromUserId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFromUserId ( ) { return fromUserId ; }
void test2 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; String string0 = textMessage0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return title ; }
void test3 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; int int0 = textMessage0 . getFromUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFromUserId ( ) { return fromUserId ; }
void test4 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; textMessage0 . setTargetType ( ( - 190 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTargetType ( ) { return targetType ; }
void test5 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; textMessage0 . setMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test6 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; int int0 = textMessage0 . getTargetType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTargetType ( ) { return targetType ; }
void test7 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; textMessage0 . setToUserId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getToUserId ( ) { return toUserId ; }
void test8 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; textMessage0 . setTitle ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test9 ( ) throws Throwable { TextMessage textMessage0 = new TextMessage ( ) ; int int0 = textMessage0 . getToUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getToUserId ( ) { return toUserId ; }
void test0 ( ) throws Throwable { Room room0 = new Room ( ) ; room0 . setId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Room room0 = new Room ( ) ; String string0 = room0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test2 ( ) throws Throwable { Room room0 = new Room ( ) ; int int0 = room0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test3 ( ) throws Throwable { Room room0 = new Room ( ) ; int [ ] intArray0 = room0 . getUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getUserId ( ) { return userId ; }
void test4 ( ) throws Throwable { Room room0 = new Room ( ) ; String string0 = room0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { Room room0 = new Room ( ) ; int [ ] intArray0 = new int [ 3 ] ; room0 . setName ( "Vl ; V6 > a4yME5 Rl" ) ; room0 . setUserId ( intArray0 ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 1676 ) ; BufferedWriter bufferedWriter0 = new BufferedWriter ( ( Writer ) charArrayWriter0 ) ; room0 . writeToFile ( bufferedWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . setId ( 388 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Group group0 = new Group ( ) ; String string0 = group0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { Group group0 = new Group ( ) ; int int0 = group0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test4 ( ) throws Throwable { Group group0 = new Group ( ) ; Vector < User > vector0 = group0 . getUsers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector < User > getUsers ( ) { return users ; }
void test5 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . setUsers ( ( Vector < User > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test6 ( ) throws Throwable { Group group0 = new Group ( ) ; group0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test7 ( ) throws Throwable { Group group0 = new Group ( ) ; String string0 = group0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test0 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setAction ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAction ( ) { return action ; }
void test1 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; String string0 = binaryMessage0 . getDesc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesc ( ) { return desc ; }
void test2 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; int int0 = binaryMessage0 . getToUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getToUserId ( ) { return toUserId ; }
void test3 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setFromUserId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFromUserId ( ) { return fromUserId ; }
void test4 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; byte [ ] byteArray0 = binaryMessage0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getData ( ) { return data ; }
void test5 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setDesc ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAction ( ) { return action ; }
void test6 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setTargetType ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTargetType ( ) { return targetType ; }
void test7 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; int int0 = binaryMessage0 . getAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAction ( ) { return action ; }
void test8 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; int int0 = binaryMessage0 . getFromUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFromUserId ( ) { return fromUserId ; }
void test9 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; String string0 = binaryMessage0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return title ; }
void test10 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setToUserId ( 65 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getToUserId ( ) { return toUserId ; }
void test11 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setTitle ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return title ; }
void test12 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; int int0 = binaryMessage0 . getTargetType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTargetType ( ) { return targetType ; }
void test13 ( ) throws Throwable { BinaryMessage binaryMessage0 = new BinaryMessage ( ) ; binaryMessage0 . setData ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTargetType ( ) { return targetType ; }
void test0 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; String string0 = serverSettingBean0 . getServerPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerPort ( ) { return serverPort ; }
void test1 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; serverSettingBean0 . setConnectionType ( " ( ! / config / server . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test2 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; String string0 = serverSettingBean0 . getLogLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test3 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( "g$ - . % < CFVm" ) ; serverSettingBean0 . setServerPort ( "g$ - . % < CFVm / config / server . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerPort ( ) { return serverPort ; }
void test4 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; String string0 = serverSettingBean0 . getServerURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerURL ( ) { return serverURL ; }
void test5 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( "d ! ZzB^" ) ; serverSettingBean0 . setDefualtPassword ( "d ! ZzB^ / config / server . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRootNode ( String authToken ) throws RemoteException ; boolean setRootNode ( String rootNode , String authToken ) throws RemoteException ; User createUser ( User user , String authToken ) throws RemoteException ; Group createGroup ( Group group , String authToken ) throws RemoteException ; Room createRoom ( Room room , String authToken ) throws RemoteException ; User delUser ( User user , String authToken ) throws RemoteException ; Group delGroup ( Group group , String authToken ) throws RemoteException ; Room delRoom ( Room room , String authToken ) throws RemoteException ; User updateUser ( User user , String authToken ) throws RemoteException ; User updateUserGroup ( User user , String authToken ) throws RemoteException ; Group updateGroup ( Group group , String authToken ) throws RemoteException ; Room updateRoom ( Room room , String authToken ) throws RemoteException ; boolean setNewDefaultPassword ( String newPass , String authToken ) throws RemoteException ; User resetUserPass ( User user , String authToken ) throws RemoteException ; / / sign in methods LoginBean signInAsAdmin ( String emailAddr , String password ) throws RemoteException ; ResultBean changeAdminPassword ( String emailAddr , String oldPass , String newPass ) throws RemoteException ; / / ping and shutdown server boolean ping ( ) throws RemoteException ; boolean refreshContactList ( String authToken ) throws RemoteException ; void shutdownServer ( String justification , String authToken ) throws RemoteException ; / / kick of user or all users . boolean kickOffUsers ( String justification , String authToken ) throws RemoteException ; boolean kickOffUser ( int userId , String authToken ) throws RemoteException ; / / log and security methids boolean setLogLevel ( int level , boolean save , String authToken ) throws RemoteException ; int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test6 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; serverSettingBean0 . setServerURL ( " ( ! / config / server . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnectionType ( ) { return connectionType ; }
void test7 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; String string0 = serverSettingBean0 . getSecureMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureMode ( ) { return secureMode ; }
void test8 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( "g$ - . % < CFVm" ) ; serverSettingBean0 . setLogLevel ( "g$ - . % < CFVm / config / server . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureMode ( ) { return secureMode ; }
void test9 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( "g$ - . % < CFVm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRootNode ( String authToken ) throws RemoteException ; boolean setRootNode ( String rootNode , String authToken ) throws RemoteException ; User createUser ( User user , String authToken ) throws RemoteException ; Group createGroup ( Group group , String authToken ) throws RemoteException ; Room createRoom ( Room room , String authToken ) throws RemoteException ; User delUser ( User user , String authToken ) throws RemoteException ; Group delGroup ( Group group , String authToken ) throws RemoteException ; Room delRoom ( Room room , String authToken ) throws RemoteException ; User updateUser ( User user , String authToken ) throws RemoteException ; User updateUserGroup ( User user , String authToken ) throws RemoteException ; Group updateGroup ( Group group , String authToken ) throws RemoteException ; Room updateRoom ( Room room , String authToken ) throws RemoteException ; boolean setNewDefaultPassword ( String newPass , String authToken ) throws RemoteException ; User resetUserPass ( User user , String authToken ) throws RemoteException ; / / sign in methods LoginBean signInAsAdmin ( String emailAddr , String password ) throws RemoteException ; ResultBean changeAdminPassword ( String emailAddr , String oldPass , String newPass ) throws RemoteException ; / / ping and shutdown server boolean ping ( ) throws RemoteException ; boolean refreshContactList ( String authToken ) throws RemoteException ; void shutdownServer ( String justification , String authToken ) throws RemoteException ; / / kick of user or all users . boolean kickOffUsers ( String justification , String authToken ) throws RemoteException ; boolean kickOffUser ( int userId , String authToken ) throws RemoteException ; / / log and security methids boolean setLogLevel ( int level , boolean save , String authToken ) throws RemoteException ; int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test10 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( "d ! ZzB^" ) ; String string0 = serverSettingBean0 . getDefualtPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefualtPassword ( ) { return defualtPassword ; }
void test11 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; String string0 = serverSettingBean0 . getRootNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRootNode ( String authToken ) throws RemoteException ; boolean setRootNode ( String rootNode , String authToken ) throws RemoteException ; User createUser ( User user , String authToken ) throws RemoteException ; Group createGroup ( Group group , String authToken ) throws RemoteException ; Room createRoom ( Room room , String authToken ) throws RemoteException ; User delUser ( User user , String authToken ) throws RemoteException ; Group delGroup ( Group group , String authToken ) throws RemoteException ; Room delRoom ( Room room , String authToken ) throws RemoteException ; User updateUser ( User user , String authToken ) throws RemoteException ; User updateUserGroup ( User user , String authToken ) throws RemoteException ; Group updateGroup ( Group group , String authToken ) throws RemoteException ; Room updateRoom ( Room room , String authToken ) throws RemoteException ; boolean setNewDefaultPassword ( String newPass , String authToken ) throws RemoteException ; User resetUserPass ( User user , String authToken ) throws RemoteException ; / / sign in methods LoginBean signInAsAdmin ( String emailAddr , String password ) throws RemoteException ; ResultBean changeAdminPassword ( String emailAddr , String oldPass , String newPass ) throws RemoteException ; / / ping and shutdown server boolean ping ( ) throws RemoteException ; boolean refreshContactList ( String authToken ) throws RemoteException ; void shutdownServer ( String justification , String authToken ) throws RemoteException ; / / kick of user or all users . boolean kickOffUsers ( String justification , String authToken ) throws RemoteException ; boolean kickOffUser ( int userId , String authToken ) throws RemoteException ; / / log and security methids boolean setLogLevel ( int level , boolean save , String authToken ) throws RemoteException ; int getLogLevel ( String authToken ) throws RemoteException ; int getSecurityMode ( String authToken ) throws RemoteException ; int setSecurityMode ( int level , String authToken ) throws RemoteException ; / / send announcements boolean sendGlobalTextAnn ( String msg , String authToken ) throws RemoteException ; / / secure messages methods boolean sendGlobalSecureTextAnn ( String msg , String authToken ) throws RemoteException ; }
void test12 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( "g$ - . % < CFVm" ) ; String string0 = serverSettingBean0 . getConnectionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnectionType ( ) { return connectionType ; }
void test13 ( ) throws Throwable { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; serverSettingBean0 . setSecureMode ( " ( ! / config / server . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnectionType ( ) { return connectionType ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ServerSettingBean serverSettingBean0 = new ServerSettingBean ( " ( ! " ) ; serverSettingBean0 . updateSettings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerURL ( ) { return serverURL ; }
void test0 ( ) throws Throwable { LoginBean loginBean0 = new LoginBean ( ) ; loginBean0 . setAuthToken ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureToken ( ) { return secureToken ; }
void test1 ( ) throws Throwable { LoginBean loginBean0 = new LoginBean ( ) ; User user0 = loginBean0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( ) { return user ; }
void test2 ( ) throws Throwable { LoginBean loginBean0 = new LoginBean ( ) ; loginBean0 . setUser ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthToken ( ) { return authToken ; }
void test3 ( ) throws Throwable { LoginBean loginBean0 = new LoginBean ( ) ; String string0 = loginBean0 . getAuthToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthToken ( ) { return authToken ; }
void test4 ( ) throws Throwable { LoginBean loginBean0 = new LoginBean ( ) ; loginBean0 . setSecureToken ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthToken ( ) { return authToken ; }
void test5 ( ) throws Throwable { LoginBean loginBean0 = new LoginBean ( ) ; String string0 = loginBean0 . getSecureToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureToken ( ) { return secureToken ; }
void test0 ( ) throws Throwable { ResultBean resultBean0 = new ResultBean ( ) ; String string0 = resultBean0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test1 ( ) throws Throwable { ResultBean resultBean0 = new ResultBean ( ) ; resultBean0 . setSuccess ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccess ( ) { return success ; }
void test2 ( ) throws Throwable { ResultBean resultBean0 = new ResultBean ( false , ( - 280 ) , "AuHt~ : mRr ( pT" ) ; boolean boolean0 = resultBean0 . isSuccess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAction ( ) { return action ; }
void test3 ( ) throws Throwable { ResultBean resultBean0 = new ResultBean ( false , ( - 280 ) , "AuHt~ : mRr ( pT" ) ; resultBean0 . setMessage ( "AuHt~ : mRr ( pT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccess ( ) { return success ; }
void test4 ( ) throws Throwable { ResultBean resultBean0 = new ResultBean ( true , 736 , "" ) ; resultBean0 . setAction ( 736 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccess ( ) { return success ; }
void test5 ( ) throws Throwable { ResultBean resultBean0 = new ResultBean ( false , ( - 280 ) , "AuHt~ : mRr ( pT" ) ; int int0 = resultBean0 . getAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccess ( ) { return success ; }
void test0 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setGroup_id ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGroup_id ( ) { return group_id ; }
void test1 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . getDirectPhone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDirectPhone ( ) { return directPhone ; }
void test2 ( ) throws Throwable { User user0 = new User ( ) ; boolean boolean0 = user0 . isOnlyStartChat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOnlyStartChat ( ) { return onlyStartChat ; }
void test3 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . getJobTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJobTitle ( ) { return jobTitle ; }
void test4 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setStatus_id ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus_id ( ) { return status_id ; }
void test5 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setId ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test6 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setShowMyStatus ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShowMyStatus ( ) { return showMyStatus ; }
void test7 ( ) throws Throwable { User user0 = new User ( ) ; boolean boolean0 = user0 . isShowMyStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShowMyStatus ( ) { return showMyStatus ; }
void test8 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test9 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setJobTitle ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test10 ( ) throws Throwable { User user0 = new User ( ) ; int int0 = user0 . getStatus_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus_id ( ) { return status_id ; }
void test11 ( ) throws Throwable { User user0 = new User ( ) ; int int0 = user0 . getGroup_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGroup_id ( ) { return group_id ; }
void test12 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setEmail ( " ) @#m < E = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShowMyStatus ( ) { return showMyStatus ; }
void test13 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJobTitle ( ) { return jobTitle ; }
void test14 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setCanJoinChatRoom ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCanJoinChatRoom ( ) { return canJoinChatRoom ; }
void test15 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setOnlyStartChat ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOnlyStartChat ( ) { return onlyStartChat ; }
void test17 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEmail ( ) { return email ; }
void test18 ( ) throws Throwable { User user0 = new User ( ) ; String string0 = user0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test19 ( ) throws Throwable { User user0 = new User ( ) ; int int0 = user0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test20 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setDirectPhone ( "M@qM ? w : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEmail ( ) { return email ; }
void test21 ( ) throws Throwable { User user0 = new User ( ) ; boolean boolean0 = user0 . isCanJoinChatRoom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCanJoinChatRoom ( ) { return canJoinChatRoom ; }
void test0 ( ) throws Throwable { StringEncrypter stringEncrypter0 = StringEncrypter . getInstance ( " / * N0~#G8 { gmegT" ) ; String string0 = stringEncrypter0 . encrypt ( " / * N0~#G8 { gmegT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encrypt ( String str ) { if ( str = = null ) return null ; try { / / Encode the string into bytes using utf - 8 byte [ ] utf8 = str . getBytes ( "UTF8" ) ; / / Encrypt byte [ ] enc = ecipher . doFinal ( utf8 ) ; / / Encode bytes to base64 to get a string return StringEncoder64 . encode ( enc ) ; } catch ( Exception e ) { } return null ; }
void test1 ( ) throws Throwable { StringEncrypter stringEncrypter0 = StringEncrypter . getInstance ( "t@3`dX ! b ( > i" ) ; String string0 = stringEncrypter0 . encrypt ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encrypt ( String str ) { if ( str = = null ) return null ; try { / / Encode the string into bytes using utf - 8 byte [ ] utf8 = str . getBytes ( "UTF8" ) ; / / Encrypt byte [ ] enc = ecipher . doFinal ( utf8 ) ; / / Encode bytes to base64 to get a string return StringEncoder64 . encode ( enc ) ; } catch ( Exception e ) { } return null ; }
void test2 ( ) throws Throwable { StringEncrypter stringEncrypter0 = StringEncrypter . getInstance ( "3 > 4Chq ( P < N" ) ; String string0 = stringEncrypter0 . decrypt ( "3 > 4Chq ( P < N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decrypt ( String str ) { if ( str = = null ) return null ; try { / / Decode base64 to get bytes byte [ ] dec = StringEncoder64 . decode ( str ) ; / / Decrypt byte [ ] utf8 = dcipher . doFinal ( dec ) ; / / Decode using utf - 8 return new String ( utf8 , "UTF8" ) ; } catch ( Exception e ) { } return null ; }
void test3 ( ) throws Throwable { StringEncrypter stringEncrypter0 = StringEncrypter . getInstance ( "3 > 4Chq ( P < N" ) ; String string0 = stringEncrypter0 . decrypt ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decrypt ( String str ) { if ( str = = null ) return null ; try { / / Decode base64 to get bytes byte [ ] dec = StringEncoder64 . decode ( str ) ; / / Decrypt byte [ ] utf8 = dcipher . doFinal ( dec ) ; / / Decode using utf - 8 return new String ( utf8 , "UTF8" ) ; } catch ( Exception e ) { } return null ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = StringEncoder64 . decode ( "ABCDEFGHIJKLMNOPQjSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 + / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decode ( char c ) { if ( c > = 'A' & & c < = 'Z' ) return ( ( int ) c ) - 65 ; else if ( c > = 'a' & & c < = 'z' ) return ( ( int ) c ) - 97 + 26 ; else if ( c > = '0' & & c < = '9' ) return ( ( int ) c ) - 48 + 26 + 26 ; else switch ( c ) { case ' + ' : return 62 ; case ' / ' : return 63 ; case ' = ' : return 0 ; default : System . out . println ( "C = " + c ) ; throw new RuntimeException ( "unexpected code : " + c ) ; } }
void test1 ( ) throws Throwable { String string0 = StringEncoder64 . decodeStringUTF8 ( "JEkqLyoyd1k = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodeStringUTF8 ( String data ) { try { return new String ( decode ( data ) , "UTF8" ) ; } catch ( UnsupportedEncodingException ex ) { ex . printStackTrace ( ) ; } return null ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 32 ] ; String string0 = StringEncoder64 . encode ( byteArray0 , ( int ) ( byte ) 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encode ( byte [ ] data ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; String ret = null ; if ( encode ( data , 0 , data . length , byteArrayOutputStream ) ) ret = new String ( byteArrayOutputStream . toByteArray ( ) ) ; return ret ; }
void test3 ( ) throws Throwable { StringEncoder64 stringEncoder64_0 = new StringEncoder64 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { String string0 = StringEncoder64 . encodeStringUTF8 ( "ABCDEFGHIJKLMNOPQjSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 + / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encodeStringUTF8 ( String data ) { try { return encode ( data . getBytes ( "UTF8" ) ) ; } catch ( UnsupportedEncodingException ex ) { ex . printStackTrace ( ) ; } return null ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 32 ] ; StringBuffer stringBuffer0 = StringEncoder64 . encode ( byteArray0 , ( int ) ( byte ) 0 , 8 , ( StringBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test7 ( ) throws Throwable { String string0 = StringEncoder64 . encodeStringUTF8 ( "$I * / * 2wY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encodeStringUTF8 ( String data ) { try { return encode ( data . getBytes ( "UTF8" ) ) ; } catch ( UnsupportedEncodingException ex ) { ex . printStackTrace ( ) ; } return null ; }
void test8 ( ) throws Throwable { String string0 = StringEncoder64 . encodeStringUTF8 ( "JEkqLyoyd1k = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encodeStringUTF8 ( String data ) { try { return encode ( data . getBytes ( "UTF8" ) ) ; } catch ( UnsupportedEncodingException ex ) { ex . printStackTrace ( ) ; } return null ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = StringEncoder64 . decode ( "QUJDREVGR0hJSktMTU5PUFFqU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJz\r\ndHV2d3h5ejAxMjM0NTY3ODkrLw = = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decode ( char c ) { if ( c > = 'A' & & c < = 'Z' ) return ( ( int ) c ) - 65 ; else if ( c > = 'a' & & c < = 'z' ) return ( ( int ) c ) - 97 + 26 ; else if ( c > = '0' & & c < = '9' ) return ( ( int ) c ) - 48 + 26 + 26 ; else switch ( c ) { case ' + ' : return 62 ; case ' / ' : return 63 ; case ' = ' : return 0 ; default : System . out . println ( "C = " + c ) ; throw new RuntimeException ( "unexpected code : " + c ) ; } }
void test2 ( ) throws Throwable { String string0 = XMLParser . returnSpecial ( "F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String returnSpecial ( String input ) { String output = input . replaceAll ( " & lt ; " , " < " ) ; return output ; }
void test3 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( "F" ) ; Hashtable < String , CharacterData > hashtable0 = new Hashtable < String , CharacterData > ( ) ; xMLParser0 . setProperty ( "F" , "F" , ( Hashtable ) hashtable0 ) ; xMLParser0 . setProperty ( "F" , "F" , ( Hashtable ) hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setProperty ( String tagName , String id , Hashtable elements ) { elements . remove ( "id" ) ; boolean replaced = false ; / * create the root node * / Element rowElement = doc . createElement ( tagName ) ; rowElement . setAttribute ( "id" , id ) ; NodeList nodeList = root . getElementsByTagName ( tagName ) ; String temp = null ; / * create the column nodes and append each to the row node * / Element columnElement ; Text textData ; Enumeration attributeEnum = elements . keys ( ) ; while ( attributeEnum . hasMoreElements ( ) ) { temp = ( String ) attributeEnum . nextElement ( ) ; columnElement = doc . createElement ( temp ) ; textData = doc . createTextNode ( ( String ) elements . get ( temp ) ) ; columnElement . appendChild ( textData ) ; rowElement . appendChild ( columnElement ) ; } / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { String keyID = ( ( Element ) nodeList . item ( i ) ) . getAttribute ( "id" ) ; if ( keyID . equalsIgnoreCase ( id ) ) { root . replaceChild ( rowElement , nodeList . item ( i ) ) ; replaced = true ; } } / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * if ( ! replaced ) { root . appendChild ( rowElement ) ; } }
void test4 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( "F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test5 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( "F" ) ; Vector < Object > vector0 = xMLParser0 . getProperty ( "NlQhy / J@zLE > = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector getProperty ( String tagName ) { Vector text = new Vector ( ) ; String text2 = new String ( ) ; String subTag = new String ( ) ; boolean found = false ; File file = new File ( fileName ) ; NodeList nodes = root . getElementsByTagName ( tagName ) ; / / System . out . println ( " [ XMLReader ] Found shape nodes " + nodes . getLength ( ) ) ; String keyID = null ; int i = 0 ; if ( nodes . getLength ( ) ! = 0 ) do { Hashtable table = new Hashtable ( ) ; keyID = ( ( Element ) nodes . item ( i ) ) . getAttribute ( "id" ) ; table . put ( "id" , keyID ) ; NodeList lines = nodes . item ( i ) . getChildNodes ( ) ; for ( int j = 0 ; j < lines . getLength ( ) ; j + + ) { Node name = ( Node ) lines . item ( j ) ; / / Collect the text from the < Line > element StringBuffer sb = new StringBuffer ( ) ; for ( Node child = name . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { if ( child instanceof CharacterData ) { CharacterData cd = ( CharacterData ) child ; sb . append ( cd . getData ( ) ) ; text2 = sb . toString ( ) . trim ( ) ; / / System . out . println ( " [ XMLReader ] " + child . getParentNode ( ) . getNodeName ( ) + " = " + text2 ) ; table . put ( child . getParentNode ( ) . getNodeName ( ) , text2 ) ; } } } i + + ; text . addElement ( table ) ; } while ( i < nodes . getLength ( ) & & ! found ) ; return text ; }
void test6 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( "F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test7 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( "F" ) ; String string0 = xMLParser0 . getSingleProperty ( "NlQhy / J@zLE > = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleProperty ( String tagName ) { String text = new String ( ) ; boolean found = false ; Hashtable table = new Hashtable ( ) ; NodeList nodes = root . getElementsByTagName ( tagName ) ; int i = 0 ; if ( nodes . getLength ( ) ! = 0 ) do { StringBuffer sb = new StringBuffer ( ) ; for ( Node child = nodes . item ( i ) . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { if ( child instanceof CharacterData ) { CharacterData cd = ( CharacterData ) child ; sb . append ( cd . getData ( ) ) ; text = sb . toString ( ) . trim ( ) ; } } i + + ; } while ( i < nodes . getLength ( ) & & ! found ) ; return text ; }
void test8 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( "F" ) ; Hashtable < String , CharacterData > hashtable0 = new Hashtable < String , CharacterData > ( ) ; xMLParser0 . addProperty ( "F" , "NlQhy / J@zLE > = " , ( Hashtable ) hashtable0 ) ; xMLParser0 . setProperty ( "F" , "F" , ( Hashtable ) hashtable0 ) ; String string0 = xMLParser0 . getSingleProperty ( "F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleProperty ( String tagName ) { String text = new String ( ) ; boolean found = false ; Hashtable table = new Hashtable ( ) ; NodeList nodes = root . getElementsByTagName ( tagName ) ; int i = 0 ; if ( nodes . getLength ( ) ! = 0 ) do { StringBuffer sb = new StringBuffer ( ) ; for ( Node child = nodes . item ( i ) . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { if ( child instanceof CharacterData ) { CharacterData cd = ( CharacterData ) child ; sb . append ( cd . getData ( ) ) ; text = sb . toString ( ) . trim ( ) ; } } i + + ; } while ( i < nodes . getLength ( ) & & ! found ) ; return text ; }
void test0 ( ) throws Throwable { FileEncrypter fileEncrypter0 = FileEncrypter . getInstanceInit ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileEncrypter getInstanceInit ( byte [ ] strkey ) { fileEncrypter = new FileEncrypter ( strkey ) ; return fileEncrypter ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { FileEncrypter fileEncrypter0 = FileEncrypter . getInstance ( ) ; File file0 = new File ( "FEL ( w$i" , "FEL ( w$i" ) ; byte [ ] byteArray0 = fileEncrypter0 . fileEncrypt ( file0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] fileEncrypt ( File file , File file2 ) { FileInputStream fis = null ; FileOutputStream fos = null ; try { fos = new FileOutputStream ( file2 ) ; fis = new FileInputStream ( file ) ; int lenght = fis . available ( ) ; / / System . out . println ( "Length = " + lenght ) ; String len = "" + lenght ; while ( len . length ( ) < 8 ) { len = "0" + len ; } fos . write ( len . getBytes ( ) ) ; byte [ ] data = null ; for ( int i = 0 ; i < lenght ; i = i + 8 ) { data = new byte [ 8 ] ; fis . read ( data ) ; data = StringEncoder64 . encode ( data ) . getBytes ( "UTF8" ) ; byte [ ] enc = encryptBlowfish ( new String ( data ) . getBytes ( "UTF8" ) ) ; / / System . out . println ( "Length = " + enc . length ) ; fos . write ( enc ) ; } fos . close ( ) ; fis . close ( ) ; fis = new FileInputStream ( file2 ) ; int n = fis . available ( ) ; data = new byte [ n ] ; fis . read ( data ) ; fis . close ( ) ; file2 . delete ( ) ; return data ; } catch ( Exception ex ) { / / ex . printStackTrace ( ) ; return null ; } finally { try { if ( fis ! = null ) fis . close ( ) ; if ( fos ! = null ) fos . close ( ) ; } catch ( IOException ex ) { } } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { FileEncrypter fileEncrypter0 = FileEncrypter . getInstance ( ) ; File file0 = new File ( "FEL ( w$i" , "FEL ( w$i" ) ; byte [ ] byteArray0 = new byte [ 7 ] ; fileEncrypter0 . fileDecrypt ( byteArray0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void fileDecrypt ( byte [ ] inputData , File file2 ) { FileOutputStream fos = null ; try { fos = new FileOutputStream ( file2 ) ; byte [ ] data = new byte [ 8 ] ; System . arraycopy ( inputData , 0 , data , 0 , 8 ) ; int lenght = Integer . parseInt ( new String ( data ) ) ; / / System . out . println ( "Original size = " + lenght ) ; int partitions = lenght / 8 ; / / System . out . println ( "partitions = " + partitions ) ; int last = lenght%8 ; / / System . out . println ( "last size = " + last ) ; int current = 0 ; for ( int i = 0 ; i < partitions ; i + + ) { data = new byte [ 16 ] ; System . arraycopy ( inputData , 8 + i * 16 , data , 0 , 16 ) ; byte [ ] dec = decryptBlowfish ( data ) ; dec = StringEncoder64 . decode ( new String ( dec , "UTF8" ) ) ; fos . write ( dec ) ; / / System . out . println ( "Current = " + current ) ; current + + ; } if ( last ! = 0 ) { / / System . out . println ( "in last" ) ; data = new byte [ 16 ] ; System . arraycopy ( inputData , 8 + partitions * 16 , data , 0 , 16 ) ; byte [ ] dec = decryptBlowfish ( data ) ; dec = StringEncoder64 . decode ( new String ( dec , "UTF8" ) ) ; byte [ ] temp = new byte [ last ] ; System . arraycopy ( dec , 0 , temp , 0 , last ) ; / / System . out . println ( "last = " + temp ) ; fos . write ( temp ) ; } } catch ( Exception ex ) { / / ex . printStackTrace ( ) ; return ; } finally { try { if ( fos ! = null ) fos . close ( ) ; } catch ( IOException ex ) { } } }
