void test0 ( ) throws Throwable { LibrarySuite librarySuite0 = LibrarySuite . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LibrarySuite getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { Library library0 = new Library ( ) ; DictionaryInfo dictionaryInfo0 = library0 . getDictionary ( "Failed to get local hostname" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DictionaryInfo getDictionary ( String version ) { return dictionaries . get ( version ) ; }
void test1 ( ) throws Throwable { Library library0 = new Library ( ) ; List < DictionaryInfo > list0 = library0 . getDictionaries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DictionaryInfo > getDictionaries ( ) { return new ArrayList < DictionaryInfo > ( dictionaries . values ( ) ) ; }
void test2 ( ) throws Throwable { Library library0 = new Library ( ) ; boolean boolean0 = library0 . loadFromDirectory ( "Failed to get local hostname" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean loadFromDirectory ( String libraryPath ) { boolean result = true ; long startTime = System . currentTimeMillis ( ) ; if ( ! dictionaries . isEmpty ( ) ) { logger . debug ( "Unloading previous dictionaries" ) ; dictionaries . clear ( ) ; } / / Cleanup JVM before loading System . gc ( ) ; long startMemory = Runtime . getRuntime ( ) . freeMemory ( ) ; File path = new File ( libraryPath ) ; if ( path . isDirectory ( ) ) { File [ ] files = path . listFiles ( ) ; if ( files . length ! = 0 ) { for ( int i = 0 ; i < files . length ; i + + ) { if ( files [ i ] . isDirectory ( ) ) { loadDirectory ( arrangeFiles ( files [ i ] . listFiles ( ) ) , files [ i ] . getName ( ) ) ; } } if ( ! dictionaries . isEmpty ( ) ) { logger . debug ( "Loaded " + dictionaries . size ( ) + " FIX dictionaries . " ) ; } else { logger . error ( "Unable to load any dictionaries" ) ; } } else { logger . error ( "Supplied directory is empty . " ) ; result = false ; } } else { logger . error ( "Supplied path is not a directory . " ) ; result = false ; } / / Cleanup JVM after loading System . gc ( ) ; logger . debug ( "Approximate memory allocation : " + new DecimalFormat ( ) . format ( ( ( double ) ( Runtime . getRuntime ( ) . freeMemory ( ) - startMemory ) / 1000000 ) ) + " MB . " ) ; logger . info ( "Loading time : " + ( System . currentTimeMillis ( ) - startTime ) + " milliseconds . " ) ; return result ; }
void test2 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( ( String ) null ) ; dictionaryInfo0 . setVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test4 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " < O & Jgb ( " ) ; String string0 = dictionaryInfo0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test5 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( ( String ) null ) ; List < FieldInfo > list0 = dictionaryInfo0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FieldInfo > getFields ( ) { if ( fieldsByTagNumber ! = null ) { return new ArrayList < FieldInfo > ( fieldsByTagNumber . values ( ) ) ; } return null ; }
void test6 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "ynVnx / " ) ; FieldInfo fieldInfo0 = new FieldInfo ( ) ; dictionaryInfo0 . addField ( fieldInfo0 ) ; List < FieldInfo > list0 = dictionaryInfo0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FieldInfo > getFields ( ) { if ( fieldsByTagNumber ! = null ) { return new ArrayList < FieldInfo > ( fieldsByTagNumber . values ( ) ) ; } return null ; }
void test7 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " / g" ) ; FieldInfo fieldInfo0 = dictionaryInfo0 . getField ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test8 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "ynVnx / " ) ; FieldInfo fieldInfo0 = new FieldInfo ( ) ; dictionaryInfo0 . addField ( fieldInfo0 ) ; FieldInfo fieldInfo1 = dictionaryInfo0 . getField ( 82 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test9 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "YQU / qJ" ) ; FieldInfo fieldInfo0 = dictionaryInfo0 . getField ( "YQU / qJ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test12 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " / g" ) ; List < ComponentInfo > list0 = dictionaryInfo0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ComponentInfo > getComponents ( ) { if ( componentsByName ! = null ) { return new ArrayList < ComponentInfo > ( componentsByName . values ( ) ) ; } return null ; }
void test13 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "YQU / qJ" ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; dictionaryInfo0 . addComponent ( componentInfo0 ) ; List < ComponentInfo > list0 = dictionaryInfo0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ComponentInfo > getComponents ( ) { if ( componentsByName ! = null ) { return new ArrayList < ComponentInfo > ( componentsByName . values ( ) ) ; } return null ; }
void test14 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "ynVnx / " ) ; ComponentInfo componentInfo0 = dictionaryInfo0 . getComponent ( 1279 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentInfo getComponent ( int id ) { if ( componentsById ! = null ) { return componentsById . get ( id ) ; } return null ; }
void test15 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( ( String ) null ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; dictionaryInfo0 . addComponent ( componentInfo0 ) ; ComponentInfo componentInfo1 = dictionaryInfo0 . getComponent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbbreviation ( ) { return abbreviation ; }
void test16 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " / g" ) ; ComponentInfo componentInfo0 = dictionaryInfo0 . getComponent ( " / g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentInfo getComponent ( int id ) { if ( componentsById ! = null ) { return componentsById . get ( id ) ; } return null ; }
void test19 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " / g" ) ; MessageInfo messageInfo0 = dictionaryInfo0 . getMessage ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageInfo getMessage ( int id ) { if ( messagesById ! = null ) { return messagesById . get ( id ) ; } else { return null ; } }
void test20 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " < O & Jgb ( " ) ; MessageInfo messageInfo0 = new MessageInfo ( ) ; dictionaryInfo0 . addMessage ( messageInfo0 ) ; MessageInfo messageInfo1 = dictionaryInfo0 . getMessage ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) { return isRequired ; }
void test21 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " / g" ) ; MessageInfo messageInfo0 = dictionaryInfo0 . getMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageInfo getMessage ( int id ) { if ( messagesById ! = null ) { return messagesById . get ( id ) ; } else { return null ; } }
void test23 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( " / g" ) ; boolean boolean0 = dictionaryInfo0 . isLoaded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoaded ( ) { return loadCount = = 5 ; }
void test24 ( ) throws Throwable { String string0 = "ic^2p\\uK" ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( string0 ) ; dictionaryInfo0 . incrementLoadCount ( ) ; dictionaryInfo0 . incrementLoadCount ( ) ; dictionaryInfo0 . incrementLoadCount ( ) ; dictionaryInfo0 . incrementLoadCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoaded ( ) { return loadCount = = 5 ; }
void test0 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; groupInfo0 . addRequiringComponent ( componentInfo0 ) ; groupInfo0 . addRequiringComponent ( componentInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return length ; }
void test1 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; fieldInfo0 . setNotRequiredXml ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotRequiredXml ( ) { return isNotRequiredXml ; }
void test2 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; boolean boolean0 = fieldInfo0 . isNotRequiredXml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotRequiredXml ( ) { return isNotRequiredXml ; }
void test4 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; boolean boolean0 = fieldInfo0 . isRequiredInComponent ( ( ComponentInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequiredInComponent ( ComponentInfo component ) { if ( requiringComponents ! = null ) { return requiringComponents . contains ( component ) ; } else { return false ; } }
void test5 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; fieldInfo0 . addRequiringComponent ( componentInfo0 ) ; boolean boolean0 = fieldInfo0 . isRequiredInComponent ( componentInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequiredInComponent ( ComponentInfo component ) { if ( requiringComponents ! = null ) { return requiringComponents . contains ( component ) ; } else { return false ; } }
void test6 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; List < ValueInfo > list0 = fieldInfo0 . getValidValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ValueInfo > getValidValues ( ) { if ( validValues ! = null ) { return new ArrayList < ValueInfo > ( validValues . values ( ) ) ; } else { return null ; } }
void test7 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; ValueInfo valueInfo0 = new ValueInfo ( ) ; fieldInfo0 . addValidValue ( valueInfo0 ) ; List < ValueInfo > list0 = fieldInfo0 . getValidValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ValueInfo > getValidValues ( ) { if ( validValues ! = null ) { return new ArrayList < ValueInfo > ( validValues . values ( ) ) ; } else { return null ; } }
void test8 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; TreeMap < String , ValueInfo > treeMap0 = new TreeMap < String , ValueInfo > ( ) ; fieldInfo0 . setValidValues ( treeMap0 ) ; ValueInfo valueInfo0 = new ValueInfo ( ) ; fieldInfo0 . addValidValue ( valueInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroup ( ) { return group ; }
void test0 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getCategory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCategory ( ) { return category ; }
void test2 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; componentInfo0 . setId ( ( - 9 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test3 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; boolean boolean0 = messageInfo0 . isNotRequiredXml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotRequiredXml ( ) { return isNotRequiredXml ; }
void test4 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setRequired ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) { return isRequired ; }
void test5 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getComponentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentType ( ) { return componentType ; }
void test6 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; componentInfo0 . setAbbreviation ( "l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCategory ( ) { return category ; }
void test7 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setNotRequiredXml ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotRequiredXml ( ) { return isNotRequiredXml ; }
void test9 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; boolean boolean0 = componentInfo0 . isRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) { return isRequired ; }
void test10 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getAbbreviation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbbreviation ( ) { return abbreviation ; }
void test11 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setName ( "tO ; P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbbreviation ( ) { return abbreviation ; }
void test12 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setComponentType ( "tO ; P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSection ( ) { return section ; }
void test13 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setCategory ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVolume ( ) { return volume ; }
void test14 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; List < FieldInfo > list0 = messageInfo0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FieldInfo > getFields ( ) { if ( fieldsByTagNumber ! = null ) { return new ArrayList < FieldInfo > ( fieldsByTagNumber . values ( ) ) ; } return null ; }
void test15 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; FieldInfo fieldInfo0 = new FieldInfo ( ) ; componentInfo0 . addField ( fieldInfo0 , ( double ) ( - 9 ) ) ; List < FieldInfo > list0 = componentInfo0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FieldInfo > getFields ( ) { if ( fieldsByTagNumber ! = null ) { return new ArrayList < FieldInfo > ( fieldsByTagNumber . values ( ) ) ; } return null ; }
void test16 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; FieldInfo fieldInfo0 = componentInfo0 . getField ( ( - 9 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test17 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; messageInfo0 . addField ( ( FieldInfo ) groupInfo0 , 195 . 48622776545608 ) ; FieldInfo fieldInfo1 = messageInfo0 . getField ( ( - 18 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test18 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; FieldInfo fieldInfo0 = messageInfo0 . getField ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test21 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; List < ComponentInfo > list0 = messageInfo0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ComponentInfo > getComponents ( ) { if ( componentsByName ! = null ) { return new ArrayList < ComponentInfo > ( componentsByName . values ( ) ) ; } return null ; }
void test22 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . addComponent ( ( ComponentInfo ) messageInfo0 , 14 . 757129996541677 ) ; List < ComponentInfo > list0 = messageInfo0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test23 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; ComponentInfo componentInfo0 = messageInfo0 . getComponent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentInfo getComponent ( int id ) { if ( componentsById ! = null ) { return componentsById . get ( id ) ; } return null ; }
void test24 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . addComponent ( ( ComponentInfo ) messageInfo0 , 14 . 757129996541677 ) ; messageInfo0 . getComponent ( ( - 1698 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test25 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; ComponentInfo componentInfo1 = componentInfo0 . getComponent ( "l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentInfo getComponent ( int id ) { if ( componentsById ! = null ) { return componentsById . get ( id ) ; } return null ; }
void test27 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; List < FixInfo > list0 = messageInfo0 . getItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FixInfo > getItems ( ) { if ( itemsByPosition ! = null ) { return new ArrayList < FixInfo > ( itemsByPosition . values ( ) ) ; } return null ; }
void test28 ( ) throws Throwable { ComponentInfo componentInfo0 = new ComponentInfo ( ) ; FieldInfo fieldInfo0 = new FieldInfo ( ) ; componentInfo0 . addField ( fieldInfo0 , ( double ) ( - 9 ) ) ; List < FixInfo > list0 = componentInfo0 . getItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FixInfo > getItems ( ) { if ( itemsByPosition ! = null ) { return new ArrayList < FixInfo > ( itemsByPosition . values ( ) ) ; } return null ; }
void test29 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . addComponent ( ( ComponentInfo ) messageInfo0 , 195 . 48622776545608 ) ; FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; messageInfo0 . addField ( ( FieldInfo ) groupInfo0 , 195 . 48622776545608 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; List < FieldInfo > list0 = groupInfo0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FieldInfo > getFields ( ) { if ( fieldsByTagNumber ! = null ) { return new ArrayList < FieldInfo > ( fieldsByTagNumber . values ( ) ) ; } return null ; }
void test2 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; groupInfo0 . addField ( fieldInfo0 , ( double ) ( - 1746 ) ) ; List < FieldInfo > list0 = groupInfo0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FieldInfo > getFields ( ) { if ( fieldsByTagNumber ! = null ) { return new ArrayList < FieldInfo > ( fieldsByTagNumber . values ( ) ) ; } return null ; }
void test3 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; FieldInfo fieldInfo1 = groupInfo0 . getField ( ( - 306 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test4 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; groupInfo0 . addField ( fieldInfo0 , ( double ) 0 ) ; FieldInfo fieldInfo1 = groupInfo0 . getField ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test5 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; FieldInfo fieldInfo1 = groupInfo0 . getField ( "V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FieldInfo getField ( int tagNumber ) { if ( fieldsByTagNumber ! = null ) { return fieldsByTagNumber . get ( tagNumber ) ; } return null ; }
void test8 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; List < ComponentInfo > list0 = groupInfo0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ComponentInfo > getComponents ( ) { if ( componentsByName ! = null ) { return new ArrayList < ComponentInfo > ( componentsByName . values ( ) ) ; } return null ; }
void test9 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; groupInfo0 . addComponent ( componentInfo0 , ( - 229 . 57956926709514 ) ) ; List < ComponentInfo > list0 = groupInfo0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ComponentInfo > getComponents ( ) { if ( componentsByName ! = null ) { return new ArrayList < ComponentInfo > ( componentsByName . values ( ) ) ; } return null ; }
void test10 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = groupInfo0 . getComponent ( ( - 306 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentInfo getComponent ( int id ) { if ( componentsById ! = null ) { return componentsById . get ( id ) ; } return null ; }
void test11 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; groupInfo0 . addComponent ( componentInfo0 , ( - 229 . 57956926709514 ) ) ; ComponentInfo componentInfo1 = groupInfo0 . getComponent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCategory ( ) { return category ; }
void test12 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = groupInfo0 . getComponent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentInfo getComponent ( int id ) { if ( componentsById ! = null ) { return componentsById . get ( id ) ; } return null ; }
void test14 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; List < FixInfo > list0 = groupInfo0 . getItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FixInfo > getItems ( ) { if ( itemsByPosition ! = null ) { return new ArrayList < FixInfo > ( itemsByPosition . values ( ) ) ; } return null ; }
void test15 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; groupInfo0 . addComponent ( componentInfo0 , ( - 229 . 57956926709514 ) ) ; List < FixInfo > list0 = groupInfo0 . getItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FixInfo > getItems ( ) { if ( itemsByPosition ! = null ) { return new ArrayList < FixInfo > ( itemsByPosition . values ( ) ) ; } return null ; }
void test16 ( ) throws Throwable { FieldInfo fieldInfo0 = new FieldInfo ( ) ; GroupInfo groupInfo0 = new GroupInfo ( fieldInfo0 ) ; ComponentInfo componentInfo0 = new ComponentInfo ( ) ; groupInfo0 . addComponent ( componentInfo0 , ( - 229 . 57956926709514 ) ) ; groupInfo0 . addField ( fieldInfo0 , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUnionDataType ( ) { return unionDataType ; }
void test0 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; valueInfo0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeprecatingVersion ( ) { return deprecatingVersion ; }
void test1 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; valueInfo0 . setDescription ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test2 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; String string0 = valueInfo0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test3 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; valueInfo0 . setGroup ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeprecatingVersion ( ) { return deprecatingVersion ; }
void test4 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; String string0 = valueInfo0 . getGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroup ( ) { return group ; }
void test5 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; valueInfo0 . setDeprecatingVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test6 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; String string0 = valueInfo0 . getDeprecatingVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeprecatingVersion ( ) { return deprecatingVersion ; }
void test7 ( ) throws Throwable { ValueInfo valueInfo0 = new ValueInfo ( ) ; String string0 = valueInfo0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test0 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setVolume ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) { return isRequired ; }
void test1 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getSection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSection ( ) { return section ; }
void test2 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getMessageType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageType ( ) { return messageType ; }
void test3 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setSection ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbbreviation ( ) { return abbreviation ; }
void test4 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setMessageType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCategory ( ) { return category ; }
void test5 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; messageInfo0 . setOverrideAbbreviation ( " . xGrlbaQ%9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test6 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getOverrideAbbreviation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOverrideAbbreviation ( ) { return overrideAbbreviation ; }
void test7 ( ) throws Throwable { MessageInfo messageInfo0 = new MessageInfo ( ) ; String string0 = messageInfo0 . getVolume ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVolume ( ) { return volume ; }
void test0 ( ) throws Throwable { Library library0 = new Library ( ) ; TreeView treeView0 = new TreeView ( library0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyReleased ( KeyEvent event ) { }
void test1 ( ) throws Throwable { Library library0 = new Library ( ) ; TreeView treeView0 = new TreeView ( library0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyTyped ( KeyEvent event ) { }
void test2 ( ) throws Throwable { Library library0 = new Library ( ) ; TreeView treeView0 = new TreeView ( library0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent event ) { if ( event . getSource ( ) . equals ( exitMenuItem ) ) { exitFrame ( ) ; } else if ( event . getSource ( ) . equals ( aboutMenuItem ) ) { aboutDialog . setLocationRelativeTo ( null ) ; aboutDialog . setVisible ( true ) ; } }
void test3 ( ) throws Throwable { Library library0 = new Library ( ) ; TreeView treeView0 = new TreeView ( library0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent event ) { if ( event . getKeyCode ( ) = = KeyEvent . VK_ENTER ) { searchButton . doClick ( ) ; } }
void test0 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( "S" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( String value ) { this . value = value ; }
void test1 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( "S" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( String value ) { this . value = value ; }
void test2 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( "S" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( String value ) { this . value = value ; }
void test0 ( ) throws Throwable { MsgContentsParser msgContentsParser0 = new MsgContentsParser ( ) ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "CQRFIGUTONWHKzST_RESET" ) ; Element element0 = new Element ( "CQRFIGUTONWHKzST_RESET" ) ; msgContentsParser0 . load ( dictionaryInfo0 , element0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void load ( DictionaryInfo dictionary , Element root ) { List nodes = root . getChildren ( ) ; TreeSet < MsgContentModel > msgContentSet = new TreeSet < MsgContentModel > ( ) ; Element element ; int currentIndent = 0 ; int tagNumber ; FieldInfo previousField = null ; int previousId = 0 ; Iterator i = nodes . iterator ( ) ; MsgContentModel msgContentModel ; / / Collect and extract the values while ( i . hasNext ( ) ) { element = ( Element ) i . next ( ) ; msgContentModel = new MsgContentModel ( ) ; msgContentModel . setIndent ( Integer . parseInt ( element . getChildText ( INDENT_ELEMENT ) ) ) ; msgContentModel . setTagText ( element . getChildText ( TAG_TEXT_ELEMENT ) ) ; msgContentModel . setDescription ( element . getChildText ( DESCRIPTION_ELEMENT ) ) ; if ( element . getChildText ( REQD_ELEMENT ) . equals ( "1" ) ) { msgContentModel . setRequired ( true ) ; } else { msgContentModel . setRequired ( false ) ; } msgContentModel . setId ( Integer . parseInt ( element . getChildText ( MSG_ID_ELEMENT ) ) ) ; msgContentModel . setPosition ( Double . parseDouble ( element . getChildText ( POSITION_ELEMENT ) ) ) ; / / Store the model in a sorted set msgContentSet . add ( msgContentModel ) ; } for ( MsgContentModel model : msgContentSet ) { / / Process values try { / / Item is a tag tagNumber = Integer . parseInt ( model . getTagText ( ) ) ; dictionary . getField ( tagNumber ) . setComments ( model . getDescription ( ) ) ; if ( model . isRequired ( ) ) { if ( model . getId ( ) > = 1000 ) { dictionary . getField ( tagNumber ) . addRequiringComponent ( dictionary . getComponent ( model . getId ( ) ) ) ; } else { dictionary . getField ( tagNumber ) . addRequiringComponent ( dictionary . getMessage ( model . getId ( ) ) ) ; } } if ( model . getIndent ( ) > currentIndent ) { currentIndent = model . getIndent ( ) ; GroupInfo group = new GroupInfo ( previousField ) ; group . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; dictionary . replaceAsGroup ( previousField , group ) ; if ( indentStack . isEmpty ( ) ) { if ( previousId > = 1000 ) { if ( dictionary . getComponent ( previousId ) ! = null ) { dictionary . getComponent ( previousId ) . replaceAsGroup ( previousField , group ) ; } } else { dictionary . getMessage ( previousId ) . replaceAsGroup ( previousField , group ) ; } } else { indentStack . getLast ( ) . replaceAsGroup ( previousField , group ) ; } indentStack . addLast ( group ) ; } else { if ( model . getIndent ( ) < currentIndent ) { currentIndent = model . getIndent ( ) ; if ( model . getIndent ( ) ! = 0 ) { indentStack . removeLast ( ) ; } else { indentStack . clear ( ) ; } } if ( indentStack . isEmpty ( ) ) { if ( model . getId ( ) > = 1000 ) { if ( dictionary . getComponent ( model . getId ( ) ) ! = null ) { dictionary . getComponent ( model . getId ( ) ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } else { dictionary . getMessage ( model . getId ( ) ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } else { indentStack . getLast ( ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } previousField = dictionary . getField ( tagNumber ) ; previousId = model . getId ( ) ; } catch ( NumberFormatException ex ) { / / Item is a component if ( model . isRequired ( ) ) { dictionary . getComponent ( model . getTagText ( ) ) . setRequired ( true ) ; } if ( model . getIndent ( ) < currentIndent ) { currentIndent = model . getIndent ( ) ; if ( model . getIndent ( ) ! = 0 ) { indentStack . removeLast ( ) ; } else { indentStack . clear ( ) ; } } if ( indentStack . isEmpty ( ) ) { if ( model . getId ( ) > = 1000 ) { if ( dictionary . getComponent ( model . getId ( ) ) ! = null ) { dictionary . getComponent ( model . getId ( ) ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } else { if ( dictionary . getMessage ( model . getId ( ) ) ! = null ) { dictionary . getMessage ( model . getId ( ) ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } } else { indentStack . getLast ( ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } } indentStack . clear ( ) ; dictionary . incrementLoadCount ( ) ; }
void test0 ( ) throws Throwable { MsgTypeParser msgTypeParser0 = new MsgTypeParser ( ) ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "_eBzDzlig" ) ; Element element0 = new Element ( "_eBzDzlig" ) ; msgTypeParser0 . load ( dictionaryInfo0 , element0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { ComponentsParser componentsParser0 = new ComponentsParser ( ) ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "Z" ) ; Element element0 = new Element ( "Z" ) ; componentsParser0 . load ( dictionaryInfo0 , element0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void load ( DictionaryInfo dictionary , Element root ) { List nodes = root . getChildren ( ) ; TreeSet < MsgContentModel > msgContentSet = new TreeSet < MsgContentModel > ( ) ; Element element ; int currentIndent = 0 ; int tagNumber ; FieldInfo previousField = null ; int previousId = 0 ; Iterator i = nodes . iterator ( ) ; MsgContentModel msgContentModel ; / / Collect and extract the values while ( i . hasNext ( ) ) { element = ( Element ) i . next ( ) ; msgContentModel = new MsgContentModel ( ) ; msgContentModel . setIndent ( Integer . parseInt ( element . getChildText ( INDENT_ELEMENT ) ) ) ; msgContentModel . setTagText ( element . getChildText ( TAG_TEXT_ELEMENT ) ) ; msgContentModel . setDescription ( element . getChildText ( DESCRIPTION_ELEMENT ) ) ; if ( element . getChildText ( REQD_ELEMENT ) . equals ( "1" ) ) { msgContentModel . setRequired ( true ) ; } else { msgContentModel . setRequired ( false ) ; } msgContentModel . setId ( Integer . parseInt ( element . getChildText ( MSG_ID_ELEMENT ) ) ) ; msgContentModel . setPosition ( Double . parseDouble ( element . getChildText ( POSITION_ELEMENT ) ) ) ; / / Store the model in a sorted set msgContentSet . add ( msgContentModel ) ; } for ( MsgContentModel model : msgContentSet ) { / / Process values try { / / Item is a tag tagNumber = Integer . parseInt ( model . getTagText ( ) ) ; dictionary . getField ( tagNumber ) . setComments ( model . getDescription ( ) ) ; if ( model . isRequired ( ) ) { if ( model . getId ( ) > = 1000 ) { dictionary . getField ( tagNumber ) . addRequiringComponent ( dictionary . getComponent ( model . getId ( ) ) ) ; } else { dictionary . getField ( tagNumber ) . addRequiringComponent ( dictionary . getMessage ( model . getId ( ) ) ) ; } } if ( model . getIndent ( ) > currentIndent ) { currentIndent = model . getIndent ( ) ; GroupInfo group = new GroupInfo ( previousField ) ; group . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; dictionary . replaceAsGroup ( previousField , group ) ; if ( indentStack . isEmpty ( ) ) { if ( previousId > = 1000 ) { if ( dictionary . getComponent ( previousId ) ! = null ) { dictionary . getComponent ( previousId ) . replaceAsGroup ( previousField , group ) ; } } else { dictionary . getMessage ( previousId ) . replaceAsGroup ( previousField , group ) ; } } else { indentStack . getLast ( ) . replaceAsGroup ( previousField , group ) ; } indentStack . addLast ( group ) ; } else { if ( model . getIndent ( ) < currentIndent ) { currentIndent = model . getIndent ( ) ; if ( model . getIndent ( ) ! = 0 ) { indentStack . removeLast ( ) ; } else { indentStack . clear ( ) ; } } if ( indentStack . isEmpty ( ) ) { if ( model . getId ( ) > = 1000 ) { if ( dictionary . getComponent ( model . getId ( ) ) ! = null ) { dictionary . getComponent ( model . getId ( ) ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } else { dictionary . getMessage ( model . getId ( ) ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } else { indentStack . getLast ( ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } previousField = dictionary . getField ( tagNumber ) ; previousId = model . getId ( ) ; } catch ( NumberFormatException ex ) { / / Item is a component if ( model . isRequired ( ) ) { dictionary . getComponent ( model . getTagText ( ) ) . setRequired ( true ) ; } if ( model . getIndent ( ) < currentIndent ) { currentIndent = model . getIndent ( ) ; if ( model . getIndent ( ) ! = 0 ) { indentStack . removeLast ( ) ; } else { indentStack . clear ( ) ; } } if ( indentStack . isEmpty ( ) ) { if ( model . getId ( ) > = 1000 ) { if ( dictionary . getComponent ( model . getId ( ) ) ! = null ) { dictionary . getComponent ( model . getId ( ) ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } else { if ( dictionary . getMessage ( model . getId ( ) ) ! = null ) { dictionary . getMessage ( model . getId ( ) ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } } else { indentStack . getLast ( ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } } indentStack . clear ( ) ; dictionary . incrementLoadCount ( ) ; }
void test0 ( ) throws Throwable { EnumsParser enumsParser0 = new EnumsParser ( ) ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "c4" ) ; Element element0 = new Element ( "c4" , "c4" , "c4" ) ; enumsParser0 . load ( dictionaryInfo0 , element0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void load ( DictionaryInfo dictionary , Element root ) { List nodes = root . getChildren ( ) ; TreeSet < MsgContentModel > msgContentSet = new TreeSet < MsgContentModel > ( ) ; Element element ; int currentIndent = 0 ; int tagNumber ; FieldInfo previousField = null ; int previousId = 0 ; Iterator i = nodes . iterator ( ) ; MsgContentModel msgContentModel ; / / Collect and extract the values while ( i . hasNext ( ) ) { element = ( Element ) i . next ( ) ; msgContentModel = new MsgContentModel ( ) ; msgContentModel . setIndent ( Integer . parseInt ( element . getChildText ( INDENT_ELEMENT ) ) ) ; msgContentModel . setTagText ( element . getChildText ( TAG_TEXT_ELEMENT ) ) ; msgContentModel . setDescription ( element . getChildText ( DESCRIPTION_ELEMENT ) ) ; if ( element . getChildText ( REQD_ELEMENT ) . equals ( "1" ) ) { msgContentModel . setRequired ( true ) ; } else { msgContentModel . setRequired ( false ) ; } msgContentModel . setId ( Integer . parseInt ( element . getChildText ( MSG_ID_ELEMENT ) ) ) ; msgContentModel . setPosition ( Double . parseDouble ( element . getChildText ( POSITION_ELEMENT ) ) ) ; / / Store the model in a sorted set msgContentSet . add ( msgContentModel ) ; } for ( MsgContentModel model : msgContentSet ) { / / Process values try { / / Item is a tag tagNumber = Integer . parseInt ( model . getTagText ( ) ) ; dictionary . getField ( tagNumber ) . setComments ( model . getDescription ( ) ) ; if ( model . isRequired ( ) ) { if ( model . getId ( ) > = 1000 ) { dictionary . getField ( tagNumber ) . addRequiringComponent ( dictionary . getComponent ( model . getId ( ) ) ) ; } else { dictionary . getField ( tagNumber ) . addRequiringComponent ( dictionary . getMessage ( model . getId ( ) ) ) ; } } if ( model . getIndent ( ) > currentIndent ) { currentIndent = model . getIndent ( ) ; GroupInfo group = new GroupInfo ( previousField ) ; group . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; dictionary . replaceAsGroup ( previousField , group ) ; if ( indentStack . isEmpty ( ) ) { if ( previousId > = 1000 ) { if ( dictionary . getComponent ( previousId ) ! = null ) { dictionary . getComponent ( previousId ) . replaceAsGroup ( previousField , group ) ; } } else { dictionary . getMessage ( previousId ) . replaceAsGroup ( previousField , group ) ; } } else { indentStack . getLast ( ) . replaceAsGroup ( previousField , group ) ; } indentStack . addLast ( group ) ; } else { if ( model . getIndent ( ) < currentIndent ) { currentIndent = model . getIndent ( ) ; if ( model . getIndent ( ) ! = 0 ) { indentStack . removeLast ( ) ; } else { indentStack . clear ( ) ; } } if ( indentStack . isEmpty ( ) ) { if ( model . getId ( ) > = 1000 ) { if ( dictionary . getComponent ( model . getId ( ) ) ! = null ) { dictionary . getComponent ( model . getId ( ) ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } else { dictionary . getMessage ( model . getId ( ) ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } else { indentStack . getLast ( ) . addField ( dictionary . getField ( tagNumber ) , model . getPosition ( ) ) ; } } previousField = dictionary . getField ( tagNumber ) ; previousId = model . getId ( ) ; } catch ( NumberFormatException ex ) { / / Item is a component if ( model . isRequired ( ) ) { dictionary . getComponent ( model . getTagText ( ) ) . setRequired ( true ) ; } if ( model . getIndent ( ) < currentIndent ) { currentIndent = model . getIndent ( ) ; if ( model . getIndent ( ) ! = 0 ) { indentStack . removeLast ( ) ; } else { indentStack . clear ( ) ; } } if ( indentStack . isEmpty ( ) ) { if ( model . getId ( ) > = 1000 ) { if ( dictionary . getComponent ( model . getId ( ) ) ! = null ) { dictionary . getComponent ( model . getId ( ) ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } else { if ( dictionary . getMessage ( model . getId ( ) ) ! = null ) { dictionary . getMessage ( model . getId ( ) ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } } else { indentStack . getLast ( ) . addComponent ( dictionary . getComponent ( model . getTagText ( ) ) , model . getPosition ( ) ) ; } } } indentStack . clear ( ) ; dictionary . incrementLoadCount ( ) ; }
void test0 ( ) throws Throwable { MainParser mainParser0 = new MainParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainParser ( ) { parsers = new HashMap < String , Parser > ( ) ; parsers . put ( COMPONENTS_FILE_NAME , new ComponentsParser ( ) ) ; parsers . put ( ENUMS_FILE_NAME , new EnumsParser ( ) ) ; parsers . put ( FIELDS_FILE_NAME , new FieldsParser ( ) ) ; parsers . put ( MSG_CONTENTS_FILE_NAME , new MsgContentsParser ( ) ) ; parsers . put ( MSG_TYPE_FILE_NAME , new MsgTypeParser ( ) ) ; }
void test1 ( ) throws Throwable { DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "34" ) ; File file0 = new File ( "34" ) ; boolean boolean0 = MainParser . parse ( dictionaryInfo0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean parse ( DictionaryInfo dictionary , File xmlFile ) ; }
void test0 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; String string0 = msgContentModel0 . getTagText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagText ( ) { return tagText ; }
void test1 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; int int0 = msgContentModel0 . compareTo ( msgContentModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPosition ( ) { return position ; }
void test2 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; msgContentModel0 . setDescription ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndent ( ) { return indent ; }
void test3 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; msgContentModel0 . setTagText ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test4 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; int int0 = msgContentModel0 . getIndent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndent ( ) { return indent ; }
void test5 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; msgContentModel0 . setRequired ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) { return isRequired ; }
void test6 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; boolean boolean0 = msgContentModel0 . isRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRequired ( ) { return isRequired ; }
void test7 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; msgContentModel0 . setIndent ( 376 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndent ( ) { return indent ; }
void test8 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; String string0 = msgContentModel0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test9 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; msgContentModel0 . setId ( ( - 1097 ) ) ; MsgContentModel msgContentModel1 = new MsgContentModel ( ) ; int int0 = msgContentModel0 . compareTo ( msgContentModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test10 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; MsgContentModel msgContentModel1 = new MsgContentModel ( ) ; msgContentModel0 . setId ( 840 ) ; int int0 = msgContentModel0 . compareTo ( msgContentModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test11 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; MsgContentModel msgContentModel1 = new MsgContentModel ( ) ; msgContentModel0 . setPosition ( ( - 4 . 199950506498959 ) ) ; int int0 = msgContentModel0 . compareTo ( msgContentModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPosition ( ) { return position ; }
void test12 ( ) throws Throwable { MsgContentModel msgContentModel0 = new MsgContentModel ( ) ; MsgContentModel msgContentModel1 = new MsgContentModel ( ) ; msgContentModel1 . setPosition ( 1379 . 60694277627 ) ; int int0 = msgContentModel1 . compareTo ( msgContentModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPosition ( ) { return position ; }
void test0 ( ) throws Throwable { MsgTypeParser msgTypeParser0 = new MsgTypeParser ( ) ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "datePattern" ) ; File file0 = new File ( "datePattern" , "datePattern" ) ; boolean boolean0 = msgTypeParser0 . parse ( dictionaryInfo0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean parse ( DictionaryInfo dictionary , File xmlFile ) ; }
void test0 ( ) throws Throwable { FieldsParser fieldsParser0 = new FieldsParser ( ) ; DictionaryInfo dictionaryInfo0 = new DictionaryInfo ( "j1" ) ; Element element0 = new Element ( "j1" ) ; fieldsParser0 . load ( dictionaryInfo0 , element0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoaded ( ) { return loadCount = = 5 ; }
