void test0 ( ) throws Throwable { Converter converter0 = new Converter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { KMLObject kMLObject0 = new KMLObject ( "2" ) ; boolean boolean0 = kMLObject0 . addPlacemark ( "2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addPlacemark ( String place ) { boolean retval = false ; try { this . fwr . write ( '\n' ) ; this . fwr . write ( place ) ; retval = true ; } catch ( Exception ex ) { System . err . print ( "Unable to write placemark" ) ; } return retval ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { KMLObject kMLObject0 = new KMLObject ( "Unable to write placemark" ) ; boolean boolean0 = kMLObject0 . StartWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean StartWrite ( ) { boolean retval = false ; try { this . fwr = new FileWriter ( this . KML ) ; this . fwr . write ( " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > < kml xmlns = \"http : / / earth . google . com / kml / 2 . 0\" > < Document > \n" ) ; retval = true ; } catch ( Exception ex ) { System . err . print ( "Unable to create KML file" ) ; } return retval ; }
void test2 ( ) throws Throwable { KMLObject kMLObject0 = new KMLObject ( "Unable to write placemark" ) ; boolean boolean0 = kMLObject0 . FinishWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean FinishWrite ( ) { boolean retval = false ; try { this . fwr . write ( "\n < / Document > < / kml > " ) ; this . fwr . close ( ) ; retval = true ; } catch ( Exception ex ) { System . err . print ( "Unable to write the KML footer . " ) ; } return retval ; }
void test0 ( ) throws Throwable { Coordinate [ ] coordinateArray0 = new Coordinate [ 2 ] ; DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = new DefaultCoordinateSequenceFactory ( ) ; Coordinate coordinate0 = new Coordinate ( ) ; coordinateArray0 [ 0 ] = coordinate0 ; coordinateArray0 [ 1 ] = coordinateArray0 [ 0 ] ; GeometryFactory geometryFactory0 = new GeometryFactory ( ( CoordinateSequenceFactory ) defaultCoordinateSequenceFactory0 ) ; MultiPoint multiPoint0 = geometryFactory0 . createMultiPoint ( coordinateArray0 ) ; String string0 = GeomConverter . getPlacemarkKML ( ( Geometry ) multiPoint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlacemarkKML ( Geometry geom , String name , String description , double altitude ) { Coordinate [ ] coords = geom . getCoordinates ( ) ; String str = " < Placemark > < description > < ! [ CDATA [ " + description + " ] ] > < / description > < name > " + name + " < / name > " ; switch ( geom . getDimension ( ) ) { case 0 : / / handle a point geometry str + = GeomConverter . convertPointWithAltitude ( coords , altitude ) ; break ; case 1 : / / handle a line geometry str + = GeomConverter . convertLineWithAltitude ( coords , altitude ) ; break ; case 2 : / / handle a polygon geometry str + = GeomConverter . convertPolygonWithAltitude ( coords , altitude ) ; break ; } str + = " < / Placemark > " ; return str ; }
void test1 ( ) throws Throwable { GeometryFactory geometryFactory0 = new GeometryFactory ( ) ; DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = DefaultCoordinateSequenceFactory . instance ( ) ; CoordinateSequence coordinateSequence0 = defaultCoordinateSequenceFactory0 . create ( 28 , 28 ) ; LinearRing linearRing0 = geometryFactory0 . createLinearRing ( coordinateSequence0 ) ; String string0 = GeomConverter . getPlacemarkKML ( ( Geometry ) linearRing0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlacemarkKML ( Geometry geom , String name , String description , double altitude ) { Coordinate [ ] coords = geom . getCoordinates ( ) ; String str = " < Placemark > < description > < ! [ CDATA [ " + description + " ] ] > < / description > < name > " + name + " < / name > " ; switch ( geom . getDimension ( ) ) { case 0 : / / handle a point geometry str + = GeomConverter . convertPointWithAltitude ( coords , altitude ) ; break ; case 1 : / / handle a line geometry str + = GeomConverter . convertLineWithAltitude ( coords , altitude ) ; break ; case 2 : / / handle a polygon geometry str + = GeomConverter . convertPolygonWithAltitude ( coords , altitude ) ; break ; } str + = " < / Placemark > " ; return str ; }
void test5 ( ) throws Throwable { GeomConverter geomConverter0 = new GeomConverter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { Coordinate [ ] coordinateArray0 = new Coordinate [ 6 ] ; Coordinate coordinate0 = new Coordinate ( ) ; coordinateArray0 [ 0 ] = coordinate0 ; coordinateArray0 [ 1 ] = coordinate0 ; Coordinate coordinate1 = new Coordinate ( 0 . 0 , 1500 . 4492359918947 ) ; coordinateArray0 [ 2 ] = coordinate1 ; coordinateArray0 [ 4 ] = coordinate0 ; Coordinate coordinate2 = new Coordinate ( ( - 27 . 258976637842338 ) , ( - 27 . 258976637842338 ) , ( - 27 . 258976637842338 ) ) ; coordinateArray0 [ 3 ] = coordinate2 ; String string0 = GeomConverter . convertPolygonWithAltitude ( coordinateArray0 , ( - 27 . 258976637842338 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertPolygonWithAltitude ( Coordinate [ ] coords , double altitude ) { String str = " < Polygon > < extrude > " + altitude + " < / extrude > < altitudeMode > relativeToGround < / altitudeMode > " ; ArrayList coordsTemp = new ArrayList ( ) ; int indexOfFirst = 0 ; int currentIndex = 0 ; while ( currentIndex < coords . length ) { coordsTemp . add ( coords [ currentIndex ] ) ; if ( indexOfFirst ! = currentIndex & & Math . abs ( indexOfFirst - currentIndex ) > 2 & & coords [ currentIndex ] . equals ( coords [ indexOfFirst ] ) ) { str + = GeomConverter . getLinearRingKML ( ( Coordinate [ ] ) coordsTemp . toArray ( new Coordinate [ 0 ] ) ) ; coordsTemp . clear ( ) ; indexOfFirst = currentIndex + 1 ; } currentIndex + + ; } str + = " < / Polygon > " ; return str ; }
void test7 ( ) throws Throwable { GeometryFactory geometryFactory0 = new GeometryFactory ( ) ; DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = DefaultCoordinateSequenceFactory . instance ( ) ; CoordinateSequence coordinateSequence0 = defaultCoordinateSequenceFactory0 . create ( 28 , 28 ) ; LinearRing linearRing0 = geometryFactory0 . createLinearRing ( coordinateSequence0 ) ; PrecisionModel precisionModel0 = linearRing0 . getPrecisionModel ( ) ; Polygon polygon0 = new Polygon ( linearRing0 , precisionModel0 , 28 ) ; String string0 = GeomConverter . getPlacemarkKML ( ( Geometry ) polygon0 , " < Placemark > < description > < ! [ CDATA [ ] ] > < / description > < name > < / name > < LineString > < extrude > 0 . 0 < / extrude > < altitudeMode > relativeToGround < / altitudeMode > < coordinates > 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 < / coordinates > < / LineString > < / Placemark > " , " < Placemark > < description > < ! [ CDATA [ ] ] > < / description > < name > < / name > < LineString > < extrude > 0 . 0 < / extrude > < altitudeMode > relativeToGround < / altitudeMode > < coordinates > 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 0 . 0 , 0 . 0 , 0 < / coordinates > < / LineString > < / Placemark > " , ( double ) 28 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlacemarkKML ( Geometry geom , String name , String description , double altitude ) { Coordinate [ ] coords = geom . getCoordinates ( ) ; String str = " < Placemark > < description > < ! [ CDATA [ " + description + " ] ] > < / description > < name > " + name + " < / name > " ; switch ( geom . getDimension ( ) ) { case 0 : / / handle a point geometry str + = GeomConverter . convertPointWithAltitude ( coords , altitude ) ; break ; case 1 : / / handle a line geometry str + = GeomConverter . convertLineWithAltitude ( coords , altitude ) ; break ; case 2 : / / handle a polygon geometry str + = GeomConverter . convertPolygonWithAltitude ( coords , altitude ) ; break ; } str + = " < / Placemark > " ; return str ; }
void test8 ( ) throws Throwable { PrecisionModel precisionModel0 = new PrecisionModel ( ( - 896 . 8833034491468 ) , ( - 896 . 8833034491468 ) , ( - 896 . 8833034491468 ) ) ; Polygon polygon0 = new Polygon ( ( LinearRing ) null , precisionModel0 , ( - 313 ) ) ; GeometryCollection geometryCollection0 = ( GeometryCollection ) polygon0 . buffer ( ( - 896 . 8833034491468 ) , ( - 313 ) ) ; String string0 = GeomConverter . getPlacemarkKML ( ( Geometry ) geometryCollection0 , "Tl6" , "Tl6" , ( double ) ( - 313 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlacemarkKML ( Geometry geom , String name , String description , double altitude ) { Coordinate [ ] coords = geom . getCoordinates ( ) ; String str = " < Placemark > < description > < ! [ CDATA [ " + description + " ] ] > < / description > < name > " + name + " < / name > " ; switch ( geom . getDimension ( ) ) { case 0 : / / handle a point geometry str + = GeomConverter . convertPointWithAltitude ( coords , altitude ) ; break ; case 1 : / / handle a line geometry str + = GeomConverter . convertLineWithAltitude ( coords , altitude ) ; break ; case 2 : / / handle a polygon geometry str + = GeomConverter . convertPolygonWithAltitude ( coords , altitude ) ; break ; } str + = " < / Placemark > " ; return str ; }
