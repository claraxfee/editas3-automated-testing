void test0 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test1 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; int int0 = defaultMenuItem0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test2 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . setParent ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test3 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; boolean boolean0 = defaultMenuItem0 . isLeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test4 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test5 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . getContained ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test6 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . getRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test7 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test8 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test9 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . setIndex ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test10 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; GenericMarkupMenuItemRenderer genericMarkupMenuItemRenderer0 = new GenericMarkupMenuItemRenderer ( ) ; defaultMenuItem0 . setRenderer ( ( IMenuItemRenderer ) genericMarkupMenuItemRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test11 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) " { } " ) ; int int0 = defaultMenuItem0 . getDepth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test12 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . setLeaf ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test13 ( ) throws Throwable { DefaultMenuItem defaultMenuItem0 = new DefaultMenuItem ( ( Object ) null ) ; defaultMenuItem0 . setDepth ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) ; void setName ( String s ) ; String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test0 ( ) throws Throwable { Integer integer0 = IDGenerator . next ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer next ( ) { return new Integer ( counter + + ) ; }
void test0 ( ) throws Throwable { Person person0 = new Person ( ) ; String string0 = person0 . getNickname ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNickname ( ) { return this . nickname ; }
void test1 ( ) throws Throwable { Person person0 = new Person ( ) ; String string0 = person0 . getReserve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getReserve ( ) { return this . reserve ; }
void test2 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . setLastname ( "Zw~EiRF | A2AQ#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getFirstname ( ) { return this . firstname ; }
void test3 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . setNickname ( "Zw~EiRF | A2AQ#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNickname ( ) { return this . nickname ; }
void test4 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . setReserve ( "Zw~EiRF | A2AQ#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getReserve ( ) { return this . reserve ; }
void test5 ( ) throws Throwable { Person person0 = new Person ( ) ; person0 . setFirstname ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNickname ( ) { return this . nickname ; }
void test6 ( ) throws Throwable { Person person0 = new Person ( ) ; String string0 = person0 . getLastname ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getLastname ( ) { return this . lastname ; }
void test7 ( ) throws Throwable { Person person0 = new Person ( ) ; String string0 = person0 . getFirstname ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getFirstname ( ) { return this . firstname ; }
void test8 ( ) throws Throwable { Person person0 = new Person ( ) ; AbstractUniqueID abstractUniqueID0 = person0 . getUniqueID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractUniqueID getUniqueID ( ) { return uniqueID ; }
void test0 ( ) throws Throwable { MailMessage mailMessage0 = new MailMessage ( ) ; mailMessage0 . setFolder ( ( Folder ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFolder ( Folder folder ) { this . folder = folder ; }
void test1 ( ) throws Throwable { MailMessage mailMessage0 = new MailMessage ( ) ; int int0 = mailMessage0 . getTechnicalID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTechnicalID ( ) { return technicalID ; }
void test2 ( ) throws Throwable { MailMessage mailMessage0 = new MailMessage ( ) ; Folder folder0 = mailMessage0 . getFolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Folder getFolder ( ) { return folder ; }
void test3 ( ) throws Throwable { MailMessage mailMessage0 = new MailMessage ( ) ; mailMessage0 . setTechnicalID ( ( - 479 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTechnicalID ( ) { return technicalID ; }
void test4 ( ) throws Throwable { MailMessage mailMessage0 = new MailMessage ( ) ; AbstractUniqueID abstractUniqueID0 = mailMessage0 . getUniqueID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractUniqueID getUniqueID ( ) { return uniqueID ; }
void test0 ( ) throws Throwable { AbstractUniqueID abstractUniqueID0 = new AbstractUniqueID ( ) ; abstractUniqueID0 . setId ( ( Integer ) 0 ) ; int int0 = abstractUniqueID0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . hashValue = = 0 ) { int result = 17 ; int idValue = this . getId ( ) = = null ? 0 : this . getId ( ) . hashCode ( ) ; result = result * 37 + idValue ; this . hashValue = result ; } return this . hashValue ; }
void test1 ( ) throws Throwable { AbstractUniqueID abstractUniqueID0 = new AbstractUniqueID ( ) ; abstractUniqueID0 . hashCode ( ) ; int int0 = abstractUniqueID0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . hashValue = = 0 ) { int result = 17 ; int idValue = this . getId ( ) = = null ? 0 : this . getId ( ) . hashCode ( ) ; result = result * 37 + idValue ; this . hashValue = result ; } return this . hashValue ; }
void test0 ( ) throws Throwable { Account account0 = new Account ( ) ; AbstractUniqueID abstractUniqueID0 = account0 . getUniqueID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractUniqueID getUniqueID ( ) { return uniqueID ; }
void test1 ( ) throws Throwable { Account account0 = new Account ( ) ; Person person0 = account0 . getPerson ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Person getPerson ( ) { return person ; }
void test0 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; folder0 . setParent ( folder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return fullName ; }
void test1 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; Folder folder1 = folder0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getParent ( ) ; }
void test2 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; String string0 = folder0 . getFullName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return fullName ; }
void test3 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; folder0 . setName ( " & tCtH2a^\u0005a~6 > ufL > < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return fullName ; }
void test4 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; String string0 = folder0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test6 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; Account account0 = folder0 . getAccount ( ) ; folder0 . setAccount ( account0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return fullName ; }
void test7 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; folder0 . setFullName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test2 ( ) throws Throwable { MailCache mailCache0 = new MailCache ( "" ) ; Cache cache0 = mailCache0 . getCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Cache getCache ( ) { return elementCache ; }
void test0 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; HierarchicalElement hierarchicalElement0 = new HierarchicalElement ( ( Serializable ) linkedList0 , ( Serializable ) linkedList0 , ( List ) linkedList0 ) ; List < Object > list0 = hierarchicalElement0 . getChildKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getChildKeys ( Integer id ) { try { HierarchicalElement element = ( HierarchicalElement ) elementCache . get ( id ) ; return element . getChildKeys ( ) ; } catch ( IllegalStateException e ) { log . error ( "Error while retrieving element with ID " + id + " from cache . Exception was " + e ) ; return null ; } catch ( CacheException e ) { log . error ( "Error while retrieving element with ID " + id + " from cache . Exception was " + e ) ; return null ; } }
void test0 ( ) throws Throwable { Visit visit0 = new Visit ( ) ; String string0 = visit0 . getUserID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserID ( ) { return userID ; }
void test1 ( ) throws Throwable { Visit visit0 = new Visit ( ) ; visit0 . setUserID ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserID ( ) { return userID ; }
void test0 ( ) throws Throwable { SpringEngine springEngine0 = new SpringEngine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { DisplayHelper displayHelper0 = new DisplayHelper ( ) ; String string0 = displayHelper0 . getSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return separator ; }
void test1 ( ) throws Throwable { DisplayHelper displayHelper0 = new DisplayHelper ( ) ; Locale locale0 = displayHelper0 . getMyLocale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return separator ; }
void test2 ( ) throws Throwable { DisplayHelper displayHelper0 = new DisplayHelper ( ) ; displayHelper0 . setSeparator ( "EK ; '1 : a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return separator ; }
void test3 ( ) throws Throwable { DisplayHelper displayHelper0 = new DisplayHelper ( ) ; Date date0 = new Date ( 0L ) ; String string0 = displayHelper0 . returnFormattedDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return separator ; }
void test4 ( ) throws Throwable { DisplayHelper displayHelper0 = new DisplayHelper ( ) ; String [ ] stringArray0 = new String [ 6 ] ; String string0 = displayHelper0 . returnStringList ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String returnStringList ( String [ ] list ) { StringBuffer buffer = new StringBuffer ( ) ; for ( int i = 0 ; i < list . length ; i + + ) { buffer . append ( list [ i ] ) ; if ( i < ( list . length - 1 ) ) { buffer . append ( separator ) ; } } return buffer . toString ( ) ; }
void test0 ( ) throws Throwable { TreeModelHelper treeModelHelper0 = new TreeModelHelper ( ) ; TreeNode treeNode0 = new TreeNode ( ) ; SimpleTreeDataModel simpleTreeDataModel0 = new SimpleTreeDataModel ( ( ITreeNode ) treeNode0 ) ; ArrayList < Object > arrayList0 = treeModelHelper0 . getMenuListDepthFirst ( ( ITreeDataModel ) simpleTreeDataModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getMenuListDepthFirst ( ITreeDataModel menuDataModel ) { Object root = menuDataModel . getRoot ( ) ; ArrayList result = new ArrayList ( ) ; traverseMenu ( root , menuDataModel , result ) ; return result ; }
void test1 ( ) throws Throwable { TreeModelHelper treeModelHelper0 = new TreeModelHelper ( ) ; Folder [ ] folderArray0 = new Folder [ 1 ] ; Folder folder0 = new Folder ( ) ; folderArray0 [ 0 ] = folder0 ; Deck deck0 = new Deck ( ) ; DefaultMenuModel defaultMenuModel0 = ( DefaultMenuModel ) treeModelHelper0 . buildFolderModel ( folderArray0 , ( IComponent ) deck0 , ( IRequestCycle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String displayMenuStructure ( ) { return displayMenuList ( rootList , new StringBuffer ( ) ) ; }
void test0 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; FolderTreeNode folderTreeNode0 = new FolderTreeNode ( folder0 ) ; folderTreeNode0 . remove ( ( IMutableTreeNode ) folderTreeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FolderTreeNode ( Folder strValue ) { super ( ) ; this . strValue = strValue ; }
void test1 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; FolderTreeNode folderTreeNode0 = new FolderTreeNode ( ( Folder ) null , ( IMutableTreeNode ) treeNode0 ) ; folderTreeNode0 . setFolder ( ( Folder ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFolder ( Folder folder ) { this . folder = folder ; }
void test3 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; FolderTreeNode folderTreeNode0 = new FolderTreeNode ( ( Folder ) null , ( IMutableTreeNode ) treeNode0 ) ; String string0 = folderTreeNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return name ; }
void test4 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; FolderTreeNode folderTreeNode0 = new FolderTreeNode ( ( Folder ) null , ( IMutableTreeNode ) treeNode0 ) ; int int0 = folderTreeNode0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . hashValue = = 0 ) { int result = 17 ; int idValue = this . getId ( ) = = null ? 0 : this . getId ( ) . hashCode ( ) ; result = result * 37 + idValue ; this . hashValue = result ; } return this . hashValue ; }
void test5 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; FolderTreeNode folderTreeNode0 = new FolderTreeNode ( folder0 ) ; Integer integer0 = new Integer ( 0 ) ; boolean boolean0 = folderTreeNode0 . equals ( ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object objTarget ) { if ( objTarget = = this ) return true ; if ( ! ( objTarget instanceof FolderTreeNode ) ) return false ; FolderTreeNode objTargetNode = ( FolderTreeNode ) objTarget ; return this . getFolder ( ) . equals ( objTargetNode . getFolder ( ) ) ; }
void test6 ( ) throws Throwable { Folder folder0 = new Folder ( ) ; FolderTreeNode folderTreeNode0 = new FolderTreeNode ( folder0 ) ; FolderTreeNode folderTreeNode1 = new FolderTreeNode ( folder0 , ( IMutableTreeNode ) folderTreeNode0 ) ; boolean boolean0 = folderTreeNode0 . equals ( ( Object ) folderTreeNode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object objTarget ) { if ( objTarget = = this ) return true ; if ( ! ( objTarget instanceof FolderTreeNode ) ) return false ; FolderTreeNode objTargetNode = ( FolderTreeNode ) objTarget ; return this . getFolder ( ) . equals ( objTargetNode . getFolder ( ) ) ; }
void test0 ( ) throws Throwable { EmailFacadeImpl emailFacadeImpl0 = new EmailFacadeImpl ( ) ; JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl ( ) ; emailFacadeImpl0 . setSender ( ( MailSender ) javaMailSenderImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSender ( MailSender sender ) { this . sender = sender ; }
void test2 ( ) throws Throwable { EmailFacadeImpl emailFacadeImpl0 = new EmailFacadeImpl ( ) ; emailFacadeImpl0 . setCache ( ( MailCache ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) ; / * * * set this flag , and all data will be reloaded from the backend the next time * it is acessed * @param dirty * / void setDirty ( boolean dirty ) ; }
void test4 ( ) throws Throwable { EmailFacadeImpl emailFacadeImpl0 = new EmailFacadeImpl ( ) ; MailCache mailCache0 = emailFacadeImpl0 . getCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Cache getCache ( ) { return elementCache ; }
void test5 ( ) throws Throwable { EmailFacadeImpl emailFacadeImpl0 = new EmailFacadeImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Folder [ ] getAllFolders ( ) throws EmailFacadeException ; / * * * returns message list , but no message bodies filled * / MailMessage [ ] getAllMessages ( ) throws EmailFacadeException ; / * * * returns message list , but no message bodies filled * / MailMessage [ ] getMessagesFromFolder ( Folder folder ) throws EmailFacadeException ; String getName ( ) ; void copyMessages ( MailMessage [ ] messages , String folderFrom , String folderTo ) throws EmailFacadeException ; void moveMessages ( MailMessage [ ] messages , String folderFrom , String folderTo ) throws EmailFacadeException ; / * * * returns message with message body filled * / / / MailMessage getMessage ( Integer id , String folderName ) throws EmailFacadeException ; void fillMessageBody ( MailMessage message ) throws EmailFacadeException ; / * * * if true , there is still some data not loaded yet from the backend * @return * / boolean isDirty ( ) ; / * * * set this flag , and all data will be reloaded from the backend the next time * it is acessed * @param dirty * / void setDirty ( boolean dirty ) ; }
void test2 ( ) throws Throwable { DummyEmailFacadeImpl dummyEmailFacadeImpl0 = new DummyEmailFacadeImpl ( ) ; dummyEmailFacadeImpl0 . setLogger ( ( Logger ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test3 ( ) throws Throwable { DummyEmailFacadeImpl dummyEmailFacadeImpl0 = new DummyEmailFacadeImpl ( ) ; dummyEmailFacadeImpl0 . setCurrentFolder ( " : F8T , \"C\"Sj ! DM " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test6 ( ) throws Throwable { DummyEmailFacadeImpl dummyEmailFacadeImpl0 = new DummyEmailFacadeImpl ( ) ; Folder folder0 = dummyEmailFacadeImpl0 . getCurrentFolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test7 ( ) throws Throwable { DummyEmailFacadeImpl dummyEmailFacadeImpl0 = new DummyEmailFacadeImpl ( ) ; String string0 = dummyEmailFacadeImpl0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; int getIndex ( ) ; void setIndex ( int i ) ; int getDepth ( ) ; void setDepth ( int i ) ; void setContained ( Object obj ) ; Object getContained ( ) ; void setParent ( Object obj ) ; Object getParent ( ) ; }
void test8 ( ) throws Throwable { DummyEmailFacadeImpl dummyEmailFacadeImpl0 = new DummyEmailFacadeImpl ( ) ; Folder [ ] folderArray0 = dummyEmailFacadeImpl0 . getAllFolders ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Folder [ ] getAllFolders ( ) throws EmailFacadeException ; / * * * returns message list , but no message bodies filled * / MailMessage [ ] getAllMessages ( ) throws EmailFacadeException ; / * * * returns message list , but no message bodies filled * / MailMessage [ ] getMessagesFromFolder ( Folder folder ) throws EmailFacadeException ; String getName ( ) ; void copyMessages ( MailMessage [ ] messages , String folderFrom , String folderTo ) throws EmailFacadeException ; void moveMessages ( MailMessage [ ] messages , String folderFrom , String folderTo ) throws EmailFacadeException ; / * * * returns message with message body filled * / / / MailMessage getMessage ( Integer id , String folderName ) throws EmailFacadeException ; void fillMessageBody ( MailMessage message ) throws EmailFacadeException ; / * * * if true , there is still some data not loaded yet from the backend * @return * / boolean isDirty ( ) ; / * * * set this flag , and all data will be reloaded from the backend the next time * it is acessed * @param dirty * / void setDirty ( boolean dirty ) ; }
void test0 ( ) throws Throwable { EmailFacadeState emailFacadeState0 = new EmailFacadeState ( ) ; emailFacadeState0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllClean ( ) { / / empty is pristine state if ( states . size ( ) = = 0 ) return false ; Iterator keys = states . keySet ( ) . iterator ( ) ; while ( keys . hasNext ( ) ) { Integer key = ( Integer ) keys . next ( ) ; if ( isDirty ( key ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { EmailFacadeState emailFacadeState0 = new EmailFacadeState ( ) ; Integer integer0 = new Integer ( 0 ) ; boolean boolean0 = emailFacadeState0 . isDirty ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) ; / * * * set this flag , and all data will be reloaded from the backend the next time * it is acessed * @param dirty * / void setDirty ( boolean dirty ) ; }
void test2 ( ) throws Throwable { EmailFacadeState emailFacadeState0 = new EmailFacadeState ( ) ; Integer integer0 = new Integer ( ( - 1761 ) ) ; emailFacadeState0 . setState ( integer0 , false ) ; emailFacadeState0 . setAll ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllClean ( ) { / / empty is pristine state if ( states . size ( ) = = 0 ) return false ; Iterator keys = states . keySet ( ) . iterator ( ) ; while ( keys . hasNext ( ) ) { Integer key = ( Integer ) keys . next ( ) ; if ( isDirty ( key ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { EmailFacadeState emailFacadeState0 = new EmailFacadeState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllClean ( ) { / / empty is pristine state if ( states . size ( ) = = 0 ) return false ; Iterator keys = states . keySet ( ) . iterator ( ) ; while ( keys . hasNext ( ) ) { Integer key = ( Integer ) keys . next ( ) ; if ( isDirty ( key ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { EmailFacadeState emailFacadeState0 = new EmailFacadeState ( ) ; boolean boolean0 = emailFacadeState0 . isAllClean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllClean ( ) { / / empty is pristine state if ( states . size ( ) = = 0 ) return false ; Iterator keys = states . keySet ( ) . iterator ( ) ; while ( keys . hasNext ( ) ) { Integer key = ( Integer ) keys . next ( ) ; if ( isDirty ( key ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { EmailFacadeState emailFacadeState0 = new EmailFacadeState ( ) ; emailFacadeState0 . setState ( ( Integer ) null , true ) ; boolean boolean0 = emailFacadeState0 . isAllClean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllClean ( ) { / / empty is pristine state if ( states . size ( ) = = 0 ) return false ; Iterator keys = states . keySet ( ) . iterator ( ) ; while ( keys . hasNext ( ) ) { Integer key = ( Integer ) keys . next ( ) ; if ( isDirty ( key ) ) { return false ; } } return true ; }
