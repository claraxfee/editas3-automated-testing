void test0 ( ) throws Throwable { Server server0 = Server . getInstance ( ) ; server0 . setInfo ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCurrentHost ( ) { return mCurrentHost ; }
void test1 ( ) throws Throwable { Server server0 = Server . getInstance ( ) ; String string0 = server0 . getCurrentHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCurrentHost ( ) { return mCurrentHost ; }
void test2 ( ) throws Throwable { Server server0 = Server . getInstance ( ) ; server0 . setCurrentHost ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo ( ) { return mInfo ; }
void test3 ( ) throws Throwable { Server server0 = Server . getInstance ( ) ; server0 . setPublicIP ( "RaMwyr = | N^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCurrentHost ( ) { return mCurrentHost ; }
void test4 ( ) throws Throwable { Server server0 = Server . getInstance ( ) ; String string0 = server0 . getInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo ( ) { return mInfo ; }
void test5 ( ) throws Throwable { Server server0 = Server . getInstance ( ) ; String string0 = server0 . getPublicIP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPublicIP ( ) { return mPublicIP ; }
void test2 ( ) throws Throwable { ExtrasLoggingFilter extrasLoggingFilter0 = new ExtrasLoggingFilter ( ) ; MockServletContext mockServletContext0 = new MockServletContext ( ) ; MockFilterConfig mockFilterConfig0 = new MockFilterConfig ( ( ServletContext ) mockServletContext0 ) ; extrasLoggingFilter0 . init ( ( FilterConfig ) mockFilterConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( FilterConfig pConfig ) throws ServletException { Server . getInstance ( ) . setInfo ( pConfig . getServletContext ( ) . getServerInfo ( ) ) ; try { for ( IInitLogger oInit : mInitLoggers ) { oInit . init ( pConfig ) ; } } catch ( ServletException e ) { throw e ; } catch ( Exception e ) { throw new ServletException ( e ) ; } }
void test0 ( ) throws Throwable { HttpServletRequest httpServletRequest0 = ExecutionContext . getCurrentRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpServletRequest getCurrentRequest ( ) { return mCurrentRequest . get ( ) ; }
void test1 ( ) throws Throwable { ExecutionContext executionContext0 = new ExecutionContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { FormattingInfo formattingInfo0 = new FormattingInfo ( ) ; SimpleStringConverter simpleStringConverter0 = new SimpleStringConverter ( formattingInfo0 , "" ) ; String string0 = simpleStringConverter0 . convert ( ( LoggingEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convert ( LoggingEvent pEvent ) { return mValue ; }
void test0 ( ) throws Throwable { ExtrasPatternLayout extrasPatternLayout0 = new ExtrasPatternLayout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExtrasPatternLayout ( ) { }
void test1 ( ) throws Throwable { ExtrasPatternLayout extrasPatternLayout0 = new ExtrasPatternLayout ( " [ = Ln ) aO + vnpp3nyWO4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExtrasPatternLayout ( ) { }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { AmazonInitLogger amazonInitLogger0 = new AmazonInitLogger ( ) ; MockFilterConfig mockFilterConfig0 = new MockFilterConfig ( ( String ) null ) ; amazonInitLogger0 . init ( ( FilterConfig ) mockFilterConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( FilterConfig pConfig ) throws ServletException { Server . getInstance ( ) . setInfo ( pConfig . getServletContext ( ) . getServerInfo ( ) ) ; try { for ( IInitLogger oInit : mInitLoggers ) { oInit . init ( pConfig ) ; } } catch ( ServletException e ) { throw e ; } catch ( Exception e ) { throw new ServletException ( e ) ; } }
void test0 ( ) throws Throwable { StubRequestInfoExtractor stubRequestInfoExtractor0 = new StubRequestInfoExtractor ( ) ; String string0 = stubRequestInfoExtractor0 . getRequestURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestURI ( ) ; String getCookie ( String pName ) ; }
void test1 ( ) throws Throwable { StubRequestInfoExtractor stubRequestInfoExtractor0 = new StubRequestInfoExtractor ( ) ; String string0 = stubRequestInfoExtractor0 . getRequestURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestURL ( ) ; String getRequestURI ( ) ; String getCookie ( String pName ) ; }
void test2 ( ) throws Throwable { StubRequestInfoExtractor stubRequestInfoExtractor0 = new StubRequestInfoExtractor ( ) ; String string0 = stubRequestInfoExtractor0 . getProtocol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; String getRequestURL ( ) ; String getRequestURI ( ) ; String getCookie ( String pName ) ; }
void test3 ( ) throws Throwable { StubRequestInfoExtractor stubRequestInfoExtractor0 = new StubRequestInfoExtractor ( ) ; String string0 = stubRequestInfoExtractor0 . getMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethod ( ) ; String getRemoteAddr ( ) ; String getProtocol ( ) ; String getRequestURL ( ) ; String getRequestURI ( ) ; String getCookie ( String pName ) ; }
void test4 ( ) throws Throwable { StubRequestInfoExtractor stubRequestInfoExtractor0 = new StubRequestInfoExtractor ( ) ; String string0 = stubRequestInfoExtractor0 . getCookie ( "1 > X ! } vL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookie ( String pName ) ; }
void test5 ( ) throws Throwable { StubRequestInfoExtractor stubRequestInfoExtractor0 = new StubRequestInfoExtractor ( ) ; String string0 = stubRequestInfoExtractor0 . getRemoteAddr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteAddr ( ) ; String getProtocol ( ) ; String getRequestURL ( ) ; String getRequestURI ( ) ; String getCookie ( String pName ) ; }
void test0 ( ) throws Throwable { RequestInfoExtractorFactory requestInfoExtractorFactory0 = new RequestInfoExtractorFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { SpringRequestInfoExtractor springRequestInfoExtractor0 = ( SpringRequestInfoExtractor ) RequestInfoExtractorFactory . getExtractorInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IRequestInfoExtractor getExtractorInstance ( ) { return mInstance ; }
void test0 ( ) throws Throwable { ExtPatternLayout extPatternLayout0 = new ExtPatternLayout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExtPatternLayout ( ) { super ( ) ; initConverters ( ) ; }
void test0 ( ) throws Throwable { CookieConverter cookieConverter0 = new CookieConverter ( ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; String string0 = cookieConverter0 . convert ( ( ILoggingEvent ) loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convert ( LoggingEvent pEvent ) { return mValue ; }
void test0 ( ) throws Throwable { RepeaterTag repeaterTag0 = new RepeaterTag ( ) ; int int0 = repeaterTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { return SKIP_BODY ; }
void test0 ( ) throws Throwable { ItemTemplateTag itemTemplateTag0 = new ItemTemplateTag ( ) ; ForEachTag forEachTag0 = new ForEachTag ( ) ; itemTemplateTag0 . setParent ( ( Tag ) forEachTag0 ) ; int int0 = itemTemplateTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { return SKIP_BODY ; }
void test0 ( ) throws Throwable { SeparatorTemplateTag separatorTemplateTag0 = new SeparatorTemplateTag ( ) ; RepeaterTag repeaterTag0 = new RepeaterTag ( ) ; separatorTemplateTag0 . setParent ( ( Tag ) repeaterTag0 ) ; int int0 = separatorTemplateTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { return SKIP_BODY ; }
void test0 ( ) throws Throwable { HeaderTemplateTag headerTemplateTag0 = new HeaderTemplateTag ( ) ; ForEachTag forEachTag0 = new ForEachTag ( ) ; headerTemplateTag0 . setParent ( ( Tag ) forEachTag0 ) ; int int0 = headerTemplateTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { return SKIP_BODY ; }
void test1 ( ) throws Throwable { Page page0 = new Page ( ) ; String string0 = page0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrl ( ) { return mUrl ; }
void test2 ( ) throws Throwable { Page page0 = new Page ( ) ; Integer integer0 = new Integer ( ( - 1971 ) ) ; page0 . setN ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrl ( ) { return mUrl ; }
void test3 ( ) throws Throwable { Page page0 = new Page ( ) ; page0 . setUrl ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrl ( ) { return mUrl ; }
void test0 ( ) throws Throwable { StaticPage staticPage0 = new StaticPage ( ) ; staticPage0 . setUrl ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrl ( ) { return mUrl ; }
void test1 ( ) throws Throwable { StaticPage staticPage0 = new StaticPage ( ) ; String string0 = staticPage0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUrl ( ) { return mUrl ; }
void test0 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; int int0 = pagination0 . getTotalPages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalPages ( ) { return totalPages ; }
void test1 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; Pages pages0 = pagination0 . getPages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPages ( ) { return mPages ; }
void test2 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; pagination0 . setCurrentPage ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPage ( ) { return currentPage ; }
void test3 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; StaticPage staticPage0 = pagination0 . getNextPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StaticPage getNextPage ( ) { return nextPage ; }
void test4 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; StaticPage staticPage0 = pagination0 . getPreviousPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StaticPage getPreviousPage ( ) { return previousPage ; }
void test5 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; StaticPage staticPage0 = pagination0 . getLastPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StaticPage getLastPage ( ) { return lastPage ; }
void test6 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; pagination0 . setTotalPages ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalPages ( ) { return totalPages ; }
void test7 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; int int0 = pagination0 . getCurrentPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPage ( ) { return currentPage ; }
void test8 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; pagination0 . setLastPage ( ( StaticPage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalPages ( ) { return totalPages ; }
void test9 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; pagination0 . setPages ( ( Pages ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalPages ( ) { return totalPages ; }
void test10 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; StaticPage staticPage0 = new StaticPage ( ) ; pagination0 . setFirstPage ( staticPage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalPages ( ) { return totalPages ; }
void test11 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; StaticPage staticPage0 = pagination0 . getFirstPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StaticPage getFirstPage ( ) { return firstPage ; }
void test12 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; pagination0 . setNextPage ( ( StaticPage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPage ( ) { return currentPage ; }
void test13 ( ) throws Throwable { Pagination pagination0 = new Pagination ( ) ; pagination0 . setPreviousPage ( ( StaticPage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPage ( ) { return currentPage ; }
void test0 ( ) throws Throwable { Pages pages0 = new Pages ( ) ; List < Page > list0 = pages0 . getPage ( ) ; List < Page > list1 = pages0 . getPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Page > getPage ( ) { if ( page = = null ) { page = new ArrayList < Page > ( ) ; } return this . page ; }
