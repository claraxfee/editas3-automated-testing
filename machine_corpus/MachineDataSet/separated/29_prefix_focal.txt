void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " ; m' > % - + S : pY_L5b ) = k" ; EFileFilter eFileFilter0 = new EFileFilter ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test1 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = " > ou6yNDg | " ; stringArray0 [ 1 ] = " > ou6yNDg | " ; stringArray0 [ 2 ] = "$5 > `E0@fl { zh [ cG~k" ; EFileFilter eFileFilter0 = new EFileFilter ( stringArray0 , " > ou6yNDg | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test3 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( ) ; boolean boolean0 = eFileFilter0 . accept ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test4 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( "kqcu ) K ZhE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test5 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = eFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test6 ( ) throws Throwable { File file0 = new File ( "wt . " ) ; EFileFilter eFileFilter0 = new EFileFilter ( ) ; boolean boolean0 = eFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test7 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( ) ; eFileFilter0 . getExtension ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test8 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( "kqcu ) K ZhE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test9 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( ) ; / / Undeclared exception ! String string0 = "" ; try { string0 = eFileFilter0 . getDescription ( ) ; fail ( "Expecting exception : NoSuchElementException" ) ; } catch ( NoSuchElementException e ) { / * * Hashtable Enumerator * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test10 ( ) throws Throwable { EFileFilter eFileFilter0 = new EFileFilter ( "kqcu ) K ZhE" , "kqcu ) K ZhE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtensionListInDescription ( ) { return useExtensionsInDescription ; }
void test0 ( ) throws Throwable { JProgressBar jProgressBar0 = new JProgressBar ( ) ; Run run0 = new Run ( ( Main ) null , ( InFile ) null , ( File ) null , ( JmolViewer ) null , jProgressBar0 , true , "" , true ) ; run0 . fileExists ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean fileExists ( String f ) { File check = new File ( f ) ; return check . exists ( ) ; }
void test1 ( ) throws Throwable { JProgressBar jProgressBar0 = new JProgressBar ( ) ; Run run0 = new Run ( ( Main ) null , ( InFile ) null , ( File ) null , ( JmolViewer ) null , jProgressBar0 , true , "" , true ) ; run0 . SaveToFile ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void SaveToFile ( boolean firstcall ) / / saves to file { if ( ofile ! = null ) { try { if ( firstcall ) { outFile = new PrintWriter ( new FileOutputStream ( ofile . getPath ( ) + " . dummy . in" ) ) ; } else { outFile = new PrintWriter ( new FileOutputStream ( ofile . getPath ( ) + " . solv . in" ) ) ; } } catch ( Exception e1 ) { System . out . print ( e1 . toString ( ) ) ; } String tempIn = in . toString ( firstcall ) ; / / store data in temporary string String [ ] tempInSplit = tempIn . split ( "\n" ) ; / / split data by each new line for ( int i = 0 ; i < tempInSplit . length ; i + + ) { outFile . println ( tempInSplit [ i ] ) ; / / print data one line at a time } outFile . close ( ) ; } }
void test1 ( ) throws Throwable { JmolPanel jmolPanel0 = new JmolPanel ( ) ; Viewer viewer0 = ( Viewer ) jmolPanel0 . getViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JmolViewer getViewer ( ) { return viewer ; }
void test0 ( ) throws Throwable { SimplePlotXY simplePlotXY0 = new SimplePlotXY ( ) ; PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; simplePlotXY0 . setHorizontalAxis ( ( PlotAxis ) plotYAxis0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test1 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 9 ] ; Locale locale0 = JComponent . getDefaultLocale ( ) ; DecimalFormat decimalFormat0 = ( DecimalFormat ) NumberFormat . getInstance ( locale0 ) ; SimplePlotXY simplePlotXY0 = new SimplePlotXY ( doubleArray0 , doubleArray0 , "" , "" , "" , ( NumberFormat ) decimalFormat0 , ( NumberFormat ) decimalFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinX ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . x ) ; } return min ; }
void test3 ( ) throws Throwable { SimplePlotXY simplePlotXY0 = new SimplePlotXY ( ) ; PlotAxis plotAxis0 = simplePlotXY0 . getVerticalAxis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PlotAxis getVerticalAxis ( ) { return yAxis ; }
void test4 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 3 ] ; SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat ( "z" ) ; DecimalFormat decimalFormat0 = ( DecimalFormat ) simpleDateFormat0 . getNumberFormat ( ) ; CircleSymbol circleSymbol0 = new CircleSymbol ( ) ; SimplePlotXY simplePlotXY0 = new SimplePlotXY ( doubleArray0 , doubleArray0 , "z" , "z" , "z" , ( NumberFormat ) decimalFormat0 , ( NumberFormat ) decimalFormat0 , ( PlotSymbol ) circleSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridStyle ( ) { return gridStyle ; }
void test5 ( ) throws Throwable { PlotRunList plotRunList0 = new PlotRunList ( ) ; DecimalFormat decimalFormat0 = ( DecimalFormat ) NumberFormat . getCurrencyInstance ( ) ; SimplePlotXY simplePlotXY0 = new SimplePlotXY ( plotRunList0 , ( String ) null , ( String ) null , ( String ) null , ( NumberFormat ) decimalFormat0 , ( NumberFormat ) decimalFormat0 ) ; simplePlotXY0 . setTitle ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return plotTitle ; }
void test6 ( ) throws Throwable { SimplePlotXY simplePlotXY0 = new SimplePlotXY ( ) ; String string0 = simplePlotXY0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return plotTitle ; }
void test7 ( ) throws Throwable { SimplePlotXY simplePlotXY0 = new SimplePlotXY ( ) ; simplePlotXY0 . setVerticalAxis ( ( PlotAxis ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return plotTitle ; }
void test0 ( ) throws Throwable { RTriangle3Symbol rTriangle3Symbol0 = new RTriangle3Symbol ( ) ; rTriangle3Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; rTriangle3Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { BoxLLSymbol boxLLSymbol0 = new BoxLLSymbol ( ) ; boxLLSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; boxLLSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol ( ) ; Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol ( ) ; Color color0 = triangle4Symbol0 . getBorderColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test1 ( ) throws Throwable { Triangle3Symbol triangle3Symbol0 = new Triangle3Symbol ( ) ; triangle3Symbol0 . getFillColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test2 ( ) throws Throwable { RTriangle2Symbol rTriangle2Symbol0 = new RTriangle2Symbol ( ) ; rTriangle2Symbol0 . setSize ( 1200 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test3 ( ) throws Throwable { ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol ( ) ; Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol ( ) ; Color color0 = triangle4Symbol0 . getBorderColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test4 ( ) throws Throwable { ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol ( ) ; ThinRect2Symbol thinRect2Symbol1 = ( ThinRect2Symbol ) thinRect2Symbol0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test5 ( ) throws Throwable { ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol ( ) ; int int0 = thinRect2Symbol0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test2 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 5 ] [ 7 ] ; double [ ] doubleArray1 = new double [ 7 ] ; doubleArray1 [ 0 ] = ( - 1 . 0 ) ; doubleArray1 [ 1 ] = 1794 . 5875504546864 ; doubleArray1 [ 2 ] = 0 . 0 ; doubleArray1 [ 3 ] = 0 . 0 ; doubleArray1 [ 4 ] = 0 . 0 ; doubleArray1 [ 6 ] = 1794 . 5875504546864 ; doubleArray0 [ 0 ] = doubleArray1 ; double [ ] doubleArray2 = new double [ 8 ] ; doubleArray2 [ 0 ] = ( - 1911 . 990727096159 ) ; doubleArray2 [ 1 ] = 0 . 0 ; doubleArray2 [ 3 ] = 0 . 0 ; doubleArray2 [ 4 ] = ( - 1 . 0 ) ; doubleArray2 [ 5 ] = 0 . 0 ; doubleArray2 [ 6 ] = 0 . 0 ; doubleArray2 [ 7 ] = ( - 1 . 0 ) ; doubleArray0 [ 1 ] = doubleArray2 ; double [ ] doubleArray3 = new double [ 9 ] ; doubleArray3 [ 0 ] = 1794 . 5875504546864 ; doubleArray3 [ 1 ] = 1794 . 5875504546864 ; doubleArray3 [ 2 ] = 0 . 0 ; doubleArray3 [ 3 ] = 1794 . 5875504546864 ; doubleArray2 [ 3 ] = 1794 . 5875504546864 ; doubleArray3 [ 5 ] = ( - 1911 . 990727096159 ) ; doubleArray3 [ 6 ] = ( - 1460 . 1153895005987 ) ; doubleArray3 [ 7 ] = 1794 . 5875504546864 ; doubleArray3 [ 8 ] = ( - 1 . 0 ) ; doubleArray0 [ 2 ] = doubleArray0 [ 1 ] ; double [ ] doubleArray4 = new double [ 7 ] ; doubleArray4 [ 0 ] = 1123 . 0935277911701 ; doubleArray4 [ 1 ] = ( - 1460 . 1153895005987 ) ; doubleArray4 [ 2 ] = 1794 . 5875504546864 ; doubleArray4 [ 3 ] = 438 . 31846332067255 ; doubleArray4 [ 4 ] = 0 . 0 ; doubleArray4 [ 5 ] = 0 . 0 ; doubleArray4 [ 6 ] = ( - 1 . 0 ) ; doubleArray0 [ 3 ] = doubleArray4 ; double [ ] doubleArray5 = new double [ 5 ] ; doubleArray5 [ 0 ] = ( - 21 . 540296392747468 ) ; doubleArray5 [ 1 ] = ( - 1460 . 1153895005987 ) ; doubleArray5 [ 2 ] = 1794 . 5875504546864 ; doubleArray5 [ 3 ] = 1794 . 5875504546864 ; doubleArray5 [ 4 ] = 438 . 31846332067255 ; doubleArray0 [ 4 ] = doubleArray1 ; ContourAttrib [ ] contourAttribArray0 = new ContourAttrib [ 9 ] ; ContourAttrib contourAttrib0 = new ContourAttrib ( ( - 21 . 540296392747468 ) ) ; contourAttribArray0 [ 0 ] = contourAttrib0 ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , ( - 1 ) , doubleArray3 , doubleArray5 ) ; ContourAttrib contourAttrib1 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 1 ] = contourAttrib1 ; ContourAttrib contourAttrib2 = new ContourAttrib ( ( - 1 . 0 ) ) ; contourAttribArray0 [ 2 ] = contourAttrib2 ; ContourAttrib contourAttrib3 = new ContourAttrib ( 0 . 0 ) ; contourAttribArray0 [ 3 ] = contourAttrib3 ; ContourAttrib contourAttrib4 = new ContourAttrib ( 1794 . 5875504546864 ) ; contourAttribArray0 [ 4 ] = contourAttrib4 ; ContourAttrib contourAttrib5 = new ContourAttrib ( 0 . 0 ) ; contourAttribArray0 [ 5 ] = contourAttrib5 ; ContourAttrib contourAttrib6 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 6 ] = contourAttrib6 ; ContourAttrib contourAttrib7 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 7 ] = contourAttrib7 ; contourAttribArray0 [ 8 ] = contourAttrib5 ; ContourGenerator contourGenerator0 = new ContourGenerator ( doubleArray0 , doubleArray0 , doubleArray0 , contourAttribArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getProgress ( ) { return fracComplete ; }
void test7 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 3 ] [ 7 ] ; double [ ] doubleArray1 = new double [ 3 ] ; doubleArray1 [ 0 ] = 1874 . 755318456906 ; doubleArray1 [ 1 ] = 0 . 0 ; doubleArray1 [ 2 ] = 1237 . 0945374094943 ; doubleArray0 [ 0 ] = doubleArray1 ; double [ ] doubleArray2 = new double [ 4 ] ; doubleArray2 [ 0 ] = 0 . 0 ; doubleArray2 [ 1 ] = 1237 . 0945374094943 ; doubleArray2 [ 2 ] = 1874 . 755318456906 ; doubleArray2 [ 3 ] = 1237 . 0945374094943 ; doubleArray0 [ 1 ] = doubleArray2 ; double [ ] doubleArray3 = new double [ 8 ] ; doubleArray3 [ 0 ] = 1874 . 755318456906 ; doubleArray3 [ 1 ] = 1874 . 755318456906 ; doubleArray3 [ 3 ] = 1874 . 755318456906 ; ContourAttrib [ ] contourAttribArray0 = new ContourAttrib [ 9 ] ; ContourAttrib contourAttrib0 = new ContourAttrib ( 1237 . 0945374094943 ) ; double [ ] doubleArray4 = new double [ 9 ] ; doubleArray4 [ 0 ] = 1237 . 0945374094943 ; doubleArray4 [ 1 ] = 1237 . 0945374094943 ; doubleArray4 [ 2 ] = ( double ) ( - 919 ) ; doubleArray4 [ 3 ] = 1237 . 0945374094943 ; doubleArray4 [ 4 ] = 0 . 0 ; doubleArray4 [ 5 ] = 1874 . 755318456906 ; doubleArray4 [ 7 ] = 1874 . 755318456906 ; doubleArray4 [ 8 ] = 1237 . 0945374094943 ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , ( - 919 ) , doubleArray0 [ 0 ] , doubleArray4 ) ; ContourAttrib contourAttrib1 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 0 ] = contourAttrib1 ; ContourAttrib contourAttrib2 = new ContourAttrib ( 1874 . 755318456906 ) ; contourAttribArray0 [ 1 ] = contourAttrib2 ; ContourAttrib contourAttrib3 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 2 ] = contourAttrib3 ; ContourAttrib contourAttrib4 = contourPath0 . getAttributes ( ) ; contourPath0 . clone ( ) ; contourAttribArray0 [ 3 ] = contourAttrib4 ; ContourAttrib contourAttrib5 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 4 ] = contourAttrib5 ; ContourAttrib contourAttrib6 = new ContourAttrib ( 1874 . 755318456906 ) ; contourAttribArray0 [ 5 ] = contourAttrib6 ; ContourAttrib contourAttrib7 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 6 ] = contourAttrib7 ; contourAttribArray0 [ 0 ] = contourAttrib2 ; contourAttribArray0 [ 1 ] = contourAttrib1 ; contourAttribArray0 [ 2 ] = contourAttrib6 ; ContourAttrib contourAttrib8 = new ContourAttrib ( ( double ) ( - 919 ) ) ; contourAttribArray0 [ 3 ] = contourAttrib8 ; contourAttribArray0 [ 4 ] = contourAttrib1 ; contourAttribArray0 [ 5 ] = contourAttrib2 ; ContourAttrib contourAttrib9 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 6 ] = contourAttrib9 ; contourAttribArray0 [ 7 ] = contourAttrib2 ; contourAttribArray0 [ 8 ] = contourAttrib4 ; contourAttribArray0 [ 7 ] = contourAttrib4 ; ContourAttrib contourAttrib10 = contourPath0 . getAttributes ( ) ; contourAttribArray0 [ 8 ] = contourAttrib10 ; ContourGenerator contourGenerator0 = new ContourGenerator ( doubleArray0 , doubleArray0 , doubleArray0 , contourAttribArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getProgress ( ) { return fracComplete ; }
void test0 ( ) throws Throwable { TabRSymbol tabRSymbol0 = new TabRSymbol ( ) ; tabRSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; tabRSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { TabDSymbol tabDSymbol0 = new TabDSymbol ( ) ; tabDSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; tabDSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { BoxURSymbol boxURSymbol0 = new BoxURSymbol ( ) ; boxURSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; boxURSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { BoxLRSymbol boxLRSymbol0 = new BoxLRSymbol ( ) ; boxLRSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; boxLRSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol ( ) ; rTriangle4Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; rTriangle4Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; PlotXAxis plotXAxis0 = new PlotXAxis ( " & Lqu4A ; ( . xG ) > ! ? W ; + " , ( PlotAxisScale ) linearAxisScale0 , ( NumberFormat ) null , ( - 687 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridStyle ( ) { return gridStyle ; }
void test2 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; PlotRunList plotRunList0 = new PlotRunList ( ) ; plotXAxis0 . manualLowerBounds ( true ) ; plotXAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test3 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; plotXAxis0 . manualUpperBounds ( true ) ; PlotRunList plotRunList0 = new PlotRunList ( ) ; plotXAxis0 . manualLowerBounds ( true ) ; plotXAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxY ( ) { double max = Double . MIN_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; max = Math . max ( max , datum . y ) ; } return max ; }
void test4 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; PlotRun [ ] plotRunArray0 = new PlotRun [ 5 ] ; double [ ] doubleArray0 = new double [ 20 ] ; Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) triangle2Symbol0 ) ; plotRunArray0 [ 1 ] = plotRun0 ; plotXAxis0 . manualUpperBounds ( true ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) plotRunArray0 [ 1 ] ) ; plotXAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test5 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; plotXAxis0 . setAxisBounds ( ( PlotRunList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test6 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; PlotRun [ ] plotRunArray0 = new PlotRun [ 5 ] ; double [ ] doubleArray0 = new double [ 20 ] ; Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) triangle2Symbol0 ) ; plotRunArray0 [ 0 ] = plotRun0 ; plotRunArray0 [ 1 ] = plotRun0 ; plotRunArray0 [ 2 ] = plotRun0 ; plotRunArray0 [ 3 ] = plotRunArray0 [ 0 ] ; plotRunArray0 [ 4 ] = plotRunArray0 [ 2 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; plotXAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test0 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 0 . 0 ) ; ContourAttrib contourAttrib1 = ( ContourAttrib ) contourAttrib0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLevel ( ) { return level ; }
void test1 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 0 . 0 ) ; double double0 = contourAttrib0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLevel ( ) { return level ; }
void test2 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 0 . 0 ) ; contourAttrib0 . setLevel ( 486 . 5694483946694 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLevel ( ) { return level ; }
void test0 ( ) throws Throwable { RTriangle2Symbol rTriangle2Symbol0 = new RTriangle2Symbol ( ) ; rTriangle2Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; rTriangle2Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol ( ) ; triangle4Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; triangle4Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { TabLSymbol tabLSymbol0 = new TabLSymbol ( ) ; tabLSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; tabLSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test1 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 10 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object remove ( int index ) { return data . remove ( index ) ; }
void test2 ( ) throws Throwable { PlotRunList plotRunList0 = new PlotRunList ( ) ; plotRunList0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxX ( ) { double max = Double . MIN_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; max = Math . max ( max , datum . x ) ; } return max ; }
void test3 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 6 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( int index ) { return data . get ( index ) ; }
void test4 ( ) throws Throwable { PlotRunList plotRunList0 = new PlotRunList ( ) ; PlotRunList plotRunList1 = new PlotRunList ( ( Collection ) plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxY ( ) { double max = Double . MIN_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; max = Math . max ( max , datum . y ) ; } return max ; }
void test5 ( ) throws Throwable { TreeSet < PlotRun > treeSet0 = new TreeSet < PlotRun > ( ) ; PlotRun plotRun0 = new PlotRun ( ( Collection ) treeSet0 ) ; treeSet0 . add ( plotRun0 ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test6 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 5 ] ; PlotRun plotRun0 = new PlotRun ( ) ; plotRunArray0 [ 0 ] = plotRun0 ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) plotRunArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinX ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . x ) ; } return min ; }
void test7 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 4 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinX ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . x ) ; } return min ; }
void test8 ( ) throws Throwable { LinkedList < PlotRun > linkedList0 = new LinkedList < PlotRun > ( ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxX ( ) { double max = Double . MIN_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; max = Math . max ( max , datum . x ) ; } return max ; }
void test9 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 4 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxX ( ) { double max = Double . MIN_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; max = Math . max ( max , datum . x ) ; } return max ; }
void test10 ( ) throws Throwable { LinkedList < PlotRun > linkedList0 = new LinkedList < PlotRun > ( ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinY ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . y ) ; } return min ; }
void test12 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; Set < AWTKeyStroke > set0 = jPasswordField0 . getFocusTraversalKeys ( 0 ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) set0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test13 ( ) throws Throwable { JSpinner jSpinner0 = new JSpinner ( ) ; Set < AWTKeyStroke > set0 = jSpinner0 . getFocusTraversalKeys ( 0 ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) set0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test14 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 6 ] ; TabLSymbol tabLSymbol0 = new TabLSymbol ( ) ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPlotSymbol ( PlotSymbol symbol ) { this . symbol = symbol ; }
void test15 ( ) throws Throwable { PlotRunList plotRunList0 = new PlotRunList ( ) ; JOptionPane jOptionPane0 = new JOptionPane ( ( Object ) "java . awt . geom . Rectangle2D$Float [ x = - 1442 . 2383 , y = - 1442 . 2383 , w = 1 . 0 , h = 1 . 0 ] " ) ; Color color0 = jOptionPane0 . getForeground ( ) ; plotRunList0 . setLineColor ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLineColor ( Color color ) { if ( color ! = null ) lineColor = color ; else lineColor = Color . black ; }
void test16 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 5 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLineColor ( Color color ) { if ( color ! = null ) lineColor = color ; else lineColor = Color . black ; }
void test17 ( ) throws Throwable { PlotRun [ ] plotRunArray0 = new PlotRun [ 8 ] ; PlotRun plotRun0 = new PlotRun ( ) ; plotRunArray0 [ 0 ] = plotRun0 ; plotRunArray0 [ 1 ] = plotRunArray0 [ 0 ] ; plotRunArray0 [ 2 ] = plotRunArray0 [ 1 ] ; plotRunArray0 [ 3 ] = plotRunArray0 [ 2 ] ; plotRunArray0 [ 4 ] = plotRunArray0 [ 0 ] ; plotRunArray0 [ 5 ] = plotRun0 ; plotRunArray0 [ 6 ] = plotRunArray0 [ 0 ] ; plotRunArray0 [ 7 ] = plotRunArray0 [ 3 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( boolean firstcall ) { all = new StringBuffer ( ) ; readMols = new StringBuffer ( ) ; / / reset all the stringbuffers or it will focus = new StringBuffer ( ) ; all . append ( "#APBSmem geometric factors\n" ) ; all . append ( getRunParams ( ) ) ; readMols . append ( new String ( "# READ IN MOLECULES\nread\n" ) ) ; if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule1 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule1 + "\"\n" ) ; if ( ! molecule2 . equals ( "" ) ) { if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule2 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule2 + "\"\n" ) ; } if ( ! molecule3 . equals ( "" ) ) readMols . append ( "mol pqr \"" + molecule3 + "\"\n" ) ; if ( calcType = = 0 ) { / / PROTEIN SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } } else { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref" + i ) , firstcall , true ) ) ; } all . append ( "print elecEnergy ref" + Integer . toString ( maxfocus ) + " - solv" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 1 ) { / / ION SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { / / Write the input file for the "DUMMY" calculation for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , false , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / SOLV for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "ion" + i ) , firstcall , false , 0 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy protion" + Integer . toString ( maxfocus ) + " - ion" + Integer . toString ( maxfocus ) + " - prot" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 2 ) { / / GATING CHARGE if ( firstcall ) { / / Write the input file for the "DUMMY" calculation readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref_neut_" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "motion_neut_" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / Write the input fule for the "SOLV" calculation readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n diel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 1 , new String ( "ref_charged" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 2 , new String ( "motion_charged" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy ref_charged" + Integer . toString ( maxfocus ) + " - motion_charged" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } all . append ( "quit" ) ; return all . toString ( ) ; }
void test0 ( ) throws Throwable { RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol ( ) ; rTriangle1Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; rTriangle1Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol ( ) ; triangle2Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; triangle2Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { BoxULSymbol boxULSymbol0 = new BoxULSymbol ( ) ; boxULSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; boxULSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { PlotRun plotRun0 = new PlotRun ( ) ; plotRun0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( boolean firstcall ) { all = new StringBuffer ( ) ; readMols = new StringBuffer ( ) ; / / reset all the stringbuffers or it will focus = new StringBuffer ( ) ; all . append ( "#APBSmem geometric factors\n" ) ; all . append ( getRunParams ( ) ) ; readMols . append ( new String ( "# READ IN MOLECULES\nread\n" ) ) ; if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule1 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule1 + "\"\n" ) ; if ( ! molecule2 . equals ( "" ) ) { if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule2 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule2 + "\"\n" ) ; } if ( ! molecule3 . equals ( "" ) ) readMols . append ( "mol pqr \"" + molecule3 + "\"\n" ) ; if ( calcType = = 0 ) { / / PROTEIN SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } } else { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref" + i ) , firstcall , true ) ) ; } all . append ( "print elecEnergy ref" + Integer . toString ( maxfocus ) + " - solv" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 1 ) { / / ION SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { / / Write the input file for the "DUMMY" calculation for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , false , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / SOLV for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "ion" + i ) , firstcall , false , 0 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy protion" + Integer . toString ( maxfocus ) + " - ion" + Integer . toString ( maxfocus ) + " - prot" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 2 ) { / / GATING CHARGE if ( firstcall ) { / / Write the input file for the "DUMMY" calculation readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref_neut_" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "motion_neut_" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / Write the input fule for the "SOLV" calculation readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n diel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 1 , new String ( "ref_charged" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 2 , new String ( "motion_charged" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy ref_charged" + Integer . toString ( maxfocus ) + " - motion_charged" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } all . append ( "quit" ) ; return all . toString ( ) ; }
void test1 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 7 ] ; CircleSymbol circleSymbol0 = new CircleSymbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) circleSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( int index , Object element ) { PlotDatum obj = ( PlotDatum ) element ; data . add ( index , element ) ; }
void test2 ( ) throws Throwable { PlotRun plotRun0 = new PlotRun ( ) ; PlotRun plotRun1 = new PlotRun ( ( Collection ) plotRun0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( boolean firstcall ) { all = new StringBuffer ( ) ; readMols = new StringBuffer ( ) ; / / reset all the stringbuffers or it will focus = new StringBuffer ( ) ; all . append ( "#APBSmem geometric factors\n" ) ; all . append ( getRunParams ( ) ) ; readMols . append ( new String ( "# READ IN MOLECULES\nread\n" ) ) ; if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule1 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule1 + "\"\n" ) ; if ( ! molecule2 . equals ( "" ) ) { if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule2 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule2 + "\"\n" ) ; } if ( ! molecule3 . equals ( "" ) ) readMols . append ( "mol pqr \"" + molecule3 + "\"\n" ) ; if ( calcType = = 0 ) { / / PROTEIN SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } } else { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref" + i ) , firstcall , true ) ) ; } all . append ( "print elecEnergy ref" + Integer . toString ( maxfocus ) + " - solv" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 1 ) { / / ION SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { / / Write the input file for the "DUMMY" calculation for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , false , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / SOLV for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "ion" + i ) , firstcall , false , 0 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy protion" + Integer . toString ( maxfocus ) + " - ion" + Integer . toString ( maxfocus ) + " - prot" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 2 ) { / / GATING CHARGE if ( firstcall ) { / / Write the input file for the "DUMMY" calculation readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref_neut_" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "motion_neut_" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / Write the input fule for the "SOLV" calculation readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n diel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 1 , new String ( "ref_charged" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 2 , new String ( "motion_charged" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy ref_charged" + Integer . toString ( maxfocus ) + " - motion_charged" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } all . append ( "quit" ) ; return all . toString ( ) ; }
void test4 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 10 ] ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test5 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 1 ] ; TabDSymbol tabDSymbol0 = new TabDSymbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , false , ( PlotSymbol ) tabDSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object set ( int index , Object element ) { PlotDatum obj = ( PlotDatum ) element ; return data . set ( index , element ) ; }
void test6 ( ) throws Throwable { PlotDatum [ ] plotDatumArray0 = new PlotDatum [ 1 ] ; PlotRun plotRun0 = new PlotRun ( plotDatumArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinY ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . y ) ; } return min ; }
void test8 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 5 ] [ 2 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 3 ] ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; PlotRun plotRun0 = new PlotRun ( ( Collection ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test9 ( ) throws Throwable { TreeSet < PlotDatum > treeSet0 = new TreeSet < PlotDatum > ( ) ; TabRSymbol tabRSymbol0 = new TabRSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 18 . 09977153015337 ) , ( - 18 . 09977153015337 ) , false , ( PlotSymbol ) tabRSymbol0 ) ; treeSet0 . add ( plotDatum0 ) ; PlotRun plotRun0 = new PlotRun ( ( Collection ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test10 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 1 ] ; TabDSymbol tabDSymbol0 = new TabDSymbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , false , ( PlotSymbol ) tabDSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinX ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . x ) ; } return min ; }
void test11 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 9 ] ; TabUpSymbol tabUpSymbol0 = new TabUpSymbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) tabUpSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test12 ( ) throws Throwable { PlotRun plotRun0 = new PlotRun ( ) ; double double0 = plotRun0 . getMinY ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinY ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . y ) ; } return min ; }
void test13 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 1 ] ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinX ( ) { double min = Double . MAX_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; min = Math . min ( min , datum . x ) ; } return min ; }
void test14 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 7 ] ; CircleSymbol circleSymbol0 = new CircleSymbol ( ) ; PlotRun plotRun0 = new PlotRun ( doubleArray0 , doubleArray0 , true , ( PlotSymbol ) circleSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return data . size ( ) ; }
void test15 ( ) throws Throwable { PlotRun plotRun0 = new PlotRun ( ) ; plotRun0 . setLineColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( boolean firstcall ) { all = new StringBuffer ( ) ; readMols = new StringBuffer ( ) ; / / reset all the stringbuffers or it will focus = new StringBuffer ( ) ; all . append ( "#APBSmem geometric factors\n" ) ; all . append ( getRunParams ( ) ) ; readMols . append ( new String ( "# READ IN MOLECULES\nread\n" ) ) ; if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule1 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule1 + "\"\n" ) ; if ( ! molecule2 . equals ( "" ) ) { if ( calcType = = 2 & & firstcall ) readMols . append ( "mol pqr \"" + molecule2 + " . n . pqr\"\n" ) ; else readMols . append ( "mol pqr \"" + molecule2 + "\"\n" ) ; } if ( ! molecule3 . equals ( "" ) ) readMols . append ( "mol pqr \"" + molecule3 + "\"\n" ) ; if ( calcType = = 0 ) { / / PROTEIN SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } } else { for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "solv" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref" + i ) , firstcall , true ) ) ; } all . append ( "print elecEnergy ref" + Integer . toString ( maxfocus ) + " - solv" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 1 ) { / / ION SOLVATION if ( ! firstcall ) { readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\ndiel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; } readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; if ( firstcall ) { / / Write the input file for the "DUMMY" calculation for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , false , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / SOLV for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 3 , new String ( "protion" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "ion" + i ) , firstcall , false , 0 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 1 , new String ( "prot" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy protion" + Integer . toString ( maxfocus ) + " - ion" + Integer . toString ( maxfocus ) + " - prot" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } else if ( calcType = = 2 ) { / / GATING CHARGE if ( firstcall ) { / / Write the input file for the "DUMMY" calculation readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeSection ( i , 1 , new String ( "ref_neut_" + i ) , firstcall , false ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeIonSection ( i , 2 , new String ( "motion_neut_" + i ) , firstcall , false , ( maxfocus + 2 ) + i ) ) ; } } else { / / Write the input fule for the "SOLV" calculation readMols . append ( new String ( "\n# Read Maps" ) ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n diel dx dielx_" + i + "m . dx diely_" + i + "m . dx dielz_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n kappa dx kappa_" + i + "m . dx" ) ) ; readMols . append ( "\n" ) ; for ( int i = 1 ; i < = ( maxfocus + 1 ) * 2 ; i + + ) readMols . append ( new String ( "\n charge dx charge_" + i + "m . dx" ) ) ; readMols . append ( new String ( "\nend\n\n" ) ) ; all . append ( readMols ) ; for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 1 , new String ( "ref_charged" + i ) , firstcall , true , i + 1 ) ) ; } for ( int i = 0 ; i < = maxfocus ; i + + ) { all . append ( writeGatingSection ( i , 2 , new String ( "motion_charged" + i ) , firstcall , true , ( maxfocus + 2 ) + i ) ) ; } all . append ( "print elecEnergy ref_charged" + Integer . toString ( maxfocus ) + " - motion_charged" + Integer . toString ( maxfocus ) + "\nend\n\n" ) ; } } all . append ( "quit" ) ; return all . toString ( ) ; }
void test16 ( ) throws Throwable { PlotDatum [ ] plotDatumArray0 = new PlotDatum [ 6 ] ; PlotRun plotRun0 = new PlotRun ( plotDatumArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLineColor ( Color color ) { if ( color ! = null ) lineColor = color ; else lineColor = Color . black ; }
void test17 ( ) throws Throwable { PlotDatum [ ] plotDatumArray0 = new PlotDatum [ 7 ] ; PlotDatum plotDatum0 = new PlotDatum ( 6 . 745239538698439 , 6 . 745239538698439 , false ) ; plotDatumArray0 [ 0 ] = plotDatum0 ; plotDatumArray0 [ 1 ] = plotDatum0 ; plotDatumArray0 [ 2 ] = plotDatum0 ; plotDatumArray0 [ 3 ] = plotDatum0 ; plotDatumArray0 [ 4 ] = plotDatumArray0 [ 0 ] ; plotDatumArray0 [ 5 ] = plotDatumArray0 [ 0 ] ; plotDatumArray0 [ 6 ] = plotDatum0 ; PlotRun plotRun0 = new PlotRun ( plotDatumArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxX ( ) { double max = Double . MIN_VALUE ; for ( Iterator i = data . iterator ( ) ; i . hasNext ( ) ; ) { PlotDatum datum = ( PlotDatum ) i . next ( ) ; max = Math . max ( max , datum . x ) ; } return max ; }
void test0 ( ) throws Throwable { Triangle1Symbol triangle1Symbol0 = new Triangle1Symbol ( ) ; triangle1Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; triangle1Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { PlotPanel plotPanel0 = new PlotPanel ( ( Plot ) null ) ; Plot plot0 = plotPanel0 . getPlot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Plot getPlot ( ) { return thePlot ; }
void test1 ( ) throws Throwable { PlotPanel plotPanel0 = new PlotPanel ( ( Plot ) null ) ; plotPanel0 . setUI ( ( PanelUI ) null ) ; plotPanel0 . paintComponent ( ( Graphics ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paintComponent ( Graphics gc ) { / / Paint the background super . paintComponent ( gc ) ; if ( thePlot ! = null ) { / / Deal with a possible border . Insets insets = getInsets ( ) ; int currentWidth = getWidth ( ) - insets . left - insets . right ; int currentHeight = getHeight ( ) - insets . top - insets . bottom ; Rectangle bounds = new Rectangle ( insets . left , insets . top , currentWidth , currentHeight ) ; / / Render the plot image . thePlot . draw ( gc , this , bounds ) ; } }
void test0 ( ) throws Throwable { ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol ( ) ; thinRect2Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; thinRect2Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; BoxULSymbol boxULSymbol0 = new BoxULSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 701 . 8681803943748 ) , 590 . 3645845826583 , false , ( PlotSymbol ) boxULSymbol0 ) ; AxisLimitData axisLimitData0 = linearAxisScale0 . findGoodLimits ( 590 . 3645845826583 , 1628 . 5252957384466 ) ; linearAxisScale0 . adjustForErrorBars ( plotDatum0 , 590 . 3645845826583 , ( - 701 . 8681803943748 ) , axisLimitData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connected ( ) { return conFlg ; }
void test1 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; linearAxisScale0 . findGoodLimits ( 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double lowerBounds ( ) { return - 1 . 0 ; }
void test2 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; AxisLimitData axisLimitData0 = linearAxisScale0 . findGoodLimits ( 298 . 15 , 298 . 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AxisLimitData findGoodLimits ( double aLB , double aUB ) { / / The lower limit and tick mark spacing being calculated . double s = 0 . , r = 0 . ; / / Make sure we don't have a degenerate case . if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { if ( aUB > 0 . ) { aUB = 2 . * aUB ; aLB = 0 . ; } else if ( aLB < 0 ) { aLB = 2 . * aLB ; aUB = 0 . ; } if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { aLB = lowerBounds ( ) ; aUB = upperBounds ( ) ; } } if ( DEBUG ) { System . out . println ( "In findGoodLimits ( ) . . . " ) ; System . out . println ( " aLB = " + aLB + " , aUB = " + aUB ) ; } / / Object used to return results . AxisLimitData limData = new AxisLimitData ( ) ; boolean done = false ; while ( ! done ) { done = true ; double ub = aUB ; double lb = aLB ; double delta = ub - lb ; / / Scale up by s , a power of 10 , so range ( delta ) exceeds 1 . s = 1 . ; while ( delta * s < 10 . ) s * = 10 . ; / / Find power of 10 quantum , r , such that delta / 10 < = r < delta . r = 1 . / s ; while ( 10 . * r < delta ) r * = 10 . ; / / Set r = ( 1 , 2 , 5 ) * 10 * * n so that 3 - 5 quanta cover range . if ( r > = delta / 2 . ) r / = 2 . ; else if ( r < delta / 5 . ) r * = 2 . ; limData . ub = modceil ( ub , r ) ; limData . lb = modfloor ( lb , r ) ; / / If lower bound is < = r and > 0 , then repeat . if ( limData . lb < = r & & limData . lb > 0 . ) { aLB = 0 . ; done = false ; / / If upper bound > = - r and < 0 , then repeat . } else if ( limData . ub > = - r & & limData . ub < 0 . ) { aUB = 0 . ; done = false ; } } / / Save off tick mark spacing . limData . quantum = r ; if ( DEBUG ) { System . out . println ( " limData . lb = " + limData . lb + " , limData . ub = " + limData . ub + " , limData . quantum = " + limData . quantum ) ; } return limData ; }
void test3 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; AxisLimitData axisLimitData0 = linearAxisScale0 . findGoodLimits ( ( - 1940 . 3506854235914 ) , ( - 1600 . 9665645644068 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AxisLimitData findGoodLimits ( double aLB , double aUB ) { / / The lower limit and tick mark spacing being calculated . double s = 0 . , r = 0 . ; / / Make sure we don't have a degenerate case . if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { if ( aUB > 0 . ) { aUB = 2 . * aUB ; aLB = 0 . ; } else if ( aLB < 0 ) { aLB = 2 . * aLB ; aUB = 0 . ; } if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { aLB = lowerBounds ( ) ; aUB = upperBounds ( ) ; } } if ( DEBUG ) { System . out . println ( "In findGoodLimits ( ) . . . " ) ; System . out . println ( " aLB = " + aLB + " , aUB = " + aUB ) ; } / / Object used to return results . AxisLimitData limData = new AxisLimitData ( ) ; boolean done = false ; while ( ! done ) { done = true ; double ub = aUB ; double lb = aLB ; double delta = ub - lb ; / / Scale up by s , a power of 10 , so range ( delta ) exceeds 1 . s = 1 . ; while ( delta * s < 10 . ) s * = 10 . ; / / Find power of 10 quantum , r , such that delta / 10 < = r < delta . r = 1 . / s ; while ( 10 . * r < delta ) r * = 10 . ; / / Set r = ( 1 , 2 , 5 ) * 10 * * n so that 3 - 5 quanta cover range . if ( r > = delta / 2 . ) r / = 2 . ; else if ( r < delta / 5 . ) r * = 2 . ; limData . ub = modceil ( ub , r ) ; limData . lb = modfloor ( lb , r ) ; / / If lower bound is < = r and > 0 , then repeat . if ( limData . lb < = r & & limData . lb > 0 . ) { aLB = 0 . ; done = false ; / / If upper bound > = - r and < 0 , then repeat . } else if ( limData . ub > = - r & & limData . ub < 0 . ) { aUB = 0 . ; done = false ; } } / / Save off tick mark spacing . limData . quantum = r ; if ( DEBUG ) { System . out . println ( " limData . lb = " + limData . lb + " , limData . ub = " + limData . ub + " , limData . quantum = " + limData . quantum ) ; } return limData ; }
void test4 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; AxisLimitData axisLimitData0 = linearAxisScale0 . findGoodLimits ( 648 . 2721064859757 , ( - 1483 . 1460909595176 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AxisLimitData findGoodLimits ( double aLB , double aUB ) { / / The lower limit and tick mark spacing being calculated . double s = 0 . , r = 0 . ; / / Make sure we don't have a degenerate case . if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { if ( aUB > 0 . ) { aUB = 2 . * aUB ; aLB = 0 . ; } else if ( aLB < 0 ) { aLB = 2 . * aLB ; aUB = 0 . ; } if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { aLB = lowerBounds ( ) ; aUB = upperBounds ( ) ; } } if ( DEBUG ) { System . out . println ( "In findGoodLimits ( ) . . . " ) ; System . out . println ( " aLB = " + aLB + " , aUB = " + aUB ) ; } / / Object used to return results . AxisLimitData limData = new AxisLimitData ( ) ; boolean done = false ; while ( ! done ) { done = true ; double ub = aUB ; double lb = aLB ; double delta = ub - lb ; / / Scale up by s , a power of 10 , so range ( delta ) exceeds 1 . s = 1 . ; while ( delta * s < 10 . ) s * = 10 . ; / / Find power of 10 quantum , r , such that delta / 10 < = r < delta . r = 1 . / s ; while ( 10 . * r < delta ) r * = 10 . ; / / Set r = ( 1 , 2 , 5 ) * 10 * * n so that 3 - 5 quanta cover range . if ( r > = delta / 2 . ) r / = 2 . ; else if ( r < delta / 5 . ) r * = 2 . ; limData . ub = modceil ( ub , r ) ; limData . lb = modfloor ( lb , r ) ; / / If lower bound is < = r and > 0 , then repeat . if ( limData . lb < = r & & limData . lb > 0 . ) { aLB = 0 . ; done = false ; / / If upper bound > = - r and < 0 , then repeat . } else if ( limData . ub > = - r & & limData . ub < 0 . ) { aUB = 0 . ; done = false ; } } / / Save off tick mark spacing . limData . quantum = r ; if ( DEBUG ) { System . out . println ( " limData . lb = " + limData . lb + " , limData . ub = " + limData . ub + " , limData . quantum = " + limData . quantum ) ; } return limData ; }
void test5 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; AxisLimitData axisLimitData0 = linearAxisScale0 . findGoodLimits ( ( - 1940 . 3506854235914 ) , ( - 825 . 3165658814831 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AxisLimitData findGoodLimits ( double aLB , double aUB ) { / / The lower limit and tick mark spacing being calculated . double s = 0 . , r = 0 . ; / / Make sure we don't have a degenerate case . if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { if ( aUB > 0 . ) { aUB = 2 . * aUB ; aLB = 0 . ; } else if ( aLB < 0 ) { aLB = 2 . * aLB ; aUB = 0 . ; } if ( Math . abs ( aUB - aLB ) < = 0 . 000001 ) { aLB = lowerBounds ( ) ; aUB = upperBounds ( ) ; } } if ( DEBUG ) { System . out . println ( "In findGoodLimits ( ) . . . " ) ; System . out . println ( " aLB = " + aLB + " , aUB = " + aUB ) ; } / / Object used to return results . AxisLimitData limData = new AxisLimitData ( ) ; boolean done = false ; while ( ! done ) { done = true ; double ub = aUB ; double lb = aLB ; double delta = ub - lb ; / / Scale up by s , a power of 10 , so range ( delta ) exceeds 1 . s = 1 . ; while ( delta * s < 10 . ) s * = 10 . ; / / Find power of 10 quantum , r , such that delta / 10 < = r < delta . r = 1 . / s ; while ( 10 . * r < delta ) r * = 10 . ; / / Set r = ( 1 , 2 , 5 ) * 10 * * n so that 3 - 5 quanta cover range . if ( r > = delta / 2 . ) r / = 2 . ; else if ( r < delta / 5 . ) r * = 2 . ; limData . ub = modceil ( ub , r ) ; limData . lb = modfloor ( lb , r ) ; / / If lower bound is < = r and > 0 , then repeat . if ( limData . lb < = r & & limData . lb > 0 . ) { aLB = 0 . ; done = false ; / / If upper bound > = - r and < 0 , then repeat . } else if ( limData . ub > = - r & & limData . ub < 0 . ) { aUB = 0 . ; done = false ; } } / / Save off tick mark spacing . limData . quantum = r ; if ( DEBUG ) { System . out . println ( " limData . lb = " + limData . lb + " , limData . ub = " + limData . ub + " , limData . quantum = " + limData . quantum ) ; } return limData ; }
void test6 ( ) throws Throwable { LinearAxisScale linearAxisScale0 = new LinearAxisScale ( ) ; TickMarkData tickMarkData0 = linearAxisScale0 . calcTickMarks ( ( - 1 . 0 ) , 0 . 1 , ( - 33 . 430541397886884 ) , ( - 1688 . 6533110211037 ) , ( - 1688 . 6533110211037 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TickMarkData calcTickMarks ( double quantum , double aLB , double aUB , double xA , double xB ) { double xl = 0 ; double xu = 0 ; double q = quantum ; if ( q > 0 . ) { xl = modfloor ( aLB , q ) ; xu = modfloor ( aUB - q / 10 . , q / 5 . ) + q / 10 . ; } else { xl = modfloor ( aUB , q ) ; xu = modfloor ( aLB + q / 10 . , q / 5 . ) - q / 10 . ; } / / Determine the number of tick marks . int xn = ( int ) ( ( xu - xl ) / ( Math . abs ( quantum ) / 5 . ) ) ; if ( DEBUG ) { System . out . println ( "In calcTickMarks ( ) . . . " ) ; System . out . println ( " quantum = " + quantum + " , aLB = " + aLB + " , aUB = " + aUB ) ; System . out . println ( " xA = " + xA + " , xB = " + xB ) ; System . out . println ( " xl = " + xl + " , xu = " + xu ) ; System . out . println ( " xn = " + xn ) ; } / / Allocate memory for tick mark arrays . int [ ] mark = new int [ xn ] ; int [ ] lmark = new int [ xn ] ; float [ ] markValue = new float [ xn ] ; xn = 0 ; int i = 0 ; for ( double x = xl ; x < = xu ; x + = Math . abs ( quantum ) / 5 . , + + i ) { / / Bounds check . if ( q > 0 . ) if ( x < = aLB | | x > = aUB ) continue ; if ( q < 0 . ) if ( x > = aLB | | x < = aUB ) continue ; / / Store tick mark . mark [ xn ] = ( int ) ( func ( x ) * xA + xB ) ; markValue [ xn ] = ( float ) x ; if ( i%5 ! = 0 ) / / Minor tick mark . lmark [ xn + + ] = PlotAxis . kTick ; else / / Major tick mark . lmark [ xn + + ] = 3 * PlotAxis . kTick ; } if ( DEBUG ) { System . out . println ( "Tick mark values : " ) ; int length = markValue . length ; for ( i = 0 ; i < length ; + + i ) System . out . print ( " " + markValue [ i ] ) ; System . out . println ( ) ; } / / Create a tick mark data object and pass it out . TickMarkData data = new TickMarkData ( ) ; data . mark = mark ; data . lmark = lmark ; data . markValue = markValue ; return data ; }
void test0 ( ) throws Throwable { SquareSymbol squareSymbol0 = new SquareSymbol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { BoxLRSymbol boxLRSymbol0 = new BoxLRSymbol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { ThinRect1Symbol thinRect1Symbol0 = new ThinRect1Symbol ( ) ; thinRect1Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; thinRect1Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { DiamondSymbol diamondSymbol0 = new DiamondSymbol ( ) ; diamondSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; diamondSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test5 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; LinearAxisScale linearAxisScale0 = ( LinearAxisScale ) plotYAxis0 . getScale ( ) ; Locale locale0 = JComponent . getDefaultLocale ( ) ; DecimalFormat decimalFormat0 = ( DecimalFormat ) NumberFormat . getNumberInstance ( locale0 ) ; PlotYAxis plotYAxis1 = new PlotYAxis ( "P%BZvG ? 4G%FR ] , ( " , ( PlotAxisScale ) linearAxisScale0 , ( NumberFormat ) decimalFormat0 , 1016 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PlotYAxis ( ) { }
void test6 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; plotYAxis0 . manualLowerBounds ( true ) ; PlotRunList plotRunList0 = new PlotRunList ( ) ; plotYAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test7 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; plotYAxis0 . manualUpperBounds ( true ) ; plotYAxis0 . setAxisBounds ( ( PlotRunList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test8 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; PlotRun [ ] plotRunArray0 = new PlotRun [ 7 ] ; PlotRun plotRun0 = new PlotRun ( ) ; plotRunArray0 [ 0 ] = plotRun0 ; plotRunArray0 [ 1 ] = plotRun0 ; plotRunArray0 [ 2 ] = plotRun0 ; plotRunArray0 [ 3 ] = plotRun0 ; plotRunArray0 [ 4 ] = plotRunArray0 [ 1 ] ; plotRunArray0 [ 5 ] = plotRunArray0 [ 0 ] ; plotRunArray0 [ 6 ] = plotRunArray0 [ 2 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; plotYAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test10 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; PlotRun [ ] plotRunArray0 = new PlotRun [ 7 ] ; PlotRun plotRun0 = new PlotRun ( ) ; plotRunArray0 [ 0 ] = plotRun0 ; PlotDatum [ ] plotDatumArray0 = new PlotDatum [ 1 ] ; PlotDatum plotDatum0 = new PlotDatum ( 18 . 42840792332231 , 18 . 42840792332231 , false ) ; plotDatumArray0 [ 0 ] = plotDatum0 ; PlotRun plotRun1 = new PlotRun ( plotDatumArray0 ) ; plotRunArray0 [ 1 ] = plotRun1 ; plotRunArray0 [ 2 ] = plotRunArray0 [ 0 ] ; plotRunArray0 [ 3 ] = plotRunArray0 [ 1 ] ; plotRunArray0 [ 4 ] = plotRunArray0 [ 1 ] ; plotRunArray0 [ 5 ] = plotRunArray0 [ 3 ] ; plotRunArray0 [ 6 ] = plotRunArray0 [ 4 ] ; PlotRunList plotRunList0 = new PlotRunList ( plotRunArray0 ) ; plotYAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test11 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; HashSet < PlotRun > hashSet0 = new HashSet < PlotRun > ( ) ; PlotDatum [ ] plotDatumArray0 = new PlotDatum [ 4 ] ; PlotDatum plotDatum0 = new PlotDatum ( 0 . 0 , ( - 1 . 0 ) , false ) ; plotDatumArray0 [ 0 ] = plotDatum0 ; plotDatumArray0 [ 1 ] = plotDatumArray0 [ 0 ] ; plotDatumArray0 [ 2 ] = plotDatum0 ; plotDatumArray0 [ 3 ] = plotDatum0 ; PlotRun plotRun0 = new PlotRun ( plotDatumArray0 ) ; hashSet0 . add ( plotRun0 ) ; PlotRunList plotRunList0 = new PlotRunList ( ( Collection ) hashSet0 ) ; plotYAxis0 . setAxisBounds ( plotRunList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String lowerBoundsAsString ( ) { return nf . format ( ( float ) aLB ) ; }
void test12 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; PlotYAxis . RotateFilter plotYAxis_RotateFilter0 = plotYAxis0 . new RotateFilter ( 1638 . 94198070943 ) ; JSlider jSlider0 = new JSlider ( 1 , 795 ) ; DirectColorModel directColorModel0 = ( DirectColorModel ) jSlider0 . getColorModel ( ) ; byte [ ] byteArray0 = new byte [ 7 ] ; plotYAxis_RotateFilter0 . setPixels ( 0 , 1 , 0 , 1 , ( ColorModel ) directColorModel0 , byteArray0 , ( int ) ( byte ) ( - 12 ) , 786 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PlotYAxis ( ) { }
void test15 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; PlotYAxis . RotateFilter plotYAxis_RotateFilter0 = plotYAxis0 . new RotateFilter ( ( - 24 . 83147072152029 ) ) ; JTableHeader jTableHeader0 = new JTableHeader ( ) ; DirectColorModel directColorModel0 = ( DirectColorModel ) jTableHeader0 . getColorModel ( ) ; int [ ] intArray0 = new int [ 2 ] ; plotYAxis_RotateFilter0 . setPixels ( 1901 , 1901 , ( - 553 ) , ( - 553 ) , ( ColorModel ) directColorModel0 , intArray0 , ( - 553 ) , 321 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PlotYAxis ( ) { }
void test0 ( ) throws Throwable { BoxURSymbol boxURSymbol0 = new BoxURSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 1861 . 3454653652368 ) , 298 . 15 , false , ( PlotSymbol ) boxURSymbol0 ) ; TabLSymbol tabLSymbol0 = new TabLSymbol ( ) ; plotDatum0 . setPlotSymbol ( ( PlotSymbol ) tabLSymbol0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test1 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 1023 . 4339357697838 ) , ( - 1023 . 4339357697838 ) , false , ( PlotSymbol ) null ) ; plotDatum0 . getPlotSymbol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getX ( ) { return x ; }
void test2 ( ) throws Throwable { BoxURSymbol boxURSymbol0 = new BoxURSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 1861 . 3454653652368 ) , 298 . 15 , false , ( PlotSymbol ) boxURSymbol0 ) ; double double0 = plotDatum0 . getY ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test3 ( ) throws Throwable { BoxURSymbol boxURSymbol0 = new BoxURSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 1861 . 3454653652368 ) , 298 . 15 , false , ( PlotSymbol ) boxURSymbol0 ) ; boolean boolean0 = plotDatum0 . hasErrorBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connected ( ) { return conFlg ; }
void test4 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 1023 . 4339357697838 ) , ( - 1023 . 4339357697838 ) , false , ( PlotSymbol ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test5 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 1023 . 4339357697838 ) , ( - 1023 . 4339357697838 ) , false , ( PlotSymbol ) null ) ; double double0 = plotDatum0 . getYError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test6 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 1023 . 4339357697838 ) , ( - 1023 . 4339357697838 ) , false , ( PlotSymbol ) null ) ; double double0 = plotDatum0 . getX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test7 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( 0 . 1 , 1546 . 9490896998946 , false ) ; plotDatum0 . setX ( ( - 1148 . 4510527400234 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test8 ( ) throws Throwable { BoxURSymbol boxURSymbol0 = new BoxURSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 1861 . 3454653652368 ) , 298 . 15 , false , ( PlotSymbol ) boxURSymbol0 ) ; Color color0 = plotDatum0 . getLineColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connected ( ) { return conFlg ; }
void test9 ( ) throws Throwable { SquareSymbol squareSymbol0 = new SquareSymbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( ( - 1 . 0 ) , ( - 1470 . 9394516069547 ) , true , ( PlotSymbol ) squareSymbol0 ) ; boolean boolean0 = plotDatum0 . connected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test10 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 1023 . 4339357697838 ) , ( - 1023 . 4339357697838 ) , false , ( PlotSymbol ) null ) ; plotDatum0 . setY ( ( - 1869 . 6384348003546 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connected ( ) { return conFlg ; }
void test11 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 368 . 7514334229566 ) , ( - 1 . 0 ) , true , ( PlotSymbol ) null ) ; plotDatum0 . setYError ( 1597 . 396237024517 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getX ( ) { return x ; }
void test12 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( ( - 1023 . 4339357697838 ) , ( - 1023 . 4339357697838 ) , false , ( PlotSymbol ) null ) ; plotDatum0 . setYError ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connected ( ) { return conFlg ; }
void test13 ( ) throws Throwable { RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( 0 . 0 , 0 . 0 , false , ( PlotSymbol ) rTriangle1Symbol0 ) ; plotDatum0 . setLineColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test14 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( 0 . 0 , 100 . 0 , true ) ; Color color0 = Color . getHSBColor ( 120 . 313385F , 120 . 313385F , 120 . 313385F ) ; plotDatum0 . setLineColor ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getY ( ) { return y ; }
void test15 ( ) throws Throwable { PlotDatum plotDatum0 = new PlotDatum ( 0 . 0 , 0 . 0 , true ) ; PlotDatum plotDatum1 = ( PlotDatum ) plotDatum0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test16 ( ) throws Throwable { Triangle1Symbol triangle1Symbol0 = new Triangle1Symbol ( ) ; PlotDatum plotDatum0 = new PlotDatum ( 0 . 0 , 0 . 0 , false , ( PlotSymbol ) triangle1Symbol0 ) ; PlotDatum plotDatum1 = ( PlotDatum ) plotDatum0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrorBar ( ) { return errBarFlg ; }
void test0 ( ) throws Throwable { TabUpSymbol tabUpSymbol0 = new TabUpSymbol ( ) ; tabUpSymbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; tabUpSymbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( ( - 1699 . 840585543298 ) ) ; double [ ] doubleArray0 = new double [ 5 ] ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 0 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevelIndex ( ) { return levelIndex ; }
void test1 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( ( - 1699 . 840585543298 ) ) ; double [ ] doubleArray0 = new double [ 5 ] ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 0 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevelIndex ( ) { return levelIndex ; }
void test2 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 1213 . 365099877001 ) ; double [ ] doubleArray0 = new double [ 3 ] ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 1 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return closed ; }
void test3 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 548 . 5485191027416 ) ; double [ ] doubleArray0 = new double [ 4 ] ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 0 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return closed ; }
void test4 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 0 . 0 ) ; double [ ] doubleArray0 = new double [ 7 ] ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 781 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevelIndex ( ) { return levelIndex ; }
void test5 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( ( - 1699 . 840585543298 ) ) ; double [ ] doubleArray0 = new double [ 5 ] ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 0 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevelIndex ( ) { return levelIndex ; }
void test6 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( ( - 1699 . 840585543298 ) ) ; double [ ] doubleArray0 = new double [ 5 ] ; doubleArray0 [ 0 ] = ( - 1699 . 840585543298 ) ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 0 , doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return closed ; }
void test7 ( ) throws Throwable { ContourAttrib contourAttrib0 = new ContourAttrib ( 0 . 0 ) ; double [ ] doubleArray0 = new double [ 3 ] ; double [ ] doubleArray1 = new double [ 4 ] ; doubleArray1 [ 0 ] = 1 . 0 ; ContourPath contourPath0 = new ContourPath ( contourAttrib0 , 623 , doubleArray0 , doubleArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevelIndex ( ) { return levelIndex ; }
void test0 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; plotXAxis0 . manualLowerBounds ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test1 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; plotXAxis0 . getLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test2 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; PlotXAxis plotXAxis1 = ( PlotXAxis ) plotXAxis0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test3 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; int int0 = plotYAxis0 . scaleCoord ( ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test4 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; LinearAxisScale linearAxisScale0 = ( LinearAxisScale ) plotXAxis0 . getScale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test5 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; plotXAxis0 . setTickStepSize ( ( - 1894 . 990752000015 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTickStepSize ( ) { return quantum ; }
void test6 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; plotYAxis0 . setLowerBounds ( 0 . 239 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridStyle ( ) { return gridStyle ; }
void test7 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; double double0 = plotYAxis0 . getUpperBounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test8 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; double double0 = plotYAxis0 . getLowerBounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test9 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; String string0 = plotYAxis0 . lowerBoundsAsString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridStyle ( ) { return gridStyle ; }
void test10 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; plotXAxis0 . setGridStyle ( ( - 1587 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridStyle ( ) { return gridStyle ; }
void test11 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; plotYAxis0 . setLabel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test12 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; int int0 = plotXAxis0 . getGridStyle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test13 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; plotYAxis0 . manualTickStepSize ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test14 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; double double0 = plotYAxis0 . getTickStepSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test15 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test16 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; String string0 = plotYAxis0 . upperBoundsAsString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBounds ( ) { return aLB ; }
void test17 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; DecimalFormat decimalFormat0 = ( DecimalFormat ) plotXAxis0 . getNumberFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test18 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; LinearAxisScale linearAxisScale0 = ( LinearAxisScale ) plotXAxis0 . getScale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String lowerBoundsAsString ( ) { return nf . format ( ( float ) aLB ) ; }
void test19 ( ) throws Throwable { PlotYAxis plotYAxis0 = new PlotYAxis ( ) ; plotYAxis0 . setScale ( ( PlotAxisScale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upperBoundsAsString ( ) { return nf . format ( ( float ) aUB ) ; }
void test20 ( ) throws Throwable { PlotXAxis plotXAxis0 = new PlotXAxis ( ) ; ChoiceFormat choiceFormat0 = new ChoiceFormat ( "C / ? " ) ; plotXAxis0 . setNumberFormat ( ( NumberFormat ) choiceFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBounds ( ) { return aUB ; }
void test0 ( ) throws Throwable { Triangle3Symbol triangle3Symbol0 = new Triangle3Symbol ( ) ; triangle3Symbol0 . generatePoints ( ( - 2016 ) , ( - 2016 ) ) ; triangle3Symbol0 . generatePoints ( ( - 1209 ) , 198 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { XSymbol xSymbol0 = new XSymbol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { CircleSymbol circleSymbol0 = new CircleSymbol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return width ; }
void test0 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 4 ] ; double [ ] doubleArray1 = new double [ 7 ] ; doubleArray1 [ 1 ] = ( - 334 . 99624780450307 ) ; doubleArray0 [ 0 ] = doubleArray1 ; double [ ] doubleArray2 = new double [ 7 ] ; doubleArray2 [ 1 ] = 1 . 0 ; doubleArray0 [ 1 ] = doubleArray2 ; DecimalFormat decimalFormat0 = ( DecimalFormat ) NumberFormat . getIntegerInstance ( ) ; ContourPlot contourPlot0 = new ContourPlot ( doubleArray0 , doubleArray0 , doubleArray0 , 98 , false , "" , "" , "" , ( NumberFormat ) decimalFormat0 , ( NumberFormat ) decimalFormat0 ) ; JEditorPane jEditorPane0 = new JEditorPane ( ) ; ColorUIResource colorUIResource0 = ( ColorUIResource ) jEditorPane0 . getBackground ( ) ; contourPlot0 . colorizeContours ( ( Color ) colorUIResource0 , ( Color ) colorUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return plotTitle ; }
void test1 ( ) throws Throwable { ContourPlot contourPlot0 = new ContourPlot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return plotTitle ; }
void test2 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 2 ] [ 4 ] ; double [ ] doubleArray1 = new double [ 7 ] ; doubleArray1 [ 1 ] = ( - 334 . 99624780450307 ) ; doubleArray0 [ 0 ] = doubleArray1 ; double [ ] doubleArray2 = new double [ 7 ] ; doubleArray2 [ 2 ] = ( - 54 . 530443190662766 ) ; doubleArray0 [ 1 ] = doubleArray2 ; DecimalFormat decimalFormat0 = ( DecimalFormat ) NumberFormat . getIntegerInstance ( ) ; ContourPlot contourPlot0 = new ContourPlot ( doubleArray0 , doubleArray0 , doubleArray0 , 98 , false , "" , "" , "" , ( NumberFormat ) decimalFormat0 , ( NumberFormat ) decimalFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) { PlotSymbol newObject = null ; try { / / Make a shallow copy of this object . newObject = ( PlotSymbol ) super . clone ( ) ; / / There are now deep data structures to clone . } catch ( CloneNotSupportedException e ) { / / Can't happen . e . printStackTrace ( ) ; } / / Output the newly cloned object . return newObject ; }
