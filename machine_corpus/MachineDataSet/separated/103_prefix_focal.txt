void test2 ( ) throws Throwable { SweetHome3D sweetHome3D0 = new SweetHome3D ( ) ; HomeFileRecorder homeFileRecorder0 = ( HomeFileRecorder ) sweetHome3D0 . getHomeRecorder ( ) ; HomeFileRecorder homeFileRecorder1 = ( HomeFileRecorder ) sweetHome3D0 . getHomeRecorder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeRecorder getHomeRecorder ( ) { / / Initialize homeRecorder lazily if ( this . homeRecorder = = null ) { this . homeRecorder = new HomeFileRecorder ( ) ; } return this . homeRecorder ; }
void test3 ( ) throws Throwable { SweetHome3D sweetHome3D0 = new SweetHome3D ( ) ; HomeRecorder . Type homeRecorder_Type0 = HomeRecorder . Type . DEFAULT ; HomeFileRecorder homeFileRecorder0 = ( HomeFileRecorder ) sweetHome3D0 . getHomeRecorder ( homeRecorder_Type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeRecorder getHomeRecorder ( ) { / / Initialize homeRecorder lazily if ( this . homeRecorder = = null ) { this . homeRecorder = new HomeFileRecorder ( ) ; } return this . homeRecorder ; }
void test4 ( ) throws Throwable { SweetHome3D sweetHome3D0 = new SweetHome3D ( ) ; HomeRecorder . Type homeRecorder_Type0 = HomeRecorder . Type . COMPRESSED ; HomeFileRecorder homeFileRecorder0 = ( HomeFileRecorder ) sweetHome3D0 . getHomeRecorder ( homeRecorder_Type0 ) ; HomeFileRecorder homeFileRecorder1 = ( HomeFileRecorder ) sweetHome3D0 . getHomeRecorder ( homeRecorder_Type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeRecorder getHomeRecorder ( ) { / / Initialize homeRecorder lazily if ( this . homeRecorder = = null ) { this . homeRecorder = new HomeFileRecorder ( ) ; } return this . homeRecorder ; }
void test0 ( ) throws Throwable { MacOSXConfiguration macOSXConfiguration0 = new MacOSXConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; AllPermission allPermission0 = new AllPermission ( ) ; PermissionCollection permissionCollection0 = allPermission0 . newPermissionCollection ( ) ; ProtectionDomain protectionDomain0 = new ProtectionDomain ( ( CodeSource ) null , permissionCollection0 ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 1 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 2 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 3 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 4 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 5 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 6 ] = "q9N s . 152 < < OzGR ] " ; stringArray0 [ 7 ] = "q9N s . 152 < < OzGR ] " ; ExtensionsClassLoader extensionsClassLoader0 = new ExtensionsClassLoader ( classLoader0 , protectionDomain0 , stringArray0 , stringArray0 ) ; String string0 = extensionsClassLoader0 . findLibrary ( "q9N s . 152 < < OzGR ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String findLibrary ( String libname ) { return ( String ) this . extensionDlls . get ( libname ) ; }
void test1 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; URL uRL0 = uRLContent0 . getURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URL getURL ( ) { return this . url ; }
void test3 ( ) throws Throwable { URL uRL0 = new URL ( "jar" , "jar" , "jar" ) ; URLContent uRLContent0 = new URLContent ( uRL0 ) ; String string0 = uRLContent0 . getJAREntryName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJAREntryName ( ) { if ( ! isJAREntry ( ) ) { throw new IllegalStateException ( "Content isn't a JAR entry" ) ; } String file = this . url . getFile ( ) ; return file . substring ( file . indexOf ( ' ! ' ) + 2 ) ; }
void test5 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; Object object0 = new Object ( ) ; boolean boolean0 = uRLContent0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test6 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; URLContent uRLContent1 = new URLContent ( ( URL ) null ) ; boolean boolean0 = uRLContent0 . equals ( ( Object ) uRLContent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test1 ( ) throws Throwable { boolean boolean0 = OperatingSystem . isLinux ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLinux ( ) { return System . getProperty ( "os . name" ) . startsWith ( "Linux" ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = OperatingSystem . isMacOSXLeopardOrSuperior ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMacOSXLeopardOrSuperior ( ) { / / Just need to test is OS version is different of 10 . 4 because Sweet Home 3D / / isn't supported under Mac OS X versions previous to 10 . 4 return isMacOSX ( ) & & ! System . getProperty ( "os . version" ) . startsWith ( "10 . 4" ) ; }
void test0 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiPartResource ( ) { return this . multiPartResource ; }
void test1 ( ) throws Throwable { Class < ? > class0 = ResourceURLContent . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiPartResource ( ) { return this . multiPartResource ; }
void test3 ( ) throws Throwable { Class < ? > class0 = ResourceURLContent . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; URL uRL0 = resourceURLContent0 . getURL ( ) ; URL [ ] uRLArray0 = new URL [ 10 ] ; uRLArray0 [ 0 ] = uRL0 ; URLClassLoader uRLClassLoader0 = new URLClassLoader ( uRLArray0 ) ; ResourceURLContent resourceURLContent1 = new ResourceURLContent ( ( ClassLoader ) uRLClassLoader0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJAREntry ( ) { return "jar" . equals ( this . url . getProtocol ( ) ) ; }
void test0 ( ) throws Throwable { CollectionEvent . Type collectionEvent_Type0 = CollectionEvent . Type . ADD ; CollectionEvent < String > collectionEvent0 = new CollectionEvent < String > ( ( Object ) "ADD" , "iNf = " , ( CollectionEvent . Type ) collectionEvent_Type0 ) ; String string0 = collectionEvent0 . getItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return this . index ; }
void test1 ( ) throws Throwable { EventObject eventObject0 = new EventObject ( ( Object ) " / - 0nvyfK , b$ ) D" ) ; CollectionEvent . Type collectionEvent_Type0 = CollectionEvent . Type . ADD ; CollectionEvent < Object > collectionEvent0 = new CollectionEvent < Object > ( ( Object ) eventObject0 , ( Object ) "ADD" , 0 , ( CollectionEvent . Type ) collectionEvent_Type0 ) ; CollectionEvent < EventObject > collectionEvent1 = new CollectionEvent < EventObject > ( ( Object ) collectionEvent0 , eventObject0 , ( CollectionEvent . Type ) collectionEvent_Type0 ) ; collectionEvent1 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return this . index ; }
void test2 ( ) throws Throwable { Object object0 = new Object ( ) ; CollectionEvent . Type collectionEvent_Type0 = CollectionEvent . Type . ADD ; CollectionEvent < String > collectionEvent0 = new CollectionEvent < String > ( object0 , "" , 0 , ( CollectionEvent . Type ) collectionEvent_Type0 ) ; int int0 = collectionEvent0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return this . index ; }
void test0 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1 , 1 . 0F , ( - 1959 . 994F ) , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , true , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . getShininess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test1 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1340 ) ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , 0 . 0F , ( - 1193 . 9607F ) , ( - 1 . 0F ) , 800 . 0329F , true , 1417 . 7587F , 800 . 0329F , sashArray0 , floatArray0 , ( String ) null , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test2 ( ) throws Throwable { Integer integer0 = new Integer ( 0 ) ; Sash [ ] sashArray0 = new Sash [ 5 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 9 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) null , ( Content ) null , 424 . 31317F , 0 . 0F , ( - 955 . 54095F ) , 1548 . 7609F , false , 0 . 0F , 0 . 0F , sashArray0 , integer0 , floatArray0 , false , ( - 2 . 3392506F ) , false ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test3 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1903 , ( float ) 0 , 0 . 0F , ( - 1326 . 2432F ) , true , lightSourceArray0 , floatArray0 , "1kX@y^l# ] pjZ } Y" , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture ( ( PieceOfFurniture ) homeLight0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test4 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . move ( ( - 1 . 0F ) , ( - 1727 . 5714F ) ) ; boolean boolean0 = homeDoorOrWindow0 . isPointAt ( 387 . 07587F , 0 . 3926991F , ( float ) 1103L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test5 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; Sash [ ] sashArray0 = new Sash [ 10 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , 7 . 3554025F , ( - 1007 . 13837F ) , 1 . 0F , 651 . 2375F , true , ( float ) 1 , 0 . 3926991F , sashArray0 , floatArray0 , "" , true , false , true , ( BigDecimal ) null , ( BigDecimal ) null ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . intersectsRectangle ( 0 . 0F , 576 . 6024F , ( - 1041 . 4089F ) , ( - 1756 . 1768F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAngle ( ) { return this . angle ; }
void test6 ( ) throws Throwable { HomePieceOfFurniture . SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture . SortableProperty . NAME ; Comparator < HomePieceOfFurniture > comparator0 = HomePieceOfFurniture . getFurnitureComparator ( homePieceOfFurniture_SortableProperty0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator < HomePieceOfFurniture > getFurnitureComparator ( SortableProperty property ) { return SORTABLE_PROPERTY_COMPARATORS . get ( property ) ; }
void test7 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1903 , ( float ) 0 , 0 . 0F , ( - 1326 . 2432F ) , true , lightSourceArray0 , floatArray0 , "1kX@y^l# ] pjZ } Y" , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test8 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setNameVisible ( true ) ; homeDoorOrWindow0 . setNameVisible ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameVisible ( ) { return this . nameVisible ; }
void test9 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setNameXOffset ( 1805 . 6508F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test10 ( ) throws Throwable { float float0 = ( - 1007 . 13837F ) ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; Sash [ ] sashArray0 = new Sash [ 10 ] ; String [ ] stringArray0 = new String [ 7 ] ; Long long0 = Long . valueOf ( ( long ) 1903 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "RQ4u2qfF" , "" , "" , stringArray0 , long0 , ( Float ) 0 . 0F , ( Content ) null , ( Content ) null , ( Content ) null , 1634 . 9315F , 236 . 15144F , 0 . 0F , 1023 . 0714F , false , 0 . 0F , float0 , sashArray0 , floatArray0 , "" , true , false , false , bigDecimal0 , bigDecimal0 , "" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setNameYOffset ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test11 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; LightSource lightSource0 = new LightSource ( 0 . 0F , 1 . 0F , ( - 1007 . 13837F ) , 0 , ( Float ) 0 . 0F ) ; lightSourceArray0 [ 0 ] = lightSource0 ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; Float float0 = lightSourceArray0 [ 0 ] . getDiameter ( ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; String [ ] stringArray0 = new String [ 7 ] ; Long long0 = Long . valueOf ( ( long ) 1903 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "RQ4u2qfF" , "" , "" , stringArray0 , long0 , ( Float ) 0 . 0F , ( Content ) null , ( Content ) null , ( Content ) null , 1634 . 9315F , 0 . 5F , 0 . 0F , 1023 . 0714F , false , 0 . 0F , ( float ) float0 , sashArray0 , floatArray0 , "" , true , false , false , bigDecimal0 , bigDecimal0 , "" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setNameYOffset ( 0 . 5F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test12 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1340 ) ) ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "x4p" , "x4p" , "x4p" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , ( - 1 . 0F ) , false , floatArray0 , "x4p" , false , bigDecimal0 , bigDecimal0 ) ; HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture ( ( PieceOfFurniture ) catalogPieceOfFurniture0 ) ; TextStyle textStyle0 = new TextStyle ( 0 . 0F ) ; homePieceOfFurniture0 . setNameStyle ( textStyle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test13 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; Sash [ ] sashArray0 = new Sash [ 10 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , 7 . 3554025F , ( - 1007 . 13837F ) , 1 . 0F , 651 . 2375F , true , ( float ) 1 , 0 . 3926991F , sashArray0 , floatArray0 , "" , true , false , true , ( BigDecimal ) null , ( BigDecimal ) null ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getDepth ( ) { return this . depth ; }
void test15 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setDepth ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test16 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; LightSource lightSource0 = new LightSource ( 0 . 0F , 1 . 0F , ( - 1007 . 13837F ) , 0 , ( Float ) 0 . 0F ) ; lightSourceArray0 [ 0 ] = lightSource0 ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; Float float0 = lightSourceArray0 [ 0 ] . getDiameter ( ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; String [ ] stringArray0 = new String [ 7 ] ; Long long0 = Long . valueOf ( ( long ) 1903 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "RQ4u2qfF" , "" , "" , stringArray0 , long0 , ( Float ) 0 . 0F , ( Content ) null , ( Content ) null , ( Content ) null , 1634 . 9315F , 0 . 5F , 0 . 0F , 1023 . 0714F , false , 0 . 0F , ( float ) float0 , sashArray0 , floatArray0 , "" , true , false , false , bigDecimal0 , bigDecimal0 , "" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setHeight ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test17 ( ) throws Throwable { TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 9 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 9 ] ; BigDecimal bigDecimal0 = BigDecimal . ZERO ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "9yweK$ / * T" , "" , "9yweK$ / * T" , ( Content ) temporaryURLContent0 , ( Content ) temporaryURLContent0 , ( Content ) temporaryURLContent0 , ( - 1711 . 3956F ) , ( - 1711 . 3956F ) , ( - 701 . 9607F ) , ( - 701 . 9607F ) , false , ( - 1800 . 9596F ) , ( - 1711 . 3956F ) , sashArray0 , floatArray0 , "" , false , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; float float0 = homeDoorOrWindow0 . getGroundElevation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test18 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 0 , 1 . 0F , ( - 1959 . 994F ) , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , true , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setElevation ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test19 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1 , 1 . 0F , ( - 1959 . 994F ) , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , true , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setElevation ( 1903 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test20 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 8 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 7 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , 0 . 3926991F , 1 . 0F , true , 0 . 0F , 1653 . 2068F , sashArray0 , floatArray0 , ( String ) null , false , false , false , bigDecimal0 , bigDecimal0 , ( String ) null ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test21 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1903 , ( float ) 0 , 0 . 0F , ( - 1326 . 2432F ) , true , lightSourceArray0 , floatArray0 , "1kX@y^l# ] pjZ } Y" , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test22 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; LightSource lightSource0 = new LightSource ( 0 . 0F , 1 . 0F , ( - 1007 . 13837F ) , 0 , ( Float ) 0 . 0F ) ; lightSourceArray0 [ 0 ] = lightSource0 ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; Float float0 = lightSourceArray0 [ 0 ] . getDiameter ( ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; String [ ] stringArray0 = new String [ 7 ] ; Long long0 = Long . valueOf ( ( long ) 1903 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "RQ4u2qfF" , "" , "" , stringArray0 , long0 , ( Float ) 0 . 0F , ( Content ) null , ( Content ) null , ( Content ) null , 1634 . 9315F , 0 . 5F , 0 . 0F , 1023 . 0714F , false , 0 . 0F , ( float ) float0 , sashArray0 , floatArray0 , "" , true , false , false , bigDecimal0 , bigDecimal0 , "" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setMovable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test24 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1340 ) ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , 0 . 0F , ( - 1193 . 9607F ) , ( - 1 . 0F ) , 800 . 0329F , true , 1417 . 7587F , 800 . 0329F , sashArray0 , floatArray0 , ( String ) null , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; Integer integer0 = new Integer ( 0 ) ; homeDoorOrWindow0 . setColor ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test25 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; Integer integer0 = new Integer ( 0 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( ( String ) null , ( Content ) null , ( Content ) null , ( - 15 . 502981F ) , ( - 338 . 23535F ) , ( - 731 . 4557F ) , 0 . 0F , false , 0 . 0F , 1915 . 1782F , sashArray0 , integer0 , floatArray0 , false , 0 . 0F , false ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setColor ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getDepth ( ) { return this . depth ; }
void test26 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 4 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; CatalogLight catalogLight0 = new CatalogLight ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , ( - 1 . 0F ) , 0 . 3926991F , ( float ) 0L , 3 . 4028235E38F , false , lightSourceArray0 , floatArray0 , ( String ) null , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setTexture ( ( HomeTexture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getDepth ( ) { return this . depth ; }
void test27 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setShininess ( ( Float ) 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test28 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; LightSource lightSource0 = new LightSource ( 0 . 0F , 1 . 0F , ( - 1007 . 13837F ) , 0 , ( Float ) 0 . 0F ) ; lightSourceArray0 [ 0 ] = lightSource0 ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; Float float0 = lightSourceArray0 [ 0 ] . getDiameter ( ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; String [ ] stringArray0 = new String [ 7 ] ; Long long0 = Long . valueOf ( ( long ) 1903 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "RQ4u2qfF" , "" , "" , stringArray0 , long0 , ( Float ) 0 . 0F , ( Content ) null , ( Content ) null , ( Content ) null , 1634 . 9315F , 0 . 5F , 0 . 0F , 1023 . 0714F , false , 0 . 0F , ( float ) float0 , sashArray0 , floatArray0 , "" , true , false , false , bigDecimal0 , bigDecimal0 , "" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; BigDecimal bigDecimal1 = homeDoorOrWindow0 . getPriceValueAddedTaxIncluded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test29 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; Sash [ ] sashArray0 = new Sash [ 10 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , 0 . 3926991F , ( - 1007 . 13837F ) , 1 . 0F , 651 . 2375F , true , ( float ) 1 , 0 . 3926991F , sashArray0 , floatArray0 , "" , true , false , true , ( BigDecimal ) null , ( BigDecimal ) null ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . getPriceValueAddedTaxIncluded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test30 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 4 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; CatalogLight catalogLight0 = new CatalogLight ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , ( - 1 . 0F ) , ( float ) 0L , ( float ) 0L , 3 . 4028235E38F , false , lightSourceArray0 , floatArray0 , ( String ) null , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setY ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test31 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setAngle ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test32 ( ) throws Throwable { Integer integer0 = new Integer ( 0 ) ; Sash [ ] sashArray0 = new Sash [ 5 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 9 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) null , ( Content ) null , 424 . 31317F , 0 . 0F , ( - 955 . 54095F ) , 1548 . 7609F , false , 0 . 0F , 0 . 0F , sashArray0 , integer0 , floatArray0 , false , ( - 2 . 3392506F ) , false ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setModelMirrored ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModelMirrored ( ) { return this . modelMirrored ; }
void test33 ( ) throws Throwable { Integer integer0 = new Integer ( 0 ) ; Sash [ ] sashArray0 = new Sash [ 5 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 9 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) null , ( Content ) null , 424 . 31317F , 0 . 0F , ( - 955 . 54095F ) , 1548 . 7609F , false , 0 . 0F , 0 . 0F , sashArray0 , integer0 , floatArray0 , false , ( - 2 . 3392506F ) , false ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getGroundElevation ( ) { if ( this . level ! = null ) { return this . elevation + this . level . getElevation ( ) ; } else { return this . elevation ; } }
void test34 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 4 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; CatalogLight catalogLight0 = new CatalogLight ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , ( - 1 . 0F ) , 0 . 3926991F , ( float ) 0L , 3 . 4028235E38F , false , lightSourceArray0 , floatArray0 , ( String ) null , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; boolean boolean0 = homeLight0 . isBottomRightPointAt ( ( - 79 . 23698F ) , 637 . 8869F , ( - 1898 . 3877F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAngle ( ) { return this . angle ; }
void test35 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1903 , ( - 1007 . 13837F ) , 0 . 0F , ( - 1326 . 2432F ) , true , lightSourceArray0 , floatArray0 , "1kX@y^l# ] pjZ } Y" , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; boolean boolean0 = homeLight0 . containsPoint ( 1 . 0F , ( - 599 . 16833F ) , 1832 . 246F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test36 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 4 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; CatalogLight catalogLight0 = new CatalogLight ( ( String ) null , ( String ) null , ( String ) null , ( Content ) null , ( Content ) null , ( - 1 . 0F ) , 0 . 3926991F , ( float ) 0L , 3 . 4028235E38F , false , lightSourceArray0 , floatArray0 , ( String ) null , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . containsPoint ( 0 . 0F , ( - 832 . 2402F ) , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test37 ( ) throws Throwable { Class < ? > class0 = HomePieceOfFurniture . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; Sash [ ] sashArray0 = new Sash [ 9 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 4 ] ; RoundingMode roundingMode0 = RoundingMode . UNNECESSARY ; MathContext mathContext0 = new MathContext ( 0 , roundingMode0 ) ; BigDecimal bigDecimal0 = new BigDecimal ( 0 , mathContext0 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) ( - 665L ) , ( - 708 . 7892F ) , ( - 708 . 7892F ) , ( - 708 . 7892F ) , false , ( - 1808 . 8395F ) , 916 . 2118F , sashArray0 , floatArray0 , "" , false , false , false , bigDecimal0 , bigDecimal0 , "" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; boolean boolean0 = homeDoorOrWindow0 . isPointAt ( 0 . 0F , ( - 1 . 0F ) , ( - 777 . 98486F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test38 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 600000L ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "w" , "w" , "Us | `fnOE * ! + " , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , ( - 1324 . 2063F ) , 0 . 0F , true , 3 . 4028235E38F , 788 . 95465F , sashArray0 , floatArray0 , "Us | `fnOE * ! + " , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; boolean boolean0 = homeDoorOrWindow0 . isPointAt ( 387 . 07587F , 0 . 3926991F , ( float ) 1103L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test39 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1055L ) ) ; CatalogLight catalogLight0 = new CatalogLight ( "9I" , "9I" , "9I" , ( Content ) null , ( Content ) null , ( - 1007 . 13837F ) , ( - 1 . 551605F ) , ( - 1007 . 13837F ) , 1478 . 7521F , true , lightSourceArray0 , floatArray0 , "9I" , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; boolean boolean0 = homeLight0 . isTopRightPointAt ( ( - 1330 . 6226F ) , ( - 1330 . 6226F ) , ( - 814 . 08777F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAngle ( ) { return this . angle ; }
void test40 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 1 , 1 . 0F , ( - 1959 . 994F ) , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , true , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; boolean boolean0 = homeLight0 . isTopRightPointAt ( 0 . 0F , ( - 784 . 6296F ) , ( - 804 . 9394F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test41 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 8 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 3 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1055L ) ) ; CatalogLight catalogLight0 = new CatalogLight ( "9I" , "9I" , "9I" , ( Content ) null , ( Content ) null , ( - 1007 . 13837F ) , ( - 1 . 551605F ) , ( - 1007 . 13837F ) , 1478 . 7521F , true , lightSourceArray0 , floatArray0 , "9I" , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; boolean boolean0 = homeLight0 . isNameCenterPointAt ( 1627 . 6971F , 0 . 0F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameXOffset ( ) { return this . nameXOffset ; }
void test0 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 6 ] ; float [ ] [ ] floatArray0 = new float [ 20 ] [ 6 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "CINcRV } wDJb8nhA1p" , "CINcRV } wDJb8nhA1p" , "CINcRV } wDJb8nhA1p" , ( Content ) null , ( Content ) null , ( - 9 . 917225F ) , ( - 9 . 917225F ) , ( - 9 . 917225F ) , ( - 9 . 917225F ) , true , ( - 9 . 917225F ) , ( - 9 . 917225F ) , sashArray0 , floatArray0 , "CINcRV } wDJb8nhA1p" , true , bigDecimal0 , bigDecimal0 ) ; float float0 = catalogDoorOrWindow0 . getWallDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallThickness ( ) { return this . wallThickness ; }
void test1 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 11 ] ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 6 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "Invalid URL base for JAR entry" , "Invalid URL base for JAR entry" , "Invalid URL base for JAR entry" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) uRLContent0 , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , false , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "Invalid URL base for JAR entry" , false , false , false , ( BigDecimal ) null , ( BigDecimal ) null , "Invalid URL base for JAR entry" ) ; boolean boolean0 = catalogDoorOrWindow0 . isDoorOrWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallThickness ( ) { return this . wallThickness ; }
void test2 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 22 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 9 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 979 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "eB } '" , "eB } '" , "eB } '" , ( Content ) null , ( Content ) null , ( Content ) null , ( float ) 0L , ( float ) 0L , ( float ) 0L , ( float ) 0L , false , ( float ) 0L , ( float ) 0L , sashArray0 , floatArray0 , "eB } '" , false , false , false , bigDecimal0 , bigDecimal0 , "eB } '" ) ; float float0 = catalogDoorOrWindow0 . getWallThickness ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallDistance ( ) { return this . wallDistance ; }
void test3 ( ) throws Throwable { Class < ? > class0 = CatalogDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; Integer integer0 = new Integer ( 3 ) ; float [ ] [ ] floatArray0 = new float [ 10 ] [ 9 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 1502 . 69F , 1502 . 69F , 1502 . 69F , 1502 . 69F , false , 1502 . 69F , 1502 . 69F , sashArray0 , integer0 , floatArray0 , false , 1502 . 69F , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallDistance ( ) { return this . wallDistance ; }
void test4 ( ) throws Throwable { Class < ? > class0 = CatalogDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , true ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 20 ] [ 6 ] ; byte [ ] byteArray0 = new byte [ 4 ] ; BigInteger bigInteger0 = new BigInteger ( byteArray0 ) ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( ( String ) null , "" , ( String ) null , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( - 366 . 0886F ) , ( - 366 . 0886F ) , ( - 366 . 0886F ) , ( - 366 . 0886F ) , true , ( - 366 . 0886F ) , ( - 366 . 0886F ) , sashArray0 , floatArray0 , ( String ) null , true , true , true , bigDecimal0 , bigDecimal0 , ( String ) null ) ; Sash [ ] sashArray1 = catalogDoorOrWindow0 . getSashes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallDistance ( ) { return this . wallDistance ; }
void test0 ( ) throws Throwable { LightSource lightSource0 = new LightSource ( 1 . 0F , ( - 1030 . 8164F ) , ( - 1030 . 8164F ) , ( - 1 ) ) ; float float0 = lightSource0 . getZ ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getColor ( ) { return this . color ; }
void test1 ( ) throws Throwable { LightSource lightSource0 = new LightSource ( ( - 644 . 83105F ) , 0 . 0F , 0 . 0F , 0 , ( Float ) 0 . 0F ) ; lightSource0 . getDiameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getZ ( ) { return this . z ; }
void test2 ( ) throws Throwable { LightSource lightSource0 = new LightSource ( ( - 644 . 83105F ) , 0 . 0F , 0 . 0F , 0 , ( Float ) 0 . 0F ) ; float float0 = lightSource0 . getY ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test3 ( ) throws Throwable { LightSource lightSource0 = new LightSource ( 1 . 0F , ( - 1030 . 8164F ) , ( - 1030 . 8164F ) , ( - 1 ) ) ; int int0 = lightSource0 . getColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getZ ( ) { return this . z ; }
void test4 ( ) throws Throwable { LightSource lightSource0 = new LightSource ( ( - 644 . 83105F ) , 0 . 0F , 0 . 0F , 0 , ( Float ) 0 . 0F ) ; float float0 = lightSource0 . getX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getColor ( ) { return this . color ; }
void test0 ( ) throws Throwable { AspectRatio aspectRatio0 = AspectRatio . RATIO_3_2 ; Float float0 = aspectRatio0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Float getValue ( ) { return value ; }
void test0 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; BigDecimal bigDecimal0 = BigDecimal . ZERO ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 0 . 0F , 1787 . 7848F , 0 . 0F , 0 . 0F , true , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "" , true , true , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoundToWall ( ) { return this . boundToWall ; }
void test1 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; BigDecimal bigDecimal0 = BigDecimal . ZERO ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 0 . 0F , 1787 . 7848F , 0 . 0F , 0 . 0F , true , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "" , true , true , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setBoundToWall ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoundToWall ( ) { return this . boundToWall ; }
void test2 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) temporaryURLContent0 , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , false , 0 . 3926991F , 0 . 3926991F , sashArray0 , floatArray0 , "om9 + 8^_Buza3" , false , false , false , bigDecimal0 , bigDecimal0 , "om9 + 8^_Buza3" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow ( ( DoorOrWindow ) homeDoorOrWindow0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallThickness ( ) { return this . wallThickness ; }
void test3 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) temporaryURLContent0 , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , false , 0 . 3926991F , 0 . 3926991F , sashArray0 , floatArray0 , "om9 + 8^_Buza3" , false , false , false , bigDecimal0 , bigDecimal0 , "om9 + 8^_Buza3" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . isBoundToWall ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallDistance ( ) { return this . wallDistance ; }
void test4 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; BigDecimal bigDecimal0 = BigDecimal . ZERO ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 0 . 0F , 1787 . 7848F , 0 . 0F , 0 . 0F , true , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "" , true , true , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . move ( 0 . 0F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test5 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) temporaryURLContent0 , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , false , 0 . 3926991F , 0 . 3926991F , sashArray0 , floatArray0 , "om9 + 8^_Buza3" , false , false , false , bigDecimal0 , bigDecimal0 , "om9 + 8^_Buza3" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setX ( 0 . 3926991F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoundToWall ( ) { return this . boundToWall ; }
void test6 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 10 ] ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 7 ] ; BigDecimal bigDecimal0 = BigDecimal . ONE ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , "om9 + 8^_Buza3" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) temporaryURLContent0 , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , 0 . 3926991F , false , 0 . 3926991F , 0 . 3926991F , sashArray0 , floatArray0 , "om9 + 8^_Buza3" , false , false , false , bigDecimal0 , bigDecimal0 , "om9 + 8^_Buza3" ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setY ( 0 . 3926991F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoundToWall ( ) { return this . boundToWall ; }
void test7 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , false ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; Integer integer0 = new Integer ( 0 ) ; float [ ] [ ] floatArray0 = new float [ 14 ] [ 10 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 1535 . 7098F , 1535 . 7098F , 1535 . 7098F , 1535 . 7098F , true , 1535 . 7098F , 1535 . 7098F , sashArray0 , integer0 , floatArray0 , true , ( float ) integer0 , true ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setAngle ( ( float ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallDistance ( ) { return this . wallDistance ; }
void test8 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , true ) ; Sash [ ] sashArray0 = new Sash [ 7 ] ; Integer integer0 = new Integer ( ( - 1399 ) ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 10 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 12 . 415777F , 12 . 415777F , 12 . 415777F , 12 . 415777F , true , 12 . 415777F , 12 . 415777F , sashArray0 , integer0 , floatArray0 , true , ( float ) ( - 1399 ) , true ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setAngle ( ( float ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAngle ( ) { return this . angle ; }
void test9 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , false ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; Integer integer0 = new Integer ( 0 ) ; float [ ] [ ] floatArray0 = new float [ 14 ] [ 10 ] ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 1535 . 7098F , 1535 . 7098F , 1535 . 7098F , 1535 . 7098F , true , 1535 . 7098F , 1535 . 7098F , sashArray0 , integer0 , floatArray0 , true , ( float ) integer0 , true ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setDepth ( 1535 . 7098F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallThickness ( ) { return this . wallThickness ; }
void test10 ( ) throws Throwable { Class < ? > class0 = HomeDoorOrWindow . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; Sash [ ] sashArray0 = new Sash [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; BigDecimal bigDecimal0 = BigDecimal . ZERO ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 0 . 0F , 1787 . 7848F , 0 . 0F , 0 . 0F , true , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "" , true , true , true , bigDecimal0 , bigDecimal0 ) ; HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow ( ( DoorOrWindow ) catalogDoorOrWindow0 ) ; homeDoorOrWindow0 . setDepth ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getDepth ( ) { return this . depth ; }
void test0 ( ) throws Throwable { Class < ? > class0 = CatalogLight . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; LightSource [ ] lightSourceArray0 = new LightSource [ 6 ] ; float [ ] [ ] floatArray0 = new float [ 17 ] [ 1 ] ; float [ ] floatArray1 = new float [ 9 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray1 ; floatArray0 [ 2 ] = floatArray0 [ 0 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1 ) ) ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( - 6 . 874413F ) , ( - 6 . 874413F ) , ( - 6 . 874413F ) , ( - 6 . 874413F ) , false , lightSourceArray0 , floatArray0 , "" , false , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreator ( ) { return this . creator ; }
void test1 ( ) throws Throwable { Class < ? > class0 = CatalogLight . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; LightSource [ ] lightSourceArray0 = new LightSource [ 6 ] ; float [ ] [ ] floatArray0 = new float [ 17 ] [ 1 ] ; float [ ] floatArray1 = new float [ 9 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray1 ; floatArray0 [ 2 ] = floatArray0 [ 0 ] ; String [ ] stringArray0 = new String [ 16 ] ; Long long0 = new Long ( ( long ) ( - 1 ) ) ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1 ) ) ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , "" , stringArray0 , long0 , ( Float ) ( - 6 . 874413F ) , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , 0 . 0F , ( - 6 . 874413F ) , 0 . 0F , ( float ) ( - 1 ) , false , lightSourceArray0 , ( String ) null , floatArray0 , ( String ) null , false , false , false , bigDecimal0 , bigDecimal0 , ( String ) null ) ; LightSource [ ] lightSourceArray1 = catalogLight0 . getLightSources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightSource [ ] getLightSources ( ) ; }
void test0 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test1 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test2 ( ) throws Throwable { Camera . Lens camera_Lens0 = Camera . Lens . SPHERICAL ; Camera camera0 = new Camera ( ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , 38L , camera_Lens0 ) ; camera0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test3 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test4 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test5 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test6 ( ) throws Throwable { long long0 = Camera . convertTimeToTimeZone ( 38L , " [ rH > } UH#0hoWPiBD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long convertTimeToTimeZone ( long utcTime , String timeZone ) { Calendar utcCalendar = new GregorianCalendar ( TimeZone . getTimeZone ( "UTC" ) ) ; utcCalendar . setTimeInMillis ( utcTime ) ; Calendar convertedCalendar = new GregorianCalendar ( TimeZone . getTimeZone ( timeZone ) ) ; convertedCalendar . set ( Calendar . YEAR , utcCalendar . get ( Calendar . YEAR ) ) ; convertedCalendar . set ( Calendar . MONTH , utcCalendar . get ( Calendar . MONTH ) ) ; convertedCalendar . set ( Calendar . DAY_OF_MONTH , utcCalendar . get ( Calendar . DAY_OF_MONTH ) ) ; convertedCalendar . set ( Calendar . HOUR_OF_DAY , utcCalendar . get ( Calendar . HOUR_OF_DAY ) ) ; convertedCalendar . set ( Calendar . MINUTE , utcCalendar . get ( Calendar . MINUTE ) ) ; convertedCalendar . set ( Calendar . SECOND , utcCalendar . get ( Calendar . SECOND ) ) ; convertedCalendar . set ( Calendar . MILLISECOND , utcCalendar . get ( Calendar . MILLISECOND ) ) ; return convertedCalendar . getTimeInMillis ( ) ; }
void test7 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getZ ( ) { return this . z ; }
void test8 ( ) throws Throwable { Camera camera0 = new Camera ( 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test9 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test10 ( ) throws Throwable { Camera . Lens camera_Lens0 = Camera . Lens . SPHERICAL ; Camera camera0 = new Camera ( ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , ( - 1507 . 1981F ) , 38L , camera_Lens0 ) ; Camera camera1 = new Camera ( ( float ) 38L , ( float ) 38L , ( float ) 38L , ( float ) 38L , ( float ) 38L , ( - 1507 . 1981F ) , 38L , camera_Lens0 ) ; camera0 . setCamera ( camera1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFieldOfView ( ) { return this . fieldOfView ; }
void test11 ( ) throws Throwable { Camera camera0 = new Camera ( 4 . 628312F , 4 . 628312F , 4 . 628312F , 1934 . 2107F , 1934 . 2107F , 1934 . 2107F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test12 ( ) throws Throwable { Camera camera0 = new Camera ( 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test13 ( ) throws Throwable { Camera camera0 = new Camera ( 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F , 0 . 8498671F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test0 ( ) throws Throwable { TexturesCatalog texturesCatalog0 = new TexturesCatalog ( ) ; int int0 = texturesCatalog0 . getCategoriesCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test1 ( ) throws Throwable { TexturesCatalog texturesCatalog0 = new TexturesCatalog ( ) ; texturesCatalog0 . removeTexturesListener ( ( CollectionListener < CatalogTexture > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test2 ( ) throws Throwable { TexturesCatalog texturesCatalog0 = new TexturesCatalog ( ) ; texturesCatalog0 . addTexturesListener ( ( CollectionListener < CatalogTexture > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test4 ( ) throws Throwable { TexturesCatalog texturesCatalog0 = new TexturesCatalog ( ) ; List < TexturesCategory > list0 = texturesCatalog0 . getCategories ( ) ; List < TexturesCategory > list1 = texturesCatalog0 . getCategories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test5 ( ) throws Throwable { TexturesCatalog texturesCatalog0 = new TexturesCatalog ( ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( " ; os . versin" , ( Content ) null , 39 . 008606F , 39 . 008606F , false ) ; TexturesCategory texturesCategory0 = new TexturesCategory ( " ; os . versin" ) ; texturesCatalog0 . add ( texturesCategory0 , catalogTexture0 ) ; texturesCatalog0 . add ( texturesCategory0 , catalogTexture0 ) ; texturesCatalog0 . delete ( catalogTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test7 ( ) throws Throwable { TexturesCatalog texturesCatalog0 = new TexturesCatalog ( ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) null , 1799 . 2382F , 1799 . 2382F , false ) ; TexturesCategory texturesCategory0 = new TexturesCategory ( "" ) ; texturesCatalog0 . add ( texturesCategory0 , catalogTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void delete ( CatalogPieceOfFurniture piece ) { FurnitureCategory category = piece . getCategory ( ) ; / / Remove piece from its category if ( category ! = null ) { int pieceIndex = category . getIndexOfPieceOfFurniture ( piece ) ; if ( pieceIndex > = 0 ) { category . delete ( piece ) ; if ( category . getFurnitureCount ( ) = = 0 ) { / / Make a copy of the list to avoid conflicts in the list returned by getCategories this . categories = new ArrayList < FurnitureCategory > ( this . categories ) ; this . categories . remove ( category ) ; } this . furnitureChangeSupport . fireCollectionChanged ( piece , pieceIndex , CollectionEvent . Type . DELETE ) ; return ; } } throw new IllegalArgumentException ( "catalog doesn't contain piece " + piece . getName ( ) ) ; }
void test0 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 17 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test1 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 17 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test2 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test3 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test4 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test5 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test6 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test7 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test8 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test9 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 17 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test10 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test11 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test12 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 17 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test13 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test14 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test15 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test16 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test17 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYCenter ( ) { float yMin = this . points [ 0 ] [ 1 ] ; float yMax = this . points [ 0 ] [ 1 ] ; for ( int i = 1 ; i < this . points . length ; i + + ) { yMin = Math . min ( yMin , this . points [ i ] [ 1 ] ) ; yMax = Math . max ( yMax , this . points [ i ] [ 1 ] ) ; } return ( yMin + yMax ) / 2 ; }
void test18 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test19 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test20 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test21 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test22 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test23 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test24 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXCenter ( ) { float xMin = this . points [ 0 ] [ 0 ] ; float xMax = this . points [ 0 ] [ 0 ] ; for ( int i = 1 ; i < this . points . length ; i + + ) { xMin = Math . min ( xMin , this . points [ i ] [ 0 ] ) ; xMax = Math . max ( xMax , this . points [ i ] [ 0 ] ) ; } return ( xMin + xMax ) / 2 ; }
void test25 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test27 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test28 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 6 ] [ 10 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test29 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test30 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test31 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 9 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test32 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test33 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 9 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test34 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test35 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 17 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameAngle ( ) { return this . nameAngle ; }
void test36 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test37 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test38 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPoint ( float x , float y ) { addPoint ( x , y , this . points . length ) ; }
void test39 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getArea ( ) { if ( this . areaCache = = null ) { Area roomArea = new Area ( getShape ( ) ) ; if ( roomArea . isSingular ( ) ) { this . areaCache = Math . abs ( getSignedArea ( getPoints ( ) ) ) ; } else { / / Add the surface of the different polygons of this room float area = 0 ; List < float [ ] > currentPathPoints = new ArrayList < float [ ] > ( ) ; for ( PathIterator it = roomArea . getPathIterator ( null ) ; ! it . isDone ( ) ; ) { float [ ] roomPoint = new float [ 2 ] ; switch ( it . currentSegment ( roomPoint ) ) { case PathIterator . SEG_MOVETO : currentPathPoints . add ( roomPoint ) ; break ; case PathIterator . SEG_LINETO : currentPathPoints . add ( roomPoint ) ; break ; case PathIterator . SEG_CLOSE : float [ ] [ ] pathPoints = currentPathPoints . toArray ( new float [ currentPathPoints . size ( ) ] [ ] ) ; area + = Math . abs ( getSignedArea ( pathPoints ) ) ; currentPathPoints . clear ( ) ; break ; } it . next ( ) ; } this . areaCache = area ; } } return this . areaCache ; }
void test40 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPoint ( float x , float y , int index ) { if ( index < 0 | | index > = this . points . length ) { throw new IndexOutOfBoundsException ( "Invalid index " + index ) ; } if ( this . points [ index ] [ 0 ] ! = x | | this . points [ index ] [ 1 ] ! = y ) { float [ ] [ ] oldPoints = this . points ; this . points = deepCopy ( this . points ) ; this . points [ index ] [ 0 ] = x ; this . points [ index ] [ 1 ] = y ; this . shapeCache = null ; this . areaCache = null ; this . propertyChangeSupport . firePropertyChange ( Property . POINTS . name ( ) , oldPoints , deepCopy ( this . points ) ) ; } }
void test41 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test42 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; float [ ] floatArray1 = new float [ 7 ] ; floatArray1 [ 1 ] = 638 . 04663F ; floatArray0 [ 0 ] = floatArray1 ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test43 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 9 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePoint ( int index ) { if ( index < 0 | | index > = this . points . length ) { throw new IndexOutOfBoundsException ( "Invalid index " + index ) ; } else if ( this . points . length < = 1 ) { throw new IllegalStateException ( "Room points must containt at least one point" ) ; } float [ ] [ ] newPoints = new float [ this . points . length - 1 ] [ ] ; System . arraycopy ( this . points , 0 , newPoints , 0 , index ) ; System . arraycopy ( this . points , index + 1 , newPoints , index , this . points . length - index - 1 ) ; float [ ] [ ] oldPoints = this . points ; this . points = newPoints ; this . shapeCache = null ; this . areaCache = null ; this . propertyChangeSupport . firePropertyChange ( Property . POINTS . name ( ) , oldPoints , deepCopy ( this . points ) ) ; }
void test44 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePoint ( int index ) { if ( index < 0 | | index > = this . points . length ) { throw new IndexOutOfBoundsException ( "Invalid index " + index ) ; } else if ( this . points . length < = 1 ) { throw new IllegalStateException ( "Room points must containt at least one point" ) ; } float [ ] [ ] newPoints = new float [ this . points . length - 1 ] [ ] ; System . arraycopy ( this . points , 0 , newPoints , 0 , index ) ; System . arraycopy ( this . points , index + 1 , newPoints , index , this . points . length - index - 1 ) ; float [ ] [ ] oldPoints = this . points ; this . points = newPoints ; this . shapeCache = null ; this . areaCache = null ; this . propertyChangeSupport . firePropertyChange ( Property . POINTS . name ( ) , oldPoints , deepCopy ( this . points ) ) ; }
void test45 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPointCount ( ) { return this . points . length ; }
void test46 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 9 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test47 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test48 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test49 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAreaXOffset ( ) { return this . areaXOffset ; }
void test50 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test51 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test52 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test53 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test54 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test55 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAreaAngle ( ) { return this . areaAngle ; }
void test56 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test57 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test58 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test59 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test60 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 9 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test61 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test62 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorShininess ( ) { return this . floorShininess ; }
void test63 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test64 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 9 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test65 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test66 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 6 ] [ 5 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test67 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test68 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test69 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test70 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test71 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test72 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test73 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test74 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test75 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 3 ] ; float [ ] floatArray1 = new float [ 9 ] ; floatArray1 [ 1 ] = ( - 437 . 4447F ) ; floatArray0 [ 0 ] = floatArray1 ; float [ ] floatArray2 = new float [ 7 ] ; floatArray2 [ 0 ] = ( - 645 . 01276F ) ; floatArray0 [ 1 ] = floatArray2 ; float [ ] floatArray3 = new float [ 10 ] ; floatArray3 [ 0 ] = 1 . 0F ; floatArray3 [ 1 ] = ( - 849 . 45746F ) ; floatArray0 [ 2 ] = floatArray3 ; float [ ] floatArray4 = new float [ 4 ] ; floatArray4 [ 0 ] = 1 . 0F ; floatArray0 [ 3 ] = floatArray4 ; floatArray0 [ 6 ] = floatArray0 [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test76 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 7 ] [ 3 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test77 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 10 ] [ 4 ] ; float [ ] floatArray1 = new float [ 6 ] ; floatArray1 [ 0 ] = 1536 . 2104F ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; float [ ] floatArray2 = new float [ 10 ] ; floatArray2 [ 1 ] = 1227 . 1195F ; floatArray0 [ 2 ] = floatArray2 ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test78 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 3 ] [ 1 ] ; float [ ] floatArray1 = new float [ 7 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; float [ ] floatArray2 = new float [ 1 ] ; floatArray2 [ 0 ] = 86 . 49518F ; floatArray0 [ 2 ] = floatArray2 ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test79 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 9 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameYOffset ( ) { return this . nameYOffset ; }
void test80 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 8 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test81 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXCenter ( ) { float xMin = this . points [ 0 ] [ 0 ] ; float xMax = this . points [ 0 ] [ 0 ] ; for ( int i = 1 ; i < this . points . length ; i + + ) { xMin = Math . min ( xMin , this . points [ i ] [ 0 ] ) ; xMax = Math . max ( xMax , this . points [ i ] [ 0 ] ) ; } return ( xMin + xMax ) / 2 ; }
void test82 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 8 ] [ 2 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAreaVisible ( ) { return this . areaVisible ; }
void test83 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 6 ] [ 10 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCeilingVisible ( ) { return this . ceilingVisible ; }
void test84 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test85 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 2 ] [ 7 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXCenter ( ) { float xMin = this . points [ 0 ] [ 0 ] ; float xMax = this . points [ 0 ] [ 0 ] ; for ( int i = 1 ; i < this . points . length ; i + + ) { xMin = Math . min ( xMin , this . points [ i ] [ 0 ] ) ; xMax = Math . max ( xMax , this . points [ i ] [ 0 ] ) ; } return ( xMin + xMax ) / 2 ; }
void test86 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 9 ] [ 6 ] ; Room room0 = new Room ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloorVisible ( ) { return this . floorVisible ; }
void test0 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , false ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "AJ" , "AJ" , ( Content ) resourceURLContent0 , 697 . 8673F , 697 . 8673F , "AJ" , false ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; boolean boolean0 = homeTexture0 . isLeftToRightOriented ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test1 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , false ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "1 . ZNYD ? _" , "1 . ZNYD ? _" , ( Content ) resourceURLContent0 , 1890 . 0442F , 1890 . 0442F , "1 . ZNYD ? _" ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; HomeTexture homeTexture1 = new HomeTexture ( ( TextureImage ) homeTexture0 ) ; boolean boolean0 = homeTexture0 . equals ( ( Object ) homeTexture1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test2 ( ) throws Throwable { Class < ? > class0 = TexturesCategory . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) resourceURLContent0 , 1977 . 2068F , ( - 1559 . 796F ) ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; int int0 = homeTexture0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeftToRightOriented ( ) { return this . leftToRightOriented ; }
void test3 ( ) throws Throwable { Class < ? > class0 = TexturesCategory . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) resourceURLContent0 , 1977 . 2068F , ( - 1559 . 796F ) ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; CatalogTexture catalogTexture1 = new CatalogTexture ( "" , "" , ( Content ) resourceURLContent0 , ( - 1559 . 796F ) , 1977 . 2068F , "" ) ; HomeTexture homeTexture1 = new HomeTexture ( ( TextureImage ) catalogTexture1 ) ; boolean boolean0 = homeTexture0 . equals ( ( Object ) homeTexture1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeftToRightOriented ( ) { return this . leftToRightOriented ; }
void test4 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , false ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "1 . ZNYD ? _" , "1 . ZNYD ? _" , ( Content ) resourceURLContent0 , 1890 . 0442F , 1890 . 0442F , "1 . ZNYD ? _" ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; boolean boolean0 = homeTexture0 . equals ( ( Object ) "1 . ZNYD ? _" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test5 ( ) throws Throwable { Class < ? > class0 = TexturesCategory . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) resourceURLContent0 , 1977 . 2068F , ( - 1559 . 796F ) ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; CatalogTexture catalogTexture1 = new CatalogTexture ( "" , ( String ) null , ( Content ) resourceURLContent0 , ( - 1559 . 796F ) , ( - 1559 . 796F ) , "" ) ; HomeTexture homeTexture1 = new HomeTexture ( ( TextureImage ) catalogTexture1 ) ; boolean boolean0 = homeTexture1 . equals ( ( Object ) homeTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test0 ( ) throws Throwable { LinkedList < TextureImage > linkedList0 = new LinkedList < TextureImage > ( ) ; PatternsCatalog patternsCatalog0 = new PatternsCatalog ( ( List < TextureImage > ) linkedList0 ) ; List < TextureImage > list0 = patternsCatalog0 . getPatterns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < TextureImage > getPatterns ( ) { return Collections . unmodifiableList ( this . patterns ) ; }
void test2 ( ) throws Throwable { LinkedList < TextureImage > linkedList0 = new LinkedList < TextureImage > ( ) ; PatternsCatalog patternsCatalog0 = new PatternsCatalog ( ( List < TextureImage > ) linkedList0 ) ; int int0 = patternsCatalog0 . getPatternsCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPatternsCount ( ) { return this . patterns . size ( ) ; }
void test3 ( ) throws Throwable { LinkedList < TextureImage > linkedList0 = new LinkedList < TextureImage > ( ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , "" , ( Content ) null , 0 . 0F , 1 . 0F , "" , false ) ; linkedList0 . addLast ( ( TextureImage ) catalogTexture0 ) ; PatternsCatalog patternsCatalog0 = new PatternsCatalog ( ( List < TextureImage > ) linkedList0 ) ; CatalogTexture catalogTexture1 = ( CatalogTexture ) patternsCatalog0 . getPattern ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreator ( ) { return this . creator ; }
void test0 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; List < FurnitureCategory > list0 = furnitureCatalog0 . getCategories ( ) ; List < FurnitureCategory > list1 = furnitureCatalog0 . getCategories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test1 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; furnitureCatalog0 . addFurnitureListener ( ( CollectionListener < CatalogPieceOfFurniture > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test2 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; int int0 = furnitureCatalog0 . getCategoriesCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test3 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; furnitureCatalog0 . removeFurnitureListener ( ( CollectionListener < CatalogPieceOfFurniture > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test5 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "" ) ; Class < ? > class0 = FurnitureCatalogTree . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , false ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 10 ] ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) ( - 1118 ) , ( float ) ( - 1118 ) , ( float ) ( - 1118 ) , ( float ) ( - 1118 ) , false , "" , ( Integer ) ( - 1118 ) , floatArray0 , false , ( float ) ( - 1118 ) , false ) ; furnitureCatalog0 . add ( furnitureCategory0 , catalogPieceOfFurniture0 ) ; furnitureCatalog0 . add ( furnitureCategory0 , catalogPieceOfFurniture0 ) ; furnitureCatalog0 . delete ( catalogPieceOfFurniture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test7 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "" ) ; Class < ? > class0 = FurnitureCatalogTree . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , false ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 10 ] ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) ( - 1118 ) , ( float ) ( - 1118 ) , ( float ) ( - 1118 ) , ( float ) ( - 1118 ) , false , "" , ( Integer ) ( - 1118 ) , floatArray0 , false , ( float ) ( - 1118 ) , false ) ; furnitureCatalog0 . add ( furnitureCategory0 , catalogPieceOfFurniture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test0 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getPhotoWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test1 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getCeillingLightColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test2 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; float float0 = homeEnvironment0 . getWallsAlpha ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test3 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getPhotoQuality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test4 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getVideoHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoWidth ( ) { return this . photoWidth ; }
void test5 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . getSkyTexture ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallsAlpha ( ) { return this . wallsAlpha ; }
void test6 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getPhotoHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test7 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getVideoFrameRate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLightColor ( ) { return this . lightColor ; }
void test8 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getLightColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoHeight ( ) { return Math . round ( getVideoWidth ( ) / getVideoAspectRatio ( ) . getValue ( ) ) ; }
void test9 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; HomeEnvironment . Property homeEnvironment_Property0 = HomeEnvironment . Property . PHOTO_QUALITY ; PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy ( "" , ( PropertyChangeListener ) null ) ; homeEnvironment0 . addPropertyChangeListener ( homeEnvironment_Property0 , ( PropertyChangeListener ) propertyChangeListenerProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLightColor ( ) { return this . lightColor ; }
void test10 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . isAllLevelsVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoFrameRate ( ) { return this . videoFrameRate ; }
void test11 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; List < Camera > list0 = homeEnvironment0 . getVideoCameraPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test12 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . getGroundTexture ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test13 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; boolean boolean0 = homeEnvironment0 . isObserverCameraElevationAdjusted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoHeight ( ) { return Math . round ( getVideoWidth ( ) / getVideoAspectRatio ( ) . getValue ( ) ) ; }
void test14 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getVideoQuality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test15 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; HomeEnvironment . DrawingMode homeEnvironment_DrawingMode0 = homeEnvironment0 . getDrawingMode ( ) ; homeEnvironment0 . setDrawingMode ( homeEnvironment_DrawingMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObserverCameraElevationAdjusted ( ) { return this . observerCameraElevationAdjusted ; }
void test16 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; float float0 = homeEnvironment0 . getSubpartSizeUnderLight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test17 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; HomeEnvironment . Property homeEnvironment_Property0 = HomeEnvironment . Property . OBSERVER_CAMERA_ELEVATION_ADJUSTED ; PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy ( "FILL_AND_OUTLINE" , ( PropertyChangeListener ) null ) ; homeEnvironment0 . removePropertyChangeListener ( homeEnvironment_Property0 , ( PropertyChangeListener ) propertyChangeListenerProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGroundColor ( ) { return this . groundColor ; }
void test18 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; HomeEnvironment homeEnvironment1 = homeEnvironment0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLightColor ( ) { return this . lightColor ; }
void test19 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . getPhotoAspectRatio ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGroundColor ( ) { return this . groundColor ; }
void test20 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getGroundColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoWidth ( ) { return this . photoWidth ; }
void test21 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; int int0 = homeEnvironment0 . getSkyColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoFrameRate ( ) { return this . videoFrameRate ; }
void test22 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoHeight ( ) { return Math . round ( getVideoWidth ( ) / getVideoAspectRatio ( ) . getValue ( ) ) ; }
void test23 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setObserverCameraElevationAdjusted ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGroundColor ( ) { return this . groundColor ; }
void test24 ( ) throws Throwable { TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( ( String ) null , ( Content ) temporaryURLContent0 , ( float ) ( - 2039 ) , ( float ) ( - 2039 ) , false ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ( - 2039 ) , homeTexture0 , ( - 2039 ) , homeTexture0 , ( - 2039 ) , ( float ) ( - 2039 ) ) ; homeEnvironment0 . setGroundColor ( ( - 2039 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test25 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setGroundColor ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoHeight ( ) { return this . photoHeight ; }
void test26 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setGroundTexture ( ( HomeTexture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test27 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , "" , ( Content ) null , ( - 386 . 44067F ) , ( - 386 . 44067F ) , "" , true ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; homeEnvironment0 . setGroundTexture ( homeTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLightColor ( ) { return this . lightColor ; }
void test28 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( 1452 , ( HomeTexture ) null , 1452 , ( HomeTexture ) null , 1452 , ( float ) 1452 ) ; homeEnvironment0 . setSkyColor ( 1452 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test29 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setSkyColor ( 400 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test30 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setSkyTexture ( ( HomeTexture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test31 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , "" , ( Content ) uRLContent0 , ( float ) ( - 1006 ) , ( float ) ( - 1006 ) , "" ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; homeEnvironment0 . setSkyTexture ( homeTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCeillingLightColor ( ) { return this . ceilingLightColor ; }
void test32 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ( - 1260 ) , ( HomeTexture ) null , 25 , 400 , ( float ) ( - 1260 ) ) ; homeEnvironment0 . setLightColor ( 400 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallsAlpha ( ) { return this . wallsAlpha ; }
void test33 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setLightColor ( 1416 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoWidth ( ) { return this . photoWidth ; }
void test34 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setCeillingLightColor ( ( - 736 ) ) ; homeEnvironment0 . setCeillingLightColor ( ( - 736 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoHeight ( ) { return Math . round ( getVideoWidth ( ) / getVideoAspectRatio ( ) . getValue ( ) ) ; }
void test35 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setWallsAlpha ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test36 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setWallsAlpha ( ( float ) ( - 736 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isObserverCameraElevationAdjusted ( ) { return this . observerCameraElevationAdjusted ; }
void test37 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; HomeEnvironment . DrawingMode homeEnvironment_DrawingMode0 = HomeEnvironment . DrawingMode . OUTLINE ; homeEnvironment0 . setDrawingMode ( homeEnvironment_DrawingMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoFrameRate ( ) { return this . videoFrameRate ; }
void test38 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setSubpartSizeUnderLight ( ( float ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test39 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setSubpartSizeUnderLight ( ( float ) 13427964 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoHeight ( ) { return this . photoHeight ; }
void test40 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setAllLevelsVisible ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoFrameRate ( ) { return this . videoFrameRate ; }
void test41 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setAllLevelsVisible ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test42 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setPhotoWidth ( 400 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoFrameRate ( ) { return this . videoFrameRate ; }
void test43 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setPhotoWidth ( ( - 1006 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test44 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setPhotoHeight ( 400 ) ; homeEnvironment0 . setPhotoHeight ( 400 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test45 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; AspectRatio aspectRatio0 = AspectRatio . VIEW_3D_RATIO ; homeEnvironment0 . setPhotoAspectRatio ( aspectRatio0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkyColor ( ) { return this . skyColor ; }
void test46 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; AspectRatio aspectRatio0 = AspectRatio . SQUARE_RATIO ; homeEnvironment0 . setPhotoAspectRatio ( aspectRatio0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoHeight ( ) { return this . photoHeight ; }
void test47 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setPhotoQuality ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoWidth ( ) { return this . photoWidth ; }
void test48 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setPhotoQuality ( 1339 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoQuality ( ) { return this . photoQuality ; }
void test49 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPhotoHeight ( ) { return this . photoHeight ; }
void test50 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; AspectRatio aspectRatio0 = AspectRatio . RATIO_4_3 ; homeEnvironment0 . setVideoAspectRatio ( aspectRatio0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWallsAlpha ( ) { return this . wallsAlpha ; }
void test52 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLightColor ( ) { return this . lightColor ; }
void test53 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setVideoQuality ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test54 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setVideoQuality ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoFrameRate ( ) { return this . videoFrameRate ; }
void test55 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLightColor ( ) { return this . lightColor ; }
void test56 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; LinkedList < Camera > linkedList0 = new LinkedList < Camera > ( ) ; homeEnvironment0 . setVideoCameraPath ( ( List < Camera > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoHeight ( ) { return Math . round ( getVideoWidth ( ) / getVideoAspectRatio ( ) . getValue ( ) ) ; }
void test57 ( ) throws Throwable { HomeEnvironment homeEnvironment0 = new HomeEnvironment ( ) ; homeEnvironment0 . setVideoCameraPath ( ( List < Camera > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVideoWidth ( ) { return this . videoWidth ; }
void test0 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , false ) ; LightSource [ ] lightSourceArray0 = new LightSource [ 10 ] ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( - 1936 . 5673F ) , ( - 1936 . 5673F ) , ( - 1936 . 5673F ) , ( float ) 60000L , false , lightSourceArray0 , ( float [ ] [ ] ) null , "" , false , ( BigDecimal ) null , ( BigDecimal ) null ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDoorOrWindow ( ) { return this . doorOrWindow ; }
void test1 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 2 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 6 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( double ) 0 . 0F ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "com . eteks . sweethome3d . tools . temporarySubFolder" , "com . eteks . sweethome3d . tools . temporarySubFolder" , "com . eteks . sweethome3d . tools . temporarySubFolder" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) uRLContent0 , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , true , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "com . eteks . sweethome3d . tools . temporarySubFolder" , true , true , true , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test2 ( ) throws Throwable { URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; Sash [ ] sashArray0 = new Sash [ 2 ] ; float [ ] [ ] floatArray0 = new float [ 4 ] [ 6 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( double ) 0 . 0F ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( "com . eteks . sweethome3d . tools . temporarySubFolder" , "com . eteks . sweethome3d . tools . temporarySubFolder" , "com . eteks . sweethome3d . tools . temporarySubFolder" , ( Content ) uRLContent0 , ( Content ) uRLContent0 , ( Content ) uRLContent0 , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , true , 0 . 0F , 0 . 0F , sashArray0 , floatArray0 , "com . eteks . sweethome3d . tools . temporarySubFolder" , true , true , true , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test3 ( ) throws Throwable { CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "X`Z43iX^k\"vQ - %l" , ( Content ) null , ( Content ) null , ( - 6 . 248636F ) , ( - 6 . 248636F ) , ( - 6 . 248636F ) , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test4 ( ) throws Throwable { Sash [ ] sashArray0 = new Sash [ 10 ] ; float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( double ) ( - 10 . 002116F ) ) ; CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow ( " | | u2f ( Y : * / / 9 . X^TP" , " | | u2f ( Y : * / / 9 . X^TP" , "@ / % { $o : L / " , ( Content ) null , ( Content ) null , ( - 10 . 002116F ) , ( float ) 0L , ( float ) 0L , ( float ) 0L , true , ( float ) 0L , ( float ) 0L , sashArray0 , floatArray0 , " | | u2f ( Y : * / / 9 . X^TP" , true , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return this . url . hashCode ( ) ; }
void test5 ( ) throws Throwable { Long long0 = new Long ( 1L ) ; Float float0 = new Float ( ( double ) long0 ) ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray1 ; LightSource [ ] lightSourceArray0 = new LightSource [ 7 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( long ) ( - 1984 ) ) ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) float0 , ( float ) long0 , ( float ) 1L , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDoorOrWindow ( ) { return this . doorOrWindow ; }
void test6 ( ) throws Throwable { Long long0 = new Long ( 1L ) ; Float float0 = new Float ( ( double ) long0 ) ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; Integer integer0 = new Integer ( ( - 1984 ) ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray1 ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) float0 , ( float ) float0 , ( float ) long0 , ( float ) float0 , true , integer0 , floatArray0 , true , ( float ) integer0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test7 ( ) throws Throwable { Long long0 = new Long ( 1L ) ; Float float0 = new Float ( ( double ) long0 ) ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray1 ; LightSource [ ] lightSourceArray0 = new LightSource [ 7 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( long ) ( - 1984 ) ) ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) float0 , ( float ) long0 , ( float ) 1L , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test8 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , false ) ; LightSource [ ] lightSourceArray0 = new LightSource [ 10 ] ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( - 1936 . 5673F ) , ( - 1936 . 5673F ) , ( - 1936 . 5673F ) , ( float ) 60000L , false , lightSourceArray0 , ( float [ ] [ ] ) null , "" , false , ( BigDecimal ) null , ( BigDecimal ) null ) ; BigDecimal bigDecimal0 = new BigDecimal ( ( - 1 ) ) ; catalogLight0 . equals ( ( Object ) bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDoorOrWindow ( ) { return this . doorOrWindow ; }
void test9 ( ) throws Throwable { CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "X`Z43iX^k\"vQ - %l" , ( Content ) null , ( Content ) null , ( - 6 . 248636F ) , ( - 6 . 248636F ) , ( - 6 . 248636F ) , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test10 ( ) throws Throwable { Long long0 = new Long ( 1L ) ; Float float0 = new Float ( ( double ) long0 ) ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; Integer integer0 = new Integer ( ( - 1984 ) ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray1 ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) float0 , ( float ) float0 , ( float ) long0 , ( float ) float0 , true , integer0 , floatArray0 , true , ( float ) integer0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getDepth ( ) { return this . depth ; }
void test11 ( ) throws Throwable { Long long0 = new Long ( 1L ) ; Float float0 = new Float ( ( double ) long0 ) ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; Integer integer0 = new Integer ( ( - 1984 ) ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray1 ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) float0 , ( float ) float0 , ( float ) long0 , ( float ) float0 , true , integer0 , floatArray0 , true , ( float ) integer0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMovable ( ) { return this . movable ; }
void test12 ( ) throws Throwable { Long long0 = new Long ( 1L ) ; Float float0 = new Float ( ( double ) long0 ) ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; Integer integer0 = new Integer ( ( - 1984 ) ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray1 ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) float0 , ( float ) float0 , ( float ) long0 , ( float ) float0 , true , integer0 , floatArray0 , true , ( float ) integer0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test13 ( ) throws Throwable { float [ ] [ ] floatArray0 = new float [ 5 ] [ 4 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( double ) ( - 10 . 002116F ) ) ; LightSource [ ] lightSourceArray0 = new LightSource [ 40 ] ; CatalogLight catalogLight0 = new CatalogLight ( " | | u2f ( Y : * / / 9 . X^TP" , "@ / % { $o : L / " , "@ / % { $o : L / " , ( Content ) null , ( Content ) null , ( Content ) null , ( - 10 . 002116F ) , ( - 10 . 002116F ) , ( float ) 0L , ( - 10 . 002116F ) , true , lightSourceArray0 , floatArray0 , " | | u2f ( Y : * / / 9 . X^TP" , true , bigDecimal0 , bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test14 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; Integer integer0 = new Integer ( ( - 1984 ) ) ; float [ ] [ ] floatArray0 = new float [ 10 ] [ 9 ] ; BigDecimal bigDecimal0 = new BigDecimal ( 1L ) ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "" , "" , "" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) ( - 1984 ) , ( float ) 1L , ( float ) ( - 1984 ) , 0 . 0F , false , "" , floatArray0 , "" , false , false , true , bigDecimal0 , bigDecimal0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test0 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; Format format0 = lengthUnit0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test1 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; Format format0 = lengthUnit0 . getFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormatWithUnit ( ) ; / * * * Returns a format able to format lengths . * / Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test2 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . unitToCentimeter ( 2 . 54F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float unitToCentimeter ( float length ) ; }
void test3 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . getMinimumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumLength ( ) ; / * * * Returns the maximum value for length in centimeter . * @since 3 . 4 * / float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test4 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . getMagnetizedLength ( 0 . 3175F , 0 . 3175F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test5 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . centimeterToUnit ( 0 . 1F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float centimeterToUnit ( float length ) ; / * * * Returns the < code > length < / code > given in this unit converted * to a value expressed in centimeter . * @since 2 . 0 * / float unitToCentimeter ( float length ) ; }
void test6 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; String string0 = lengthUnit0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test7 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . getMaximumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test8 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; Format format0 = lengthUnit0 . getAreaFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getAreaFormatWithUnit ( ) ; / * * * A decimal format for square meter . * / class SquareMeterAreaFormatWithUnit extends DecimalFormat { SquareMeterAreaFormatWithUnit ( String squareMeterUnit ) { super ( "# , ##0 . ## " + squareMeterUnit ) ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert square centimeter to square meter return super . format ( number / 10000 , result , fieldPosition ) ; } }
void test9 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; float float0 = lengthUnit0 . centimeterToUnit ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float centimeterToUnit ( float length ) ; / * * * Returns the < code > length < / code > given in this unit converted * to a value expressed in centimeter . * @since 2 . 0 * / float unitToCentimeter ( float length ) ; }
void test10 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; float float0 = lengthUnit0 . getMinimumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumLength ( ) ; / * * * Returns the maximum value for length in centimeter . * @since 3 . 4 * / float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test11 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; float float0 = lengthUnit0 . getMagnetizedLength ( 0 . 0F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test12 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; Format format0 = lengthUnit0 . getAreaFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getAreaFormatWithUnit ( ) ; / * * * A decimal format for square meter . * / class SquareMeterAreaFormatWithUnit extends DecimalFormat { SquareMeterAreaFormatWithUnit ( String squareMeterUnit ) { super ( "# , ##0 . ## " + squareMeterUnit ) ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert square centimeter to square meter return super . format ( number / 10000 , result , fieldPosition ) ; } }
void test13 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; Format format0 = lengthUnit0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test14 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; String string0 = lengthUnit0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test15 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; Format format0 = lengthUnit0 . getFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormatWithUnit ( ) ; / * * * Returns a format able to format lengths . * / Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test16 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; float float0 = lengthUnit0 . unitToCentimeter ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float unitToCentimeter ( float length ) ; }
void test17 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . METER ; float float0 = lengthUnit0 . getMaximumElevation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test18 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; Format format0 = lengthUnit0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test19 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . centimeterToUnit ( 5 . 0E - 4F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float centimeterToUnit ( float length ) ; / * * * Returns the < code > length < / code > given in this unit converted * to a value expressed in centimeter . * @since 2 . 0 * / float unitToCentimeter ( float length ) ; }
void test20 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMaximumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test21 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMinimumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumLength ( ) ; / * * * Returns the maximum value for length in centimeter . * @since 3 . 4 * / float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test22 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . unitToCentimeter ( 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float unitToCentimeter ( float length ) ; }
void test23 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; Format format0 = lengthUnit0 . getAreaFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getAreaFormatWithUnit ( ) ; / * * * A decimal format for square meter . * / class SquareMeterAreaFormatWithUnit extends DecimalFormat { SquareMeterAreaFormatWithUnit ( String squareMeterUnit ) { super ( "# , ##0 . ## " + squareMeterUnit ) ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert square centimeter to square meter return super . format ( number / 10000 , result , fieldPosition ) ; } }
void test24 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; String string0 = lengthUnit0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test25 ( ) throws Throwable { float float0 = LengthUnit . centimeterToFoot ( 0 . 1F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float centimeterToFoot ( float length ) { return length / 2 . 54f / 12 ; }
void test26 ( ) throws Throwable { float float0 = LengthUnit . footToCentimeter ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float footToCentimeter ( float length ) { return length * 2 . 54f * 12 ; }
void test27 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; Format format0 = lengthUnit0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test28 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; Format format0 = lengthUnit0 . getAreaFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getAreaFormatWithUnit ( ) ; / * * * A decimal format for square meter . * / class SquareMeterAreaFormatWithUnit extends DecimalFormat { SquareMeterAreaFormatWithUnit ( String squareMeterUnit ) { super ( "# , ##0 . ## " + squareMeterUnit ) ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert square centimeter to square meter return super . format ( number / 10000 , result , fieldPosition ) ; } }
void test29 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; Format format0 = lengthUnit0 . getFormatWithUnit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Format getFormatWithUnit ( ) ; / * * * Returns a format able to format lengths . * / Format getFormat ( ) ; / * * * A decimal format for meter family units . * / class MeterFamilyFormat extends DecimalFormat { float unitMultiplier ; MeterFamilyFormat ( String pattern , float unitMultiplier ) { super ( pattern ) ; this . unitMultiplier = unitMultiplier ; } @Override StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { / / Convert centimeter to millimeter return super . format ( number * this . unitMultiplier , result , fieldPosition ) ; } @Override StringBuffer format ( long number , StringBuffer result , FieldPosition fieldPosition ) { return format ( ( double ) number , result , fieldPosition ) ; } @Override Number parse ( String text , ParsePosition pos ) { Number number = super . parse ( text , pos ) ; if ( number = = null ) { return null ; } else { return number . floatValue ( ) / this . unitMultiplier ; } } }
void test30 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; float float0 = lengthUnit0 . unitToCentimeter ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float unitToCentimeter ( float length ) ; }
void test31 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; float float0 = lengthUnit0 . getMinimumLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumLength ( ) ; / * * * Returns the maximum value for length in centimeter . * @since 3 . 4 * / float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test32 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; float float0 = lengthUnit0 . getMaximumElevation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test33 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; float float0 = lengthUnit0 . getMagnetizedLength ( 971 . 40063F , 971 . 40063F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test34 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; float float0 = lengthUnit0 . centimeterToUnit ( ( - 1159 . 544F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float centimeterToUnit ( float length ) ; / * * * Returns the < code > length < / code > given in this unit converted * to a value expressed in centimeter . * @since 2 . 0 * / float unitToCentimeter ( float length ) ; }
void test35 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; String string0 = lengthUnit0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test36 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMagnetizedLength ( 0 . 01F , 0 . 01F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test37 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMagnetizedLength ( 10000 . 0F , 10000 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test38 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMagnetizedLength ( 5 . 541046F , 5 . 541046F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test39 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMagnetizedLength ( 2 . 54F , 2 . 54F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumLength ( ) ; / * * * Returns the maximum value for elevation in centimeter . * @since 3 . 4 * / float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test40 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMagnetizedLength ( 1 . 0F , 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test41 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . INCH ; float float0 = lengthUnit0 . getMagnetizedLength ( 0 . 0F , 0 . 5F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMaximumElevation ( ) { return getMaximumLength ( ) / 10 ; }
void test42 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . getMagnetizedLength ( 0 . 254F , 49 . 632133F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test43 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . MILLIMETER ; float float0 = lengthUnit0 . getMagnetizedLength ( 49 . 632133F , 2 . 54F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test44 ( ) throws Throwable { LengthUnit lengthUnit0 = LengthUnit . CENTIMETER ; float float0 = lengthUnit0 . getMagnetizedLength ( 0 . 0032808399F , 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMagnetizedLength ( float length , float maxDelta ) ; / * * * Returns the value close to the given length under magnetism for meter units . * / float getMagnetizedMeterLength ( float length , float maxDelta ) { / / Use a maximum precision of 1 mm depending on maxDelta maxDelta * = 2 ; float precision = 1 / 10f ; if ( maxDelta > 100 ) { precision = 100 ; } else if ( maxDelta > 10 ) { precision = 10 ; } else if ( maxDelta > 5 ) { precision = 5 ; } else if ( maxDelta > 1 ) { precision = 1 ; } else if ( maxDelta > 0 . 5f ) { precision = 0 . 5f ; } float magnetizedLength = Math . round ( length / precision ) * precision ; if ( magnetizedLength = = 0 & & length > 0 ) { return length ; } else { return magnetizedLength ; } }
void test0 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "" ) ; furnitureCategory0 . getIndexOfPieceOfFurniture ( ( CatalogPieceOfFurniture ) null ) ; int int0 = furnitureCategory0 . getIndexOfPieceOfFurniture ( ( CatalogPieceOfFurniture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfPieceOfFurniture ( CatalogPieceOfFurniture piece ) { checkFurnitureSorted ( ) ; return this . furniture . indexOf ( piece ) ; }
void test1 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "Z" ) ; int int0 = furnitureCategory0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return this . url . hashCode ( ) ; }
void test3 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "RL . A A ) ) " ) ; String string0 = furnitureCategory0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test4 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "t ] 6uG > ~NW + J" ) ; Class < ? > class0 = FurnitureCategory . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , true ) ; float [ ] [ ] floatArray0 = new float [ 3 ] [ 3 ] ; CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture ( "t ] 6uG > ~NW + J" , "" , "t ] 6uG > ~NW + J" , ( Content ) resourceURLContent0 , ( Content ) resourceURLContent0 , ( float ) 0 , ( float ) 0 , ( float ) 0 , ( float ) 0 , true , floatArray0 , "t ] 6uG > ~NW + J" , true , ( BigDecimal ) null , ( BigDecimal ) null ) ; furnitureCategory0 . add ( catalogPieceOfFurniture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFurnitureCount ( ) { return this . furniture . size ( ) ; }
void test5 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( " : r . " ) ; int int0 = furnitureCategory0 . getFurnitureCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFurnitureCount ( ) { return this . furniture . size ( ) ; }
void test6 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "RL . A A ) ) " ) ; List < CatalogPieceOfFurniture > list0 = furnitureCategory0 . getFurniture ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < CatalogPieceOfFurniture > getFurniture ( ) { checkFurnitureSorted ( ) ; return Collections . unmodifiableList ( this . furniture ) ; }
void test7 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "RL . A A ) ) " ) ; int int0 = furnitureCategory0 . compareTo ( furnitureCategory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( CatalogPieceOfFurniture piece ) { int nameComparison = COMPARATOR . compare ( this . name , piece . name ) ; if ( nameComparison ! = 0 ) { return nameComparison ; } else { return this . modifiable = = piece . modifiable ? 0 : ( this . modifiable ? 1 : - 1 ) ; } }
void test9 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( ( String ) null ) ; BigInteger bigInteger0 = BigInteger . TEN ; boolean boolean0 = furnitureCategory0 . equals ( ( Object ) bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test10 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "" ) ; boolean boolean0 = furnitureCategory0 . equals ( ( Object ) furnitureCategory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test11 ( ) throws Throwable { FurnitureCategory furnitureCategory0 = new FurnitureCategory ( "" ) ; FurnitureCategory furnitureCategory1 = new FurnitureCategory ( "4ngT" ) ; boolean boolean0 = furnitureCategory0 . equals ( ( Object ) furnitureCategory1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test0 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , 0 . 0F , ( - 1 . 0F ) , ( - 1 . 0F ) , false , false , false , ( Float ) 0 . 0F , "" , "" ) ; float float0 = homePrint0 . getPaperTopMargin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperHeight ( ) { return this . paperHeight ; }
void test1 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 0 . 0F , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , true , true , true , ( Float ) 0 . 0F , "REVERSE_LANDSCAPE" , "REVERSE_LANDSCAPE" ) ; homePrint0 . getPlanScale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperHeight ( ) { return this . paperHeight ; }
void test2 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . REVERSE_LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 0 . 0F , 1583 . 1896F , 1583 . 1896F , 1583 . 1896F , ( - 1621 . 2007F ) , ( - 1 . 0F ) , false , true , true , ( Float ) ( - 1621 . 2007F ) , "l' ? TMe$8l ? JVgOY , 2 | " , "l' ? TMe$8l ? JVgOY , 2 | " ) ; String string0 = homePrint0 . getHeaderFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView3DPrinted ( ) { return this . view3DPrinted ; }
void test3 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . PORTRAIT ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 1061 . 4519F , 0 . 0F , 0 . 0F , 0 . 0F , ( - 1 . 0F ) , ( - 1 . 0F ) , false , false , false , ( Float ) ( - 1 . 0F ) , "PORTRAIT" , "PORTRAIT" ) ; float float0 = homePrint0 . getPaperBottomMargin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperWidth ( ) { return this . paperWidth ; }
void test4 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 0 . 0F , 0 . 0F , 0 . 0F , ( - 1930 . 7114F ) , 0 . 0F , 0 . 0F , true , true , true , ( Float ) 0 . 0F , ( String ) null , "" ) ; boolean boolean0 = homePrint0 . isFurniturePrinted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperLeftMargin ( ) { return this . paperLeftMargin ; }
void test5 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , ( - 1960 . 1216F ) , ( - 1 . 0F ) , 0 . 0F , ( - 1 . 0F ) , 0 . 0F , ( - 1 . 0F ) , true , true , false , ( Float ) 0 . 0F , "REVERSE_LANDSCAPE" , "REVERSE_LANDSCAPE" ) ; float float0 = homePrint0 . getPaperLeftMargin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperBottomMargin ( ) { return this . paperBottomMargin ; }
void test6 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , ( - 971 . 35223F ) , 763 . 37115F , 0 . 0F , ( - 971 . 35223F ) , ( - 1244 . 6481F ) , ( - 1126 . 3828F ) , false , true , true , ( Float ) ( - 1126 . 3828F ) , "PORTRAIT" , "PORTRAIT" ) ; float float0 = homePrint0 . getPaperHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperLeftMargin ( ) { return this . paperLeftMargin ; }
void test7 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 0 . 0F , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , true , true , true , ( Float ) 0 . 0F , "REVERSE_LANDSCAPE" , "REVERSE_LANDSCAPE" ) ; boolean boolean0 = homePrint0 . isPlanPrinted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperWidth ( ) { return this . paperWidth ; }
void test8 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , 0 . 0F , ( - 1 . 0F ) , ( - 1 . 0F ) , false , false , false , ( Float ) 0 . 0F , "" , "" ) ; boolean boolean0 = homePrint0 . isView3DPrinted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperBottomMargin ( ) { return this . paperBottomMargin ; }
void test9 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , ( - 1960 . 1216F ) , ( - 1 . 0F ) , 0 . 0F , ( - 1 . 0F ) , 0 . 0F , ( - 1 . 0F ) , true , true , false , ( Float ) 0 . 0F , "REVERSE_LANDSCAPE" , "REVERSE_LANDSCAPE" ) ; homePrint0 . getPaperOrientation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperLeftMargin ( ) { return this . paperLeftMargin ; }
void test10 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . REVERSE_LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 0 . 0F , 1583 . 1896F , 1583 . 1896F , 1583 . 1896F , ( - 1621 . 2007F ) , ( - 1 . 0F ) , false , true , true , ( Float ) ( - 1621 . 2007F ) , "l' ? TMe$8l ? JVgOY , 2 | " , "l' ? TMe$8l ? JVgOY , 2 | " ) ; float float0 = homePrint0 . getPaperRightMargin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperLeftMargin ( ) { return this . paperLeftMargin ; }
void test11 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , ( - 971 . 35223F ) , 763 . 37115F , 0 . 0F , ( - 971 . 35223F ) , ( - 1244 . 6481F ) , ( - 1126 . 3828F ) , false , true , true , ( Float ) ( - 1126 . 3828F ) , "PORTRAIT" , "PORTRAIT" ) ; String string0 = homePrint0 . getFooterFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperRightMargin ( ) { return this . paperRightMargin ; }
void test12 ( ) throws Throwable { HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 0 . 0F , 0 . 0F , 0 . 0F , ( - 1930 . 7114F ) , 0 . 0F , 0 . 0F , true , true , true , ( Float ) 0 . 0F , ( String ) null , "" ) ; float float0 = homePrint0 . getPaperWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPaperLeftMargin ( ) { return this . paperLeftMargin ; }
void test0 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) ) ; dimensionLine0 . containsPoint ( ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) ) ; dimensionLine0 . intersectsRectangle ( ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getOffset ( ) { return this . offset ; }
void test1 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F ) ; float [ ] [ ] floatArray0 = dimensionLine0 . getPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test2 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F ) ; float float0 = dimensionLine0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getOffset ( ) { return this . offset ; }
void test3 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 2037 . 7526F , 2037 . 7526F , 2037 . 7526F , 2037 . 7526F , 2037 . 7526F ) ; DimensionLine dimensionLine1 = dimensionLine0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test4 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F ) ; dimensionLine0 . getLengthStyle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYStart ( ) { return this . yStart ; }
void test5 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; dimensionLine0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYEnd ( ) { return this . yEnd ; }
void test6 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; dimensionLine0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYEnd ( ) { return this . yEnd ; }
void test7 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; dimensionLine0 . containsStartExtensionLinetAt ( 0 . 0F , 0 . 0F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXEnd ( ) { return this . xEnd ; }
void test8 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) ) ; dimensionLine0 . intersectsRectangle ( ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) , ( - 90 . 131836F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getOffset ( ) { return this . offset ; }
void test9 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; float float0 = dimensionLine0 . getOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test10 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; dimensionLine0 . move ( 0 . 0F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYEnd ( ) { return this . yEnd ; }
void test11 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F ) ; boolean boolean0 = dimensionLine0 . containsEndExtensionLineAt ( 1696 . 5039F , 13 . 643339F , 1696 . 5039F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test12 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; dimensionLine0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYEnd ( ) { return this . yEnd ; }
void test13 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F ) ; dimensionLine0 . move ( 13 . 643339F , 13 . 643339F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test14 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXEnd ( ) { return this . xEnd ; }
void test15 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F ) ; dimensionLine0 . setOffset ( 13 . 643339F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getOffset ( ) { return this . offset ; }
void test16 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F , 1696 . 5039F ) ; dimensionLine0 . setLengthStyle ( ( TextStyle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYStart ( ) { return this . yStart ; }
void test17 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F , 434 . 0667F ) ; TextStyle textStyle0 = new TextStyle ( 434 . 0667F , true , true ) ; dimensionLine0 . setLengthStyle ( textStyle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXEnd ( ) { return this . xEnd ; }
void test18 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F ) ; dimensionLine0 . setLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXEnd ( ) { return this . xEnd ; }
void test19 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1586 . 9181F , 1586 . 9181F , 1586 . 9181F , 1586 . 9181F , 1586 . 9181F ) ; Level level0 = new Level ( "" , 1586 . 9181F , 1586 . 9181F , 1586 . 9181F ) ; dimensionLine0 . setLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test20 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1 . 7531826F , 1 . 7531826F , 1 . 7531826F , 1 . 7531826F , 1 . 7531826F ) ; Level level0 = new Level ( "" , 1 . 7531826F , 1 . 7531826F , 1 . 7531826F ) ; boolean boolean0 = dimensionLine0 . isAtLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test21 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) ) ; boolean boolean0 = dimensionLine0 . isAtLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getOffset ( ) { return this . offset ; }
void test22 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) ) ; boolean boolean0 = dimensionLine0 . isMiddlePointAt ( ( - 765 . 2073F ) , ( - 765 . 2073F ) , ( - 765 . 2073F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test23 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 1 . 7531826F , 1 . 7531826F , 1 . 7531826F , 1 . 7531826F , 1 . 7531826F ) ; boolean boolean0 = dimensionLine0 . isMiddlePointAt ( 1 . 7531826F , 1 . 7531826F , 1 . 7531826F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test24 ( ) throws Throwable { DimensionLine dimensionLine0 = new DimensionLine ( 2037 . 7526F , 2037 . 7526F , 2037 . 7526F , 2037 . 7526F , 2037 . 7526F ) ; boolean boolean0 = dimensionLine0 . isMiddlePointAt ( 2037 . 7526F , 1050 . 7822F , 2037 . 7526F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMiddlePointAt ( float x , float y , float margin ) { double angle = Math . atan2 ( this . yEnd - this . yStart , this . xEnd - this . xStart ) ; float dx = ( float ) - Math . sin ( angle ) * this . offset ; float dy = ( float ) Math . cos ( angle ) * this . offset ; float xMiddle = ( xStart + xEnd ) / 2 + dx ; float yMiddle = ( yStart + yEnd ) / 2 + dy ; return Math . abs ( x - xMiddle ) < = margin & & Math . abs ( y - yMiddle ) < = margin ; }
void test0 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; SelectionEvent selectionEvent0 = new SelectionEvent ( ( Object ) "u3IH62X1 ; eo~ > " , ( List < ? > ) linkedList0 ) ; List < ? > list0 = selectionEvent0 . getSelectedItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ? extends Object > getSelectedItems ( ) { return this . selectedItems ; }
void test0 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 860 . 4791F ) , 1210 . 6846F ) ; float float0 = backgroundImage0 . getScale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistance ( ) { return this . scaleDistance ; }
void test1 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 860 . 4791F ) , 1210 . 6846F ) ; float float0 = backgroundImage0 . getScaleDistanceXStart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistanceYStart ( ) { return this . scaleDistanceYStart ; }
void test2 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 860 . 4791F ) , 1210 . 6846F ) ; float float0 = backgroundImage0 . getXOrigin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistanceYEnd ( ) { return this . scaleDistanceYEnd ; }
void test3 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 860 . 4791F ) , 1210 . 6846F ) ; float float0 = backgroundImage0 . getScaleDistanceYStart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistanceYEnd ( ) { return this . scaleDistanceYEnd ; }
void test4 ( ) throws Throwable { Class < ? > class0 = Content . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , true ) ; BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) resourceURLContent0 , 1 . 0F , 1 . 0F , ( - 333 . 31458F ) , 1 . 0F , ( - 1799 . 949F ) , 577 . 15204F , 577 . 15204F ) ; float float0 = backgroundImage0 . getYOrigin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXOrigin ( ) { return this . xOrigin ; }
void test5 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 860 . 4791F ) , 1210 . 6846F ) ; float float0 = backgroundImage0 . getScaleDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistanceYStart ( ) { return this . scaleDistanceYStart ; }
void test6 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , ( - 1983 . 5874F ) , 0 . 0F , ( - 1983 . 5874F ) ) ; backgroundImage0 . getImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistanceYEnd ( ) { return this . scaleDistanceYEnd ; }
void test7 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , ( - 1595 . 799F ) , 0 . 0F , ( - 1595 . 799F ) , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , ( - 1 . 0F ) , false ) ; float float0 = backgroundImage0 . getScaleDistanceYEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScaleDistanceXStart ( ) { return this . scaleDistanceXStart ; }
void test8 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , ( - 1595 . 799F ) , 0 . 0F , ( - 1595 . 799F ) , ( - 1 . 0F ) , 0 . 0F , 0 . 0F , ( - 1 . 0F ) , false ) ; float float0 = backgroundImage0 . getScaleDistanceXEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXOrigin ( ) { return this . xOrigin ; }
void test9 ( ) throws Throwable { TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) temporaryURLContent0 , 1 . 0F , ( - 1 . 0F ) , 789 . 436F , 0 . 0F , ( - 1 . 0F ) , 970 . 3548F , 1 . 0F , false ) ; boolean boolean0 = backgroundImage0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getScale ( ) { return getScale ( this . scaleDistance , this . scaleDistanceXStart , this . scaleDistanceYStart , this . scaleDistanceXEnd , this . scaleDistanceYEnd ) ; }
void test10 ( ) throws Throwable { BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 1915 . 5819F ) , 0 . 0F , ( - 860 . 4791F ) , 1210 . 6846F ) ; boolean boolean0 = backgroundImage0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXOrigin ( ) { return this . xOrigin ; }
void test1 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "" ) ; List < CatalogTexture > list0 = texturesCategory0 . getTextures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfTexture ( CatalogTexture texture ) { checkTexturesSorted ( ) ; return this . textures . indexOf ( texture ) ; }
void test2 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "e^O_92~g , > MCP1` , " ) ; int int0 = texturesCategory0 . getTexturesCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTexturesCount ( ) { return this . textures . size ( ) ; }
void test3 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "system protocol handler" ) ; int int0 = texturesCategory0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return this . url . hashCode ( ) ; }
void test4 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "" ) ; URLContent uRLContent0 = new URLContent ( ( URL ) null ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , "" , ( Content ) uRLContent0 , ( float ) 0 , ( float ) 0 , "" , true ) ; texturesCategory0 . add ( catalogTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTexturesCount ( ) { return this . textures . size ( ) ; }
void test5 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "zH" ) ; String string0 = texturesCategory0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test6 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "" ) ; int int0 = texturesCategory0 . compareTo ( texturesCategory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( CatalogPieceOfFurniture piece ) { int nameComparison = COMPARATOR . compare ( this . name , piece . name ) ; if ( nameComparison ! = 0 ) { return nameComparison ; } else { return this . modifiable = = piece . modifiable ? 0 : ( this . modifiable ? 1 : - 1 ) ; } }
void test8 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "system protocol handler" ) ; boolean boolean0 = texturesCategory0 . equals ( ( Object ) ( - 1555 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test9 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "e^O_92~g , > MCP1` , " ) ; boolean boolean0 = texturesCategory0 . equals ( ( Object ) texturesCategory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test10 ( ) throws Throwable { TexturesCategory texturesCategory0 = new TexturesCategory ( "e^O_92~g , > MCP1` , " ) ; TexturesCategory texturesCategory1 = new TexturesCategory ( "1hqz@3#ul ] zA" ) ; boolean boolean0 = texturesCategory0 . equals ( ( Object ) texturesCategory1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof URLContent ) { URLContent urlContent = ( URLContent ) obj ; return urlContent . url = = this . url | | urlContent . url . equals ( this . url ) ; } else { return false ; } }
void test0 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( ( - 21 . 318222F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFontSize ( ) { return this . fontSize ; }
void test1 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( 1 . 2925558F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isItalic ( ) { return this . italic ; }
void test2 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( ( - 21 . 318222F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isItalic ( ) { return this . italic ; }
void test3 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( 540 . 5897F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBold ( ) { return this . bold ; }
void test4 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( 540 . 5897F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFontSize ( ) { return this . fontSize ; }
void test5 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( 1 . 2925558F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBold ( ) { return this . bold ; }
void test6 ( ) throws Throwable { TextStyle textStyle0 = new TextStyle ( ( - 21 . 318222F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFontSize ( ) { return this . fontSize ; }
void test0 ( ) throws Throwable { Sash sash0 = new Sash ( ( - 1044 . 8474F ) , 1040 . 9393F , ( - 1146 . 4833F ) , ( - 1044 . 8474F ) , ( - 1146 . 4833F ) ) ; float float0 = sash0 . getStartAngle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYAxis ( ) { return this . yAxis ; }
void test1 ( ) throws Throwable { Sash sash0 = new Sash ( ( - 1044 . 8474F ) , 1040 . 9393F , ( - 1146 . 4833F ) , ( - 1044 . 8474F ) , ( - 1146 . 4833F ) ) ; float float0 = sash0 . getEndAngle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYAxis ( ) { return this . yAxis ; }
void test2 ( ) throws Throwable { Sash sash0 = new Sash ( ( - 1044 . 8474F ) , 1040 . 9393F , ( - 1146 . 4833F ) , ( - 1044 . 8474F ) , ( - 1146 . 4833F ) ) ; float float0 = sash0 . getWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getStartAngle ( ) { return this . startAngle ; }
void test3 ( ) throws Throwable { Sash sash0 = new Sash ( ( - 142 . 18794F ) , 1193 . 6317F , 0 . 0F , 1490 . 4175F , ( - 206 . 83821F ) ) ; float float0 = sash0 . getYAxis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test4 ( ) throws Throwable { Sash sash0 = new Sash ( 0 . 0F , 396 . 88217F , 396 . 88217F , 0 . 0F , 1 . 0F ) ; float float0 = sash0 . getXAxis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getEndAngle ( ) { return this . endAngle ; }
void test0 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray0 [ 1 ] ; BigInteger bigInteger0 = BigInteger . ZERO ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogLight catalogLight0 = new CatalogLight ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , false , lightSourceArray0 , floatArray0 , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; float float0 = homeLight0 . getPower ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPower ( ) { return this . power ; }
void test1 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray0 [ 1 ] ; BigInteger bigInteger0 = BigInteger . ZERO ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogLight catalogLight0 = new CatalogLight ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , false , lightSourceArray0 , floatArray0 , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; HomeLight homeLight1 = homeLight0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPower ( ) { return this . power ; }
void test2 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray0 [ 1 ] ; BigInteger bigInteger0 = BigInteger . ZERO ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogLight catalogLight0 = new CatalogLight ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , false , lightSourceArray0 , floatArray0 , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( PropertyChangeListener ) null ) ; homeLight0 . removePropertyChangeListener ( ( PropertyChangeListener ) propertyChangeListenerProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPower ( ) { return this . power ; }
void test3 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray0 [ 1 ] ; BigInteger bigInteger0 = BigInteger . ZERO ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogLight catalogLight0 = new CatalogLight ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , false , lightSourceArray0 , floatArray0 , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPower ( ) { return this . power ; }
void test4 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray0 [ 1 ] ; BigInteger bigInteger0 = BigInteger . ZERO ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogLight catalogLight0 = new CatalogLight ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , false , lightSourceArray0 , floatArray0 , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; HomeLight homeLight1 = new HomeLight ( ( Light ) homeLight0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPower ( ) { return this . power ; }
void test5 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 1 ] ; float [ ] [ ] floatArray0 = new float [ 9 ] [ 2 ] ; float [ ] floatArray1 = new float [ 10 ] ; floatArray0 [ 0 ] = floatArray1 ; floatArray0 [ 1 ] = floatArray0 [ 0 ] ; floatArray0 [ 2 ] = floatArray0 [ 1 ] ; BigInteger bigInteger0 = BigInteger . ZERO ; BigDecimal bigDecimal0 = new BigDecimal ( bigInteger0 ) ; CatalogLight catalogLight0 = new CatalogLight ( " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , ( Content ) null , ( Content ) null , ( Content ) null , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , ( - 752 . 6789F ) , false , lightSourceArray0 , floatArray0 , " | , J = [ 4 ; Dv . h ) R' ! 8Ae" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setPower ( 0 . 5F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getNameXOffset ( ) { return this . nameXOffset ; }
void test6 ( ) throws Throwable { LightSource [ ] lightSourceArray0 = new LightSource [ 7 ] ; float [ ] [ ] floatArray0 = new float [ 8 ] [ 6 ] ; BigDecimal bigDecimal0 = new BigDecimal ( ( double ) 1602 . 4323F ) ; CatalogLight catalogLight0 = new CatalogLight ( "CL1 * 9Vwp`" , "CL1 * 9Vwp`" , "CL1 * 9Vwp`" , ( Content ) null , ( Content ) null , 1602 . 4323F , 1602 . 4323F , 1602 . 4323F , 1602 . 4323F , false , lightSourceArray0 , floatArray0 , "CL1 * 9Vwp`" , false , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; homeLight0 . setPower ( ( float ) ( - 1569 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPower ( ) { return this . power ; }
void test1 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; TextureImage textureImage0 = wall0 . getPattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TextureImage getPattern ( int index ) { return this . patterns . get ( index ) ; }
void test2 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; wall0 . move ( 0 . 0F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test4 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; wall0 . intersectsRectangle ( ( - 1 . 0F ) , 0 . 0F , 0 . 0F , ( - 750 . 7855F ) ) ; float [ ] [ ] floatArray0 = wall0 . getPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float [ ] [ ] getPoints ( ) ; / * * * Returns < code > true < / code > if this object intersects * with the horizontal rectangle which opposite corners are at points * ( < code > x0 < / code > , < code > y0 < / code > ) and ( < code > x1 < / code > , < code > y1 < / code > ) . * / boolean intersectsRectangle ( float x0 , float y0 , float x1 , float y1 ) ; / * * * Returns < code > true < / code > if this object contains the point at * ( < code > x < / code > , < code > y < / code > ) with a given < code > margin < / code > . * / boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test5 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; LinkedList < Wall > linkedList0 = new LinkedList < Wall > ( ) ; linkedList0 . offer ( wall0 ) ; List < Wall > list0 = Wall . clone ( ( List < Wall > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeDoorOrWindow clone ( ) { HomeDoorOrWindow clone = ( HomeDoorOrWindow ) super . clone ( ) ; clone . boundToWall = false ; return clone ; }
void test6 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; wall0 . setWallAtEnd ( wall0 ) ; boolean boolean0 = wall0 . containsPoint ( 298 . 7689F , ( - 2022 . 2188F ) , 298 . 7689F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test7 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; wall0 . setWallAtStart ( wall0 ) ; boolean boolean0 = wall0 . containsWallEndAt ( ( - 1827 . 3207F ) , ( - 1827 . 3207F ) , ( - 1827 . 3207F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsWallEndAt ( float x , float y , float margin ) { float [ ] [ ] wallPoints = getPoints ( ) ; Line2D endLine = new Line2D . Float ( wallPoints [ wallPoints . length / 2 - 1 ] [ 0 ] , wallPoints [ wallPoints . length / 2 - 1 ] [ 1 ] , wallPoints [ wallPoints . length / 2 ] [ 0 ] , wallPoints [ wallPoints . length / 2 ] [ 1 ] ) ; return containsShapeAtWithMargin ( endLine , x , y , margin ) ; }
void test8 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; wall0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getThickness ( ) { return this . thickness ; }
void test10 ( ) throws Throwable { Wall wall0 = new Wall ( 17 . 83758F , ( - 984 . 2377F ) , 17 . 83758F , ( - 984 . 2377F ) , 17 . 83758F , 17 . 83758F ) ; float float0 = wall0 . getThickness ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getThickness ( ) { return this . thickness ; }
void test11 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; float float0 = wall0 . getLeftSideShininess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLeftSideShininess ( ) { return this . leftSideShininess ; }
void test12 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; wall0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test13 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; HomeTexture homeTexture0 = wall0 . getRightSideTexture ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeTexture getRightSideTexture ( ) { return this . rightSideTexture ; }
void test14 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; float float0 = wall0 . getRightSideShininess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getRightSideShininess ( ) { return this . rightSideShininess ; }
void test15 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; HomeTexture homeTexture0 = wall0 . getLeftSideTexture ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeTexture getLeftSideTexture ( ) { return this . leftSideTexture ; }
void test16 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; Level level0 = wall0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Level getLevel ( ) { return this . level ; }
void test17 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; float float0 = wall0 . getStartPointToEndPointDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getStartPointToEndPointDistance ( ) { return ( float ) Point2D . distance ( this . xStart , this . yStart , this . xEnd , this . yEnd ) ; }
void test18 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; float float0 = wall0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test19 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; Float float0 = wall0 . getHeight ( ) ; wall0 . setArcExtent ( float0 ) ; float float1 = wall0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . yStart + this . yEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 1 ] ; } }
void test20 ( ) throws Throwable { Wall wall0 = new Wall ( 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F ) ; wall0 . setArcExtent ( ( Float ) ( - 2022 . 2188F ) ) ; float float0 = wall0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test21 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; wall0 . setArcExtent ( ( Float ) ( - 2022 . 2188F ) ) ; wall0 . setArcExtent ( ( Float ) ( - 2022 . 2188F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test22 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; wall0 . setArcExtent ( ( Float ) 313 . 78653F ) ; float float0 = wall0 . getXArcCircleCenter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test23 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; float float0 = wall0 . getXArcCircleCenter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test24 ( ) throws Throwable { Wall wall0 = new Wall ( 302 . 74457F , 302 . 74457F , 0 . 1F , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; float float0 = wall0 . getYArcCircleCenter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . yStart + this . yEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 1 ] ; } }
void test25 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; wall0 . setArcExtent ( ( Float ) 0 . 0F ) ; float float0 = wall0 . getYArcCircleCenter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test26 ( ) throws Throwable { Wall wall0 = new Wall ( 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F ) ; wall0 . setWallAtStart ( wall0 ) ; wall0 . setWallAtStart ( wall0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getRightSideShininess ( ) { return this . rightSideShininess ; }
void test27 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; Wall wall1 = new Wall ( ( - 16 . 156967F ) , ( - 16 . 156967F ) , 19 . 352665F , ( - 109 . 45285F ) , ( - 16 . 156967F ) , ( - 1814 . 8588F ) ) ; wall0 . setWallAtEnd ( wall1 ) ; wall1 . setWallAtStart ( wall0 ) ; wall0 . setWallAtEnd ( wall0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test28 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; wall0 . setWallAtEnd ( ( Wall ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test29 ( ) throws Throwable { Wall wall0 = new Wall ( 302 . 74457F , 302 . 74457F , 0 . 1F , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; Wall wall1 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 302 . 74457F , ( - 937 . 85394F ) ) ; wall1 . setWallAtEnd ( wall1 ) ; wall1 . setWallAtStart ( wall1 ) ; wall1 . setWallAtStart ( wall0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrapezoidal ( ) { return this . height ! = null & & this . heightAtEnd ! = null & & ! this . height . equals ( this . heightAtEnd ) ; }
void test30 ( ) throws Throwable { Wall wall0 = new Wall ( 302 . 74457F , 302 . 74457F , 0 . 1F , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; Wall wall1 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 302 . 74457F , ( - 937 . 85394F ) ) ; wall1 . setWallAtStart ( wall0 ) ; wall1 . setWallAtStart ( wall1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getRightSideShininess ( ) { return this . rightSideShininess ; }
void test31 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; wall0 . setThickness ( 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test32 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; wall0 . setHeight ( ( Float ) ( - 937 . 85394F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test33 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; wall0 . setHeight ( ( Float ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . yStart + this . yEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 1 ] ; } }
void test34 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 105 . 95571F ) , ( - 105 . 95571F ) , 0 . 01F , ( - 105 . 95571F ) , 0 . 01F , ( - 105 . 95571F ) ) ; wall0 . setHeightAtEnd ( ( Float ) ( - 105 . 95571F ) ) ; Level level0 = new Level ( "RIGHT_SIDE_TEXTURE" , ( - 105 . 95571F ) , 0 . 01F , 943 . 5236F ) ; Level level1 = level0 . clone ( ) ; wall0 . setLevel ( level1 ) ; boolean boolean0 = wall0 . isAtLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrapezoidal ( ) { return this . height ! = null & & this . heightAtEnd ! = null & & ! this . height . equals ( this . heightAtEnd ) ; }
void test35 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; wall0 . setHeightAtEnd ( ( Float ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLeftSideShininess ( ) { return this . leftSideShininess ; }
void test36 ( ) throws Throwable { Wall wall0 = new Wall ( 298 . 5855F , 298 . 5855F , 298 . 5855F , 298 . 5855F , 298 . 5855F ) ; wall0 . setHeightAtEnd ( ( Float ) 298 . 5855F ) ; wall0 . setHeightAtEnd ( ( Float ) 298 . 5855F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test37 ( ) throws Throwable { Wall wall0 = new Wall ( 6 . 727928F , 6 . 727928F , 711 . 5539F , 711 . 5539F , 711 . 5539F ) ; boolean boolean0 = wall0 . isTrapezoidal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrapezoidal ( ) { return this . height ! = null & & this . heightAtEnd ! = null & & ! this . height . equals ( this . heightAtEnd ) ; }
void test38 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 105 . 95571F ) , ( - 105 . 95571F ) , 0 . 01F , ( - 105 . 95571F ) , 0 . 01F , ( - 105 . 95571F ) ) ; Level level0 = new Level ( "RIGHT_SIDE_TEXTURE" , ( - 105 . 95571F ) , 0 . 01F , 943 . 5236F ) ; Level level1 = level0 . clone ( ) ; wall0 . setLevel ( level1 ) ; boolean boolean0 = wall0 . isAtLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrapezoidal ( ) { return this . height ! = null & & this . heightAtEnd ! = null & & ! this . height . equals ( this . heightAtEnd ) ; }
void test39 ( ) throws Throwable { Wall wall0 = new Wall ( 228 . 45766F , 228 . 45766F , 0 . 01F , 228 . 45766F , 228 . 45766F , 228 . 45766F ) ; Float float0 = new Float ( 1183 . 1270894447416 ) ; wall0 . setHeightAtEnd ( float0 ) ; Level level0 = new Level ( "PATTERN" , 228 . 45766F , 0 . 01F , 228 . 45766F ) ; Level level1 = level0 . clone ( ) ; wall0 . setLevel ( level1 ) ; boolean boolean0 = wall0 . isAtLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrapezoidal ( ) { return this . height ! = null & & this . heightAtEnd ! = null & & ! this . height . equals ( this . heightAtEnd ) ; }
void test40 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; Integer integer0 = new Integer ( ( - 289 ) ) ; wall0 . setLeftSideColor ( integer0 ) ; wall0 . setLeftSideColor ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYStart ( ) { return this . yStart ; }
void test41 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; wall0 . setLeftSideColor ( ( Integer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test42 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; Integer integer0 = new Integer ( ( - 18 ) ) ; wall0 . setRightSideColor ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setRightSideColor ( Integer rightSideColor ) { if ( rightSideColor ! = this . rightSideColor | | ( rightSideColor ! = null & & ! rightSideColor . equals ( this . rightSideColor ) ) ) { Integer oldLeftSideColor = this . rightSideColor ; this . rightSideColor = rightSideColor ; this . propertyChangeSupport . firePropertyChange ( Property . RIGHT_SIDE_COLOR . name ( ) , oldLeftSideColor , rightSideColor ) ; } }
void test43 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; wall0 . setRightSideColor ( ( Integer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test44 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 1 . 7326932F ) , ( - 1 . 7326932F ) , ( - 1 . 7326932F ) , ( - 16 . 9862F ) , ( - 1 . 7326932F ) , ( - 1311 . 096F ) ) ; TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "Ea" , "Ea" , ( Content ) temporaryURLContent0 , ( - 16 . 9862F ) , ( - 1 . 7326932F ) , "Ea" ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; wall0 . setLeftSideTexture ( homeTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test45 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; wall0 . setLeftSideTexture ( ( HomeTexture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrapezoidal ( ) { return this . height ! = null & & this . heightAtEnd ! = null & & ! this . height . equals ( this . heightAtEnd ) ; }
void test46 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; Class < ? > class0 = Wall . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , true ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "E65 , ` ; D4" , ( Content ) resourceURLContent0 , ( - 1358 . 2253F ) , ( - 1358 . 2253F ) ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; wall0 . setRightSideTexture ( homeTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYEnd ( ) { return this . yEnd ; }
void test47 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; wall0 . setRightSideTexture ( ( HomeTexture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test48 ( ) throws Throwable { Wall wall0 = new Wall ( 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F ) ; wall0 . setLeftSideShininess ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getThickness ( ) { return this . thickness ; }
void test49 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; wall0 . setLeftSideShininess ( ( - 2022 . 2188F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLeftSideShininess ( ) { return this . leftSideShininess ; }
void test50 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; wall0 . setRightSideShininess ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test51 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; wall0 . setRightSideShininess ( 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getRightSideShininess ( ) { return this . rightSideShininess ; }
void test52 ( ) throws Throwable { Wall wall0 = new Wall ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F , ( - 777 . 05396F ) , 1 . 0F ) ; wall0 . setPattern ( ( TextureImage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXEnd ( ) { return this . xEnd ; }
void test53 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; Class < ? > class0 = Wall . class ; ResourceURLContent resourceURLContent0 = new ResourceURLContent ( class0 , "" , true ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "E65 , ` ; D4" , ( Content ) resourceURLContent0 , ( - 1358 . 2253F ) , ( - 1358 . 2253F ) ) ; wall0 . setPattern ( ( TextureImage ) catalogTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getStartPointToEndPointDistance ( ) { return ( float ) Point2D . distance ( this . xStart , this . yStart , this . xEnd , this . yEnd ) ; }
void test54 ( ) throws Throwable { Wall wall0 = new Wall ( 302 . 74457F , 302 . 74457F , 0 . 1F , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; wall0 . setLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getStartPointToEndPointDistance ( ) { return ( float ) Point2D . distance ( this . xStart , this . yStart , this . xEnd , this . yEnd ) ; }
void test55 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; boolean boolean0 = wall0 . isAtLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAtLevel ( Level level ) { return this . level = = level ; }
void test56 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; Float float0 = wall0 . getHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAtLevel ( Level level ) { return this . level = = level ; }
void test57 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; wall0 . setArcExtent ( ( Float ) 313 . 78653F ) ; Float float0 = wall0 . getArcExtent ( ) ; Level level0 = new Level ( "" , ( - 937 . 85394F ) , ( float ) float0 , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAtLevel ( Level level ) { return this . level = = level ; }
void test58 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 319 . 463F , ( - 937 . 85394F ) ) ; wall0 . setWallAtStart ( wall0 ) ; wall0 . setWallAtEnd ( wall0 ) ; boolean boolean0 = wall0 . containsPoint ( 319 . 463F , ( - 2010 . 4833F ) , 319 . 463F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test59 ( ) throws Throwable { Wall wall0 = new Wall ( 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F ) ; Wall wall1 = new Wall ( 313 . 78653F , 0 . 0F , 313 . 78653F , ( - 2022 . 2188F ) , 1 . 0F , 313 . 78653F ) ; wall0 . setWallAtEnd ( wall1 ) ; wall1 . setWallAtStart ( wall0 ) ; boolean boolean0 = wall1 . containsPoint ( 313 . 78653F , 1 . 0F , 313 . 78653F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsWallEndAt ( float x , float y , float margin ) { float [ ] [ ] wallPoints = getPoints ( ) ; Line2D endLine = new Line2D . Float ( wallPoints [ wallPoints . length / 2 - 1 ] [ 0 ] , wallPoints [ wallPoints . length / 2 - 1 ] [ 1 ] , wallPoints [ wallPoints . length / 2 ] [ 0 ] , wallPoints [ wallPoints . length / 2 ] [ 1 ] ) ; return containsShapeAtWithMargin ( endLine , x , y , margin ) ; }
void test60 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; wall0 . setXStart ( ( - 2022 . 2188F ) ) ; wall0 . setWallAtEnd ( wall0 ) ; wall0 . setWallAtStart ( wall0 ) ; wall0 . getPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXStart ( ) { return this . xStart ; }
void test61 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 302 . 74457F , ( - 937 . 85394F ) ) ; wall0 . setYEnd ( ( - 937 . 85394F ) ) ; wall0 . setWallAtEnd ( wall0 ) ; wall0 . setWallAtStart ( wall0 ) ; wall0 . getPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getStartPointToEndPointDistance ( ) { return ( float ) Point2D . distance ( this . xStart , this . yStart , this . xEnd , this . yEnd ) ; }
void test62 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; Wall wall1 = new Wall ( ( - 16 . 156967F ) , ( - 16 . 156967F ) , 19 . 352665F , ( - 109 . 45285F ) , ( - 16 . 156967F ) , ( - 1814 . 8588F ) ) ; wall0 . setWallAtEnd ( wall1 ) ; wall1 . setWallAtStart ( wall0 ) ; wall0 . containsWallStartAt ( 295 . 68555F , 1236 . 792F , 0 . 0F ) ; boolean boolean0 = wall1 . intersectsRectangle ( ( - 1418 . 4769F ) , 0 . 0F , 43 . 812046F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean intersectsRectangle ( float x0 , float y0 , float x1 , float y1 ) ; / * * * Returns < code > true < / code > if this object contains the point at * ( < code > x < / code > , < code > y < / code > ) with a given < code > margin < / code > . * / boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test63 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; Wall wall1 = new Wall ( ( - 16 . 156967F ) , ( - 16 . 156967F ) , 19 . 352665F , ( - 109 . 45285F ) , ( - 16 . 156967F ) , ( - 1814 . 8588F ) ) ; wall0 . setWallAtEnd ( wall1 ) ; wall1 . setThickness ( 1685 . 7253F ) ; wall1 . setWallAtStart ( wall0 ) ; wall0 . setXStart ( ( - 2022 . 2188F ) ) ; wall0 . containsWallStartAt ( 295 . 68555F , 1236 . 792F , 0 . 0F ) ; boolean boolean0 = wall1 . intersectsRectangle ( ( - 1418 . 4769F ) , 0 . 0F , 43 . 812046F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getThickness ( ) { return this . thickness ; }
void test64 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; Wall wall1 = new Wall ( 298 . 7689F , 0 . 0F , 298 . 7689F , ( - 2022 . 2188F ) , ( - 2022 . 2188F ) , 298 . 7689F ) ; wall1 . setWallAtStart ( wall0 ) ; boolean boolean0 = wall1 . containsPoint ( 298 . 7689F , ( - 2022 . 2188F ) , 298 . 7689F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test65 ( ) throws Throwable { Wall wall0 = new Wall ( 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F ) ; Wall wall1 = new Wall ( 313 . 78653F , 295 . 68555F , 313 . 78653F , ( - 2022 . 2188F ) , 1 . 0F , 313 . 78653F ) ; wall0 . setWallAtEnd ( wall1 ) ; wall1 . setYEnd ( 295 . 68555F ) ; wall1 . setWallAtStart ( wall0 ) ; boolean boolean0 = wall1 . containsPoint ( 313 . 78653F , 1 . 0F , 313 . 78653F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsWallEndAt ( float x , float y , float margin ) { float [ ] [ ] wallPoints = getPoints ( ) ; Line2D endLine = new Line2D . Float ( wallPoints [ wallPoints . length / 2 - 1 ] [ 0 ] , wallPoints [ wallPoints . length / 2 - 1 ] [ 1 ] , wallPoints [ wallPoints . length / 2 ] [ 0 ] , wallPoints [ wallPoints . length / 2 ] [ 1 ] ) ; return containsShapeAtWithMargin ( endLine , x , y , margin ) ; }
void test66 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; Wall wall1 = new Wall ( 298 . 7689F , 0 . 0F , 298 . 7689F , ( - 2022 . 2188F ) , ( - 2022 . 2188F ) , 298 . 7689F ) ; wall1 . setWallAtEnd ( wall0 ) ; boolean boolean0 = wall1 . containsPoint ( 298 . 7689F , ( - 2022 . 2188F ) , 298 . 7689F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test67 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 800 . 144F ) , 0 . 0F , ( - 1827 . 3207F ) , 1412 . 4357F , ( - 800 . 144F ) , 0 . 0F ) ; Float float0 = wall0 . getHeight ( ) ; wall0 . setArcExtent ( float0 ) ; wall0 . containsWallStartAt ( ( - 1827 . 8315F ) , ( - 1827 . 8315F ) , ( float ) float0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . yStart + this . yEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 1 ] ; } }
void test68 ( ) throws Throwable { Wall wall0 = new Wall ( 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F , 313 . 78653F ) ; wall0 . setArcExtent ( ( Float ) ( - 2022 . 2188F ) ) ; boolean boolean0 = wall0 . containsPoint ( 313 . 78653F , 1 . 0F , 313 . 78653F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test69 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 7689F , ( - 937 . 85394F ) ) ; wall0 . setYStart ( 0 . 0F ) ; wall0 . setArcExtent ( ( Float ) ( - 2022 . 2188F ) ) ; boolean boolean0 = wall0 . containsPoint ( 298 . 7689F , ( - 2022 . 2188F ) , 298 . 7689F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getYStart ( ) { return this . yStart ; }
void test70 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , 0 . 0F , ( - 937 . 85394F ) , 313 . 78653F , ( - 937 . 85394F ) ) ; wall0 . setArcExtent ( ( Float ) 313 . 78653F ) ; boolean boolean0 = wall0 . intersectsRectangle ( ( - 1 . 0F ) , 0 . 0F , 0 . 0F , ( - 750 . 7855F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getXArcCircleCenter ( ) { if ( this . arcExtent = = null ) { return ( this . xStart + this . xEnd ) / 2 ; } else { return getArcCircleCenter ( ) [ 0 ] ; } }
void test71 ( ) throws Throwable { Wall wall0 = new Wall ( ( - 937 . 85394F ) , ( - 937 . 85394F ) , ( - 937 . 85394F ) , 298 . 93805F , ( - 937 . 85394F ) ) ; Wall wall1 = new Wall ( ( - 16 . 156967F ) , ( - 16 . 156967F ) , 19 . 352665F , ( - 109 . 45285F ) , ( - 16 . 156967F ) , ( - 1814 . 8588F ) ) ; wall0 . setWallAtEnd ( wall1 ) ; wall1 . setWallAtStart ( wall0 ) ; wall0 . move ( ( - 1833 . 7413F ) , ( - 324 . 7815F ) ) ; wall0 . setXStart ( ( - 2022 . 2188F ) ) ; wall0 . containsWallStartAt ( 295 . 68555F , 1236 . 792F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLength ( ) { return ( float ) Point2D . distance ( getXStart ( ) , getYStart ( ) , getXEnd ( ) , getYEnd ( ) ) ; }
void test0 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "" , "" , ( Content ) null , 1370 . 6719F , ( - 1838 . 5946F ) , "" ) ; boolean boolean0 = catalogTexture0 . isModifiable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test1 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , false ) ; String string0 = catalogTexture0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModifiable ( ) { return this . modifiable ; }
void test2 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , false ) ; Proxy . Type proxy_Type0 = Proxy . Type . SOCKS ; catalogTexture0 . equals ( ( Object ) proxy_Type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test3 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( " * ) b + 1 ] ) C$~fb`d" , "" , ( Content ) null , 833 . 5864F , 833 . 5864F , "" , true ) ; HomeTexture homeTexture0 = new HomeTexture ( ( TextureImage ) catalogTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test4 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , false ) ; TexturesCategory texturesCategory0 = new TexturesCategory ( "Unknown resource " ) ; catalogTexture0 . setCategory ( texturesCategory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModifiable ( ) { return this . modifiable ; }
void test5 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( ( String ) null , ( String ) null , ( Content ) null , 1 . 0F , 1045 . 1556F , ( String ) null ) ; catalogTexture0 . getCategory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getWidth ( ) { return this . width ; }
void test6 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "" , "" , ( Content ) null , 1370 . 6719F , ( - 1838 . 5946F ) , "" ) ; int int0 = catalogTexture0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return this . url . hashCode ( ) ; }
void test7 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , false ) ; String string0 = catalogTexture0 . getCreator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test8 ( ) throws Throwable { TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "" , ( Content ) temporaryURLContent0 , 689 . 2092F , 1 . 0F , false ) ; int int0 = catalogTexture0 . compareTo ( catalogTexture0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModifiable ( ) { return this . modifiable ; }
void test9 ( ) throws Throwable { ResourceURLContent resourceURLContent0 = new ResourceURLContent ( ( URL ) null , true ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "Rh : cvs5M [ " , ( Content ) resourceURLContent0 , 668 . 97894F , 1883 . 3732F ) ; CatalogTexture catalogTexture1 = new CatalogTexture ( "" , "" , ( Content ) resourceURLContent0 , 0 . 0F , 1883 . 3732F , "Rh : cvs5M [ " ) ; int int0 = catalogTexture0 . compareTo ( catalogTexture1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModifiable ( ) { return this . modifiable ; }
void test10 ( ) throws Throwable { CatalogTexture catalogTexture0 = new CatalogTexture ( "_K\"m , Fnnk" , ( Content ) null , ( - 1 . 0F ) , ( - 1371 . 8452F ) , true ) ; CatalogTexture catalogTexture1 = new CatalogTexture ( "_K\"m , Fnnk" , "_K\"m , Fnnk" , ( Content ) null , ( - 1371 . 8452F ) , ( - 1371 . 8452F ) , "_K\"m , Fnnk" , false ) ; int int0 = catalogTexture0 . compareTo ( catalogTexture1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test11 ( ) throws Throwable { TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent ( ( URL ) null ) ; CatalogTexture catalogTexture0 = new CatalogTexture ( "R : \"S" , "R : \"S" , ( Content ) temporaryURLContent0 , ( - 1347 . 7897F ) , ( - 1347 . 7897F ) , "R : \"S" , false ) ; CatalogTexture catalogTexture1 = new CatalogTexture ( "R : \"S" , "R : \"S" , ( Content ) temporaryURLContent0 , ( - 1347 . 7897F ) , ( - 1347 . 7897F ) , "R : \"S" , true ) ; int int0 = catalogTexture0 . compareTo ( catalogTexture1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModifiable ( ) { return this . modifiable ; }
void test0 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) ) ; ObserverCamera observerCamera1 = ( ObserverCamera ) observerCamera0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFieldOfView ( ) { return this . fieldOfView ; }
void test1 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 6 . 416848F , 6 . 416848F , 6 . 416848F , 6 . 416848F , 6 . 416848F , 6 . 416848F ) ; observerCamera0 . setCamera ( ( Camera ) observerCamera0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test2 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F ) ; observerCamera0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test3 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 6 . 416848F , 6 . 416848F , 6 . 416848F , 6 . 416848F , 6 . 416848F , 6 . 416848F ) ; observerCamera0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test4 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F ) ; observerCamera0 . isFixedSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test5 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) ) ; observerCamera0 . move ( ( - 538 . 7404F ) , ( - 538 . 7404F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test6 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 37 . 476074F , 0 . 0F , 37 . 476074F , 0 . 0F , 37 . 476074F , 0 . 0F ) ; observerCamera0 . setFixedSize ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test7 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) , ( - 1113 . 797F ) ) ; observerCamera0 . setFixedSize ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test8 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F , 193 . 57121F ) ; observerCamera0 . getPoints ( ) ; observerCamera0 . getPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test9 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) ) ; boolean boolean0 = observerCamera0 . containsPoint ( ( - 538 . 7404F ) , ( - 538 . 7404F ) , ( - 538 . 7404F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test10 ( ) throws Throwable { ObserverCamera observerCamera0 = new ObserverCamera ( 37 . 476074F , 0 . 0F , 37 . 476074F , 0 . 0F , 37 . 476074F , 0 . 0F ) ; observerCamera0 . containsPoint ( 0 . 0F , 37 . 476074F , 0 . 0F ) ; boolean boolean0 = observerCamera0 . intersectsRectangle ( 37 . 476074F , 37 . 476074F , 37 . 476074F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test0 ( ) throws Throwable { Level level0 = new Level ( "" , 398 . 96793F , 398 . 96793F , 398 . 96793F ) ; float float0 = level0 . getElevation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test1 ( ) throws Throwable { Level level0 = new Level ( "\"#g = Q" , 840 . 33606F , 840 . 33606F , 0 . 0F ) ; level0 . getBackgroundImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test2 ( ) throws Throwable { Level level0 = new Level ( ( String ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; level0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test3 ( ) throws Throwable { Level level0 = new Level ( ( String ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; level0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test4 ( ) throws Throwable { Level level0 = new Level ( "x" , 1617 . 0793F , ( - 1419 . 729F ) , ( - 1419 . 729F ) ) ; Level level1 = level0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test5 ( ) throws Throwable { Level level0 = new Level ( "A~ ) " , ( - 1 . 9751844F ) , ( - 1 . 9751844F ) , ( - 1 . 9751844F ) ) ; boolean boolean0 = level0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test6 ( ) throws Throwable { Level level0 = new Level ( "x" , 1617 . 0793F , ( - 1419 . 729F ) , ( - 1419 . 729F ) ) ; float float0 = level0 . getFloorThickness ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test7 ( ) throws Throwable { Level level0 = new Level ( "x" , 1617 . 0793F , ( - 1419 . 729F ) , ( - 1419 . 729F ) ) ; float float0 = level0 . getHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test8 ( ) throws Throwable { Level level0 = new Level ( "A~ ) " , ( - 1 . 9751844F ) , ( - 1 . 9751844F ) , ( - 1 . 9751844F ) ) ; String string0 = level0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test9 ( ) throws Throwable { Level level0 = new Level ( ( String ) null , ( - 11 . 867401F ) , ( - 11 . 867401F ) , ( - 11 . 867401F ) ) ; level0 . setName ( " ? z } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test10 ( ) throws Throwable { Level level0 = new Level ( ( String ) null , ( - 1 . 0F ) , ( - 1 . 0F ) , ( - 1 . 0F ) ) ; level0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test11 ( ) throws Throwable { Level level0 = new Level ( "#j ! i" , ( - 889 . 8436F ) , ( - 889 . 8436F ) , ( - 889 . 8436F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test12 ( ) throws Throwable { Level level0 = new Level ( "x" , 1617 . 0793F , ( - 1419 . 729F ) , ( - 1419 . 729F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test13 ( ) throws Throwable { Level level0 = new Level ( "#j ! i" , ( - 889 . 8436F ) , ( - 889 . 8436F ) , ( - 889 . 8436F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test14 ( ) throws Throwable { Level level0 = new Level ( "\"#g = Q" , 840 . 33606F , 840 . 33606F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test15 ( ) throws Throwable { Level level0 = new Level ( "A~ ) " , ( - 1 . 9751844F ) , ( - 1 . 9751844F ) , ( - 1 . 9751844F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test16 ( ) throws Throwable { Level level0 = new Level ( "Ce\" * Z * ' < d7% - ^" , 51 . 64561F , 51 . 64561F , 51 . 64561F ) ; level0 . setHeight ( 16 . 32495F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test17 ( ) throws Throwable { Level level0 = new Level ( "\"#g = Q" , 840 . 33606F , 840 . 33606F , 0 . 0F ) ; level0 . setBackgroundImage ( ( BackgroundImage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test18 ( ) throws Throwable { Level level0 = new Level ( "" , 398 . 96793F , 398 . 96793F , 398 . 96793F ) ; BackgroundImage backgroundImage0 = new BackgroundImage ( ( Content ) null , 398 . 96793F , 398 . 96793F , 398 . 96793F , 398 . 96793F , 398 . 96793F , 398 . 96793F , 398 . 96793F , false ) ; level0 . setBackgroundImage ( backgroundImage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloorThickness ( ) { return this . floorThickness ; }
void test19 ( ) throws Throwable { Level level0 = new Level ( "Ce\" * Z * ' < d7% - ^" , 51 . 64561F , 51 . 64561F , 51 . 64561F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test20 ( ) throws Throwable { Level level0 = new Level ( "\"#g = Q" , 840 . 33606F , 840 . 33606F , 0 . 0F ) ; level0 . setVisible ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test0 ( ) throws Throwable { Label label0 = new Label ( " + ~ | " , 32 . 711945F , 32 . 711945F ) ; PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy ( " + ~ | " , ( PropertyChangeListener ) null ) ; label0 . removePropertyChangeListener ( ( PropertyChangeListener ) propertyChangeListenerProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test1 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; label0 . intersectsRectangle ( 18 . 413935F , 18 . 413935F , 18 . 413935F , 18 . 413935F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test2 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; label0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test3 ( ) throws Throwable { Label label0 = new Label ( "" , ( - 91 . 579124F ) , ( - 91 . 579124F ) ) ; float float0 = label0 . getAngle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test4 ( ) throws Throwable { Label label0 = new Label ( " + ~ | " , 32 . 711945F , 32 . 711945F ) ; label0 . move ( 32 . 711945F , 32 . 711945F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test5 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; label0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test6 ( ) throws Throwable { Label label0 = new Label ( "p" , ( - 19 . 267645F ) , ( - 19 . 267645F ) ) ; float [ ] [ ] floatArray0 = label0 . getPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test7 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; label0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test8 ( ) throws Throwable { Label label0 = new Label ( "p" , ( - 19 . 267645F ) , ( - 19 . 267645F ) ) ; label0 . getStyle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test9 ( ) throws Throwable { Label label0 = new Label ( "" , ( - 91 . 579124F ) , ( - 91 . 579124F ) ) ; Label label1 = label0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test10 ( ) throws Throwable { Label label0 = new Label ( "" , ( - 91 . 579124F ) , ( - 91 . 579124F ) ) ; label0 . setText ( "~f_ ! zjjqzr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test11 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; label0 . setText ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test12 ( ) throws Throwable { Label label0 = new Label ( "" , ( - 373 . 43896F ) , ( - 373 . 43896F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test13 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test14 ( ) throws Throwable { Label label0 = new Label ( "NN | #D% : Y$_" , ( - 621 . 9493F ) , ( - 621 . 9493F ) ) ; TextStyle textStyle0 = new TextStyle ( ( - 621 . 9493F ) ) ; label0 . setStyle ( textStyle0 ) ; label0 . setStyle ( textStyle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test15 ( ) throws Throwable { Label label0 = new Label ( "kCY" , 0 . 0F , 0 . 0F ) ; label0 . setAngle ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test16 ( ) throws Throwable { Label label0 = new Label ( "" , ( - 91 . 579124F ) , ( - 91 . 579124F ) ) ; label0 . setAngle ( ( - 91 . 579124F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAngle ( ) { return this . angle ; }
void test17 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; label0 . setLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test18 ( ) throws Throwable { Label label0 = new Label ( "kCY" , 0 . 0F , 0 . 0F ) ; Level level0 = new Level ( "kCY" , 1148 . 2119F , 0 . 0F , 1148 . 2119F ) ; label0 . setLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test19 ( ) throws Throwable { Label label0 = new Label ( "NN | #D% : Y$_" , ( - 621 . 9493F ) , ( - 621 . 9493F ) ) ; Level level0 = new Level ( "NN | #D% : Y$_" , ( - 621 . 9493F ) , ( - 621 . 9493F ) , ( - 621 . 9493F ) ) ; boolean boolean0 = label0 . isAtLevel ( level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test20 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; boolean boolean0 = label0 . isAtLevel ( ( Level ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test21 ( ) throws Throwable { Label label0 = new Label ( "" , ( - 91 . 579124F ) , ( - 91 . 579124F ) ) ; boolean boolean0 = label0 . containsPoint ( ( - 91 . 579124F ) , ( - 91 . 579124F ) , ( - 91 . 579124F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test22 ( ) throws Throwable { Label label0 = new Label ( "kCY" , 0 . 0F , 0 . 0F ) ; boolean boolean0 = label0 . containsPoint ( 0 . 0F , 1148 . 2119F , 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getX ( ) { return this . x ; }
void test23 ( ) throws Throwable { Label label0 = new Label ( ( String ) null , 18 . 413935F , 18 . 413935F ) ; boolean boolean0 = label0 . containsPoint ( 18 . 413935F , 18 . 413935F , 18 . 413935F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsPoint ( float x , float y , float margin ) ; / * * * Moves this object of ( < code > dx < / code > , < code > dy < / code > ) units . * / void move ( float dx , float dy ) ; / * * * Returns a clone of this object . * / Selectable clone ( ) ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test3 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "expandsSelectedPaths" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test5 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test6 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test7 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test8 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "localhost / 127 . 0 . 0 . 1" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test9 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test10 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test11 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test12 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "localhost / 127 . 0 . 0 . 1" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test13 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test14 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void displayView ( ) { JFrame homeFrame = new JFrame ( ) { { / / Replace frame rootPane by home controller view setRootPane ( HomeFramePane . this ) ; } } ; / / Update frame image and title Image [ ] frameImages = { new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon . png" ) ) . getImage ( ) , new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon32x32 . png" ) ) . getImage ( ) } ; try { / / Call Java 1 . 6 setIconImages by reflection homeFrame . getClass ( ) . getMethod ( "setIconImages" , List . class ) . invoke ( homeFrame , Arrays . asList ( frameImages ) ) ; } catch ( Exception ex ) { / / Call setIconImage available in previous versions homeFrame . setIconImage ( frameImages [ 0 ] ) ; } updateFrameTitle ( homeFrame , this . home , this . application ) ; / / Change component orientation applyComponentOrientation ( ComponentOrientation . getOrientation ( Locale . getDefault ( ) ) ) ; / / Compute frame size and location computeFrameBounds ( this . home , homeFrame ) ; / / Enable windows to update their content while window resizing getToolkit ( ) . setDynamicLayout ( true ) ; / / The best MVC solution should be to avoid the following statements / / but Mac OS X accepts to display the menu bar of a frame in the screen / / menu bar only if this menu bar depends directly on its root pane HomeView homeView = this . controller . getHomeController ( ) . getView ( ) ; if ( homeView instanceof JRootPane ) { JRootPane homePane = ( JRootPane ) homeView ; setJMenuBar ( homePane . getJMenuBar ( ) ) ; homePane . setJMenuBar ( null ) ; } / / Add listeners to model and frame addListeners ( this . home , this . application , this . controller . getHomeController ( ) , homeFrame ) ; / / Show frame homeFrame . setVisible ( true ) ; }
void test15 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "expandsSelectedPaths" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test16 ( ) throws Throwable { HomeFurnitureController . FurniturePaint homeFurnitureController_FurniturePaint0 = HomeFurnitureController . FurniturePaint . TEXTURED ; Class < HomeFurnitureController . FurniturePaint > class0 = homeFurnitureController_FurniturePaint0 . getDeclaringClass ( ) ; Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) class0 ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test17 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test18 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test19 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test20 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test21 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test22 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test23 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test24 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test25 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test26 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test27 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test28 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test29 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "localhost / 127 . 0 . 0 . 1" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test30 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "expandsSelectedPaths" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test31 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test32 ( ) throws Throwable { Home home0 = new Home ( 8 . 0058565F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "javax . swing . CellRendererPane [ , 0 , 0 , 0x0 , invalid , hidden ] " ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test33 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "expandsSelectedPaths" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test34 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test35 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test36 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "localhost / 127 . 0 . 0 . 1" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test37 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBasePlanItemEditable ( ) { return this . basePlanItemEditable ; }
void test38 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "localhost / 127 . 0 . 0 . 1" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test39 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test40 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "localhost / 127 . 0 . 0 . 1" ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTexturable ( ) { return this . texturable ; }
void test41 ( ) throws Throwable { HomeFurnitureController . FurniturePaint homeFurnitureController_FurniturePaint0 = HomeFurnitureController . FurniturePaint . TEXTURED ; Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) homeFurnitureController_FurniturePaint0 ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test42 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test43 ( ) throws Throwable { Vector < HomePieceOfFurniture > vector0 = new Vector < HomePieceOfFurniture > ( ) ; Home home0 = new Home ( ( List < HomePieceOfFurniture > ) vector0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test44 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test45 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeformable ( ) { return this . deformable ; }
void test46 ( ) throws Throwable { Home home0 = new Home ( ( - 5 . 281316F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProportional ( ) { return this . proportional ; }
void test47 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResizable ( ) { return this . resizable ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( 1441 . 187F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void displayView ( ) { JFrame homeFrame = new JFrame ( ) { { / / Replace frame rootPane by home controller view setRootPane ( HomeFramePane . this ) ; } } ; / / Update frame image and title Image [ ] frameImages = { new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon . png" ) ) . getImage ( ) , new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon32x32 . png" ) ) . getImage ( ) } ; try { / / Call Java 1 . 6 setIconImages by reflection homeFrame . getClass ( ) . getMethod ( "setIconImages" , List . class ) . invoke ( homeFrame , Arrays . asList ( frameImages ) ) ; } catch ( Exception ex ) { / / Call setIconImage available in previous versions homeFrame . setIconImage ( frameImages [ 0 ] ) ; } updateFrameTitle ( homeFrame , this . home , this . application ) ; / / Change component orientation applyComponentOrientation ( ComponentOrientation . getOrientation ( Locale . getDefault ( ) ) ) ; / / Compute frame size and location computeFrameBounds ( this . home , homeFrame ) ; / / Enable windows to update their content while window resizing getToolkit ( ) . setDynamicLayout ( true ) ; / / The best MVC solution should be to avoid the following statements / / but Mac OS X accepts to display the menu bar of a frame in the screen / / menu bar only if this menu bar depends directly on its root pane HomeView homeView = this . controller . getHomeController ( ) . getView ( ) ; if ( homeView instanceof JRootPane ) { JRootPane homePane = ( JRootPane ) homeView ; setJMenuBar ( homePane . getJMenuBar ( ) ) ; homePane . setJMenuBar ( null ) ; } / / Add listeners to model and frame addListeners ( this . home , this . application , this . controller . getHomeController ( ) , homeFrame ) ; / / Show frame homeFrame . setVisible ( true ) ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( 1450 . 7893F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( 1441 . 187F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test3 ( ) throws Throwable { Home home0 = new Home ( 1450 . 7893F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Float getDiameter ( ) { return this . diameter ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( 43 . 85F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "text / plain" ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLatitudeInDegrees ( ) { return this . latitudeInDegrees ; }
void test5 ( ) throws Throwable { Home home0 = new Home ( 43 . 85F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "text / plain" ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test6 ( ) throws Throwable { Home home0 = new Home ( 1450 . 7893F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; CompassController compassController0 = new CompassController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return this . visible ; }
void test9 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureController furnitureController0 = new FurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPieceOfFurnitureDeletable ( HomePieceOfFurniture piece ) { return true ; }
void test10 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; FurnitureController furnitureController0 = homeController0 . getFurnitureController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteSelection ( ) { deleteFurniture ( Home . getFurnitureSubList ( this . home . getSelectedItems ( ) ) ) ; }
void test16 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; FurnitureController furnitureController0 = homeController0 . getFurnitureController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addFurniture ( List < HomePieceOfFurniture > furniture ) { boolean oldBasePlanLocked = this . home . isBasePlanLocked ( ) ; List < Selectable > oldSelection = this . home . getSelectedItems ( ) ; HomePieceOfFurniture [ ] newFurniture = furniture . toArray ( new HomePieceOfFurniture [ furniture . size ( ) ] ) ; / / Get indices of furniture added to home int [ ] furnitureIndex = new int [ furniture . size ( ) ] ; int endIndex = this . home . getFurniture ( ) . size ( ) ; boolean basePlanLocked = oldBasePlanLocked ; for ( int i = 0 ; i < furnitureIndex . length ; i + + ) { furnitureIndex [ i ] = endIndex + + ; / / Unlock base plan if the piece is a part of it basePlanLocked & = ! isPieceOfFurniturePartOfBasePlan ( newFurniture [ i ] ) ; } boolean newBasePlanLocked = basePlanLocked ; Level furnitureLevel = this . home . getSelectedLevel ( ) ; doAddFurniture ( newFurniture , furnitureIndex , furnitureLevel , null , newBasePlanLocked ) ; if ( this . undoSupport ! = null ) { UndoableEdit undoableEdit = new AbstractUndoableEdit ( ) { @Override void undo ( ) throws CannotUndoException { super . undo ( ) ; doDeleteFurniture ( newFurniture , oldBasePlanLocked ) ; home . setSelectedItems ( oldSelection ) ; } @Override void redo ( ) throws CannotRedoException { super . redo ( ) ; doAddFurniture ( newFurniture , furnitureIndex , furnitureLevel , null , newBasePlanLocked ) ; } @Override String getPresentationName ( ) { return preferences . getLocalizedString ( FurnitureController . class , "undoAddFurnitureName" ) ; } } ; this . undoSupport . postEdit ( undoableEdit ) ; } }
void test18 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureController furnitureController0 = new FurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , ( UndoableEditSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteSelection ( ) { deleteFurniture ( Home . getFurnitureSubList ( this . home . getSelectedItems ( ) ) ) ; }
void test19 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureController furnitureController0 = new FurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPieceOfFurniturePartOfBasePlan ( HomePieceOfFurniture piece ) { return ! piece . isMovable ( ) | | piece . isDoorOrWindow ( ) ; }
void test20 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureController furnitureController0 = new FurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; float [ ] [ ] floatArray0 = new float [ 6 ] [ 8 ] ; LightSource [ ] lightSourceArray0 = new LightSource [ 9 ] ; BigDecimal bigDecimal0 = BigDecimal . TEN ; CatalogLight catalogLight0 = new CatalogLight ( "" , "" , "" , ( Content ) null , ( Content ) null , ( Content ) null , 0 . 0F , 0 . 0F , 0 . 0F , 0 . 0F , true , lightSourceArray0 , floatArray0 , "" , true , false , true , bigDecimal0 , bigDecimal0 ) ; HomeLight homeLight0 = new HomeLight ( ( Light ) catalogLight0 ) ; HomeLight homeLight1 = ( HomeLight ) furnitureController0 . createHomePieceOfFurniture ( ( PieceOfFurniture ) homeLight0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test22 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureController furnitureController0 = new FurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; furnitureController0 . toggleFurnitureSortOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toggleFurnitureSortOrder ( ) { this . home . setFurnitureDescendingSorted ( ! this . home . isFurnitureDescendingSorted ( ) ) ; }
void test23 ( ) throws Throwable { Home home0 = new Home ( ( - 1921 . 026F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) null ) ; FurnitureController furnitureController0 = new FurnitureController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sortFurniture ( HomePieceOfFurniture . SortableProperty furnitureProperty ) { / / Compute sort algorithm described in javadoc HomePieceOfFurniture . SortableProperty oldProperty = this . home . getFurnitureSortedProperty ( ) ; boolean oldDescending = this . home . isFurnitureDescendingSorted ( ) ; boolean descending = false ; if ( furnitureProperty . equals ( oldProperty ) ) { if ( oldDescending ) { furnitureProperty = null ; } else { descending = true ; } } this . home . setFurnitureSortedProperty ( furnitureProperty ) ; this . home . setFurnitureDescendingSorted ( descending ) ; }
void test1 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ThreadedTaskController threadedTaskController0 = new ThreadedTaskController ( ( Callable < Void > ) null , "" , ( ThreadedTaskController . ExceptionHandler ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; ThreadedTaskPanel threadedTaskPanel0 = ( ThreadedTaskPanel ) threadedTaskController0 . getView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" View getView ( ) { / / Create view lazily only once it's needed if ( this . homeFrameView = = null ) { this . homeFrameView = new HomeFramePane ( this . home , this . application , this . contentManager , this ) ; } return this . homeFrameView ; }
void test2 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ThreadedTaskController threadedTaskController0 = new ThreadedTaskController ( ( Callable < Void > ) null , "" , ( ThreadedTaskController . ExceptionHandler ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; threadedTaskController0 . cancelTask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTaskRunning ( ) { return this . task ! = null & & ! this . task . isDone ( ) ; }
void test3 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ThreadedTaskController threadedTaskController0 = new ThreadedTaskController ( ( Callable < Void > ) null , "" , ( ThreadedTaskController . ExceptionHandler ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; boolean boolean0 = threadedTaskController0 . isTaskRunning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTaskRunning ( ) { return this . task ! = null & & ! this . task . isDone ( ) ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LabelController labelController0 = new LabelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; labelController0 . createLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LabelController labelController0 = new LabelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; LabelController . Property labelController_Property0 = LabelController . Property . TEXT ; labelController0 . addPropertyChangeListener ( labelController_Property0 , ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test3 ( ) throws Throwable { Home home0 = new Home ( ( float ) 1406L ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "GBR" ) ; LabelController labelController0 = new LabelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLabelPartOfBasePlan ( Label label ) { return true ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( ( float ) 1406L ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "GBR" ) ; LabelController labelController0 = new LabelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; LabelController . Property labelController_Property0 = LabelController . Property . TEXT ; labelController0 . removePropertyChangeListener ( labelController_Property0 , ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test7 ( ) throws Throwable { Home home0 = new Home ( 8 . 117201F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LabelController labelController0 = new LabelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; labelController0 . setText ( "" ) ; labelController0 . createLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test8 ( ) throws Throwable { Home home0 = new Home ( 0 . 0F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LabelController labelController0 = new LabelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; labelController0 . modifyLabels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test3 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test5 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test6 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test7 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test8 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test9 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void displayView ( ) { JFrame homeFrame = new JFrame ( ) { { / / Replace frame rootPane by home controller view setRootPane ( HomeFramePane . this ) ; } } ; / / Update frame image and title Image [ ] frameImages = { new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon . png" ) ) . getImage ( ) , new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon32x32 . png" ) ) . getImage ( ) } ; try { / / Call Java 1 . 6 setIconImages by reflection homeFrame . getClass ( ) . getMethod ( "setIconImages" , List . class ) . invoke ( homeFrame , Arrays . asList ( frameImages ) ) ; } catch ( Exception ex ) { / / Call setIconImage available in previous versions homeFrame . setIconImage ( frameImages [ 0 ] ) ; } updateFrameTitle ( homeFrame , this . home , this . application ) ; / / Change component orientation applyComponentOrientation ( ComponentOrientation . getOrientation ( Locale . getDefault ( ) ) ) ; / / Compute frame size and location computeFrameBounds ( this . home , homeFrame ) ; / / Enable windows to update their content while window resizing getToolkit ( ) . setDynamicLayout ( true ) ; / / The best MVC solution should be to avoid the following statements / / but Mac OS X accepts to display the menu bar of a frame in the screen / / menu bar only if this menu bar depends directly on its root pane HomeView homeView = this . controller . getHomeController ( ) . getView ( ) ; if ( homeView instanceof JRootPane ) { JRootPane homePane = ( JRootPane ) homeView ; setJMenuBar ( homePane . getJMenuBar ( ) ) ; homePane . setJMenuBar ( null ) ; } / / Add listeners to model and frame addListeners ( this . home , this . application , this . controller . getHomeController ( ) , homeFrame ) ; / / Show frame homeFrame . setVisible ( true ) ; }
void test10 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test11 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test12 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test13 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test14 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test15 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test16 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test17 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test18 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test19 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test20 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test21 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test22 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test23 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test24 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test25 ( ) throws Throwable { Home home0 = new Home ( ) ; PhotoController photoController0 = new PhotoController ( home0 , ( UserPreferences ) null , ( View ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; PageSetupController pageSetupController0 = new PageSetupController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; HomePrint . PaperOrientation homePrint_PaperOrientation0 = HomePrint . PaperOrientation . LANDSCAPE ; HomePrint homePrint0 = new HomePrint ( homePrint_PaperOrientation0 , 15 . 753513F , 15 . 753513F , 15 . 753513F , 15 . 753513F , 15 . 753513F , 15 . 753513F , false , false , false , ( Float ) 15 . 753513F , " > A" , " > A" ) ; pageSetupController0 . setPrint ( homePrint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlanPrinted ( ) { return this . planPrinted ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getElevation ( ) { return this . elevation ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPitchInDegrees ( ) { return this . pitchInDegrees ; }
void test3 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumElevation ( ) { return this . minimumElevation ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( ( - 1 . 0F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void displayView ( ) { JFrame homeFrame = new JFrame ( ) { { / / Replace frame rootPane by home controller view setRootPane ( HomeFramePane . this ) ; } } ; / / Update frame image and title Image [ ] frameImages = { new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon . png" ) ) . getImage ( ) , new ImageIcon ( HomeFramePane . class . getResource ( "resources / frameIcon32x32 . png" ) ) . getImage ( ) } ; try { / / Call Java 1 . 6 setIconImages by reflection homeFrame . getClass ( ) . getMethod ( "setIconImages" , List . class ) . invoke ( homeFrame , Arrays . asList ( frameImages ) ) ; } catch ( Exception ex ) { / / Call setIconImage available in previous versions homeFrame . setIconImage ( frameImages [ 0 ] ) ; } updateFrameTitle ( homeFrame , this . home , this . application ) ; / / Change component orientation applyComponentOrientation ( ComponentOrientation . getOrientation ( Locale . getDefault ( ) ) ) ; / / Compute frame size and location computeFrameBounds ( this . home , homeFrame ) ; / / Enable windows to update their content while window resizing getToolkit ( ) . setDynamicLayout ( true ) ; / / The best MVC solution should be to avoid the following statements / / but Mac OS X accepts to display the menu bar of a frame in the screen / / menu bar only if this menu bar depends directly on its root pane HomeView homeView = this . controller . getHomeController ( ) . getView ( ) ; if ( homeView instanceof JRootPane ) { JRootPane homePane = ( JRootPane ) homeView ; setJMenuBar ( homePane . getJMenuBar ( ) ) ; homePane . setJMenuBar ( null ) ; } / / Add listeners to model and frame addListeners ( this . home , this . application , this . controller . getHomeController ( ) , homeFrame ) ; / / Show frame homeFrame . setVisible ( true ) ; }
void test5 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFieldOfViewInDegrees ( ) { return this . fieldOfViewInDegrees ; }
void test6 ( ) throws Throwable { Home home0 = new Home ( ) ; Level level0 = new Level ( "" , ( - 329 . 966F ) , ( - 329 . 966F ) , ( - 329 . 966F ) ) ; home0 . setSelectedLevel ( level0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getY ( ) { return this . y ; }
void test7 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumElevation ( ) { return this . minimumElevation ; }
void test8 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMinimumElevation ( ) { return this . minimumElevation ; }
void test9 ( ) throws Throwable { Home home0 = new Home ( ) ; Level level0 = new Level ( "" , ( - 329 . 966F ) , ( - 329 . 966F ) , ( - 329 . 966F ) ) ; home0 . setSelectedLevel ( level0 ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ObserverCameraController observerCameraController0 = new ObserverCameraController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPitchInDegrees ( ) { return this . pitchInDegrees ; }
void test0 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureCatalogController furnitureCatalogController0 = new FurnitureCatalogController ( furnitureCatalog0 , ( ViewFactory ) swingViewFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" View getView ( ) { / / Create view lazily only once it's needed if ( this . homeFrameView = = null ) { this . homeFrameView = new HomeFramePane ( this . home , this . application , this . contentManager , this ) ; } return this . homeFrameView ; }
void test2 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureCatalogController furnitureCatalogController0 = new FurnitureCatalogController ( furnitureCatalog0 , ( ViewFactory ) swingViewFactory0 ) ; furnitureCatalogController0 . getView ( ) ; List < CatalogPieceOfFurniture > list0 = furnitureCatalogController0 . getSelectedFurniture ( ) ; furnitureCatalogController0 . setSelectedFurniture ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelectedFurniture ( List < HomePieceOfFurniture > selectedFurniture ) { if ( this . home . isBasePlanLocked ( ) ) { selectedFurniture = getFurnitureNotPartOfBasePlan ( selectedFurniture ) ; } this . home . setSelectedItems ( selectedFurniture ) ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( ( - 1852 . 4812F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { String applicationVersion = getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationVersion" ) ; String versionInformation = System . getProperty ( "com . eteks . sweethome3d . deploymentInformation" ) ; if ( versionInformation ! = null ) { applicationVersion + = " " + versionInformation ; } return applicationVersion ; }
void test7 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; ContentManager contentManager0 = homeController0 . getContentManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentManager getContentManager ( ) { if ( this . contentManager = = null ) { this . contentManager = new FileContentManagerWithRecordedLastDirectories ( getUserPreferences ( ) , getClass ( ) ) ; } return this . contentManager ; }
void test11 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; homeController0 . setVisualProperty ( " / F QAv < '" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { String applicationVersion = getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationVersion" ) ; String versionInformation = System . getProperty ( "com . eteks . sweethome3d . deploymentInformation" ) ; if ( versionInformation ! = null ) { applicationVersion + = " " + versionInformation ; } return applicationVersion ; }
void test14 ( ) throws Throwable { Home home0 = new Home ( ( - 16 . 568972F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; homeController0 . deleteBackgroundImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { String applicationVersion = getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationVersion" ) ; String versionInformation = System . getProperty ( "com . eteks . sweethome3d . deploymentInformation" ) ; if ( versionInformation ! = null ) { applicationVersion + = " " + versionInformation ; } return applicationVersion ; }
void test16 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; FurnitureController furnitureController0 = homeController0 . getFurnitureController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FurnitureController getFurnitureController ( ) { / / Create sub controller lazily only once it's needed if ( this . furnitureController = = null ) { this . furnitureController = new FurnitureController ( this . home , this . preferences , this . viewFactory , this . contentManager , getUndoableEditSupport ( ) ) ; } return this . furnitureController ; }
void test17 ( ) throws Throwable { Home home0 = new Home ( 1887 . 0593F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; Vector < Compass > vector0 = new Vector < Compass > ( ) ; homeController0 . paste ( ( List < ? extends Selectable > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paste ( List < ? extends Selectable > items ) { / / Check if pasted items and currently selected items overlap List < Selectable > selectedItems = this . home . getSelectedItems ( ) ; float pastedItemsDelta = 0 ; if ( items . size ( ) = = selectedItems . size ( ) ) { / / The default delta used to be able to distinguish dropped items from previous selection pastedItemsDelta = 20 ; for ( Selectable pastedItem : items ) { / / Search which item of selected items it may overlap float [ ] [ ] pastedItemPoints = pastedItem . getPoints ( ) ; boolean pastedItemOverlapSelectedItem = false ; for ( Selectable selectedItem : selectedItems ) { if ( Arrays . deepEquals ( pastedItemPoints , selectedItem . getPoints ( ) ) ) { pastedItemOverlapSelectedItem = true ; break ; } } if ( ! pastedItemOverlapSelectedItem ) { pastedItemsDelta = 0 ; break ; } } } addPastedItems ( items , pastedItemsDelta , pastedItemsDelta , false , "undoPasteName" ) ; }
void test19 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; List < String > list0 = homeController0 . getRecentHomes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > getRecentHomes ( ) { return Collections . unmodifiableList ( this . recentHomes ) ; }
void test20 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; String string0 = homeController0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { String applicationVersion = getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationVersion" ) ; String versionInformation = System . getProperty ( "com . eteks . sweethome3d . deploymentInformation" ) ; if ( versionInformation ! = null ) { applicationVersion + = " " + versionInformation ; } return applicationVersion ; }
void test21 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; HomeController homeController0 = new HomeController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 ) ; homeController0 . detachView ( ( View ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { String applicationVersion = getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationVersion" ) ; String versionInformation = System . getProperty ( "com . eteks . sweethome3d . deploymentInformation" ) ; if ( versionInformation ! = null ) { applicationVersion + = " " + versionInformation ; } return applicationVersion ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; LevelController . Property levelController_Property0 = LevelController . Property . NAME ; BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI ( ) ; levelController0 . removePropertyChangeListener ( levelController_Property0 , ( PropertyChangeListener ) basicRootPaneUI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test5 ( ) throws Throwable { Home home0 = new Home ( 1967 . 8053F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "HEIGHT" ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; Level [ ] levelArray0 = levelController0 . getLevels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Level [ ] getLevels ( ) { return this . levels . clone ( ) ; }
void test6 ( ) throws Throwable { Home home0 = new Home ( ( - 1988 . 0216F ) ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; String string0 = levelController0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test8 ( ) throws Throwable { Home home0 = new Home ( ( - 1419 . 3293F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; LevelController . Property levelController_Property0 = LevelController . Property . SELECT_LEVEL_INDEX ; BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI ( ) ; levelController0 . addPropertyChangeListener ( levelController_Property0 , ( PropertyChangeListener ) basicRootPaneUI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test9 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPropertyEditable ( Property property ) { switch ( property ) { case FLOOR_THICKNESS : List < Level > levels = this . home . getLevels ( ) ; Level selectedLevel = this . home . getSelectedLevel ( ) ; int selectedLevelIndex ; return selectedLevel ! = null & & ( selectedLevel . getElevation ( ) > 0 | | ( ( selectedLevelIndex = levels . indexOf ( selectedLevel ) ) ! = 0 & & levels . get ( selectedLevelIndex - 1 ) . getElevation ( ) ! = selectedLevel . getElevation ( ) ) ) ; default : return true ; } }
void test10 ( ) throws Throwable { LevelController . Property levelController_Property0 = LevelController . Property . ELEVATION ; Home home0 = new Home ( 1967 . 8053F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "HEIGHT" ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPropertyEditable ( Property property ) { switch ( property ) { case FLOOR_THICKNESS : List < Level > levels = this . home . getLevels ( ) ; Level selectedLevel = this . home . getSelectedLevel ( ) ; int selectedLevelIndex ; return selectedLevel ! = null & & ( selectedLevel . getElevation ( ) > 0 | | ( ( selectedLevelIndex = levels . indexOf ( selectedLevel ) ) ! = 0 & & levels . get ( selectedLevelIndex - 1 ) . getElevation ( ) ! = selectedLevel . getElevation ( ) ) ) ; default : return true ; } }
void test11 ( ) throws Throwable { Home home0 = new Home ( 1967 . 8053F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "HEIGHT" ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; levelController0 . setName ( "HEIGHT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test12 ( ) throws Throwable { Home home0 = new Home ( ( - 1988 . 0216F ) ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; levelController0 . setElevation ( ( Float ) ( - 1988 . 0216F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test13 ( ) throws Throwable { Home home0 = new Home ( ( - 1988 . 0216F ) ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; levelController0 . setFloorThickness ( ( Float ) ( - 1988 . 0216F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test14 ( ) throws Throwable { Home home0 = new Home ( 1967 . 8053F ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ( Object ) "HEIGHT" ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; levelController0 . setHeight ( ( Float ) 1967 . 8053F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test15 ( ) throws Throwable { Home home0 = new Home ( ( - 1988 . 0216F ) ) ; UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport ( ) ; LevelController levelController0 = new LevelController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , undoableEditSupport0 ) ; levelController0 . modifyLevels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return getUserPreferences ( ) . getLocalizedString ( SweetHome3D . class , "applicationName" ) ; }
void test1 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; TextureChoiceController textureChoiceController0 = new TextureChoiceController ( ( String ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; String string0 = textureChoiceController0 . getDialogTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDialogTitle ( ) { return this . title ; }
void test2 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; TextureChoiceController textureChoiceController0 = new TextureChoiceController ( ( String ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; HomeTexture homeTexture0 = textureChoiceController0 . getTexture ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomeTexture getTexture ( ) { return this . texture ; }
void test4 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; TextureChoiceController textureChoiceController0 = new TextureChoiceController ( ( String ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; TextureChoiceController . Property textureChoiceController_Property0 = TextureChoiceController . Property . TEXTURE ; MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI ( ) ; textureChoiceController0 . removePropertyChangeListener ( textureChoiceController_Property0 , ( PropertyChangeListener ) metalRootPaneUI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDialogTitle ( ) { return this . title ; }
void test5 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; TextureChoiceController textureChoiceController0 = new TextureChoiceController ( ( String ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; TextureChoiceComponent textureChoiceComponent0 = ( TextureChoiceComponent ) textureChoiceController0 . getView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" View getView ( ) { / / Create view lazily only once it's needed if ( this . homeFrameView = = null ) { this . homeFrameView = new HomeFramePane ( this . home , this . application , this . contentManager , this ) ; } return this . homeFrameView ; }
void test6 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; TextureChoiceController textureChoiceController0 = new TextureChoiceController ( ( String ) null , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; textureChoiceController0 . setTexture ( ( HomeTexture ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDialogTitle ( ) { return this . title ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( ( - 54 . 946594F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( 2 . 0666666F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test3 ( ) throws Throwable { VideoController . Property videoController_Property0 = VideoController . Property . TIME ; Home home0 = new Home ( ( - 47 . 117855F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( ( - 47 . 117855F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test5 ( ) throws Throwable { Home home0 = new Home ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test6 ( ) throws Throwable { Home home0 = new Home ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrameRate ( ) { return this . frameRate ; }
void test7 ( ) throws Throwable { Home home0 = new Home ( ( - 54 . 946594F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test8 ( ) throws Throwable { Home home0 = new Home ( 2 . 0666666F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test9 ( ) throws Throwable { Home home0 = new Home ( 2 . 0666666F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test10 ( ) throws Throwable { Home home0 = new Home ( ( - 2037 . 8195F ) ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test11 ( ) throws Throwable { Home home0 = new Home ( 2 . 0666666F ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test12 ( ) throws Throwable { Home home0 = new Home ( ( - 2037 . 8195F ) ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test13 ( ) throws Throwable { Home home0 = new Home ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test14 ( ) throws Throwable { Home home0 = new Home ( ( - 47 . 117855F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test15 ( ) throws Throwable { Home home0 = new Home ( ( - 54 . 946594F ) ) ; SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) swingViewFactory0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return this . time ; }
void test16 ( ) throws Throwable { Home home0 = new Home ( ) ; VideoController videoController0 = new VideoController ( home0 , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" View getView ( ) { / / Create view lazily only once it's needed if ( this . homeFrameView = = null ) { this . homeFrameView = new HomeFramePane ( this . home , this . application , this . contentManager , this ) ; } return this . homeFrameView ; }
void test3 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 1054 ) ; OBJWriter oBJWriter0 = new OBJWriter ( ( Writer ) charArrayWriter0 ) ; char [ ] charArray0 = new char [ 5 ] ; oBJWriter0 . write ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( ) throws RecorderException ; / * * * Adds the < code > listener < / code > in parameter to these preferences . * < br > Caution : a user preferences instance generally exists during all the application ; * therefore you should take care of not bounding permanently listeners to this * object ( for example , do not create anonymous listeners on user preferences * in classes depending on an edited home ) . * / void addPropertyChangeListener ( Property property , PropertyChangeListener listener ) { this . propertyChangeSupport . addPropertyChangeListener ( property . name ( ) , listener ) ; }
void test4 ( ) throws Throwable { OBJWriter oBJWriter0 = new OBJWriter ( ( OutputStream ) null , "#lW8 { Aj " , 1775 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OBJWriter ( File objFile ) throws FileNotFoundException , IOException { this ( objFile , null , - 1 ) ; }
void test7 ( ) throws Throwable { DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences ( false , ( UserPreferences ) null ) ; DefaultUserPreferences defaultUserPreferences1 = new DefaultUserPreferences ( false , ( UserPreferences ) defaultUserPreferences0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoSaveDelayForRecovery ( ) { return this . autoSaveDelayForRecovery ; }
void test1 ( ) throws Throwable { DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences ( false , ( UserPreferences ) null ) ; File file0 = new File ( "s@eW [ GYTEc ? " , "s@eW [ GYTEc ? " ) ; DefaultTexturesCatalog defaultTexturesCatalog0 = new DefaultTexturesCatalog ( ( UserPreferences ) defaultUserPreferences0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test2 ( ) throws Throwable { URL [ ] uRLArray0 = new URL [ 15 ] ; DefaultTexturesCatalog defaultTexturesCatalog0 = new DefaultTexturesCatalog ( uRLArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test3 ( ) throws Throwable { DefaultTexturesCatalog defaultTexturesCatalog0 = new DefaultTexturesCatalog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoriesCount ( ) { return this . categories . size ( ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DefaultHomeOutputStream defaultHomeOutputStream0 = new DefaultHomeOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; Home home0 = new Home ( ) ; defaultHomeOutputStream0 . writeHome ( home0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeHome ( Home home , String name ) throws RecorderException { HttpURLConnection connection = null ; try { / / Open a stream to server connection = ( HttpURLConnection ) new URL ( this . writeHomeURL ) . openConnection ( ) ; connection . setRequestMethod ( "POST" ) ; String multiPartBoundary = " - - - - - - - - - #@ & $ ! d3emohteews ! $ & @# - - - - - - - - - " ; connection . setRequestProperty ( "Content - Type" , "multipart / form - data ; charset = UTF - 8 ; boundary = " + multiPartBoundary ) ; connection . setDoOutput ( true ) ; connection . setDoInput ( true ) ; connection . setUseCaches ( false ) ; / / Post home part OutputStream out = connection . getOutputStream ( ) ; out . write ( ( " - - " + multiPartBoundary + "\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . write ( ( "Content - Disposition : form - data ; name = \"home\" ; filename = \"" + name . replace ( '\"' , '\'' ) + "\"\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . write ( ( "Content - Type : application / octet - stream\r\n\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . flush ( ) ; DefaultHomeOutputStream homeOut = new DefaultHomeOutputStream ( out , 9 , this . contentRecording ) ; / / Write home with HomeOuputStream homeOut . writeHome ( home ) ; homeOut . flush ( ) ; / / Post last boundary out . write ( ( "\r\n - - " + multiPartBoundary + " - - \r\n" ) . getBytes ( "UTF - 8" ) ) ; out . close ( ) ; / / Read response InputStream in = connection . getInputStream ( ) ; int read = in . read ( ) ; in . close ( ) ; if ( read ! = '1' ) { throw new RecorderException ( "Saving home " + name + " failed" ) ; } } catch ( InterruptedIOException ex ) { throw new InterruptedRecorderException ( "Save " + name + " interrupted" ) ; } catch ( IOException ex ) { throw new RecorderException ( "Can't save home " + name , ex ) ; } finally { if ( connection ! = null ) { connection . disconnect ( ) ; } } }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; ContentRecording contentRecording0 = ContentRecording . INCLUDE_NO_CONTENT ; DefaultHomeOutputStream defaultHomeOutputStream0 = new DefaultHomeOutputStream ( ( OutputStream ) bufferedOutputStream0 , 0 , contentRecording0 ) ; defaultHomeOutputStream0 . writeHome ( ( Home ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeHome ( Home home , String name ) throws RecorderException { HttpURLConnection connection = null ; try { / / Open a stream to server connection = ( HttpURLConnection ) new URL ( this . writeHomeURL ) . openConnection ( ) ; connection . setRequestMethod ( "POST" ) ; String multiPartBoundary = " - - - - - - - - - #@ & $ ! d3emohteews ! $ & @# - - - - - - - - - " ; connection . setRequestProperty ( "Content - Type" , "multipart / form - data ; charset = UTF - 8 ; boundary = " + multiPartBoundary ) ; connection . setDoOutput ( true ) ; connection . setDoInput ( true ) ; connection . setUseCaches ( false ) ; / / Post home part OutputStream out = connection . getOutputStream ( ) ; out . write ( ( " - - " + multiPartBoundary + "\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . write ( ( "Content - Disposition : form - data ; name = \"home\" ; filename = \"" + name . replace ( '\"' , '\'' ) + "\"\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . write ( ( "Content - Type : application / octet - stream\r\n\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . flush ( ) ; DefaultHomeOutputStream homeOut = new DefaultHomeOutputStream ( out , 9 , this . contentRecording ) ; / / Write home with HomeOuputStream homeOut . writeHome ( home ) ; homeOut . flush ( ) ; / / Post last boundary out . write ( ( "\r\n - - " + multiPartBoundary + " - - \r\n" ) . getBytes ( "UTF - 8" ) ) ; out . close ( ) ; / / Read response InputStream in = connection . getInputStream ( ) ; int read = in . read ( ) ; in . close ( ) ; if ( read ! = '1' ) { throw new RecorderException ( "Saving home " + name + " failed" ) ; } } catch ( InterruptedIOException ex ) { throw new InterruptedRecorderException ( "Save " + name + " interrupted" ) ; } catch ( IOException ex ) { throw new RecorderException ( "Can't save home " + name , ex ) ; } finally { if ( connection ! = null ) { connection . disconnect ( ) ; } } }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DefaultHomeOutputStream defaultHomeOutputStream0 = new DefaultHomeOutputStream ( ( OutputStream ) byteArrayOutputStream0 , 4 , true ) ; Home home0 = new Home ( ( float ) 4 ) ; defaultHomeOutputStream0 . writeHome ( home0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeHome ( Home home , String name ) throws RecorderException { HttpURLConnection connection = null ; try { / / Open a stream to server connection = ( HttpURLConnection ) new URL ( this . writeHomeURL ) . openConnection ( ) ; connection . setRequestMethod ( "POST" ) ; String multiPartBoundary = " - - - - - - - - - #@ & $ ! d3emohteews ! $ & @# - - - - - - - - - " ; connection . setRequestProperty ( "Content - Type" , "multipart / form - data ; charset = UTF - 8 ; boundary = " + multiPartBoundary ) ; connection . setDoOutput ( true ) ; connection . setDoInput ( true ) ; connection . setUseCaches ( false ) ; / / Post home part OutputStream out = connection . getOutputStream ( ) ; out . write ( ( " - - " + multiPartBoundary + "\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . write ( ( "Content - Disposition : form - data ; name = \"home\" ; filename = \"" + name . replace ( '\"' , '\'' ) + "\"\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . write ( ( "Content - Type : application / octet - stream\r\n\r\n" ) . getBytes ( "UTF - 8" ) ) ; out . flush ( ) ; DefaultHomeOutputStream homeOut = new DefaultHomeOutputStream ( out , 9 , this . contentRecording ) ; / / Write home with HomeOuputStream homeOut . writeHome ( home ) ; homeOut . flush ( ) ; / / Post last boundary out . write ( ( "\r\n - - " + multiPartBoundary + " - - \r\n" ) . getBytes ( "UTF - 8" ) ) ; out . close ( ) ; / / Read response InputStream in = connection . getInputStream ( ) ; int read = in . read ( ) ; in . close ( ) ; if ( read ! = '1' ) { throw new RecorderException ( "Saving home " + name + " failed" ) ; } } catch ( InterruptedIOException ex ) { throw new InterruptedRecorderException ( "Save " + name + " interrupted" ) ; } catch ( IOException ex ) { throw new RecorderException ( "Can't save home " + name , ex ) ; } finally { if ( connection ! = null ) { connection . disconnect ( ) ; } } }
void test0 ( ) throws Throwable { HomeFileRecorder homeFileRecorder0 = new HomeFileRecorder ( ) ; boolean boolean0 = homeFileRecorder0 . exists ( "q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( String name ) throws RecorderException { String [ ] availableHomes = getAvailableHomes ( ) ; for ( String home : availableHomes ) { if ( home . equals ( name ) ) { return true ; } } return false ; }
void test2 ( ) throws Throwable { DefaultEditorKit . CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit . CutAction ( ) ; ResourceAction . ButtonAction resourceAction_ButtonAction0 = new ResourceAction . ButtonAction ( ( Action ) defaultEditorKit_CutAction0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "ActionCommandKey" , 0 , "ActionCommandKey" ) ; resourceAction_ButtonAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test3 ( ) throws Throwable { DefaultEditorKit . CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit . CutAction ( ) ; ResourceAction . ToolBarAction resourceAction_ToolBarAction0 = new ResourceAction . ToolBarAction ( ( Action ) defaultEditorKit_CutAction0 ) ; resourceAction_ToolBarAction0 . putValue ( "QJAm7 / 1 ? 0fES" , "SwingDisplayedMnemonicIndexKey" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test4 ( ) throws Throwable { DefaultEditorKit . InsertBreakAction defaultEditorKit_InsertBreakAction0 = new DefaultEditorKit . InsertBreakAction ( ) ; ResourceAction . ToolBarAction resourceAction_ToolBarAction0 = new ResourceAction . ToolBarAction ( ( Action ) defaultEditorKit_InsertBreakAction0 ) ; ResourceAction . ButtonAction resourceAction_ButtonAction0 = new ResourceAction . ButtonAction ( ( Action ) resourceAction_ToolBarAction0 ) ; PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy ( ( String ) null , ( PropertyChangeListener ) null ) ; resourceAction_ButtonAction0 . removePropertyChangeListener ( ( PropertyChangeListener ) propertyChangeListenerProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test5 ( ) throws Throwable { DefaultEditorKit . PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit . PasteAction ( ) ; ResourceAction . ButtonAction resourceAction_ButtonAction0 = new ResourceAction . ButtonAction ( ( Action ) defaultEditorKit_PasteAction0 ) ; boolean boolean0 = resourceAction_ButtonAction0 . isEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test6 ( ) throws Throwable { DefaultEditorKit . CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit . CutAction ( ) ; ResourceAction . PopupMenuItemAction resourceAction_PopupMenuItemAction0 = new ResourceAction . PopupMenuItemAction ( ( Action ) defaultEditorKit_CutAction0 ) ; ResourceAction . ToolBarAction resourceAction_ToolBarAction0 = new ResourceAction . ToolBarAction ( ( Action ) defaultEditorKit_CutAction0 ) ; resourceAction_PopupMenuItemAction0 . firePropertyChange ( "model" , ( Object ) "SwingDisplayedMnemonicIndexKey" , ( Object ) resourceAction_ToolBarAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test7 ( ) throws Throwable { DefaultEditorKit . CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit . CutAction ( ) ; ResourceAction . ButtonAction resourceAction_ButtonAction0 = new ResourceAction . ButtonAction ( ( Action ) defaultEditorKit_CutAction0 ) ; resourceAction_ButtonAction0 . setEnabled ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test8 ( ) throws Throwable { DefaultEditorKit . InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit . InsertContentAction ( ) ; ResourceAction . PopupMenuItemAction resourceAction_PopupMenuItemAction0 = new ResourceAction . PopupMenuItemAction ( ( Action ) defaultEditorKit_InsertContentAction0 ) ; defaultEditorKit_InsertContentAction0 . putValue ( "# > ff ( 9q`evVBayh% ; " , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test9 ( ) throws Throwable { StyledEditorKit . ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit . ItalicAction ( ) ; ResourceAction . PopupMenuItemAction resourceAction_PopupMenuItemAction0 = new ResourceAction . PopupMenuItemAction ( ( Action ) styledEditorKit_ItalicAction0 ) ; Object object0 = resourceAction_PopupMenuItemAction0 . getValue ( "SmallIcon" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Float getValue ( ) { return value ; }
void test1 ( ) throws Throwable { TextureChoiceController textureChoiceController0 = new TextureChoiceController ( " ) ZM3KzUsHU" , ( UserPreferences ) null , ( ViewFactory ) null , ( ContentManager ) null ) ; TextureChoiceComponent textureChoiceComponent0 = new TextureChoiceComponent ( ( UserPreferences ) null , textureChoiceController0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TextureChoiceComponent ( UserPreferences preferences , TextureChoiceController controller ) { this . preferences = preferences ; JLabel dummyLabel = new JLabel ( "Text" ) ; Dimension iconDimension = dummyLabel . getPreferredSize ( ) ; int iconHeight = iconDimension . height ; controller . addPropertyChangeListener ( TextureChoiceController . Property . TEXTURE , new PropertyChangeListener ( ) { void propertyChange ( PropertyChangeEvent ev ) { repaint ( ) ; } } ) ; setIcon ( new Icon ( ) { int getIconWidth ( ) { return iconHeight ; } int getIconHeight ( ) { return iconHeight ; } void paintIcon ( Component c , Graphics g , int x , int y ) { g . setColor ( Color . BLACK ) ; g . drawRect ( x + 2 , y + 2 , iconHeight - 5 , iconHeight - 5 ) ; HomeTexture texture = controller . getTexture ( ) ; if ( texture ! = null ) { Icon icon = IconManager . getInstance ( ) . getIcon ( texture . getImage ( ) , iconHeight - 6 , TextureChoiceComponent . this ) ; if ( icon . getIconWidth ( ) ! = icon . getIconHeight ( ) ) { Graphics2D g2D = ( Graphics2D ) g ; AffineTransform previousTransform = g2D . getTransform ( ) ; g2D . translate ( x + 3 , y + 3 ) ; g2D . scale ( ( float ) icon . getIconHeight ( ) / icon . getIconWidth ( ) , 1 ) ; icon . paintIcon ( c , g2D , 0 , 0 ) ; g2D . setTransform ( previousTransform ) ; } else { icon . paintIcon ( c , g , x + 3 , y + 3 ) ; } } } } ) ; / / Add a listener to update texture addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent ev ) { TexturePanel texturePanel = new TexturePanel ( preferences , controller ) ; texturePanel . displayView ( TextureChoiceComponent . this ) ; } } ) ; }
void test1 ( ) throws Throwable { PhotoPanel . LanguageChangeListener photoPanel_LanguageChangeListener0 = new PhotoPanel . LanguageChangeListener ( ( PhotoPanel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhotoPanel ( Home home , UserPreferences preferences , PhotoController controller ) { super ( new GridBagLayout ( ) ) ; this . home = home ; this . preferences = preferences ; this . controller = controller ; createActions ( preferences ) ; createComponents ( home , preferences , controller ) ; setMnemonics ( preferences ) ; layoutComponents ( ) ; preferences . addPropertyChangeListener ( UserPreferences . Property . LANGUAGE , new LanguageChangeListener ( this ) ) ; }
void test1 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; ThreadedTaskPanel threadedTaskPanel0 = ( ThreadedTaskPanel ) swingViewFactory0 . createThreadedTaskView ( "" , ( UserPreferences ) null , ( ThreadedTaskController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadedTaskView createThreadedTaskView ( String taskMessage , UserPreferences userPreferences , ThreadedTaskController threadedTaskController ) ; / * * * Returns a new view that edits user preferences . * / DialogView createUserPreferencesView ( UserPreferences preferences , UserPreferencesController userPreferencesController ) ; / * * * Returns a new view that edits level values . * / DialogView createLevelView ( UserPreferences preferences , LevelController levelController ) ; / * * * Returns a new view that edits furniture values . * / DialogView createHomeFurnitureView ( UserPreferences preferences , HomeFurnitureController homeFurnitureController ) ; / * * * Returns a new view that edits wall values . * / DialogView createWallView ( UserPreferences preferences , WallController wallController ) ; / * * * Returns a new view that edits room values . * / DialogView createRoomView ( UserPreferences preferences , RoomController roomController ) ; / * * * Returns a new view that edits label values . * / DialogView createLabelView ( boolean modification , UserPreferences preferences , LabelController labelController ) ; / * * * Returns a new view that edits compass values . * / DialogView createCompassView ( UserPreferences preferences , CompassController compassController ) ; / * * * Returns a new view that edits observer camera values . * / DialogView createObserverCameraView ( UserPreferences preferences , ObserverCameraController home3DAttributesController ) ; / * * * Returns a new view that edits 3D attributes . * / DialogView createHome3DAttributesView ( UserPreferences preferences , Home3DAttributesController home3DAttributesController ) ; / * * * Returns a new view that edits the texture of its controller . * / TextureChoiceView createTextureChoiceView ( UserPreferences preferences , TextureChoiceController textureChoiceController ) ; / * * * Creates a new view that edits page setup . * / DialogView createPageSetupView ( UserPreferences preferences , PageSetupController pageSetupController ) ; / * * * Returns a new view that displays home print preview . * / DialogView createPrintPreviewView ( Home home , UserPreferences preferences , HomeController homeController , PrintPreviewController printPreviewController ) ; / * * * Returns a new view able to compute a photo realistic image of a home . * / DialogView createPhotoView ( Home home , UserPreferences preferences , PhotoController photoController ) ; / * * * Returns a new view able to compute a 3D video of a home . * / DialogView createVideoView ( Home home , UserPreferences preferences , VideoController videoController ) ; / * * * Returns a new view that displays Sweet Home 3D help . * / HelpView createHelpView ( UserPreferences preferences , HelpController helpController ) ; }
void test13 ( ) throws Throwable { SwingViewFactory swingViewFactory0 = new SwingViewFactory ( ) ; FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; FurnitureCatalogController furnitureCatalogController0 = new FurnitureCatalogController ( furnitureCatalog0 , ( ViewFactory ) swingViewFactory0 ) ; FurnitureCatalogTree furnitureCatalogTree0 = ( FurnitureCatalogTree ) swingViewFactory0 . createFurnitureCatalogView ( furnitureCatalog0 , ( UserPreferences ) null , furnitureCatalogController0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" View createFurnitureCatalogView ( FurnitureCatalog catalog , UserPreferences preferences , FurnitureCatalogController furnitureCatalogController ) ; / * * * Returns a new view that displays < code > home < / code > furniture list . * / View createFurnitureView ( Home home , UserPreferences preferences , FurnitureController furnitureController ) ; / * * * Returns a new view that displays < code > home < / code > on a plan . * / PlanView createPlanView ( Home home , UserPreferences preferences , PlanController planController ) ; / * * * Returns a new view that displays < code > home < / code > in 3D . * / View createView3D ( Home home , UserPreferences preferences , HomeController3D homeController3D ) ; / * * * Returns a new view that displays < code > home < / code > and its sub views . * / HomeView createHomeView ( Home home , UserPreferences preferences , HomeController homeController ) ; / * * * Returns a new view that displays a wizard . * / DialogView createWizardView ( UserPreferences preferences , WizardController wizardController ) ; / * * * Returns a new view that displays the different steps that helps the user to choose a background image . * / View createBackgroundImageWizardStepsView ( BackgroundImage backgroundImage , UserPreferences preferences , BackgroundImageWizardController backgroundImageWizardController ) ; / * * * Returns a new view that displays the different steps that helps the user to import furniture . * / ImportedFurnitureWizardStepsView createImportedFurnitureWizardStepsView ( CatalogPieceOfFurniture piece , String modelName , boolean importHomePiece , UserPreferences preferences , ImportedFurnitureWizardController importedFurnitureWizardController ) ; / * * * Returns a new view that displays the different steps that helps the user to import a texture . * / View createImportedTextureWizardStepsView ( CatalogTexture texture , String textureName , UserPreferences preferences , ImportedTextureWizardController importedTextureWizardController ) ; / * * * Returns a new view that displays message for a threaded task . * / ThreadedTaskView createThreadedTaskView ( String taskMessage , UserPreferences userPreferences , ThreadedTaskController threadedTaskController ) ; / * * * Returns a new view that edits user preferences . * / DialogView createUserPreferencesView ( UserPreferences preferences , UserPreferencesController userPreferencesController ) ; / * * * Returns a new view that edits level values . * / DialogView createLevelView ( UserPreferences preferences , LevelController levelController ) ; / * * * Returns a new view that edits furniture values . * / DialogView createHomeFurnitureView ( UserPreferences preferences , HomeFurnitureController homeFurnitureController ) ; / * * * Returns a new view that edits wall values . * / DialogView createWallView ( UserPreferences preferences , WallController wallController ) ; / * * * Returns a new view that edits room values . * / DialogView createRoomView ( UserPreferences preferences , RoomController roomController ) ; / * * * Returns a new view that edits label values . * / DialogView createLabelView ( boolean modification , UserPreferences preferences , LabelController labelController ) ; / * * * Returns a new view that edits compass values . * / DialogView createCompassView ( UserPreferences preferences , CompassController compassController ) ; / * * * Returns a new view that edits observer camera values . * / DialogView createObserverCameraView ( UserPreferences preferences , ObserverCameraController home3DAttributesController ) ; / * * * Returns a new view that edits 3D attributes . * / DialogView createHome3DAttributesView ( UserPreferences preferences , Home3DAttributesController home3DAttributesController ) ; / * * * Returns a new view that edits the texture of its controller . * / TextureChoiceView createTextureChoiceView ( UserPreferences preferences , TextureChoiceController textureChoiceController ) ; / * * * Creates a new view that edits page setup . * / DialogView createPageSetupView ( UserPreferences preferences , PageSetupController pageSetupController ) ; / * * * Returns a new view that displays home print preview . * / DialogView createPrintPreviewView ( Home home , UserPreferences preferences , HomeController homeController , PrintPreviewController printPreviewController ) ; / * * * Returns a new view able to compute a photo realistic image of a home . * / DialogView createPhotoView ( Home home , UserPreferences preferences , PhotoController photoController ) ; / * * * Returns a new view able to compute a 3D video of a home . * / DialogView createVideoView ( Home home , UserPreferences preferences , VideoController videoController ) ; / * * * Returns a new view that displays Sweet Home 3D help . * / HelpView createHelpView ( UserPreferences preferences , HelpController helpController ) ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( ( - 1059 . 4176F ) ) ; PlanTransferHandler planTransferHandler0 = new PlanTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; JRadioButton jRadioButton0 = new JRadioButton ( "uu" , false ) ; StringSelection stringSelection0 = new StringSelection ( "uu" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jRadioButton0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = planTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( JComponent destination , Transferable transferable ) { if ( canImport ( destination , transferable . getTransferDataFlavors ( ) ) ) { try { List < File > files = ( List < File > ) transferable . getTransferData ( DataFlavor . javaFileListFlavor ) ; List < String > importableModels = new ArrayList < String > ( ) ; for ( File file : files ) { String absolutePath = file . getAbsolutePath ( ) ; if ( this . contentManager . isAcceptable ( absolutePath , ContentManager . ContentType . MODEL ) ) { importableModels . add ( absolutePath ) ; } } EventQueue . invokeLater ( new Runnable ( ) { void run ( ) { catalogController . dropFiles ( importableModels ) ; } } ) ; return ! importableModels . isEmpty ( ) ; } catch ( UnsupportedFlavorException ex ) { throw new RuntimeException ( "Can't import" , ex ) ; } catch ( IOException ex ) { throw new RuntimeException ( "Can't access to data" , ex ) ; } } else { return false ; } }
void test3 ( ) throws Throwable { Home home0 = new Home ( 886 . 30286F ) ; PlanTransferHandler planTransferHandler0 = new PlanTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; DataFlavor [ ] dataFlavorArray0 = new DataFlavor [ 3 ] ; DataFlavor dataFlavor0 = new DataFlavor ( ) ; dataFlavorArray0 [ 0 ] = dataFlavor0 ; DataFlavor dataFlavor1 = DataFlavor . javaFileListFlavor ; dataFlavorArray0 [ 1 ] = dataFlavor1 ; dataFlavorArray0 [ 2 ] = dataFlavorArray0 [ 0 ] ; boolean boolean0 = planTransferHandler0 . canImportFlavor ( dataFlavorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImportFlavor ( DataFlavor [ ] flavors ) { List < DataFlavor > flavorList = Arrays . asList ( flavors ) ; return flavorList . contains ( HomeTransferableList . HOME_FLAVOR ) | | flavorList . contains ( DataFlavor . javaFileListFlavor ) ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( 1619 . 6638F ) ; PlanTransferHandler planTransferHandler0 = new PlanTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; StringSelection stringSelection0 = new StringSelection ( "" ) ; planTransferHandler0 . dragEntered ( ( JComponent ) defaultTreeCellRenderer0 , ( Transferable ) stringSelection0 , 1660 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void dragEntered ( JComponent destination , Transferable transferable , int dragAction ) { if ( transferable . isDataFlavorSupported ( HomeTransferableList . HOME_FLAVOR ) & & destination instanceof PlanComponent & & this . homeController . getPlanController ( ) ! = null ) { try { List < Selectable > transferedItems = ( List < Selectable > ) transferable . getTransferData ( HomeTransferableList . HOME_FLAVOR ) ; Point2D dropLocation = getDropModelLocation ( destination ) ; this . homeController . getPlanController ( ) . startDraggedItems ( transferedItems , ( float ) dropLocation . getX ( ) , ( float ) dropLocation . getY ( ) ) ; this . isDragging = true ; } catch ( UnsupportedFlavorException ex ) { throw new RuntimeException ( "Can't import" , ex ) ; } catch ( IOException ex ) { throw new RuntimeException ( "Can't access to data" , ex ) ; } } }
void test0 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; AutoCompleteTextField autoCompleteTextField0 = new AutoCompleteTextField ( "j } c > Ik + J" , 0 , ( List < String > ) vector0 ) ; autoCompleteTextField0 . replaceSelection ( "tr [ ` { 5 + 6Y = Q & e'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test1 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; AutoCompleteTextField autoCompleteTextField0 = new AutoCompleteTextField ( "'" , 2 , ( List < String > ) vector0 ) ; autoCompleteTextField0 . replaceSelection ( "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test2 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; vector0 . addElement ( "'" ) ; AutoCompleteTextField autoCompleteTextField0 = new AutoCompleteTextField ( "'" , 2 , ( List < String > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test3 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; vector0 . add ( "tr [ ` { 5 + 6Y = Q & e'" ) ; AutoCompleteTextField autoCompleteTextField0 = new AutoCompleteTextField ( "j } c > Ik + J" , 0 , ( List < String > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test1 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 1917 . 5826F ) , ( - 1917 . 5826F ) , ( - 1917 . 5826F ) , ( - 1917 . 5826F ) ) ; Float float0 = ( Float ) nullableSpinner_NullableSpinnerNumberModel0 . getNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NullableSpinner ( ) { this ( new NullableSpinnerNumberModel ( 0 , 0 , Integer . MAX_VALUE , 1 ) ) ; }
void test2 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 620 . 85333F ) , ( - 620 . 85333F ) , 0 . 0F , 0 . 0F ) ; Float float0 = ( Float ) nullableSpinner_NullableSpinnerNumberModel0 . getNextValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NullableSpinner ( ) { this ( new NullableSpinnerNumberModel ( 0 , 0 , Integer . MAX_VALUE , 1 ) ) ; }
void test3 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( 1636 . 487F , 1636 . 487F , 1636 . 487F , 1636 . 487F ) ; Float float0 = ( Float ) nullableSpinner_NullableSpinnerNumberModel0 . getNextValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NullableSpinner ( ) { this ( new NullableSpinnerNumberModel ( 0 , 0 , Integer . MAX_VALUE , 1 ) ) ; }
void test4 ( ) throws Throwable { NullableSpinner nullableSpinner0 = new NullableSpinner ( ) ; Integer integer0 = ( Integer ) nullableSpinner0 . getPreviousValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NullableSpinner ( ) { this ( new NullableSpinnerNumberModel ( 0 , 0 , Integer . MAX_VALUE , 1 ) ) ; }
void test5 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 620 . 85333F ) , ( - 620 . 85333F ) , 0 . 0F , 0 . 0F ) ; nullableSpinner_NullableSpinnerNumberModel0 . setNullable ( true ) ; nullableSpinner_NullableSpinnerNumberModel0 . setValue ( ( Object ) null ) ; nullableSpinner_NullableSpinnerNumberModel0 . getPreviousValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) { return this . nullable ; }
void test6 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 620 . 85333F ) , ( - 620 . 85333F ) , 0 . 0F , 0 . 0F ) ; Float float0 = ( Float ) nullableSpinner_NullableSpinnerNumberModel0 . getPreviousValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NullableSpinner ( ) { this ( new NullableSpinnerNumberModel ( 0 , 0 , Integer . MAX_VALUE , 1 ) ) ; }
void test7 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 620 . 85333F ) , ( - 620 . 85333F ) , 0 . 0F , 0 . 0F ) ; NullableSpinner nullableSpinner0 = new NullableSpinner ( nullableSpinner_NullableSpinnerNumberModel0 ) ; nullableSpinner0 . commitEdit ( ) ; nullableSpinner_NullableSpinnerNumberModel0 . setNullable ( true ) ; nullableSpinner_NullableSpinnerNumberModel0 . setValue ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) { return this . nullable ; }
void test8 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 620 . 85333F ) , ( - 620 . 85333F ) , 0 . 0F , 0 . 0F ) ; nullableSpinner_NullableSpinnerNumberModel0 . setNullable ( true ) ; nullableSpinner_NullableSpinnerNumberModel0 . setValue ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) { return this . nullable ; }
void test9 ( ) throws Throwable { NullableSpinner . NullableSpinnerNumberModel nullableSpinner_NullableSpinnerNumberModel0 = new NullableSpinner . NullableSpinnerNumberModel ( ( - 1917 . 5826F ) , ( - 1917 . 5826F ) , ( - 1917 . 5826F ) , ( - 1917 . 5826F ) ) ; nullableSpinner_NullableSpinnerNumberModel0 . setNullable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) { return this . nullable ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( ) ; HomePDFPrinter homePDFPrinter0 = new HomePDFPrinter ( home0 , ( UserPreferences ) null , ( HomeController ) null , ( Font ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HomePDFPrinter ( Home home , UserPreferences preferences , HomeController controller , Font defaultFont ) { this . home = home ; this . preferences = preferences ; this . controller = controller ; this . defaultFont = defaultFont ; }
void test0 ( ) throws Throwable { ScaledImageComponent scaledImageComponent0 = new ScaledImageComponent ( ( BufferedImage ) null ) ; scaledImageComponent0 . setImage ( ( BufferedImage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setImage ( Content image ) { if ( image ! = this . image ) { Content oldImage = this . image ; this . image = image ; this . propertyChangeSupport . firePropertyChange ( Property . IMAGE . name ( ) , oldImage , image ) ; } }
void test2 ( ) throws Throwable { ScaledImageComponent scaledImageComponent0 = new ScaledImageComponent ( ) ; BufferedImage bufferedImage0 = scaledImageComponent0 . getImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Content getImage ( ) { return this . image ; }
void test3 ( ) throws Throwable { ScaledImageComponent scaledImageComponent0 = new ScaledImageComponent ( ( BufferedImage ) null ) ; Dimension dimension0 = scaledImageComponent0 . getPreferredSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension getPreferredSize ( ) { if ( isPreferredSizeSet ( ) ) { return super . getPreferredSize ( ) ; } else { Insets insets = getInsets ( ) ; Rectangle2D planBounds = getPlanBounds ( ) ; return new Dimension ( Math . round ( ( ( float ) planBounds . getWidth ( ) + MARGIN * 2 ) * getScale ( ) ) + insets . left + insets . right , Math . round ( ( ( float ) planBounds . getHeight ( ) + MARGIN * 2 ) * getScale ( ) ) + insets . top + insets . bottom ) ; } }
void test4 ( ) throws Throwable { ScaledImageComponent scaledImageComponent0 = new ScaledImageComponent ( ) ; scaledImageComponent0 . paintComponent ( ( Graphics ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getImageScale ( ) { if ( this . image ! = null ) { Insets insets = getInsets ( ) ; float imageScale = Math . min ( ( float ) ( getWidth ( ) - insets . left - insets . right ) / image . getWidth ( ) , ( float ) ( getHeight ( ) - insets . top - insets . bottom ) / image . getHeight ( ) ) ; if ( this . imageEnlargementEnabled ) { return imageScale ; } else { return Math . min ( 1 , imageScale ) ; } } else { return 1 ; } }
void test0 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( " * de4qW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test1 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test2 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( Boolean value ) { this . value = value ; this . checkBox . removeItemListener ( this . checkBoxListener ) ; try { if ( value ! = null ) { this . checkBox . setSelected ( value ) ; } else if ( isNullable ( ) ) { / / Unselect check box to display a dash in its middle this . checkBox . setSelected ( false ) ; this . checkBox . repaint ( ) ; } else { throw new IllegalArgumentException ( "Check box isn't nullable" ) ; } fireStateChanged ( ) ; } finally { this . checkBox . addItemListener ( this . checkBoxListener ) ; } }
void test3 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( Boolean value ) { this . value = value ; this . checkBox . removeItemListener ( this . checkBoxListener ) ; try { if ( value ! = null ) { this . checkBox . setSelected ( value ) ; } else if ( isNullable ( ) ) { / / Unselect check box to display a dash in its middle this . checkBox . setSelected ( false ) ; this . checkBox . repaint ( ) ; } else { throw new IllegalArgumentException ( "Check box isn't nullable" ) ; } fireStateChanged ( ) ; } finally { this . checkBox . addItemListener ( this . checkBoxListener ) ; } }
void test4 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( " ; / LNL_o < Z7p ? > 7qK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test5 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test6 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( " ; / LNL_o < Z7p ? > 7qK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { Boolean enabled = ( Boolean ) getPropertyValue ( Property . ENABLED ) ; return enabled ! = null & & enabled . booleanValue ( ) ; }
void test7 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( " ; / LNL_o < Z7p ? > 7qK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test8 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test9 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( " ? x3pvTKu'i ? gIwptB^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test10 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( "Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test11 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test12 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setText ( String text ) { if ( text ! = this . text | | ( text ! = null & & ! text . equals ( this . text ) ) ) { String oldText = this . text ; this . text = text ; this . propertyChangeSupport . firePropertyChange ( Property . TEXT . name ( ) , oldText , text ) ; } }
void test13 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test14 ( ) throws Throwable { NullableCheckBox nullableCheckBox0 = new NullableCheckBox ( " * de4qW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return this . text ; }
void test0 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( 0 ) ; SwingTools . addAutoSelectionOnFocusGain ( ( JTextComponent ) jTextField0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addAutoSelectionOnFocusGain ( JTextComponent textComponent ) { / / A focus and mouse listener able to select text field characters / / when it gains focus after a focus transfer class SelectionOnFocusManager extends MouseAdapter implements FocusListener { boolean mousePressedInTextField = false ; int selectionStartBeforeFocusLost = - 1 ; int selectionEndBeforeFocusLost = - 1 ; @Override void mousePressed ( MouseEvent ev ) { this . mousePressedInTextField = true ; this . selectionStartBeforeFocusLost = - 1 ; } void focusLost ( FocusEvent ev ) { if ( ev . getOppositeComponent ( ) = = null | | SwingUtilities . getWindowAncestor ( ev . getOppositeComponent ( ) ) ! = SwingUtilities . getWindowAncestor ( textComponent ) ) { / / Keep selection indices when focus on text field is transfered / / to an other window this . selectionStartBeforeFocusLost = textComponent . getSelectionStart ( ) ; this . selectionEndBeforeFocusLost = textComponent . getSelectionEnd ( ) ; } else { this . selectionStartBeforeFocusLost = - 1 ; } } void focusGained ( FocusEvent ev ) { if ( this . selectionStartBeforeFocusLost ! = - 1 ) { EventQueue . invokeLater ( new Runnable ( ) { void run ( ) { / / Reselect the same characters in text field textComponent . setSelectionStart ( selectionStartBeforeFocusLost ) ; textComponent . setSelectionEnd ( selectionEndBeforeFocusLost ) ; } } ) ; } else if ( ! this . mousePressedInTextField & & ev . getOppositeComponent ( ) ! = null & & SwingUtilities . getWindowAncestor ( ev . getOppositeComponent ( ) ) = = SwingUtilities . getWindowAncestor ( textComponent ) ) { EventQueue . invokeLater ( new Runnable ( ) { void run ( ) { / / Select all characters when text field got the focus because of a transfer textComponent . selectAll ( ) ; } } ) ; } this . mousePressedInTextField = false ; } } ; SelectionOnFocusManager selectionOnFocusManager = new SelectionOnFocusManager ( ) ; textComponent . addFocusListener ( selectionOnFocusManager ) ; textComponent . addMouseListener ( selectionOnFocusManager ) ; }
void test2 ( ) throws Throwable { DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; JScrollPane jScrollPane0 = SwingTools . createScrollPane ( ( JComponent ) defaultListCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T extends JComponent > List < T > findChildren ( JComponent parent , Class < T > childrenClass ) { List < T > children = new ArrayList < T > ( ) ; findChildren ( parent , childrenClass , children ) ; return children ; }
void test4 ( ) throws Throwable { boolean boolean0 = SwingTools . showDocumentInBrowser ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showDocumentInBrowser ( URL url ) { return BrowserSupport . showDocumentInBrowser ( url ) ; }
void test7 ( ) throws Throwable { DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; SwingTools . installFocusBorder ( ( JComponent ) defaultListCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void installFocusBorder ( JComponent component ) { if ( unfocusedViewBorder = = null ) { Border unfocusedViewInteriorBorder = new AbstractBorder ( ) { Color topLeftColor ; Color botomRightColor ; Insets insets = new Insets ( 1 , 1 , 1 , 1 ) ; { if ( OperatingSystem . isMacOSX ( ) ) { this . topLeftColor = Color . GRAY ; this . botomRightColor = Color . LIGHT_GRAY ; } else { this . topLeftColor = UIManager . getColor ( "TextField . darkShadow" ) ; this . botomRightColor = UIManager . getColor ( "TextField . shadow" ) ; } } Insets getBorderInsets ( Component c ) { return this . insets ; } void paintBorder ( Component c , Graphics g , int x , int y , int width , int height ) { Color previousColor = g . getColor ( ) ; Rectangle rect = getInteriorRectangle ( c , x , y , width , height ) ; g . setColor ( topLeftColor ) ; g . drawLine ( rect . x - 1 , rect . y - 1 , rect . x + rect . width , rect . y - 1 ) ; g . drawLine ( rect . x - 1 , rect . y - 1 , rect . x - 1 , rect . y + rect . height ) ; g . setColor ( botomRightColor ) ; g . drawLine ( rect . x , rect . y + rect . height , rect . x + rect . width , rect . y + rect . height ) ; g . drawLine ( rect . x + rect . width , rect . y , rect . x + rect . width , rect . y + rect . height ) ; g . setColor ( previousColor ) ; } } ; if ( OperatingSystem . isMacOSXLeopardOrSuperior ( ) ) { unfocusedViewBorder = BorderFactory . createCompoundBorder ( BorderFactory . createLineBorder ( UIManager . getColor ( "Panel . background" ) , 2 ) , unfocusedViewInteriorBorder ) ; focusedViewBorder = new AbstractBorder ( ) { Insets insets = new Insets ( 3 , 3 , 3 , 3 ) ; Insets getBorderInsets ( Component c ) { return this . insets ; } void paintBorder ( Component c , Graphics g , int x , int y , int width , int height ) { Color previousColor = g . getColor ( ) ; / / Paint a gradient paint around component Rectangle rect = getInteriorRectangle ( c , x , y , width , height ) ; g . setColor ( Color . GRAY ) ; g . drawLine ( rect . x - 1 , rect . y - 1 , rect . x + rect . width , rect . y - 1 ) ; g . drawLine ( rect . x - 1 , rect . y - 1 , rect . x - 1 , rect . y + rect . height ) ; g . setColor ( Color . LIGHT_GRAY ) ; g . drawLine ( rect . x , rect . y + rect . height , rect . x + rect . width , rect . y + rect . height ) ; g . drawLine ( rect . x + rect . width , rect . y , rect . x + rect . width , rect . y + rect . height ) ; Color focusColor = UIManager . getColor ( "Focus . color" ) ; int transparencyOutline = 128 ; int transparencyInline = 180 ; if ( focusColor = = null ) { focusColor = UIManager . getColor ( "textHighlight" ) ; transparencyOutline = 128 ; transparencyInline = 255 ; } g . setColor ( new Color ( focusColor . getRed ( ) , focusColor . getGreen ( ) , focusColor . getBlue ( ) , transparencyOutline ) ) ; g . drawRoundRect ( rect . x - 3 , rect . y - 3 , rect . width + 5 , rect . height + 5 , 6 , 6 ) ; g . drawRect ( rect . x - 1 , rect . y - 1 , rect . width + 1 , rect . height + 1 ) ; g . setColor ( new Color ( focusColor . getRed ( ) , focusColor . getGreen ( ) , focusColor . getBlue ( ) , transparencyInline ) ) ; g . drawRoundRect ( rect . x - 2 , rect . y - 2 , rect . width + 3 , rect . height + 3 , 4 , 4 ) ; / / Draw corners g . setColor ( UIManager . getColor ( "Panel . background" ) ) ; g . drawLine ( rect . x - 3 , rect . y - 3 , rect . x - 2 , rect . y - 3 ) ; g . drawLine ( rect . x - 3 , rect . y - 2 , rect . x - 3 , rect . y - 2 ) ; g . drawLine ( rect . x + rect . width + 1 , rect . y - 3 , rect . x + rect . width + 2 , rect . y - 3 ) ; g . drawLine ( rect . x + rect . width + 2 , rect . y - 2 , rect . x + rect . width + 2 , rect . y - 2 ) ; g . drawLine ( rect . x - 3 , rect . y + rect . height + 2 , rect . x - 2 , rect . y + rect . height + 2 ) ; g . drawLine ( rect . x - 3 , rect . y + rect . height + 1 , rect . x - 3 , rect . y + rect . height + 1 ) ; g . drawLine ( rect . x + rect . width + 1 , rect . y + rect . height + 2 , rect . x + rect . width + 2 , rect . y + rect . height + 2 ) ; g . drawLine ( rect . x + rect . width + 2 , rect . y + rect . height + 1 , rect . x + rect . width + 2 , rect . y + rect . height + 1 ) ; g . setColor ( previousColor ) ; } } ; } else { if ( OperatingSystem . isMacOSX ( ) ) { unfocusedViewBorder = BorderFactory . createCompoundBorder ( BorderFactory . createLineBorder ( UIManager . getColor ( "Panel . background" ) , 1 ) , unfocusedViewInteriorBorder ) ; } else { unfocusedViewBorder = BorderFactory . createCompoundBorder ( BorderFactory . createEmptyBorder ( 1 , 1 , 1 , 1 ) , unfocusedViewInteriorBorder ) ; } focusedViewBorder = BorderFactory . createLineBorder ( UIManager . getColor ( "textHighlight" ) , 2 ) ; } } JComponent feedbackComponent ; if ( component . getParent ( ) instanceof JViewport & & component . getParent ( ) . getParent ( ) instanceof JScrollPane ) { feedbackComponent = ( JComponent ) component . getParent ( ) . getParent ( ) ; } else { feedbackComponent = component ; } feedbackComponent . setBorder ( unfocusedViewBorder ) ; component . addFocusListener ( new FocusListener ( ) { void focusLost ( FocusEvent ev ) { if ( feedbackComponent . getBorder ( ) = = focusedViewBorder ) { feedbackComponent . setBorder ( unfocusedViewBorder ) ; } } void focusGained ( FocusEvent ev ) { if ( feedbackComponent . getBorder ( ) = = unfocusedViewBorder ) { feedbackComponent . setBorder ( focusedViewBorder ) ; } } } ) ; }
void test14 ( ) throws Throwable { BevelBorder bevelBorder0 = ( BevelBorder ) SwingTools . getDropableComponentBorder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Border getDropableComponentBorder ( ) { Border border = null ; if ( OperatingSystem . isMacOSXLeopardOrSuperior ( ) ) { border = UIManager . getBorder ( "InsetBorder . aquaVariant" ) ; } if ( border = = null ) { border = BorderFactory . createLoweredBevelBorder ( ) ; } return border ; }
void test15 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 ) ; Class < ? > class0 = SwingTools . class ; List < JViewport > list0 = SwingTools . findChildren ( ( JComponent ) jTable0 , ( Class < JViewport > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T extends JComponent > List < T > findChildren ( JComponent parent , Class < T > childrenClass ) { List < T > children = new ArrayList < T > ( ) ; findChildren ( parent , childrenClass , children ) ; return children ; }
void test0 ( ) throws Throwable { LinkedList < Selectable > linkedList0 = new LinkedList < Selectable > ( ) ; HomeTransferableList homeTransferableList0 = new HomeTransferableList ( ( List < ? extends Selectable > ) linkedList0 ) ; DataFlavor [ ] dataFlavorArray0 = homeTransferableList0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return new DataFlavor [ ] { HOME_FLAVOR } ; }
void test1 ( ) throws Throwable { LinkedList < Wall > linkedList0 = new LinkedList < Wall > ( ) ; HomeTransferableList homeTransferableList0 = new HomeTransferableList ( ( List < ? extends Selectable > ) linkedList0 ) ; Class < ? > class0 = HomeTransferableList . class ; DataFlavor dataFlavor0 = new DataFlavor ( class0 , "Australia / South" ) ; boolean boolean0 = homeTransferableList0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return HOME_FLAVOR . equals ( flavor ) ; }
void test3 ( ) throws Throwable { LinkedList < Wall > linkedList0 = new LinkedList < Wall > ( ) ; HomeTransferableList homeTransferableList0 = new HomeTransferableList ( ( List < ? extends Selectable > ) linkedList0 ) ; DataFlavor dataFlavor0 = HomeTransferableList . HOME_FLAVOR ; ArrayList < Object > arrayList0 = ( ArrayList < Object > ) homeTransferableList0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException { if ( flavor . equals ( HOME_FLAVOR ) ) { return Home . duplicate ( this . transferedItems ) ; } else { throw new UnsupportedFlavorException ( flavor ) ; } }
void test0 ( ) throws Throwable { JSpinner jSpinner0 = new JSpinner ( ) ; SpinnerNumberModel spinnerNumberModel0 = ( SpinnerNumberModel ) jSpinner0 . getModel ( ) ; AutoCommitSpinner autoCommitSpinner0 = new AutoCommitSpinner ( ( SpinnerModel ) spinnerNumberModel0 ) ; autoCommitSpinner0 . commitEdit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( ) { return this . height ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 2 ] ; SpinnerListModel spinnerListModel0 = new SpinnerListModel ( objectArray0 ) ; AutoCommitSpinner autoCommitSpinner0 = new AutoCommitSpinner ( ( SpinnerModel ) spinnerListModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AutoCommitSpinner ( SpinnerModel model ) { super ( model ) ; JComponent editor = getEditor ( ) ; if ( editor instanceof JSpinner . DefaultEditor ) { JFormattedTextField textField = ( ( JSpinner . DefaultEditor ) editor ) . getTextField ( ) ; SwingTools . addAutoSelectionOnFocusGain ( textField ) ; / / Commit text during edition if ( textField . getFormatterFactory ( ) instanceof DefaultFormatterFactory ) { DefaultFormatterFactory formatterFactory = ( DefaultFormatterFactory ) textField . getFormatterFactory ( ) ; JFormattedTextField . AbstractFormatter defaultFormatter = formatterFactory . getDefaultFormatter ( ) ; if ( defaultFormatter instanceof DefaultFormatter ) { ( ( DefaultFormatter ) defaultFormatter ) . setCommitsOnValidEdit ( true ) ; } if ( defaultFormatter instanceof NumberFormatter ) { NumberFormatter numberFormatter = ( NumberFormatter ) defaultFormatter ; DecimalFormat defaultFormat = ( DecimalFormat ) numberFormatter . getFormat ( ) ; DecimalFormat noGroupingFormat = ( DecimalFormat ) defaultFormat . clone ( ) ; noGroupingFormat . setGroupingUsed ( false ) ; / / Create a delegate of default formatter to change value returned by getFormat NumberFormatter editFormatter = new NumberFormatter ( ) { @Override Format getFormat ( ) { / / Use a different format depending on whether the text field has focus or not if ( textField . hasFocus ( ) ) { / / No grouping when text field has focus return noGroupingFormat ; } else { return defaultFormat ; } } @Override boolean getCommitsOnValidEdit ( ) { return true ; } @SuppressWarnings ( "unchecked" ) @Override Comparable getMaximum ( ) { return numberFormatter . getMaximum ( ) ; } @SuppressWarnings ( "unchecked" ) @Override Comparable getMinimum ( ) { return numberFormatter . getMinimum ( ) ; } @SuppressWarnings ( "unchecked" ) @Override void setMaximum ( Comparable maximum ) { numberFormatter . setMaximum ( maximum ) ; } @SuppressWarnings ( "unchecked" ) @Override void setMinimum ( Comparable minimum ) { numberFormatter . setMinimum ( minimum ) ; } @Override Class < ? > getValueClass ( ) { return numberFormatter . getValueClass ( ) ; } } ; textField . setFormatterFactory ( new DefaultFormatterFactory ( editFormatter ) ) ; } } } }
void test0 ( ) throws Throwable { ThreadedTaskPanel threadedTaskPanel0 = new ThreadedTaskPanel ( "" , ( UserPreferences ) null , ( ThreadedTaskController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setProgress ( int value , int minimum , int maximum ) { if ( EventQueue . isDispatchThread ( ) ) { this . taskProgressBar . setIndeterminate ( false ) ; this . taskProgressBar . setValue ( value ) ; this . taskProgressBar . setMinimum ( minimum ) ; this . taskProgressBar . setMaximum ( maximum ) ; } else { / / Ensure modifications are done in EDT invokeLater ( new Runnable ( ) { void run ( ) { setProgress ( value , minimum , maximum ) ; } } ) ; } }
void test1 ( ) throws Throwable { ThreadedTaskPanel threadedTaskPanel0 = new ThreadedTaskPanel ( "" , ( UserPreferences ) null , ( ThreadedTaskController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIndeterminateProgress ( ) { if ( EventQueue . isDispatchThread ( ) ) { this . taskProgressBar . setIndeterminate ( true ) ; } else { / / Ensure modifications are done in EDT invokeLater ( new Runnable ( ) { void run ( ) { setIndeterminateProgress ( ) ; } } ) ; } }
void test2 ( ) throws Throwable { ThreadedTaskPanel threadedTaskPanel0 = new ThreadedTaskPanel ( "" , ( UserPreferences ) null , ( ThreadedTaskController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTaskRunning ( boolean taskRunning , View executingView ) ; }
void test3 ( ) throws Throwable { ThreadedTaskPanel threadedTaskPanel0 = new ThreadedTaskPanel ( "" , ( UserPreferences ) null , ( ThreadedTaskController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTaskRunning ( boolean taskRunning , View executingView ) ; }
void test1 ( ) throws Throwable { ColorButton colorButton0 = new ColorButton ( ) ; String string0 = colorButton0 . getColorDialogTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColorDialogTitle ( ) { return this . colorDialogTitle ; }
void test3 ( ) throws Throwable { ColorButton colorButton0 = new ColorButton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ColorButton ( ) { JLabel colorLabel = new JLabel ( "Color" ) ; Dimension iconDimension = colorLabel . getPreferredSize ( ) ; int iconWidth = iconDimension . width ; int iconHeight = iconDimension . height ; setIcon ( new Icon ( ) { int getIconWidth ( ) { return iconWidth ; } int getIconHeight ( ) { return iconHeight ; } void paintIcon ( Component c , Graphics g , int x , int y ) { g . setColor ( Color . BLACK ) ; g . drawRect ( x + 2 , y + 2 , iconWidth - 5 , iconHeight - 5 ) ; if ( color ! = null ) { g . setColor ( new Color ( color ) ) ; g . fillRect ( x + 3 , y + 3 , iconWidth - 6 , iconHeight - 6 ) ; } } } ) ; / / Add a listener to update color addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent ev ) { / / Create color chooser instance each time default locale changed if ( colorChooser = = null | | ! Locale . getDefault ( ) . equals ( colorChooserLocale ) ) { colorChooser = new JColorChooser ( ) ; / / Add auto selection to color chooser panels text fields addAutoSelectionOnTextFields ( colorChooser ) ; / / Add Esc key management colorChooser . getActionMap ( ) . put ( "close" , new AbstractAction ( ) { void actionPerformed ( ActionEvent ev ) { ( ( Window ) SwingUtilities . getRoot ( colorChooser ) ) . dispose ( ) ; } } ) ; colorChooser . getInputMap ( JColorChooser . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( "ESCAPE" ) , "close" ) ; colorChooserLocale = Locale . getDefault ( ) ; } / / Update edited color in furniture color chooser colorChooser . setColor ( color ! = null ? new Color ( color ) : null ) ; JDialog colorDialog = JColorChooser . createDialog ( getParent ( ) , colorDialogTitle , true , colorChooser , new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { / / Change button color when user click on ok button setColor ( colorChooser . getColor ( ) . getRGB ( ) ) ; } } , null ) ; colorDialog . setVisible ( true ) ; } void addAutoSelectionOnTextFields ( JComponent component ) { if ( component instanceof JTextComponent ) { SwingTools . addAutoSelectionOnFocusGain ( ( JTextComponent ) component ) ; } else if ( component instanceof JSpinner ) { JComponent editor = ( ( JSpinner ) component ) . getEditor ( ) ; if ( editor instanceof JSpinner . DefaultEditor ) { SwingTools . addAutoSelectionOnFocusGain ( ( ( JSpinner . DefaultEditor ) editor ) . getTextField ( ) ) ; } } for ( int i = 0 , n = component . getComponentCount ( ) ; i < n ; i + + ) { Component childComponent = component . getComponent ( i ) ; if ( childComponent instanceof JComponent ) { addAutoSelectionOnTextFields ( ( JComponent ) childComponent ) ; } } } } ) ; }
void test4 ( ) throws Throwable { ColorButton colorButton0 = new ColorButton ( ) ; Integer integer0 = JLayeredPane . PALETTE_LAYER ; colorButton0 . setColor ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setColor ( Integer color ) { if ( isTexturable ( ) ) { if ( color ! = this . color | | ( color ! = null & & ! color . equals ( this . color ) ) ) { Integer oldColor = this . color ; this . color = color ; this . propertyChangeSupport . firePropertyChange ( Property . COLOR . name ( ) , oldColor , color ) ; } } else { throw new IllegalStateException ( "Piece isn't texturable" ) ; } }
void test5 ( ) throws Throwable { ColorButton colorButton0 = new ColorButton ( ) ; colorButton0 . setColorDialogTitle ( "@5 Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColorDialogTitle ( ) { return this . colorDialogTitle ; }
void test0 ( ) throws Throwable { UnfocusableToolBar unfocusableToolBar0 = new UnfocusableToolBar ( ) ; unfocusableToolBar0 . setComponentOrientation ( ( ComponentOrientation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UnfocusableToolBar ( ) { / / Update toolBar buttons when component orientation changes / / and when buttons are added or removed to it addPropertyChangeListener ( "componentOrientation" , new PropertyChangeListener ( ) { void propertyChange ( PropertyChangeEvent evt ) { updateToolBarButtons ( ) ; } } ) ; addContainerListener ( new ContainerListener ( ) { void componentAdded ( ContainerEvent ev ) { updateToolBarButtons ( ) ; } void componentRemoved ( ContainerEvent ev ) { } } ) ; }
void test1 ( ) throws Throwable { UnfocusableToolBar unfocusableToolBar0 = new UnfocusableToolBar ( ) ; unfocusableToolBar0 . addSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UnfocusableToolBar ( ) { / / Update toolBar buttons when component orientation changes / / and when buttons are added or removed to it addPropertyChangeListener ( "componentOrientation" , new PropertyChangeListener ( ) { void propertyChange ( PropertyChangeEvent evt ) { updateToolBarButtons ( ) ; } } ) ; addContainerListener ( new ContainerListener ( ) { void componentAdded ( ContainerEvent ev ) { updateToolBarButtons ( ) ; } void componentRemoved ( ContainerEvent ev ) { } } ) ; }
void test2 ( ) throws Throwable { UnfocusableToolBar unfocusableToolBar0 = new UnfocusableToolBar ( ) ; DefaultEditorKit . InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit . InsertContentAction ( ) ; JButton jButton0 = unfocusableToolBar0 . add ( ( Action ) defaultEditorKit_InsertContentAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( FurnitureCategory category ) { if ( this . categories . contains ( category ) ) { throw new IllegalHomonymException ( category . getName ( ) + " already exists in catalog" ) ; } this . categories . add ( category ) ; this . sorted = false ; }
void test0 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; FurnitureCatalogController furnitureCatalogController0 = new FurnitureCatalogController ( furnitureCatalog0 , ( ViewFactory ) null ) ; FurnitureCatalogTree furnitureCatalogTree0 = new FurnitureCatalogTree ( furnitureCatalog0 , furnitureCatalogController0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FurnitureCatalogTree ( FurnitureCatalog catalog ) { this ( catalog , null ) ; }
void test1 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; FurnitureCatalogTree furnitureCatalogTree0 = new FurnitureCatalogTree ( furnitureCatalog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FurnitureCatalogTree ( FurnitureCatalog catalog ) { this ( catalog , null ) ; }
void test2 ( ) throws Throwable { FurnitureCatalog furnitureCatalog0 = new FurnitureCatalog ( ) ; FurnitureCatalogController furnitureCatalogController0 = new FurnitureCatalogController ( furnitureCatalog0 , ( ViewFactory ) null ) ; FurnitureCatalogTree furnitureCatalogTree0 = new FurnitureCatalogTree ( furnitureCatalog0 , furnitureCatalogController0 ) ; List < CatalogPieceOfFurniture > list0 = furnitureCatalogController0 . getSelectedFurniture ( ) ; furnitureCatalogController0 . setSelectedFurniture ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelectedFurniture ( List < HomePieceOfFurniture > selectedFurniture ) { if ( this . home . isBasePlanLocked ( ) ) { selectedFurniture = getFurnitureNotPartOfBasePlan ( selectedFurniture ) ; } this . home . setSelectedItems ( selectedFurniture ) ; }
void test0 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( 32 ) ; float float0 = proportionalLayout0 . getLayoutAlignmentY ( ( Container ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLayoutAlignmentY ( Container target ) { return 0f ; }
void test3 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( 205 ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; proportionalLayout0 . removeLayoutComponent ( ( Component ) defaultTreeCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeLayoutComponent ( Component component ) { }
void test4 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( ) ; JToolTip jToolTip0 = new JToolTip ( ) ; float float0 = proportionalLayout0 . getLayoutAlignmentX ( ( Container ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getLayoutAlignmentX ( Container target ) { return 0 . 5f ; }
void test5 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( 205 ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; proportionalLayout0 . addLayoutComponent ( ( Component ) defaultTreeCellRenderer0 , ( Object ) "SmallIcon" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addLayoutComponent ( Component component , Object constraints ) { if ( constraints = = Constraints . TOP ) { this . topComponent = component ; } else if ( constraints = = Constraints . BOTTOM ) { this . bottomComponent = component ; } }
void test6 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( ) ; JToolTip jToolTip0 = new JToolTip ( ) ; proportionalLayout0 . layoutContainer ( ( Container ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layoutContainer ( Container parent ) { Insets parentInsets = parent . getInsets ( ) ; int parentAvailableWidth = parent . getWidth ( ) - parentInsets . left - parentInsets . right ; int parentAvailableHeight = parent . getHeight ( ) - parentInsets . top - parentInsets . bottom ; / / Component at top is sized at container width and at its preferred height boolean topComponentUsed = this . topComponent ! = null & & this . topComponent . getParent ( ) ! = null ; if ( topComponentUsed ) { this . topComponent . setBounds ( parentInsets . left , parentInsets . top , parentAvailableWidth , Math . min ( this . topComponent . getPreferredSize ( ) . height , parentAvailableHeight ) ) ; } / / Component is centered in the rest of the space and sized proportionally to its preferred size if ( this . bottomComponent ! = null & & this . bottomComponent . getParent ( ) ! = null ) { Dimension bottomComponentPreferredSize = this . bottomComponent . getPreferredSize ( ) ; int bottomComponentHeight = parentAvailableHeight ; int bottomComponentY = parentInsets . top ; if ( topComponentUsed ) { int occupiedHeight = this . topComponent . getHeight ( ) + this . gap ; bottomComponentHeight - = occupiedHeight ; bottomComponentY + = occupiedHeight ; } int bottomComponentWidth = bottomComponentHeight * bottomComponentPreferredSize . width / bottomComponentPreferredSize . height ; int bottomComponentX = parentInsets . left ; / / Adjust component width and height if it's larger than parent if ( bottomComponentWidth > parentAvailableWidth ) { bottomComponentWidth = parentAvailableWidth ; int previousHeight = bottomComponentHeight ; bottomComponentHeight = bottomComponentWidth * bottomComponentPreferredSize . height / bottomComponentPreferredSize . width ; bottomComponentY + = ( previousHeight - bottomComponentHeight ) / 2 ; } else { / / Center component in width bottomComponentX + = ( parentAvailableWidth - bottomComponentWidth ) / 2 ; } this . bottomComponent . setBounds ( bottomComponentX , bottomComponentY , bottomComponentWidth , bottomComponentHeight ) ; } }
void test7 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( ( - 1863 ) ) ; JMenu jMenu0 = new JMenu ( ) ; Dimension dimension0 = proportionalLayout0 . minimumLayoutSize ( ( Container ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension minimumLayoutSize ( Container parent ) { Insets parentInsets = parent . getInsets ( ) ; int minWidth = 0 ; int minHeight = 0 ; boolean topComponentUsed = this . topComponent ! = null & & this . topComponent . getParent ( ) ! = null ; if ( topComponentUsed ) { Dimension topComponentMinSize = this . topComponent . getMinimumSize ( ) ; minWidth = Math . max ( minWidth , topComponentMinSize . width ) ; minHeight = topComponentMinSize . height ; } if ( this . bottomComponent ! = null & & this . bottomComponent . getParent ( ) ! = null ) { Dimension bottomComponentMinSize = this . bottomComponent . getMinimumSize ( ) ; minWidth = Math . max ( minWidth , bottomComponentMinSize . width ) ; minHeight + = bottomComponentMinSize . height ; if ( topComponentUsed ) { minHeight + = this . gap ; } } return new Dimension ( minWidth + parentInsets . left + parentInsets . right , minHeight + parentInsets . top + parentInsets . bottom ) ; }
void test8 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( ( - 1863 ) ) ; JMenu jMenu0 = new JMenu ( ) ; Dimension dimension0 = proportionalLayout0 . maximumLayoutSize ( ( Container ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension maximumLayoutSize ( Container parent ) { Insets parentInsets = parent . getInsets ( ) ; int maxWidth = 0 ; int maxHeight = 0 ; boolean topComponentUsed = this . topComponent ! = null & & this . topComponent . getParent ( ) ! = null ; if ( topComponentUsed ) { Dimension topComponentMaxSize = this . topComponent . getMaximumSize ( ) ; maxWidth = Math . max ( maxWidth , topComponentMaxSize . width ) ; maxHeight = topComponentMaxSize . height ; } if ( this . bottomComponent ! = null & & this . bottomComponent . getParent ( ) ! = null ) { Dimension bottomComponentMaxSize = this . bottomComponent . getMaximumSize ( ) ; maxWidth = Math . max ( maxWidth , bottomComponentMaxSize . width ) ; maxHeight + = bottomComponentMaxSize . height ; if ( topComponentUsed ) { maxHeight + = this . gap ; } } return new Dimension ( maxWidth + parentInsets . left + parentInsets . right , maxHeight + parentInsets . top + parentInsets . bottom ) ; }
void test9 ( ) throws Throwable { ProportionalLayout proportionalLayout0 = new ProportionalLayout ( ) ; JMenu jMenu0 = new JMenu ( ) ; Dimension dimension0 = proportionalLayout0 . preferredLayoutSize ( ( Container ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension preferredLayoutSize ( Container parent ) { Insets parentInsets = parent . getInsets ( ) ; int preferredWidth = 0 ; int preferredHeight = 0 ; boolean topComponentUsed = this . topComponent ! = null & & this . topComponent . getParent ( ) ! = null ; if ( topComponentUsed ) { Dimension topComponentPreferredSize = this . topComponent . getPreferredSize ( ) ; preferredWidth = Math . max ( preferredWidth , topComponentPreferredSize . width ) ; preferredHeight = topComponentPreferredSize . height ; } if ( this . bottomComponent ! = null & & this . bottomComponent . getParent ( ) ! = null ) { Dimension bottomComponentPreferredSize = this . bottomComponent . getPreferredSize ( ) ; preferredWidth = Math . max ( preferredWidth , bottomComponentPreferredSize . width ) ; preferredHeight + = bottomComponentPreferredSize . height ; if ( topComponentUsed ) { preferredHeight + = this . gap ; } } return new Dimension ( preferredWidth + parentInsets . left + parentInsets . right , preferredHeight + parentInsets . top + parentInsets . bottom ) ; }
void test0 ( ) throws Throwable { Home home0 = new Home ( ) ; FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; furnitureTransferHandler0 . dragEntered ( ( JComponent ) null , ( Transferable ) null , 566 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrop ( ) { / / dropLocation exists only during a drag and drop operation return this . dropLocation ! = null ; }
void test1 ( ) throws Throwable { Home home0 = new Home ( ) ; FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; Object [ ] objectArray0 = new Object [ 6 ] ; JComboBox jComboBox0 = new JComboBox ( objectArray0 ) ; JToolTip jToolTip0 = jComboBox0 . createToolTip ( ) ; furnitureTransferHandler0 . dragExited ( ( JComponent ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void dragExited ( JComponent destination ) { if ( this . isDragging ) { this . homeController . getPlanController ( ) . stopDraggedItems ( ) ; this . isDragging = false ; } }
void test2 ( ) throws Throwable { FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( ( Home ) null , ( ContentManager ) null , ( HomeController ) null ) ; DataFlavor [ ] dataFlavorArray0 = new DataFlavor [ 3 ] ; DataFlavor dataFlavor0 = DataFlavor . javaFileListFlavor ; dataFlavorArray0 [ 0 ] = dataFlavor0 ; boolean boolean0 = furnitureTransferHandler0 . canImport ( ( JComponent ) null , dataFlavorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( JComponent destination , DataFlavor [ ] flavors ) { return this . catalogController ! = null & & Arrays . asList ( flavors ) . contains ( DataFlavor . javaFileListFlavor ) ; }
void test4 ( ) throws Throwable { Home home0 = new Home ( ) ; FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; boolean boolean0 = furnitureTransferHandler0 . isDrop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrop ( ) { / / dropLocation exists only during a drag and drop operation return this . dropLocation ! = null ; }
void test5 ( ) throws Throwable { Home home0 = new Home ( ) ; FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; LinkedList < File > linkedList0 = new LinkedList < File > ( ) ; List < String > list0 = furnitureTransferHandler0 . getModelContents ( ( List < File > ) linkedList0 , ( ContentManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > getModelContents ( List < File > files , ContentManager contentManager ) { List < String > importableModels = new ArrayList < String > ( ) ; for ( File file : files ) { String absolutePath = file . getAbsolutePath ( ) ; if ( contentManager . isAcceptable ( absolutePath , ContentManager . ContentType . MODEL ) ) { importableModels . add ( absolutePath ) ; } } return importableModels ; }
void test2 ( ) throws Throwable { Home home0 = new Home ( ) ; FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; DataFlavor [ ] dataFlavorArray0 = new DataFlavor [ 1 ] ; DataFlavor dataFlavor0 = DataFlavor . javaFileListFlavor ; dataFlavorArray0 [ 0 ] = dataFlavor0 ; boolean boolean0 = furnitureTransferHandler0 . canImportFlavor ( dataFlavorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImportFlavor ( DataFlavor [ ] flavors ) { List < DataFlavor > flavorList = Arrays . asList ( flavors ) ; return flavorList . contains ( HomeTransferableList . HOME_FLAVOR ) | | flavorList . contains ( DataFlavor . javaFileListFlavor ) ; }
void test3 ( ) throws Throwable { Home home0 = new Home ( ) ; FurnitureTransferHandler furnitureTransferHandler0 = new FurnitureTransferHandler ( home0 , ( ContentManager ) null , ( HomeController ) null ) ; Vector < List < List < Object > > > vector0 = new Vector < List < List < Object > > > ( ) ; JComboBox jComboBox0 = new JComboBox ( vector0 ) ; StringSelection stringSelection0 = new StringSelection ( "Europe / Chisinau" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jComboBox0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = furnitureTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( JComponent destination , Transferable transferable ) { if ( canImport ( destination , transferable . getTransferDataFlavors ( ) ) ) { try { List < File > files = ( List < File > ) transferable . getTransferData ( DataFlavor . javaFileListFlavor ) ; List < String > importableModels = new ArrayList < String > ( ) ; for ( File file : files ) { String absolutePath = file . getAbsolutePath ( ) ; if ( this . contentManager . isAcceptable ( absolutePath , ContentManager . ContentType . MODEL ) ) { importableModels . add ( absolutePath ) ; } } EventQueue . invokeLater ( new Runnable ( ) { void run ( ) { catalogController . dropFiles ( importableModels ) ; } } ) ; return ! importableModels . isEmpty ( ) ; } catch ( UnsupportedFlavorException ex ) { throw new RuntimeException ( "Can't import" , ex ) ; } catch ( IOException ex ) { throw new RuntimeException ( "Can't access to data" , ex ) ; } } else { return false ; } }
void test0 ( ) throws Throwable { IconManager iconManager0 = IconManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component3DManager getInstance ( ) { if ( instance = = null ) { instance = new Component3DManager ( ) ; } return instance ; }
void test1 ( ) throws Throwable { IconManager iconManager0 = IconManager . getInstance ( ) ; JScrollPane jScrollPane0 = new JScrollPane ( ) ; jScrollPane0 . getCorner ( "^fq$" ) ; Icon icon0 = iconManager0 . getIcon ( ( Content ) null , ( Component ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Icon getWaitIcon ( int height ) { return getIcon ( this . waitIconContent , height , null ) ; }
void test2 ( ) throws Throwable { IconManager iconManager0 = IconManager . getInstance ( ) ; ImageIcon imageIcon0 = ( ImageIcon ) iconManager0 . getErrorIcon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Icon getErrorIcon ( int height ) { return getIcon ( this . errorIconContent , height , null ) ; }
void test3 ( ) throws Throwable { IconManager iconManager0 = IconManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component3DManager getInstance ( ) { if ( instance = = null ) { instance = new Component3DManager ( ) ; } return instance ; }
void test4 ( ) throws Throwable { IconManager iconManager0 = IconManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorIcon ( Icon icon ) { Map < Integer , Icon > errorIcons = this . icons . get ( this . errorIconContent ) ; return errorIcons ! = null & & ( errorIcons . containsValue ( icon ) | | icon instanceof IconProxy & & errorIcons . containsValue ( ( ( IconProxy ) icon ) . getIcon ( ) ) ) ; }
void test5 ( ) throws Throwable { IconManager iconManager0 = IconManager . getInstance ( ) ; ImageIcon imageIcon0 = ( ImageIcon ) iconManager0 . getErrorIcon ( 32 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Icon getErrorIcon ( int height ) { return getIcon ( this . errorIconContent , height , null ) ; }
void test2 ( ) throws Throwable { MessageFormat messageFormat0 = HomePrintableComponent . Variable . getMessageFormat ( "Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Home home0 = new Home ( ) ; StyledEditorKit styledEditorKit0 = new StyledEditorKit ( ) ; DefaultStyledDocument defaultStyledDocument0 = ( DefaultStyledDocument ) styledEditorKit0 . createDefaultDocument ( ) ; JTextArea jTextArea0 = new JTextArea ( ( Document ) defaultStyledDocument0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jTextArea0 . getFont ( ) ; HomePrintableComponent homePrintableComponent0 = new HomePrintableComponent ( home0 , ( HomeController ) null , ( Font ) fontUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPage ( ) { return this . page ; }
