void test0 ( ) throws Throwable { TemplateWorkbook templateWorkbook0 = new TemplateWorkbook ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { TemplateIt templateIt0 = new TemplateIt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "" , ( HSSFSheet ) null , ( - 724 ) , ( List < NamedStyle > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int width ( ) { return width ; }
void test1 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "" , ( HSSFSheet ) null , ( - 724 ) , ( List < NamedStyle > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int width ( ) { return width ; }
void test2 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "5" , ( HSSFSheet ) null , 1979 , ( List < NamedStyle > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int height ( ) { return height ; }
void test3 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "" , ( HSSFSheet ) null , ( - 724 ) , ( List < NamedStyle > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int width ( ) { return width ; }
void test0 ( ) throws Throwable { Region region0 = new Region ( ( Reference ) null , ( Reference ) null ) ; region0 . setStartReference ( ( Reference ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test1 ( ) throws Throwable { Region region0 = new Region ( ) ; String string0 = region0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test2 ( ) throws Throwable { Region region0 = new Region ( ( Reference ) null , ( Reference ) null ) ; region0 . setEndReference ( ( Reference ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test0 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; Poi2ItextUtil poi2ItextUtil0 = new Poi2ItextUtil ( hSSFWorkbook0 ) ; int int0 = poi2ItextUtil0 . getDefaultCharWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultCharWidth ( ) { char defaultChar = '0' ; HSSFFont defaultFont = workbook . getFontAt ( ( short ) 0 ) ; AttributedString str = new AttributedString ( "" + defaultChar ) ; copyAttributes ( defaultFont , str , 0 , 1 ) ; FontRenderContext frc = new FontRenderContext ( null , true , true ) ; TextLayout layout = new TextLayout ( str . getIterator ( ) , frc ) ; int defaultCharWidth = ( int ) layout . getAdvance ( ) ; return defaultCharWidth ; }
void test1 ( ) throws Throwable { HSSFColor hSSFColor0 = new HSSFColor ( ) ; Color color0 = Poi2ItextUtil . colorPOI2Itext ( hSSFColor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test2 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; Poi2ItextUtil poi2ItextUtil0 = new Poi2ItextUtil ( hSSFWorkbook0 ) ; Font font0 = poi2ItextUtil0 . chooseFont ( ( short ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamedStyle getStyle ( String styleName ) { return stylesMap . get ( styleName ) ; }
void test3 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; Poi2ItextUtil poi2ItextUtil0 = new Poi2ItextUtil ( hSSFWorkbook0 ) ; HSSFSheet hSSFSheet0 = hSSFWorkbook0 . createSheet ( "f" ) ; HSSFRow hSSFRow0 = hSSFSheet0 . createRow ( 163 ) ; HSSFCell hSSFCell0 = hSSFRow0 . createCell ( ( short ) 0 ) ; poi2ItextUtil0 . copyBackgroundColor ( hSSFCell0 , ( PdfPCell ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultCharWidth ( ) { char defaultChar = '0' ; HSSFFont defaultFont = workbook . getFontAt ( ( short ) 0 ) ; AttributedString str = new AttributedString ( "" + defaultChar ) ; copyAttributes ( defaultFont , str , 0 , 1 ) ; FontRenderContext frc = new FontRenderContext ( null , true , true ) ; TextLayout layout = new TextLayout ( str . getIterator ( ) , frc ) ; int defaultCharWidth = ( int ) layout . getAdvance ( ) ; return defaultCharWidth ; }
void test0 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; int int0 = reference0 . column ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test1 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; int int0 = reference0 . row ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int column ( ) { return column ; }
void test2 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 1 ) , ( - 1 ) ) ; int int0 = reference0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + column ; result = prime * result + row ; return result ; }
void test3 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; String string0 = reference0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test4 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; boolean boolean0 = reference0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test5 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; boolean boolean0 = reference0 . equals ( ( Object ) "1 , 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test6 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; Reference reference1 = new Reference ( 1 , 1 ) ; boolean boolean0 = reference0 . equals ( ( Object ) reference1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test7 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 102 ) , 0 ) ; Reference reference1 = new Reference ( 9 , 0 ) ; boolean boolean0 = reference0 . equals ( ( Object ) reference1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test8 ( ) throws Throwable { Reference reference0 = new Reference ( 0 , 0 ) ; Reference reference1 = new Reference ( 0 , 0 ) ; boolean boolean0 = reference0 . equals ( ( Object ) reference1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test0 ( ) throws Throwable { StaticTemplate staticTemplate0 = new StaticTemplate ( " . papersize = " , ( HSSFSheet ) null ) ; String string0 = staticTemplate0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test1 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; HSSFSheet hSSFSheet0 = hSSFWorkbook0 . createSheet ( ) ; StaticTemplate staticTemplate0 = new StaticTemplate ( "a > Qi'xxF` * { + H5a" , hSSFSheet0 ) ; staticTemplate0 . setEndReference ( ( Reference ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParametersNumber ( ) { return parameters . size ( ) ; }
void test3 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; HSSFSheet hSSFSheet0 = hSSFWorkbook0 . createSheet ( ) ; StaticTemplate staticTemplate0 = new StaticTemplate ( "a > Qi'xxF` * { + H5a" , hSSFSheet0 ) ; staticTemplate0 . setStartReference ( ( Reference ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { StaticTemplate staticTemplate0 = new StaticTemplate ( " . papersize = " , ( HSSFSheet ) null ) ; int int0 = staticTemplate0 . getParameterIndex ( 0 , ( - 1022 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParameterIndex ( int r , int c ) { Integer idx = - 1 ; if ( selectList = = null ) { Parameter p = super . getParameter ( r , c ) ; if ( p ! = null ) { idx = p . getIndex ( ) ; } } else { idx = parameterIndexMap . get ( r ) . get ( c ) ; if ( idx = = null ) { idx = - 1 ; } } return idx ; }
void test0 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; int int0 = parameter0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return column ; }
void test1 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; int int0 = parameter0 . getRow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return column ; }
void test2 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return column ; }
void test3 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; int int0 = parameter0 . getColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRow ( ) { return row ; }
void test4 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return column ; }
void test5 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setIndex ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return column ; }
void test6 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRow ( ) { return row ; }
void test7 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRow ( ) { return row ; }
void test0 ( ) throws Throwable { OpMatcher opMatcher0 = new OpMatcher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String [ ] stringArray0 = OpMatcher . matchTemplateBegin ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] matchTemplateBegin ( String text ) { String [ ] names = null ; if ( text ! = null ) { Matcher m = null ; if ( text . indexOf ( TBEGIN1 ) ! = - 1 ) { m = templateBeginPattern1 . matcher ( text ) ; } else if ( text . indexOf ( TBEGIN2 ) ! = - 1 ) { m = templateBeginPattern2 . matcher ( text ) ; } if ( m ! = null ) { if ( m . groupCount ( ) = = 3 ) { boolean matches = m . find ( ) ; if ( matches ) { String group = m . group ( 1 ) ; if ( group ! = null ) { names = group . split ( "\\s * , \\s * " ) ; } } } } } return names ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = OpMatcher . matchTemplateBegin ( "@tbegin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] matchTemplateBegin ( String text ) { String [ ] names = null ; if ( text ! = null ) { Matcher m = null ; if ( text . indexOf ( TBEGIN1 ) ! = - 1 ) { m = templateBeginPattern1 . matcher ( text ) ; } else if ( text . indexOf ( TBEGIN2 ) ! = - 1 ) { m = templateBeginPattern2 . matcher ( text ) ; } if ( m ! = null ) { if ( m . groupCount ( ) = = 3 ) { boolean matches = m . find ( ) ; if ( matches ) { String group = m . group ( 1 ) ; if ( group ! = null ) { names = group . split ( "\\s * , \\s * " ) ; } } } } } return names ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = OpMatcher . matchTemplateBegin ( "@template_begin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] matchTemplateBegin ( String text ) { String [ ] names = null ; if ( text ! = null ) { Matcher m = null ; if ( text . indexOf ( TBEGIN1 ) ! = - 1 ) { m = templateBeginPattern1 . matcher ( text ) ; } else if ( text . indexOf ( TBEGIN2 ) ! = - 1 ) { m = templateBeginPattern2 . matcher ( text ) ; } if ( m ! = null ) { if ( m . groupCount ( ) = = 3 ) { boolean matches = m . find ( ) ; if ( matches ) { String group = m . group ( 1 ) ; if ( group ! = null ) { names = group . split ( "\\s * , \\s * " ) ; } } } } } return names ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = OpMatcher . matchTemplateBegin ( "M = ] #7L + IL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] matchTemplateBegin ( String text ) { String [ ] names = null ; if ( text ! = null ) { Matcher m = null ; if ( text . indexOf ( TBEGIN1 ) ! = - 1 ) { m = templateBeginPattern1 . matcher ( text ) ; } else if ( text . indexOf ( TBEGIN2 ) ! = - 1 ) { m = templateBeginPattern2 . matcher ( text ) ; } if ( m ! = null ) { if ( m . groupCount ( ) = = 3 ) { boolean matches = m . find ( ) ; if ( matches ) { String group = m . group ( 1 ) ; if ( group ! = null ) { names = group . split ( "\\s * , \\s * " ) ; } } } } } return names ; }
void test6 ( ) throws Throwable { boolean boolean0 = OpMatcher . matchTemplateEnd ( "@tbegin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchTemplateEnd ( String text ) { return text ! = null & & ( text . indexOf ( "@template_end" ) ! = - 1 ) | | ( text . indexOf ( "@tend" ) ! = - 1 ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = OpMatcher . matchTemplateEnd ( "@template_end" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchTemplateEnd ( String text ) { return text ! = null & & ( text . indexOf ( "@template_end" ) ! = - 1 ) | | ( text . indexOf ( "@tend" ) ! = - 1 ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = OpMatcher . matchTemplateEnd ( "@tend" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchTemplateEnd ( String text ) { return text ! = null & & ( text . indexOf ( "@template_end" ) ! = - 1 ) | | ( text . indexOf ( "@tend" ) ! = - 1 ) ; }
void test9 ( ) throws Throwable { String string0 = OpMatcher . matchTemplateParameter ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String matchTemplateParameter ( String text ) { String parameterName = null ; if ( text ! = null ) { if ( text . indexOf ( "#" ) ! = - 1 ) { Matcher fieldNameMatcher = parameterNamePattern . matcher ( text ) ; boolean found = fieldNameMatcher . find ( ) ; if ( found & & fieldNameMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNameMatcher . group ( 1 ) ; } else { Matcher fieldNumberMatcher = parameterNumberPattern . matcher ( text ) ; found = fieldNumberMatcher . find ( ) ; if ( found & & fieldNumberMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNumberMatcher . group ( 1 ) ; } } } } return parameterName ; }
void test10 ( ) throws Throwable { String string0 = OpMatcher . matchTemplateParameter ( "8# , l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String matchTemplateParameter ( String text ) { String parameterName = null ; if ( text ! = null ) { if ( text . indexOf ( "#" ) ! = - 1 ) { Matcher fieldNameMatcher = parameterNamePattern . matcher ( text ) ; boolean found = fieldNameMatcher . find ( ) ; if ( found & & fieldNameMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNameMatcher . group ( 1 ) ; } else { Matcher fieldNumberMatcher = parameterNumberPattern . matcher ( text ) ; found = fieldNumberMatcher . find ( ) ; if ( found & & fieldNumberMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNumberMatcher . group ( 1 ) ; } } } } return parameterName ; }
void test11 ( ) throws Throwable { String string0 = OpMatcher . matchTemplateParameter ( "@template_begin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String matchTemplateParameter ( String text ) { String parameterName = null ; if ( text ! = null ) { if ( text . indexOf ( "#" ) ! = - 1 ) { Matcher fieldNameMatcher = parameterNamePattern . matcher ( text ) ; boolean found = fieldNameMatcher . find ( ) ; if ( found & & fieldNameMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNameMatcher . group ( 1 ) ; } else { Matcher fieldNumberMatcher = parameterNumberPattern . matcher ( text ) ; found = fieldNumberMatcher . find ( ) ; if ( found & & fieldNumberMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNumberMatcher . group ( 1 ) ; } } } } return parameterName ; }
void test12 ( ) throws Throwable { String string0 = OpMatcher . matchTemplateParameter ( " = b#fqN . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String matchTemplateParameter ( String text ) { String parameterName = null ; if ( text ! = null ) { if ( text . indexOf ( "#" ) ! = - 1 ) { Matcher fieldNameMatcher = parameterNamePattern . matcher ( text ) ; boolean found = fieldNameMatcher . find ( ) ; if ( found & & fieldNameMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNameMatcher . group ( 1 ) ; } else { Matcher fieldNumberMatcher = parameterNumberPattern . matcher ( text ) ; found = fieldNumberMatcher . find ( ) ; if ( found & & fieldNumberMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNumberMatcher . group ( 1 ) ; } } } } return parameterName ; }
void test13 ( ) throws Throwable { String string0 = OpMatcher . matchTemplateParameter ( "M = ] #7L + IL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String matchTemplateParameter ( String text ) { String parameterName = null ; if ( text ! = null ) { if ( text . indexOf ( "#" ) ! = - 1 ) { Matcher fieldNameMatcher = parameterNamePattern . matcher ( text ) ; boolean found = fieldNameMatcher . find ( ) ; if ( found & & fieldNameMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNameMatcher . group ( 1 ) ; } else { Matcher fieldNumberMatcher = parameterNumberPattern . matcher ( text ) ; found = fieldNumberMatcher . find ( ) ; if ( found & & fieldNumberMatcher . groupCount ( ) = = 1 ) { parameterName = fieldNumberMatcher . group ( 1 ) ; } } } } return parameterName ; }
void test14 ( ) throws Throwable { boolean boolean0 = OpMatcher . matchTemplateName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchTemplateName ( String text ) { if ( text ! = null ) { return templateNamePattern . matcher ( text ) . matches ( ) ; } else { return false ; } }
void test15 ( ) throws Throwable { boolean boolean0 = OpMatcher . matchTemplateName ( "7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchTemplateName ( String text ) { if ( text ! = null ) { return templateNamePattern . matcher ( text ) . matches ( ) ; } else { return false ; } }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; TemplateProcessor templateProcessor0 = new TemplateProcessor ( ( InputStream ) byteArrayInputStream0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TemplateProcessor ( File templateWorkbook ) throws IOException { this ( new BufferedInputStream ( new FileInputStream ( templateWorkbook ) ) , true ) ; }
void test0 ( ) throws Throwable { NamedStyle namedStyle0 = new NamedStyle ( "" , false ) ; String string0 = namedStyle0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test1 ( ) throws Throwable { NamedStyle namedStyle0 = new NamedStyle ( ( String ) null , true ) ; int int0 = namedStyle0 . getRow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasParam ( ) { return hasParam ; }
void test2 ( ) throws Throwable { NamedStyle namedStyle0 = new NamedStyle ( "" , true ) ; namedStyle0 . setColumn ( 413 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasParam ( ) { return hasParam ; }
void test3 ( ) throws Throwable { NamedStyle namedStyle0 = new NamedStyle ( ( String ) null , true ) ; namedStyle0 . setRow ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return start + " , " + end ; }
void test4 ( ) throws Throwable { NamedStyle namedStyle0 = new NamedStyle ( "" , true ) ; int int0 = namedStyle0 . getColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasParam ( ) { return hasParam ; }
void test0 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "" , ( HSSFSheet ) null , ( - 1381 ) , ( List < NamedStyle > ) linkedList0 ) ; int int0 = dynamicTemplate0 . getParametersNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParametersNumber ( ) { return parameters . size ( ) ; }
void test1 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( " text - errorT . = " , ( HSSFSheet ) null , 256 , ( List < NamedStyle > ) linkedList0 ) ; String string0 = dynamicTemplate0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( " text - errorT . = " , ( HSSFSheet ) null , 256 , ( List < NamedStyle > ) linkedList0 ) ; dynamicTemplate0 . createParameter ( " text - errorT . = " , 256 , 256 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParametersNumber ( ) { return parameters . size ( ) ; }
void test3 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "" , ( HSSFSheet ) null , ( - 1381 ) , ( List < NamedStyle > ) linkedList0 ) ; boolean boolean0 = dynamicTemplate0 . isRowBroken ( ( - 1381 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRowBroken ( int r ) { return sheet . isRowBroken ( absoluteRow ( r ) ) ; }
void test5 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "6" , ( HSSFSheet ) null , ( - 1 ) , ( List < NamedStyle > ) linkedList0 ) ; dynamicTemplate0 . createParameter ( "6" , ( - 1 ) , ( - 1 ) ) ; dynamicTemplate0 . createParameter ( "6" , ( - 1 ) , ( - 1 ) ) ; dynamicTemplate0 . createParameter ( "6" , 6 , 6 ) ; dynamicTemplate0 . createParameter ( "6" , ( - 1 ) , ( - 1 ) ) ; dynamicTemplate0 . createParameter ( "6" , ( - 1 ) , ( - 1 ) ) ; dynamicTemplate0 . createParameter ( "6" , 6 , 6 ) ; dynamicTemplate0 . createParameter ( "6" , 6 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParametersNumber ( ) { return parameters . size ( ) ; }
void test6 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "" , ( HSSFSheet ) null , ( - 1381 ) , ( List < NamedStyle > ) linkedList0 ) ; int int0 = dynamicTemplate0 . getParameterIndex ( ( - 1381 ) , ( - 1381 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParameterIndex ( int r , int c ) { Integer idx = - 1 ; if ( selectList = = null ) { Parameter p = super . getParameter ( r , c ) ; if ( p ! = null ) { idx = p . getIndex ( ) ; } } else { idx = parameterIndexMap . get ( r ) . get ( c ) ; if ( idx = = null ) { idx = - 1 ; } } return idx ; }
void test7 ( ) throws Throwable { LinkedList < NamedStyle > linkedList0 = new LinkedList < NamedStyle > ( ) ; DynamicTemplate dynamicTemplate0 = new DynamicTemplate ( "6" , ( HSSFSheet ) null , ( - 1 ) , ( List < NamedStyle > ) linkedList0 ) ; dynamicTemplate0 . createParameter ( "6" , ( - 1 ) , ( - 1 ) ) ; int int0 = dynamicTemplate0 . getParameterIndex ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParametersNumber ( ) { return parameters . size ( ) ; }
void test0 ( ) throws Throwable { FormulaUtil formulaUtil0 = new FormulaUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = FormulaUtil . offsetRelativeReferences ( ( HSSFWorkbook ) null , "d$2" , 1777 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String offsetRelativeReferences ( HSSFWorkbook wb , String formula , int roff , int coff ) { Ptg [ ] ptgs = HSSFFormulaParser . parse ( formula , wb ) ; offsetRelativePtgs ( ptgs , roff , coff ) ; String newFormula = HSSFFormulaParser . toFormulaString ( wb , ptgs ) ; return newFormula ; }
void test2 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; String string0 = FormulaUtil . offsetRelativeReferences ( hSSFWorkbook0 , "5" , ( - 362 ) , ( - 362 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String offsetRelativeReferences ( HSSFWorkbook wb , String formula , int roff , int coff ) { Ptg [ ] ptgs = HSSFFormulaParser . parse ( formula , wb ) ; offsetRelativePtgs ( ptgs , roff , coff ) ; String newFormula = HSSFFormulaParser . toFormulaString ( wb , ptgs ) ; return newFormula ; }
void test3 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; String string0 = FormulaUtil . offsetRelativeReferences ( hSSFWorkbook0 , "As2" , 0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String offsetRelativeReferences ( HSSFWorkbook wb , String formula , int roff , int coff ) { Ptg [ ] ptgs = HSSFFormulaParser . parse ( formula , wb ) ; offsetRelativePtgs ( ptgs , roff , coff ) ; String newFormula = HSSFFormulaParser . toFormulaString ( wb , ptgs ) ; return newFormula ; }
void test4 ( ) throws Throwable { HSSFWorkbook hSSFWorkbook0 = new HSSFWorkbook ( ) ; String string0 = FormulaUtil . offsetRelativeReferences ( hSSFWorkbook0 , "As2" , ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String offsetRelativeReferences ( HSSFWorkbook wb , String formula , int roff , int coff ) { Ptg [ ] ptgs = HSSFFormulaParser . parse ( formula , wb ) ; offsetRelativePtgs ( ptgs , roff , coff ) ; String newFormula = HSSFFormulaParser . toFormulaString ( wb , ptgs ) ; return newFormula ; }
