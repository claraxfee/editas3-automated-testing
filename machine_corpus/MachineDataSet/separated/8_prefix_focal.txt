void test0 ( ) throws Throwable { Db4oConfig db4oConfig0 = new Db4oConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { WritingXLS writingXLS0 = new WritingXLS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 7 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; Class < ? > class0 = String . class ; tableStockage0 . setColumnClass ( 8 , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 7 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; tableStockage0 . setColumnName ( 8 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test3 ( ) throws Throwable { TableStockage tableStockage0 = new TableStockage ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return this . title . length ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 7 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int col ) { return false ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 7 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; String [ ] stringArray1 = tableStockage0 . getNomColonnes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNomColonnes ( ) { return nomColonnes ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 7 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; Class < ? > class0 = MenuElement . class ; tableStockage0 . setColumnClass ( 8 , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test7 ( ) throws Throwable { TableStockage tableStockage0 = new TableStockage ( ) ; Class < ? > class0 = Boolean . class ; tableStockage0 . setColumnClass ( 584 , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test8 ( ) throws Throwable { TableStockage tableStockage0 = new TableStockage ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remplirMatrice ( Object value , int rowIndex , int columnIndex ) { if ( rowIndex = = 0 ) { nomColonnes [ columnIndex ] = ( String ) value ; } else { matrice [ rowIndex - 1 ] [ columnIndex ] = value ; } }
void test0 ( ) throws Throwable { CreationFormateurAction creationFormateurAction0 = new CreationFormateurAction ( ( FenetrePrincipale ) null , "Q1f" , ( Controler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreationFormateurAction ( FenetrePrincipale fenetre , String texte , Controler c ) { super ( texte ) ; this . fenetre = fenetre ; this . c = c ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 57 ] ; MonFiltre monFiltre0 = new MonFiltre ( stringArray0 , "" ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = monFiltre0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) return true ; String suffixe = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) suffixe = s . substring ( i + 1 ) . toLowerCase ( ) ; return suffixe ! = null & & appartient ( suffixe ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; MonFiltre monFiltre0 = new MonFiltre ( stringArray0 , " } %Hbm2 ) { n & EAcP . " ) ; String string0 = monFiltre0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return laDescription ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; MonFiltre monFiltre0 = new MonFiltre ( stringArray0 , ( String ) null ) ; File file0 = new File ( ( String ) null , "bf_Q7`Pp . . ynu { ) x ] ) " ) ; boolean boolean0 = monFiltre0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) return true ; String suffixe = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) suffixe = s . substring ( i + 1 ) . toLowerCase ( ) ; return suffixe ! = null & & appartient ( suffixe ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; MonFiltre monFiltre0 = new MonFiltre ( stringArray0 , "_XLo | % | g" ) ; stringArray0 [ 4 ] = "nu { ) x ] ) " ; File file0 = new File ( "bfQ7`Pp . . nu { ) x ] ) " ) ; boolean boolean0 = monFiltre0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) return true ; String suffixe = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) suffixe = s . substring ( i + 1 ) . toLowerCase ( ) ; return suffixe ! = null & & appartient ( suffixe ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 57 ] ; MonFiltre monFiltre0 = new MonFiltre ( stringArray0 , "" ) ; File file0 = new File ( "" ) ; boolean boolean0 = monFiltre0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) return true ; String suffixe = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) suffixe = s . substring ( i + 1 ) . toLowerCase ( ) ; return suffixe ! = null & & appartient ( suffixe ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; MonFiltre monFiltre0 = new MonFiltre ( stringArray0 , " } %Hbm2 ) { n & EAcP . " ) ; File file0 = new File ( " } %Hbm2 ) { n & EAcP . " , " } %Hbm2 ) { n & EAcP . " ) ; boolean boolean0 = monFiltre0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) return true ; String suffixe = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) suffixe = s . substring ( i + 1 ) . toLowerCase ( ) ; return suffixe ! = null & & appartient ( suffixe ) ; }
void test0 ( ) throws Throwable { ImageIcon imageIcon0 = FenetrePrincipale . createImageIcon ( "GtHnQeu { ] \u0003ic } T" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImageIcon createImageIcon ( String path ) { java . net . URL imgURL = FenetrePrincipale . class . getResource ( path ) ; if ( imgURL ! = null ) { return new ImageIcon ( imgURL ) ; } else { System . err . println ( "Couldn't find file : " + path ) ; return null ; } }
void test1 ( ) throws Throwable { ImageIcon imageIcon0 = FenetrePrincipale . createImageIcon ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImageIcon createImageIcon ( String path ) { java . net . URL imgURL = FenetrePrincipale . class . getResource ( path ) ; if ( imgURL ! = null ) { return new ImageIcon ( imgURL ) ; } else { System . err . println ( "Couldn't find file : " + path ) ; return null ; } }
void test0 ( ) throws Throwable { ChargeImageAction chargeImageAction0 = new ChargeImageAction ( ( FenetrePrincipale ) null , "i" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChargeImageAction ( FenetrePrincipale fenetre , String texte ) { super ( texte ) ; this . fenetre = fenetre ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; Object [ ] [ ] objectArray0 = new Object [ 1 ] [ 3 ] ; SimpleTableDemo simpleTableDemo0 = new SimpleTableDemo ( stringArray0 , objectArray0 ) ; simpleTableDemo0 . getLigne ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getLigne ( Object nom ) { int tailleLigne = this . getNbrColonne ( ) ; int tailleCol = this . getNbrLigne ( ) ; String [ ] ligne = null ; for ( int j = 0 ; j < tailleCol ; j + + ) { for ( int i = 0 ; i < tailleLigne ; i + + ) { System . out . println ( i + " " + j ) ; if ( this . getValueAt ( i , j ) = = ( Object ) nom ) { for ( int k = 0 ; k < tailleLigne ; k + + ) { / / ligne [ k ] = ( String ) this . getValueAt ( k , j ) ; System . out . println ( this . getValueAt ( i , k ) ) ; } return ligne ; } } } return ligne ; }
void test0 ( ) throws Throwable { ExportExelAction exportExelAction0 = new ExportExelAction ( ( FenetrePrincipale ) null , " ( x { 4 { NKPFHCWr" , ( Controler ) null ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "set - writable" , 0 , " ( x { 4 { NKPFHCWr" , ( - 53L ) , 0 ) ; exportExelAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { new Zmodel ( fenetre . dataResp , fenetre . columnNamesResp ) ; ligneSelectionneResp = FenetrePrincipale . tableResp . getSelectedRow ( ) ; / / mise a jour des modif FenetrePrincipale . outputNomResp . setEditable ( false ) ; FenetrePrincipale . outputPrenomResp . setEditable ( false ) ; FenetrePrincipale . outputSexeResp . setEditable ( false ) ; FenetrePrincipale . outputEmailResp . setEditable ( false ) ; FenetrePrincipale . outputTelResp . setEditable ( false ) ; String nomResp = FenetrePrincipale . outputNomResp . getText ( ) ; String prenomResp = FenetrePrincipale . outputPrenomResp . getText ( ) ; String sexResp = FenetrePrincipale . outputSexeResp . getText ( ) ; String emailResp = FenetrePrincipale . outputEmailResp . getText ( ) ; String telResp = FenetrePrincipale . outputTelResp . getText ( ) ; FenetrePrincipale . tableResp . setValueAt ( nomResp , ligneSelectionneResp , 0 ) ; FenetrePrincipale . tableResp . setValueAt ( prenomResp , ligneSelectionneResp , 1 ) ; FenetrePrincipale . tableResp . setValueAt ( sexResp , ligneSelectionneResp , 2 ) ; FenetrePrincipale . tableResp . setValueAt ( emailResp , ligneSelectionneResp , 3 ) ; FenetrePrincipale . tableResp . setValueAt ( telResp , ligneSelectionneResp , 4 ) ; try { c . updateResponsable ( nomResp , prenomResp , sexResp , emailResp , telResp ) ; } catch ( Exception e1 ) { System . err . println ( "erreur d'update" ) ; e1 . printStackTrace ( ) ; } FenetrePrincipale . outputNomResp . setText ( "" ) ; FenetrePrincipale . outputPrenomResp . setText ( "" ) ; FenetrePrincipale . outputSexeResp . setText ( "" ) ; FenetrePrincipale . outputEmailResp . setText ( "" ) ; FenetrePrincipale . outputTelResp . setText ( "" ) ; }
void test0 ( ) throws Throwable { CreerUneFormationAction creerUneFormationAction0 = new CreerUneFormationAction ( ( FenetrePrincipale ) null , "ToolTipText" , ( Controler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreerUneFormationAction ( FenetrePrincipale fenetre , String texte , Controler c ) { super ( texte ) ; this . fenetre = fenetre ; this . c = c ; }
void test0 ( ) throws Throwable { EnvoiAcceptBourseAction envoiAcceptBourseAction0 = new EnvoiAcceptBourseAction ( ( FenetrePrincipale ) null , "_hH ( 5\"`E7IPq ) " , ( Controler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EnvoiAcceptBourseAction ( FenetrePrincipale fenetre , String texte , Controler c ) { super ( texte ) ; this . c = c ; }
void test0 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 1 ] ; Object object0 = Image . UndefinedProperty ; String [ ] stringArray0 = new String [ 6 ] ; Zmodel zmodel0 = new Zmodel ( objectArray0 , stringArray0 ) ; zmodel0 . setValueAt ( object0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test1 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 7 ] [ 10 ] ; String [ ] stringArray0 = new String [ 7 ] ; Zmodel zmodel0 = new Zmodel ( objectArray0 , stringArray0 ) ; zmodel0 . removeRow ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test2 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 1 ] ; String [ ] stringArray0 = new String [ 6 ] ; Zmodel zmodel0 = new Zmodel ( objectArray0 , stringArray0 ) ; Object object0 = zmodel0 . getValueAt ( 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int ligne , int col ) { return this . data [ ligne ] [ col ] ; }
void test4 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 7 ] [ 7 ] ; String [ ] stringArray0 = new String [ 5 ] ; Zmodel zmodel0 = new Zmodel ( objectArray0 , stringArray0 ) ; boolean boolean0 = zmodel0 . isCellEditable ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int col ) { return false ; }
void test5 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 9 ] ; String [ ] stringArray0 = new String [ 6 ] ; Zmodel zmodel0 = new Zmodel ( objectArray0 , stringArray0 ) ; zmodel0 . addRow ( objectArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test6 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 8 ] [ 1 ] ; String [ ] stringArray0 = new String [ 6 ] ; Zmodel zmodel0 = new Zmodel ( objectArray0 , stringArray0 ) ; zmodel0 . afficheData ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test0 ( ) throws Throwable { SharedListSelectionHandlerFormation sharedListSelectionHandlerFormation0 = new SharedListSelectionHandlerFormation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { EnvoiFormationAction envoiFormationAction0 = new EnvoiFormationAction ( ( FenetrePrincipale ) null , "oneTouchExpandable" , ( Controler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EnvoiFormationAction ( FenetrePrincipale fenetre , String texte , Controler c ) { super ( texte ) ; this . fenetre = fenetre ; this . c = c ; }
void test0 ( ) throws Throwable { SharedListSelectionHandlerResp sharedListSelectionHandlerResp0 = new SharedListSelectionHandlerResp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { CreerUnEtudiantAction creerUnEtudiantAction0 = new CreerUnEtudiantAction ( ( FenetrePrincipale ) null , "" , ( Controler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreerUnEtudiantAction ( FenetrePrincipale fenetre , String texte , Controler c ) { super ( texte ) ; this . fenetre = fenetre ; this . c = c ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 4 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . colonneMail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 7 ] = " ; r" ; Object [ ] [ ] objectArray0 = new Object [ 4 ] [ 9 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . ajouterLigne ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return this . title . length ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; Object [ ] [ ] objectArray0 = new Object [ 11 ] [ 10 ] ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . supprimerColonne ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; Object [ ] [ ] objectArray0 = new Object [ 4 ] [ 4 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 2 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 3 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . supprimerLigne ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; Object [ ] [ ] objectArray0 = new Object [ 4 ] [ 4 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 2 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 3 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . supprimerLigne ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 3 ] = " , 8f\"XYwt'X%MG" ; Object [ ] [ ] objectArray0 = new Object [ 1 ] [ 5 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . supprimerColonne ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableStockage separerColonne ( int indice ) { if ( ts . getColumnClass ( indice ) . equals ( String . class ) ) { / / on ne peut separer que des valeurs de type String int k = 0 ; String val = ( String ) ts . getValueAt ( 0 , indice ) ; String val1 = new String ( ) ; / * Test qui verifie si la colonne est separable ( par rapport a "l'espace" ) * / while ( ( int ) val . charAt ( k ) ! = 160 & & k ! = ( val . length ( ) - 1 ) ) { / / code possible de separation entre les mots val1 = val1 . concat ( String . valueOf ( val . charAt ( k ) ) ) ; k + + ; } if ( k = = ( val . length ( ) - 1 ) ) { / / le code de separation n'est pas 160 val1 = new String ( ) ; k = 0 ; while ( ( int ) val . charAt ( k ) ! = 32 & & k ! = ( val . length ( ) - 1 ) ) { / / si la separation entre les mots est l'espace val1 = val1 . concat ( String . valueOf ( val . charAt ( k ) ) ) ; k + + ; } } if ( k ! = ( val . length ( ) - 1 ) ) { / / la colonne est separable car il y a un espace this . nbColonnes + + ; TableStockage tableS = new TableStockage ( nbLignes , nbColonnes ) ; val1 = new String ( ) ; k = 0 ; / * On ecrit les noms des colonnes * / for ( int j = 0 ; j < indice ; j + + ) { tableS . setColumnName ( j , ts . getColumnName ( j ) ) ; } for ( int j = indice + 1 ; j < nbColonnes ; j + + ) { tableS . setColumnName ( j , ts . getColumnName ( j - 1 ) ) ; } String colonne = ts . getColumnName ( indice ) ; / / on recupere le nom de la colonne a separer String val1Colonne , val2Colonne ; String [ ] resNP = colonne . split ( " " , 2 ) ; val1Colonne = resNP [ 0 ] ; if ( resNP . length > 1 ) val2Colonne = resNP [ 1 ] ; else val2Colonne = "" ; tableS . setColumnName ( indice , val1Colonne ) ; / / 1ere partie du nom de la colonne tableS . setColumnName ( indice + 1 , val2Colonne ) ; / / 2eme partie / * on ecrit les donnees * / for ( int i = 0 ; i < nbLignes - 1 ; i + + ) { for ( int j = 0 ; j < indice ; j + + ) { tableS . setValueAt ( ts . getValueAt ( i , j ) , i , j ) ; } for ( int j = indice + 2 ; j < nbColonnes ; j + + ) { tableS . setValueAt ( ts . getValueAt ( i , j - 1 ) , i , j ) ; } } / * On remplit les 2 colonnes * / String val2 = null ; for ( int i = 0 ; i < nbLignes - 1 ; i + + ) { val1 = new String ( ) ; val = ( String ) ts . getValueAt ( i , indice ) ; / / on recupere la valeur en [ i - 1 , indice ] k = 0 ; if ( val . equals ( "" ) ) { / / peut etre du a une ligne ou colonne ajoutée a la suite val1 = "" ; val2 = "" ; } else { while ( ( int ) val . charAt ( k ) ! = 160 & & k ! = ( val . length ( ) - 1 ) ) { val1 = val1 . concat ( String . valueOf ( val . charAt ( k ) ) ) ; k + + ; } if ( k = = ( val . length ( ) - 1 ) ) { val1 = new String ( ) ; k = 0 ; while ( ( int ) val . charAt ( k ) ! = 32 & & k ! = ( val . length ( ) - 1 ) ) { val1 = val1 . concat ( String . valueOf ( val . charAt ( k ) ) ) ; k + + ; } } val2 = val . substring ( k + 1 , val . length ( ) ) ; } double int1 = 0 , int2 = 0 ; try { int1 = Double . parseDouble ( val1 ) ; tableS . setValueAt ( int1 , i , indice ) ; } catch ( NumberFormatException e ) { tableS . setValueAt ( val1 , i , indice ) ; } try { int2 = Double . parseDouble ( val2 ) ; tableS . setValueAt ( int2 , i , indice + 1 ) ; } catch ( NumberFormatException e ) { tableS . setValueAt ( val2 , i , indice + 1 ) ; } } return tableS ; } else { JOptionPane . showMessageDialog ( null , "PAS SEPARABLE" , "ERREUR" , JOptionPane . ERROR_MESSAGE ) ; return ts ; } } else { JOptionPane . showMessageDialog ( null , "non separable : PAS DE TYPE STRING" , "ERREUR" , JOptionPane . ERROR_MESSAGE ) ; return ts ; } }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 7 ] = "UwHUrN { UoTtvEI" ; Object [ ] [ ] objectArray0 = new Object [ 1 ] [ 6 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . separerColonne ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "3\" [ M5 ( } tsG - Gl" ; Object [ ] [ ] objectArray0 = new Object [ 1 ] [ 6 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; stringArray0 [ 0 ] = " ? fmH9iU ; = | " ; TableStockage tableStockage1 = modifTableStockage0 . separerColonne ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return this . data . length ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 4 ] ; objectArray0 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray0 [ 1 ] = ( Object [ ] ) stringArray0 ; TableStockage tableStockage0 = new TableStockage ( stringArray0 , objectArray0 ) ; ModifTableStockage modifTableStockage0 = new ModifTableStockage ( tableStockage0 ) ; TableStockage tableStockage1 = modifTableStockage0 . fusionnerColonnes ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return this . title . length ; }
void test0 ( ) throws Throwable { SharedListSelectionHandlerEtu sharedListSelectionHandlerEtu0 = new SharedListSelectionHandlerEtu ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { OracleFormationDao oracleFormationDao0 = new OracleFormationDao ( ) ; Formation formation0 = new Formation ( ) ; oracleFormationDao0 . insert ( formation0 , "Identite" , "Identite" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test1 ( ) throws Throwable { OracleFormationDao oracleFormationDao0 = new OracleFormationDao ( ) ; Formation formation0 = new Formation ( ) ; oracleFormationDao0 . update ( formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test2 ( ) throws Throwable { OracleFormationDao oracleFormationDao0 = new OracleFormationDao ( ) ; Formation formation0 = new Formation ( ) ; oracleFormationDao0 . delete ( formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test3 ( ) throws Throwable { OracleFormationDao oracleFormationDao0 = new OracleFormationDao ( ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( ) ; oracleFormationDao0 . findFormation ( "Identite" , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Formation [ ] findFormation ( String name , String date ) { Calendar c = null ; if ( date ! = null ) { c = creerCalendar ( date ) ; } return fdao . findFormation ( name , c ) ; }
void test0 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = new OracleIdentiteDao ( ) ; Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . FORMATEUR ; RespFormation respFormation0 = new RespFormation ( "Identite" , "Identite" , "Identite" , "Identite" , identite_TypeIdentite0 , "Identite" ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( ) ; oracleIdentiteDao0 . insert ( ( Identite ) respFormation0 , "Identite" , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void insert ( Identite ident , String nomForm , Calendar dateLimite ) ; void delete ( Identite identite ) ; Candidat [ ] findCandidat ( String nom , String prenom , String sex , String email ) ; RespFormation [ ] findRespForm ( String nom , String prenom , String sex , String email ) ; void update ( Identite identity ) throws Exception ; }
void test1 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = OracleIdentiteDao . getDAO ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OracleIdentiteDao getDAO ( ) { return new OracleIdentiteDao ( ) ; }
void test2 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = new OracleIdentiteDao ( ) ; RespFormation respFormation0 = new RespFormation ( ) ; oracleIdentiteDao0 . update ( ( Identite ) respFormation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TypeIdentite getType ( ) { return type ; }
void test3 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = new OracleIdentiteDao ( ) ; RespFormation respFormation0 = new RespFormation ( ) ; oracleIdentiteDao0 . delete ( ( Identite ) respFormation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNom ( ) { return this . nom ; }
void test4 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = new OracleIdentiteDao ( ) ; List < Identite > list0 = oracleIdentiteDao0 . find ( "Identite" , "Identite" , "Identite" , "Identite" , ( Identite . TypeIdentite ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Identite > find ( String nom , String prenom , String sex , String email , TypeIdentite type ) { String a , b , c , e ; if ( nom = = null ) a = "ident . nom like '%'" ; else a = "ident . nom = '" + nom + "'" ; if ( prenom = = null ) b = "ident . prenom like '%'" ; else b = "ident . prenom = '" + prenom + "'" ; if ( sex = = null ) c = "ident . sex like '%'" ; else c = "ident . sex = '" + sex + "'" ; if ( type = = TypeIdentite . CANDIDAT ) { e = "ident . type = : CANDIDAT" ; } else if ( type = = TypeIdentite . FORMATEUR ) { e = "ident . type = : FORMATEUR" ; } else e = "ident . type like '%'" ; String s = "select ident from Identite as ident" + " where " + a + " and " + b + " and " + c + " and " + e ; EntityManagerFactory emf = null ; em = null ; EntityTransaction tx = null ; List < Identite > list = null ; try { emf = Persistence . createEntityManagerFactory ( persistUnitName ) ; em = emf . createEntityManager ( ) ; tx = em . getTransaction ( ) ; tx . begin ( ) ; if ( type = = TypeIdentite . CANDIDAT ) { list = em . createQuery ( s ) . setParameter ( "CANDIDAT" , TypeIdentite . CANDIDAT ) . getResultList ( ) ; } else if ( type = = TypeIdentite . FORMATEUR ) { list = em . createQuery ( s ) . setParameter ( "FORMATEUR" , TypeIdentite . FORMATEUR ) . getResultList ( ) ; } else list = em . createQuery ( s ) . getResultList ( ) ; } catch ( Exception e1 ) { e1 . printStackTrace ( ) ; if ( tx ! = null ) { tx . rollback ( ) ; } } finally { if ( em ! = null ) { em . close ( ) ; } if ( emf ! = null ) { emf . close ( ) ; } } return list ; }
void test5 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = new OracleIdentiteDao ( ) ; Candidat [ ] candidatArray0 = oracleIdentiteDao0 . findCandidat ( ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Candidat [ ] findCandidat ( String nom , String prenom ) { return idao . findCandidat ( nom , prenom , null , null ) ; }
void test6 ( ) throws Throwable { OracleIdentiteDao oracleIdentiteDao0 = new OracleIdentiteDao ( ) ; RespFormation [ ] respFormationArray0 = oracleIdentiteDao0 . findRespForm ( "Identite" , "Identite" , "Identite" , "Identite" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RespFormation [ ] findRespForm ( String nom , String prenom ) { return idao . findRespForm ( nom , prenom , null , null ) ; }
void test1 ( ) throws Throwable { OracleDaoFactory oracleDaoFactory0 = ( OracleDaoFactory ) DaoFactory . getDaoFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DaoFactory getDaoFactory ( ) throws DaoFactoryException { switch ( typeFabrique ) { case ORACLE : return new OracleDaoFactory ( ) ; case DB4O : return new Db4oDaoFactory ( ) ; default : throw new DaoFactoryException ( ) ; } }
void test0 ( ) throws Throwable { Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; RespFormation respFormation0 = new RespFormation ( "vkY & i" , "vkY & i" , "vkY & i" , "vkY & i" , identite_TypeIdentite0 , "vkY & i" ) ; String string0 = respFormation0 . getTelephone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTelephone ( ) { return this . telephone ; }
void test1 ( ) throws Throwable { RespFormation respFormation0 = new RespFormation ( ) ; respFormation0 . setTelephone ( "2 q ! CNm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test2 ( ) throws Throwable { Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; RespFormation respFormation0 = new RespFormation ( "vkY & i" , "vkY & i" , "vkY & i" , "vkY & i" , identite_TypeIdentite0 , "vkY & i" ) ; Formation formation0 = new Formation ( ( - 1893 ) ) ; respFormation0 . ajouterFormation ( formation0 ) ; respFormation0 . supprimerFormation ( formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrenom ( ) { return this . prenom ; }
void test3 ( ) throws Throwable { RespFormation respFormation0 = new RespFormation ( ) ; Collection < Formation > collection0 = respFormation0 . getFormation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < Formation > getFormation ( ) { return this . formations ; }
void test4 ( ) throws Throwable { Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; RespFormation respFormation0 = new RespFormation ( "vkY & i" , "vkY & i" , "vkY & i" , "vkY & i" , identite_TypeIdentite0 , "vkY & i" ) ; respFormation0 . supprimerFormation ( ( Formation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrenom ( ) { return this . prenom ; }
void test5 ( ) throws Throwable { RespFormation respFormation0 = new RespFormation ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Formation formation0 = new Formation ( "2 q ! CNm" , ( Calendar ) gregorianCalendar0 , 0 , respFormation0 ) ; respFormation0 . ajouterFormation ( formation0 ) ; respFormation0 . modifierFormation ( formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSex ( ) { return this . sex ; }
void test6 ( ) throws Throwable { RespFormation respFormation0 = new RespFormation ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Formation formation0 = new Formation ( "2 q ! CNm" , ( Calendar ) gregorianCalendar0 , 0 , respFormation0 ) ; respFormation0 . ajouterFormation ( formation0 ) ; Formation formation1 = new Formation ( " q ! CNm" , ( Calendar ) gregorianCalendar0 , 0 , respFormation0 ) ; respFormation0 . modifierFormation ( formation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modifierFormation ( Formation formation ) { Formation [ ] f = ( Formation [ ] ) formations . toArray ( new Formation [ formations . size ( ) ] ) ; for ( int i = 0 ; i < f . length ; i + + ) { if ( f [ i ] . getTitre_formation ( ) . equals ( formation . getTitre_formation ( ) ) & & f [ i ] . getDate_limite_candidature ( ) . equals ( formation . getDate_limite_candidature ( ) ) ) { f [ i ] = formation ; } } }
void test7 ( ) throws Throwable { RespFormation respFormation0 = new RespFormation ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Formation formation0 = new Formation ( "2 q ! CNm" , ( Calendar ) gregorianCalendar0 , 0 , respFormation0 ) ; respFormation0 . ajouterFormation ( formation0 ) ; Locale locale0 = new Locale ( "2 q ! CNm" ) ; GregorianCalendar gregorianCalendar1 = ( GregorianCalendar ) Calendar . getInstance ( locale0 ) ; Formation formation1 = new Formation ( "2 q ! CNm" , ( Calendar ) gregorianCalendar1 , 0 , respFormation0 ) ; respFormation0 . modifierFormation ( formation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modifierFormation ( Formation formation ) { Formation [ ] f = ( Formation [ ] ) formations . toArray ( new Formation [ formations . size ( ) ] ) ; for ( int i = 0 ; i < f . length ; i + + ) { if ( f [ i ] . getTitre_formation ( ) . equals ( formation . getTitre_formation ( ) ) & & f [ i ] . getDate_limite_candidature ( ) . equals ( formation . getDate_limite_candidature ( ) ) ) { f [ i ] = formation ; } } }
void test0 ( ) throws Throwable { Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; Formation formation0 = new Formation ( 869 ) ; Candidat candidat0 = new Candidat ( " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , identite_TypeIdentite0 , ( Calendar ) null , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , 869 , 869 , formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBource ( ) { return this . bourse ; }
void test1 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; Calendar calendar0 = candidat0 . getDateNaissance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . util . Calendar getDateNaissance ( ) { return date_naissance ; }
void test2 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; String string0 = candidat0 . getDiplome ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDiplome ( ) { return this . diplome ; }
void test3 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; Formation formation0 = candidat0 . getFormation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < Formation > getFormation ( ) { return this . formations ; }
void test4 ( ) throws Throwable { Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; Formation formation0 = new Formation ( 869 ) ; Candidat candidat0 = new Candidat ( " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , identite_TypeIdentite0 , ( Calendar ) null , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , " | Z . y# * ) Aj" , 869 , 869 , formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcceptation ( ) { return this . acceptation ; }
void test5 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; candidat0 . setDiplome ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBource ( ) { return this . bourse ; }
void test7 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; int int0 = candidat0 . getAcceptation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcceptation ( ) { return this . acceptation ; }
void test8 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; candidat0 . setNationalite ( "KnA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TypeIdentite getType ( ) { return type ; }
void test9 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; candidat0 . setFormation ( ( Formation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcceptation ( ) { return this . acceptation ; }
void test10 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; TimeZone timeZone0 = TimeZone . getTimeZone ( "" ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( timeZone0 ) ; candidat0 . setDate_naissance ( ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDiplome ( ) { return this . diplome ; }
void test11 ( ) throws Throwable { TimeZone timeZone0 = TimeZone . getTimeZone ( "" ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( timeZone0 ) ; Formation formation0 = new Formation ( 0 ) ; Candidat candidat0 = new Candidat ( "KnA" , "KnA" , "KnA" , "" , ( Calendar ) gregorianCalendar0 , "KnA" , "" , "KnA" , 0 , 0 , formation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Candidat ( ) { super ( ) ; }
void test12 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; byte [ ] byteArray0 = candidat0 . getPhoto ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPhoto ( ) { return this . photo ; }
void test13 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; candidat0 . afficherPhoto ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test14 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; int int0 = candidat0 . getBource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBource ( ) { return this . bourse ; }
void test15 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; String string0 = candidat0 . getNationalite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNationalite ( ) { return nationalite ; }
void test16 ( ) throws Throwable { Candidat candidat0 = new Candidat ( ) ; candidat0 . savePhoto ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNationalite ( ) { return nationalite ; }
void test0 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; TimeZone timeZone0 = TimeZone . getTimeZone ( "" ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( timeZone0 ) ; Candidat candidat0 = new Candidat ( "" , " ; | " , " ; | " , " ; | " , ( Calendar ) gregorianCalendar0 , " ; | " , " ; | " , " ; | " , 1463 , 1517 , formation0 ) ; formation0 . ajouterCandidat ( candidat0 ) ; formation0 . supprimerCandidat ( candidat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void supprimerCandidat ( Candidat candidat ) { if ( candidats . contains ( candidat ) ) { candidats . remove ( candidat ) ; } else System . out . println ( "pas trouve" ) ; }
void test1 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; int int0 = formation0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test2 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; Calendar calendar0 = formation0 . getDate_limite_candidature ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getDate_limite_candidature ( ) { return date_limite_candidature ; }
void test3 ( ) throws Throwable { Formation formation0 = new Formation ( 2010 ) ; formation0 . getTitre_formation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test4 ( ) throws Throwable { Formation formation0 = new Formation ( 2010 ) ; formation0 . setMontant_inscription ( 2010 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test6 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 12 ) , ( - 12 ) , ( - 12 ) , ( - 12 ) , ( - 12 ) , ( - 12 ) ) ; RespFormation respFormation0 = new RespFormation ( ) ; Formation formation0 = new Formation ( "img" , ( Calendar ) gregorianCalendar0 , ( - 12 ) , respFormation0 ) ; RespFormation respFormation1 = formation0 . getResponsable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test7 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; formation0 . setTitre_formation ( " ; | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test8 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; formation0 . setDate_limite_candidature ( ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test9 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; Collection < Candidat > collection0 = formation0 . getCandidat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < Candidat > getCandidat ( ) { return this . candidats ; }
void test10 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; LinkedList < Candidat > linkedList0 = new LinkedList < Candidat > ( ) ; formation0 . setCandidat ( ( Collection < Candidat > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test11 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; int int0 = formation0 . getMontant_inscription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test12 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 12 ) , ( - 12 ) , ( - 12 ) , ( - 12 ) , ( - 12 ) , ( - 12 ) ) ; RespFormation respFormation0 = new RespFormation ( ) ; Formation formation0 = new Formation ( "img" , ( Calendar ) gregorianCalendar0 , ( - 12 ) , respFormation0 ) ; Candidat candidat0 = new Candidat ( ) ; formation0 . supprimerCandidat ( candidat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMontant_inscription ( ) { return montant_inscription ; }
void test13 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; TimeZone timeZone0 = TimeZone . getTimeZone ( "" ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( timeZone0 ) ; Candidat candidat0 = new Candidat ( "" , " ; | " , " ; | " , " ; | " , ( Calendar ) gregorianCalendar0 , " ; | " , " ; | " , " ; | " , 1463 , 1517 , formation0 ) ; formation0 . ajouterCandidat ( candidat0 ) ; formation0 . modifierCandidat ( candidat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modifierCandidat ( Candidat candidat ) { Candidat [ ] c = ( Candidat [ ] ) candidats . toArray ( new Candidat [ candidats . size ( ) ] ) ; for ( int i = 0 ; i < c . length ; i + + ) { if ( c [ i ] . getNom ( ) . equals ( candidat . getNom ( ) ) & & c [ i ] . getPrenom ( ) . equals ( candidat . getPrenom ( ) ) ) { c [ i ] = candidat ; } } }
void test14 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; TimeZone timeZone0 = TimeZone . getTimeZone ( "" ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( timeZone0 ) ; Candidat candidat0 = new Candidat ( "" , " ; | " , " ; | " , " ; | " , ( Calendar ) gregorianCalendar0 , " ; | " , " ; | " , " ; | " , 1463 , 1517 , formation0 ) ; GregorianCalendar gregorianCalendar1 = new GregorianCalendar ( 0 , 0 , ( - 1 ) , 0 , 1 , 0 ) ; Candidat candidat1 = new Candidat ( " ; | " , "" , " ; | " , " ; | " , identite_TypeIdentite0 , ( Calendar ) gregorianCalendar1 , "" , " ; | " , " ; | " , 0 , 1 , formation0 ) ; formation0 . ajouterCandidat ( candidat1 ) ; formation0 . modifierCandidat ( candidat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modifierCandidat ( Candidat candidat ) { Candidat [ ] c = ( Candidat [ ] ) candidats . toArray ( new Candidat [ candidats . size ( ) ] ) ; for ( int i = 0 ; i < c . length ; i + + ) { if ( c [ i ] . getNom ( ) . equals ( candidat . getNom ( ) ) & & c [ i ] . getPrenom ( ) . equals ( candidat . getPrenom ( ) ) ) { c [ i ] = candidat ; } } }
void test15 ( ) throws Throwable { Formation formation0 = new Formation ( ) ; Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . CANDIDAT ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , ( - 1 ) , 0 , 1 , 0 ) ; Candidat candidat0 = new Candidat ( " ; | " , "" , " ; | " , " ; | " , identite_TypeIdentite0 , ( Calendar ) gregorianCalendar0 , "" , " ; | " , " ; | " , 0 , 1 , formation0 ) ; formation0 . ajouterCandidat ( candidat0 ) ; Candidat candidat1 = new Candidat ( " ; | " , " ; | " , " ; | " , " ; | " , ( Calendar ) gregorianCalendar0 , " ; | " , " ; | " , " ; | " , 0 , 530 , formation0 ) ; formation0 . modifierCandidat ( candidat1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBource ( ) { return this . bourse ; }
void test0 ( ) throws Throwable { Identite identite0 = new Identite ( ) ; String string0 = identite0 . getSex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSex ( ) { return this . sex ; }
void test1 ( ) throws Throwable { Identite identite0 = new Identite ( 0 ) ; identite0 . getPrenom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test2 ( ) throws Throwable { Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . FORMATEUR ; Identite identite0 = new Identite ( "CANDIDAT" , "CANDIDAT" , "CANDIDAT" , "MAZ ! V^G0B ! Ve~k & " , identite_TypeIdentite0 ) ; String string0 = identite0 . getNom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSex ( ) { return this . sex ; }
void test3 ( ) throws Throwable { Identite identite0 = new Identite ( 0 ) ; identite0 . setId ( ( - 1918 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test4 ( ) throws Throwable { Identite identite0 = new Identite ( ( - 496 ) ) ; identite0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test5 ( ) throws Throwable { Identite identite0 = new Identite ( ( - 496 ) ) ; identite0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test6 ( ) throws Throwable { Identite identite0 = new Identite ( ( - 496 ) ) ; Identite . TypeIdentite identite_TypeIdentite0 = Identite . TypeIdentite . FORMATEUR ; identite0 . setType ( identite_TypeIdentite0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test7 ( ) throws Throwable { Identite identite0 = new Identite ( ( - 1 ) ) ; identite0 . setSex ( " C5 : XO = H - ^Q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test8 ( ) throws Throwable { Identite identite0 = new Identite ( ) ; identite0 . setEmail ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test9 ( ) throws Throwable { Identite identite0 = new Identite ( ( - 496 ) ) ; int int0 = identite0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test10 ( ) throws Throwable { Identite identite0 = new Identite ( ( - 496 ) ) ; identite0 . setPrenom ( "CANDIDAT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
void test11 ( ) throws Throwable { Identite identite0 = new Identite ( 0 ) ; identite0 . setNom ( "QL0bT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return this . id ; }
