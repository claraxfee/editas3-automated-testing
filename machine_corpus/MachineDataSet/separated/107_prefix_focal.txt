void test1 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String string0 = spreadSubsample0 . randomSeedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistributionSpread ( ) { return m_DistributionSpread ; }
void test2 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String string0 = spreadSubsample0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistributionSpread ( ) { return m_DistributionSpread ; }
void test3 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "V#y ( On ? eP3 , SNaIf ) T" ; stringArray0 [ 1 ] = "V#y ( On ? eP3 , SNaIf ) T" ; stringArray0 [ 2 ] = "V#y ( On ? eP3 , SNaIf ) T" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "V#y ( On ? eP3 , SNaIf ) T" ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = "" ; stringArray0 [ 7 ] = "V#y ( On ? eP3 , SNaIf ) T" ; Filter . runFilter ( ( Filter ) spreadSubsample0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test4 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String [ ] stringArray0 = spreadSubsample0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAdjustWeights ( ) { return m_AdjustWeights ; }
void test5 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String string0 = spreadSubsample0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test6 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String string0 = spreadSubsample0 . maxCountTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistributionSpread ( ) { return m_DistributionSpread ; }
void test7 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String string0 = spreadSubsample0 . distributionSpreadTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test8 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; String string0 = spreadSubsample0 . adjustWeightsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDistributionSpread ( ) { return m_DistributionSpread ; }
void test9 ( ) throws Throwable { SpreadSubsample spreadSubsample0 = new SpreadSubsample ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAdjustWeights ( ) { return m_AdjustWeights ; }
void test0 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test1 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = " / { hGFC" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; resample0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getBiasToUniformClass ( ) { return m_BiasToUniformClass ; }
void test2 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; Enumeration < Object > enumeration0 = resample0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSampleSizePercent ( ) { return m_SampleSizePercent ; }
void test3 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; Random random0 = new Random ( ( - 1810L ) ) ; int [ ] intArray0 = new int [ 10 ] ; resample0 . createSubsampleWithoutReplacement ( random0 , 0 , 0 , 0 , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test4 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . randomSeedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNoReplacement ( ) { return m_NoReplacement ; }
void test5 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . sampleSizePercentTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSampleSizePercent ( ) { return m_SampleSizePercent ; }
void test6 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSampleSizePercent ( ) { return m_SampleSizePercent ; }
void test7 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . biasToUniformClassTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getBiasToUniformClass ( ) { return m_BiasToUniformClass ; }
void test8 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String [ ] stringArray0 = resample0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSampleSizePercent ( ) { return m_SampleSizePercent ; }
void test10 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNoReplacement ( ) { return m_NoReplacement ; }
void test11 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; String string0 = resample0 . noReplacementTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getBiasToUniformClass ( ) { return m_BiasToUniformClass ; }
void test14 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; Random random0 = new Random ( ) ; int [ ] intArray0 = new int [ 10 ] ; resample0 . createSubsampleWithReplacement ( random0 , 0 , 0 , 784 , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createSubsampleWithReplacement ( Random random , int origSize , int sampleSize , int actualClasses , int [ ] classIndices ) { for ( int i = 0 ; i < sampleSize ; i + + ) { int index = 0 ; if ( random . nextDouble ( ) < m_BiasToUniformClass ) { / / Pick a random class ( of those classes that actually appear ) int cIndex = random . nextInt ( actualClasses ) ; for ( int j = 0 , k = 0 ; j < classIndices . length - 1 ; j + + ) { if ( ( classIndices [ j ] ! = classIndices [ j + 1 ] ) & & ( k + + > = cIndex ) ) { / / Pick a random instance of the designated class index = classIndices [ j ] + random . nextInt ( classIndices [ j + 1 ] - classIndices [ j ] ) ; break ; } } } else { index = random . nextInt ( origSize ) ; } push ( ( Instance ) getInputFormat ( ) . instance ( index ) . copy ( ) ) ; } }
void test18 ( ) throws Throwable { Resample resample0 = new Resample ( ) ; Random random0 = new Random ( ( - 1810L ) ) ; resample0 . setInvertSelection ( true ) ; int [ ] intArray0 = new int [ 10 ] ; resample0 . createSubsampleWithoutReplacement ( random0 , 0 , 0 , 0 , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNoReplacement ( ) { return m_NoReplacement ; }
void test1 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String string0 = stratifiedRemoveFolds0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test2 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String [ ] stringArray0 = stratifiedRemoveFolds0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test3 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String string0 = stratifiedRemoveFolds0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test4 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "F" ; Filter . runFilter ( ( Filter ) stratifiedRemoveFolds0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test5 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String string0 = stratifiedRemoveFolds0 . foldTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test6 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String string0 = stratifiedRemoveFolds0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test7 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String string0 = stratifiedRemoveFolds0 . numFoldsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test8 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; String string0 = stratifiedRemoveFolds0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test9 ( ) throws Throwable { StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test0 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test1 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test2 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test3 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test4 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseKononenko ( ) { return m_UseKononenko ; }
void test5 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test6 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test7 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseKononenko ( ) { return m_UseKononenko ; }
void test8 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test9 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMakeBinary ( ) { return m_MakeBinary ; }
void test10 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test11 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test12 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test13 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test14 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test15 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test16 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test17 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test18 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean input ( Instance instance ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } if ( m_NewBatch ) { m_OutputQueue = new Queue ( ) ; m_NewBatch = false ; } bufferInput ( instance ) ; return false ; }
void test19 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean batchFinished ( ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } flushInput ( ) ; m_NewBatch = true ; m_FirstBatchDone = true ; if ( m_OutputQueue . empty ( ) ) { / / Clear out references to old strings / relationals occasionally if ( ( m_OutputStringAtts . getAttributeIndices ( ) . length > 0 ) | | ( m_OutputRelAtts . getAttributeIndices ( ) . length > 0 ) ) { m_OutputFormat = m_OutputFormat . stringFreeStructure ( ) ; m_OutputStringAtts = new StringLocator ( m_OutputFormat , m_OutputStringAtts . getAllowedIndices ( ) ) ; } } return ( numPendingOutput ( ) ! = 0 ) ; }
void test20 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test21 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test22 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBetterEncoding ( ) { return m_UseBetterEncoding ; }
void test1 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; classOrder0 . setClassOrder ( ( - 1253 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test2 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; String string0 = classOrder0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test3 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; Enumeration < Object > enumeration0 = classOrder0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassOrder ( ) { return m_ClassOrder ; }
void test4 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; String string0 = classOrder0 . classOrderTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassOrder ( ) { return m_ClassOrder ; }
void test5 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; String string0 = classOrder0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassOrder ( ) { return m_ClassOrder ; }
void test6 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; classOrder0 . setSeed ( 2029L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test7 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; long long0 = classOrder0 . getSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassOrder ( ) { return m_ClassOrder ; }
void test8 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; String string0 = classOrder0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test9 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; int int0 = classOrder0 . getClassOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test10 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "r - MGTBqQI" ; stringArray0 [ 1 ] = "r - MGTBqQI" ; classOrder0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test11 ( ) throws Throwable { ClassOrder classOrder0 = new ClassOrder ( ) ; String [ ] stringArray0 = classOrder0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassOrder ( ) { return m_ClassOrder ; }
void test0 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "Converts all nominal attributes into binary numeric attributes . An attribute with k values is transformed into k binary attributes if the class is nominal ( using the one - attribute - per - value approach ) . Binary attributes are left binary , if option ' - A' is not given . If the class is numeric , k - 1 new binary attributes are generated in the manner described in \"Classification and Regression Trees\" by Breiman et al . ( i . e . taking the average class value associated with each attribute value into account ) \n\nFor more information , see : \n\nL . Breiman , J . H . Friedman , R . A . Olshen , C . J . Stone ( 1984 ) . Classification and Regression Trees . Wadsworth Inc . " ; stringArray0 [ 1 ] = "Converts all nominal attributes into binary numeric attributes . An attribute with k values is transformed into k binary attributes if the class is nominal ( using the one - attribute - per - value approach ) . Binary attributes are left binary , if option ' - A' is not given . If the class is numeric , k - 1 new binary attributes are generated in the manner described in \"Classification and Regression Trees\" by Breiman et al . ( i . e . taking the average class value associated with each attribute value into account ) \n\nFor more information , see : \n\nL . Breiman , J . H . Friedman , R . A . Olshen , C . J . Stone ( 1984 ) . Classification and Regression Trees . Wadsworth Inc . " ; Filter . runFilter ( ( Filter ) nominalToBinary0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test1 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; String string0 = nominalToBinary0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test3 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; String string0 = nominalToBinary0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test4 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; String [ ] stringArray0 = nominalToBinary0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test5 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; String string0 = nominalToBinary0 . binaryAttributesNominalTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test6 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; String string0 = nominalToBinary0 . transformAllValuesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test9 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test10 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test0 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test1 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test2 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test3 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test4 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test5 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test6 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIgnoreRange ( ) { return m_SelectCols . getRanges ( ) ; }
void test7 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test8 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test9 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test10 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean input ( Instance instance ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } if ( m_NewBatch ) { m_OutputQueue = new Queue ( ) ; m_NewBatch = false ; } bufferInput ( instance ) ; return false ; }
void test11 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean batchFinished ( ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } flushInput ( ) ; m_NewBatch = true ; m_FirstBatchDone = true ; if ( m_OutputQueue . empty ( ) ) { / / Clear out references to old strings / relationals occasionally if ( ( m_OutputStringAtts . getAttributeIndices ( ) . length > 0 ) | | ( m_OutputRelAtts . getAttributeIndices ( ) . length > 0 ) ) { m_OutputFormat = m_OutputFormat . stringFreeStructure ( ) ; m_OutputStringAtts = new StringLocator ( m_OutputFormat , m_OutputStringAtts . getAllowedIndices ( ) ) ; } } return ( numPendingOutput ( ) ! = 0 ) ; }
void test12 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test13 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test14 ( ) throws Throwable { MathExpression mathExpression0 = new MathExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test1 ( ) throws Throwable { Obfuscate obfuscate0 = new Obfuscate ( ) ; String string0 = obfuscate0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { Obfuscate obfuscate0 = new Obfuscate ( ) ; String string0 = obfuscate0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test0 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; String string0 = clusterMembership0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; EM eM0 = new EM ( ) ; Capabilities capabilities0 = eM0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Instances instances0 = testInstances0 . generate ( "YpioH@1" ) ; clusterMembership0 . testInputFormat ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIgnoredAttributeIndices ( ) { if ( m_ignoreAttributesRange = = null ) { return "" ; } else { return m_ignoreAttributesRange . getRanges ( ) ; } }
void test2 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "7`82 ? " ; Filter . runFilter ( ( Filter ) clusterMembership0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String densityBasedClustererTipText ( ) { return "The clusterer that will generate membership values for the instances . " ; }
void test3 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; String string0 = clusterMembership0 . densityBasedClustererTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String densityBasedClustererTipText ( ) { return "The clusterer that will generate membership values for the instances . " ; }
void test4 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; String string0 = clusterMembership0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test5 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; String string0 = clusterMembership0 . ignoredAttributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ignoredAttributeIndicesTipText ( ) { return "The range of attributes to be ignored by the clusterer . eg : first - 3 , 5 , 9 - last" ; }
void test6 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; String [ ] stringArray0 = clusterMembership0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIgnoredAttributeIndices ( ) { if ( m_ignoreAttributesRange = = null ) { return "" ; } else { return m_ignoreAttributesRange . getRanges ( ) ; } }
void test11 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; clusterMembership0 . setIgnoredAttributeIndices ( " { 0v_HyyvXE" ) ; clusterMembership0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIgnoredAttributeIndices ( ) { if ( m_ignoreAttributesRange = = null ) { return "" ; } else { return m_ignoreAttributesRange . getRanges ( ) ; } }
void test12 ( ) throws Throwable { ClusterMembership clusterMembership0 = new ClusterMembership ( ) ; clusterMembership0 . setIgnoredAttributeIndices ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewBatch ( ) { return m_NewBatch ; }
void test0 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test1 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDesiredWeightOfInstancesPerInterval ( ) { return m_DesiredWeightOfInstancesPerInterval ; }
void test2 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMakeBinary ( ) { return m_MakeBinary ; }
void test3 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBins ( ) { return 0 ; }
void test4 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFindNumBins ( ) { return false ; }
void test5 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test6 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test7 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test8 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBins ( ) { return 0 ; }
void test9 ( ) throws Throwable { Discretize discretize0 = new Discretize ( "O5 * DDh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMakeBinary ( ) { return m_MakeBinary ; }
void test10 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test11 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMakeBinary ( ) { return m_MakeBinary ; }
void test12 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test13 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBinNumbers ( ) { return m_UseBinNumbers ; }
void test14 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test15 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBins ( ) { return 0 ; }
void test16 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDesiredWeightOfInstancesPerInterval ( ) { return m_DesiredWeightOfInstancesPerInterval ; }
void test17 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFindNumBins ( ) { return false ; }
void test18 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDesiredWeightOfInstancesPerInterval ( ) { return m_DesiredWeightOfInstancesPerInterval ; }
void test19 ( ) throws Throwable { Discretize discretize0 = new Discretize ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDesiredWeightOfInstancesPerInterval ( ) { return m_DesiredWeightOfInstancesPerInterval ; }
void test20 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test21 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test22 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test23 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean input ( Instance instance ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } if ( m_NewBatch ) { m_OutputQueue = new Queue ( ) ; m_NewBatch = false ; } bufferInput ( instance ) ; return false ; }
void test24 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean batchFinished ( ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } flushInput ( ) ; m_NewBatch = true ; m_FirstBatchDone = true ; if ( m_OutputQueue . empty ( ) ) { / / Clear out references to old strings / relationals occasionally if ( ( m_OutputStringAtts . getAttributeIndices ( ) . length > 0 ) | | ( m_OutputRelAtts . getAttributeIndices ( ) . length > 0 ) ) { m_OutputFormat = m_OutputFormat . stringFreeStructure ( ) ; m_OutputStringAtts = new StringLocator ( m_OutputFormat , m_OutputStringAtts . getAllowedIndices ( ) ) ; } } return ( numPendingOutput ( ) ! = 0 ) ; }
void test25 ( ) throws Throwable { Discretize discretize0 = new Discretize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test26 ( ) throws Throwable { Discretize discretize0 = new Discretize ( "O5 * DDh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMakeBinary ( ) { return m_MakeBinary ; }
void test27 ( ) throws Throwable { Discretize discretize0 = new Discretize ( "O5 * DDh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDesiredWeightOfInstancesPerInterval ( ) { return m_DesiredWeightOfInstancesPerInterval ; }
void test0 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; String [ ] stringArray0 = changeDateFormat0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test1 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; String string0 = changeDateFormat0 . dateFormatTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test3 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; String string0 = changeDateFormat0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test4 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; String string0 = changeDateFormat0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test5 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; Enumeration < Object > enumeration0 = changeDateFormat0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test6 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; String string0 = changeDateFormat0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test8 ( ) throws Throwable { ChangeDateFormat changeDateFormat0 = new ChangeDateFormat ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; changeDateFormat0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test0 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String string0 = mergeTwoValues0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecondValueIndex ( ) { return m_SecondIndex . getSingleIndex ( ) ; }
void test1 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 1 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 2 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 3 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 4 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 5 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 6 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 7 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 8 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; stringArray0 [ 9 ] = "Sets the first value to be merged . ( \"first\" and \"last\" are valid values ) " ; Filter . runFilter ( ( Filter ) mergeTwoValues0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecondValueIndex ( ) { return m_SecondIndex . getSingleIndex ( ) ; }
void test2 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String string0 = mergeTwoValues0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecondValueIndex ( ) { return m_SecondIndex . getSingleIndex ( ) ; }
void test3 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String string0 = mergeTwoValues0 . secondValueIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecondValueIndex ( ) { return m_SecondIndex . getSingleIndex ( ) ; }
void test4 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String string0 = mergeTwoValues0 . firstValueIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test5 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String string0 = mergeTwoValues0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecondValueIndex ( ) { return m_SecondIndex . getSingleIndex ( ) ; }
void test8 ( ) throws Throwable { MergeTwoValues mergeTwoValues0 = new MergeTwoValues ( ) ; String [ ] stringArray0 = mergeTwoValues0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test0 ( ) throws Throwable { FirstOrder firstOrder0 = new FirstOrder ( ) ; String [ ] stringArray0 = firstOrder0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test1 ( ) throws Throwable { FirstOrder firstOrder0 = new FirstOrder ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = " . + Z * _K@Yu" ; stringArray0 [ 1 ] = " . + Z * _K@Yu" ; Filter . runFilter ( ( Filter ) firstOrder0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { FirstOrder firstOrder0 = new FirstOrder ( ) ; String string0 = firstOrder0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test3 ( ) throws Throwable { FirstOrder firstOrder0 = new FirstOrder ( ) ; int [ ] intArray0 = new int [ 4 ] ; firstOrder0 . setAttributeIndicesArray ( intArray0 ) ; String [ ] stringArray0 = firstOrder0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test4 ( ) throws Throwable { FirstOrder firstOrder0 = new FirstOrder ( ) ; String string0 = firstOrder0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test5 ( ) throws Throwable { FirstOrder firstOrder0 = new FirstOrder ( ) ; String string0 = firstOrder0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String attributeIndicesTipText ( ) { return "Specify range of attributes to act on . " + " This is a comma separated list of attribute indices , with" + " \"first\" and \"last\" valid values . Specify an inclusive" + " range with \" - \" . E . g : \"first - 3 , 5 , 6 - 10 , last\" . " ; }
void test0 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; Enumeration < Object > enumeration0 = addValues0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSort ( ) { return m_Sort ; }
void test2 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String string0 = addValues0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSort ( ) { return m_Sort ; }
void test3 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String string0 = addValues0 . sortTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test4 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String string0 = addValues0 . labelsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSort ( ) { return m_Sort ; }
void test5 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String string0 = addValues0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test6 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String string0 = addValues0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test7 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "Expected end of range string , found : " ; stringArray0 [ 1 ] = "Expected end of range string , found : " ; addValues0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test8 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; String [ ] stringArray0 = addValues0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test9 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; addValues0 . setLabels ( "tngUaC { HxBft ; ld - g" ) ; String [ ] stringArray0 = addValues0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSort ( ) { return m_Sort ; }
void test10 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSort ( ) { return m_Sort ; }
void test12 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; addValues0 . setLabels ( "Expected end of range string , found : " ) ; String [ ] stringArray0 = addValues0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabels ( ) { String result ; int i ; result = "" ; for ( i = 0 ; i < m_Labels . size ( ) ; i + + ) { if ( i > 0 ) result + = " , " ; result + = Utils . quote ( ( String ) m_Labels . get ( i ) ) ; } return result ; }
void test13 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; addValues0 . setLabels ( "M [ ( \" , yU\"r\"~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabels ( ) { String result ; int i ; result = "" ; for ( i = 0 ; i < m_Labels . size ( ) ; i + + ) { if ( i > 0 ) result + = " , " ; result + = Utils . quote ( ( String ) m_Labels . get ( i ) ) ; } return result ; }
void test14 ( ) throws Throwable { AddValues addValues0 = new AddValues ( ) ; addValues0 . setLabels ( " , 4 [ < U0j8Pq | Q } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabels ( ) { String result ; int i ; result = "" ; for ( i = 0 ; i < m_Labels . size ( ) ; i + + ) { if ( i > 0 ) result + = " , " ; result + = Utils . quote ( ( String ) m_Labels . get ( i ) ) ; } return result ; }
void test1 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String [ ] stringArray0 = mergeManyValues0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test2 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String string0 = mergeManyValues0 . mergeValueRangeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test3 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "The new label for the merged values . " ; stringArray0 [ 1 ] = "The new label for the merged values . " ; stringArray0 [ 2 ] = "The new label for the merged values . " ; Filter . runFilter ( ( Filter ) mergeManyValues0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMergeValueRange ( ) { return m_MergeRange . getRanges ( ) ; }
void test4 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String string0 = mergeManyValues0 . labelTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLabel ( ) { return m_Label ; }
void test5 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String string0 = mergeManyValues0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMergeValueRange ( ) { return m_MergeRange . getRanges ( ) ; }
void test6 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String string0 = mergeManyValues0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test7 ( ) throws Throwable { MergeManyValues mergeManyValues0 = new MergeManyValues ( ) ; String string0 = mergeManyValues0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test0 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "8034" ; stringArray0 [ 1 ] = "8034" ; stringArray0 [ 2 ] = "hY1 : su - skJ } K1P@" ; stringArray0 [ 3 ] = "8034" ; stringArray0 [ 4 ] = "8034" ; stringArray0 [ 5 ] = "8034" ; stringArray0 [ 6 ] = "8034" ; Filter . runFilter ( ( Filter ) addNoise0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseMissing ( ) { return m_UseMissing ; }
void test1 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String string0 = addNoise0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test3 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPercent ( ) { return m_percent * 100 ; }
void test4 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String string0 = addNoise0 . percentTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPercent ( ) { return m_percent * 100 ; }
void test5 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String string0 = addNoise0 . randomSeedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseMissing ( ) { return m_UseMissing ; }
void test6 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String string0 = addNoise0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseMissing ( ) { return m_UseMissing ; }
void test7 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String string0 = addNoise0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test8 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String string0 = addNoise0 . useMissingTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseMissing ( ) { return m_UseMissing ; }
void test9 ( ) throws Throwable { AddNoise addNoise0 = new AddNoise ( ) ; String [ ] stringArray0 = addNoise0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPercent ( ) { return m_percent * 100 ; }
void test0 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . minDefaultTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test1 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getMaxDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToDefault ( ) { return m_CloseToDefault ; }
void test2 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test3 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test4 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; boolean boolean0 = numericCleaner0 . getIncludeClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToDefault ( ) { return m_CloseToDefault ; }
void test5 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; Capabilities capabilities0 = numericCleaner0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test6 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . decimalsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToTolerance ( ) { return m_CloseToTolerance ; }
void test8 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . includeClassTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test9 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . closeToToleranceTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinDefault ( ) { return m_MinDefault ; }
void test10 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . getAttributeIndices ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test11 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToDefault ( ) { return m_CloseToDefault ; }
void test12 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDecimals ( ) { return m_Decimals ; }
void test13 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . closeToDefaultTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test14 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getCloseTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinThreshold ( ) { return m_MinThreshold ; }
void test15 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getCloseToTolerance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinDefault ( ) { return m_MinDefault ; }
void test16 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getMinThreshold ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test17 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . maxDefaultTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToDefault ( ) { return m_CloseToDefault ; }
void test18 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . closeToTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test19 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; numericCleaner0 . getInvertSelection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToTolerance ( ) { return m_CloseToTolerance ; }
void test20 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . minThresholdTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test21 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getCloseToDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIncludeClass ( ) { return m_IncludeClass ; }
void test22 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinThreshold ( ) { return m_MinThreshold ; }
void test23 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getMinDefault ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinThreshold ( ) { return m_MinThreshold ; }
void test24 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String string0 = numericCleaner0 . maxThresholdTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test25 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double double0 = numericCleaner0 . getMaxThreshold ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinDefault ( ) { return m_MinDefault ; }
void test26 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; numericCleaner0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToTolerance ( ) { return m_CloseToTolerance ; }
void test27 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; numericCleaner0 . setDebug ( true ) ; String [ ] stringArray0 = numericCleaner0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxDefault ( ) { return m_MaxDefault ; }
void test28 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; numericCleaner0 . setInvertSelection ( true ) ; numericCleaner0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDecimals ( ) { return m_Decimals ; }
void test29 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDecimals ( ) { return m_Decimals ; }
void test30 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; String [ ] stringArray0 = numericCleaner0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDecimals ( ) { return m_Decimals ; }
void test31 ( ) throws Throwable { NumericCleaner numericCleaner0 = new NumericCleaner ( ) ; double [ ] doubleArray0 = new double [ 5 ] ; int [ ] intArray0 = new int [ 18 ] ; SparseInstance sparseInstance0 = new SparseInstance ( 1 . 0 , doubleArray0 , intArray0 , ( - 105 ) ) ; SparseInstance sparseInstance1 = ( SparseInstance ) numericCleaner0 . process ( ( Instance ) sparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCloseToDefault ( ) { return m_CloseToDefault ; }
void test0 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . outputOffsetMultiplierTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test1 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; int [ ] intArray0 = new int [ 7 ] ; interquartileRange0 . setAttributeIndicesArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test3 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . detectionPerAttributeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test4 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test5 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputOffsetMultiplier ( ) { return m_OutputOffsetMultiplier ; }
void test7 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDetectionPerAttribute ( ) { return m_DetectionPerAttribute ; }
void test8 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . extremeValuesFactorTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test9 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . extremeValuesAsOutliersTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test11 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String string0 = interquartileRange0 . outlierFactorTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test12 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; String [ ] stringArray0 = interquartileRange0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test13 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; interquartileRange0 . setDebug ( true ) ; String [ ] stringArray0 = interquartileRange0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOutlierFactor ( ) { return m_OutlierFactor ; }
void test14 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test15 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test16 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputOffsetMultiplier ( ) { return m_OutputOffsetMultiplier ; }
void test17 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; interquartileRange0 . setOutlierFactor ( 914 . 447365462259 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test18 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; interquartileRange0 . setExtremeValuesFactor ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test19 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; interquartileRange0 . setOutputOffsetMultiplier ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExtremeValuesFactor ( ) { return m_ExtremeValuesFactor ; }
void test20 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; InterquartileRange . ValueType interquartileRange_ValueType0 = InterquartileRange . ValueType . UPPER_EXTREME_VALUES ; interquartileRange0 . getValues ( interquartileRange_ValueType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOutlierFactor ( ) { return m_OutlierFactor ; }
void test21 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; InterquartileRange . ValueType interquartileRange_ValueType0 = InterquartileRange . ValueType . IQR ; interquartileRange0 . getValues ( interquartileRange_ValueType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDetectionPerAttribute ( ) { return m_DetectionPerAttribute ; }
void test22 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; InterquartileRange . ValueType interquartileRange_ValueType0 = InterquartileRange . ValueType . UPPER_OUTLIER_VALUES ; interquartileRange0 . getValues ( interquartileRange_ValueType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test23 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; InterquartileRange . ValueType interquartileRange_ValueType0 = InterquartileRange . ValueType . LOWER_OUTLIER_VALUES ; interquartileRange0 . getValues ( interquartileRange_ValueType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test24 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; InterquartileRange . ValueType interquartileRange_ValueType0 = InterquartileRange . ValueType . LOWER_EXTREME_VALUES ; interquartileRange0 . getValues ( interquartileRange_ValueType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test25 ( ) throws Throwable { InterquartileRange interquartileRange0 = new InterquartileRange ( ) ; InterquartileRange . ValueType interquartileRange_ValueType0 = InterquartileRange . ValueType . MEDIAN ; interquartileRange0 . getValues ( interquartileRange_ValueType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExtremeValuesAsOutliers ( ) { return m_ExtremeValuesAsOutliers ; }
void test0 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; File file0 = addCluster0 . getSerializedClustererFile ( ) ; addCluster0 . setSerializedClustererFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIgnoredAttributeIndices ( ) { if ( m_ignoreAttributesRange = = null ) { return "" ; } else { return m_ignoreAttributesRange . getRanges ( ) ; } }
void test1 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test2 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String clustererTipText ( ) { return "The clusterer to assign clusters with . " ; }
void test3 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test4 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String serializedClustererFileTipText ( ) { return "A file containing the serialized model of a built clusterer . " ; }
void test5 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ignoredAttributeIndicesTipText ( ) { return "The range of attributes to be ignored by the clusterer . eg : first - 3 , 5 , 9 - last" ; }
void test7 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClustererSpec ( ) { Clusterer c = getClusterer ( ) ; if ( c instanceof OptionHandler ) { return c . getClass ( ) . getName ( ) + " " + Utils . joinOptions ( ( ( OptionHandler ) c ) . getOptions ( ) ) ; } return c . getClass ( ) . getName ( ) ; }
void test8 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test9 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test11 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean input ( Instance instance ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } if ( m_NewBatch ) { m_OutputQueue = new Queue ( ) ; m_NewBatch = false ; } bufferInput ( instance ) ; return false ; }
void test12 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean input ( Instance instance ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } if ( m_NewBatch ) { m_OutputQueue = new Queue ( ) ; m_NewBatch = false ; } bufferInput ( instance ) ; return false ; }
void test13 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOutputFormatDefined ( ) { return ( m_OutputFormat ! = null ) ; }
void test14 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClustererSpec ( ) { Clusterer c = getClusterer ( ) ; if ( c instanceof OptionHandler ) { return c . getClass ( ) . getName ( ) + " " + Utils . joinOptions ( ( ( OptionHandler ) c ) . getOptions ( ) ) ; } return c . getClass ( ) . getName ( ) ; }
void test15 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIgnoredAttributeIndices ( ) { if ( m_ignoreAttributesRange = = null ) { return "" ; } else { return m_ignoreAttributesRange . getRanges ( ) ; } }
void test16 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; addCluster0 . setIgnoredAttributeIndices ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFirstBatchDone ( ) { return m_FirstBatchDone ; }
void test17 ( ) throws Throwable { AddCluster addCluster0 = new AddCluster ( ) ; File file0 = new File ( "a`gZ0Zp & e\"FoHAi" , "a`gZ0Zp & e\"FoHAi" ) ; addCluster0 . setSerializedClustererFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyNode [ ] getPath ( ) { PropertyNode [ ] result = new PropertyNode [ m_ResultPath . length - 1 ] ; for ( int i = 0 ; i < result . length ; i + + ) { result [ i ] = ( PropertyNode ) ( ( DefaultMutableTreeNode ) m_ResultPath [ i + 1 ] ) . getUserObject ( ) ; } return result ; }
void test1 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; String [ ] stringArray0 = makeIndicator0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test3 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; makeIndicator0 . setValueIndex ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test4 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; String string0 = makeIndicator0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNumeric ( ) { return m_Numeric ; }
void test5 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; String string0 = makeIndicator0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNumeric ( ) { return m_Numeric ; }
void test6 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; String string0 = makeIndicator0 . numericTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueIndices ( ) { return m_ValIndex . getRanges ( ) ; }
void test7 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; int [ ] intArray0 = new int [ 3 ] ; makeIndicator0 . setValueIndicesArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueIndices ( ) { return m_ValIndex . getRanges ( ) ; }
void test8 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; String string0 = makeIndicator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueIndices ( ) { return m_ValIndex . getRanges ( ) ; }
void test9 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; String string0 = makeIndicator0 . valueIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test10 ( ) throws Throwable { MakeIndicator makeIndicator0 = new MakeIndicator ( ) ; Range range0 = makeIndicator0 . getValueRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range [ ] getRanges ( ) { return m_Ranges ; }
void test0 ( ) throws Throwable { NumericToBinary numericToBinary0 = new NumericToBinary ( ) ; String string0 = numericToBinary0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { NumericToBinary numericToBinary0 = new NumericToBinary ( ) ; String string0 = numericToBinary0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test0 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; Capabilities capabilities0 = classAssigner0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test1 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; classAssigner0 . process ( ( Instance ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test2 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; String string0 = classAssigner0 . classIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test3 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; String string0 = classAssigner0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test4 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; String string0 = classAssigner0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test5 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = " . arff" ; stringArray0 [ 1 ] = " . arff" ; Filter . runFilter ( ( Filter ) classAssigner0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test6 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; String [ ] stringArray0 = classAssigner0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test7 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; classAssigner0 . setDebug ( true ) ; String [ ] stringArray0 = classAssigner0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test8 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; classAssigner0 . setClassIndex ( "$i\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test9 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test10 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 1 ) ; Instances instances1 = classAssigner0 . determineOutputFormat ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int classIndex ( ) { if ( m_Dataset = = null ) { throw new UnassignedDatasetException ( "DenseInstance doesn't have access to a dataset ! " ) ; } return m_Dataset . classIndex ( ) ; }
void test0 ( ) throws Throwable { NominalToString nominalToString0 = new NominalToString ( ) ; String [ ] stringArray0 = nominalToString0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndexes ( ) { / / return m_AttIndex . getSingleIndex ( ) ; return m_AttIndex . getRanges ( ) ; }
void test1 ( ) throws Throwable { NominalToString nominalToString0 = new NominalToString ( ) ; String string0 = nominalToString0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndexes ( ) { / / return m_AttIndex . getSingleIndex ( ) ; return m_AttIndex . getRanges ( ) ; }
void test2 ( ) throws Throwable { NominalToString nominalToString0 = new NominalToString ( ) ; String string0 = nominalToString0 . attributeIndexesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndexes ( ) { / / return m_AttIndex . getSingleIndex ( ) ; return m_AttIndex . getRanges ( ) ; }
void test4 ( ) throws Throwable { NominalToString nominalToString0 = new NominalToString ( ) ; String string0 = nominalToString0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndexes ( ) { / / return m_AttIndex . getSingleIndex ( ) ; return m_AttIndex . getRanges ( ) ; }
void test5 ( ) throws Throwable { NominalToString nominalToString0 = new NominalToString ( ) ; Enumeration < Object > enumeration0 = nominalToString0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test8 ( ) throws Throwable { NominalToString nominalToString0 = new NominalToString ( ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "8572" ; stringArray0 [ 1 ] = "8572" ; stringArray0 [ 2 ] = "8572" ; stringArray0 [ 3 ] = "8572" ; stringArray0 [ 4 ] = "8572" ; stringArray0 [ 5 ] = "8572" ; stringArray0 [ 6 ] = "8572" ; stringArray0 [ 7 ] = "8572" ; stringArray0 [ 8 ] = "8572" ; stringArray0 [ 9 ] = "8572" ; nominalToString0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndexes ( ) { / / return m_AttIndex . getSingleIndex ( ) ; return m_AttIndex . getRanges ( ) ; }
void test0 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String [ ] stringArray0 = addExpression0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test1 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String string0 = addExpression0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test2 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String string0 = addExpression0 . nameTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test3 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = " , 3 [ 1^bSQrB" ; stringArray0 [ 1 ] = " , 3 [ 1^bSQrB" ; stringArray0 [ 2 ] = " , 3 [ 1^bSQrB" ; stringArray0 [ 3 ] = " , 3 [ 1^bSQrB" ; stringArray0 [ 4 ] = " , 3 [ 1^bSQrB" ; Filter . runFilter ( ( Filter ) addExpression0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExpression ( ) { return m_Expression ; }
void test4 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String string0 = addExpression0 . debugTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test5 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String string0 = addExpression0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test7 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; String string0 = addExpression0 . expressionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test8 ( ) throws Throwable { AddExpression addExpression0 = new AddExpression ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test0 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; String [ ] stringArray0 = numericToNominal0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test1 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; Enumeration < Object > enumeration0 = numericToNominal0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test2 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; String string0 = numericToNominal0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test3 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; Capabilities capabilities0 = numericToNominal0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test4 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; String string0 = numericToNominal0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test5 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; int [ ] intArray0 = new int [ 1 ] ; numericToNominal0 . setAttributeIndicesArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test6 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; String string0 = numericToNominal0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test7 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; String string0 = numericToNominal0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test8 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; numericToNominal0 . setAttributeIndices ( "" ) ; String [ ] stringArray0 = numericToNominal0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test9 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; numericToNominal0 . setDebug ( true ) ; String [ ] stringArray0 = numericToNominal0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test10 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; numericToNominal0 . setInvertSelection ( true ) ; String [ ] stringArray0 = numericToNominal0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test11 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( " ) P" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( " ) P" , arrayList0 , 521 ) ; DenseInstance denseInstance0 = new DenseInstance ( 521 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; Instances instances1 = numericToNominal0 . determineOutputFormat ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { NumericToNominal numericToNominal0 = new NumericToNominal ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( " ) P" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( " ) P" , arrayList0 , 521 ) ; double [ ] doubleArray0 = new double [ 9 ] ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( ( double ) 521 , doubleArray0 ) ; instances0 . add ( ( Instance ) binarySparseInstance0 ) ; Instances instances1 = numericToNominal0 . determineOutputFormat ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instances process ( Instances data ) { if ( getPostProcessor ( ) = = null ) return data ; else return getPostProcessor ( ) . process ( data ) ; }
void test1 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKernelFactorExpression ( ) { return m_KernelFactorExpression ; }
void test2 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKernelFactorExpression ( ) { return m_KernelFactorExpression ; }
void test3 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test4 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test5 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test6 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKernelFactorExpression ( ) { return m_KernelFactorExpression ; }
void test7 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test8 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKernelFactorExpression ( ) { return m_KernelFactorExpression ; }
void test9 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKernelFactorExpression ( ) { return m_KernelFactorExpression ; }
void test10 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test11 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test12 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test13 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test14 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initFilter ( Instances instances ) throws Exception { HashMap symbols ; / / determine kernel factor symbols = new HashMap ( ) ; symbols . put ( "A" , new Double ( instances . numAttributes ( ) ) ) ; symbols . put ( "N" , new Double ( instances . numInstances ( ) ) ) ; m_KernelFactor = MathematicalExpression . evaluate ( getKernelFactorExpression ( ) , symbols ) ; / / init filters if ( ! m_checksTurnedOff ) { m_Missing = new ReplaceMissingValues ( ) ; m_Missing . setInputFormat ( instances ) ; instances = Filter . useFilter ( instances , m_Missing ) ; } else { m_Missing = null ; } if ( getKernel ( ) . getCapabilities ( ) . handles ( Capability . NUMERIC_ATTRIBUTES ) ) { boolean onlyNumeric = true ; if ( ! m_checksTurnedOff ) { for ( int i = 0 ; i < instances . numAttributes ( ) ; i + + ) { if ( i ! = instances . classIndex ( ) ) { if ( ! instances . attribute ( i ) . isNumeric ( ) ) { onlyNumeric = false ; break ; } } } } if ( ! onlyNumeric ) { m_NominalToBinary = new NominalToBinary ( ) ; m_NominalToBinary . setInputFormat ( instances ) ; instances = Filter . useFilter ( instances , m_NominalToBinary ) ; } else { m_NominalToBinary = null ; } } else { m_NominalToBinary = null ; } if ( ( m_Filter ! = null ) & & ( m_Filter . getClass ( ) ! = AllFilter . class ) ) { m_ActualFilter = Filter . makeCopy ( m_Filter ) ; m_ActualFilter . setInputFormat ( instances ) ; instances = Filter . useFilter ( instances , m_ActualFilter ) ; } else { m_ActualFilter = null ; } m_NumTrainInstances = instances . numInstances ( ) ; / / set factor for kernel m_ActualKernel = Kernel . makeCopy ( m_Kernel ) ; if ( m_ActualKernel instanceof RBFKernel ) ( ( RBFKernel ) m_ActualKernel ) . setGamma ( m_KernelFactor * ( ( RBFKernel ) m_ActualKernel ) . getGamma ( ) ) ; / / build kernel m_ActualKernel . buildKernel ( instances ) ; m_Initialized = true ; }
void test15 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numAttributes ( ) { return m_AttValues . length ; }
void test16 ( ) throws Throwable { KernelFilter kernelFilter0 = new KernelFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitFileClassIndex ( ) { return m_InitFileClassIndex . getSingleIndex ( ) ; }
void test1 ( ) throws Throwable { Center center0 = new Center ( ) ; String string0 = center0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { Center center0 = new Center ( ) ; String string0 = center0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test0 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "ji ( [ # ; C : * " ; Filter . runFilter ( ( Filter ) copy0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test1 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; String string0 = copy0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; String string0 = copy0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test3 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; String string0 = copy0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String invertSelectionTipText ( ) { return "Whether to invert the selection . " ; }
void test5 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; int [ ] intArray0 = new int [ 6 ] ; copy0 . setAttributeIndicesArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test6 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; String string0 = copy0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String attributeIndicesTipText ( ) { return "Specify range of attributes to act on . " + " This is a comma separated list of attribute indices , with" + " \"first\" and \"last\" valid values . Specify an inclusive" + " range with \" - \" . E . g : \"first - 3 , 5 , 6 - 10 , last\" . " ; }
void test7 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; copy0 . setInvertSelection ( true ) ; String [ ] stringArray0 = copy0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test8 ( ) throws Throwable { Copy copy0 = new Copy ( ) ; copy0 . setAttributeIndices ( "Sets copy selected vs unselected action . If set to false , only the specified attributes will be copied ; If set to true , non - specified attributes will be copied . " ) ; String [ ] stringArray0 = copy0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test0 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; int [ ] intArray0 = new int [ 5 ] ; timeSeriesDelta0 . setAttributeIndicesArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test1 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; String string0 = timeSeriesDelta0 . fillWithMissingTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test2 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; timeSeriesDelta0 . setInvertSelection ( true ) ; String [ ] stringArray0 = timeSeriesDelta0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInstanceRange ( ) { return m_InstanceRange ; }
void test3 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test4 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; String string0 = timeSeriesDelta0 . instanceRangeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInstanceRange ( ) { return m_InstanceRange ; }
void test5 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "Invert matching sense . ie calculate for all non - specified columns . " ; stringArray0 [ 1 ] = "Invert matching sense . ie calculate for all non - specified columns . " ; Filter . runFilter ( ( Filter ) timeSeriesDelta0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test6 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; String string0 = timeSeriesDelta0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test7 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; String string0 = timeSeriesDelta0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test8 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; timeSeriesDelta0 . setAttributeIndices ( "Invert matching sense . ie calculate for all non - specified columns . " ) ; String [ ] stringArray0 = timeSeriesDelta0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test11 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; timeSeriesDelta0 . resetHistory ( ) ; timeSeriesDelta0 . resetHistory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test13 ( ) throws Throwable { TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta ( ) ; timeSeriesDelta0 . resetHistory ( ) ; double [ ] doubleArray0 = new double [ 5 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( - 293 . 62398266213404 ) , doubleArray0 ) ; timeSeriesDelta0 . setInstanceRange ( 1784 ) ; timeSeriesDelta0 . historyInput ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFillWithMissing ( ) { return m_FillWithMissing ; }
void test0 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setInputFormat ( Instances instanceInfo ) throws Exception { testInputFormat ( instanceInfo ) ; m_InputFormat = instanceInfo . stringFreeStructure ( ) ; m_OutputFormat = null ; m_OutputQueue = new Queue ( ) ; m_NewBatch = true ; m_FirstBatchDone = false ; initInputLocators ( m_InputFormat , null ) ; return false ; }
void test1 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test2 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test3 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test4 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test5 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTransformAllValues ( ) { return m_TransformAll ; }
void test6 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test7 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test8 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test9 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test10 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test11 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean input ( Instance instance ) throws Exception { if ( m_InputFormat = = null ) { throw new NullPointerException ( "No input instance format defined" ) ; } if ( m_NewBatch ) { m_OutputQueue = new Queue ( ) ; m_NewBatch = false ; } bufferInput ( instance ) ; return false ; }
void test12 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test13 ( ) throws Throwable { NominalToBinary nominalToBinary0 = new NominalToBinary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBinaryAttributesNominal ( ) { return ! m_Numeric ; }
void test1 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; String [ ] stringArray0 = addID0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDIndex ( ) { return m_Index . getSingleIndex ( ) ; }
void test2 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; String string0 = addID0 . attributeNameTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDIndex ( ) { return m_Index . getSingleIndex ( ) ; }
void test3 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "\" / . 5ym05T ) nfY6D" ; Filter . runFilter ( ( Filter ) addID0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeName ( ) { return m_Name ; }
void test4 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; String string0 = addID0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeName ( ) { return m_Name ; }
void test5 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDIndex ( ) { return m_Index . getSingleIndex ( ) ; }
void test6 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; String string0 = addID0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeName ( ) { return m_Name ; }
void test7 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; double [ ] doubleArray0 = new double [ 5 ] ; DenseInstance denseInstance0 = new DenseInstance ( 1654 . 7191108428779 , doubleArray0 ) ; addID0 . convertInstance ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDIndex ( ) { return m_Index . getSingleIndex ( ) ; }
void test8 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; String string0 = addID0 . IDIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeName ( ) { return m_Name ; }
void test9 ( ) throws Throwable { AddID addID0 = new AddID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDIndex ( ) { return m_Index . getSingleIndex ( ) ; }
void test0 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 1 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 2 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 3 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 4 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 5 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 6 ] = "I_BMWjBz ! CZSR c@ , " ; stringArray0 [ 7 ] = "I_BMWjBz ! CZSR c@ , " ; normalize0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test1 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; normalize0 . getMinArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test3 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; String string0 = normalize0 . scaleTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test4 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; String [ ] stringArray0 = normalize0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTranslation ( ) { return m_Translation ; }
void test5 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; String string0 = normalize0 . translationTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test6 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; normalize0 . getMaxArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test8 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; String string0 = normalize0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test9 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; String string0 = normalize0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test10 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; Enumeration < Object > enumeration0 = normalize0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getScale ( ) { return m_Scale ; }
void test0 ( ) throws Throwable { Add add0 = new Add ( ) ; add0 . setDateFormat ( "The list of value labels ( nominal attribute creation only ) . The list must be comma - separated , eg : \"red , green , blue\" . If this is empty , the created attribute will be numeric . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test1 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . attributeTypeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test2 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . attributeNameTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test3 ( ) throws Throwable { Add add0 = new Add ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "r13h" ; stringArray0 [ 1 ] = "r13h" ; stringArray0 [ 2 ] = "r13h" ; stringArray0 [ 3 ] = "r13h" ; stringArray0 [ 4 ] = "r13h" ; stringArray0 [ 5 ] = "r13h" ; Filter . runFilter ( ( Filter ) add0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test4 ( ) throws Throwable { Add add0 = new Add ( ) ; add0 . setNominalLabels ( "The list of value labels ( nominal attribute creation only ) . The list must be comma - separated , eg : \"red , green , blue\" . If this is empty , the created attribute will be numeric . " ) ; String [ ] stringArray0 = add0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNominalLabels ( ) { String labelList = "" ; for ( int i = 0 ; i < m_Labels . size ( ) ; i + + ) { if ( i = = 0 ) { labelList = ( String ) m_Labels . elementAt ( i ) ; } else { labelList + = " , " + ( String ) m_Labels . elementAt ( i ) ; } } return labelList ; }
void test5 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . dateFormatTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test6 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . attributeIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test7 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test8 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . nominalLabelsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeName ( ) { return m_Name ; }
void test9 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test11 ( ) throws Throwable { Add add0 = new Add ( ) ; String string0 = add0 . getDateFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test12 ( ) throws Throwable { Add add0 = new Add ( ) ; String [ ] stringArray0 = add0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test14 ( ) throws Throwable { Add add0 = new Add ( ) ; add0 . setNominalLabels ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test15 ( ) throws Throwable { Add add0 = new Add ( ) ; Tag [ ] tagArray0 = new Tag [ 3 ] ; Tag tag0 = new Tag ( ( - 648 ) , "N$J\u0000\nQ`zWY%A" , "" , false ) ; tagArray0 [ 0 ] = tag0 ; Tag tag1 = new Tag ( ) ; tagArray0 [ 1 ] = tag1 ; Tag tag2 = new Tag ( ( - 1 ) , "" , "" , false ) ; tagArray0 [ 2 ] = tag2 ; SelectedTag selectedTag0 = new SelectedTag ( ( - 648 ) , tagArray0 ) ; add0 . setAttributeType ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndex ( ) { return m_AttIndex . getSingleIndex ( ) ; }
void test0 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; String string0 = addUserFields_AttributeSpec0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test1 ( ) throws Throwable { AddUserFields addUserFields0 = new AddUserFields ( ) ; addUserFields0 . addAttributeSpec ( "@@k# ] `$tQ5 . Brz8s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; addUserFields_AttributeSpec0 . setValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; String string0 = addUserFields_AttributeSpec0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( Instance instance , int index ) { if ( instance . isMissing ( index ) ) return new Double ( Utils . missingValue ( ) ) ; else if ( instance . attribute ( index ) . isNominal ( ) ) return new String ( instance . stringValue ( index ) ) ; else if ( instance . attribute ( index ) . isNumeric ( ) ) return new Double ( instance . value ( index ) ) ; else throw new IllegalArgumentException ( "Unhandled attribute type '" + instance . attribute ( index ) . type ( ) + "' ! " ) ; }
void test4 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; String string0 = addUserFields_AttributeSpec0 . getResolvedValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddUserFields ( ) { m_attributeSpecs = new ArrayList < AttributeSpec > ( ) ; }
void test5 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; addUserFields_AttributeSpec0 . setType ( "Name : Type : Value : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setType ( int t ) { m_type = t ; }
void test6 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( "" ) ; addUserFields_AttributeSpec0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setName ( String name ) { m_attributeName = name ; }
void test8 ( ) throws Throwable { AddUserFields addUserFields0 = new AddUserFields ( ) ; addUserFields0 . addAttributeSpec ( "dWJ6 * 8C1' & 9 & lWn < f + " ) ; String [ ] stringArray0 = addUserFields0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test9 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; String string0 = addUserFields_AttributeSpec0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test11 ( ) throws Throwable { AddUserFields addUserFields0 = new AddUserFields ( ) ; List < AddUserFields . AttributeSpec > list0 = addUserFields0 . getAttributeSpecs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test12 ( ) throws Throwable { AddUserFields addUserFields0 = new AddUserFields ( ) ; String string0 = addUserFields0 . attributeSpecsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String attributeSpecsTipText ( ) { return "Specifications of the new attributes to create" ; }
void test14 ( ) throws Throwable { AddUserFields addUserFields0 = new AddUserFields ( ) ; String string0 = addUserFields0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test15 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; String string0 = addUserFields_AttributeSpec0 . getDateFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleDateFormat getDateFormat ( ) { return m_DateFormat ; }
void test16 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; addUserFields_AttributeSpec0 . init ( environment0 ) ; Date date0 = addUserFields_AttributeSpec0 . getDateValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( Instances data ) { m_indexOfTrueStep = - 1 ; m_indexOfFalseStep = - 1 ; m_connectedFormat = data ; if ( m_downstream = = null ) { return ; } if ( m_downstream [ 0 ] ! = null & & ( ( BeanCommon ) m_downstream [ 0 ] ) . getCustomName ( ) . equals ( m_customNameOfTrueStep ) ) { m_indexOfTrueStep = 0 ; } if ( m_downstream [ 0 ] ! = null & & ( ( BeanCommon ) m_downstream [ 0 ] ) . getCustomName ( ) . equals ( m_customNameOfFalseStep ) ) { m_indexOfFalseStep = 0 ; } if ( m_downstream [ 1 ] ! = null & & ( ( BeanCommon ) m_downstream [ 1 ] ) . getCustomName ( ) . equals ( m_customNameOfTrueStep ) ) { m_indexOfTrueStep = 1 ; } if ( m_downstream [ 1 ] ! = null & & ( ( BeanCommon ) m_downstream [ 1 ] ) . getCustomName ( ) . equals ( m_customNameOfFalseStep ) ) { m_indexOfFalseStep = 1 ; } if ( m_env = = null ) { m_env = Environment . getSystemWide ( ) ; } try { if ( m_expressionString ! = null & & m_expressionString . length ( ) > 0 ) { m_root = new BracketNode ( ) ; m_root . parseFromInternal ( m_expressionString ) ; } if ( m_root ! = null ) { m_root . init ( data , m_env ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; stop ( ) ; m_busy = false ; } }
void test17 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; addUserFields_AttributeSpec0 . init ( environment0 ) ; double double0 = addUserFields_AttributeSpec0 . getNumericValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( Instances data ) { m_indexOfTrueStep = - 1 ; m_indexOfFalseStep = - 1 ; m_connectedFormat = data ; if ( m_downstream = = null ) { return ; } if ( m_downstream [ 0 ] ! = null & & ( ( BeanCommon ) m_downstream [ 0 ] ) . getCustomName ( ) . equals ( m_customNameOfTrueStep ) ) { m_indexOfTrueStep = 0 ; } if ( m_downstream [ 0 ] ! = null & & ( ( BeanCommon ) m_downstream [ 0 ] ) . getCustomName ( ) . equals ( m_customNameOfFalseStep ) ) { m_indexOfFalseStep = 0 ; } if ( m_downstream [ 1 ] ! = null & & ( ( BeanCommon ) m_downstream [ 1 ] ) . getCustomName ( ) . equals ( m_customNameOfTrueStep ) ) { m_indexOfTrueStep = 1 ; } if ( m_downstream [ 1 ] ! = null & & ( ( BeanCommon ) m_downstream [ 1 ] ) . getCustomName ( ) . equals ( m_customNameOfFalseStep ) ) { m_indexOfFalseStep = 1 ; } if ( m_env = = null ) { m_env = Environment . getSystemWide ( ) ; } try { if ( m_expressionString ! = null & & m_expressionString . length ( ) > 0 ) { m_root = new BracketNode ( ) ; m_root . parseFromInternal ( m_expressionString ) ; } if ( m_root ! = null ) { m_root . init ( data , m_env ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; stop ( ) ; m_busy = false ; } }
void test18 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; addUserFields_AttributeSpec0 . init ( environment0 ) ; String string0 = addUserFields_AttributeSpec0 . getNominalOrStringValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( Instances data ) { m_indexOfTrueStep = - 1 ; m_indexOfFalseStep = - 1 ; m_connectedFormat = data ; if ( m_downstream = = null ) { return ; } if ( m_downstream [ 0 ] ! = null & & ( ( BeanCommon ) m_downstream [ 0 ] ) . getCustomName ( ) . equals ( m_customNameOfTrueStep ) ) { m_indexOfTrueStep = 0 ; } if ( m_downstream [ 0 ] ! = null & & ( ( BeanCommon ) m_downstream [ 0 ] ) . getCustomName ( ) . equals ( m_customNameOfFalseStep ) ) { m_indexOfFalseStep = 0 ; } if ( m_downstream [ 1 ] ! = null & & ( ( BeanCommon ) m_downstream [ 1 ] ) . getCustomName ( ) . equals ( m_customNameOfTrueStep ) ) { m_indexOfTrueStep = 1 ; } if ( m_downstream [ 1 ] ! = null & & ( ( BeanCommon ) m_downstream [ 1 ] ) . getCustomName ( ) . equals ( m_customNameOfFalseStep ) ) { m_indexOfFalseStep = 1 ; } if ( m_env = = null ) { m_env = Environment . getSystemWide ( ) ; } try { if ( m_expressionString ! = null & & m_expressionString . length ( ) > 0 ) { m_root = new BracketNode ( ) ; m_root . parseFromInternal ( m_expressionString ) ; } if ( m_root ! = null ) { m_root . init ( data , m_env ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; stop ( ) ; m_busy = false ; } }
void test19 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( "@@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { AddUserFields . AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields . AttributeSpec ( ) ; String string0 = addUserFields_AttributeSpec0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test23 ( ) throws Throwable { AddUserFields addUserFields0 = new AddUserFields ( ) ; String [ ] stringArray0 = addUserFields0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test0 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String string0 = numericTransform0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return m_Class ; }
void test1 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String string0 = numericTransform0 . attributeIndicesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return m_Class ; }
void test3 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String string0 = numericTransform0 . classNameTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return m_Class ; }
void test4 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String string0 = numericTransform0 . methodNameTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodName ( ) { return m_Method ; }
void test5 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "7p ? > 7qK7D ! Rzg^" ; stringArray0 [ 1 ] = " ] ) , , qy`F" ; stringArray0 [ 2 ] = " ] ) , , qy`F" ; stringArray0 [ 3 ] = "X9$" ; stringArray0 [ 4 ] = "z ( u^2# + xts6282\"q + > = " ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = "Ror ] X7Zsd ) JL" ; stringArray0 [ 7 ] = "" ; numericTransform0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodName ( ) { return m_Method ; }
void test6 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; Enumeration < Object > enumeration0 = numericTransform0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return m_Class ; }
void test7 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String [ ] stringArray0 = numericTransform0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return m_Class ; }
void test8 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; int [ ] intArray0 = new int [ 6 ] ; numericTransform0 . setAttributeIndicesArray ( intArray0 ) ; String [ ] stringArray0 = numericTransform0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttributeIndices ( ) { return m_DiscretizeCols . getRanges ( ) ; }
void test9 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String string0 = numericTransform0 . invertSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return m_Class ; }
void test10 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; String string0 = numericTransform0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodName ( ) { return m_Method ; }
void test12 ( ) throws Throwable { NumericTransform numericTransform0 = new NumericTransform ( ) ; numericTransform0 . setInvertSelection ( true ) ; String [ ] stringArray0 = numericTransform0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInvertSelection ( ) { return m_Inverse ; }
void test1 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( Double . NaN ) ; String string0 = pairedStats0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegreesOfFreedom ( ) { return m_degreesOfFreedom ; }
void test2 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( ( - 1693 . 4112855013018 ) ) ; int int0 = pairedStats0 . getDegreesOfFreedom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegreesOfFreedom ( ) { return m_degreesOfFreedom ; }
void test3 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( ( - 1693 . 4112855013018 ) ) ; String string0 = pairedStats0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( ( - 1693 . 4112855013018 ) ) ; double [ ] doubleArray0 = new double [ 22 ] ; pairedStats0 . subtract ( doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void subtract ( double value ) { subtract ( value , 1 ) ; }
void test6 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( ( - 358 . 58434355443416 ) ) ; double [ ] doubleArray0 = new double [ 24 ] ; pairedStats0 . add ( doubleArray0 , doubleArray0 ) ; pairedStats0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( ( - 634 . 5731397550903 ) ) ; pairedStats0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( Double . POSITIVE_INFINITY ) ; pairedStats0 . add ( Double . POSITIVE_INFINITY , Double . POSITIVE_INFINITY ) ; Stats stats0 = new Stats ( ) ; pairedStats0 . yStats = ( weka . experiment . Stats ) stats0 ; pairedStats0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( 1901 . 7478690153625 ) ; pairedStats0 . add ( 1901 . 7478690153625 , 0 . 0 ) ; pairedStats0 . add ( ( double ) 0 , 0 . 0 ) ; pairedStats0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( Double . POSITIVE_INFINITY ) ; pairedStats0 . add ( Double . POSITIVE_INFINITY , Double . POSITIVE_INFINITY ) ; pairedStats0 . setDegreesOfFreedom ( 2026 ) ; pairedStats0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegreesOfFreedom ( ) { return m_degreesOfFreedom ; }
void test14 ( ) throws Throwable { PairedStats pairedStats0 = new PairedStats ( ( - 634 . 5731397550903 ) ) ; pairedStats0 . subtract ( ( - 1 . 0 ) , ( - 634 . 5731397550903 ) ) ; pairedStats0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void calculateDerived ( ) { xStats . calculateDerived ( ) ; yStats . calculateDerived ( ) ; differencesStats . calculateDerived ( ) ; correlation = Double . NaN ; if ( ! Double . isNaN ( xStats . stdDev ) & & ! Double . isNaN ( yStats . stdDev ) & & ! Utils . eq ( xStats . stdDev , 0 ) ) { double slope = ( xySum - xStats . sum * yStats . sum / count ) / ( xStats . sumSq - xStats . sum * xStats . mean ) ; if ( ! Utils . eq ( yStats . stdDev , 0 ) ) { correlation = slope * xStats . stdDev / yStats . stdDev ; } else { correlation = 1 . 0 ; } } if ( Utils . gr ( differencesStats . stdDev , 0 ) ) { double tval = differencesStats . mean / Math . sqrt ( ( 1 / count + m_testTrainRatio ) * differencesStats . stdDev * differencesStats . stdDev ) ; if ( count > 1 ) { differencesProbability = Statistics . FProbability ( tval * tval , 1 , ( int ) count - 1 ) ; } else differencesProbability = 1 ; } else { if ( differencesStats . sumSq = = 0 ) { differencesProbability = 1 . 0 ; } else { differencesProbability = 0 . 0 ; } } differencesSignificance = 0 ; if ( differencesProbability < = sigLevel ) { if ( xStats . mean > yStats . mean ) { differencesSignificance = 1 ; } else { differencesSignificance = - 1 ; } } }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; OutputZipper outputZipper0 = new OutputZipper ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; OutputZipper outputZipper0 = new OutputZipper ( file0 ) ; outputZipper0 . finished ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; double [ ] doubleArray0 = new double [ 24 ] ; SparseInstance sparseInstance0 = new SparseInstance ( 1732 . 2531324638392 , doubleArray0 ) ; PairedTTester . Dataset pairedTTester_Dataset0 = pairedTTester0 . new Dataset ( ( Instance ) sparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunColumn ( ) { return m_RunColumnSet ; }
void test3 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; String string0 = pairedTTester0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortColumn ( ) { return m_SortColumn ; }
void test4 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; pairedTTester0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test5 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunColumn ( ) { return m_RunColumnSet ; }
void test6 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; String string0 = pairedTTester0 . getToolTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortColumn ( ) { return m_SortColumn ; }
void test7 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; pairedTTester0 . assign ( ( Tester ) pairedTTester0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String resultsetKey ( ) { if ( ! m_ResultsetsValid ) { try { prepareData ( ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return ex . getMessage ( ) ; } } String result = "" ; for ( int j = 0 ; j < getNumResultsets ( ) ; j + + ) { result + = " ( " + ( j + 1 ) + " ) " + getResultsetName ( j ) + '\n' ; } return result + '\n' ; }
void test8 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; String string0 = pairedTTester0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunColumn ( ) { return m_RunColumnSet ; }
void test10 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; SparseInstance sparseInstance0 = new SparseInstance ( 17 ) ; PairedTTester . Resultset pairedTTester_Resultset0 = pairedTTester0 . new Resultset ( ( Instance ) sparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test11 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; PairedTTester . DatasetSpecifiers pairedTTester_DatasetSpecifiers0 = pairedTTester0 . new DatasetSpecifiers ( ) ; String string0 = pairedTTester_DatasetSpecifiers0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowStdDevs ( ) { return m_ShowStdDevs ; }
void test14 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 0 ) ; Attribute attribute0 = new Attribute ( ( String ) null , ( String ) null , 0 ) ; arrayList0 . add ( attribute0 ) ; pairedTTester0 . setInstances ( instances0 ) ; SparseInstance sparseInstance0 = new SparseInstance ( 125 ) ; instances0 . add ( ( Instance ) sparseInstance0 ) ; pairedTTester0 . setFoldColumn ( 1956 ) ; pairedTTester0 . setRunColumn ( 1635 ) ; String string0 = pairedTTester0 . resultsetKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test15 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; pairedCorrectedTTester0 . getResultsetName ( 1529 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortColumn ( ) { return m_SortColumn ; }
void test17 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; int [ ] intArray0 = new int [ 1 ] ; intArray0 [ 0 ] = 715 ; pairedTTester0 . setDisplayedResultsets ( intArray0 ) ; boolean boolean0 = pairedTTester0 . displayResultset ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test18 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String header ( int comparisonColumn ) { if ( ! m_ResultsetsValid ) { try { prepareData ( ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return ex . getMessage ( ) ; } } initResultMatrix ( ) ; m_ResultMatrix . addHeader ( "Tester" , getClass ( ) . getName ( ) ) ; m_ResultMatrix . addHeader ( "Analysing" , m_Instances . attribute ( comparisonColumn ) . name ( ) ) ; m_ResultMatrix . addHeader ( "Datasets" , Integer . toString ( getNumDatasets ( ) ) ) ; m_ResultMatrix . addHeader ( "Resultsets" , Integer . toString ( getNumResultsets ( ) ) ) ; m_ResultMatrix . addHeader ( "Confidence" , getSignificanceLevel ( ) + " ( two tailed ) " ) ; m_ResultMatrix . addHeader ( "Sorted by" , getSortColumnName ( ) ) ; m_ResultMatrix . addHeader ( "Date" , ( new SimpleDateFormat ( ) ) . format ( new Date ( ) ) ) ; return m_ResultMatrix . toStringHeader ( ) + "\n" ; }
void test19 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 0 ) ; Attribute attribute0 = new Attribute ( ( String ) null , ( String ) null , 0 ) ; arrayList0 . add ( attribute0 ) ; pairedTTester0 . setInstances ( instances0 ) ; SparseInstance sparseInstance0 = new SparseInstance ( 125 ) ; instances0 . add ( ( Instance ) sparseInstance0 ) ; pairedTTester0 . setRunColumn ( 1635 ) ; String string0 = pairedTTester0 . multiResultsetRanking ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumResultsets ( ) { if ( ! m_ResultsetsValid ) { try { prepareData ( ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return 0 ; } } return m_Resultsets . size ( ) ; }
void test20 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex ( ) ; pairedTTester0 . setResultMatrix ( ( ResultMatrix ) resultMatrixLatex0 ) ; String [ ] stringArray0 = pairedTTester0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunColumn ( ) { return m_RunColumnSet ; }
void test21 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV ( ) ; pairedCorrectedTTester0 . setResultMatrix ( ( ResultMatrix ) resultMatrixCSV0 ) ; String [ ] stringArray0 = pairedCorrectedTTester0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunColumn ( ) { return m_RunColumnSet ; }
void test22 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV ( ) ; ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML ( ( ResultMatrix ) resultMatrixCSV0 ) ; pairedTTester0 . setResultMatrix ( ( ResultMatrix ) resultMatrixHTML0 ) ; String [ ] stringArray0 = pairedTTester0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunColumn ( ) { return m_RunColumnSet ; }
void test23 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; Range range0 = new Range ( "$\bullet$" ) ; pairedTTester0 . setDatasetKeyColumns ( range0 ) ; String [ ] stringArray0 = pairedTTester0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowStdDevs ( ) { return m_ShowStdDevs ; }
void test24 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "8034" ; stringArray0 [ 1 ] = "8034" ; pairedCorrectedTTester0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test25 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; Range range0 = new Range ( "$\bullet$" ) ; pairedTTester0 . setResultsetKeyColumns ( range0 ) ; String [ ] stringArray0 = pairedTTester0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test26 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSortColumnName ( ) { if ( getSortColumn ( ) = = - 1 ) return " - " ; else return m_Instances . attribute ( getSortColumn ( ) ) . name ( ) ; }
void test27 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; String string0 = pairedTTester0 . getSortColumnName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoldColumn ( ) { return m_FoldColumn ; }
void test28 ( ) throws Throwable { PairedTTester pairedTTester0 = new PairedTTester ( ) ; pairedTTester0 . setSortColumn ( ( - 1132 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSignificanceLevel ( ) { return m_SignificanceLevel ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setClassifierName ( String newClassifierName ) throws Exception { try { setClassifier ( ( Classifier ) Class . forName ( newClassifierName ) . newInstance ( ) ) ; } catch ( Exception ex ) { throw new Exception ( "Can't find Classifier with class name : " + newClassifierName ) ; } }
void test2 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test3 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; regressionSplitEvaluator0 . setClassifier ( ( Classifier ) null ) ; Enumeration < Object > enumeration0 = regressionSplitEvaluator0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test11 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOptions ( String [ ] options ) throws Exception { setDebug ( Utils . getFlag ( 'D' , options ) ) ; }
void test14 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test16 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test18 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test19 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test21 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean getResult ( ) { return m_Result ; }
void test23 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test24 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test25 ( ) throws Throwable { RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { DatabaseResultProducer databaseResultProducer0 = new DatabaseResultProducer ( ) ; InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; Object [ ] objectArray0 = new Object [ 4 ] ; InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { DatabaseResultProducer databaseResultProducer0 = new DatabaseResultProducer ( ) ; InstancesResultListener instancesResultListener0 = new InstancesResultListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { PropertyNode propertyNode0 = new PropertyNode ( ( Object ) "R ; " ) ; String string0 = propertyNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( "R ; " , ( Method ) null , ( Method ) null ) ; PropertyNode propertyNode0 = new PropertyNode ( ( Object ) null , propertyDescriptor0 , ( Class ) null ) ; String string0 = propertyNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { PropertyNode propertyNode0 = new PropertyNode ( ( Object ) "R ; " ) ; String string0 = propertyNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; String string0 = pairedCorrectedTTester0 . getToolTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test1 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; String string0 = pairedCorrectedTTester0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; TechnicalInformation technicalInformation0 = pairedCorrectedTTester0 . getTechnicalInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBibTex ( ) { String result ; Field field ; Vector < Field > list ; int i ; String value ; result = "@" + getType ( ) + " { " + getID ( ) + "" ; / / sort the fields list = new Vector < Field > ( ) ; Enumeration < Field > enm = fields ( ) ; while ( enm . hasMoreElements ( ) ) list . add ( enm . nextElement ( ) ) ; Collections . sort ( list ) ; / / list field = value pairs for ( i = 0 ; i < list . size ( ) ; i + + ) { field = ( Field ) list . get ( i ) ; if ( ! exists ( field ) ) continue ; value = getValue ( field ) ; value = value . replaceAll ( "\\~" , "\\\\~" ) ; result + = " , \n " + field + " = { " + value + " } " ; } result + = "\n } " ; / / additional informations ? Enumeration < TechnicalInformation > enm2 = additional ( ) ; while ( enm2 . hasMoreElements ( ) ) { result + = "\n\n" + ( ( TechnicalInformation ) enm2 . nextElement ( ) ) . toBibTex ( ) ; } return result ; }
void test3 ( ) throws Throwable { PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester ( ) ; String string0 = pairedCorrectedTTester0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return "GNUPlot" ; }
void test0 ( ) throws Throwable { RemoteExperimentEvent remoteExperimentEvent0 = new RemoteExperimentEvent ( false , false , true , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RemoteExperimentEvent ( boolean status , boolean log , boolean finished , String message ) { m_statusMessage = status ; m_logMessage = log ; m_experimentFinished = finished ; m_messageString = message ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test8 ( ) throws Throwable { Double double0 = ExplicitTestsetResultProducer . getTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test24 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test25 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test26 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test28 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test29 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test30 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test31 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test32 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test33 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test34 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test35 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test36 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test37 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test24 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test25 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test26 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; String string0 = instanceQuery0 . customPropsFileTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; CrossValidationSplitResultProducer crossValidationSplitResultProducer0 = new CrossValidationSplitResultProducer ( ) ; File file0 = crossValidationSplitResultProducer0 . getOutputFile ( ) ; instanceQuery0 . setCustomPropsFile ( file0 ) ; String [ ] stringArray0 = instanceQuery0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; String string0 = instanceQuery0 . queryTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test4 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; String string0 = instanceQuery0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test5 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; instanceQuery0 . setQuery ( "\f\"J`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuery ( ) { return m_Query ; }
void test6 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; String string0 = instanceQuery0 . sparseDataTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test7 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; instanceQuery0 . getCustomPropsFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test8 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; String [ ] stringArray0 = instanceQuery0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuery ( ) { return m_Query ; }
void test9 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "Dataset" ; stringArray0 [ 1 ] = "Date_time" ; stringArray0 [ 2 ] = "Date_time" ; stringArray0 [ 3 ] = "Date_time" ; instanceQuery0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test10 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; Enumeration < Object > enumeration0 = instanceQuery0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuery ( ) { return m_Query ; }
void test11 ( ) throws Throwable { InstanceQuery instanceQuery0 = new InstanceQuery ( ) ; instanceQuery0 . setPassword ( "Dataset" ) ; String [ ] stringArray0 = instanceQuery0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSparseData ( ) { return m_CreateSparseData ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . lowerSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; learningRateResultProducer0 . determineColumnConstraints ( ( ResultProducer ) randomSplitResultProducer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . upperSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer ( ) ; learningRateResultProducer0 . postProcess ( ( ResultProducer ) randomSplitResultProducer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String [ ] stringArray0 = learningRateResultProducer0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; Object [ ] objectArray0 = learningRateResultProducer0 . getResultTypes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String [ ] stringArray0 = learningRateResultProducer0 . getResultNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . resultProducerTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 1843 ) ; learningRateResultProducer0 . setInstances ( instances0 ) ; learningRateResultProducer0 . doRunKeys ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . stepSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; learningRateResultProducer0 . postProcess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; learningRateResultProducer0 . setUpperSize ( ( - 2026 ) ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 1843 ) ; learningRateResultProducer0 . setInstances ( instances0 ) ; learningRateResultProducer0 . setStepSize ( 0 ) ; learningRateResultProducer0 . doRunKeys ( ( - 2026 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 1838 ) ; learningRateResultProducer0 . setInstances ( instances0 ) ; learningRateResultProducer0 . doRun ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; learningRateResultProducer0 . preProcess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test24 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; AveragingResultProducer averagingResultProducer0 = ( AveragingResultProducer ) learningRateResultProducer0 . getResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String string0 = learningRateResultProducer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test28 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; Enumeration < Object > enumeration0 = learningRateResultProducer0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test29 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; String [ ] stringArray0 = new String [ 3 ] ; learningRateResultProducer0 . setAdditionalMeasures ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test30 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; Enumeration < Object > enumeration0 = learningRateResultProducer0 . enumerateMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test32 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected ( 372 . 5518162634123 , 372 . 5518162634123 ) ; String string0 = pairedStatsCorrected0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected ( 0 . 9189385332046728 , ( - 250 . 99404866147114 ) ) ; Stats stats0 = pairedStatsCorrected0 . xStats ; stats0 . add ( ( double ) 0 , 1 . 0 ) ; pairedStatsCorrected0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected ( 372 . 5518162634123 , 372 . 5518162634123 ) ; double [ ] doubleArray0 = new double [ 6 ] ; pairedStatsCorrected0 . add ( doubleArray0 , doubleArray0 ) ; pairedStatsCorrected0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected ( 0 . 0 , 9 . 709245791967167 ) ; pairedStatsCorrected0 . add ( 9 . 709245791967167 , 0 . 0 ) ; pairedStatsCorrected0 . add ( 0 . 0 , 0 . 0 ) ; pairedStatsCorrected0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected ( 372 . 5518162634123 , 372 . 5518162634123 ) ; pairedStatsCorrected0 . subtract ( 372 . 5518162634123 , 0 . 0 ) ; pairedStatsCorrected0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected ( 943 . 1680979932378 , 943 . 1680979932378 ) ; pairedStatsCorrected0 . add ( 943 . 1680979932378 , ( double ) 0 ) ; pairedStatsCorrected0 . calculateDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatusMessage ( ) { return m_StatusMessage ; }
void test1 ( ) throws Throwable { RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask ( ) ; Experiment experiment0 = remoteExperimentSubTask0 . getExperiment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Experiment getExperiment ( ) { return m_experiment ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask ( ) ; Experiment experiment0 = new Experiment ( ) ; experiment0 . setRunUpper ( 1 ) ; remoteExperimentSubTask0 . setExperiment ( experiment0 ) ; remoteExperimentSubTask0 . execute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStdDevWidth ( ) { return m_StdDevWidth ; }
void test1 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( 8 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStdDevPrec ( ) { return m_StdDevPrec ; }
void test3 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultStdDevWidth ( ) { return 0 ; }
void test4 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultSignificanceWidth ( ) { return 0 ; }
void test5 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMeanWidth ( ) { return m_MeanWidth ; }
void test6 ( ) throws Throwable { ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toStringMatrix ( ) { StringBuffer result ; String [ ] [ ] cells ; int i ; int n ; String line ; String title ; String generated ; result = new StringBuffer ( ) ; cells = toArray ( ) ; / / generation comment generated = "# generated by WEKA " + Version . VERSION + "\n" ; / / data result . append ( "\n" ) ; result . append ( "##################\n" ) ; result . append ( "# file : plot . dat #\n" ) ; result . append ( "##################\n" ) ; result . append ( generated ) ; result . append ( "# contains the data for the plot\n" ) ; / / key for x - axis result . append ( "\n" ) ; result . append ( "# key for the x - axis\n" ) ; for ( i = 1 ; i < cells . length - 1 ; i + + ) result . append ( "# " + i + " - " + cells [ i ] [ 0 ] + "\n" ) ; / / the data itself result . append ( "\n" ) ; result . append ( "# data for the plot\n" ) ; for ( i = 1 ; i < cells . length - 1 ; i + + ) { result . append ( Integer . toString ( i ) ) ; for ( n = 1 ; n < cells [ i ] . length ; n + + ) { if ( isSignificance ( n ) ) continue ; result . append ( " " ) ; result . append ( Utils . quote ( cells [ i ] [ n ] ) ) ; } result . append ( "\n" ) ; } result . append ( "#######\n" ) ; result . append ( "# end #\n" ) ; result . append ( "#######\n" ) ; / / script result . append ( "\n" ) ; result . append ( "##################\n" ) ; result . append ( "# file : plot . scr #\n" ) ; result . append ( "##################\n" ) ; result . append ( generated ) ; result . append ( "# script to plot the data\n" ) ; result . append ( "\n" ) ; result . append ( "# display it in a window : \n" ) ; result . append ( "set terminal x11\n" ) ; result . append ( "set output\n" ) ; result . append ( "\n" ) ; result . append ( "# to display all data rows : \n" ) ; result . append ( "set xrange [ 0 : " + ( ( cells . length - 2 ) + 1 ) + " ] \n" ) ; result . append ( "\n" ) ; result . append ( "# axis labels , e . g . : \n" ) ; result . append ( "#set xlabel \"Datasets\"\n" ) ; result . append ( "#set ylabel \"Accuracy in %\"\n" ) ; result . append ( "\n" ) ; result . append ( "# the plot commands\n" ) ; n = 1 ; i = 0 ; while ( i < cells [ 0 ] . length - 1 ) { i + + ; if ( isSignificance ( i ) ) continue ; n + + ; / / plot if ( i = = 1 ) line = "plot" ; else line = "replot" ; line + = " \"plot . dat\"" ; / / title title = "title \"" + cells [ 0 ] [ i ] + "\"" ; / / columns line + = " using 1 : " + n ; if ( getShowStdDev ( ) ) { n + + ; i + + ; / / errorbars line + = " : " + n ; } / / options line + = " with" ; if ( getShowStdDev ( ) ) line + = " yerrorbars" ; else line + = " lines" ; line + = " " + title ; result . append ( line + "\n" ) ; } result . append ( "\n" ) ; result . append ( "# generate ps : \n" ) ; result . append ( "#set terminal postscript\n" ) ; result . append ( "#set output \"plot . ps\"\n" ) ; result . append ( "#replot\n" ) ; result . append ( "\n" ) ; result . append ( "# generate png : \n" ) ; result . append ( "#set terminal png size 800 , 600\n" ) ; result . append ( "#set output \"plot . png\"\n" ) ; result . append ( "#replot\n" ) ; result . append ( "\n" ) ; result . append ( "# wait for user to hit < Return > \n" ) ; result . append ( "pause - 1\n" ) ; result . append ( "#######\n" ) ; result . append ( "# end #\n" ) ; result . append ( "#######\n" ) ; return result . toString ( ) ; }
void test7 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDefaultRemoveFilterName ( ) { return false ; }
void test9 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowStdDev ( ) { return m_ShowStdDev ; }
void test10 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( 0 , 1240 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDefaultEnumerateRowNames ( ) { return false ; }
void test11 ( ) throws Throwable { ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCountWidth ( ) { return m_CountWidth ; }
void test12 ( ) throws Throwable { ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMeanPrec ( ) { return m_MeanPrec ; }
void test13 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSignificanceWidth ( ) { return m_SignificanceWidth ; }
void test15 ( ) throws Throwable { ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMeanPrec ( ) { return m_MeanPrec ; }
void test16 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toStringMatrix ( ) { StringBuffer result ; String [ ] [ ] cells ; int i ; int n ; String line ; String title ; String generated ; result = new StringBuffer ( ) ; cells = toArray ( ) ; / / generation comment generated = "# generated by WEKA " + Version . VERSION + "\n" ; / / data result . append ( "\n" ) ; result . append ( "##################\n" ) ; result . append ( "# file : plot . dat #\n" ) ; result . append ( "##################\n" ) ; result . append ( generated ) ; result . append ( "# contains the data for the plot\n" ) ; / / key for x - axis result . append ( "\n" ) ; result . append ( "# key for the x - axis\n" ) ; for ( i = 1 ; i < cells . length - 1 ; i + + ) result . append ( "# " + i + " - " + cells [ i ] [ 0 ] + "\n" ) ; / / the data itself result . append ( "\n" ) ; result . append ( "# data for the plot\n" ) ; for ( i = 1 ; i < cells . length - 1 ; i + + ) { result . append ( Integer . toString ( i ) ) ; for ( n = 1 ; n < cells [ i ] . length ; n + + ) { if ( isSignificance ( n ) ) continue ; result . append ( " " ) ; result . append ( Utils . quote ( cells [ i ] [ n ] ) ) ; } result . append ( "\n" ) ; } result . append ( "#######\n" ) ; result . append ( "# end #\n" ) ; result . append ( "#######\n" ) ; / / script result . append ( "\n" ) ; result . append ( "##################\n" ) ; result . append ( "# file : plot . scr #\n" ) ; result . append ( "##################\n" ) ; result . append ( generated ) ; result . append ( "# script to plot the data\n" ) ; result . append ( "\n" ) ; result . append ( "# display it in a window : \n" ) ; result . append ( "set terminal x11\n" ) ; result . append ( "set output\n" ) ; result . append ( "\n" ) ; result . append ( "# to display all data rows : \n" ) ; result . append ( "set xrange [ 0 : " + ( ( cells . length - 2 ) + 1 ) + " ] \n" ) ; result . append ( "\n" ) ; result . append ( "# axis labels , e . g . : \n" ) ; result . append ( "#set xlabel \"Datasets\"\n" ) ; result . append ( "#set ylabel \"Accuracy in %\"\n" ) ; result . append ( "\n" ) ; result . append ( "# the plot commands\n" ) ; n = 1 ; i = 0 ; while ( i < cells [ 0 ] . length - 1 ) { i + + ; if ( isSignificance ( i ) ) continue ; n + + ; / / plot if ( i = = 1 ) line = "plot" ; else line = "replot" ; line + = " \"plot . dat\"" ; / / title title = "title \"" + cells [ 0 ] [ i ] + "\"" ; / / columns line + = " using 1 : " + n ; if ( getShowStdDev ( ) ) { n + + ; i + + ; / / errorbars line + = " : " + n ; } / / options line + = " with" ; if ( getShowStdDev ( ) ) line + = " yerrorbars" ; else line + = " lines" ; line + = " " + title ; result . append ( line + "\n" ) ; } result . append ( "\n" ) ; result . append ( "# generate ps : \n" ) ; result . append ( "#set terminal postscript\n" ) ; result . append ( "#set output \"plot . ps\"\n" ) ; result . append ( "#replot\n" ) ; result . append ( "\n" ) ; result . append ( "# generate png : \n" ) ; result . append ( "#set terminal png size 800 , 600\n" ) ; result . append ( "#set output \"plot . png\"\n" ) ; result . append ( "#replot\n" ) ; result . append ( "\n" ) ; result . append ( "# wait for user to hit < Return > \n" ) ; result . append ( "pause - 1\n" ) ; result . append ( "#######\n" ) ; result . append ( "# end #\n" ) ; result . append ( "#######\n" ) ; return result . toString ( ) ; }
void test18 ( ) throws Throwable { ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEnumerateRowNames ( ) { return m_EnumerateRowNames ; }
void test19 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( 8 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toStringMatrix ( ) { StringBuffer result ; String [ ] [ ] cells ; int i ; int n ; String line ; String title ; String generated ; result = new StringBuffer ( ) ; cells = toArray ( ) ; / / generation comment generated = "# generated by WEKA " + Version . VERSION + "\n" ; / / data result . append ( "\n" ) ; result . append ( "##################\n" ) ; result . append ( "# file : plot . dat #\n" ) ; result . append ( "##################\n" ) ; result . append ( generated ) ; result . append ( "# contains the data for the plot\n" ) ; / / key for x - axis result . append ( "\n" ) ; result . append ( "# key for the x - axis\n" ) ; for ( i = 1 ; i < cells . length - 1 ; i + + ) result . append ( "# " + i + " - " + cells [ i ] [ 0 ] + "\n" ) ; / / the data itself result . append ( "\n" ) ; result . append ( "# data for the plot\n" ) ; for ( i = 1 ; i < cells . length - 1 ; i + + ) { result . append ( Integer . toString ( i ) ) ; for ( n = 1 ; n < cells [ i ] . length ; n + + ) { if ( isSignificance ( n ) ) continue ; result . append ( " " ) ; result . append ( Utils . quote ( cells [ i ] [ n ] ) ) ; } result . append ( "\n" ) ; } result . append ( "#######\n" ) ; result . append ( "# end #\n" ) ; result . append ( "#######\n" ) ; / / script result . append ( "\n" ) ; result . append ( "##################\n" ) ; result . append ( "# file : plot . scr #\n" ) ; result . append ( "##################\n" ) ; result . append ( generated ) ; result . append ( "# script to plot the data\n" ) ; result . append ( "\n" ) ; result . append ( "# display it in a window : \n" ) ; result . append ( "set terminal x11\n" ) ; result . append ( "set output\n" ) ; result . append ( "\n" ) ; result . append ( "# to display all data rows : \n" ) ; result . append ( "set xrange [ 0 : " + ( ( cells . length - 2 ) + 1 ) + " ] \n" ) ; result . append ( "\n" ) ; result . append ( "# axis labels , e . g . : \n" ) ; result . append ( "#set xlabel \"Datasets\"\n" ) ; result . append ( "#set ylabel \"Accuracy in %\"\n" ) ; result . append ( "\n" ) ; result . append ( "# the plot commands\n" ) ; n = 1 ; i = 0 ; while ( i < cells [ 0 ] . length - 1 ) { i + + ; if ( isSignificance ( i ) ) continue ; n + + ; / / plot if ( i = = 1 ) line = "plot" ; else line = "replot" ; line + = " \"plot . dat\"" ; / / title title = "title \"" + cells [ 0 ] [ i ] + "\"" ; / / columns line + = " using 1 : " + n ; if ( getShowStdDev ( ) ) { n + + ; i + + ; / / errorbars line + = " : " + n ; } / / options line + = " with" ; if ( getShowStdDev ( ) ) line + = " yerrorbars" ; else line + = " lines" ; line + = " " + title ; result . append ( line + "\n" ) ; } result . append ( "\n" ) ; result . append ( "# generate ps : \n" ) ; result . append ( "#set terminal postscript\n" ) ; result . append ( "#set output \"plot . ps\"\n" ) ; result . append ( "#replot\n" ) ; result . append ( "\n" ) ; result . append ( "# generate png : \n" ) ; result . append ( "#set terminal png size 800 , 600\n" ) ; result . append ( "#set output \"plot . png\"\n" ) ; result . append ( "#replot\n" ) ; result . append ( "\n" ) ; result . append ( "# wait for user to hit < Return > \n" ) ; result . append ( "pause - 1\n" ) ; result . append ( "#######\n" ) ; result . append ( "# end #\n" ) ; result . append ( "#######\n" ) ; return result . toString ( ) ; }
void test20 ( ) throws Throwable { ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultStdDevPrec ( ) { return 2 ; }
void test21 ( ) throws Throwable { ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDefaultRemoveFilterName ( ) { return false ; }
void test22 ( ) throws Throwable { ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRemoveFilterName ( ) { return m_RemoveFilterName ; }
void test23 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStdDevWidth ( ) { return m_StdDevWidth ; }
void test24 ( ) throws Throwable { ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultStdDevPrec ( ) { return 2 ; }
void test25 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNameWidth ( ) { return m_RowNameWidth ; }
void test26 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText ( 0 , 1240 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEnumerateColNames ( ) { return m_EnumerateColNames ; }
void test27 ( ) throws Throwable { ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot ( 8 , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRemoveFilterName ( ) { return m_RemoveFilterName ; }
void test28 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultMeanPrec ( ) { return 2 ; }
void test29 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeader ( String key ) { int pos ; pos = m_HeaderKeys . indexOf ( key ) ; if ( pos = = 0 ) return null ; else return ( String ) m_HeaderKeys . get ( pos ) ; }
void test30 ( ) throws Throwable { ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setRanking ( boolean r ) { m_doRank = r ; }
void test0 ( ) throws Throwable { LookAndFeel lookAndFeel0 = new LookAndFeel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setLookAndFeel ( String classname ) { boolean result ; try { UIManager . setLookAndFeel ( classname ) ; result = true ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = false ; } return result ; }
void test1 ( ) throws Throwable { String string0 = LookAndFeel . getSystemLookAndFeel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSystemLookAndFeel ( ) { return UIManager . getSystemLookAndFeelClassName ( ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = LookAndFeel . setLookAndFeel ( "SQCr1 > cMkbIR < , gl_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setLookAndFeel ( String classname ) { boolean result ; try { UIManager . setLookAndFeel ( classname ) ; result = true ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = false ; } return result ; }
void test3 ( ) throws Throwable { boolean boolean0 = LookAndFeel . setLookAndFeel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setLookAndFeel ( String classname ) { boolean result ; try { UIManager . setLookAndFeel ( classname ) ; result = true ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = false ; } return result ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = LookAndFeel . getInstalledLookAndFeels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getInstalledLookAndFeels ( ) { String [ ] result ; LookAndFeelInfo [ ] laf ; int i ; laf = UIManager . getInstalledLookAndFeels ( ) ; result = new String [ laf . length ] ; for ( i = 0 ; i < laf . length ; i + + ) result [ i ] = laf [ i ] . getClassName ( ) ; return result ; }
void test0 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; int int0 = propertySheetPanel0 . editableProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test2 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; propertySheetPanel0 . getAboutPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test3 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; Environment environment0 = new Environment ( ) ; propertySheetPanel0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test4 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; propertySheetPanel0 . setTarget ( ( Object ) propertySheetPanel0 ) ; propertySheetPanel0 . addNotify ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test6 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; JList jList0 = new JList ( ) ; JToolTip jToolTip0 = jList0 . createToolTip ( ) ; propertySheetPanel0 . setTarget ( ( Object ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test7 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; propertySheetPanel0 . setTarget ( ( Object ) " . json . gz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test9 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; propertySheetPanel0 . closingOK ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test10 ( ) throws Throwable { PropertySheetPanel propertySheetPanel0 = new PropertySheetPanel ( ) ; propertySheetPanel0 . closingCancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int editableProperties ( ) { return m_NumEditable ; }
void test0 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ( WekaTaskMonitor ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test1 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor ( ) ; LogPanel logPanel0 = new LogPanel ( wekaTaskMonitor0 , false , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ( WekaTaskMonitor ) null , false , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test5 ( ) throws Throwable { WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor ( ) ; LogPanel logPanel0 = new LogPanel ( wekaTaskMonitor0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test6 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ( WekaTaskMonitor ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test7 ( ) throws Throwable { WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor ( ) ; LogPanel logPanel0 = new LogPanel ( wekaTaskMonitor0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getTimestamp ( ) { Calendar now = Calendar . getInstance ( TimeZone . getTimeZone ( "UTC" ) ) ; double timestamp = now . get ( Calendar . YEAR ) * 10000 + ( now . get ( Calendar . MONTH ) + 1 ) * 100 + now . get ( Calendar . DAY_OF_MONTH ) + now . get ( Calendar . HOUR_OF_DAY ) / 100 . 0 + now . get ( Calendar . MINUTE ) / 10000 . 0 ; return new Double ( timestamp ) ; }
void test0 ( ) throws Throwable { DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer ( ) ; JToolTip jToolTip0 = defaultTableCellRenderer0 . createToolTip ( ) ; Frame frame0 = PropertyDialog . getParentFrame ( ( Container ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Frame getParentFrame ( Container c ) { Frame result ; Container parent ; result = null ; parent = c ; while ( parent ! = null ) { if ( parent instanceof Frame ) { result = ( Frame ) parent ; break ; } else { parent = parent . getParent ( ) ; } } return result ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; JInternalFrame jInternalFrame0 = PropertyDialog . getParentInternalFrame ( ( Container ) jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JInternalFrame getParentInternalFrame ( Container c ) { JInternalFrame result ; Container parent ; result = null ; parent = c ; while ( parent ! = null ) { if ( parent instanceof JInternalFrame ) { result = ( JInternalFrame ) parent ; break ; } else { parent = parent . getParent ( ) ; } } return result ; }
void test2 ( ) throws Throwable { JLayeredPane jLayeredPane0 = new JLayeredPane ( ) ; Dialog dialog0 = PropertyDialog . getParentDialog ( ( Container ) jLayeredPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dialog getParentDialog ( Container c ) { Dialog result ; Container parent ; result = null ; parent = c ; while ( parent ! = null ) { if ( parent instanceof Dialog ) { result = ( Dialog ) parent ; break ; } else { parent = parent . getParent ( ) ; } } return result ; }
void test0 ( ) throws Throwable { InstancesSummaryPanel instancesSummaryPanel0 = new InstancesSummaryPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { InstancesSummaryPanel instancesSummaryPanel0 = new InstancesSummaryPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { InstancesSummaryPanel instancesSummaryPanel0 = new InstancesSummaryPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowZeroInstancesAsUnknown ( ) { return m_showZeroInstancesAsUnknown ; }
void test4 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableHelper jTableHelper0 = new JTableHelper ( jTable0 ) ; int int0 = jTableHelper0 . calcHeaderWidth ( ( - 1111 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int calcHeaderWidth ( int col ) { return calcHeaderWidth ( getJTable ( ) , col ) ; }
void test5 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableHelper jTableHelper0 = new JTableHelper ( jTable0 ) ; int int0 = jTableHelper0 . calcColumnWidth ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int calcColumnWidth ( int col ) { return calcColumnWidth ( getJTable ( ) , col ) ; }
void test6 ( ) throws Throwable { JTableHelper jTableHelper0 = new JTableHelper ( ( JTable ) null ) ; int int0 = jTableHelper0 . calcHeaderWidth ( ( - 1111 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int calcHeaderWidth ( int col ) { return calcHeaderWidth ( getJTable ( ) , col ) ; }
void test0 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ( Object ) "5" ) ; PropertyText propertyText0 = new PropertyText ( ( PropertyEditor ) propertyEditorSupport0 ) ; propertyText0 . updateUs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test1 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ) ; PropertyText propertyText0 = new PropertyText ( ( PropertyEditor ) propertyEditorSupport0 ) ; propertyText0 . updateEditor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateEditor ( ) { try { m_Editor . setAsText ( getText ( ) ) ; } catch ( IllegalArgumentException ex ) { / / Quietly ignore . } }
void test0 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test1 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test2 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int depth ( ) { return m_Depth ; }
void test3 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test4 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( ) { return m_Current . level ; }
void test5 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeperator ( ) { return m_Seperator ; }
void test6 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "node1 . node1_2 . node1_2_1 . node1_2_1_1 , " , "EY9N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int depth ( ) { return m_Depth ; }
void test7 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void build ( String p , String delim ) throws Exception { StringTokenizer st = new StringTokenizer ( p , delim ) ; / / System . err . println ( "delim : " + delim ) ; while ( st . hasMoreTokens ( ) ) { String property = st . nextToken ( ) . trim ( ) ; if ( ! isHierachic ( property ) ) throw new Exception ( "The given property is not in" + "hierachy structure with seperators ! " ) ; add ( property ) ; } goToRoot ( ) ; }
void test8 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test9 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test10 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "GFL [ %FiL% . ^O { Rw | ) U" , "GFL [ %FiL% . ^O { Rw | ) U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( ) { return m_Current . level ; }
void test11 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeperator ( ) { return m_Seperator ; }
void test12 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int depth ( ) { return m_Depth ; }
void test13 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test14 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test15 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test16 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "GFL [ %FiL% . ^O { Rw | ) U" , "GFL [ %FiL% . ^O { Rw | ) U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test17 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test18 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test19 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( ) { return m_Current . level ; }
void test20 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test21 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "node1 . node1_2 . node1_2_1 . node1_2_1_1 , " , "EY9N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRootReached ( ) { return ( m_Current . parent = = null ) ; }
void test22 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( " [ / ; ^5iAe_f3CG" , " [ / ; ^5iAe_f3CG" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean goToChild ( String value ) { if ( m_Current . children = = null ) / / Leaf return false ; int pos = search ( m_Current . children , value ) ; if ( pos = = - 1 ) return false ; m_Current = ( TreeNode ) m_Current . children . elementAt ( pos ) ; return true ; }
void test23 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean goToChild ( String value ) { if ( m_Current . children = = null ) / / Leaf return false ; int pos = search ( m_Current . children , value ) ; if ( pos = = - 1 ) return false ; m_Current = ( TreeNode ) m_Current . children . elementAt ( pos ) ; return true ; }
void test24 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean goToChild ( String value ) { if ( m_Current . children = = null ) / / Leaf return false ; int pos = search ( m_Current . children , value ) ; if ( pos = = - 1 ) return false ; m_Current = ( TreeNode ) m_Current . children . elementAt ( pos ) ; return true ; }
void test25 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test26 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test27 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test28 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numChildren ( ) { if ( m_Current . children = = null ) / / Leaf return 0 ; return m_Current . children . size ( ) ; }
void test29 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int depth ( ) { return m_Depth ; }
void test30 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test31 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( Instance instance , int index ) { if ( instance . isMissing ( index ) ) return new Double ( Utils . missingValue ( ) ) ; else if ( instance . attribute ( index ) . isNominal ( ) ) return new String ( instance . stringValue ( index ) ) ; else if ( instance . attribute ( index ) . isNumeric ( ) ) return new Double ( instance . value ( index ) ) ; else throw new IllegalArgumentException ( "Unhandled attribute type '" + instance . attribute ( index ) . type ( ) + "' ! " ) ; }
void test32 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( ) { return m_Current . level ; }
void test33 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showTree ( ) { return showNode ( m_Root , null ) ; }
void test34 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int depth ( ) { return m_Depth ; }
void test35 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( "E" , "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeperator ( ) { return m_Seperator ; }
void test36 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeperator ( ) { return m_Seperator ; }
void test37 ( ) throws Throwable { HierarchyPropertyParser hierarchyPropertyParser0 = new HierarchyPropertyParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int depth ( ) { return m_Depth ; }
void test0 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test1 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; propertyEditorSupport0 . firePropertyChange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCustomEditor ( ) { return true ; }
void test2 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ( Object ) "application / x - java - remote - object" ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test3 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ( Object ) "application / x - java - remote - object" ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test4 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ) ; propertyEditorSupport0 . setValue ( ( Object ) "ShortDescription" ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void showPropertyDialog ( ) { if ( m_Editor . getValue ( ) ! = null ) { if ( m_PD = = null ) { int x = getLocationOnScreen ( ) . x ; int y = getLocationOnScreen ( ) . y ; if ( PropertyDialog . getParentDialog ( this ) ! = null ) m_PD = new PropertyDialog ( PropertyDialog . getParentDialog ( this ) , m_Editor , x , y ) ; else m_PD = new PropertyDialog ( PropertyDialog . getParentFrame ( this ) , m_Editor , x , y ) ; m_PD . setVisible ( true ) ; } else { m_PD . setVisible ( true ) ; } / / make sure that m_Backup is correctly initialized ! m_Editor . setValue ( m_Editor . getValue ( ) ) ; } }
void test5 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ( Object ) "selection - begin - paragraph" ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test6 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test7 ( ) throws Throwable { PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport ( ) ; PropertyPanel propertyPanel0 = new PropertyPanel ( ( PropertyEditor ) propertyEditorSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paintComponent ( Graphics g ) { int i ; int n ; int len ; double scale ; double perc ; Color color ; super . paintComponent ( g ) ; g . setColor ( m_BackgroundColor ) ; g . fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; scale = ( double ) getHeight ( ) / 100 . 0 ; for ( i = 0 ; i < m_History . size ( ) ; i + + ) { perc = m_History . get ( i ) ; / / determine color color = m_DefaultColor ; for ( n = m_Percentages . size ( ) - 1 ; n > = 0 ; n - - ) { if ( perc > = m_Percentages . get ( n ) ) { color = m_Colors . get ( m_Percentages . get ( n ) ) ; break ; } } / / paint line g . setColor ( color ) ; len = ( int ) Math . round ( perc * scale ) ; g . drawLine ( i , getHeight ( ) - 1 , i , getHeight ( ) - len ) ; } }
void test0 ( ) throws Throwable { MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMonitoring ( ) { return m_Monitor . isMonitoring ( ) ; }
void test1 ( ) throws Throwable { MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMonitoring ( ) { return m_Monitor . isMonitoring ( ) ; }
void test2 ( ) throws Throwable { MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel ( ) ; Point point0 = memoryUsagePanel0 . getFrameLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) { return m_x ; }
void test3 ( ) throws Throwable { MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return m_id ; }
void test4 ( ) throws Throwable { MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test0 ( ) throws Throwable { JListHelper jListHelper0 = new JListHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; defaultListModel0 . setSize ( 6 ) ; jList0 . addSelectionInterval ( 1 , 0 ) ; JListHelper . moveBottom ( jList0 ) ; JListHelper . moveItems ( jList0 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveItems ( JList list , int moveby , int direction ) { int [ ] indices ; int i ; Object o ; DefaultListModel model ; model = ( DefaultListModel ) list . getModel ( ) ; switch ( direction ) { case MOVE_UP : indices = list . getSelectedIndices ( ) ; for ( i = 0 ; i < indices . length ; i + + ) { if ( indices [ i ] = = 0 ) continue ; o = model . remove ( indices [ i ] ) ; indices [ i ] - = moveby ; model . insertElementAt ( o , indices [ i ] ) ; } list . setSelectedIndices ( indices ) ; break ; case MOVE_DOWN : indices = list . getSelectedIndices ( ) ; for ( i = indices . length - 1 ; i > = 0 ; i - - ) { if ( indices [ i ] = = model . getSize ( ) - 1 ) continue ; o = model . remove ( indices [ i ] ) ; indices [ i ] + = moveby ; model . insertElementAt ( o , indices [ i ] ) ; } list . setSelectedIndices ( indices ) ; break ; default : System . err . println ( JListHelper . class . getName ( ) + " : direction '" + direction + "' is unknown ! " ) ; } }
void test2 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; JListHelper . moveItems ( jList0 , 6 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveItems ( JList list , int moveby , int direction ) { int [ ] indices ; int i ; Object o ; DefaultListModel model ; model = ( DefaultListModel ) list . getModel ( ) ; switch ( direction ) { case MOVE_UP : indices = list . getSelectedIndices ( ) ; for ( i = 0 ; i < indices . length ; i + + ) { if ( indices [ i ] = = 0 ) continue ; o = model . remove ( indices [ i ] ) ; indices [ i ] - = moveby ; model . insertElementAt ( o , indices [ i ] ) ; } list . setSelectedIndices ( indices ) ; break ; case MOVE_DOWN : indices = list . getSelectedIndices ( ) ; for ( i = indices . length - 1 ; i > = 0 ; i - - ) { if ( indices [ i ] = = model . getSize ( ) - 1 ) continue ; o = model . remove ( indices [ i ] ) ; indices [ i ] + = moveby ; model . insertElementAt ( o , indices [ i ] ) ; } list . setSelectedIndices ( indices ) ; break ; default : System . err . println ( JListHelper . class . getName ( ) + " : direction '" + direction + "' is unknown ! " ) ; } }
void test4 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; JListHelper . moveUp ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveUp ( JList list ) { if ( canMoveUp ( list ) ) moveItems ( list , 1 , MOVE_UP ) ; }
void test5 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; defaultListModel0 . setSize ( 6 ) ; jList0 . addSelectionInterval ( 1 , 0 ) ; JListHelper . moveBottom ( jList0 ) ; JListHelper . moveUp ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveUp ( JList list ) { if ( canMoveUp ( list ) ) moveItems ( list , 1 , MOVE_UP ) ; }
void test6 ( ) throws Throwable { JList jList0 = new JList ( ) ; JListHelper . moveDown ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveDown ( JList list ) { if ( canMoveDown ( list ) ) moveItems ( list , 1 , MOVE_DOWN ) ; }
void test7 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; defaultListModel0 . setSize ( 6 ) ; jList0 . addSelectionInterval ( 1 , 0 ) ; JListHelper . moveDown ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveDown ( JList list ) { if ( canMoveDown ( list ) ) moveItems ( list , 1 , MOVE_DOWN ) ; }
void test8 ( ) throws Throwable { JList jList0 = new JList ( ) ; JListHelper . moveTop ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void moveTop ( JList list ) { int [ ] indices ; int diff ; if ( canMoveUp ( list ) ) { indices = list . getSelectedIndices ( ) ; diff = indices [ 0 ] ; moveItems ( list , diff , MOVE_UP ) ; } }
void test10 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; JListHelper . moveBottom ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScrollableTracksViewportHeight ( ) { if ( getParent ( ) instanceof JViewport ) { JViewport parent = ( JViewport ) getParent ( ) ; return ( parent . getHeight ( ) > getPreferredSize ( ) . height ) ; } return false ; }
void test11 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JList jList0 = new JList ( ( ListModel ) defaultListModel0 ) ; jList0 . addSelectionInterval ( 1 , 0 ) ; boolean boolean0 = JListHelper . canMoveUp ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canMoveUp ( JList list ) { boolean result ; int [ ] indices ; result = false ; indices = list . getSelectedIndices ( ) ; if ( indices . length > 0 ) { if ( indices [ 0 ] > 0 ) result = true ; } return result ; }
void test12 ( ) throws Throwable { JList jList0 = new JList ( ) ; jList0 . addSelectionInterval ( 1 , 1 ) ; boolean boolean0 = JListHelper . canMoveDown ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canMoveDown ( JList list ) { boolean result ; int [ ] indices ; result = false ; indices = list . getSelectedIndices ( ) ; if ( indices . length > 0 ) { if ( indices [ indices . length - 1 ] < list . getModel ( ) . getSize ( ) - 1 ) result = true ; } return result ; }
void test0 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "'" ) ; genericPropertiesCreator0 . setInputFilename ( "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInputFilename ( ) { return m_InputFilename ; }
void test1 ( ) throws Throwable { Properties properties0 = GenericPropertiesCreator . getGlobalOutputProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test4 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInputFilename ( ) { return m_InputFilename ; }
void test5 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( ) ; genericPropertiesCreator0 . execute ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInputFilename ( ) { return m_InputFilename ; }
void test6 ( ) throws Throwable { Properties properties0 = GenericPropertiesCreator . getGlobalInputProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test7 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "'" ) ; genericPropertiesCreator0 . loadInputProperties ( ) ; boolean boolean0 = genericPropertiesCreator0 . useDynamic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExplicitPropsFile ( ) { return m_ExplicitPropsFile ; }
void test8 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( ) ; boolean boolean0 = genericPropertiesCreator0 . isValidClassname ( " * ( Uyn - KZX ! S$YwYJaZV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInputFilename ( ) { return m_InputFilename ; }
void test9 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( ) ; boolean boolean0 = genericPropertiesCreator0 . isValidClassname ( "%1rZ0LSExSk%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExplicitPropsFile ( ) { return m_ExplicitPropsFile ; }
void test10 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "'" ) ; boolean boolean0 = genericPropertiesCreator0 . isValidClassname ( "'" , "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExplicitPropsFile ( ) { return m_ExplicitPropsFile ; }
void test11 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "weka . experiment . ResultListener" ) ; boolean boolean0 = genericPropertiesCreator0 . useDynamic ( ) ; boolean boolean1 = genericPropertiesCreator0 . isValidClassname ( "weka . experiment . ResultListener" , "weka . experiment . ResultListener" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilename ( ) { return m_OutputFilename ; }
void test12 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "weka . classifiers . bayes . net . search . SearchAlgorithm" ) ; boolean boolean0 = genericPropertiesCreator0 . useDynamic ( ) ; boolean boolean1 = genericPropertiesCreator0 . isValidClassname ( "weka . classifiers . bayes . net . search . SearchAlgorithm" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilename ( ) { return m_OutputFilename ; }
void test13 ( ) throws Throwable { GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator ( "weka . classifiers . bayes . net . search . SearchAlgorithm" ) ; boolean boolean0 = genericPropertiesCreator0 . useDynamic ( ) ; boolean boolean1 = genericPropertiesCreator0 . isValidClassname ( "weka . classifiers . bayes . net . search . SearchAlgorithm" , "weka . classifiers . bayes . net . search . SearchAlgorithm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilename ( ) { return m_OutputFilename ; }
void test0 ( ) throws Throwable { InputStreamReader inputStreamReader0 = ( InputStreamReader ) Loader . getReader ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Experiment read ( String filename ) throws Exception { Experiment result ; / / KOML ? if ( ( KOML . isPresent ( ) ) & & ( filename . toLowerCase ( ) . endsWith ( KOML . FILE_EXTENSION ) ) ) { result = ( Experiment ) KOML . read ( filename ) ; } / / XML ? else if ( filename . toLowerCase ( ) . endsWith ( " . xml" ) ) { XMLExperiment xml = new XMLExperiment ( ) ; result = ( Experiment ) xml . read ( filename ) ; } / / binary else { FileInputStream fi = new FileInputStream ( filename ) ; ObjectInputStream oi = new ObjectInputStream ( new BufferedInputStream ( fi ) ) ; result = ( Experiment ) oi . readObject ( ) ; oi . close ( ) ; } return result ; }
void test1 ( ) throws Throwable { InputStream inputStream0 = Loader . getInputStream ( "3C9jch a" , "3C9jch a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getInputStream ( String dir , String filename ) { Loader loader ; loader = new Loader ( dir ) ; return loader . getInputStream ( filename ) ; }
void test2 ( ) throws Throwable { URL uRL0 = Loader . getURL ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URL getURL ( String dir , String filename ) { Loader loader ; loader = new Loader ( dir ) ; return loader . getURL ( filename ) ; }
void test3 ( ) throws Throwable { InputStreamReader inputStreamReader0 = ( InputStreamReader ) Loader . getReader ( "~U\"u\"# ; Iyy3 : [ FEk" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Reader getReader ( String dir , String filename ) { Loader loader ; loader = new Loader ( dir ) ; return loader . getReader ( filename ) ; }
void test0 ( ) throws Throwable { AddUserFieldsCustomizer addUserFieldsCustomizer0 = new AddUserFieldsCustomizer ( ) ; addUserFieldsCustomizer0 . closingCancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { AddUserFieldsCustomizer addUserFieldsCustomizer0 = new AddUserFieldsCustomizer ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; addUserFieldsCustomizer0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { AddUserFieldsCustomizer addUserFieldsCustomizer0 = new AddUserFieldsCustomizer ( ) ; addUserFieldsCustomizer0 . dontShowOKCancelButtons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { AddUserFieldsCustomizer addUserFieldsCustomizer0 = new AddUserFieldsCustomizer ( ) ; addUserFieldsCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { AddUserFieldsCustomizer addUserFieldsCustomizer0 = new AddUserFieldsCustomizer ( ) ; addUserFieldsCustomizer0 . setObject ( ( Object ) "PanelUI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; HostListPanel hostListPanel0 = new HostListPanel ( remoteExperiment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; remoteExperiment0 . addRemoteHost ( "Can do efficient internal cross - validation to determine " ) ; HostListPanel hostListPanel0 = new HostListPanel ( remoteExperiment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { HostListPanel hostListPanel0 = new HostListPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { try { if ( e . getSource ( ) = = m_Input ) { String command = m_Input . getText ( ) ; int last = m_CommandHistory . size ( ) - 1 ; if ( ( last < 0 ) | | ! command . equals ( ( String ) m_CommandHistory . elementAt ( last ) ) ) { m_CommandHistory . addElement ( command ) ; saveHistory ( ) ; } m_HistoryPos = m_CommandHistory . size ( ) ; runCommand ( command ) ; m_Input . setText ( "" ) ; } } catch ( Exception ex ) { System . err . println ( ex . getMessage ( ) ) ; } }
void test0 ( ) throws Throwable { RunNumberPanel runNumberPanel0 = new RunNumberPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpper ( ) { int result = 1 ; try { result = Integer . parseInt ( m_UpperText . getText ( ) ) ; } catch ( Exception ex ) { } return Math . max ( 1 , result ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Experiment experiment0 = new Experiment ( ) ; RunNumberPanel runNumberPanel0 = new RunNumberPanel ( experiment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { ResultMatrixPlainText resultMatrixPlainText0 = ( ResultMatrixPlainText ) ExperimenterDefaults . getOutputFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStdDevPrec ( ) { return m_StdDevPrec ; }
void test1 ( ) throws Throwable { String string0 = ExperimenterDefaults . getColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumn ( ) { return get ( "Column" , "Key_Scheme , Key_Scheme_options , Key_Scheme_version_ID" ) ; }
void test2 ( ) throws Throwable { double double0 = ExperimenterDefaults . getTrainPercentage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTrainPercentage ( ) { return Integer . parseInt ( get ( "TrainPercentage" , "66" ) ) ; }
void test3 ( ) throws Throwable { String string0 = ExperimenterDefaults . getDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDestination ( ) { return get ( "Destination" , "ARFF file" ) ; }
void test4 ( ) throws Throwable { String string0 = ExperimenterDefaults . getExperimentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExperimentType ( ) { return get ( "ExperimentType" , "Cross - validation" ) ; }
void test5 ( ) throws Throwable { String string0 = ExperimenterDefaults . getComparisonField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComparisonField ( ) { return get ( "ComparisonField" , "percent_correct" ) ; }
void test6 ( ) throws Throwable { ExperimenterDefaults experimenterDefaults0 = new ExperimenterDefaults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDatasetsFirst ( ) { return Boolean . valueOf ( get ( "DatasetsFirst" , "true" ) ) . booleanValue ( ) ; }
void test7 ( ) throws Throwable { Properties properties0 = ExperimenterDefaults . getProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( m_Root . getChildCount ( ) = = 0 ) ; }
void test8 ( ) throws Throwable { String string0 = ExperimenterDefaults . getTester ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTester ( ) { return get ( "Tester" , new PairedCorrectedTTester ( ) . getDisplayName ( ) ) ; }
void test9 ( ) throws Throwable { int int0 = ExperimenterDefaults . getRepetitions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRepetitions ( ) { return Integer . parseInt ( get ( "Repetitions" , "10" ) ) ; }
void test10 ( ) throws Throwable { String string0 = ExperimenterDefaults . getExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( ) { return get ( "Extension" , " . exp" ) ; }
void test11 ( ) throws Throwable { int int0 = ExperimenterDefaults . getFolds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test12 ( ) throws Throwable { double double0 = ExperimenterDefaults . getSignificance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSignificance ( int col , int row ) { if ( ( col > = 0 ) & & ( col < getColCount ( ) ) & & ( row > = 0 ) & & ( row < getRowCount ( ) ) ) return m_Significance [ row ] [ col ] ; else return SIGNIFICANCE_TIE ; }
void test13 ( ) throws Throwable { boolean boolean0 = ExperimenterDefaults . getDatasetsFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDatasetsFirst ( ) { return Boolean . valueOf ( get ( "DatasetsFirst" , "true" ) ) . booleanValue ( ) ; }
void test14 ( ) throws Throwable { boolean boolean0 = ExperimenterDefaults . getUseClassification ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseClassification ( ) { return Boolean . valueOf ( get ( "UseClassification" , "true" ) ) . booleanValue ( ) ; }
void test15 ( ) throws Throwable { String string0 = ExperimenterDefaults . getSorting ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSorting ( ) { return get ( "Sorting" , "" ) ; }
void test16 ( ) throws Throwable { boolean boolean0 = ExperimenterDefaults . getUseRelativePaths ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseRelativePaths ( ) { return Boolean . valueOf ( get ( "UseRelativePaths" , "false" ) ) . booleanValue ( ) ; }
void test17 ( ) throws Throwable { String string0 = ExperimenterDefaults . getRow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRow ( ) { return get ( "Row" , "Key_Dataset" ) ; }
void test18 ( ) throws Throwable { File file0 = ExperimenterDefaults . getInitialDatasetsDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyNode [ ] getPath ( ) { PropertyNode [ ] result = new PropertyNode [ m_ResultPath . length - 1 ] ; for ( int i = 0 ; i < result . length ; i + + ) { result [ i ] = ( PropertyNode ) ( ( DefaultMutableTreeNode ) m_ResultPath [ i + 1 ] ) . getUserObject ( ) ; } return result ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RunPanel runPanel0 = new RunPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RemoteExperiment remoteExperiment0 = new RemoteExperiment ( ) ; RunPanel runPanel0 = new RunPanel ( ( Experiment ) remoteExperiment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { RunPanel runPanel0 = new RunPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RunPanel runPanel0 = new RunPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { RunPanel runPanel0 = new RunPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; int int0 = classifierErrorsPlotInstances0 . getClassIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test1 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . getClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test3 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . setEvaluation ( ( Evaluation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test4 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test5 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . getEvaluation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test6 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; boolean boolean0 = classifierErrorsPlotInstances0 . getSaveForVisualization ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test7 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . cleanUp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test10 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "z~" , arrayList0 , 1687 ) ; double [ ] [ ] doubleArray0 = new double [ 4 ] [ 2 ] ; classifierErrorsPlotInstances0 . process ( instances0 , doubleArray0 , ( Evaluation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test11 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 124 ) ; double [ ] [ ] doubleArray0 = new double [ 1 ] [ 2 ] ; int [ ] intArray0 = new int [ 14 ] ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( ( double ) 124 , intArray0 , 0 ) ; instances0 . add ( ( Instance ) binarySparseInstance0 ) ; classifierErrorsPlotInstances0 . process ( instances0 , doubleArray0 , ( Evaluation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test12 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . scaleNumericPredictions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test14 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test16 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test1 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . cleanUp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test2 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test3 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; Enumeration < Object > enumeration0 = classifierErrorsPlotInstances0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test4 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; classifierErrorsPlotInstances0 . getInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test6 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; String [ ] stringArray0 = new String [ 8 ] ; classifierErrorsPlotInstances0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSaveForVisualization ( ) { return m_SaveForVisualization ; }
void test8 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test9 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test0 ( ) throws Throwable { LMT lMT0 = new LMT ( ) ; Capabilities capabilities0 = lMT0 . getCapabilities ( ) ; Explorer . CapabilitiesFilterChangeEvent explorer_CapabilitiesFilterChangeEvent0 = new Explorer . CapabilitiesFilterChangeEvent ( ( Object ) "ToolTipText" , capabilities0 ) ; Capabilities capabilities1 = explorer_CapabilitiesFilterChangeEvent0 . getFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Filter getFilter ( ) { return m_Filter ; }
void test1 ( ) throws Throwable { ClustererAssignmentsPlotInstances clustererAssignmentsPlotInstances0 = new ClustererAssignmentsPlotInstances ( ) ; Clusterer clusterer0 = clustererAssignmentsPlotInstances0 . getClusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Clusterer getClusterer ( ) { return m_Clusterer ; }
void test2 ( ) throws Throwable { ClustererAssignmentsPlotInstances clustererAssignmentsPlotInstances0 = new ClustererAssignmentsPlotInstances ( ) ; ClusterEvaluation clusterEvaluation0 = clustererAssignmentsPlotInstances0 . getClusterEvaluation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClusterEvaluation getClusterEvaluation ( ) { return m_Evaluation ; }
void test9 ( ) throws Throwable { ClustererAssignmentsPlotInstances clustererAssignmentsPlotInstances0 = new ClustererAssignmentsPlotInstances ( ) ; ClusterEvaluation clusterEvaluation0 = new ClusterEvaluation ( ) ; clustererAssignmentsPlotInstances0 . setClusterEvaluation ( clusterEvaluation0 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 844 ) ; Attribute attribute0 = new Attribute ( ( String ) null , instances0 , 844 ) ; instances0 . setClass ( attribute0 ) ; clustererAssignmentsPlotInstances0 . setInstances ( instances0 ) ; clustererAssignmentsPlotInstances0 . finishUp ( ) ; clustererAssignmentsPlotInstances0 . determineFormat ( ) ; PlotData2D plotData2D0 = clustererAssignmentsPlotInstances0 . createPlotData ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test10 ( ) throws Throwable { ClustererAssignmentsPlotInstances clustererAssignmentsPlotInstances0 = new ClustererAssignmentsPlotInstances ( ) ; ClusterEvaluation clusterEvaluation0 = new ClusterEvaluation ( ) ; clustererAssignmentsPlotInstances0 . setClusterEvaluation ( clusterEvaluation0 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 204 ) ; clustererAssignmentsPlotInstances0 . setInstances ( instances0 ) ; clustererAssignmentsPlotInstances0 . determineFormat ( ) ; PlotData2D plotData2D0 = clustererAssignmentsPlotInstances0 . createPlotData ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotNameHTML ( ) { if ( m_plotNameHTML = = null ) { return m_plotName ; } return m_plotNameHTML ; }
void test0 ( ) throws Throwable { VisualizePanel visualizePanel0 = new VisualizePanel ( ) ; Explorer explorer0 = visualizePanel0 . getExplorer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Explorer getExplorer ( ) { return m_Explorer ; }
void test1 ( ) throws Throwable { VisualizePanel visualizePanel0 = new VisualizePanel ( ) ; String string0 = visualizePanel0 . getTabTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTabTitle ( ) { return "Visualize" ; }
void test2 ( ) throws Throwable { VisualizePanel visualizePanel0 = new VisualizePanel ( ) ; String string0 = visualizePanel0 . getTabTitleToolTip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTabTitleToolTip ( ) { return "Explore the data" ; }
void test3 ( ) throws Throwable { VisualizePanel visualizePanel0 = new VisualizePanel ( ) ; visualizePanel0 . setExplorer ( ( Explorer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = ExplorerDefaults . getClassifierErrorsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test1 ( ) throws Throwable { ExplorerDefaults explorerDefaults0 = new ExplorerDefaults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getASTestMode ( ) { return Integer . parseInt ( get ( "ASTestMode" , "0" ) ) ; }
void test2 ( ) throws Throwable { String string0 = ExplorerDefaults . getClassifierSourceCodeClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassifierSourceCodeClass ( ) { return get ( "ClassifierSourceCodeClass" , "Foobar" ) ; }
void test3 ( ) throws Throwable { int int0 = ExplorerDefaults . getClassifierRandomSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassifierRandomSeed ( ) { return Integer . parseInt ( get ( "ClassifierRandomSeed" , "1" ) ) ; }
void test4 ( ) throws Throwable { int int0 = ExplorerDefaults . getClassifierPercentageSplit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassifierPercentageSplit ( ) { return Integer . parseInt ( get ( "ClassifierPercentageSplit" , "66" ) ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClustererStoreClustersForVis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClustererStoreClustersForVis ( ) { return Boolean . parseBoolean ( get ( "ClustererStoreClustersForVis" , "true" ) ) ; }
void test6 ( ) throws Throwable { Object object0 = ExplorerDefaults . getObject ( "WekaClassifier" , "WekaClassifier" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( String property , String defaultValue ) { return getObject ( property , defaultValue , Object . class ) ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = ExplorerDefaults . getTabs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getTabs ( ) { String [ ] result ; String tabs ; / / read and split on comma tabs = get ( "Tabs" , "weka . gui . explorer . ClassifierPanel , weka . gui . explorer . ClustererPanel , weka . gui . explorer . AssociationsPanel , weka . gui . explorer . AttributeSelectionPanel , weka . gui . explorer . VisualizePanel" ) ; result = tabs . split ( " , " ) ; return result ; }
void test8 ( ) throws Throwable { int int0 = ExplorerDefaults . getClassifierTestMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassifierTestMode ( ) { return Integer . parseInt ( get ( "ClassifierTestMode" , "1" ) ) ; }
void test9 ( ) throws Throwable { Object object0 = ExplorerDefaults . getFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Filter getFilter ( ) { return m_Filter ; }
void test10 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierOutputEntropyEvalMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierOutputEntropyEvalMeasures ( ) { return Boolean . parseBoolean ( get ( "ClassifierOutputEntropyEvalMeasures" , "false" ) ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierStorePredictionsForVis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierStorePredictionsForVis ( ) { return Boolean . parseBoolean ( get ( "ClassifierStorePredictionsForVis" , "true" ) ) ; }
void test12 ( ) throws Throwable { int int0 = ExplorerDefaults . getASRandomSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getASRandomSeed ( ) { return Integer . parseInt ( get ( "ASRandomSeed" , "1" ) ) ; }
void test13 ( ) throws Throwable { ClustererAssignmentsPlotInstances clustererAssignmentsPlotInstances0 = ExplorerDefaults . getClustererAssignmentsPlotInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClustererAssignmentsPlotInstances getClustererAssignmentsPlotInstances ( ) { ClustererAssignmentsPlotInstances result ; String classname ; String [ ] options ; try { options = Utils . splitOptions ( get ( "ClustererAssignmentsPlotInstances" , "weka . gui . explorer . ClustererAssignmentsPlotInstances" ) ) ; classname = options [ 0 ] ; options [ 0 ] = "" ; result = ( ClustererAssignmentsPlotInstances ) Utils . forName ( ClustererAssignmentsPlotInstances . class , classname , options ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = new ClustererAssignmentsPlotInstances ( ) ; } return result ; }
void test14 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierOutputPredictions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierOutputPredictions ( ) { return Boolean . parseBoolean ( get ( "ClassifierOutputPredictions" , "false" ) ) ; }
void test15 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierCostSensitiveEval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierCostSensitiveEval ( ) { return Boolean . parseBoolean ( get ( "ClassifierCostSensitiveEval" , "false" ) ) ; }
void test16 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierOutputModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierOutputModel ( ) { return Boolean . parseBoolean ( get ( "ClassifierOutputModel" , "true" ) ) ; }
void test17 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierOutputConfusionMatrix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierOutputConfusionMatrix ( ) { return Boolean . parseBoolean ( get ( "ClassifierOutputConfusionMatrix" , "true" ) ) ; }
void test18 ( ) throws Throwable { Properties properties0 = ExplorerDefaults . getProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test19 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierPreserveOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierPreserveOrder ( ) { return Boolean . parseBoolean ( get ( "ClassifierPreserveOrder" , "false" ) ) ; }
void test21 ( ) throws Throwable { int int0 = ExplorerDefaults . getClustererTestMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClustererTestMode ( ) { return Integer . parseInt ( get ( "ClustererTestMode" , "3" ) ) ; }
void test22 ( ) throws Throwable { String string0 = ExplorerDefaults . getInitialDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInitialDirectory ( ) { String result ; result = get ( "InitialDirectory" , "%c" ) ; result = result . replaceAll ( "%t" , System . getProperty ( "java . io . tmpdir" ) ) ; result = result . replaceAll ( "%h" , System . getProperty ( "user . home" ) ) ; result = result . replaceAll ( "%c" , System . getProperty ( "user . dir" ) ) ; result = result . replaceAll ( "%%" , System . getProperty ( "%" ) ) ; return result ; }
void test23 ( ) throws Throwable { int int0 = ExplorerDefaults . getClassifierCrossvalidationFolds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassifierCrossvalidationFolds ( ) { return Integer . parseInt ( get ( "ClassifierCrossvalidationFolds" , "10" ) ) ; }
void test24 ( ) throws Throwable { int int0 = ExplorerDefaults . getASCrossvalidationFolds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getASCrossvalidationFolds ( ) { return Integer . parseInt ( get ( "ASCrossvalidationFolds" , "10" ) ) ; }
void test25 ( ) throws Throwable { int int0 = ExplorerDefaults . getASTestMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getASTestMode ( ) { return Integer . parseInt ( get ( "ASTestMode" , "0" ) ) ; }
void test26 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getInitGenericObjectEditorFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInitGenericObjectEditorFilter ( ) { return Boolean . parseBoolean ( get ( "InitGenericObjectEditorFilter" , "false" ) ) ; }
void test27 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierOutputSourceCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierOutputSourceCode ( ) { return Boolean . parseBoolean ( get ( "ClassifierOutputSourceCode" , "false" ) ) ; }
void test28 ( ) throws Throwable { boolean boolean0 = ExplorerDefaults . getClassifierOutputPerClassStats ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClassifierOutputPerClassStats ( ) { return Boolean . parseBoolean ( get ( "ClassifierOutputPerClassStats" , "true" ) ) ; }
void test29 ( ) throws Throwable { String string0 = ExplorerDefaults . getClassifierOutputAdditionalAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassifierOutputAdditionalAttributes ( ) { return get ( "ClassifierOutputAdditionalAttributes" , "" ) ; }
void test30 ( ) throws Throwable { ZeroR zeroR0 = ( ZeroR ) ExplorerDefaults . getClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test31 ( ) throws Throwable { EM eM0 = ( EM ) ExplorerDefaults . getClusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinStdDev ( ) { return m_minStdDev ; }
void test32 ( ) throws Throwable { Apriori apriori0 = ( Apriori ) ExplorerDefaults . getAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String minMetricTipText ( ) { return "Minimum metric score . Consider only rules with scores higher than " + "this value . " ; }
void test33 ( ) throws Throwable { CfsSubsetEval cfsSubsetEval0 = ( CfsSubsetEval ) ExplorerDefaults . getASEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getLocallyPredictive ( ) { return m_locallyPredictive ; }
void test34 ( ) throws Throwable { BestFirst bestFirst0 = ( BestFirst ) ExplorerDefaults . getASSearch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test0 ( ) throws Throwable { AttributePanelEvent attributePanelEvent0 = new AttributePanelEvent ( false , false , 246 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AttributePanelEvent ( boolean xChange , boolean yChange , int indexVal ) { m_xChange = xChange ; m_yChange = yChange ; m_indexVal = indexVal ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 12 ) , ( - 12 ) , ( OutputStream ) byteArrayOutputStream0 ) ; DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer ( ) ; int [ ] intArray0 = new int [ 9 ] ; Hashtable < DefaultTableModel , Integer > hashtable0 = new Hashtable < DefaultTableModel , Integer > ( ) ; MemoryImageSource memoryImageSource0 = new MemoryImageSource ( ( - 1 ) , 11 , intArray0 , 11 , 11 , ( Hashtable < ? , ? > ) hashtable0 ) ; CropImageFilter cropImageFilter0 = new CropImageFilter ( 0 , 11 , 0 , 22 ) ; FilteredImageSource filteredImageSource0 = new FilteredImageSource ( ( ImageProducer ) memoryImageSource0 , ( ImageFilter ) cropImageFilter0 ) ; Image image0 = defaultTableCellRenderer0 . createImage ( ( ImageProducer ) filteredImageSource0 ) ; boolean boolean0 = postscriptGraphics0 . drawImage ( image0 , 41 , ( - 1850 ) , 6 , 104 , ( Color ) null , ( ImageObserver ) defaultTableCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 0 , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . create ( 0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1213 ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) byteArrayOutputStream0 , true ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 1213 , ( OutputStream ) printStream0 ) ; postscriptGraphics0 . drawRenderedImage ( ( RenderedImage ) null , ( AffineTransform ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test3 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1 ) , ( - 1 ) , ( OutputStream ) byteArrayOutputStream0 ) ; int [ ] intArray0 = new int [ 9 ] ; postscriptGraphics0 . fillPolygon ( intArray0 , intArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 0 , ( OutputStream ) byteArrayOutputStream0 ) ; int [ ] intArray0 = new int [ 8 ] ; postscriptGraphics0 . drawPolyline ( intArray0 , intArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1 ) , ( - 1 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . translate ( ( double ) ( - 1 ) , ( double ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FilterOutputStream filterOutputStream0 = new FilterOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1072 ) , ( - 1093 ) , ( OutputStream ) filterOutputStream0 ) ; AlphaComposite alphaComposite0 = AlphaComposite . Clear ; postscriptGraphics0 . setComposite ( ( Composite ) alphaComposite0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GraphicsConfiguration getDeviceConfiguration ( ) { GraphicsEnvironment ge = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice gd = ge . getDefaultScreenDevice ( ) ; return ( gd . getDefaultConfiguration ( ) ) ; }
void test11 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 0 , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . setBackground ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test13 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 2 ) , ( - 1750 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . fillOval ( ( - 1750 ) , 0 , 1846 , 1347 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test14 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1819 ) , ( - 1 ) , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FilterOutputStream filterOutputStream0 = new FilterOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1072 ) , ( - 1093 ) , ( OutputStream ) filterOutputStream0 ) ; postscriptGraphics0 . drawArc ( ( - 1093 ) , ( - 1093 ) , ( - 1093 ) , ( - 1072 ) , 1 , ( - 12 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test16 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FilterOutputStream filterOutputStream0 = new FilterOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1072 ) , ( - 1093 ) , ( OutputStream ) filterOutputStream0 ) ; postscriptGraphics0 . getComposite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test19 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test21 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 12 ) , ( - 12 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . drawRoundRect ( 1 , 820 , ( - 12 ) , ( - 12 ) , 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FilterOutputStream filterOutputStream0 = new FilterOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1072 ) , ( - 1093 ) , ( OutputStream ) filterOutputStream0 ) ; postscriptGraphics0 . getClipRect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test23 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1 ) , ( - 1 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . drawString ( "% ! PS - Adobe - 3 . 0 EPSF - 3 . 0\n%%BoundingBox : 0 0 - 1 - 1\n%%CreationDate : Tue Jul 02 05 : 13 : 30 BST 2013\n / Oval { % x y w h filled\ngsave\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled { 0 0 moveto } if\n0 0 w 2 div 0 360 arc\nfilled { closepath fill } { stroke } ifelse grestore } bind def\n / Rect { % x y w h filled\n / filled exch def / h exch def / w exch def / y exch def / x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled { fill } { stroke } ifelse } bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n / ( Monospaced . plain ) findfont\n11 scalefont setfont\n0 . 0 0 . 0 0 . 0 setrgbcolor\n" , 0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test24 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1 ) , ( - 1 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . shear ( ( double ) ( - 1 ) , ( - 1892 . 41802215974 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test25 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FilterOutputStream filterOutputStream0 = new FilterOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1072 ) , ( - 1093 ) , ( OutputStream ) filterOutputStream0 ) ; postscriptGraphics0 . drawString ( ( AttributedCharacterIterator ) null , ( - 1 ) , 178 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test27 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 0 , ( OutputStream ) byteArrayOutputStream0 ) ; int [ ] intArray0 = new int [ 4 ] ; postscriptGraphics0 . drawPolygon ( intArray0 , intArray0 , ( - 481 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test28 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test29 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 0 , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . getFontRenderContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test30 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test31 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1 ) , ( - 1 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . draw3DRect ( 0 , 0 , ( - 1 ) , 394 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test32 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test33 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 2 ) , ( - 1750 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . fillArc ( ( - 332 ) , ( - 1750 ) , 0 , 6 , 960 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test34 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test35 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 6 , 0 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test36 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test37 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test38 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test39 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test40 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test41 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 1454 , 1454 , ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test42 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 12 ) , ( - 12 ) , ( OutputStream ) byteArrayOutputStream0 ) ; JRadioButton jRadioButton0 = new JRadioButton ( ) ; Rectangle rectangle0 = jRadioButton0 . getVisibleRect ( ) ; postscriptGraphics0 . clip ( ( Shape ) rectangle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test43 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test44 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test46 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1819 ) , ( - 1 ) , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test47 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 12 ) , ( - 12 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . setXORMode ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test48 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test49 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1819 ) , ( - 1 ) , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test50 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test52 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 2 ) , ( - 1750 ) , ( OutputStream ) byteArrayOutputStream0 ) ; postscriptGraphics0 . setClip ( ( - 1071 ) , 1846 , ( - 2 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test54 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1819 ) , ( - 1 ) , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test55 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FilterOutputStream filterOutputStream0 = new FilterOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1072 ) , ( - 1093 ) , ( OutputStream ) filterOutputStream0 ) ; postscriptGraphics0 . rotate ( ( double ) ( - 1072 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test56 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test57 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test58 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 2 ) , ( - 1750 ) , ( OutputStream ) byteArrayOutputStream0 ) ; boolean boolean0 = postscriptGraphics0 . hit ( ( Rectangle ) null , ( Shape ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test60 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 0 , 0 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test61 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 1819 ) , ( - 1 ) , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test62 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test63 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( ( - 12 ) , ( - 12 ) , ( OutputStream ) byteArrayOutputStream0 ) ; JOptionPane jOptionPane0 = new JOptionPane ( ( Object ) null , 0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jOptionPane0 . getFont ( ) ; postscriptGraphics0 . setFont ( ( Font ) fontUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test64 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 41 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test65 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics ( 41 , 0 , ( OutputStream ) byteArrayOutputStream0 ) ; BasicStroke basicStroke0 = new BasicStroke ( ( float ) 563 , 0 , 0 ) ; postscriptGraphics0 . setStroke ( ( Stroke ) basicStroke0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { VisualizePanelEvent visualizePanelEvent0 = new VisualizePanelEvent ( ( FastVector ) null , ( Instances ) null , ( Instances ) null , 809 , 809 ) ; int int0 = visualizePanelEvent0 . getAttribute1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttribute2 ( ) { return m_attrib2 ; }
void test1 ( ) throws Throwable { VisualizePanelEvent visualizePanelEvent0 = new VisualizePanelEvent ( ( FastVector ) null , ( Instances ) null , ( Instances ) null , 809 , 809 ) ; visualizePanelEvent0 . getInstances1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttribute1 ( ) { return m_attrib1 ; }
void test2 ( ) throws Throwable { VisualizePanelEvent visualizePanelEvent0 = new VisualizePanelEvent ( ( FastVector ) null , ( Instances ) null , ( Instances ) null , 809 , 809 ) ; int int0 = visualizePanelEvent0 . getAttribute2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttribute1 ( ) { return m_attrib1 ; }
void test3 ( ) throws Throwable { VisualizePanelEvent visualizePanelEvent0 = new VisualizePanelEvent ( ( FastVector ) null , ( Instances ) null , ( Instances ) null , 809 , 809 ) ; visualizePanelEvent0 . getInstances2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttribute1 ( ) { return m_attrib1 ; }
void test0 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinX ( ) { return m_minX ; }
void test2 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPlotCompanion ( Plot2DCompanion p ) { m_plotCompanion = p ; }
void test3 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeAllPlots ( ) { m_plot . removeAllPlots ( ) ; }
void test4 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinY ( ) { return m_minY ; }
void test5 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setColours ( FastVector cols ) { m_colorList = cols ; }
void test6 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setInstances ( Instances instances ) { m_Instances = instances ; }
void test7 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxY ( ) { return m_maxY ; }
void test8 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double convertToAttribY ( double scy ) { double temp = m_YaxisEnd - m_YaxisStart ; double temp2 = ( ( scy - m_YaxisEnd ) * ( m_maxY - m_minY ) ) / temp ; temp2 = - ( temp2 - m_minY ) ; return temp2 ; }
void test9 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PlotData2D getMasterPlot ( ) { return m_masterPlot ; }
void test10 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; double double0 = plot2D0 . getMaxC ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxC ( ) { return m_maxC ; }
void test11 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertToPanelY ( double yval ) { double temp = ( yval - m_minY ) / m_rangeY ; temp = temp * ( double ) m_panelHeight ; temp = m_panelHeight - temp ; return ( int ) temp ; }
void test12 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxX ( ) { return m_maxX ; }
void test13 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double convertToAttribX ( double scx ) { double temp = m_XaxisEnd - m_XaxisStart ; double temp2 = ( ( scx - m_XaxisStart ) * ( m_maxX - m_minX ) ) / temp ; temp2 = temp2 + m_minX ; return temp2 ; }
void test14 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertToPanelX ( double xval ) { double temp = ( xval - m_minX ) / m_rangeX ; temp = temp * ( double ) m_panelWidth ; return ( int ) temp ; }
void test15 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinC ( ) { return m_minC ; }
void test19 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int pturbX ( double xvalP , double xj ) { int xpturb = 0 ; if ( m_JitterVal > 0 ) { xpturb = ( int ) ( ( double ) m_JitterVal * ( xj / 2 . 0 ) ) ; if ( ( ( xvalP + xpturb ) < m_XaxisStart ) | | ( ( xvalP + xpturb ) > m_XaxisEnd ) ) { xpturb * = - 1 ; } } return xpturb ; }
void test20 ( ) throws Throwable { Plot2D plot2D0 = new Plot2D ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int pturbY ( double yvalP , double yj ) { int ypturb = 0 ; if ( m_JitterVal > 0 ) { ypturb = ( int ) ( ( double ) m_JitterVal * ( yj / 2 . 0 ) ) ; if ( ( ( yvalP + ypturb ) < m_YaxisStart ) | | ( ( yvalP + ypturb ) > m_YaxisEnd ) ) { ypturb * = - 1 ; } } return ypturb ; }
void test21 ( ) throws Throwable { Color color0 = new Color ( ( - 1844 ) , true ) ; Color color1 = Plot2D . checkAgainstBackground ( color0 , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color checkAgainstBackground ( Color c , Color background ) { if ( background = = null ) { return c ; } if ( c . equals ( background ) ) { int red = c . getRed ( ) ; int blue = c . getBlue ( ) ; int green = c . getGreen ( ) ; red + = ( red < 128 ) ? ( 255 - red ) / 2 : - ( red / 2 ) ; blue + = ( blue < 128 ) ? ( blue - red ) / 2 : - ( blue / 2 ) ; green + = ( green < 128 ) ? ( 255 - green ) / 2 : - ( green / 2 ) ; c = new Color ( red , green , blue ) ; } return c ; }
void test22 ( ) throws Throwable { Color color0 = Plot2D . checkAgainstBackground ( ( Color ) null , ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color checkAgainstBackground ( Color c , Color background ) { if ( background = = null ) { return c ; } if ( c . equals ( background ) ) { int red = c . getRed ( ) ; int blue = c . getBlue ( ) ; int green = c . getGreen ( ) ; red + = ( red < 128 ) ? ( 255 - red ) / 2 : - ( red / 2 ) ; blue + = ( blue < 128 ) ? ( blue - red ) / 2 : - ( blue / 2 ) ; green + = ( green < 128 ) ? ( 255 - green ) / 2 : - ( green / 2 ) ; c = new Color ( red , green , blue ) ; } return c ; }
void test23 ( ) throws Throwable { Color color0 = Color . yellow ; Color color1 = Color . darkGray ; Color color2 = Plot2D . checkAgainstBackground ( color0 , color1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { BMPWriter bMPWriter0 = new BMPWriter ( ) ; String string0 = bMPWriter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test1 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "`Yw ; DqPg" , true , true , true , true ) ; JInternalFrame . JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0 . getDesktopIcon ( ) ; File file0 = new File ( "`Yw ; DqPg" ) ; BMPWriter bMPWriter0 = new BMPWriter ( ( JComponent ) jInternalFrame_JDesktopIcon0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test2 ( ) throws Throwable { BMPWriter bMPWriter0 = new BMPWriter ( ) ; bMPWriter0 . setBackground ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test4 ( ) throws Throwable { BMPWriter bMPWriter0 = new BMPWriter ( ) ; String string0 = bMPWriter0 . getExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test0 ( ) throws Throwable { JProgressBar jProgressBar0 = new JProgressBar ( ) ; JPEGWriter jPEGWriter0 = new JPEGWriter ( ( JComponent ) jProgressBar0 , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test2 ( ) throws Throwable { JPEGWriter jPEGWriter0 = new JPEGWriter ( ) ; Color color0 = Color . magenta ; jPEGWriter0 . setBackground ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test3 ( ) throws Throwable { JPEGWriter jPEGWriter0 = new JPEGWriter ( ) ; String string0 = jPEGWriter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getQuality ( ) { return m_Quality ; }
void test4 ( ) throws Throwable { JPEGWriter jPEGWriter0 = new JPEGWriter ( ) ; jPEGWriter0 . setQuality ( 1809 . 5177F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test0 ( ) throws Throwable { LegendPanel legendPanel0 = new LegendPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { LegendPanel legendPanel0 = new LegendPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { LegendPanel legendPanel0 = new LegendPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRepaintNotify ( Component c ) { m_Repainters . addElement ( c ) ; }
void test0 ( ) throws Throwable { MatrixPanel matrixPanel0 = new MatrixPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MatrixPanel ( ) { m_rseed . setText ( "1" ) ; / * * Setting up GUI * * / m_selAttrib . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent ae ) { JDialog jd = new JDialog ( ( JFrame ) MatrixPanel . this . getTopLevelAncestor ( ) , "Attribute Selection Panel" , ModalityType . DOCUMENT_MODAL ) ; JPanel jp = new JPanel ( ) ; JScrollPane js = new JScrollPane ( m_attribList ) ; JButton okBt = new JButton ( "OK" ) ; JButton cancelBt = new JButton ( "Cancel" ) ; int [ ] savedSelection = m_attribList . getSelectedIndices ( ) ; okBt . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { jd . dispose ( ) ; } } ) ; cancelBt . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { m_attribList . setSelectedIndices ( savedSelection ) ; jd . dispose ( ) ; } } ) ; jd . addWindowListener ( new WindowAdapter ( ) { void windowClosing ( WindowEvent e ) { m_attribList . setSelectedIndices ( savedSelection ) ; jd . dispose ( ) ; } } ) ; jp . add ( okBt ) ; jp . add ( cancelBt ) ; jd . getContentPane ( ) . add ( js , BorderLayout . CENTER ) ; jd . getContentPane ( ) . add ( jp , BorderLayout . SOUTH ) ; if ( js . getPreferredSize ( ) . width < 200 ) jd . setSize ( 250 , 250 ) ; else jd . setSize ( ( int ) js . getPreferredSize ( ) . width + 10 , 250 ) ; jd . setLocation ( m_selAttrib . getLocationOnScreen ( ) . x , m_selAttrib . getLocationOnScreen ( ) . y - jd . getHeight ( ) ) ; jd . setVisible ( true ) ; } } ) ; m_updateBt . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { / / m_selectedAttribs = m_attribList . getSelectedIndices ( ) ; initInternalFields ( ) ; Plot a = m_plotsPanel ; a . setCellSize ( m_plotSize . getValue ( ) ) ; Dimension d = new Dimension ( ( m_selectedAttribs . length ) * ( a . cellSize + a . extpad ) + 2 , ( m_selectedAttribs . length ) * ( a . cellSize + a . extpad ) + 2 ) ; / / System . out . println ( "Size : " + a . cellSize + " Extpad : " + / / a . extpad + " selected : " + / / m_selectedAttribs . length + ' ' + d ) ; a . setPreferredSize ( d ) ; a . setSize ( a . getPreferredSize ( ) ) ; a . setJitter ( m_jitter . getValue ( ) ) ; if ( m_fastScroll . isSelected ( ) & & m_clearOSIPlottedCells ) { m_plottedCells = new boolean [ m_selectedAttribs . length ] [ m_selectedAttribs . length ] ; m_clearOSIPlottedCells = false ; } if ( m_regenerateOSI ) { m_osi = null ; } m_js . revalidate ( ) ; m_cp . setColours ( m_colorList ) ; m_cp . setCindex ( m_classIndex ) ; m_regenerateOSI = false ; repaint ( ) ; } } ) ; m_updateBt . setPreferredSize ( m_selAttrib . getPreferredSize ( ) ) ; m_jitter . addChangeListener ( new ChangeListener ( ) { void stateChanged ( ChangeEvent ce ) { if ( m_fastScroll . isSelected ( ) ) { m_clearOSIPlottedCells = true ; } } } ) ; m_plotSize . addChangeListener ( new ChangeListener ( ) { void stateChanged ( ChangeEvent ce ) { m_plotSizeLb . setText ( "PlotSize : [ " + m_plotSize . getValue ( ) + " ] " ) ; m_plotSizeLb . setPreferredSize ( m_plotLBSizeD ) ; m_jitter . setMaximum ( m_plotSize . getValue ( ) / 5 ) ; / / 20% of cell Size m_regenerateOSI = true ; } } ) ; m_pointSize . addChangeListener ( new ChangeListener ( ) { void stateChanged ( ChangeEvent ce ) { m_pointSizeLb . setText ( "PointSize : [ " + m_pointSize . getValue ( ) + " ] " ) ; m_pointSizeLb . setPreferredSize ( m_pointLBSizeD ) ; datapointSize = m_pointSize . getValue ( ) ; if ( m_fastScroll . isSelected ( ) ) { m_clearOSIPlottedCells = true ; } } } ) ; m_resampleBt . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { JLabel rseedLb = new JLabel ( "Random Seed : " ) ; JTextField rseedTxt = m_rseed ; JLabel percentLb = new JLabel ( "Subsample as" ) ; JLabel percent2Lb = new JLabel ( "% of input : " ) ; JTextField percentTxt = new JTextField ( 5 ) ; percentTxt . setText ( m_resamplePercent . getText ( ) ) ; JButton doneBt = new JButton ( "Done" ) ; JDialog jd = new JDialog ( ( JFrame ) MatrixPanel . this . getTopLevelAncestor ( ) , "Subsample % Panel" , ModalityType . DOCUMENT_MODAL ) { long serialVersionUID = - 269823533147146296L ; void dispose ( ) { m_resamplePercent . setText ( percentTxt . getText ( ) ) ; super . dispose ( ) ; } } ; jd . setDefaultCloseOperation ( JDialog . DISPOSE_ON_CLOSE ) ; doneBt . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent ae ) { jd . dispose ( ) ; } } ) ; GridBagLayout gbl = new GridBagLayout ( ) ; GridBagConstraints gbc = new GridBagConstraints ( ) ; JPanel p1 = new JPanel ( gbl ) ; gbc . anchor = GridBagConstraints . WEST ; gbc . fill = GridBagConstraints . HORIZONTAL ; gbc . insets = new Insets ( 0 , 2 , 2 , 2 ) ; gbc . gridwidth = GridBagConstraints . RELATIVE ; p1 . add ( rseedLb , gbc ) ; gbc . weightx = 0 ; gbc . gridwidth = GridBagConstraints . REMAINDER ; gbc . weightx = 1 ; p1 . add ( rseedTxt , gbc ) ; gbc . insets = new Insets ( 8 , 2 , 0 , 2 ) ; gbc . weightx = 0 ; p1 . add ( percentLb , gbc ) ; gbc . insets = new Insets ( 0 , 2 , 2 , 2 ) ; gbc . gridwidth = GridBagConstraints . RELATIVE ; p1 . add ( percent2Lb , gbc ) ; gbc . gridwidth = GridBagConstraints . REMAINDER ; gbc . weightx = 1 ; p1 . add ( percentTxt , gbc ) ; gbc . insets = new Insets ( 8 , 2 , 2 , 2 ) ; JPanel p3 = new JPanel ( gbl ) ; gbc . fill = GridBagConstraints . HORIZONTAL ; gbc . gridwidth = GridBagConstraints . REMAINDER ; gbc . weightx = 1 ; gbc . weighty = 0 ; p3 . add ( p1 , gbc ) ; gbc . insets = new Insets ( 8 , 4 , 8 , 4 ) ; p3 . add ( doneBt , gbc ) ; jd . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jd . getContentPane ( ) . add ( p3 , BorderLayout . NORTH ) ; jd . pack ( ) ; jd . setLocation ( m_resampleBt . getLocationOnScreen ( ) . x , m_resampleBt . getLocationOnScreen ( ) . y - jd . getHeight ( ) ) ; jd . setVisible ( true ) ; } } ) ; optionsPanel = new JPanel ( new GridBagLayout ( ) ) ; / / all the rest of the panels are in here . JPanel p2 = new JPanel ( new BorderLayout ( ) ) ; / / this has class colour panel JPanel p3 = new JPanel ( new GridBagLayout ( ) ) ; / / this has update and select buttons JPanel p4 = new JPanel ( new GridBagLayout ( ) ) ; / / this has the slider bars and combobox GridBagConstraints gbc = new GridBagConstraints ( ) ; m_plotLBSizeD = m_plotSizeLb . getPreferredSize ( ) ; m_pointLBSizeD = m_pointSizeLb . getPreferredSize ( ) ; m_pointSizeLb . setText ( "PointSize : [ 1 ] " ) ; m_pointSizeLb . setPreferredSize ( m_pointLBSizeD ) ; m_resampleBt . setPreferredSize ( m_selAttrib . getPreferredSize ( ) ) ; gbc . fill = GridBagConstraints . HORIZONTAL ; gbc . anchor = GridBagConstraints . NORTHWEST ; gbc . insets = new Insets ( 2 , 2 , 2 , 2 ) ; p4 . add ( m_plotSizeLb , gbc ) ; gbc . weightx = 1 ; gbc . gridwidth = GridBagConstraints . REMAINDER ; p4 . add ( m_plotSize , gbc ) ; gbc . weightx = 0 ; gbc . gridwidth = GridBagConstraints . RELATIVE ; p4 . add ( m_pointSizeLb , gbc ) ; gbc . weightx = 1 ; gbc . gridwidth = GridBagConstraints . REMAINDER ; p4 . add ( m_pointSize , gbc ) ; gbc . weightx = 0 ; gbc . gridwidth = GridBagConstraints . RELATIVE ; p4 . add ( new JLabel ( "Jitter : " ) , gbc ) ; gbc . weightx = 1 ; gbc . gridwidth = GridBagConstraints . REMAINDER ; p4 . add ( m_jitter , gbc ) ; p4 . add ( m_classAttrib , gbc ) ; gbc . gridwidth = GridBagConstraints . REMAINDER ; gbc . weightx = 1 ; gbc . fill = GridBagConstraints . NONE ; p3 . add ( m_fastScroll , gbc ) ; p3 . add ( m_updateBt , gbc ) ; p3 . add ( m_selAttrib , gbc ) ; gbc . gridwidth = GridBagConstraints . RELATIVE ; gbc . weightx = 0 ; gbc . fill = GridBagConstraints . VERTICAL ; gbc . anchor = GridBagConstraints . WEST ; p3 . add ( m_resampleBt , gbc ) ; gbc . gridwidth = GridBagConstraints . REMAINDER ; p3 . add ( m_resamplePercent , gbc ) ; p2 . setBorder ( BorderFactory . createTitledBorder ( "Class Colour" ) ) ; p2 . add ( m_cp , BorderLayout . SOUTH ) ; gbc . insets = new Insets ( 8 , 5 , 2 , 5 ) ; gbc . anchor = GridBagConstraints . SOUTHWEST ; gbc . fill = GridBagConstraints . HORIZONTAL ; gbc . weightx = 1 ; gbc . gridwidth = GridBagConstraints . RELATIVE ; optionsPanel . add ( p4 , gbc ) ; gbc . gridwidth = GridBagConstraints . REMAINDER ; optionsPanel . add ( p3 , gbc ) ; optionsPanel . add ( p2 , gbc ) ; m_fastScroll . setSelected ( false ) ; m_fastScroll . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { if ( ! m_fastScroll . isSelected ( ) ) { m_osi = null ; } else { m_plottedCells = new boolean [ m_selectedAttribs . length ] [ m_selectedAttribs . length ] ; } MatrixPanel . this . invalidate ( ) ; MatrixPanel . this . repaint ( ) ; } } ) ; this . addComponentListener ( new ComponentAdapter ( ) { void componentResized ( ComponentEvent cv ) { m_js . setMinimumSize ( new Dimension ( MatrixPanel . this . getWidth ( ) , MatrixPanel . this . getHeight ( ) - optionsPanel . getPreferredSize ( ) . height - 10 ) ) ; jp . setDividerLocation ( MatrixPanel . this . getHeight ( ) - optionsPanel . getPreferredSize ( ) . height - 10 ) ; } } ) ; optionsPanel . setMinimumSize ( new Dimension ( 0 , 0 ) ) ; jp = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , m_js , optionsPanel ) ; jp . setOneTouchExpandable ( true ) ; jp . setResizeWeight ( 1 ) ; this . setLayout ( new BorderLayout ( ) ) ; this . add ( jp , BorderLayout . CENTER ) ; / * * Setting up the initial color list * * / for ( int i = 0 ; i < m_defaultColors . length - 1 ; i + + ) m_colorList . addElement ( m_defaultColors [ i ] ) ; / * * Initializing internal fields and components * * / m_selectedAttribs = m_attribList . getSelectedIndices ( ) ; m_plotsPanel = new Plot ( ) ; m_plotsPanel . setLayout ( null ) ; m_js . getHorizontalScrollBar ( ) . setUnitIncrement ( 10 ) ; m_js . getVerticalScrollBar ( ) . setUnitIncrement ( 10 ) ; m_js . setViewportView ( m_plotsPanel ) ; m_js . setColumnHeaderView ( m_plotsPanel . getColHeader ( ) ) ; m_js . setRowHeaderView ( m_plotsPanel . getRowHeader ( ) ) ; JLabel lb = new JLabel ( " Plot Matrix" ) ; lb . setFont ( f ) ; lb . setForeground ( fontColor ) ; lb . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; m_js . setCorner ( JScrollPane . UPPER_LEFT_CORNER , lb ) ; m_cp . setInstances ( m_data ) ; m_cp . setBorder ( BorderFactory . createEmptyBorder ( 15 , 10 , 10 , 10 ) ) ; m_cp . addRepaintNotify ( m_plotsPanel ) ; / / m_updateBt . doClick ( ) ; / / not until setting up the instances }
void test0 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test1 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gS^" , arrayList0 , 900 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test2 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 1203 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXindex ( ) { return m_xIndex ; }
void test3 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gk" , arrayList0 , 114 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotNameHTML ( ) { if ( m_plotNameHTML = = null ) { return m_plotName ; } return m_plotNameHTML ; }
void test4 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotNameHTML ( ) { if ( m_plotNameHTML = = null ) { return m_plotName ; } return m_plotNameHTML ; }
void test5 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYindex ( ) { return m_yIndex ; }
void test6 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCindex ( ) { return m_cIndex ; }
void test7 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gS^" , arrayList0 , 900 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYindex ( ) { return m_yIndex ; }
void test8 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test9 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gS^" , arrayList0 , 900 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXindex ( ) { return m_xIndex ; }
void test10 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPlotName ( String name ) { m_plotName = name ; }
void test11 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; double [ ] doubleArray0 = new double [ 7 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( double ) 875 , doubleArray0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCindex ( ) { return m_cIndex ; }
void test12 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; double [ ] doubleArray0 = new double [ 14 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( double ) 875 , doubleArray0 ) ; Properties properties0 = new Properties ( ) ; ProtectedProperties protectedProperties0 = new ProtectedProperties ( properties0 ) ; Attribute attribute0 = new Attribute ( "" , protectedProperties0 ) ; arrayList0 . add ( attribute0 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXindex ( ) { return m_xIndex ; }
void test13 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( ( String ) null , arrayList0 , 1203 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXindex ( ) { return m_xIndex ; }
void test14 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gS^" , arrayList0 , 900 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setShapeType ( int [ ] st ) throws Exception { m_shapeType = st ; if ( m_shapeType . length ! = m_plotInstances . numInstances ( ) ) { throw new Exception ( "PlotData2D : Shape type array must have the same " + "number of entries as number of data points ! " ) ; } for ( int i = 0 ; i < st . length ; i + + ) { if ( m_shapeType [ i ] = = Plot2D . ERROR_SHAPE ) { m_shapeSize [ i ] = 3 ; } } }
void test15 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCindex ( ) { return m_cIndex ; }
void test16 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; double [ ] doubleArray0 = new double [ 14 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( double ) 875 , doubleArray0 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test17 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gk" , arrayList0 , 114 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setConnectPoints ( boolean [ ] cp ) throws Exception { m_connectPoints = cp ; if ( m_connectPoints . length ! = m_plotInstances . numInstances ( ) ) { throw new Exception ( "PlotData2D : connect points array must have the " + "same number of entries as number of data points ! " ) ; } m_connectPoints [ 0 ] = false ; }
void test18 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gS^" , arrayList0 , 900 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test19 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYindex ( ) { return m_yIndex ; }
void test20 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; ArrayList < String > arrayList1 = new ArrayList < String > ( ) ; Attribute attribute0 = new Attribute ( "" , ( List < String > ) arrayList1 , 1 ) ; arrayList0 . add ( attribute0 ) ; double [ ] doubleArray0 = new double [ 7 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( double ) 875 , doubleArray0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test21 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 875 ) ; double [ ] doubleArray0 = new double [ 14 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( double ) 875 , doubleArray0 ) ; Properties properties0 = new Properties ( ) ; ProtectedProperties protectedProperties0 = new ProtectedProperties ( properties0 ) ; Attribute attribute0 = new Attribute ( "" , protectedProperties0 ) ; arrayList0 . add ( attribute0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlotName ( ) { return m_plotName ; }
void test0 ( ) throws Throwable { ClassPanel classPanel0 = new ClassPanel ( ( Color ) null ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( " * 8 . 91i * 9C2 } " , false , false , false ) ; Icon icon0 = jInternalFrame0 . getFrameIcon ( ) ; JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem ( " * 8 . 91i * 9C2 } " , icon0 , false ) ; classPanel0 . addRepaintNotify ( ( Component ) jCheckBoxMenuItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRepaintNotify ( Component c ) { m_Repainters . addElement ( c ) ; }
void test1 ( ) throws Throwable { ClassPanel classPanel0 = new ClassPanel ( ) ; classPanel0 . setInstances ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setInstances ( Instances instances ) { m_Instances = instances ; }
void test2 ( ) throws Throwable { ClassPanel classPanel0 = new ClassPanel ( ( Color ) null ) ; Color [ ] colorArray0 = new Color [ 1 ] ; classPanel0 . setDefaultColourList ( colorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDefaultColourList ( Color [ ] list ) { m_DefaultColors = list ; }
void test3 ( ) throws Throwable { ClassPanel classPanel0 = new ClassPanel ( ) ; classPanel0 . setNominal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setNominal ( ) { m_isNumeric = false ; m_HorizontalPad = 0 ; setOn ( true ) ; m_oldWidth = - 9000 ; this . repaint ( ) ; }
void test4 ( ) throws Throwable { ClassPanel classPanel0 = new ClassPanel ( ) ; classPanel0 . addActionListener ( ( ActionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addActionListener ( ActionListener newA ) { m_Listeners . addElement ( newA ) ; }
void test0 ( ) throws Throwable { AttributePanel attributePanel0 = new AttributePanel ( ) ; Color [ ] colorArray0 = new Color [ 1 ] ; attributePanel0 . setDefaultColourList ( colorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDefaultColourList ( Color [ ] list ) { m_DefaultColors = list ; }
void test1 ( ) throws Throwable { AttributePanel attributePanel0 = new AttributePanel ( ) ; attributePanel0 . setCindex ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test2 ( ) throws Throwable { AttributePanel attributePanel0 = new AttributePanel ( ) ; attributePanel0 . setCindex ( 255 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCindex ( int c ) { m_cIndex = c ; determineBounds ( ) ; }
void test3 ( ) throws Throwable { AttributePanel attributePanel0 = new AttributePanel ( ) ; attributePanel0 . setX ( 33 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setX ( int x ) { if ( m_span ! = null ) { m_xIndex = x ; m_span . repaint ( ) ; } }
void test4 ( ) throws Throwable { AttributePanel attributePanel0 = new AttributePanel ( ) ; attributePanel0 . setY ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setY ( int y ) { if ( m_span ! = null ) { m_yIndex = y ; m_span . repaint ( ) ; } }
void test1 ( ) throws Throwable { PNGWriter pNGWriter0 = new PNGWriter ( ) ; String string0 = pNGWriter0 . getExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test2 ( ) throws Throwable { JFormattedTextField jFormattedTextField0 = new JFormattedTextField ( ) ; PNGWriter pNGWriter0 = new PNGWriter ( ( JComponent ) jFormattedTextField0 , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test3 ( ) throws Throwable { PNGWriter pNGWriter0 = new PNGWriter ( ) ; String string0 = pNGWriter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test4 ( ) throws Throwable { PNGWriter pNGWriter0 = new PNGWriter ( ( JComponent ) null ) ; Color color0 = Color . BLUE ; pNGWriter0 . setBackground ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScalingEnabled ( ) { return m_ScalingEnabled ; }
void test0 ( ) throws Throwable { VisualizeUtils visualizeUtils0 = new VisualizeUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Color color0 = Color . BLACK ; Color color1 = VisualizeUtils . processColour ( "white" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test2 ( ) throws Throwable { Color color0 = Color . BLACK ; Color color1 = VisualizeUtils . processColour ( " / , > f" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { Color color0 = Color . orange ; Color color1 = VisualizeUtils . processColour ( "black" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test4 ( ) throws Throwable { Color color0 = Color . ORANGE ; Color color1 = VisualizeUtils . processColour ( "blue" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test5 ( ) throws Throwable { Color color0 = Color . MAGENTA ; Color color1 = VisualizeUtils . processColour ( "cyan" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test6 ( ) throws Throwable { Color color0 = Color . orange ; Color color1 = VisualizeUtils . processColour ( "darkGray" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test7 ( ) throws Throwable { Color color0 = VisualizeUtils . processColour ( "magenta" , ( Color ) null ) ; Color color1 = VisualizeUtils . processColour ( "gray" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test8 ( ) throws Throwable { Color color0 = Color . CYAN ; Color color1 = VisualizeUtils . processColour ( "green" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { Color color0 = Color . MAGENTA ; Color color1 = VisualizeUtils . processColour ( "lightGray" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test10 ( ) throws Throwable { Color color0 = Color . GREEN ; Color color1 = VisualizeUtils . processColour ( "orange" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { Color color0 = Color . magenta ; Color color1 = VisualizeUtils . processColour ( "pink" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test12 ( ) throws Throwable { Color color0 = Color . BLUE ; Color color1 = VisualizeUtils . processColour ( "s ? " , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test13 ( ) throws Throwable { Color color0 = Color . MAGENTA ; Color color1 = VisualizeUtils . processColour ( "yellow" , color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color processColour ( String colourDef , Color defaultColour ) { String colourDefBack = new String ( colourDef ) ; Color retC = defaultColour ; if ( colourDef . indexOf ( " , " ) > = 0 ) { / / Looks like property value is in R , G , B format try { int index = colourDef . indexOf ( " , " ) ; int R = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; index = colourDef . indexOf ( " , " ) ; int G = Integer . parseInt ( colourDef . substring ( 0 , index ) ) ; colourDef = colourDef . substring ( index + 1 , colourDef . length ( ) ) ; int B = Integer . parseInt ( colourDef ) ; / / System . err . println ( R + " " + G + " " + B ) ; retC = new Color ( R , G , B ) ; } catch ( Exception ex ) { System . err . println ( "VisualizeUtils : Problem parsing colour property " + "value ( " + colourDefBack + " ) . " ) ; } } else { / / assume that the string is the name of a default Color . color if ( colourDef . compareTo ( "black" ) = = 0 ) { retC = Color . black ; } else if ( colourDef . compareTo ( "blue" ) = = 0 ) { retC = Color . blue ; } else if ( colourDef . compareTo ( "cyan" ) = = 0 ) { retC = Color . cyan ; } else if ( colourDef . compareTo ( "darkGray" ) = = 0 ) { retC = Color . darkGray ; } else if ( colourDef . compareTo ( "gray" ) = = 0 ) { retC = Color . gray ; } else if ( colourDef . compareTo ( "green" ) = = 0 ) { retC = Color . green ; } else if ( colourDef . compareTo ( "lightGray" ) = = 0 ) { retC = Color . lightGray ; } else if ( colourDef . compareTo ( "magenta" ) = = 0 ) { retC = Color . magenta ; } else if ( colourDef . compareTo ( "orange" ) = = 0 ) { retC = Color . orange ; } else if ( colourDef . compareTo ( "pink" ) = = 0 ) { retC = Color . pink ; } else if ( colourDef . compareTo ( "red" ) = = 0 ) { retC = Color . red ; } else if ( colourDef . compareTo ( "white" ) = = 0 ) { retC = Color . white ; } else if ( colourDef . compareTo ( "yellow" ) = = 0 ) { retC = Color . yellow ; } else { System . err . println ( "VisualizeUtils : colour property name not recognized " + " ( " + colourDefBack + " ) . " ) ; } } return retC ; }
void test0 ( ) throws Throwable { PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ) ; String string0 = postscriptWriter0 . getExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( ) { return get ( "Extension" , " . exp" ) ; }
void test1 ( ) throws Throwable { PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ( JComponent ) null , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return m_Description ; }
void test2 ( ) throws Throwable { PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ( JComponent ) null ) ; postscriptWriter0 . generateOutput ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return m_Description ; }
void test3 ( ) throws Throwable { PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ) ; String string0 = postscriptWriter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return m_Description ; }
void test0 ( ) throws Throwable { JPEGWriter jPEGWriter0 = new JPEGWriter ( ) ; jPEGWriter0 . setScale ( ( double ) 0 , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getXScale ( ) { return m_Printer . getXScale ( ) ; }
void test1 ( ) throws Throwable { PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ) ; double double0 = postscriptWriter0 . getXScale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseCustomDimensions ( ) { return m_UseCustomDimensions ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { JTextArea jTextArea0 = new JTextArea ( 1 , 0 ) ; PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ( JComponent ) jTextArea0 ) ; File file0 = new File ( "eL" ) ; JComponentWriter . toOutput ( ( JComponentWriter ) postscriptWriter0 , ( JComponent ) jTextArea0 , file0 , 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( 1 , 0 ) ; PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ( JComponent ) jTextArea0 ) ; double double0 = postscriptWriter0 . getYScale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCustomHeight ( ) { return m_CustomHeight ; }
void test4 ( ) throws Throwable { PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ) ; postscriptWriter0 . setScale ( 1 . 0 , 1 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCustomHeight ( ) { return m_CustomHeight ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { JPasswordField jPasswordField0 = new JPasswordField ( ) ; JToolTip jToolTip0 = jPasswordField0 . createToolTip ( ) ; PostscriptWriter postscriptWriter0 = new PostscriptWriter ( ( JComponent ) jToolTip0 ) ; File file0 = new File ( ( String ) null , " . 'W" ) ; JComponentWriter . toOutput ( ( JComponentWriter ) postscriptWriter0 , ( JComponent ) jToolTip0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test0 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test1 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAddMatchingEndBlocks ( ) { return m_AddMatchingEndBlocks ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineCommentEnd ( ) { return m_MultiLineCommentEnd ; }
void test3 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuoteDelimiters ( ) { return m_QuoteDelimiters ; }
void test4 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontName ( ) { return m_FontName ; }
void test5 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMultiLineComment ( ) { return m_MultiLineComment ; }
void test6 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBlockEnd ( ) { return m_BlockEnd ; }
void test7 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test8 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAddMatchingEndBlocks ( ) { return m_AddMatchingEndBlocks ; }
void test9 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test10 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test11 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMultiLineComment ( ) { return m_MultiLineComment ; }
void test12 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentationSize ( ) { return m_Indentation . length ( ) ; }
void test13 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineCommentStart ( ) { return m_MultiLineCommentStart ; }
void test14 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBlockEnd ( ) { return m_BlockEnd ; }
void test15 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test16 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBlockEnd ( ) { return m_BlockEnd ; }
void test17 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFontName ( ) { return m_FontName ; }
void test18 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCaseSensitive ( ) { return m_CaseSensitive ; }
void test19 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuoteEscape ( ) { return m_QuoteEscape ; }
void test20 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAddMatchingEndBlocks ( ) { return m_AddMatchingEndBlocks ; }
void test21 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineCommentEnd ( ) { return m_MultiLineCommentEnd ; }
void test22 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test23 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuoteEscape ( ) { return m_QuoteEscape ; }
void test24 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void insertString ( int offset , String str , AttributeSet a ) throws BadLocationException { if ( m_AddMatchingEndBlocks & & ( m_BlockStart . length ( ) > 0 ) & & str . equals ( m_BlockStart ) ) str = addMatchingBlockEnd ( offset ) ; else if ( m_UseBlanks & & str . equals ( "\t" ) ) str = m_Indentation ; super . insertString ( offset , str , a ) ; processChangedLines ( offset , str . length ( ) ) ; }
void test25 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAddMatchingEndBlocks ( ) { return m_AddMatchingEndBlocks ; }
void test26 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void insertString ( int offset , String str , AttributeSet a ) throws BadLocationException { if ( m_AddMatchingEndBlocks & & ( m_BlockStart . length ( ) > 0 ) & & str . equals ( m_BlockStart ) ) str = addMatchingBlockEnd ( offset ) ; else if ( m_UseBlanks & & str . equals ( "\t" ) ) str = m_Indentation ; super . insertString ( offset , str , a ) ; processChangedLines ( offset , str . length ( ) ) ; }
void test27 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test28 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean commentLinesBefore ( String content , int line ) { int offset = m_RootElement . getElement ( line ) . getStartOffset ( ) ; / / Start of comment not found , nothing to do int startDelimiter = - 1 ; if ( getMultiLineComment ( ) ) startDelimiter = lastIndexOf ( content , getMultiLineCommentStart ( ) , offset - 2 ) ; if ( startDelimiter < 0 ) return false ; / / Matching start / end of comment found , nothing to do int endDelimiter = indexOf ( content , getMultiLineCommentEnd ( ) , startDelimiter ) ; if ( endDelimiter < offset & endDelimiter ! = - 1 ) return false ; / / End of comment not found , highlight the lines m_Self . setCharacterAttributes ( startDelimiter , offset - startDelimiter + 1 , DEFAULT_COMMENT , false ) ; return true ; }
void test29 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseBlanks ( ) { return m_UseBlanks ; }
void test30 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMultiLineComment ( ) { return m_MultiLineComment ; }
void test31 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test32 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBlockEnd ( ) { return m_BlockEnd ; }
void test33 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiLineComment ( ) { return m_InsideMultiLineComment ; }
void test34 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBlockStart ( ) { return m_BlockStart ; }
void test35 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAddMatchingEndBlocks ( ) { return m_AddMatchingEndBlocks ; }
void test36 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuoteEscape ( ) { return m_QuoteEscape ; }
void test37 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuoteEscape ( ) { return m_QuoteEscape ; }
void test38 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test39 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSingleLineCommentStart ( ) { return m_SingleLineCommentStart ; }
void test40 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; SyntaxDocument syntaxDocument0 = new SyntaxDocument ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentationSize ( ) { return m_Indentation . length ( ) ; }
void test0 ( ) throws Throwable { DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) defaultStyledDocument0 ) ; String [ ] stringArray0 = new String [ 1 ] ; GroovyScript . GroovyThread groovyScript_GroovyThread0 = new GroovyScript . GroovyThread ( ( Script ) jythonScript0 , stringArray0 ) ; groovyScript_GroovyThread0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test1 ( ) throws Throwable { StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; GroovyScript groovyScript0 = new GroovyScript ( ( Document ) defaultStyledDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean save ( StringBuffer buf ) { if ( buf ! = null ) { JFileChooser fileChooser ; if ( m_lastvisitedDirectory = = null ) { fileChooser = new JFileChooser ( new File ( System . getProperty ( "user . dir" ) ) ) ; } else { fileChooser = new JFileChooser ( m_lastvisitedDirectory ) ; } fileChooser . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; int returnVal = fileChooser . showSaveDialog ( m_parentComponent ) ; if ( returnVal = = JFileChooser . APPROVE_OPTION ) { File sFile = fileChooser . getSelectedFile ( ) ; m_lastvisitedDirectory = sFile . getPath ( ) ; if ( sFile . exists ( ) ) { Object [ ] options = new String [ 4 ] ; options [ 0 ] = "Append" ; options [ 1 ] = "Overwrite" ; options [ 2 ] = "Choose new name" ; options [ 3 ] = "Cancel" ; JOptionPane jop = new JOptionPane ( "File exists" , JOptionPane . QUESTION_MESSAGE , 1 , null , options ) ; JDialog dialog = jop . createDialog ( m_parentComponent , "File query" ) ; dialog . setVisible ( true ) ; Object selectedValue = jop . getValue ( ) ; if ( selectedValue = = null ) { } else { for ( int i = 0 ; i < 4 ; i + + ) { if ( options [ i ] . equals ( selectedValue ) ) { switch ( i ) { / / append case 0 : return saveOverwriteAppend ( buf , sFile , true ) ; / / overwrite case 1 : return saveOverwriteAppend ( buf , sFile , false ) ; / / pick new name case 2 : return save ( buf ) ; / / cancel case 3 : break ; } } } } } else { saveOverwriteAppend ( buf , sFile , false ) ; / / file does not exist } } else { return false ; / / file save canceled } } return false ; / / buffer null }
void test2 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ( Document ) null , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean save ( StringBuffer buf ) { if ( buf ! = null ) { JFileChooser fileChooser ; if ( m_lastvisitedDirectory = = null ) { fileChooser = new JFileChooser ( new File ( System . getProperty ( "user . dir" ) ) ) ; } else { fileChooser = new JFileChooser ( m_lastvisitedDirectory ) ; } fileChooser . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; int returnVal = fileChooser . showSaveDialog ( m_parentComponent ) ; if ( returnVal = = JFileChooser . APPROVE_OPTION ) { File sFile = fileChooser . getSelectedFile ( ) ; m_lastvisitedDirectory = sFile . getPath ( ) ; if ( sFile . exists ( ) ) { Object [ ] options = new String [ 4 ] ; options [ 0 ] = "Append" ; options [ 1 ] = "Overwrite" ; options [ 2 ] = "Choose new name" ; options [ 3 ] = "Cancel" ; JOptionPane jop = new JOptionPane ( "File exists" , JOptionPane . QUESTION_MESSAGE , 1 , null , options ) ; JDialog dialog = jop . createDialog ( m_parentComponent , "File query" ) ; dialog . setVisible ( true ) ; Object selectedValue = jop . getValue ( ) ; if ( selectedValue = = null ) { } else { for ( int i = 0 ; i < 4 ; i + + ) { if ( options [ i ] . equals ( selectedValue ) ) { switch ( i ) { / / append case 0 : return saveOverwriteAppend ( buf , sFile , true ) ; / / overwrite case 1 : return saveOverwriteAppend ( buf , sFile , false ) ; / / pick new name case 2 : return save ( buf ) ; / / cancel case 3 : break ; } } } } } else { saveOverwriteAppend ( buf , sFile , false ) ; / / file does not exist } } else { return false ; / / file save canceled } } return false ; / / buffer null }
void test3 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; ExtensionFileFilter [ ] extensionFileFilterArray0 = groovyScript0 . getFilters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultExtension ( ) { return " . py" ; }
void test4 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; String [ ] stringArray0 = new String [ 7 ] ; GroovyScript . GroovyThread groovyScript_GroovyThread0 = ( GroovyScript . GroovyThread ) groovyScript0 . newThread ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScriptThread newThread ( String [ ] args ) { return new JythonThread ( this , args ) ; }
void test5 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; boolean boolean0 = groovyScript0 . canExecuteScripts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canExecuteScripts ( ) { return Jython . isPresent ( ) ; }
void test6 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; File file0 = new File ( " ) < + DD" , " ) < + DD" ) ; String [ ] stringArray0 = new String [ 10 ] ; groovyScript0 . run ( file0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void run ( ) { while ( true ) { try { StyledDocument doc = m_Output . getStyledDocument ( ) ; doc . insertString ( doc . getLength ( ) , m_Input . readLine ( ) + '\n' , doc . getStyle ( getStyleName ( ) ) ) ; m_Output . setCaretPosition ( doc . getLength ( ) ) ; } catch ( Exception ex ) { try { sleep ( 100 ) ; } catch ( Exception e ) { / / ignored } } } }
void test0 ( ) throws Throwable { ScriptUtils scriptUtils0 = new ScriptUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" ) ; boolean boolean0 = ScriptUtils . save ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" ) ; String string0 = ScriptUtils . load ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String load ( File file ) { StringBuffer result ; BufferedReader reader ; String line ; String newLine ; result = new StringBuffer ( ) ; newLine = System . getProperty ( "line . separator" ) ; reader = null ; try { / / add new content reader = new BufferedReader ( new FileReader ( file ) ) ; while ( ( line = reader . readLine ( ) ) ! = null ) { result . append ( line ) ; result . append ( newLine ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; result = null ; } finally { if ( reader ! = null ) { try { reader . close ( ) ; } catch ( Exception e ) { / / ignored } } } return ( ( result ! = null ) ? result . toString ( ) : null ) ; }
void test0 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; ExtensionFileFilter [ ] extensionFileFilterArray0 = jythonScript0 . getFilters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultExtension ( ) { return " . py" ; }
void test1 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; boolean boolean0 = jythonScript0 . canExecuteScripts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canExecuteScripts ( ) { return Jython . isPresent ( ) ; }
void test2 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; String [ ] stringArray0 = new String [ 7 ] ; JythonScript . JythonThread jythonScript_JythonThread0 = ( JythonScript . JythonThread ) jythonScript0 . newThread ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ( Document ) null , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultExtension ( ) { return " . py" ; }
void test4 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { String result ; if ( m_Document = = null ) return "" ; try { ( m_Document ) { result = m_Document . getText ( 0 , m_Document . getLength ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; result = null ; } return result ; }
void test5 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; File file0 = new File ( "N7jq" ) ; String [ ] stringArray0 = new String [ 6 ] ; jythonScript0 . run ( file0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultExtension ( ) { return " . py" ; }
void test0 ( ) throws Throwable { StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; GroovyScript groovyScript0 = new GroovyScript ( ( Document ) defaultStyledDocument0 ) ; groovyScript0 . setContent ( "_wy , I%S ( 4v . ! ~xase" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { String result ; if ( m_Document = = null ) return "" ; try { ( m_Document ) { result = m_Document . getText ( 0 , m_Document . getLength ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; result = null ; } return result ; }
void test1 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test2 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test3 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test4 ( ) throws Throwable { StringContent stringContent0 = new StringContent ( ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) stringContent0 ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test5 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyScriptFinishedListeners ( ScriptExecutionEvent e ) { Iterator < ScriptExecutionListener > iter ; iter = m_FinishedListeners . iterator ( ) ; while ( iter . hasNext ( ) ) iter . next ( ) . scriptFinished ( e ) ; }
void test6 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test7 ( ) throws Throwable { StringContent stringContent0 = new StringContent ( ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) stringContent0 ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test8 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { GapContent gapContent0 = new GapContent ( ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) gapContent0 ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test10 ( ) throws Throwable { GapContent gapContent0 = new GapContent ( ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) gapContent0 ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test11 ( ) throws Throwable { File file0 = new File ( "" , "\nHelp requested : \n\n - h or - help\n\tDisplays this help screen . \n - s < file > \n\tThe script to execute . \n\nAny additional options are passed on to the script as\ncommand - line parameters . \n\n" ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void runScript ( Script script , String [ ] args ) throws Exception { String tmpStr ; File scriptFile ; Vector < String > options ; int i ; if ( Utils . getFlag ( 'h' , args ) | | Utils . getFlag ( "help" , args ) ) { System . out . println ( makeOptionString ( script ) ) ; } else { / / process options tmpStr = Utils . getOption ( 's' , args ) ; if ( tmpStr . length ( ) = = 0 ) throw new WekaException ( "No script supplied ! " ) ; else scriptFile = new File ( tmpStr ) ; script . setOptions ( args ) ; / / remove empty elements from array options = new Vector < String > ( ) ; for ( i = 0 ; i < args . length ; i + + ) { if ( args [ i ] . length ( ) > 0 ) options . add ( args [ i ] ) ; } / / run script script . run ( scriptFile , options . toArray ( new String [ options . size ( ) ] ) ) ; } }
void test12 ( ) throws Throwable { StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { String result ; if ( m_Document = = null ) return "" ; try { ( m_Document ) { result = m_Document . getText ( 0 , m_Document . getLength ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; result = null ; } return result ; }
void test13 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test14 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test15 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test16 ( ) throws Throwable { PlainDocument plainDocument0 = new PlainDocument ( ) ; File file0 = new File ( "K : Pp [ `zj ) g = zY , '" , "K : Pp [ `zj ) g = zY , '" ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { GapContent gapContent0 = new GapContent ( ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) gapContent0 ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test18 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test19 ( ) throws Throwable { File file0 = new File ( "K : Pp [ `zj ) g = zY , '" , "K : Pp [ `zj ) g = zY , '" ) ; GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test20 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean save ( StringBuffer buf ) { if ( buf ! = null ) { JFileChooser fileChooser ; if ( m_lastvisitedDirectory = = null ) { fileChooser = new JFileChooser ( new File ( System . getProperty ( "user . dir" ) ) ) ; } else { fileChooser = new JFileChooser ( m_lastvisitedDirectory ) ; } fileChooser . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; int returnVal = fileChooser . showSaveDialog ( m_parentComponent ) ; if ( returnVal = = JFileChooser . APPROVE_OPTION ) { File sFile = fileChooser . getSelectedFile ( ) ; m_lastvisitedDirectory = sFile . getPath ( ) ; if ( sFile . exists ( ) ) { Object [ ] options = new String [ 4 ] ; options [ 0 ] = "Append" ; options [ 1 ] = "Overwrite" ; options [ 2 ] = "Choose new name" ; options [ 3 ] = "Cancel" ; JOptionPane jop = new JOptionPane ( "File exists" , JOptionPane . QUESTION_MESSAGE , 1 , null , options ) ; JDialog dialog = jop . createDialog ( m_parentComponent , "File query" ) ; dialog . setVisible ( true ) ; Object selectedValue = jop . getValue ( ) ; if ( selectedValue = = null ) { } else { for ( int i = 0 ; i < 4 ; i + + ) { if ( options [ i ] . equals ( selectedValue ) ) { switch ( i ) { / / append case 0 : return saveOverwriteAppend ( buf , sFile , true ) ; / / overwrite case 1 : return saveOverwriteAppend ( buf , sFile , false ) ; / / pick new name case 2 : return save ( buf ) ; / / cancel case 3 : break ; } } } } } else { saveOverwriteAppend ( buf , sFile , false ) ; / / file does not exist } } else { return false ; / / file save canceled } } return false ; / / buffer null }
void test21 ( ) throws Throwable { StringContent stringContent0 = new StringContent ( ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) stringContent0 ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) throws Exception { m_numOfSamplesPerGenerator = ( int ) Math . pow ( m_samplesBase , m_trainingData . numAttributes ( ) - 3 ) ; m_stopReplotting = true ; if ( m_trainingData = = null ) { throw new Exception ( "No training data set ( BoundaryPanel ) " ) ; } if ( m_classifier = = null ) { throw new Exception ( "No classifier set ( BoundaryPanel ) " ) ; } if ( m_dataGenerator = = null ) { throw new Exception ( "No data generator set ( BoundaryPanel ) " ) ; } if ( m_trainingData . attribute ( m_xAttribute ) . isNominal ( ) | | m_trainingData . attribute ( m_yAttribute ) . isNominal ( ) ) { throw new Exception ( "Visualization dimensions must be numeric " + " ( BoundaryPanel ) " ) ; } computeMinMaxAtts ( ) ; startPlotThread ( ) ; / * if ( m_plotThread = = null ) { m_plotThread = new PlotThread ( ) ; m_plotThread . setPriority ( Thread . MIN_PRIORITY ) ; m_plotThread . start ( ) ; } * / }
void test22 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return ( m_ScriptThread ! = null ) ; }
void test23 ( ) throws Throwable { PlainDocument plainDocument0 = new PlainDocument ( ) ; JythonScript jythonScript0 = new JythonScript ( ( Document ) plainDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test24 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isModified ( ) { return m_Modified ; }
void test0 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; ScriptExecutionEvent . Type scriptExecutionEvent_Type0 = ScriptExecutionEvent . Type . STOPPED ; ScriptExecutionEvent scriptExecutionEvent0 = new ScriptExecutionEvent ( ( Script ) jythonScript0 , scriptExecutionEvent_Type0 , ( Object ) " [ ] " ) ; ScriptExecutionEvent . Type scriptExecutionEvent_Type1 = scriptExecutionEvent0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test1 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; ScriptExecutionEvent . Type scriptExecutionEvent_Type0 = ScriptExecutionEvent . Type . ERROR ; ScriptExecutionEvent scriptExecutionEvent0 = new ScriptExecutionEvent ( ( Script ) jythonScript0 , scriptExecutionEvent_Type0 , ( Object ) "text / plain" ) ; JythonScript jythonScript1 = ( JythonScript ) scriptExecutionEvent0 . getScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; ScriptExecutionEvent . Type scriptExecutionEvent_Type0 = ScriptExecutionEvent . Type . STARTED ; ScriptExecutionEvent scriptExecutionEvent0 = new ScriptExecutionEvent ( ( Script ) jythonScript0 , scriptExecutionEvent_Type0 ) ; Object object0 = scriptExecutionEvent0 . getAdditional ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAdditional ( ) { return m_Additional ; }
void test3 ( ) throws Throwable { GroovyScript groovyScript0 = new GroovyScript ( ) ; ScriptExecutionEvent . Type scriptExecutionEvent_Type0 = ScriptExecutionEvent . Type . STARTED ; ScriptExecutionEvent scriptExecutionEvent0 = new ScriptExecutionEvent ( ( Script ) groovyScript0 , scriptExecutionEvent_Type0 ) ; boolean boolean0 = scriptExecutionEvent0 . hasAdditional ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAdditional ( ) { return ( m_Additional ! = null ) ; }
void test4 ( ) throws Throwable { JythonScript jythonScript0 = new JythonScript ( ) ; ScriptExecutionEvent . Type scriptExecutionEvent_Type0 = ScriptExecutionEvent . Type . STOPPED ; ScriptExecutionEvent scriptExecutionEvent0 = new ScriptExecutionEvent ( ( Script ) jythonScript0 , scriptExecutionEvent_Type0 , ( Object ) " [ ] " ) ; boolean boolean0 = scriptExecutionEvent0 . hasAdditional ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAdditional ( ) { return ( m_Additional ! = null ) ; }
void test0 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean copyToClipboard ( ) { StringSelection selection ; Clipboard clipboard ; if ( m_Info . getSelectedIndices ( ) . length ! = 1 ) return false ; selection = new StringSelection ( ( ( JLabel ) m_Info . getSelectedValue ( ) ) . getText ( ) ) ; clipboard = Toolkit . getDefaultToolkit ( ) . getSystemClipboard ( ) ; clipboard . setContents ( selection , selection ) ; return true ; }
void test2 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { InfoPanel infoPanel0 = new InfoPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNextTabName ( ) { m_NameCounter + + ; return "Query" + m_NameCounter ; }
void test1 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNextTabName ( ) { m_NameCounter + + ; return "Query" + m_NameCounter ; }
void test2 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyListeners ( boolean status , boolean log , boolean finished , String message ) { if ( m_listeners . size ( ) > 0 ) { for ( int i = 0 ; i < m_listeners . size ( ) ; i + + ) { RemoteExperimentListener r = ( RemoteExperimentListener ) ( m_listeners . elementAt ( i ) ) ; r . remoteExperimentStatus ( new RemoteExperimentEvent ( status , log , finished , message ) ) ; } } else { System . err . println ( message ) ; } }
void test3 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNextTabName ( ) { m_NameCounter + + ; return "Query" + m_NameCounter ; }
void test9 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { ResultPanel resultPanel0 = new ResultPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNextTabName ( ) { m_NameCounter + + ; return "Query" + m_NameCounter ; }
void test0 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null ) ; resultSetHelper0 . getColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return m_RowNames . length ; }
void test1 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null ) ; int int0 = resultSetHelper0 . getMaxRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { if ( ! isInitialized ( ) ) return 0 ; else return getModel ( ) . getColumnCount ( ) ; }
void test2 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null ) ; resultSetHelper0 . getResultSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return m_RowNames . length ; }
void test3 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null , 8 ) ; resultSetHelper0 . getCells ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return m_RowNames . length ; }
void test4 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null , ( - 5 ) ) ; resultSetHelper0 . getNumericColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { if ( ! isInitialized ( ) ) return 0 ; else return getModel ( ) . getColumnCount ( ) ; }
void test5 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null ) ; resultSetHelper0 . getColumnClasses ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRows ( ) { return m_MaxRows ; }
void test6 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null ) ; boolean boolean0 = resultSetHelper0 . hasMaxRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRows ( ) { return m_MaxRows ; }
void test7 ( ) throws Throwable { ResultSetHelper resultSetHelper0 = new ResultSetHelper ( ( ResultSet ) null , 1985 ) ; boolean boolean0 = resultSetHelper0 . hasMaxRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRows ( ) { return m_MaxRows ; }
void test8 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 7 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test9 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test10 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test11 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 5 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test12 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test13 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test14 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 2 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test16 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test17 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test18 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test19 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test20 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test21 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test23 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test24 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test25 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 91 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test26 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 92 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test27 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 93 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test28 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( 1111 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test29 ( ) throws Throwable { Class < Object > class0 = ResultSetHelper . typeToClass ( ( - 1934 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class typeToClass ( int type ) { Class result ; switch ( type ) { case Types . BIGINT : result = Long . class ; break ; case Types . BINARY : result = String . class ; break ; case Types . BIT : result = Boolean . class ; break ; case Types . CHAR : result = Character . class ; break ; case Types . DATE : result = java . sql . Date . class ; break ; case Types . DECIMAL : result = Double . class ; break ; case Types . DOUBLE : result = Double . class ; break ; case Types . FLOAT : result = Float . class ; break ; case Types . INTEGER : result = Integer . class ; break ; case Types . LONGVARBINARY : result = String . class ; break ; case Types . LONGVARCHAR : result = String . class ; break ; case Types . NULL : result = String . class ; break ; case Types . NUMERIC : result = Double . class ; break ; case Types . OTHER : result = String . class ; break ; case Types . REAL : result = Double . class ; break ; case Types . SMALLINT : result = Short . class ; break ; case Types . TIME : result = java . sql . Time . class ; break ; case Types . TIMESTAMP : result = java . sql . Timestamp . class ; break ; case Types . TINYINT : result = Short . class ; break ; case Types . VARBINARY : result = String . class ; break ; case Types . VARCHAR : result = String . class ; break ; default : result = null ; } return result ; }
void test30 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 7 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test31 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test32 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test33 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 5 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test34 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test35 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test36 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 2 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test37 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test38 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test39 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test40 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test41 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test42 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test43 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test44 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test45 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test46 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test47 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 91 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test48 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 92 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test49 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 93 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test50 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( 1111 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test51 ( ) throws Throwable { boolean boolean0 = ResultSetHelper . typeIsNumeric ( ( - 1449 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean typeIsNumeric ( int type ) { boolean result ; switch ( type ) { case Types . BIGINT : result = true ; break ; case Types . BINARY : result = false ; case Types . BIT : result = false ; break ; case Types . CHAR : result = false ; break ; case Types . DATE : result = false ; break ; case Types . DECIMAL : result = true ; break ; case Types . DOUBLE : result = true ; break ; case Types . FLOAT : result = true ; break ; case Types . INTEGER : result = true ; break ; case Types . LONGVARBINARY : result = false ; break ; case Types . LONGVARCHAR : result = false ; break ; case Types . NULL : result = false ; break ; case Types . NUMERIC : result = true ; break ; case Types . OTHER : result = false ; break ; case Types . REAL : result = true ; break ; case Types . SMALLINT : result = true ; break ; case Types . TIME : result = false ; break ; case Types . TIMESTAMP : result = true ; break ; case Types . TINYINT : result = true ; break ; case Types . VARBINARY : result = false ; break ; case Types . VARCHAR : result = false ; break ; default : result = false ; } return result ; }
void test0 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { QueryPanel queryPanel0 = new QueryPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; resultSetTableModel0 . setValueAt ( ( Object ) null , ( - 17 ) , ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return m_RowNames . length ; }
void test1 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullAt ( int rowIndex , int columnIndex ) { return ( getValueAt ( rowIndex , columnIndex ) = = null ) ; }
void test2 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 1292 ) ; JTable jTable0 = new JTable ( ) ; resultSetTableModel0 . removeTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return m_RowNames . length ; }
void test3 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { if ( ! isInitialized ( ) ) return false ; else return getModel ( ) . isCellEditable ( mIndices [ rowIndex ] , columnIndex ) ; }
void test4 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; resultSetTableModel0 . finalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { if ( ! isInitialized ( ) ) return 0 ; else return getModel ( ) . getColumnCount ( ) ; }
void test5 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 1292 ) ; JTable jTable0 = new JTable ( ) ; resultSetTableModel0 . addTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addTableModelListener ( TableModelListener l ) { m_Listeners . add ( l ) ; }
void test6 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; Class < Object > class0 = resultSetTableModel0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int columnIndex ) { if ( ! isInitialized ( ) ) return null ; else return getModel ( ) . getColumnClass ( columnIndex ) ; }
void test7 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; String string0 = resultSetTableModel0 . getColumnName ( ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int columnIndex ) { if ( ! isInitialized ( ) ) return null ; else return getModel ( ) . getColumnName ( columnIndex ) ; }
void test8 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; Object object0 = resultSetTableModel0 . getValueAt ( ( - 17 ) , ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int rowIndex , int columnIndex ) { if ( ! isInitialized ( ) ) return null ; else return getModel ( ) . getValueAt ( mIndices [ rowIndex ] , columnIndex ) ; }
void test9 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumericAt ( int columnIndex ) { boolean result ; result = false ; if ( ( columnIndex > = 0 ) & & ( columnIndex < getColumnCount ( ) ) ) { if ( columnIndex = = 0 ) { result = true ; } else { if ( m_Helper . getNumericColumns ( ) = = null ) result = false ; else result = m_Helper . getNumericColumns ( ) [ columnIndex - 1 ] ; } } return result ; }
void test10 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 1292 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumericAt ( int columnIndex ) { boolean result ; result = false ; if ( ( columnIndex > = 0 ) & & ( columnIndex < getColumnCount ( ) ) ) { if ( columnIndex = = 0 ) { result = true ; } else { if ( m_Helper . getNumericColumns ( ) = = null ) result = false ; else result = m_Helper . getNumericColumns ( ) [ columnIndex - 1 ] ; } } return result ; }
void test11 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 1292 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { if ( ! isInitialized ( ) ) return 0 ; else return getModel ( ) . getColumnCount ( ) ; }
void test0 ( ) throws Throwable { InfoPanelCellRenderer infoPanelCellRenderer0 = new InfoPanelCellRenderer ( ) ; KeyListener [ ] keyListenerArray0 = infoPanelCellRenderer0 . getKeyListeners ( ) ; JList jList0 = new JList ( ( Object [ ] ) keyListenerArray0 ) ; InfoPanelCellRenderer infoPanelCellRenderer1 = ( InfoPanelCellRenderer ) infoPanelCellRenderer0 . getListCellRendererComponent ( jList0 , ( Object ) 0 , 0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( Capability c ) { return m_Capabilities . handles ( c ) ; }
void test1 ( ) throws Throwable { InfoPanelCellRenderer infoPanelCellRenderer0 = new InfoPanelCellRenderer ( ) ; Object [ ] [ ] objectArray0 = new Object [ 5 ] [ 8 ] ; Object [ ] objectArray1 = new Object [ 3 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray1 ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; DefaultComboBoxModel defaultComboBoxModel0 = new DefaultComboBoxModel ( vector0 ) ; JList jList0 = new JList ( ( ListModel ) defaultComboBoxModel0 ) ; InfoPanelCellRenderer infoPanelCellRenderer1 = ( InfoPanelCellRenderer ) infoPanelCellRenderer0 . getListCellRendererComponent ( jList0 , ( Object ) infoPanelCellRenderer0 , 0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { DbUtils dbUtils0 = new DbUtils ( ) ; Connection connection0 = dbUtils0 . getConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Connection getConnection ( ) { return m_Connection ; }
void test1 ( ) throws Throwable { DbUtils dbUtils0 = new DbUtils ( ) ; String string0 = dbUtils0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test0 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; ResultSetTable resultSetTable0 = new ResultSetTable ( "'" , "'" , "'" , "'" , resultSetTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) { return m_User ; }
void test1 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null ) ; ResultSetTable resultSetTable0 = new ResultSetTable ( "" , "" , "" , "" , resultSetTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , ( - 2026 ) ) ; ResultSetTable resultSetTable0 = new ResultSetTable ( "IU56M3 . Rhx\"F" , "IU56M3 . Rhx\"F" , " " , "IU56M3 . Rhx\"F" , resultSetTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQuery ( ) { return m_Query ; }
void test0 ( ) throws Throwable { ResultSetTableCellRenderer resultSetTableCellRenderer0 = new ResultSetTableCellRenderer ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTableHeader jTableHeader0 = new JTableHeader ( ) ; DefaultTableColumnModel defaultTableColumnModel0 = ( DefaultTableColumnModel ) jTableHeader0 . getColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; ResultSetTableCellRenderer resultSetTableCellRenderer1 = ( ResultSetTableCellRenderer ) resultSetTableCellRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) "select - all" , false , false , ( - 1150 ) , ( - 1150 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { ResultSetTableModel model ; Component result ; boolean found ; result = super . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; if ( table . getModel ( ) instanceof ResultSetTableModel ) { model = ( ResultSetTableModel ) table . getModel ( ) ; / / normal cell if ( row > = 0 ) { if ( model . isNullAt ( row , column ) ) { setToolTipText ( "NULL" ) ; if ( isSelected ) result . setBackground ( missingColorSelected ) ; else result . setBackground ( missingColor ) ; } else { setToolTipText ( null ) ; if ( isSelected ) result . setBackground ( table . getSelectionBackground ( ) ) ; else result . setBackground ( Color . WHITE ) ; } / / alignment if ( model . isNumericAt ( column ) ) setHorizontalAlignment ( SwingConstants . RIGHT ) ; else setHorizontalAlignment ( SwingConstants . LEFT ) ; } / / header else { setBorder ( UIManager . getBorder ( "TableHeader . cellBorder" ) ) ; setHorizontalAlignment ( SwingConstants . CENTER ) ; if ( table . getColumnModel ( ) . getSelectionModel ( ) . isSelectedIndex ( column ) ) result . setBackground ( UIManager . getColor ( "TableHeader . background" ) . darker ( ) ) ; else result . setBackground ( UIManager . getColor ( "TableHeader . background" ) ) ; } } return result ; }
void test1 ( ) throws Throwable { ResultSetTableCellRenderer resultSetTableCellRenderer0 = new ResultSetTableCellRenderer ( ) ; ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 0 ) ; JTable jTable0 = new JTable ( ( TableModel ) resultSetTableModel0 ) ; resultSetTableCellRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) "anchorSelectionPath" , false , false , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { ResultSetTableModel model ; Component result ; boolean found ; result = super . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; if ( table . getModel ( ) instanceof ResultSetTableModel ) { model = ( ResultSetTableModel ) table . getModel ( ) ; / / normal cell if ( row > = 0 ) { if ( model . isNullAt ( row , column ) ) { setToolTipText ( "NULL" ) ; if ( isSelected ) result . setBackground ( missingColorSelected ) ; else result . setBackground ( missingColor ) ; } else { setToolTipText ( null ) ; if ( isSelected ) result . setBackground ( table . getSelectionBackground ( ) ) ; else result . setBackground ( Color . WHITE ) ; } / / alignment if ( model . isNumericAt ( column ) ) setHorizontalAlignment ( SwingConstants . RIGHT ) ; else setHorizontalAlignment ( SwingConstants . LEFT ) ; } / / header else { setBorder ( UIManager . getBorder ( "TableHeader . cellBorder" ) ) ; setHorizontalAlignment ( SwingConstants . CENTER ) ; if ( table . getColumnModel ( ) . getSelectionModel ( ) . isSelectedIndex ( column ) ) result . setBackground ( UIManager . getColor ( "TableHeader . background" ) . darker ( ) ) ; else result . setBackground ( UIManager . getColor ( "TableHeader . background" ) ) ; } } return result ; }
void test2 ( ) throws Throwable { ResultSetTableCellRenderer resultSetTableCellRenderer0 = new ResultSetTableCellRenderer ( ) ; ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 85 ) ; JTable jTable0 = new JTable ( ( TableModel ) resultSetTableModel0 ) ; resultSetTableCellRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) "anchorSelectionPath" , true , true , ( - 2039 ) , ( - 2039 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { ResultSetTableModel model ; Component result ; boolean found ; result = super . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; if ( table . getModel ( ) instanceof ResultSetTableModel ) { model = ( ResultSetTableModel ) table . getModel ( ) ; / / normal cell if ( row > = 0 ) { if ( model . isNullAt ( row , column ) ) { setToolTipText ( "NULL" ) ; if ( isSelected ) result . setBackground ( missingColorSelected ) ; else result . setBackground ( missingColor ) ; } else { setToolTipText ( null ) ; if ( isSelected ) result . setBackground ( table . getSelectionBackground ( ) ) ; else result . setBackground ( Color . WHITE ) ; } / / alignment if ( model . isNumericAt ( column ) ) setHorizontalAlignment ( SwingConstants . RIGHT ) ; else setHorizontalAlignment ( SwingConstants . LEFT ) ; } / / header else { setBorder ( UIManager . getBorder ( "TableHeader . cellBorder" ) ) ; setHorizontalAlignment ( SwingConstants . CENTER ) ; if ( table . getColumnModel ( ) . getSelectionModel ( ) . isSelectedIndex ( column ) ) result . setBackground ( UIManager . getColor ( "TableHeader . background" ) . darker ( ) ) ; else result . setBackground ( UIManager . getColor ( "TableHeader . background" ) ) ; } } return result ; }
void test3 ( ) throws Throwable { ResultSetTableCellRenderer resultSetTableCellRenderer0 = new ResultSetTableCellRenderer ( ) ; ResultSetTableModel resultSetTableModel0 = new ResultSetTableModel ( ( ResultSet ) null , 80 ) ; JTable jTable0 = new JTable ( ( TableModel ) resultSetTableModel0 ) ; ResultSetTableCellRenderer resultSetTableCellRenderer1 = ( ResultSetTableCellRenderer ) resultSetTableCellRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) "anchorSelectionPath" , true , true , 80 , 80 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { ResultSetTableModel model ; Component result ; boolean found ; result = super . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; if ( table . getModel ( ) instanceof ResultSetTableModel ) { model = ( ResultSetTableModel ) table . getModel ( ) ; / / normal cell if ( row > = 0 ) { if ( model . isNullAt ( row , column ) ) { setToolTipText ( "NULL" ) ; if ( isSelected ) result . setBackground ( missingColorSelected ) ; else result . setBackground ( missingColor ) ; } else { setToolTipText ( null ) ; if ( isSelected ) result . setBackground ( table . getSelectionBackground ( ) ) ; else result . setBackground ( Color . WHITE ) ; } / / alignment if ( model . isNumericAt ( column ) ) setHorizontalAlignment ( SwingConstants . RIGHT ) ; else setHorizontalAlignment ( SwingConstants . LEFT ) ; } / / header else { setBorder ( UIManager . getBorder ( "TableHeader . cellBorder" ) ) ; setHorizontalAlignment ( SwingConstants . CENTER ) ; if ( table . getColumnModel ( ) . getSelectionModel ( ) . isSelectedIndex ( column ) ) result . setBackground ( UIManager . getColor ( "TableHeader . background" ) . darker ( ) ) ; else result . setBackground ( UIManager . getColor ( "TableHeader . background" ) ) ; } } return result ; }
void test0 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 10 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUndoEnabled ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isUndoEnabled ( ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Vf" , arrayList0 , 945 ) ; ArffTableModel arffTableModel0 = new ArffTableModel ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test2 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Vf" , arrayList0 , 945 ) ; ArffTableModel arffTableModel0 = new ArffTableModel ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test3 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 6 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test4 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Vf" , arrayList0 , 945 ) ; ArffTableModel arffTableModel0 = new ArffTableModel ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test5 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test6 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValueAt ( Object aValue , int rowIndex , int columnIndex ) { if ( isInitialized ( ) ) getModel ( ) . setValueAt ( aValue , mIndices [ rowIndex ] , columnIndex ) ; }
void test7 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 9 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "Vf" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test9 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 10 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return m_RowNames . length ; }
void test10 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 6 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowAttributeIndex ( ) { return ( ( ArffTableModel ) getModel ( ) ) . getShowAttributeIndex ( ) ; }
void test11 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test12 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Vf" , arrayList0 , 945 ) ; ArffTableModel arffTableModel0 = new ArffTableModel ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotificationEnabled ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isNotificationEnabled ( ) ; }
void test13 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 3 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotificationEnabled ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isNotificationEnabled ( ) ; }
void test14 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowAttributeIndex ( ) { return ( ( ArffTableModel ) getModel ( ) ) . getShowAttributeIndex ( ) ; }
void test15 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotificationEnabled ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isNotificationEnabled ( ) ; }
void test16 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 10 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { if ( ! isInitialized ( ) ) return 0 ; else return getModel ( ) . getColumnCount ( ) ; }
void test17 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowAttributeIndex ( ) { return ( ( ArffTableModel ) getModel ( ) ) . getShowAttributeIndex ( ) ; }
void test18 ( ) throws Throwable { ArffTableModel arffTableModel0 = new ArffTableModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return ( ( ArffTableModel ) getModel ( ) ) . isReadOnly ( ) ; }
void test19 ( ) throws Throwable { AbstractFileLoader [ ] abstractFileLoaderArray0 = new AbstractFileLoader [ 9 ] ; ArffTableModel arffTableModel0 = new ArffTableModel ( "Vf" , abstractFileLoaderArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowAttributeIndex ( ) { return ( ( ArffTableModel ) getModel ( ) ) . getShowAttributeIndex ( ) ; }
void test0 ( ) throws Throwable { TreeBuild treeBuild0 = new TreeBuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Graphics create ( ) { if ( DEBUG ) m_printstream . println ( "%create" ) ; PostscriptGraphics psg = new PostscriptGraphics ( this ) ; return ( psg ) ; }
void test1 ( ) throws Throwable { TreeBuild treeBuild0 = new TreeBuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Graphics create ( ) { if ( DEBUG ) m_printstream . println ( "%create" ) ; PostscriptGraphics psg = new PostscriptGraphics ( this ) ; return ( psg ) ; }
void test0 ( ) throws Throwable { PlaceNode2 placeNode2_0 = new PlaceNode2 ( ) ; Node node0 = new Node ( "2xL" , "2xL" , ( - 428 ) , ( - 428 ) , ( Color ) null , "2xL" ) ; placeNode2_0 . place ( node0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTop ( ) { return m_top ; }
void test0 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( ( - 1384 ) , ( String ) null ) ; int int0 = treeDisplayEvent0 . getCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test1 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( ( - 1384 ) , ( String ) null ) ; treeDisplayEvent0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test2 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( 1 , "l . g ! Yko { 2jJAY / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test3 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( 2 , "WtwBF , hG { g ( ODR`y@7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test4 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( 3 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test5 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( 4 , "MuQvg - 9HM ! p#Q [ pZ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test6 ( ) throws Throwable { TreeDisplayEvent treeDisplayEvent0 = new TreeDisplayEvent ( 5 , "T\"' > KHT - GE ] g4g > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommand ( ) { return m_command ; }
void test0 ( ) throws Throwable { GraphNode graphNode0 = new GraphNode ( "" , "" ) ; boolean boolean0 = graphNode0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test1 ( ) throws Throwable { GraphNode graphNode0 = new GraphNode ( "iK# > . ~26" , "iK# > . ~26" , 0 ) ; boolean boolean0 = graphNode0 . equals ( ( Object ) graphNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test2 ( ) throws Throwable { GraphNode graphNode0 = new GraphNode ( "on~k ; _" , "on~k ; _" , 0 ) ; GraphNode graphNode1 = new GraphNode ( "" , "on~k ; _" , ( - 1995 ) ) ; boolean boolean0 = graphNode0 . equals ( ( Object ) graphNode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test3 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "l" ) ; DotParser dotParser0 = new DotParser ( ( Reader ) stringReader0 , ( FastVector ) null , ( FastVector ) null ) ; StreamTokenizer streamTokenizer0 = new StreamTokenizer ( ( Reader ) stringReader0 ) ; dotParser0 . stmtList ( streamTokenizer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stmtList ( ) { boolean flag = true ; String s ; int t ; while ( flag ) { nextToken ( "expects a STMT_LIST item or ' } '" ) ; if ( m_st . ttype = = ' } ' ) { flag = false ; } else if ( m_st . sval . equalsIgnoreCase ( "graph" ) | | m_st . sval . equalsIgnoreCase ( "node" ) | | m_st . sval . equalsIgnoreCase ( "edge" ) ) { m_st . pushBack ( ) ; attrStmt ( ) ; } else if ( m_st . sval ! = null ) { nodeId ( m_st . sval , 0 ) ; } else { System . out . println ( "expects a STMT_LIST item or ' } '" ) ; } } }
void test7 ( ) throws Throwable { char [ ] charArray0 = new char [ 8 ] ; charArray0 [ 0 ] = ' - ' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; DotParser dotParser0 = new DotParser ( ( Reader ) charArrayReader0 , ( FastVector ) null , ( FastVector ) null ) ; StreamTokenizer streamTokenizer0 = new StreamTokenizer ( ( Reader ) charArrayReader0 ) ; dotParser0 . edgeStmt ( streamTokenizer0 , ( int ) ' - ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void edgeStmt ( String i ) { nextToken ( "error getting target of edge" ) ; if ( m_st . sval ! = null ) { m_edges . addElement ( new InfoObject ( "an edge , no id" ) ) ; ( ( InfoObject ) m_edges . lastElement ( ) ) . m_source = i ; ( ( InfoObject ) m_edges . lastElement ( ) ) . m_target = m_st . sval ; nodeId ( m_st . sval , 1 ) ; } else { System . out . println ( "error getting target of edge" ) ; } }
void test8 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "l" ) ; DotParser dotParser0 = new DotParser ( ( Reader ) stringReader0 , ( FastVector ) null , ( FastVector ) null ) ; StreamTokenizer streamTokenizer0 = new StreamTokenizer ( ( Reader ) stringReader0 ) ; dotParser0 . edgeStmt ( streamTokenizer0 , ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( " = O" ) ; DotParser dotParser0 = new DotParser ( ( Reader ) stringReader0 , ( FastVector ) null , ( FastVector ) null ) ; StreamTokenizer streamTokenizer0 = new StreamTokenizer ( ( Reader ) stringReader0 ) ; GraphEdge graphEdge0 = new GraphEdge ( ( - 4 ) , ( - 4 ) , ( - 1369 ) ) ; dotParser0 . edgeAttrib ( streamTokenizer0 , graphEdge0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void edgeAttrib ( StreamTokenizer tk , GraphEdge e ) throws Exception { tk . nextToken ( ) ; if ( tk . ttype = = ' ] ' | | tk . ttype = = tk . TT_EOF ) return ; else if ( tk . ttype = = tk . TT_WORD ) { if ( tk . sval . equalsIgnoreCase ( "label" ) ) { tk . nextToken ( ) ; if ( tk . ttype = = ' = ' ) { tk . nextToken ( ) ; if ( tk . ttype = = tk . TT_WORD | | tk . ttype = = '"' ) System . err . println ( "found label " + tk . sval ) ; / / e . lbl = tk . sval ; else { System . err . println ( "couldn't find label at line " + tk . lineno ( ) ) ; tk . pushBack ( ) ; } } else { System . err . println ( "couldn't find label at line " + tk . lineno ( ) ) ; tk . pushBack ( ) ; } } else if ( tk . sval . equalsIgnoreCase ( "color" ) ) { tk . nextToken ( ) ; if ( tk . ttype = = ' = ' ) { tk . nextToken ( ) ; if ( tk . ttype = = tk . TT_WORD | | tk . ttype = = '"' ) ; else { System . err . println ( "couldn't find color at line " + tk . lineno ( ) ) ; tk . pushBack ( ) ; } } else { System . err . println ( "couldn't find color at line " + tk . lineno ( ) ) ; tk . pushBack ( ) ; } } else if ( tk . sval . equalsIgnoreCase ( "style" ) ) { tk . nextToken ( ) ; if ( tk . ttype = = ' = ' ) { tk . nextToken ( ) ; if ( tk . ttype = = tk . TT_WORD | | tk . ttype = = '"' ) ; else { System . err . println ( "couldn't find style at line " + tk . lineno ( ) ) ; tk . pushBack ( ) ; } } else { System . err . println ( "couldn't find style at line " + tk . lineno ( ) ) ; tk . pushBack ( ) ; } } } edgeAttrib ( tk , e ) ; }
void test10 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "label" ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) stringReader0 ) ; DotParser dotParser0 = new DotParser ( ( Reader ) lineNumberReader0 , ( FastVector ) null , ( FastVector ) null ) ; StreamTokenizer streamTokenizer0 = new StreamTokenizer ( ( Reader ) lineNumberReader0 ) ; GraphEdge graphEdge0 = new GraphEdge ( 1 , ( - 4 ) , ( - 1 ) , ( String ) null , "label" ) ; dotParser0 . edgeAttrib ( streamTokenizer0 , graphEdge0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { HierarchicalBCEngine hierarchicalBCEngine0 = new HierarchicalBCEngine ( ( FastVector ) null , ( FastVector ) null , 0 , 0 ) ; JPanel jPanel0 = hierarchicalBCEngine0 . getControlPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( ) { return "Performs test using t - test statistic" ; }
void test3 ( ) throws Throwable { HierarchicalBCEngine hierarchicalBCEngine0 = new HierarchicalBCEngine ( ) ; JProgressBar jProgressBar0 = hierarchicalBCEngine0 . getProgressBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JProgressBar getProgressBar ( ) ; / * * * This method adds a LayoutCompleteEventListener to the * LayoutEngine . * @param e - The LayoutCompleteEventListener to add * / void addLayoutCompleteEventListener ( LayoutCompleteEventListener e ) ; / * * * This method removes a LayoutCompleteEventListener from the * LayoutEngine . * @param e - The LayoutCompleteEventListener to remove . * / void removeLayoutCompleteEventListener ( LayoutCompleteEventListener e ) ; / * * * This fires a LayoutCompleteEvent once a layout has been completed . * / void fireLayoutCompleteEvent ( LayoutCompleteEvent e ) ; }
void test4 ( ) throws Throwable { HierarchicalBCEngine hierarchicalBCEngine0 = new HierarchicalBCEngine ( ( FastVector ) null , ( FastVector ) null , 53 , 53 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HierarchicalBCEngine ( FastVector nodes , FastVector edges , int nodeWidth , int nodeHeight ) { m_nodes = nodes ; m_edges = edges ; m_nodeWidth = nodeWidth ; m_nodeHeight = nodeHeight ; makeGUIPanel ( false ) ; }
void test10 ( ) throws Throwable { HierarchicalBCEngine hierarchicalBCEngine0 = new HierarchicalBCEngine ( ) ; LayoutCompleteEvent layoutCompleteEvent0 = new LayoutCompleteEvent ( ( Object ) "PasswordFieldUI" ) ; hierarchicalBCEngine0 . fireLayoutCompleteEvent ( layoutCompleteEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { HierarchicalBCEngine hierarchicalBCEngine0 = new HierarchicalBCEngine ( ) ; hierarchicalBCEngine0 . addLayoutCompleteEventListener ( ( LayoutCompleteEventListener ) null ) ; hierarchicalBCEngine0 . removeLayoutCompleteEventListener ( ( LayoutCompleteEventListener ) null ) ; LayoutCompleteEvent layoutCompleteEvent0 = new LayoutCompleteEvent ( ( Object ) "disabledSelectedIcon" ) ; hierarchicalBCEngine0 . fireLayoutCompleteEvent ( layoutCompleteEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { HierarchicalBCEngine hierarchicalBCEngine0 = new HierarchicalBCEngine ( ) ; int [ ] [ ] intArray0 = new int [ 1 ] [ 10 ] ; int int0 = hierarchicalBCEngine0 . crossings ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int crossings ( int levels [ ] [ ] ) { int sum = 0 ; for ( int i = 0 ; i < levels . length - 1 ; i + + ) { / / System . out . println ( " * * * * * * * * * * * * * * * * * Processing level " + i + / / " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * " ) ; MyList upper = new MyList ( ) , lower = new MyList ( ) ; MyListNode lastOcrnce [ ] = new MyListNode [ m_nodes . size ( ) ] ; int edgeOcrnce [ ] = new int [ m_nodes . size ( ) ] ; for ( int j = 0 , uidx = 0 , lidx = 0 ; j < ( levels [ i ] . length + levels [ i + 1 ] . length ) ; j + + ) { if ( ( j%2 = = 0 & & uidx < levels [ i ] . length ) | | lidx > = levels [ i + 1 ] . length ) { int k1 = 0 , k2 = 0 , k3 = 0 ; GraphNode n = ( GraphNode ) m_nodes . elementAt ( levels [ i ] [ uidx ] ) ; / / Deactivating and counting crossings for all edges ending in it / / coming from bottom left if ( lastOcrnce [ levels [ i ] [ uidx ] ] ! = null ) { MyListNode temp = new MyListNode ( - 1 ) ; temp . next = upper . first ; try { do { temp = temp . next ; if ( levels [ i ] [ uidx ] = = temp . n ) { k1 = k1 + 1 ; k3 = k3 + k2 ; / / System . out . println ( "Removing from upper : " + temp . n ) ; upper . remove ( temp ) ; } else k2 = k2 + 1 ; } while ( temp ! = lastOcrnce [ levels [ i ] [ uidx ] ] ) ; } catch ( NullPointerException ex ) { System . out . println ( "levels [ i ] [ uidx ] : " + levels [ i ] [ uidx ] + " which is : " + ( ( GraphNode ) m_nodes . elementAt ( levels [ i ] [ uidx ] ) ) . ID + " temp : " + temp + " upper . first : " + upper . first ) ; ex . printStackTrace ( ) ; System . exit ( - 1 ) ; } lastOcrnce [ levels [ i ] [ uidx ] ] = null ; sum = sum + k1 * lower . size ( ) + k3 ; } / / Activating all the edges going out towards the bottom / / and bottom right for ( int k = 0 ; k < n . edges . length ; k + + ) { if ( n . edges [ k ] [ 1 ] > 0 ) try { if ( indexOfElementInLevel ( n . edges [ k ] [ 0 ] , levels [ i + 1 ] ) > = uidx ) { edgeOcrnce [ n . edges [ k ] [ 0 ] ] = 1 ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } for ( int k = 0 ; k < levels [ i + 1 ] . length ; k + + ) { if ( edgeOcrnce [ levels [ i + 1 ] [ k ] ] = = 1 ) { MyListNode temp = new MyListNode ( levels [ i + 1 ] [ k ] ) ; / / new MyListNode ( n . edges [ k ] [ 0 ] ) ; lower . add ( temp ) ; lastOcrnce [ levels [ i + 1 ] [ k ] ] = temp ; edgeOcrnce [ levels [ i + 1 ] [ k ] ] = 0 ; / / System . out . println ( "Adding to lower : " + levels [ i + 1 ] [ k ] + / / " which is : " + ( ( GraphNode ) m_nodes . elementAt ( levels [ i + 1 ] [ k ] ) ) . ID + / / " first's n is : " + lower . first . n ) ; } } uidx + + ; } else { int k1 = 0 , k2 = 0 , k3 = 0 ; GraphNode n = ( GraphNode ) m_nodes . elementAt ( levels [ i + 1 ] [ lidx ] ) ; / / Deactivating and counting crossings for all edges ending in it / / coming from up and upper left if ( lastOcrnce [ levels [ i + 1 ] [ lidx ] ] ! = null ) { MyListNode temp = new MyListNode ( - 1 ) ; temp . next = lower . first ; try { do { temp = temp . next ; if ( levels [ i + 1 ] [ lidx ] = = temp . n ) { k1 = k1 + 1 ; k3 = k3 + k2 ; lower . remove ( temp ) ; / / System . out . println ( "Removing from lower : " + temp . n ) ; } else k2 = k2 + 1 ; / / System . out . println ( "temp : " + temp + " lastOcrnce : " + / / lastOcrnce [ levels [ i + 1 ] [ lidx ] ] + " temp . n : " + / / temp . n + " lastOcrnce . n : " + / / lastOcrnce [ levels [ i + 1 ] [ lidx ] ] . n ) ; } while ( temp ! = lastOcrnce [ levels [ i + 1 ] [ lidx ] ] ) ; } catch ( NullPointerException ex ) { System . out . print ( "levels [ i + 1 ] [ lidx ] : " + levels [ i + 1 ] [ lidx ] + " which is : " + ( ( GraphNode ) m_nodes . elementAt ( levels [ i + 1 ] [ lidx ] ) ) . ID + " temp : " + temp ) ; System . out . println ( " lower . first : " + lower . first ) ; ex . printStackTrace ( ) ; System . exit ( - 1 ) ; } lastOcrnce [ levels [ i + 1 ] [ lidx ] ] = null ; sum = sum + k1 * upper . size ( ) + k3 ; } / / Activating all the edges going out towards the upper right for ( int k = 0 ; k < n . edges . length ; k + + ) { if ( n . edges [ k ] [ 1 ] < 0 ) try { if ( indexOfElementInLevel ( n . edges [ k ] [ 0 ] , levels [ i ] ) > lidx ) { edgeOcrnce [ n . edges [ k ] [ 0 ] ] = 1 ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } for ( int k = 0 ; k < levels [ i ] . length ; k + + ) { if ( edgeOcrnce [ levels [ i ] [ k ] ] = = 1 ) { MyListNode temp = new MyListNode ( levels [ i ] [ k ] ) ; upper . add ( temp ) ; lastOcrnce [ levels [ i ] [ k ] ] = temp ; edgeOcrnce [ levels [ i ] [ k ] ] = 0 ; / / System . out . println ( "Adding to upper : " + levels [ i ] [ k ] + / / " which is : " + / / ( ( GraphNode ) m_nodes . elementAt ( levels [ i ] [ k ] ) ) . ID + / / " from node : " + n . ID + " , " + k + / / " first's value : " + upper . first . n ) ; } } lidx + + ; } } / / System . out . println ( "Sum at the end is : " + sum ) ; } return sum ; }
void test0 ( ) throws Throwable { GraphEdge graphEdge0 = new GraphEdge ( ( - 862 ) , ( - 862 ) , ( - 862 ) ) ; String string0 = graphEdge0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { GraphEdge graphEdge0 = new GraphEdge ( ( - 862 ) , ( - 862 ) , ( - 862 ) ) ; boolean boolean0 = graphEdge0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { GraphEdge graphEdge0 = new GraphEdge ( ( - 862 ) , ( - 862 ) , ( - 862 ) ) ; boolean boolean0 = graphEdge0 . equals ( ( Object ) graphEdge0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { GraphEdge graphEdge0 = new GraphEdge ( 0 , 0 , 0 , "een1EFXS" , "een1EFXS" ) ; GraphEdge graphEdge1 = new GraphEdge ( ( - 1561 ) , 965 , ( - 986 ) , "een1EFXS" , "een1EFXS" ) ; boolean boolean0 = graphEdge0 . equals ( ( Object ) graphEdge1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { GraphEdge graphEdge0 = new GraphEdge ( 917 , ( - 548 ) , 819 ) ; GraphEdge graphEdge1 = new GraphEdge ( 917 , 819 , 819 , "" , "" ) ; boolean boolean0 = graphEdge0 . equals ( ( Object ) graphEdge1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { GraphEdge graphEdge0 = new GraphEdge ( 1 , 0 , 1 ) ; GraphEdge graphEdge1 = new GraphEdge ( 1 , 0 , 1698 , ( String ) null , ( String ) null ) ; boolean boolean0 = graphEdge0 . equals ( ( Object ) graphEdge1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ClassAssignerBeanInfo classAssignerBeanInfo0 = new ClassAssignerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = classAssignerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { ClassAssignerBeanInfo classAssignerBeanInfo0 = new ClassAssignerBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = classAssignerBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test2 ( ) throws Throwable { ClassAssignerBeanInfo classAssignerBeanInfo0 = new ClassAssignerBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = classAssignerBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test1 ( ) throws Throwable { KnowledgeFlow knowledgeFlow0 = new KnowledgeFlow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { NoteCustomizer noteCustomizer0 = new NoteCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { NoteCustomizer noteCustomizer0 = new NoteCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test2 ( ) throws Throwable { NoteCustomizer noteCustomizer0 = new NoteCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { NoteCustomizer noteCustomizer0 = new NoteCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusFrequency ( ) { return m_statusFrequency ; }
void test1 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusFrequency ( ) { return m_statusFrequency ; }
void test2 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputPerClassInfoRetrievalStats ( ) { return m_outputInfoRetrievalStats ; }
void test3 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test4 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test5 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputPerClassInfoRetrievalStats ( ) { return m_outputInfoRetrievalStats ; }
void test6 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusFrequency ( ) { return m_statusFrequency ; }
void test7 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputPerClassInfoRetrievalStats ( ) { return m_outputInfoRetrievalStats ; }
void test8 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test9 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test10 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputPerClassInfoRetrievalStats ( ) { return m_outputInfoRetrievalStats ; }
void test11 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusFrequency ( ) { return m_statusFrequency ; }
void test12 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test13 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getOutputPerClassInfoRetrievalStats ( ) { return m_outputInfoRetrievalStats ; }
void test14 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusFrequency ( ) { return m_statusFrequency ; }
void test15 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusFrequency ( ) { return m_statusFrequency ; }
void test16 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test17 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test18 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test19 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChartingEvalWindowSize ( ) { return m_windowSize ; }
void test2 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 9 ] ; Integer integer0 = JLayeredPane . DEFAULT_LAYER ; integerArray0 [ 0 ] = integer0 ; Vector < Object > vector0 = BeanConnection . getConnections ( integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector getConnections ( Integer . . . tab ) { Vector returnV = null ; int index = 0 ; if ( tab . length > 0 ) { index = tab [ 0 ] . intValue ( ) ; } if ( TABBED_CONNECTIONS . size ( ) > 0 ) { returnV = TABBED_CONNECTIONS . get ( index ) ; } return returnV ; }
void test3 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeanInfoOutputs ( ) ; Integer [ ] integerArray0 = new Integer [ 1 ] ; Integer integer0 = JLayeredPane . DRAG_LAYER ; integerArray0 [ 0 ] = integer0 ; BeanConnection . setConnections ( ( Vector ) vector0 , integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getSubFlow ( ) ; Integer [ ] integerArray0 = new Integer [ 1 ] ; Integer integer0 = JLayeredPane . DEFAULT_LAYER ; integerArray0 [ 0 ] = integer0 ; BeanConnection . setConnections ( ( Vector ) vector0 , integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( m_Root . getChildCount ( ) = = 0 ) ; }
void test5 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getAssociatedConnections ( ) ; BeanConnection . appendConnections ( ( Vector ) vector0 , 1387 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test6 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getSubFlow ( ) ; Integer [ ] integerArray0 = new Integer [ 1 ] ; Integer integer0 = JLayeredPane . DEFAULT_LAYER ; integerArray0 [ 0 ] = integer0 ; vector0 . add ( ( Object ) null ) ; BeanConnection . appendConnections ( ( Vector ) vector0 , ( int ) integerArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return V . length ; }
void test10 ( ) throws Throwable { JLabel jLabel0 = new JLabel ( "D'w``s ] NB" , 0 ) ; jLabel0 . getComponentPopupMenu ( ) ; JScrollPane jScrollPane0 = new JScrollPane ( ( Component ) null ) ; Integer [ ] integerArray0 = new Integer [ 5 ] ; integerArray0 [ 0 ] = ( Integer ) 0 ; integerArray0 [ 1 ] = ( Integer ) 0 ; integerArray0 [ 2 ] = ( Integer ) 0 ; integerArray0 [ 3 ] = ( Integer ) 0 ; integerArray0 [ 4 ] = ( Integer ) 0 ; MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getInputs ( ) ; BeanConnection . appendConnections ( ( Vector ) vector0 , ( int ) integerArray0 [ 2 ] ) ; BeanConnection . addConnections ( vector0 ) ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) jScrollPane0 , "D'w``s ] NB" , 0 , 0 , integerArray0 ) ; Integer [ ] integerArray1 = new Integer [ 2 ] ; integerArray1 [ 0 ] = ( Integer ) 0 ; integerArray1 [ 1 ] = ( Integer ) 0 ; / / Undeclared exception ! try { BeanConnection . removeConnections ( beanInstance0 , integerArray1 ) ; fail ( "Expecting exception : NullPointerException" ) ; } catch ( NullPointerException e ) { } "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeConnections ( BeanInstance instance , Integer . . . tab ) { int tabIndex = 0 ; if ( tab . length > 0 ) { tabIndex = tab [ 0 ] . intValue ( ) ; } Vector connections = TABBED_CONNECTIONS . get ( tabIndex ) ; Vector instancesToRemoveFor = new Vector ( ) ; if ( instance . getBean ( ) instanceof MetaBean ) { instancesToRemoveFor = ( ( MetaBean ) instance . getBean ( ) ) . getBeansInSubFlow ( ) ; } else { instancesToRemoveFor . add ( instance ) ; } Vector removeVector = new Vector ( ) ; for ( int j = 0 ; j < instancesToRemoveFor . size ( ) ; j + + ) { BeanInstance tempInstance = ( BeanInstance ) instancesToRemoveFor . elementAt ( j ) ; for ( int i = 0 ; i < connections . size ( ) ; i + + ) { / / In cases where this instance is the target , deregister it / / as a listener for the source BeanConnection bc = ( BeanConnection ) connections . elementAt ( i ) ; BeanInstance tempTarget = bc . getTarget ( ) ; BeanInstance tempSource = bc . getSource ( ) ; EventSetDescriptor tempEsd = bc . getSourceEventSetDescriptor ( ) ; if ( tempInstance = = tempTarget ) { / / try to deregister the target as a listener for the source try { Method deregisterMethod = tempEsd . getRemoveListenerMethod ( ) ; Object targetBean = tempTarget . getBean ( ) ; Object [ ] args = new Object [ 1 ] ; args [ 0 ] = targetBean ; deregisterMethod . invoke ( tempSource . getBean ( ) , args ) ; / / System . err . println ( "Deregistering listener" ) ; removeVector . addElement ( bc ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } else if ( tempInstance = = tempSource ) { removeVector . addElement ( bc ) ; if ( tempTarget . getBean ( ) instanceof BeanCommon ) { / / tell the target that the source is going away , therefore / / this type of connection is as well ( ( BeanCommon ) tempTarget . getBean ( ) ) . disconnectionNotification ( tempEsd . getName ( ) , tempSource . getBean ( ) ) ; } } } } for ( int i = 0 ; i < removeVector . size ( ) ; i + + ) { / / System . err . println ( "removing connection" ) ; connections . removeElement ( ( BeanConnection ) removeVector . elementAt ( i ) ) ; } }
void test11 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( ) ; Integer [ ] integerArray0 = new Integer [ 10 ] ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) jTextArea0 , ( String ) null , ( - 13 ) , ( - 40 ) , integerArray0 ) ; BeanConnection . doMetaConnection ( beanInstance0 , beanInstance0 , ( EventSetDescriptor ) null , ( JComponent ) jTextArea0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void doMetaConnection ( BeanInstance source , BeanInstance target , EventSetDescriptor esd , JComponent displayComponent , int tab ) { Object targetBean = target . getBean ( ) ; BeanInstance realTarget = null ; BeanInstance realSource = source ; if ( targetBean instanceof MetaBean ) { Vector receivers = ( ( MetaBean ) targetBean ) . getSuitableTargets ( esd ) ; if ( receivers . size ( ) = = 1 ) { realTarget = ( BeanInstance ) receivers . elementAt ( 0 ) ; BeanConnection bc = new BeanConnection ( realSource , realTarget , esd , tab ) ; / / m_target = ( BeanInstance ) receivers . elementAt ( 0 ) ; } else { / / have to do the popup thing here int menuItemCount = 0 ; JPopupMenu targetConnectionMenu = new JPopupMenu ( ) ; targetConnectionMenu . insert ( new JLabel ( "Select target" , SwingConstants . CENTER ) , menuItemCount + + ) ; for ( int i = 0 ; i < receivers . size ( ) ; i + + ) { BeanInstance tempTarget = ( BeanInstance ) receivers . elementAt ( i ) ; String tName = "" + ( i + 1 ) + " : " + ( ( tempTarget . getBean ( ) instanceof BeanCommon ) ? ( ( BeanCommon ) tempTarget . getBean ( ) ) . getCustomName ( ) : tempTarget . getBean ( ) . getClass ( ) . getName ( ) ) ; JMenuItem targetItem = new JMenuItem ( tName ) ; targetItem . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent e ) { / / finalTarget . add ( tempTarget ) ; BeanConnection bc = new BeanConnection ( realSource , tempTarget , esd , tab ) ; displayComponent . repaint ( ) ; } } ) ; targetConnectionMenu . add ( targetItem ) ; menuItemCount + + ; } targetConnectionMenu . show ( displayComponent , target . getX ( ) , target . getY ( ) ) ; / / m_target = ( BeanInstance ) finalTarget . elementAt ( 0 ) ; } } }
void test0 ( ) throws Throwable { StripChartCustomizer stripChartCustomizer0 = new StripChartCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test1 ( ) throws Throwable { StripChartCustomizer stripChartCustomizer0 = new StripChartCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test2 ( ) throws Throwable { StripChartCustomizer stripChartCustomizer0 = new StripChartCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test0 ( ) throws Throwable { ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test1 ( ) throws Throwable { ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test2 ( ) throws Throwable { ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test3 ( ) throws Throwable { ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test4 ( ) throws Throwable { ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void customizerClosing ( ) { m_dataVis . setOffscreenXAxis ( m_xAxisBack ) ; m_dataVis . setOffscreenWidth ( m_widthBack ) ; m_dataVis . setOffscreenHeight ( m_heightBack ) ; m_dataVis . setOffscreenAdditionalOpts ( m_optsBack ) ; m_dataVis . setOffscreenRendererName ( m_rendererNameBack ) ; }
void test5 ( ) throws Throwable { ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test0 ( ) throws Throwable { IncrementalClassifierEvaluatorBeanInfo incrementalClassifierEvaluatorBeanInfo0 = new IncrementalClassifierEvaluatorBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = incrementalClassifierEvaluatorBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { IncrementalClassifierEvaluatorBeanInfo incrementalClassifierEvaluatorBeanInfo0 = new IncrementalClassifierEvaluatorBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = incrementalClassifierEvaluatorBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanDescriptor getBeanDescriptor ( ) { return new BeanDescriptor ( weka . filters . unsupervised . attribute . AddUserFields . class , weka . gui . filters . AddUserFieldsCustomizer . class ) ; }
void test2 ( ) throws Throwable { IncrementalClassifierEvaluatorBeanInfo incrementalClassifierEvaluatorBeanInfo0 = new IncrementalClassifierEvaluatorBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = incrementalClassifierEvaluatorBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Class for building and using a 1R classifier ; in other words , uses the minimum - error attribute for prediction , discretizing numeric attributes . For more information , see : \n\nR . C . Holte ( 1993 ) . Very simple classification rules perform well on most commonly used datasets . Machine Learning . 11 : 63 - 91 . " , ( Classifier ) naiveBayesUpdateable0 , ( DataSetEvent ) null , ( DataSetEvent ) null , 0 , ( - 1563 ) , ( - 1563 ) , ( - 1951 ) ) ; NaiveBayesUpdateable naiveBayesUpdateable1 = ( NaiveBayesUpdateable ) batchClassifierEvent0 . getClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test1 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "The combination rule used . " , ( Instances ) null ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Specify a set of attributes to ignore . When generating the ranking , Ranker will not evaluate the attributes in this list . This is specified as a comma seperated list off attribute indexes starting at 1 . It can include ranges . Eg . 1 , 2 , 5 - 9 , 17 . " , ( Classifier ) vote0 , dataSetEvent0 , dataSetEvent0 , 0 , 1518 ) ; batchClassifierEvent0 . setTestSet ( dataSetEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGroupIdentifier ( ) { return m_groupIdentifier ; }
void test2 ( ) throws Throwable { LMT lMT0 = new LMT ( ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Set splitting criterion based on the residuals of LogitBoost . There are two possible splitting criteria for LMT : the default is to use the C4 . 5 splitting criterion that uses information gain on the class variable . The other splitting criterion tries to improve the purity in the residuals produces when fitting the logistic regression functions . The choice of the splitting criterion does not usually affect classification accuracy much , but can produce different trees . " , ( Classifier ) lMT0 , ( DataSetEvent ) null , ( DataSetEvent ) null , 1803 , 1803 , 1803 , 1803 ) ; int int0 = batchClassifierEvent0 . getSetNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGroupIdentifier ( ) { return m_groupIdentifier ; }
void test3 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "The combination rule used . " , ( Instances ) null ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Specify a set of attributes to ignore . When generating the ranking , Ranker will not evaluate the attributes in this list . This is specified as a comma seperated list off attribute indexes starting at 1 . It can include ranges . Eg . 1 , 2 , 5 - 9 , 17 . " , ( Classifier ) vote0 , dataSetEvent0 , dataSetEvent0 , 0 , 1518 ) ; int int0 = batchClassifierEvent0 . getMaxSetNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGroupIdentifier ( ) { return m_groupIdentifier ; }
void test4 ( ) throws Throwable { SGDText sGDText0 = new SGDText ( ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "The random number seed to be used . " , ( Classifier ) sGDText0 , ( DataSetEvent ) null , ( DataSetEvent ) null , 0 , 0 , 0 , 0 ) ; batchClassifierEvent0 . setTrainSet ( ( DataSetEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunNumber ( ) { return m_runNumber ; }
void test5 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "The base classifier to be used . " , ( Instances ) null ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) " ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? " , ( Classifier ) bayesNet0 , dataSetEvent0 , dataSetEvent0 , 6 , 1162 ) ; int int0 = batchClassifierEvent0 . getRunNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test6 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Class for building and using a 1R classifier ; in other words , uses the minimum - error attribute for prediction , discretizing numeric attributes . For more information , see : \n\nR . C . Holte ( 1993 ) . Very simple classification rules perform well on most commonly used datasets . Machine Learning . 11 : 63 - 91 . " , ( Classifier ) naiveBayesUpdateable0 , ( DataSetEvent ) null , ( DataSetEvent ) null , 0 , ( - 1563 ) , ( - 1563 ) , ( - 1951 ) ) ; long long0 = batchClassifierEvent0 . getGroupIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRunNumber ( ) { return m_maxRunNumber ; }
void test7 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "The combination rule used . " , ( Instances ) null ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Specify a set of attributes to ignore . When generating the ranking , Ranker will not evaluate the attributes in this list . This is specified as a comma seperated list off attribute indexes starting at 1 . It can include ranges . Eg . 1 , 2 , 5 - 9 , 17 . " , ( Classifier ) vote0 , dataSetEvent0 , dataSetEvent0 , 0 , 1518 ) ; DataSetEvent dataSetEvent1 = batchClassifierEvent0 . getTrainSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGroupIdentifier ( ) { return m_groupIdentifier ; }
void test8 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; FilteredClassifier filteredClassifier0 = new FilteredClassifier ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "The base classifier to be used . " , ( Instances ) null ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) " ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? " , ( Classifier ) bayesNet0 , dataSetEvent0 , dataSetEvent0 , 6 , 1162 ) ; batchClassifierEvent0 . setClassifier ( ( Classifier ) filteredClassifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRunNumber ( ) { return m_maxRunNumber ; }
void test9 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Class for building and using a 1R classifier ; in other words , uses the minimum - error attribute for prediction , discretizing numeric attributes . For more information , see : \n\nR . C . Holte ( 1993 ) . Very simple classification rules perform well on most commonly used datasets . Machine Learning . 11 : 63 - 91 . " , ( Classifier ) naiveBayesUpdateable0 , ( DataSetEvent ) null , ( DataSetEvent ) null , 0 , ( - 1563 ) , ( - 1563 ) , ( - 1951 ) ) ; batchClassifierEvent0 . getTestSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGroupIdentifier ( ) { return m_groupIdentifier ; }
void test10 ( ) throws Throwable { J48 j48_0 = new J48 ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "The file containing the stopwords ( if this is a directory then the default ones are used ) . " , ( Instances ) null ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Whether pruning is performed . " , ( Classifier ) j48_0 , dataSetEvent0 , dataSetEvent0 , 21 , 1790 , 0 , 41 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRunNumber ( ) { return m_maxRunNumber ; }
void test11 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent ( ( Object ) "Class for building and using a 1R classifier ; in other words , uses the minimum - error attribute for prediction , discretizing numeric attributes . For more information , see : \n\nR . C . Holte ( 1993 ) . Very simple classification rules perform well on most commonly used datasets . Machine Learning . 11 : 63 - 91 . " , ( Classifier ) naiveBayesUpdateable0 , ( DataSetEvent ) null , ( DataSetEvent ) null , 0 , ( - 1563 ) , ( - 1563 ) , ( - 1951 ) ) ; int int0 = batchClassifierEvent0 . getMaxRunNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunNumber ( ) { return m_runNumber ; }
void test0 ( ) throws Throwable { AbstractDataSinkBeanInfo abstractDataSinkBeanInfo0 = new AbstractDataSinkBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = abstractDataSinkBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassifierBeanInfo classifierBeanInfo0 = new ClassifierBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = classifierBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return "GNUPlot" ; }
void test1 ( ) throws Throwable { ClassifierBeanInfo classifierBeanInfo0 = new ClassifierBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = classifierBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) "" ) ; chartEvent0 . setMin ( ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMin ( ) { return m_min ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; Vector < Integer > vector0 = new Vector < Integer > ( ) ; ChartEvent chartEvent0 = new ChartEvent ( object0 ) ; chartEvent0 . setLegendText ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMax ( ) { return m_max ; }
void test2 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 9 ] ; ChartEvent chartEvent0 = new ChartEvent ( ( Object ) " [ ] " , ( Vector ) null , ( - 1 . 0 ) , ( - 1 . 0 ) , doubleArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMin ( ) { return m_min ; }
void test3 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) " [ ] " ) ; double [ ] doubleArray0 = chartEvent0 . getDataPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] getDataPoint ( ) { return m_dataPoint ; }
void test4 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) "" ) ; chartEvent0 . setMax ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMax ( ) { return m_max ; }
void test5 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) "" ) ; boolean boolean0 = chartEvent0 . getReset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReset ( ) { return m_reset ; }
void test6 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) " [ ] " ) ; double double0 = chartEvent0 . getMax ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMax ( ) { return m_max ; }
void test7 ( ) throws Throwable { Object object0 = new Object ( ) ; ChartEvent chartEvent0 = new ChartEvent ( object0 ) ; double double0 = chartEvent0 . getMin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMin ( ) { return m_min ; }
void test8 ( ) throws Throwable { Object object0 = new Object ( ) ; ChartEvent chartEvent0 = new ChartEvent ( object0 ) ; chartEvent0 . setReset ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReset ( ) { return m_reset ; }
void test9 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) " [ ] " ) ; Vector < Object > vector0 = chartEvent0 . getLegendText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector getLegendText ( ) { return m_legendText ; }
void test10 ( ) throws Throwable { ChartEvent chartEvent0 = new ChartEvent ( ( Object ) "" ) ; double [ ] doubleArray0 = new double [ 8 ] ; chartEvent0 . setDataPoint ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; clustererPerformanceEvaluator0 . setCustomName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCustomName ( String name ) { m_visual . setText ( name ) ; }
void test4 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test6 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test8 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test9 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridWidth ( ) { return m_gridWidth ; }
void test4 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColoringIndex ( ) { return m_classIndex ; / / m_colorAttrib . getSelectedIndex ( ) ; }
void test6 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test8 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridWidth ( ) { return m_gridWidth ; }
void test9 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlots ( ) { return m_maxPlots ; }
void test10 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlots ( ) { return m_maxPlots ; }
void test11 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridWidth ( ) { return m_gridWidth ; }
void test12 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridWidth ( ) { return m_gridWidth ; }
void test13 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColoringIndex ( ) { return m_classIndex ; / / m_colorAttrib . getSelectedIndex ( ) ; }
void test14 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridWidth ( ) { return m_gridWidth ; }
void test15 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlots ( ) { return m_maxPlots ; }
void test16 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlots ( ) { return m_maxPlots ; }
void test17 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlots ( ) { return m_maxPlots ; }
void test18 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridWidth ( ) { return m_gridWidth ; }
void test19 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColoringIndex ( ) { return m_classIndex ; / / m_colorAttrib . getSelectedIndex ( ) ; }
void test20 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColoringIndex ( ) { return m_classIndex ; / / m_colorAttrib . getSelectedIndex ( ) ; }
void test21 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColoringIndex ( ) { return m_classIndex ; / / m_colorAttrib . getSelectedIndex ( ) ; }
void test22 ( ) throws Throwable { AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test1 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { SorterBeanInfo sorterBeanInfo0 = new SorterBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = sorterBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { SorterBeanInfo sorterBeanInfo0 = new SorterBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = sorterBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return "GNUPlot" ; }
void test0 ( ) throws Throwable { PredictionAppenderBeanInfo predictionAppenderBeanInfo0 = new PredictionAppenderBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = predictionAppenderBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { PredictionAppenderBeanInfo predictionAppenderBeanInfo0 = new PredictionAppenderBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = predictionAppenderBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanDescriptor getBeanDescriptor ( ) { return new BeanDescriptor ( weka . filters . unsupervised . attribute . AddUserFields . class , weka . gui . filters . AddUserFieldsCustomizer . class ) ; }
void test2 ( ) throws Throwable { PredictionAppenderBeanInfo predictionAppenderBeanInfo0 = new PredictionAppenderBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = predictionAppenderBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test1 ( ) throws Throwable { IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test2 ( ) throws Throwable { IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void customizerClosing ( ) { m_dataVis . setOffscreenXAxis ( m_xAxisBack ) ; m_dataVis . setOffscreenWidth ( m_widthBack ) ; m_dataVis . setOffscreenHeight ( m_heightBack ) ; m_dataVis . setOffscreenAdditionalOpts ( m_optsBack ) ; m_dataVis . setOffscreenRendererName ( m_rendererNameBack ) ; }
void test3 ( ) throws Throwable { IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test4 ( ) throws Throwable { IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test5 ( ) throws Throwable { IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test0 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; scatterPlotMatrix0 . setLoaded ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLoaded ( boolean loaded ) { }
void test1 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; scatterPlotMatrix0 . setMainKFPerspective ( ( KnowledgeFlowApp . MainKFPerspective ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; scatterPlotMatrix0 . appearanceDesign ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; boolean boolean0 = scatterPlotMatrix0 . acceptsInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean acceptsInstances ( ) { return true ; }
void test4 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; String string0 = scatterPlotMatrix0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; String string0 = scatterPlotMatrix0 . getPerspectiveTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPerspectiveTitle ( ) { return "Scatter plot matrix" ; }
void test7 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; String string0 = scatterPlotMatrix0 . getPerspectiveTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPerspectiveTipText ( ) { return "Scatter plot matrix" ; }
void test8 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; scatterPlotMatrix0 . setActive ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix ( ) ; ImageIcon imageIcon0 = ( ImageIcon ) scatterPlotMatrix0 . getPerspectiveIcon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) "relational" , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRunNumber ( ) { return m_maxRunNumber ; }
void test1 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( " [ ] " , arrayList0 , 1705 ) ; TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) " [ ] " , instances0 , 1705 , 1705 , 1705 , 1705 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRunNumber ( ) { return m_maxRunNumber ; }
void test2 ( ) throws Throwable { TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) "relational" , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunNumber ( ) { return m_runNumber ; }
void test3 ( ) throws Throwable { TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) " / " , ( Instances ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test4 ( ) throws Throwable { TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) "relational" , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxRunNumber ( ) { return m_maxRunNumber ; }
void test5 ( ) throws Throwable { TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) " / " , ( Instances ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test6 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( " [ ] " , arrayList0 , 1705 ) ; double [ ] doubleArray0 = new double [ 6 ] ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( ( double ) 1705 , doubleArray0 ) ; instances0 . add ( ( Instance ) binarySparseInstance0 ) ; TestSetEvent testSetEvent0 = new TestSetEvent ( ( Object ) " [ ] " , instances0 , 1705 , 1705 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test0 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . statusMessage ( "" ) ; logPanel0 . clearStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clearStatus ( ) { / / stop any running timers Iterator < Timer > i = m_timers . values ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { i . next ( ) . stop ( ) ; } / / clear the map entries m_timers . clear ( ) ; m_tableIndexes . clear ( ) ; / / clear the rows from the table while ( m_tableModel . getRowCount ( ) > 0 ) { m_tableModel . removeRow ( 0 ) ; } }
void test1 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . statusMessage ( "INTERRUPTEDstpped . " ) ; logPanel0 . statusMessage ( "INTERRUPTEDstpped . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void statusMessage ( String message ) { m_StatusLab . setText ( message ) ; }
void test2 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int columnIndex ) { if ( ! isInitialized ( ) ) return null ; else return getModel ( ) . getColumnClass ( columnIndex ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . logMessage ( "kemve" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test4 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . clearStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clearStatus ( ) { / / stop any running timers Iterator < Timer > i = m_timers . values ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { i . next ( ) . stop ( ) ; } / / clear the map entries m_timers . clear ( ) ; m_tableIndexes . clear ( ) ; / / clear the rows from the table while ( m_tableModel . getRowCount ( ) > 0 ) { m_tableModel . removeRow ( 0 ) ; } }
void test5 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . statusMessage ( "Step 1 | Some options here | finished" ) ; logPanel0 . statusMessage ( "Step 1 | Some options here | finished" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void statusMessage ( String message ) { m_StatusLab . setText ( message ) ; }
void test6 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . statusMessage ( "V > $vZv | Y" ) ; logPanel0 . statusMessage ( "V > $vZv | Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void statusMessage ( String message ) { m_StatusLab . setText ( message ) ; }
void test7 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . statusMessage ( "stopped . " ) ; logPanel0 . statusMessage ( "stopped . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( Capability c ) { return m_Capabilities . handles ( c ) ; }
void test8 ( ) throws Throwable { LogPanel logPanel0 = new LogPanel ( ) ; logPanel0 . statusMessage ( "remove . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void statusMessage ( String message ) { m_StatusLab . setText ( message ) ; }
void test0 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Weka Chart Renderer" , arrayList0 , 0 ) ; Attribute attribute0 = new Attribute ( "Weka Chart Renderer" , 0 ) ; arrayList0 . add ( attribute0 ) ; List < Instances > list0 = wekaOffscreenChartRenderer0 . splitToClasses ( instances0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( m_Root . getChildCount ( ) = = 0 ) ; }
void test1 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; String string0 = wekaOffscreenChartRenderer0 . getOption ( ( List < String > ) null , "import weka . filters . Flter ; \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOption ( List < String > options , String toGet ) { String value = null ; if ( options = = null ) { return null ; } for ( String option : options ) { if ( option . startsWith ( toGet ) ) { String [ ] parts = option . split ( " = " ) ; if ( parts . length ! = 2 ) { return "" ; / / indicates a flag } value = parts [ 1 ] ; break ; } } return value ; }
void test2 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; arrayList0 . add ( "m0rge" ) ; String string0 = wekaOffscreenChartRenderer0 . getOption ( ( List < String > ) arrayList0 , "G { & e ? 6iX | @lp" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOption ( List < String > options , String toGet ) { String value = null ; if ( options = = null ) { return null ; } for ( String option : options ) { if ( option . startsWith ( toGet ) ) { String [ ] parts = option . split ( " = " ) ; if ( parts . length ! = 2 ) { return "" ; / / indicates a flag } value = parts [ 1 ] ; break ; } } return value ; }
void test3 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . push ( " / 8" ) ; String string0 = wekaOffscreenChartRenderer0 . getOption ( ( List < String > ) linkedList0 , " / 8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOption ( List < String > options , String toGet ) { String value = null ; if ( options = = null ) { return null ; } for ( String option : options ) { if ( option . startsWith ( toGet ) ) { String [ ] parts = option . split ( " = " ) ; if ( parts . length ! = 2 ) { return "" ; / / indicates a flag } value = parts [ 1 ] ; break ; } } return value ; }
void test5 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; int int0 = wekaOffscreenChartRenderer0 . getIndexOfAttribute ( ( Instances ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfAttribute ( Instances insts , String attName ) { if ( attName = = null ) { return - 1 ; } / / special first and last strings if ( attName . equalsIgnoreCase ( " / last" ) ) { return insts . numAttributes ( ) - 1 ; } if ( attName . equalsIgnoreCase ( " / first" ) ) { return 0 ; } if ( attName . startsWith ( " / " ) ) { / / try and parse remainder as a number String numS = attName . replace ( " / " , "" ) ; try { int index = Integer . parseInt ( numS ) ; index - - ; / / from 1 - based to 0 - based if ( index > = 0 & & index < insts . numAttributes ( ) ) { return index ; } } catch ( NumberFormatException e ) { } } Attribute att = insts . attribute ( attName ) ; if ( att ! = null ) { return att . index ( ) ; } return - 1 ; / / not found }
void test7 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Weka Chart Renderer" , arrayList0 , 0 ) ; int int0 = wekaOffscreenChartRenderer0 . getIndexOfAttribute ( instances0 , "Weka Chart Renderer" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfAttribute ( Instances insts , String attName ) { if ( attName = = null ) { return - 1 ; } / / special first and last strings if ( attName . equalsIgnoreCase ( " / last" ) ) { return insts . numAttributes ( ) - 1 ; } if ( attName . equalsIgnoreCase ( " / first" ) ) { return 0 ; } if ( attName . startsWith ( " / " ) ) { / / try and parse remainder as a number String numS = attName . replace ( " / " , "" ) ; try { int index = Integer . parseInt ( numS ) ; index - - ; / / from 1 - based to 0 - based if ( index > = 0 & & index < insts . numAttributes ( ) ) { return index ; } } catch ( NumberFormatException e ) { } } Attribute att = insts . attribute ( attName ) ; if ( att ! = null ) { return att . index ( ) ; } return - 1 ; / / not found }
void test8 ( ) throws Throwable { WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Weka Chart Renderer" , arrayList0 , 0 ) ; Attribute attribute0 = new Attribute ( "Weka Chart Renderer" , 0 ) ; arrayList0 . add ( attribute0 ) ; int int0 = wekaOffscreenChartRenderer0 . getIndexOfAttribute ( instances0 , "Weka Chart Renderer" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfAttribute ( Instances insts , String attName ) { if ( attName = = null ) { return - 1 ; } / / special first and last strings if ( attName . equalsIgnoreCase ( " / last" ) ) { return insts . numAttributes ( ) - 1 ; } if ( attName . equalsIgnoreCase ( " / first" ) ) { return 0 ; } if ( attName . startsWith ( " / " ) ) { / / try and parse remainder as a number String numS = attName . replace ( " / " , "" ) ; try { int index = Integer . parseInt ( numS ) ; index - - ; / / from 1 - based to 0 - based if ( index > = 0 & & index < insts . numAttributes ( ) ) { return index ; } } catch ( NumberFormatException e ) { } } Attribute att = insts . attribute ( attName ) ; if ( att ! = null ) { return att . index ( ) ; } return - 1 ; / / not found }
void test0 ( ) throws Throwable { TextViewerBeanInfo textViewerBeanInfo0 = new TextViewerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = textViewerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { StripChartBeanInfo stripChartBeanInfo0 = new StripChartBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = stripChartBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return m_hidden ; }
void test1 ( ) throws Throwable { StripChartBeanInfo stripChartBeanInfo0 = new StripChartBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = stripChartBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test2 ( ) throws Throwable { StripChartBeanInfo stripChartBeanInfo0 = new StripChartBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = stripChartBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test6 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setVisual ( BeanVisual newVisual ) { m_visual = newVisual ; }
void test9 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test11 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test12 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test15 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test16 ( ) throws Throwable { InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptInstance ( InstanceEvent e ) { / / to do ! if ( m_filterThread ! = null ) { String messg = " [ Filter ] " + statusMessagePrefix ( ) + " is currently batch processing ! " ; if ( m_log ! = null ) { m_log . logMessage ( messg ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "WARNING : Filter is currently batch processing . " ) ; } else { System . err . println ( messg ) ; } return ; } if ( ! ( m_Filter instanceof StreamableFilter ) ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " ERROR : " + m_Filter . getClass ( ) . getName ( ) + "can't process streamed instances ; can't continue" ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR : Can't process streamed instances ; can't continue . " ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . FORMAT_AVAILABLE ) { try { m_instanceCount = 0 ; / / notifyInstanceListeners ( e ) ; / / Instances dataset = e . getInstance ( ) . dataset ( ) ; Instances dataset = e . getStructure ( ) ; if ( m_Filter instanceof SupervisedFilter ) { / / defualt to last column if no class is set if ( dataset . classIndex ( ) < 0 ) { dataset . setClassIndex ( dataset . numAttributes ( ) - 1 ) ; } } / / initialize filter m_Filter . setInputFormat ( dataset ) ; / / attempt to determine post - filtering / / structure . If successful this can be passed on to instance / / listeners as a new FORMAT_AVAILABLE event . m_structurePassedOn = false ; try { if ( m_Filter . isOutputFormatDefined ( ) ) { / / System . err . println ( "Filter - passing on output format . . . " ) ; / / System . err . println ( m_Filter . getOutputFormat ( ) ) ; m_ie . setStructure ( m_Filter . getOutputFormat ( ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure . " + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } else { System . err . println ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure" ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . BATCH_FINISHED | | e . getInstance ( ) = = null ) { / / get the last instance ( if available ) try { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Stream finished . " ) ; } if ( e . getInstance ( ) ! = null ) { if ( m_Filter . input ( e . getInstance ( ) ) ) { Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / if there are instances pending for output don't want to send / / a batch finisehd at this point . . . / / System . err . println ( "Filter - in batch finisehd . . . " ) ; if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } else { m_ie . setStatus ( e . getStatus ( ) ) ; } notifyInstanceListeners ( m_ie ) ; } } } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Done . " ) ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } / / check for any pending instances that we might need to pass on try { if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Passing on pending instances . . . " ) ; } Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / TODO here is the problem I think m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; notifyInstanceListeners ( m_ie ) ; } while ( m_Filter . numPendingOutput ( ) > 0 ) { filteredInstance = m_Filter . output ( ) ; m_ie . setInstance ( filteredInstance ) ; / / System . err . println ( "Filter - sending pending . . . " ) ; if ( m_Filter . numPendingOutput ( ) = = 0 ) { m_ie . setStatus ( InstanceEvent . BATCH_FINISHED ) ; } else { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } notifyInstanceListeners ( m_ie ) ; } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Finished . " ) ; } } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details . " ) ; } ex . printStackTrace ( ) ; } } else { / / pass instance through the filter try { if ( ! m_Filter . input ( e . getInstance ( ) ) ) { / / System . err . println ( "Filter - inputing instance into filter . . . " ) ; / * if ( m_log ! = null ) { m_log . logMessage ( "ERROR : filter not ready to output instance" ) ; } * / / / quietly return . Filter might be able to output some instances / / once the batch is finished . return ; } / / collect output instance . Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance = = null ) { return ; } m_instanceCount + + ; if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; m_ie . setStatus ( e . getStatus ( ) ) ; if ( m_log ! = null & & ( m_instanceCount % 10000 = = 0 ) ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Received " + m_instanceCount + " instances . " ) ; } notifyInstanceListeners ( m_ie ) ; } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } } }
void test0 ( ) throws Throwable { CostBenefitAnalysisBeanInfo costBenefitAnalysisBeanInfo0 = new CostBenefitAnalysisBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = costBenefitAnalysisBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; loader0 . addDataSourceListener ( ( DataSourceListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addDataSourceListener ( DataSourceListener dsl ) { m_dataSetListeners . addElement ( dsl ) ; }
void test1 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ) ; loader0 . setBeanContext ( ( BeanContext ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBeanContext ( BeanContext bc ) { m_beanContext = bc ; m_design = m_beanContext . isDesignTime ( ) ; if ( m_design ) { appearanceDesign ( ) ; } else { java . awt . GraphicsEnvironment ge = java . awt . GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; if ( ! ge . isHeadless ( ) ) { appearanceFinal ( ) ; } } }
void test3 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ) ; loader0 . removeVetoableChangeListener ( "or" , ( VetoableChangeListener ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeVetoableChangeListener ( String name , VetoableChangeListener vcl ) { m_bcSupport . removeVetoableChangeListener ( name , vcl ) ; }
void test4 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; SubstringLabeler substringLabeler0 = new SubstringLabeler ( ) ; loader0 . removeInstanceListener ( ( InstanceListener ) substringLabeler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeInstanceListener ( InstanceListener ipl ) ; Instances outputFormat ( ) throws Exception ; Instance outputPeek ( ) throws Exception ; }
void test5 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; BeanContext beanContext0 = loader0 . getBeanContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanContext getBeanContext ( ) { return m_beanContext ; }
void test6 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ) ; loader0 . removePropertyChangeListener ( "55 ! d3cxp + 838 ] = t & FW1" , ( PropertyChangeListener ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test7 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; TextViewer textViewer0 = new TextViewer ( ) ; loader0 . removeDataSourceListener ( ( DataSourceListener ) textViewer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeDataSourceListener ( DataSourceListener dsl ) { m_dataSetListeners . remove ( dsl ) ; }
void test8 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; Filter filter0 = new Filter ( ) ; loader0 . addInstanceListener ( ( InstanceListener ) filter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addInstanceListener ( InstanceListener ipl ) ; void removeInstanceListener ( InstanceListener ipl ) ; Instances outputFormat ( ) throws Exception ; Instance outputPeek ( ) throws Exception ; }
void test9 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; BasicLabelUI basicLabelUI0 = new BasicLabelUI ( ) ; loader0 . addPropertyChangeListener ( "" , ( PropertyChangeListener ) basicLabelUI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test10 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; FlowByExpression flowByExpression0 = new FlowByExpression ( ) ; BeanVisual beanVisual0 = flowByExpression0 . getVisual ( ) ; loader0 . setVisual ( beanVisual0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setVisual ( BeanVisual newVisual ) { m_visual = newVisual ; }
void test11 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; loader0 . addVetoableChangeListener ( " > 'g * ) WQvtSO` - | , 34O | " , ( VetoableChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addVetoableChangeListener ( String name , VetoableChangeListener vcl ) { m_bcSupport . addVetoableChangeListener ( name , vcl ) ; }
void test0 ( ) throws Throwable { AttributeSummarizerBeanInfo attributeSummarizerBeanInfo0 = new AttributeSummarizerBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = attributeSummarizerBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return m_hidden ; }
void test1 ( ) throws Throwable { AttributeSummarizerBeanInfo attributeSummarizerBeanInfo0 = new AttributeSummarizerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = attributeSummarizerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { PredictionAppenderCustomizer predictionAppenderCustomizer0 = new PredictionAppenderCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void customizerClosing ( ) { m_dataVis . setOffscreenXAxis ( m_xAxisBack ) ; m_dataVis . setOffscreenWidth ( m_widthBack ) ; m_dataVis . setOffscreenHeight ( m_heightBack ) ; m_dataVis . setOffscreenAdditionalOpts ( m_optsBack ) ; m_dataVis . setOffscreenRendererName ( m_rendererNameBack ) ; }
void test1 ( ) throws Throwable { PredictionAppenderCustomizer predictionAppenderCustomizer0 = new PredictionAppenderCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test2 ( ) throws Throwable { PredictionAppenderCustomizer predictionAppenderCustomizer0 = new PredictionAppenderCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test3 ( ) throws Throwable { PredictionAppenderCustomizer predictionAppenderCustomizer0 = new PredictionAppenderCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test4 ( ) throws Throwable { PredictionAppenderCustomizer predictionAppenderCustomizer0 = new PredictionAppenderCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test5 ( ) throws Throwable { PredictionAppenderCustomizer predictionAppenderCustomizer0 = new PredictionAppenderCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test0 ( ) throws Throwable { ImageSaverCustomizer imageSaverCustomizer0 = new ImageSaverCustomizer ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; imageSaverCustomizer0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { ImageSaverCustomizer imageSaverCustomizer0 = new ImageSaverCustomizer ( ) ; imageSaverCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { ImageSaverCustomizer imageSaverCustomizer0 = new ImageSaverCustomizer ( ) ; imageSaverCustomizer0 . setParentWindow ( ( Window ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { AbstractDataSourceBeanInfo abstractDataSourceBeanInfo0 = new AbstractDataSourceBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = abstractDataSourceBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setVisual ( BeanVisual newVisual ) { m_visual = newVisual ; }
void test5 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test6 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyDataListeners ( DataSetEvent tse ) { ArrayList < DataSourceListener > l ; ( this ) { l = ( ArrayList < DataSourceListener > ) m_dataListeners . clone ( ) ; } if ( l . size ( ) > 0 ) { for ( int i = 0 ; i < l . size ( ) ; i + + ) { l . get ( i ) . acceptDataSet ( tse ) ; } } }
void test9 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAnimatedIconPath ( ) { return m_animatedIconPath ; }
void test10 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test16 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test17 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptDataSet ( DataSetEvent e ) { / / ignore structure only events if ( e . isStructureOnly ( ) ) { return ; } m_visualizeDataSet = new Instances ( e . getDataSet ( ) ) ; if ( m_visualizeDataSet . classIndex ( ) < 0 ) { m_visualizeDataSet . setClassIndex ( m_visualizeDataSet . numAttributes ( ) - 1 ) ; } if ( ! m_design ) { try { setInstances ( m_visualizeDataSet ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } else { if ( m_headlessEvents ! = null ) { m_headlessEvents = new ArrayList < EventObject > ( ) ; m_headlessEvents . add ( e ) ; } } / / pass on the event to any listeners notifyDataSetListeners ( e ) ; renderOffscreenImage ( e ) ; }
void test19 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test20 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test21 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test23 ( ) throws Throwable { ClassValuePicker classValuePicker0 = new ClassValuePicker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test2 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test5 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test6 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test8 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test9 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test11 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test12 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test14 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test16 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test17 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test18 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test19 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test20 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test21 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test22 ( ) throws Throwable { CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { ClustererPerformanceEvaluatorBeanInfo clustererPerformanceEvaluatorBeanInfo0 = new ClustererPerformanceEvaluatorBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = clustererPerformanceEvaluatorBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { SerializedModelSaverBeanInfo serializedModelSaverBeanInfo0 = new SerializedModelSaverBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = serializedModelSaverBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanDescriptor getBeanDescriptor ( ) { return new BeanDescriptor ( weka . filters . unsupervised . attribute . AddUserFields . class , weka . gui . filters . AddUserFieldsCustomizer . class ) ; }
void test1 ( ) throws Throwable { SerializedModelSaverBeanInfo serializedModelSaverBeanInfo0 = new SerializedModelSaverBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = serializedModelSaverBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "The base for the expansion constant . " , ( Classifier ) null , ( Instances ) null ) ; incrementalClassifierEvent0 . setStructure ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test1 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "" ) ; Instance instance0 = incrementalClassifierEvent0 . getCurrentInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instance getCurrentInstance ( ) { return m_currentInstance ; }
void test2 ( ) throws Throwable { ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression ( ) ; IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "Class for doing classification using regression methods . Class is binarized and one regression model is built for each class value . For more information , see , for example\n\nE . Frank , Y . Wang , S . Inglis , G . Holmes , I . H . Witten ( 1998 ) . Using model trees for classification . Machine Learning . 32 ( 1 ) : 63 - 76 . " , ( Classifier ) classificationViaRegression0 , ( Instance ) null , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test3 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "The base for the expansion constant . " , ( Classifier ) null , ( Instances ) null ) ; incrementalClassifierEvent0 . setClassifier ( ( Classifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test4 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "The number of optimization runs . " ) ; Classifier classifier0 = incrementalClassifierEvent0 . getClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Classifier getClassifier ( ) { return m_Classifier ; }
void test5 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "The number of optimization runs . " ) ; incrementalClassifierEvent0 . setStatus ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test6 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "Implementation of the voted perceptron algorithm by Freund and Schapire . Globally replaces all missing values , and transforms nominal attributes into binary ones . \n\nFor more information , see : \n\nY . Freund , R . E . Schapire : Large margin classification using the perceptron algorithm . In : 11th Annual Conference on Computational Learning Theory , New York , NY , 209 - 217 , 1998 . " ) ; int int0 = incrementalClassifierEvent0 . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test7 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "The number of optimization runs . " ) ; Instances instances0 = incrementalClassifierEvent0 . getStructure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instances getStructure ( ) { return m_structure ; }
void test8 ( ) throws Throwable { IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent ( ( Object ) "" ) ; double [ ] doubleArray0 = new double [ 8 ] ; DenseInstance denseInstance0 = new DenseInstance ( 0 . 0 , doubleArray0 ) ; incrementalClassifierEvent0 . setCurrentInstance ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; TextEvent textEvent0 = new TextEvent ( object0 , " { q ; eM ( @N887 } fz~R + Sq" , " { q ; eM ( @N887 } fz~R + Sq" ) ; String string0 = textEvent0 . getTextTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTextTitle ( ) { return m_textTitle ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; TextEvent textEvent0 = new TextEvent ( object0 , " { q ; eM ( @N887 } fz~R + Sq" , " { q ; eM ( @N887 } fz~R + Sq" ) ; String string0 = textEvent0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test0 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test1 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test6 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test14 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppendPredictedProbabilities ( ) { return m_appendProbabilities ; }
void test15 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test16 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test19 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptClassifier ( IncrementalClassifierEvent ce ) { try { if ( ce . getStatus ( ) = = IncrementalClassifierEvent . NEW_BATCH ) { / / m_eval = new Evaluation ( ce . getCurrentInstance ( ) . dataset ( ) ) ; m_eval = new Evaluation ( ce . getStructure ( ) ) ; m_eval . useNoPriors ( ) ; m_dataLegend = new Vector ( ) ; m_reset = true ; m_dataPoint = new double [ 0 ] ; Instances inst = ce . getStructure ( ) ; System . err . println ( "NEW BATCH" ) ; m_instanceCount = 0 ; if ( m_windowSize > 0 ) { m_window = new LinkedList < Instance > ( ) ; m_windowEval = new Evaluation ( ce . getStructure ( ) ) ; m_windowEval . useNoPriors ( ) ; m_windowedPreds = new LinkedList < double [ ] > ( ) ; if ( m_logger ! = null ) { m_logger . logMessage ( statusMessagePrefix ( ) + " [ IncrementalClassifierEvaluator ] Chart output using windowed " + "evaluation over " + m_windowSize + " instances" ) ; } } if ( m_logger ! = null ) { m_logger . statusMessage ( statusMessagePrefix ( ) + "IncrementalClassifierEvaluator : started processing . . . " ) ; m_logger . logMessage ( statusMessagePrefix ( ) + " [ IncrementalClassifierEvaluator ] " + statusMessagePrefix ( ) + " started processing . . . " ) ; } / * if ( inst . classIndex ( ) > = 0 ) { if ( inst . attribute ( inst . classIndex ( ) ) . isNominal ( ) ) { if ( inst . isMissing ( inst . classIndex ( ) ) ) { m_dataLegend . addElement ( "Confidence" ) ; } else { m_dataLegend . addElement ( "Accuracy" ) ; } } else { if ( inst . isMissing ( inst . classIndex ( ) ) ) { m_dataLegend . addElement ( "Prediction" ) ; } else { m_dataLegend . addElement ( "RRSE" ) ; } } } * / } else { if ( m_instanceCount > 0 & & m_instanceCount % m_statusFrequency = = 0 ) { if ( m_logger ! = null ) { m_logger . statusMessage ( statusMessagePrefix ( ) + "Processed " + m_instanceCount + " instances . " ) ; } } m_instanceCount + + ; Instance inst = ce . getCurrentInstance ( ) ; if ( inst ! = null ) { / / if ( inst . attribute ( inst . classIndex ( ) ) . isNominal ( ) ) { double [ ] dist = ce . getClassifier ( ) . distributionForInstance ( inst ) ; double pred = 0 ; if ( ! inst . isMissing ( inst . classIndex ( ) ) ) { if ( m_outputInfoRetrievalStats ) { / / store predictions so AUC etc can be output . m_eval . evaluateModelOnceAndRecordPrediction ( dist , inst ) ; } else { m_eval . evaluateModelOnce ( dist , inst ) ; } if ( m_windowSize > 0 ) { m_windowEval . evaluateModelOnce ( dist , inst ) ; m_window . addFirst ( inst ) ; m_windowedPreds . addFirst ( dist ) ; if ( m_instanceCount > m_windowSize ) { / / "forget" the oldest prediction Instance oldest = m_window . removeLast ( ) ; double [ ] oldDist = m_windowedPreds . removeLast ( ) ; oldest . setWeight ( - oldest . weight ( ) ) ; m_windowEval . evaluateModelOnce ( oldDist , oldest ) ; oldest . setWeight ( - oldest . weight ( ) ) ; } } } else { pred = ce . getClassifier ( ) . classifyInstance ( inst ) ; } if ( inst . classIndex ( ) > = 0 ) { / / need to check that the class is not missing if ( inst . attribute ( inst . classIndex ( ) ) . isNominal ( ) ) { if ( ! inst . isMissing ( inst . classIndex ( ) ) ) { if ( m_dataPoint . length < 2 ) { m_dataPoint = new double [ 3 ] ; m_dataLegend . addElement ( "Accuracy" ) ; m_dataLegend . addElement ( "RMSE ( prob ) " ) ; m_dataLegend . addElement ( "Kappa" ) ; } / / int classV = ( int ) inst . value ( inst . classIndex ( ) ) ; if ( m_windowSize > 0 ) { m_dataPoint [ 1 ] = m_windowEval . rootMeanSquaredError ( ) ; m_dataPoint [ 2 ] = m_windowEval . kappa ( ) ; } else { m_dataPoint [ 1 ] = m_eval . rootMeanSquaredError ( ) ; m_dataPoint [ 2 ] = m_eval . kappa ( ) ; } / / int maxO = Utils . maxIndex ( dist ) ; / / if ( maxO = = classV ) { / / dist [ classV ] = - 1 ; / / maxO = Utils . maxIndex ( dist ) ; / / } / / m_dataPoint [ 1 ] - = dist [ maxO ] ; } else { if ( m_dataPoint . length < 1 ) { m_dataPoint = new double [ 1 ] ; m_dataLegend . addElement ( "Confidence" ) ; } } double primaryMeasure = 0 ; if ( ! inst . isMissing ( inst . classIndex ( ) ) ) { if ( m_windowSize > 0 ) { primaryMeasure = 1 . 0 - m_windowEval . errorRate ( ) ; } else { primaryMeasure = 1 . 0 - m_eval . errorRate ( ) ; } } else { / / record confidence as the primary measure / / ( another possibility would be entropy of / / the distribution , or perhaps average / / confidence ) primaryMeasure = dist [ Utils . maxIndex ( dist ) ] ; } / / double [ ] dataPoint = new double [ 1 ] ; m_dataPoint [ 0 ] = primaryMeasure ; / / double min = 0 ; double max = 100 ; / * ChartEvent e = new ChartEvent ( IncrementalClassifierEvaluator . this , m_dataLegend , min , max , dataPoint ) ; * / m_ce . setLegendText ( m_dataLegend ) ; m_ce . setMin ( 0 ) ; m_ce . setMax ( 1 ) ; m_ce . setDataPoint ( m_dataPoint ) ; m_ce . setReset ( m_reset ) ; m_reset = false ; } else { / / numeric class if ( m_dataPoint . length < 1 ) { m_dataPoint = new double [ 1 ] ; if ( inst . isMissing ( inst . classIndex ( ) ) ) { m_dataLegend . addElement ( "Prediction" ) ; } else { m_dataLegend . addElement ( "RMSE" ) ; } } if ( ! inst . isMissing ( inst . classIndex ( ) ) ) { double update ; if ( ! inst . isMissing ( inst . classIndex ( ) ) ) { if ( m_windowSize > 0 ) { update = m_windowEval . rootMeanSquaredError ( ) ; } else { update = m_eval . rootMeanSquaredError ( ) ; } } else { update = pred ; } m_dataPoint [ 0 ] = update ; if ( update > m_max ) { m_max = update ; } if ( update < m_min ) { m_min = update ; } } m_ce . setLegendText ( m_dataLegend ) ; m_ce . setMin ( ( inst . isMissing ( inst . classIndex ( ) ) ? m_min : 0 ) ) ; m_ce . setMax ( m_max ) ; m_ce . setDataPoint ( m_dataPoint ) ; m_ce . setReset ( m_reset ) ; m_reset = false ; } notifyChartListeners ( m_ce ) ; } if ( ce . getStatus ( ) = = IncrementalClassifierEvent . BATCH_FINISHED | | inst = = null ) { if ( m_logger ! = null ) { m_logger . logMessage ( " [ IncrementalClassifierEvaluator ] " + statusMessagePrefix ( ) + " Finished processing . " ) ; m_logger . statusMessage ( statusMessagePrefix ( ) + "Done . " ) ; } / / save memory if using windowed evaluation for charting m_windowEval = null ; m_window = null ; m_windowedPreds = null ; if ( m_textListeners . size ( ) > 0 ) { String textTitle = ce . getClassifier ( ) . getClass ( ) . getName ( ) ; textTitle = textTitle . substring ( textTitle . lastIndexOf ( ' . ' ) + 1 , textTitle . length ( ) ) ; String results = " = = = Performance information = = = \n\n" + "Scheme : " + textTitle + "\n" + "Relation : " + m_eval . getHeader ( ) . relationName ( ) + "\n\n" + m_eval . toSummaryString ( ) ; if ( m_eval . getHeader ( ) . classIndex ( ) > = 0 & & m_eval . getHeader ( ) . classAttribute ( ) . isNominal ( ) & & ( m_outputInfoRetrievalStats ) ) { results + = "\n" + m_eval . toClassDetailsString ( ) ; } if ( m_eval . getHeader ( ) . classIndex ( ) > = 0 & & m_eval . getHeader ( ) . classAttribute ( ) . isNominal ( ) ) { results + = "\n" + m_eval . toMatrixString ( ) ; } textTitle = "Results : " + textTitle ; TextEvent te = new TextEvent ( this , results , textTitle ) ; notifyTextListeners ( te ) ; } } } } } catch ( Exception ex ) { if ( m_logger ! = null ) { m_logger . logMessage ( " [ IncrementalClassifierEvaluator ] " + statusMessagePrefix ( ) + " Error processing prediction " + ex . getMessage ( ) ) ; m_logger . statusMessage ( statusMessagePrefix ( ) + "ERROR : problem processing prediction ( see log for details ) " ) ; } ex . printStackTrace ( ) ; stop ( ) ; } }
void test21 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test23 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test24 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test25 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test26 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test27 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test28 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test29 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test30 ( ) throws Throwable { PredictionAppender predictionAppender0 = new PredictionAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test1 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventGeneratable ( String eventName ) { if ( m_listenees . size ( ) = = 0 ) { return false ; } boolean ok = false ; for ( Object o : m_listenees ) { if ( o instanceof EventConstraints ) { if ( ( ( EventConstraints ) o ) . eventGeneratable ( "dataSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "trainingSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "testSet" ) ) { ok = true ; break ; } } } return ok ; }
void test7 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test12 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test14 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test16 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test19 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test20 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test21 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setWrappedAlgorithm ( Object algorithm ) { if ( ! ( algorithm instanceof weka . filters . Filter ) ) { throw new IllegalArgumentException ( algorithm . getClass ( ) + " : incorrect " + "type of algorithm ( Filter ) " ) ; } setFilter ( ( weka . filters . Filter ) algorithm ) ; }
void test22 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test23 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test24 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void connectionNotification ( String eventName , Object source ) { if ( connectionAllowed ( eventName ) ) { m_listenees . add ( source ) ; } }
void test25 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test26 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test28 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test29 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test30 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test31 ( ) throws Throwable { Clusterer clusterer0 = new Clusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { CrossValidationFoldMakerBeanInfo crossValidationFoldMakerBeanInfo0 = new CrossValidationFoldMakerBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = crossValidationFoldMakerBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test1 ( ) throws Throwable { CrossValidationFoldMakerBeanInfo crossValidationFoldMakerBeanInfo0 = new CrossValidationFoldMakerBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = crossValidationFoldMakerBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassValuePickerBeanInfo classValuePickerBeanInfo0 = new ClassValuePickerBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = classValuePickerBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { ClassValuePickerBeanInfo classValuePickerBeanInfo0 = new ClassValuePickerBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = classValuePickerBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return m_hidden ; }
void test2 ( ) throws Throwable { ClassValuePickerBeanInfo classValuePickerBeanInfo0 = new ClassValuePickerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = classValuePickerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ModelPerformanceChartBeanInfo modelPerformanceChartBeanInfo0 = new ModelPerformanceChartBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = modelPerformanceChartBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { ModelPerformanceChartBeanInfo modelPerformanceChartBeanInfo0 = new ModelPerformanceChartBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = modelPerformanceChartBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanDescriptor getBeanDescriptor ( ) { return new BeanDescriptor ( weka . filters . unsupervised . attribute . AddUserFields . class , weka . gui . filters . AddUserFieldsCustomizer . class ) ; }
void test0 ( ) throws Throwable { NoteBeanInfo noteBeanInfo0 = new NoteBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = noteBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test1 ( ) throws Throwable { NoteBeanInfo noteBeanInfo0 = new NoteBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = noteBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return m_hidden ; }
void test0 ( ) throws Throwable { InstanceStreamToBatchMakerBeanInfo instanceStreamToBatchMakerBeanInfo0 = new InstanceStreamToBatchMakerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = instanceStreamToBatchMakerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { SubstringLabelerCustomizer substringLabelerCustomizer0 = new SubstringLabelerCustomizer ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; substringLabelerCustomizer0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getY ( ) { return m_y ; }
void test1 ( ) throws Throwable { SubstringLabelerCustomizer substringLabelerCustomizer0 = new SubstringLabelerCustomizer ( ) ; substringLabelerCustomizer0 . closingCancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closingCancel ( ) { / / pass on the notification to the customizer so that / / it can revert to previous settings for the object being / / edited , if neccessary if ( m_Customizer ! = null ) { m_Customizer . closingCancel ( ) ; } }
void test2 ( ) throws Throwable { SubstringLabelerCustomizer substringLabelerCustomizer0 = new SubstringLabelerCustomizer ( ) ; substringLabelerCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test3 ( ) throws Throwable { SubstringLabelerCustomizer substringLabelerCustomizer0 = new SubstringLabelerCustomizer ( ) ; substringLabelerCustomizer0 . setParentWindow ( ( Window ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test4 ( ) throws Throwable { SubstringLabelerCustomizer substringLabelerCustomizer0 = new SubstringLabelerCustomizer ( ) ; substringLabelerCustomizer0 . setObject ( ( Object ) "0 Normal Kernels . \nStandardDev = 334 . 6952 Precision = 2008 . 1709033267648 \nMean = 0\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test0 ( ) throws Throwable { ThresholdDataEvent thresholdDataEvent0 = new ThresholdDataEvent ( ( Object ) "1 . 0 , 1 . 0 , 1 . 0 , 1 . 0" , ( PlotData2D ) null ) ; Attribute attribute0 = thresholdDataEvent0 . getClassAttribute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attribute getClassAttribute ( ) { return m_classAttribute ; }
void test1 ( ) throws Throwable { Object object0 = RenderingHints . VALUE_RENDER_QUALITY ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 1 ) ; PlotData2D plotData2D0 = new PlotData2D ( instances0 ) ; ThresholdDataEvent thresholdDataEvent0 = new ThresholdDataEvent ( object0 , plotData2D0 ) ; PlotData2D plotData2D1 = thresholdDataEvent0 . getDataSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCindex ( ) { return m_cIndex ; }
void test0 ( ) throws Throwable { ShadowBorder shadowBorder0 = new ShadowBorder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBorderOpaque ( ) { return true ; }
void test1 ( ) throws Throwable { ShadowBorder shadowBorder0 = new ShadowBorder ( 1306 ) ; JTextField jTextField0 = new JTextField ( ) ; Insets insets0 = jTextField0 . getInsets ( ) ; shadowBorder0 . getBorderInsets ( ( Component ) null , insets0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { ShadowBorder shadowBorder0 = new ShadowBorder ( 1306 ) ; boolean boolean0 = shadowBorder0 . isBorderOpaque ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBorderOpaque ( ) { return true ; }
void test3 ( ) throws Throwable { ShadowBorder shadowBorder0 = new ShadowBorder ( 1306 ) ; Rectangle rectangle0 = shadowBorder0 . getInteriorRectangle ( ( Component ) null , 1306 , 1306 , 1306 , 1306 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ClustererBeanInfo clustererBeanInfo0 = new ClustererBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = clustererBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanDescriptor getBeanDescriptor ( ) { return new BeanDescriptor ( weka . filters . unsupervised . attribute . AddUserFields . class , weka . gui . filters . AddUserFieldsCustomizer . class ) ; }
void test1 ( ) throws Throwable { ClustererBeanInfo clustererBeanInfo0 = new ClustererBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = clustererBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeansInOutputs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Integer [ ] integerArray0 = new Integer [ 5 ] ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) metaBean0 , "" , 564 , 564 , integerArray0 ) ; boolean boolean0 = metaBean0 . outputsContains ( beanInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . setAssociatedConnections ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getInputs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; SysErrLog sysErrLog0 = new SysErrLog ( ) ; metaBean0 . setLog ( ( Logger ) sysErrLog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getOutputs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; boolean boolean0 = metaBean0 . inputsContains ( ( BeanInstance ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . useDefaultVisual ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test9 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . setInputs ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeanInfoOutputs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test11 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver ( ) ; BeanVisual beanVisual0 = serializedModelSaver0 . getVisual ( ) ; ImageIcon imageIcon0 = beanVisual0 . getStaticIcon ( ) ; metaBean0 . setSubFlowPreview ( imageIcon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; boolean boolean0 = metaBean0 . connectionAllowed ( "m^t } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; String string0 = metaBean0 . getCustomName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Integer [ ] integerArray0 = new Integer [ 1 ] ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) metaBean0 , "qA6Ns ) 9" , 0 , 88 , integerArray0 ) ; boolean boolean0 = metaBean0 . subFlowContains ( beanInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getAssociatedConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test16 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . connectionNotification ( " / * * \n" , " . dat" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test17 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getSubFlow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test18 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; BeanVisual beanVisual0 = metaBean0 . getVisual ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIconPath ( ) { return m_iconPath ; }
void test19 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . disconnectionNotification ( "LlU" , "LlU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeanInfoInputs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test21 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeansInSubFlow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeansInInputs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test23 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; metaBean0 . setSubFlow ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test24 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . getOriginalCoords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test25 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test26 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeanInfoSubFlow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test27 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Integer [ ] integerArray0 = new Integer [ 10 ] ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) metaBean0 , ( String ) null , 65 , 1020 , integerArray0 ) ; metaBean0 . shiftBeans ( beanInstance0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test28 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Integer [ ] integerArray0 = new Integer [ 9 ] ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) metaBean0 , "" , 1072 , 1121 , integerArray0 ) ; metaBean0 . shiftBeans ( beanInstance0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test29 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . restoreBeans ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test30 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; boolean boolean0 = metaBean0 . eventGeneratable ( " / * * \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test31 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test32 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; boolean boolean0 = metaBean0 . isBusy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test33 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Enumeration < Object > enumeration0 = metaBean0 . enumerateRequests ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test35 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; metaBean0 . performRequest ( "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test36 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ( BeanContextServices ) null ) ; metaBean0 . removePropertyChangeListenersSubFlow ( ( PropertyChangeListener ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test37 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI ( ) ; metaBean0 . addPropertyChangeListenersSubFlow ( ( PropertyChangeListener ) basicRootPaneUI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test38 ( ) throws Throwable { MetaBean metaBean0 = new MetaBean ( ) ; Class < ? > class0 = GraphListener . class ; boolean boolean0 = metaBean0 . canAcceptConnection ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ScatterPlotMatrixBeanInfo scatterPlotMatrixBeanInfo0 = new ScatterPlotMatrixBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = scatterPlotMatrixBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { AbstractTrainAndTestSetProducerBeanInfo abstractTrainAndTestSetProducerBeanInfo0 = new AbstractTrainAndTestSetProducerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = abstractTrainAndTestSetProducerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test5 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test8 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test9 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test10 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test11 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test12 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test14 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test15 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test16 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test19 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptInstance ( InstanceEvent e ) { / / to do ! if ( m_filterThread ! = null ) { String messg = " [ Filter ] " + statusMessagePrefix ( ) + " is currently batch processing ! " ; if ( m_log ! = null ) { m_log . logMessage ( messg ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "WARNING : Filter is currently batch processing . " ) ; } else { System . err . println ( messg ) ; } return ; } if ( ! ( m_Filter instanceof StreamableFilter ) ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " ERROR : " + m_Filter . getClass ( ) . getName ( ) + "can't process streamed instances ; can't continue" ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR : Can't process streamed instances ; can't continue . " ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . FORMAT_AVAILABLE ) { try { m_instanceCount = 0 ; / / notifyInstanceListeners ( e ) ; / / Instances dataset = e . getInstance ( ) . dataset ( ) ; Instances dataset = e . getStructure ( ) ; if ( m_Filter instanceof SupervisedFilter ) { / / defualt to last column if no class is set if ( dataset . classIndex ( ) < 0 ) { dataset . setClassIndex ( dataset . numAttributes ( ) - 1 ) ; } } / / initialize filter m_Filter . setInputFormat ( dataset ) ; / / attempt to determine post - filtering / / structure . If successful this can be passed on to instance / / listeners as a new FORMAT_AVAILABLE event . m_structurePassedOn = false ; try { if ( m_Filter . isOutputFormatDefined ( ) ) { / / System . err . println ( "Filter - passing on output format . . . " ) ; / / System . err . println ( m_Filter . getOutputFormat ( ) ) ; m_ie . setStructure ( m_Filter . getOutputFormat ( ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure . " + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } else { System . err . println ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure" ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . BATCH_FINISHED | | e . getInstance ( ) = = null ) { / / get the last instance ( if available ) try { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Stream finished . " ) ; } if ( e . getInstance ( ) ! = null ) { if ( m_Filter . input ( e . getInstance ( ) ) ) { Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / if there are instances pending for output don't want to send / / a batch finisehd at this point . . . / / System . err . println ( "Filter - in batch finisehd . . . " ) ; if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } else { m_ie . setStatus ( e . getStatus ( ) ) ; } notifyInstanceListeners ( m_ie ) ; } } } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Done . " ) ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } / / check for any pending instances that we might need to pass on try { if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Passing on pending instances . . . " ) ; } Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / TODO here is the problem I think m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; notifyInstanceListeners ( m_ie ) ; } while ( m_Filter . numPendingOutput ( ) > 0 ) { filteredInstance = m_Filter . output ( ) ; m_ie . setInstance ( filteredInstance ) ; / / System . err . println ( "Filter - sending pending . . . " ) ; if ( m_Filter . numPendingOutput ( ) = = 0 ) { m_ie . setStatus ( InstanceEvent . BATCH_FINISHED ) ; } else { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } notifyInstanceListeners ( m_ie ) ; } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Finished . " ) ; } } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details . " ) ; } ex . printStackTrace ( ) ; } } else { / / pass instance through the filter try { if ( ! m_Filter . input ( e . getInstance ( ) ) ) { / / System . err . println ( "Filter - inputing instance into filter . . . " ) ; / * if ( m_log ! = null ) { m_log . logMessage ( "ERROR : filter not ready to output instance" ) ; } * / / / quietly return . Filter might be able to output some instances / / once the batch is finished . return ; } / / collect output instance . Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance = = null ) { return ; } m_instanceCount + + ; if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; m_ie . setStatus ( e . getStatus ( ) ) ; if ( m_log ! = null & & ( m_instanceCount % 10000 = = 0 ) ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Received " + m_instanceCount + " instances . " ) ; } notifyInstanceListeners ( m_ie ) ; } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } } }
void test21 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test22 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptInstance ( InstanceEvent e ) { / / to do ! if ( m_filterThread ! = null ) { String messg = " [ Filter ] " + statusMessagePrefix ( ) + " is currently batch processing ! " ; if ( m_log ! = null ) { m_log . logMessage ( messg ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "WARNING : Filter is currently batch processing . " ) ; } else { System . err . println ( messg ) ; } return ; } if ( ! ( m_Filter instanceof StreamableFilter ) ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " ERROR : " + m_Filter . getClass ( ) . getName ( ) + "can't process streamed instances ; can't continue" ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR : Can't process streamed instances ; can't continue . " ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . FORMAT_AVAILABLE ) { try { m_instanceCount = 0 ; / / notifyInstanceListeners ( e ) ; / / Instances dataset = e . getInstance ( ) . dataset ( ) ; Instances dataset = e . getStructure ( ) ; if ( m_Filter instanceof SupervisedFilter ) { / / defualt to last column if no class is set if ( dataset . classIndex ( ) < 0 ) { dataset . setClassIndex ( dataset . numAttributes ( ) - 1 ) ; } } / / initialize filter m_Filter . setInputFormat ( dataset ) ; / / attempt to determine post - filtering / / structure . If successful this can be passed on to instance / / listeners as a new FORMAT_AVAILABLE event . m_structurePassedOn = false ; try { if ( m_Filter . isOutputFormatDefined ( ) ) { / / System . err . println ( "Filter - passing on output format . . . " ) ; / / System . err . println ( m_Filter . getOutputFormat ( ) ) ; m_ie . setStructure ( m_Filter . getOutputFormat ( ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure . " + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } else { System . err . println ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure" ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . BATCH_FINISHED | | e . getInstance ( ) = = null ) { / / get the last instance ( if available ) try { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Stream finished . " ) ; } if ( e . getInstance ( ) ! = null ) { if ( m_Filter . input ( e . getInstance ( ) ) ) { Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / if there are instances pending for output don't want to send / / a batch finisehd at this point . . . / / System . err . println ( "Filter - in batch finisehd . . . " ) ; if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } else { m_ie . setStatus ( e . getStatus ( ) ) ; } notifyInstanceListeners ( m_ie ) ; } } } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Done . " ) ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } / / check for any pending instances that we might need to pass on try { if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Passing on pending instances . . . " ) ; } Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / TODO here is the problem I think m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; notifyInstanceListeners ( m_ie ) ; } while ( m_Filter . numPendingOutput ( ) > 0 ) { filteredInstance = m_Filter . output ( ) ; m_ie . setInstance ( filteredInstance ) ; / / System . err . println ( "Filter - sending pending . . . " ) ; if ( m_Filter . numPendingOutput ( ) = = 0 ) { m_ie . setStatus ( InstanceEvent . BATCH_FINISHED ) ; } else { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } notifyInstanceListeners ( m_ie ) ; } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Finished . " ) ; } } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details . " ) ; } ex . printStackTrace ( ) ; } } else { / / pass instance through the filter try { if ( ! m_Filter . input ( e . getInstance ( ) ) ) { / / System . err . println ( "Filter - inputing instance into filter . . . " ) ; / * if ( m_log ! = null ) { m_log . logMessage ( "ERROR : filter not ready to output instance" ) ; } * / / / quietly return . Filter might be able to output some instances / / once the batch is finished . return ; } / / collect output instance . Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance = = null ) { return ; } m_instanceCount + + ; if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; m_ie . setStatus ( e . getStatus ( ) ) ; if ( m_log ! = null & & ( m_instanceCount % 10000 = = 0 ) ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Received " + m_instanceCount + " instances . " ) ; } notifyInstanceListeners ( m_ie ) ; } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } } }
void test23 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test24 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test25 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test26 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test27 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test28 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test29 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test30 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBusy ( ) { return false ; }
void test31 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test32 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test33 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test34 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test35 ( ) throws Throwable { ClassAssigner classAssigner0 = new ClassAssigner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassColumn ( ) { return m_classColumn ; }
void test0 ( ) throws Throwable { JLabel jLabel0 = new JLabel ( "9o / ! kpl% { pg" ) ; Integer [ ] integerArray0 = new Integer [ 8 ] ; BeanInstance beanInstance0 = new BeanInstance ( ( JComponent ) jLabel0 , "9o / ! kpl% { pg" , 69 , 69 , integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) { return m_x ; }
void test8 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; BeanVisual beanVisual0 = loader0 . getVisual ( ) ; Integer integer0 = JLayeredPane . FRAME_CONTENT_LAYER ; BeanInstance . removeBeanInstances ( ( JComponent ) beanVisual0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeBeanInstances ( JComponent container , Integer tab ) { if ( tab > = 0 & & tab < TABBED_COMPONENTS . size ( ) ) { System . out . println ( "Removing vector of beans at index : " + tab ) ; removeAllBeansFromContainer ( container , tab ) ; TABBED_COMPONENTS . remove ( tab . intValue ( ) ) ; } }
void test9 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; JInternalFrame . JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame . JDesktopIcon ( jInternalFrame0 ) ; Integer [ ] integerArray0 = new Integer [ 3 ] ; integerArray0 [ 0 ] = ( Integer ) 0 ; BeanInstance . removeBeanInstances ( ( JComponent ) jInternalFrame_JDesktopIcon0 , integerArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeBeanInstances ( JComponent container , Integer tab ) { if ( tab > = 0 & & tab < TABBED_COMPONENTS . size ( ) ) { System . out . println ( "Removing vector of beans at index : " + tab ) ; removeAllBeansFromContainer ( container , tab ) ; TABBED_COMPONENTS . remove ( tab . intValue ( ) ) ; } }
void test15 ( ) throws Throwable { JLabel jLabel0 = new JLabel ( "9o / ! kpl% { pg" ) ; MetaBean metaBean0 = new MetaBean ( ) ; Vector < Object > vector0 = metaBean0 . getBeansInOutputs ( ) ; BeanInstance . appendBeans ( ( JComponent ) jLabel0 , ( Vector ) vector0 , 69 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendBeans ( JComponent container , Vector beans , int tab ) { if ( TABBED_COMPONENTS . size ( ) > 0 & & tab < TABBED_COMPONENTS . size ( ) ) { Vector components = TABBED_COMPONENTS . get ( tab ) ; / / for ( int i = 0 ; i < beans . size ( ) ; i + + ) { components . add ( beans . get ( i ) ) ; if ( container ! = null ) { Object bean = ( ( BeanInstance ) beans . elementAt ( i ) ) . getBean ( ) ; if ( Beans . isInstanceOf ( bean , JComponent . class ) ) { container . add ( ( JComponent ) bean ) ; } } } if ( container ! = null ) { container . revalidate ( ) ; container . repaint ( ) ; } } }
void test0 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test6 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRelationNameForFilename ( ) { return m_relationNameForFilename ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test6 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRelationNameForFilename ( ) { return m_relationNameForFilename ; }
void test8 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test9 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptInstance ( InstanceEvent e ) { / / to do ! if ( m_filterThread ! = null ) { String messg = " [ Filter ] " + statusMessagePrefix ( ) + " is currently batch processing ! " ; if ( m_log ! = null ) { m_log . logMessage ( messg ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "WARNING : Filter is currently batch processing . " ) ; } else { System . err . println ( messg ) ; } return ; } if ( ! ( m_Filter instanceof StreamableFilter ) ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " ERROR : " + m_Filter . getClass ( ) . getName ( ) + "can't process streamed instances ; can't continue" ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR : Can't process streamed instances ; can't continue . " ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . FORMAT_AVAILABLE ) { try { m_instanceCount = 0 ; / / notifyInstanceListeners ( e ) ; / / Instances dataset = e . getInstance ( ) . dataset ( ) ; Instances dataset = e . getStructure ( ) ; if ( m_Filter instanceof SupervisedFilter ) { / / defualt to last column if no class is set if ( dataset . classIndex ( ) < 0 ) { dataset . setClassIndex ( dataset . numAttributes ( ) - 1 ) ; } } / / initialize filter m_Filter . setInputFormat ( dataset ) ; / / attempt to determine post - filtering / / structure . If successful this can be passed on to instance / / listeners as a new FORMAT_AVAILABLE event . m_structurePassedOn = false ; try { if ( m_Filter . isOutputFormatDefined ( ) ) { / / System . err . println ( "Filter - passing on output format . . . " ) ; / / System . err . println ( m_Filter . getOutputFormat ( ) ) ; m_ie . setStructure ( m_Filter . getOutputFormat ( ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure . " + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } else { System . err . println ( " [ Filter ] " + statusMessagePrefix ( ) + " Error in obtaining post - filter structure" ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return ; } if ( e . getStatus ( ) = = InstanceEvent . BATCH_FINISHED | | e . getInstance ( ) = = null ) { / / get the last instance ( if available ) try { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Stream finished . " ) ; } if ( e . getInstance ( ) ! = null ) { if ( m_Filter . input ( e . getInstance ( ) ) ) { Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / if there are instances pending for output don't want to send / / a batch finisehd at this point . . . / / System . err . println ( "Filter - in batch finisehd . . . " ) ; if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } else { m_ie . setStatus ( e . getStatus ( ) ) ; } notifyInstanceListeners ( m_ie ) ; } } } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Done . " ) ; } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . getMessage ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } / / check for any pending instances that we might need to pass on try { if ( m_Filter . batchFinished ( ) & & m_Filter . numPendingOutput ( ) > 0 ) { if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Passing on pending instances . . . " ) ; } Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance ! = null ) { if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; / / TODO here is the problem I think m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; notifyInstanceListeners ( m_ie ) ; } while ( m_Filter . numPendingOutput ( ) > 0 ) { filteredInstance = m_Filter . output ( ) ; m_ie . setInstance ( filteredInstance ) ; / / System . err . println ( "Filter - sending pending . . . " ) ; if ( m_Filter . numPendingOutput ( ) = = 0 ) { m_ie . setStatus ( InstanceEvent . BATCH_FINISHED ) ; } else { m_ie . setStatus ( InstanceEvent . INSTANCE_AVAILABLE ) ; } notifyInstanceListeners ( m_ie ) ; } if ( m_log ! = null ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Finished . " ) ; } } } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details . " ) ; } ex . printStackTrace ( ) ; } } else { / / pass instance through the filter try { if ( ! m_Filter . input ( e . getInstance ( ) ) ) { / / System . err . println ( "Filter - inputing instance into filter . . . " ) ; / * if ( m_log ! = null ) { m_log . logMessage ( "ERROR : filter not ready to output instance" ) ; } * / / / quietly return . Filter might be able to output some instances / / once the batch is finished . return ; } / / collect output instance . Instance filteredInstance = m_Filter . output ( ) ; if ( filteredInstance = = null ) { return ; } m_instanceCount + + ; if ( ! m_structurePassedOn ) { / / pass on the new structure first m_ie . setStructure ( new Instances ( filteredInstance . dataset ( ) , 0 ) ) ; notifyInstanceListeners ( m_ie ) ; m_structurePassedOn = true ; } m_ie . setInstance ( filteredInstance ) ; m_ie . setStatus ( e . getStatus ( ) ) ; if ( m_log ! = null & & ( m_instanceCount % 10000 = = 0 ) ) { m_log . statusMessage ( statusMessagePrefix ( ) + "Received " + m_instanceCount + " instances . " ) ; } notifyInstanceListeners ( m_ie ) ; } catch ( Exception ex ) { stop ( ) ; / / stop all processing if ( m_log ! = null ) { m_log . logMessage ( " [ Filter ] " + statusMessagePrefix ( ) + ex . toString ( ) ) ; m_log . statusMessage ( statusMessagePrefix ( ) + "ERROR ( See log for details ) . " ) ; } ex . printStackTrace ( ) ; } } }
void test11 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test12 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setWrappedAlgorithm ( Object algorithm ) { if ( ! ( algorithm instanceof weka . filters . Filter ) ) { throw new IllegalArgumentException ( algorithm . getClass ( ) + " : incorrect " + "type of algorithm ( Filter ) " ) ; } setFilter ( ( weka . filters . Filter ) algorithm ) ; }
void test13 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRelationNameForFilename ( ) { return m_relationNameForFilename ; }
void test0 ( ) throws Throwable { SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { AssociatorBeanInfo associatorBeanInfo0 = new AssociatorBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = associatorBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanDescriptor getBeanDescriptor ( ) { return new BeanDescriptor ( weka . filters . unsupervised . attribute . AddUserFields . class , weka . gui . filters . AddUserFieldsCustomizer . class ) ; }
void test1 ( ) throws Throwable { AssociatorBeanInfo associatorBeanInfo0 = new AssociatorBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = associatorBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { AbstractTestSetProducerBeanInfo abstractTestSetProducerBeanInfo0 = new AbstractTestSetProducerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = abstractTestSetProducerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test1 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test3 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test4 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test6 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test7 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test8 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test9 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test11 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test12 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test13 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test14 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test15 ( ) throws Throwable { LogitBoost logitBoost0 = new LogitBoost ( ) ; ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test16 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test17 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test18 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test19 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test20 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventGeneratable ( String eventName ) { if ( m_listenees . size ( ) = = 0 ) { return false ; } boolean ok = false ; for ( Object o : m_listenees ) { if ( o instanceof EventConstraints ) { if ( ( ( EventConstraints ) o ) . eventGeneratable ( "dataSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "trainingSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "testSet" ) ) { ok = true ; break ; } } } return ok ; }
void test21 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExecutionSlots ( ) { return m_executionSlots ; }
void test0 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test1 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test2 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test3 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test5 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test6 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test8 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test9 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test11 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test12 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test13 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String property , String defaultValue ) { return PROPERTIES . getProperty ( property , defaultValue ) ; }
void test15 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test16 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test17 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test18 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test19 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test20 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test21 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test22 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test23 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test24 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test25 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test26 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test27 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test28 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test29 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test30 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test31 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test32 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenHeight ( ) { return m_height ; }
void test33 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenRendererName ( ) { return m_offscreenRendererName ; }
void test34 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test35 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test36 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test37 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test38 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test39 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test40 ( ) throws Throwable { ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOffscreenWidth ( ) { return m_width ; }
void test0 ( ) throws Throwable { SubstringReplacerCustomizer substringReplacerCustomizer0 = new SubstringReplacerCustomizer ( ) ; substringReplacerCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { SubstringReplacerCustomizer substringReplacerCustomizer0 = new SubstringReplacerCustomizer ( ) ; substringReplacerCustomizer0 . setEnvironment ( ( Environment ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { SubstringReplacerCustomizer substringReplacerCustomizer0 = new SubstringReplacerCustomizer ( ) ; substringReplacerCustomizer0 . setParentWindow ( ( Window ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { SubstringReplacerCustomizer substringReplacerCustomizer0 = new SubstringReplacerCustomizer ( ) ; substringReplacerCustomizer0 . closingCancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { SubstringReplacerCustomizer substringReplacerCustomizer0 = new SubstringReplacerCustomizer ( ) ; substringReplacerCustomizer0 . setObject ( ( Object ) "PanelUI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { FilteredClusterer filteredClusterer0 = new FilteredClusterer ( ) ; BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent ( ( Object ) " / mnt / fastdata / ac1gf / SF110 / dist / 107_weka / Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter . Like the clusterer , the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure . " , ( Clusterer ) filteredClusterer0 , ( DataSetEvent ) null , ( - 29 ) , ( - 29 ) , 0 ) ; int int0 = batchClustererEvent0 . getSetNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTestOrTrain ( ) { return m_testOrTrain ; }
void test1 ( ) throws Throwable { FilteredClusterer filteredClusterer0 = new FilteredClusterer ( ) ; BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent ( ( Object ) " / mnt / fastdata / ac1gf / SF110 / dist / 107_weka / Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter . Like the clusterer , the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure . " , ( Clusterer ) filteredClusterer0 , ( DataSetEvent ) null , ( - 29 ) , ( - 29 ) , 0 ) ; int int0 = batchClustererEvent0 . getTestOrTrain ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test2 ( ) throws Throwable { MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer ( ) ; BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent ( ( Object ) " [ ] " , ( Clusterer ) makeDensityBasedClusterer0 , ( DataSetEvent ) null , 9 , 0 , 0 ) ; batchClustererEvent0 . getTestSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test3 ( ) throws Throwable { MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer ( ) ; BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent ( ( Object ) " [ ] " , ( Clusterer ) makeDensityBasedClusterer0 , ( DataSetEvent ) null , 9 , 0 , 0 ) ; int int0 = batchClustererEvent0 . getMaxSetNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSetNumber ( ) { return m_setNumber ; }
void test4 ( ) throws Throwable { MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer ( ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "8034" , ( Instances ) null ) ; BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent ( ( Object ) "0 . 0" , ( Clusterer ) makeDensityBasedClusterer0 , dataSetEvent0 , ( - 1 ) , 500 , 500 ) ; MakeDensityBasedClusterer makeDensityBasedClusterer1 = ( MakeDensityBasedClusterer ) batchClustererEvent0 . getClusterer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTestOrTrain ( ) { return m_testOrTrain ; }
void test1 ( ) throws Throwable { KnowledgeFlowApp knowledgeFlowApp0 = KnowledgeFlowApp . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Main getSingleton ( ) { return m_MainSingleton ; }
void test4 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test0 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test2 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { Saver saver0 = new Saver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { AppenderBeanInfo appenderBeanInfo0 = new AppenderBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = appenderBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { AttributeSummarizerCustomizer attributeSummarizerCustomizer0 = new AttributeSummarizerCustomizer ( ) ; attributeSummarizerCustomizer0 . setEnvironment ( ( Environment ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { AttributeSummarizerCustomizer attributeSummarizerCustomizer0 = new AttributeSummarizerCustomizer ( ) ; attributeSummarizerCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { AttributeSummarizerCustomizer attributeSummarizerCustomizer0 = new AttributeSummarizerCustomizer ( ) ; attributeSummarizerCustomizer0 . setParentWindow ( ( Window ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { PluginManager pluginManager0 = new PluginManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Set < String > set0 = PluginManager . getPluginNamesOfType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < String > getPluginNamesOfType ( String interfaceName ) { if ( PLUGINS . get ( interfaceName ) ! = null ) { return PLUGINS . get ( interfaceName ) . keySet ( ) ; } return null ; }
void test0 ( ) throws Throwable { SubstringLabelerBeanInfo substringLabelerBeanInfo0 = new SubstringLabelerBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = substringLabelerBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test1 ( ) throws Throwable { SubstringLabelerBeanInfo substringLabelerBeanInfo0 = new SubstringLabelerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = substringLabelerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; double [ ] doubleArray0 = new double [ 8 ] ; SparseInstance sparseInstance0 = new SparseInstance ( 0 . 0 , doubleArray0 ) ; InstanceEvent instanceEvent0 = new InstanceEvent ( object0 , ( Instance ) sparseInstance0 , 0 ) ; instanceEvent0 . getStructure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; double [ ] doubleArray0 = new double [ 8 ] ; SparseInstance sparseInstance0 = new SparseInstance ( 0 . 0 , doubleArray0 ) ; InstanceEvent instanceEvent0 = new InstanceEvent ( object0 , ( Instance ) sparseInstance0 , 0 ) ; SparseInstance sparseInstance1 = ( SparseInstance ) instanceEvent0 . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test2 ( ) throws Throwable { Object object0 = new Object ( ) ; double [ ] doubleArray0 = new double [ 8 ] ; SparseInstance sparseInstance0 = new SparseInstance ( 0 . 0 , doubleArray0 ) ; InstanceEvent instanceEvent0 = new InstanceEvent ( object0 , ( Instance ) sparseInstance0 , 0 ) ; DenseInstance denseInstance0 = new DenseInstance ( 0 . 0 , doubleArray0 ) ; instanceEvent0 . setInstance ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test3 ( ) throws Throwable { InstanceEvent instanceEvent0 = new InstanceEvent ( ( Object ) "0" ) ; int int0 = instanceEvent0 . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test4 ( ) throws Throwable { Object object0 = new Object ( ) ; double [ ] doubleArray0 = new double [ 8 ] ; SparseInstance sparseInstance0 = new SparseInstance ( 0 . 0 , doubleArray0 ) ; InstanceEvent instanceEvent0 = new InstanceEvent ( object0 , ( Instance ) sparseInstance0 , 0 ) ; instanceEvent0 . setStatus ( 255 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test5 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "kor" , arrayList0 , 1088 ) ; InstanceEvent instanceEvent0 = new InstanceEvent ( ( Object ) "kor" , instances0 ) ; instanceEvent0 . setStructure ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return m_status ; }
void test0 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFontSizeAdjust ( ) { return m_fontSizeAdjust ; }
void test1 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFontSizeAdjust ( ) { return m_fontSizeAdjust ; }
void test2 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFontSizeAdjust ( ) { return m_fontSizeAdjust ; }
void test3 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFontSizeAdjust ( ) { return m_fontSizeAdjust ; }
void test4 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFontSizeAdjust ( ) { return m_fontSizeAdjust ; }
void test5 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNoteText ( ) { return m_noteText ; }
void test6 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFontSizeAdjust ( ) { return m_fontSizeAdjust ; }
void test7 ( ) throws Throwable { Note note0 = new Note ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNoteText ( ) { return m_noteText ; }
void test0 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test6 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test8 ( ) throws Throwable { TestSetMaker testSetMaker0 = new TestSetMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test1 ( ) throws Throwable { CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test2 ( ) throws Throwable { CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test3 ( ) throws Throwable { CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void customizerClosing ( ) { m_dataVis . setOffscreenXAxis ( m_xAxisBack ) ; m_dataVis . setOffscreenWidth ( m_widthBack ) ; m_dataVis . setOffscreenHeight ( m_heightBack ) ; m_dataVis . setOffscreenAdditionalOpts ( m_optsBack ) ; m_dataVis . setOffscreenRendererName ( m_rendererNameBack ) ; }
void test4 ( ) throws Throwable { CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test5 ( ) throws Throwable { CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test0 ( ) throws Throwable { DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "date" , ( Instances ) null ) ; boolean boolean0 = dataSetEvent0 . isStructureOnly ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStructureOnly ( ) { return m_structureOnly ; }
void test1 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "jRzZ9L - d | [ 8N - d8nz" , arrayList0 , 0 ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "9186" , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStructureOnly ( ) { return m_structureOnly ; }
void test2 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "jRzZ9L - d | [ 8N - d8nz" , arrayList0 , 0 ) ; DenseInstance denseInstance0 = new DenseInstance ( 7 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; DataSetEvent dataSetEvent0 = new DataSetEvent ( ( Object ) "9186" , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStructureOnly ( ) { return m_structureOnly ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; LinkedList < AssociationRule > linkedList0 = new LinkedList < AssociationRule > ( ) ; AssociationRules associationRules0 = new AssociationRules ( ( List < AssociationRule > ) linkedList0 ) ; BatchAssociationRulesEvent batchAssociationRulesEvent0 = new BatchAssociationRulesEvent ( object0 , associationRules0 ) ; AssociationRules associationRules1 = batchAssociationRulesEvent0 . getRules ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AssociationRules getRules ( ) { return m_rules ; }
void test0 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test6 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test8 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test11 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setVisual ( BeanVisual newVisual ) { m_visual = newVisual ; }
void test12 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventGeneratable ( String eventName ) { if ( m_listenees . size ( ) = = 0 ) { return false ; } boolean ok = false ; for ( Object o : m_listenees ) { if ( o instanceof EventConstraints ) { if ( ( ( EventConstraints ) o ) . eventGeneratable ( "dataSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "trainingSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "testSet" ) ) { ok = true ; break ; } } } return ok ; }
void test13 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test15 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test16 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test19 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test20 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setWrappedAlgorithm ( Object algorithm ) { if ( ! ( algorithm instanceof weka . filters . Filter ) ) { throw new IllegalArgumentException ( algorithm . getClass ( ) + " : incorrect " + "type of algorithm ( Filter ) " ) ; } setFilter ( ( weka . filters . Filter ) algorithm ) ; }
void test21 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test22 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test23 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test24 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test25 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test26 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test27 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test28 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test29 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test30 ( ) throws Throwable { Associator associator0 = new Associator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { ModelPerformanceChartCustomizer modelPerformanceChartCustomizer0 = new ModelPerformanceChartCustomizer ( ) ; Environment environment0 = new Environment ( ) ; modelPerformanceChartCustomizer0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { ModelPerformanceChartCustomizer modelPerformanceChartCustomizer0 = new ModelPerformanceChartCustomizer ( ) ; modelPerformanceChartCustomizer0 . setParentWindow ( ( Window ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { ModelPerformanceChartCustomizer modelPerformanceChartCustomizer0 = new ModelPerformanceChartCustomizer ( ) ; modelPerformanceChartCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ) ; textViewer0 . removeVetoableChangeListener ( "W & _E" , ( VetoableChangeListener ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeVetoableChangeListener ( String name , VetoableChangeListener vcl ) { m_bcSupport . removeVetoableChangeListener ( name , vcl ) ; }
void test5 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ) ; textViewer0 . addVetoableChangeListener ( "" , ( VetoableChangeListener ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addVetoableChangeListener ( String name , VetoableChangeListener vcl ) { m_bcSupport . addVetoableChangeListener ( name , vcl ) ; }
void test6 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; BeanVisual beanVisual0 = textViewer0 . getVisual ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanVisual getVisual ( ) { return m_visual ; }
void test7 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appearanceFinal ( ) { java . awt . GraphicsEnvironment ge = java . awt . GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; removeAll ( ) ; if ( ! ge . isHeadless ( ) ) { setLayout ( new BorderLayout ( ) ) ; setUpFinal ( ) ; } }
void test8 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . removeTextListener ( ( TextListener ) textViewer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeTextListener ( TextListener cl ) { m_textListeners . remove ( cl ) ; }
void test9 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; Enumeration < Object > enumeration0 = textViewer0 . enumerateRequests ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test11 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . addTextListener ( ( TextListener ) textViewer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addTextListener ( TextListener cl ) { m_textListeners . addElement ( cl ) ; }
void test12 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . setLog ( ( Logger ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return ( ( JComponent ) m_bean ) . getWidth ( ) ; }
void test13 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport ( ) ; textViewer0 . addPropertyChangeListener ( "W & _E" , ( PropertyChangeListener ) beanContextServicesSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test15 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stop ( ) { if ( isRunning ( ) ) { m_ScriptThread . stopScript ( ) ; m_ScriptThread = null ; notifyScriptFinishedListeners ( new ScriptExecutionEvent ( this , Type . STOPPED ) ) ; } }
void test16 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test17 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBusy ( ) { return false ; }
void test18 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; BeanContext beanContext0 = textViewer0 . getBeanContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanContext getBeanContext ( ) { return m_beanContext ; }
void test20 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; List < EventObject > list0 = textViewer0 . retrieveHeadlessEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test22 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . disconnectionNotification ( "Class is missing : " , "verticalAlignment" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void disconnectionNotification ( String eventName , Object source ) { m_listenees . remove ( source ) ; }
void test23 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; textViewer0 . removePropertyChangeListener ( "Lix } @~CisLe" , ( PropertyChangeListener ) defaultTableColumnModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test25 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . connectionNotification ( "General purpose text display . " , " - 976" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void connectionNotification ( String eventName , Object source ) { if ( connectionAllowed ( eventName ) ) { m_listenees . add ( source ) ; } }
void test26 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test28 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; TextEvent textEvent0 = new TextEvent ( ( Object ) "selectedIcon" , "selectedIcon" , "" ) ; textViewer0 . acceptText ( textEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptText ( TextEvent e ) { if ( m_outText = = null ) { setUpResultHistory ( ) ; } StringBuffer result = new StringBuffer ( ) ; result . append ( e . getText ( ) ) ; / / m_resultsString . append ( e . getText ( ) ) ; / / m_outText . setText ( m_resultsString . toString ( ) ) ; String name = ( new SimpleDateFormat ( "HH : mm : ss - " ) ) . format ( new Date ( ) ) ; name + = e . getTextTitle ( ) ; / / System . err . println ( name ) ; if ( name . length ( ) > 30 ) { name = name . substring ( 0 , 30 ) ; } if ( m_outText ! = null ) { / / see if there is an entry with this name already in the list - / / could happen if two items with the same name arrive at the same second int mod = 2 ; String nameOrig = new String ( name ) ; while ( m_history . getNamedBuffer ( name ) ! = null ) { name = new String ( nameOrig + "" + mod ) ; mod + + ; } m_history . addResult ( name , result ) ; m_history . setSingle ( name ) ; } if ( m_headlessEvents ! = null ) { m_headlessEvents . add ( e ) ; } / / pass on the event to any listeners notifyTextListeners ( e ) ; }
void test29 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; TextEvent textEvent0 = new TextEvent ( ( Object ) "deletion" , "Incompatible value for relation - valued attribute . \n" , "Incompatible value for relation - valued attribute . \n" ) ; textViewer0 . acceptText ( textEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( Capability c ) { return m_Capabilities . handles ( c ) ; }
void test30 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; textViewer0 . processHeadlessEvents ( ( List < EventObject > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void processHeadlessEvents ( List < EventObject > headless ) { / / only process if we're not headless if ( ! java . awt . GraphicsEnvironment . isHeadless ( ) ) { m_processingHeadlessEvents = true ; for ( EventObject e : headless ) { if ( e instanceof DataSetEvent ) { acceptDataSet ( ( DataSetEvent ) e ) ; } } } m_processingHeadlessEvents = false ; }
void test33 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test34 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventGeneratable ( String eventName ) { if ( m_listenees . size ( ) = = 0 ) { return false ; } boolean ok = false ; for ( Object o : m_listenees ) { if ( o instanceof EventConstraints ) { if ( ( ( EventConstraints ) o ) . eventGeneratable ( "dataSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "trainingSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "testSet" ) ) { ok = true ; break ; } } } return ok ; }
void test35 ( ) throws Throwable { TextViewer textViewer0 = new TextViewer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventGeneratable ( String eventName ) { if ( m_listenees . size ( ) = = 0 ) { return false ; } boolean ok = false ; for ( Object o : m_listenees ) { if ( o instanceof EventConstraints ) { if ( ( ( EventConstraints ) o ) . eventGeneratable ( "dataSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "trainingSet" ) | | ( ( EventConstraints ) o ) . eventGeneratable ( "testSet" ) ) { ok = true ; break ; } } } return ok ; }
void test0 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test1 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test2 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test3 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test4 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test6 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test7 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test8 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test9 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test11 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStartMessage ( ) ; }
void test12 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test13 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test14 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test15 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test16 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test17 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test18 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void newFileSelected ( ) throws Exception { if ( ! ( m_Loader instanceof DatabaseLoader ) ) { newStructure ( ) ; / * / / try to load structure ( if possible ) and notify any listeners / / Set environment variables if ( m_Loader instanceof EnvironmentHandler & & m_env ! = null ) { try { ( ( EnvironmentHandler ) m_Loader ) . setEnvironment ( m_env ) ; } catch ( Exception ex ) { } } m_dataFormat = m_Loader . getStructure ( ) ; / / System . err . println ( m_dataFormat ) ; System . out . println ( " [ Loader ] Notifying listeners of instance structure avail . " ) ; notifyStructureAvailable ( m_dataFormat ) ; * / } }
void test19 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test20 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setWrappedAlgorithm ( Object algorithm ) { if ( ! ( algorithm instanceof weka . filters . Filter ) ) { throw new IllegalArgumentException ( algorithm . getClass ( ) + " : incorrect " + "type of algorithm ( Filter ) " ) ; } setFilter ( ( weka . filters . Filter ) algorithm ) ; }
void test21 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test22 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test23 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test24 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test25 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test26 ( ) throws Throwable { Loader loader0 = new Loader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { SorterCustomizer sorterCustomizer0 = new SorterCustomizer ( ) ; sorterCustomizer0 . setModifiedListener ( ( BeanCustomizer . ModifyListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { SorterCustomizer sorterCustomizer0 = new SorterCustomizer ( ) ; sorterCustomizer0 . closingCancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { SorterCustomizer sorterCustomizer0 = new SorterCustomizer ( ) ; sorterCustomizer0 . setParentWindow ( ( Window ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { SorterCustomizer sorterCustomizer0 = new SorterCustomizer ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; sorterCustomizer0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { SorterCustomizer sorterCustomizer0 = new SorterCustomizer ( ) ; sorterCustomizer0 . setObject ( ( Object ) "0 Normal Kernels . \nStandardDev = 337 . 9559 Precision = 2027 . 7354178280382 \nMean = 0\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { ClassifierPerformanceEvaluatorBeanInfo classifierPerformanceEvaluatorBeanInfo0 = new ClassifierPerformanceEvaluatorBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = classifierPerformanceEvaluatorBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return "GNUPlot" ; }
void test1 ( ) throws Throwable { ClassifierPerformanceEvaluatorBeanInfo classifierPerformanceEvaluatorBeanInfo0 = new ClassifierPerformanceEvaluatorBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = classifierPerformanceEvaluatorBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test2 ( ) throws Throwable { ClassifierPerformanceEvaluatorBeanInfo classifierPerformanceEvaluatorBeanInfo0 = new ClassifierPerformanceEvaluatorBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = classifierPerformanceEvaluatorBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test1 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test2 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test3 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptTestSet ( TestSetEvent e ) { Instances testSet = e . getTestSet ( ) ; DataSetEvent dse = new DataSetEvent ( this , testSet ) ; acceptDataSet ( dse ) ; }
void test4 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test5 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test6 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test7 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPreserveOrder ( ) { return m_preserveOrder ; }
void test8 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acceptTrainingSet ( TrainingSetEvent e ) { Instances trainingSet = e . getTrainingSet ( ) ; DataSetEvent dse = new DataSetEvent ( this , trainingSet ) ; acceptDataSet ( dse ) ; }
void test9 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test10 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPreserveOrder ( ) { return m_preserveOrder ; }
void test11 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test12 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test13 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test14 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test15 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test16 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test17 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test18 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test19 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test20 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test21 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performRequest ( String request ) { if ( request . compareTo ( "Show plot" ) = = 0 ) { try { / / popup visualize panel if ( ! m_framePoppedUp ) { m_framePoppedUp = true ; VisualizePanel vis = new VisualizePanel ( ) ; PlotData2D pd1 = new PlotData2D ( m_visualizeDataSet ) ; String relationName = m_visualizeDataSet . relationName ( ) ; / / A bit of a nasty hack . Allows producers of instances - based / / events to specify that the points should be connected if ( relationName . startsWith ( "__" ) ) { boolean [ ] connect = new boolean [ m_visualizeDataSet . numInstances ( ) ] ; for ( int i = 1 ; i < connect . length ; i + + ) { connect [ i ] = true ; } pd1 . setConnectPoints ( connect ) ; relationName = relationName . substring ( 2 ) ; } pd1 . setPlotName ( relationName ) ; try { vis . setMasterPlot ( pd1 ) ; } catch ( Exception ex ) { System . err . println ( "Problem setting up " + "visualization ( DataVisualizer ) " ) ; ex . printStackTrace ( ) ; } JFrame jf = new JFrame ( "Visualize" ) ; jf . setSize ( 800 , 600 ) ; jf . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; jf . getContentPane ( ) . add ( vis , BorderLayout . CENTER ) ; jf . addWindowListener ( new java . awt . event . WindowAdapter ( ) { void windowClosing ( java . awt . event . WindowEvent e ) { jf . dispose ( ) ; m_framePoppedUp = false ; } } ) ; jf . setVisible ( true ) ; m_popupFrame = jf ; } else { m_popupFrame . toFront ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; m_framePoppedUp = false ; } } else { throw new IllegalArgumentException ( request + " not supported ( DataVisualizer ) " ) ; } }
void test22 ( ) throws Throwable { CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCustomName ( ) { / / TODO Auto - generated method stub return m_visual . getText ( ) ; }
void test0 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIconPath ( ) { return m_iconPath ; }
void test1 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "_h5 | qgTdM" , "_h5 | qgTdM" , "_h5 | qgTdM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test2 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "y7WQgRqp - L ( < " , "y7WQgRqp - L ( < " , "y7WQgRqp - L ( < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test5 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "grestore" , "grestore" , "grestore" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIconPath ( ) { return m_iconPath ; }
void test7 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "E@Y * / n~$0 - ^ | p6" , "E@Y * / n~$0 - ^ | p6" , "E@Y * / n~$0 - ^ | p6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIconPath ( ) { return m_iconPath ; }
void test8 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( " , # * t ? n0 ? gi" , " , # * t ? n0 ? gi" , " , # * t ? n0 ? gi" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIconPath ( ) { return m_iconPath ; }
void test9 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( " . + t" , " . + t" , " . + t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test10 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAnimatedIconPath ( ) { return m_animatedIconPath ; }
void test11 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test12 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "E@Y * / n~$0 - ^ | p6" , "E@Y * / n~$0 - ^ | p6" , "E@Y * / n~$0 - ^ | p6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; String text = m_combo . getSelectedItem ( ) . toString ( ) ; if ( theEditor instanceof JTextField ) { text = ( ( JTextField ) theEditor ) . getText ( ) ; } return text ; }
void test13 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "weka / gui / beans / icons / " , "weka / gui / beans / icons / " , "weka / gui / beans / icons / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( "y7WQgRqp - L ( < " , "y7WQgRqp - L ( < " , "y7WQgRqp - L ( < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAnimatedIconPath ( ) { return m_animatedIconPath ; }
void test15 ( ) throws Throwable { BeanVisual beanVisual0 = new BeanVisual ( " ( \"0U > | ? 9J ? yJi { % , " , " ( \"0U > | ? 9J ? yJi { % , " , " ( \"0U > | ? 9J ? yJi { % , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { SubstringReplacerBeanInfo substringReplacerBeanInfo0 = new SubstringReplacerBeanInfo ( ) ; BeanDescriptor beanDescriptor0 = substringReplacerBeanInfo0 . getBeanDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return "GNUPlot" ; }
void test1 ( ) throws Throwable { SubstringReplacerBeanInfo substringReplacerBeanInfo0 = new SubstringReplacerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = substringReplacerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test1 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test2 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test3 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test4 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void newDataFormat ( DataSetEvent dse ) { if ( dse . getDataSet ( ) ! = null ) { / / System . err . println ( "Setting up column selection . . . . . . . . . " ) ; setUpColumnSelection ( m_classAssigner . getConnectedFormat ( ) ) ; } else { setUpStandardSelection ( ) ; } }
void test5 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test6 ( ) throws Throwable { ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void customizerClosing ( ) { m_dataVis . setOffscreenXAxis ( m_xAxisBack ) ; m_dataVis . setOffscreenWidth ( m_widthBack ) ; m_dataVis . setOffscreenHeight ( m_heightBack ) ; m_dataVis . setOffscreenAdditionalOpts ( m_optsBack ) ; m_dataVis . setOffscreenRendererName ( m_rendererNameBack ) ; }
void test0 ( ) throws Throwable { AbstractTrainingSetProducerBeanInfo abstractTrainingSetProducerBeanInfo0 = new AbstractTrainingSetProducerBeanInfo ( ) ; EventSetDescriptor [ ] eventSetDescriptorArray0 = abstractTrainingSetProducerBeanInfo0 . getEventSetDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventSetDescriptor [ ] getEventSetDescriptors ( ) { try { EventSetDescriptor [ ] esds = { new EventSetDescriptor ( DataSource . class , "instance" , InstanceListener . class , "acceptInstance" ) , new EventSetDescriptor ( DataSource . class , "dataSet" , DataSourceListener . class , "acceptDataSet" ) } ; return esds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { ClassValuePickerCustomizer classValuePickerCustomizer0 = new ClassValuePickerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . addPropertyChangeListener ( listener ) ; }
void test1 ( ) throws Throwable { ClassValuePickerCustomizer classValuePickerCustomizer0 = new ClassValuePickerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParentWindow ( Window parent ) { m_parent = parent ; }
void test2 ( ) throws Throwable { ClassValuePickerCustomizer classValuePickerCustomizer0 = new ClassValuePickerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setModifiedListener ( ModifyListener l ) { m_modifyL = l ; }
void test3 ( ) throws Throwable { ClassValuePickerCustomizer classValuePickerCustomizer0 = new ClassValuePickerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePropertyChangeListener ( PropertyChangeListener listener ) { m_propSupport . removePropertyChangeListener ( listener ) ; }
void test4 ( ) throws Throwable { ClassValuePickerCustomizer classValuePickerCustomizer0 = new ClassValuePickerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void customizerClosing ( ) { m_dataVis . setOffscreenXAxis ( m_xAxisBack ) ; m_dataVis . setOffscreenWidth ( m_widthBack ) ; m_dataVis . setOffscreenHeight ( m_heightBack ) ; m_dataVis . setOffscreenAdditionalOpts ( m_optsBack ) ; m_dataVis . setOffscreenRendererName ( m_rendererNameBack ) ; }
void test5 ( ) throws Throwable { ClassValuePickerCustomizer classValuePickerCustomizer0 = new ClassValuePickerCustomizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Object c ) { / / This should really call equals ( ) for comparison . boolean trueChange ; if ( getValue ( ) ! = null ) { trueChange = ( ! c . equals ( getValue ( ) ) ) ; } else trueChange = true ; m_Backup = m_Object ; m_Object = c ; if ( m_EditorComponent ! = null ) { m_EditorComponent . updateChildPropertySheet ( ) ; } if ( trueChange ) { m_Support . firePropertyChange ( "" , null , null ) ; } }
void test0 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
void test4 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; String string0 = topDownConstructor0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; String string0 = topDownConstructor0 . ballSplitterTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ballSplitterTipText ( ) { return "The BallSplitter algorithm set that would be used by the TopDown " + "BallTree constructor . " ; }
void test3 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; String string0 = topDownConstructor0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test4 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; Enumeration < Object > enumeration0 = topDownConstructor0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test5 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = ( PointsClosestToFurthestChildren ) topDownConstructor0 . getBallSplitter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test6 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; String [ ] stringArray0 = topDownConstructor0 . getOptions ( ) ; topDownConstructor0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test7 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; BallNode ballNode0 = new BallNode ( ( - 558 ) , ( - 558 ) , ( - 558 ) ) ; topDownConstructor0 . splitNodes ( ballNode0 , 1 , ( double ) ( - 558 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String containChildBallsTipText ( ) { return "Whether to contain fully the child balls . " ; }
void test9 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; BallNode ballNode0 = new BallNode ( ( - 363 ) , 3 , 0 ) ; topDownConstructor0 . splitNodes ( ballNode0 , ( - 1 ) , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumLeaves ( ) { return m_NumLeaves ; }
void test10 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; BallNode ballNode0 = new BallNode ( ( - 363 ) , 3 , 0 ) ; topDownConstructor0 . splitNodes ( ballNode0 , 367 , ( double ) ( - 363 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumLeaves ( ) { return m_NumLeaves ; }
void test15 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; BallNode ballNode0 = new BallNode ( ( - 3 ) , ( - 3 ) , ( - 3 ) ) ; topDownConstructor0 . processNodesAfterAddInstance ( ballNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test16 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; BallNode ballNode0 = new BallNode ( ( - 550 ) , ( - 550 ) , ( - 550 ) ) ; ballNode0 . m_Left = ( weka . core . neighboursearch . balltrees . BallNode ) ballNode0 ; topDownConstructor0 . processNodesAfterAddInstance ( ballNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test18 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; String [ ] stringArray0 = topDownConstructor0 . getOptions ( ) ; stringArray0 [ 2 ] = "The maximum number of instances allowed in a leaf . " ; topDownConstructor0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 18 ] ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( ) ; PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = new PointsClosestToFurthestChildren ( intArray0 , ( Instances ) null , euclideanDistance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = new PointsClosestToFurthestChildren ( ) ; String string0 = pointsClosestToFurthestChildren0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = new PointsClosestToFurthestChildren ( ) ; String string0 = pointsClosestToFurthestChildren0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test0 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test1 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; String [ ] stringArray0 = medianOfWidestDimension0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( " & @i + T$L6T4L : _7 < 9 ! g" , arrayList0 , 0 ) ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( instances0 ) ; MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( intArray0 , instances0 , euclideanDistance0 ) ; String string0 = medianOfWidestDimension0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test3 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; String string0 = medianOfWidestDimension0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test4 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; String string0 = medianOfWidestDimension0 . normalizeDimWidthsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test6 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; TechnicalInformation technicalInformation0 = medianOfWidestDimension0 . getTechnicalInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBibTex ( ) { String result ; Field field ; Vector < Field > list ; int i ; String value ; result = "@" + getType ( ) + " { " + getID ( ) + "" ; / / sort the fields list = new Vector < Field > ( ) ; Enumeration < Field > enm = fields ( ) ; while ( enm . hasMoreElements ( ) ) list . add ( enm . nextElement ( ) ) ; Collections . sort ( list ) ; / / list field = value pairs for ( i = 0 ; i < list . size ( ) ; i + + ) { field = ( Field ) list . get ( i ) ; if ( ! exists ( field ) ) continue ; value = getValue ( field ) ; value = value . replaceAll ( "\\~" , "\\\\~" ) ; result + = " , \n " + field + " = { " + value + " } " ; } result + = "\n } " ; / / additional informations ? Enumeration < TechnicalInformation > enm2 = additional ( ) ; while ( enm2 . hasMoreElements ( ) ) { result + = "\n\n" + ( ( TechnicalInformation ) enm2 . nextElement ( ) ) . toBibTex ( ) ; } return result ; }
void test7 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; Enumeration < Object > enumeration0 = medianOfWidestDimension0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test9 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; int [ ] intArray0 = new int [ 3 ] ; int int0 = medianOfWidestDimension0 . select ( 35 , intArray0 , 35 , 35 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test10 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( " & @i + T$L6T4L : _7 < 9 ! g" , arrayList0 , 0 ) ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( instances0 ) ; MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( intArray0 , instances0 , euclideanDistance0 ) ; double [ ] [ ] doubleArray0 = new double [ 5 ] [ 10 ] ; double [ ] doubleArray1 = new double [ 4 ] ; doubleArray1 [ 2 ] = ( double ) 1550 ; doubleArray0 [ 0 ] = doubleArray1 ; int int0 = medianOfWidestDimension0 . widestDim ( doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test11 ( ) throws Throwable { int [ ] intArray0 = new int [ 5 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "k6@" , arrayList0 , 1550 ) ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( ) ; MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( intArray0 , instances0 , euclideanDistance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNormalizeDimWidths ( ) { return m_NormalizeDimWidths ; }
void test1 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( 10 , 10 , 10 ) ; DenseInstance denseInstance0 = new DenseInstance ( 1 ) ; ballNode0 . setPivot ( ( Instance ) denseInstance0 ) ; DenseInstance denseInstance1 = ( DenseInstance ) BallNode . calcPivot ( ballNode0 , ballNode0 , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( 0 ) ; ballNode0 . setRadius ( ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getRadius ( ) { return m_Radius ; }
void test3 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( 10 , 10 , 10 ) ; String string0 = ballNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test4 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( 10 , 10 , 10 ) ; int int0 = ballNode0 . numInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test5 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( ( - 94 ) ) ; ballNode0 . setStartEndIndices ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStartEndIndices ( int start , int end ) { m_Start = start ; m_End = end ; m_NumInstances = end - start + 1 ; }
void test6 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( 1174 , 1174 , 1174 ) ; boolean boolean0 = ballNode0 . isALeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test7 ( ) throws Throwable { BallNode ballNode0 = new BallNode ( 1174 , 1174 , 1174 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isALeaf ( ) { return ( m_Left = = null & & m_Right = = null ) ; }
void test9 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "r^sKg8O5fCL_" , arrayList0 , 0 ) ; SparseInstance sparseInstance0 = new SparseInstance ( 0 ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( sparseInstance0 ) ; Attribute attribute0 = new Attribute ( "r^sKg8O5fCL_" , instances0 ) ; arrayList0 . add ( attribute0 ) ; instances0 . add ( ( Instance ) binarySparseInstance0 ) ; DenseInstance denseInstance0 = ( DenseInstance ) BallNode . calcCentroidPivot ( intArray0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "v7 ? Jt" , arrayList0 , 0 ) ; arrayList0 . add ( ( Attribute ) null ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( ( double ) 0 , intArray0 , 0 ) ; Attribute attribute0 = new Attribute ( "v7 ? Jt" , instances0 ) ; arrayList0 . add ( attribute0 ) ; instances0 . add ( ( Instance ) binarySparseInstance0 ) ; arrayList0 . add ( attribute0 ) ; DenseInstance denseInstance0 = ( DenseInstance ) BallNode . calcCentroidPivot ( 0 , 0 , intArray0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "r^sKg8O5fCL_" , arrayList0 , 0 ) ; SparseInstance sparseInstance0 = new SparseInstance ( 0 ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( sparseInstance0 ) ; instances0 . add ( ( Instance ) binarySparseInstance0 ) ; MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance ( instances0 ) ; double double0 = BallNode . calcRadius ( intArray0 , instances0 , ( Instance ) sparseInstance0 , ( DistanceFunction ) minkowskiDistance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean rangesSet ( ) { return ( m_Ranges ! = null ) ; }
void test0 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; BottomUpConstructor . TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0 . new TempNode ( ) ; String string0 = bottomUpConstructor_TempNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; TechnicalInformation technicalInformation0 = bottomUpConstructor0 . getTechnicalInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBibTex ( ) { String result ; Field field ; Vector < Field > list ; int i ; String value ; result = "@" + getType ( ) + " { " + getID ( ) + "" ; / / sort the fields list = new Vector < Field > ( ) ; Enumeration < Field > enm = fields ( ) ; while ( enm . hasMoreElements ( ) ) list . add ( enm . nextElement ( ) ) ; Collections . sort ( list ) ; / / list field = value pairs for ( i = 0 ; i < list . size ( ) ; i + + ) { field = ( Field ) list . get ( i ) ; if ( ! exists ( field ) ) continue ; value = getValue ( field ) ; value = value . replaceAll ( "\\~" , "\\\\~" ) ; result + = " , \n " + field + " = { " + value + " } " ; } result + = "\n } " ; / / additional informations ? Enumeration < TechnicalInformation > enm2 = additional ( ) ; while ( enm2 . hasMoreElements ( ) ) { result + = "\n\n" + ( ( TechnicalInformation ) enm2 . nextElement ( ) ) . toBibTex ( ) ; } return result ; }
void test2 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; String string0 = bottomUpConstructor0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test5 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; String string0 = bottomUpConstructor0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test12 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; BottomUpConstructor . TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0 . new TempNode ( ) ; int [ ] intArray0 = new int [ 30 ] ; bottomUpConstructor_TempNode0 . points = intArray0 ; String string0 = bottomUpConstructor_TempNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; String string0 = medianDistanceFromArbitraryPoint0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test1 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; String string0 = medianDistanceFromArbitraryPoint0 . randomSeedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test2 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; String string0 = medianDistanceFromArbitraryPoint0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test3 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = "" ; medianDistanceFromArbitraryPoint0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test4 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; Enumeration < Object > enumeration0 = medianDistanceFromArbitraryPoint0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test5 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; String [ ] stringArray0 = medianDistanceFromArbitraryPoint0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test6 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; double [ ] doubleArray0 = new double [ 7 ] ; int [ ] intArray0 = new int [ 6 ] ; int int0 = medianDistanceFromArbitraryPoint0 . partition ( doubleArray0 , intArray0 , 0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test8 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; double [ ] doubleArray0 = new double [ 7 ] ; doubleArray0 [ 0 ] = ( double ) ( - 1 ) ; int [ ] intArray0 = new int [ 6 ] ; int int0 = medianDistanceFromArbitraryPoint0 . partition ( doubleArray0 , intArray0 , 0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test10 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; double [ ] doubleArray0 = new double [ 9 ] ; int [ ] intArray0 = new int [ 1 ] ; int int0 = medianDistanceFromArbitraryPoint0 . select ( doubleArray0 , intArray0 , ( - 1 ) , ( - 1 ) , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomSeed ( ) { return m_RandomSeed ; }
void test0 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . ListNode middleOutConstructor_ListNode0 = middleOutConstructor0 . new ListNode ( 0 , ( double ) 0 ) ; String string0 = middleOutConstructor_ListNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test2 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; int [ ] intArray0 = new int [ 7 ] ; middleOutConstructor0 . setPoints ( middleOutConstructor_TempNode0 , 94 , 0 , intArray0 ) ; String string0 = middleOutConstructor_TempNode0 . points . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test3 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . MyIdxList middleOutConstructor_MyIdxList0 = middleOutConstructor0 . new MyIdxList ( 1638 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test5 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . MyIdxList middleOutConstructor_MyIdxList0 = middleOutConstructor0 . new MyIdxList ( ) ; double [ ] doubleArray0 = new double [ 8 ] ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( 5 . 932164139298549 , doubleArray0 ) ; double double0 = middleOutConstructor0 . calcRadius ( middleOutConstructor_MyIdxList0 , middleOutConstructor_MyIdxList0 , ( Instance ) binarySparseInstance0 , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test6 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; String string0 = middleOutConstructor_TempNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test7 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String string0 = middleOutConstructor0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test8 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String [ ] stringArray0 = middleOutConstructor0 . getOptions ( ) ; middleOutConstructor0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getContainChildBalls ( ) { return m_FullyContainChildBalls ; }
void test9 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; middleOutConstructor0 . setInstances ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test10 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String string0 = middleOutConstructor0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test11 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; Enumeration < Object > enumeration0 = middleOutConstructor0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test12 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String string0 = middleOutConstructor0 . initialAnchorRandomTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test15 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String string0 = middleOutConstructor0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test20 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createAnchorsHierarchy ( Vector < TempNode > anchors , int numAnchors , int startIdx , int endIdx ) throws Exception { TempNode anchr1 = m_RandomInitialAnchor ? getRandomAnchor ( startIdx , endIdx ) : getFurthestFromMeanAnchor ( startIdx , endIdx ) ; TempNode amax = anchr1 ; / / double maxradius = anchr1 . radius ; TempNode newAnchor ; Vector < double [ ] > anchorDistances = new Vector < double [ ] > ( numAnchors - 1 ) ; anchors . add ( anchr1 ) ; / / creating anchors while ( anchors . size ( ) < numAnchors ) { / / create new anchor newAnchor = new TempNode ( ) ; newAnchor . points = new MyIdxList ( ) ; Instance newpivot = m_Instances . instance ( ( ( ListNode ) amax . points . getFirst ( ) ) . idx ) ; newAnchor . anchor = newpivot ; newAnchor . idx = ( ( ListNode ) amax . points . getFirst ( ) ) . idx ; setInterAnchorDistances ( anchors , newAnchor , anchorDistances ) ; if ( stealPoints ( newAnchor , anchors , anchorDistances ) ) / / if points stolen newAnchor . radius = ( ( ListNode ) newAnchor . points . getFirst ( ) ) . distance ; else newAnchor . radius = 0 . 0 ; anchors . add ( newAnchor ) ; / / find new amax amax = ( TempNode ) anchors . elementAt ( 0 ) ; for ( int i = 1 ; i < anchors . size ( ) ; i + + ) { newAnchor = ( TempNode ) anchors . elementAt ( i ) ; if ( newAnchor . radius > amax . radius ) amax = newAnchor ; } / / end for } / / end while }
void test24 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; BallNode ballNode0 = middleOutConstructor0 . makeBallTreeNodes ( middleOutConstructor_TempNode0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test26 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; Vector < MiddleOutConstructor . TempNode > vector0 = new Vector < MiddleOutConstructor . TempNode > ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; Vector < double [ ] > vector1 = new Vector < double [ ] > ( ) ; middleOutConstructor0 . setInterAnchorDistances ( vector0 , middleOutConstructor_TempNode0 , vector1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test28 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; Vector < MiddleOutConstructor . TempNode > vector0 = new Vector < MiddleOutConstructor . TempNode > ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; Vector < double [ ] > vector1 = new Vector < double [ ] > ( ) ; double [ ] doubleArray0 = new double [ 7 ] ; vector1 . addElement ( doubleArray0 ) ; boolean boolean0 = middleOutConstructor0 . stealPoints ( middleOutConstructor_TempNode0 , ( Vector ) vector0 , ( Vector ) vector1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test30 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test31 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . MyIdxList middleOutConstructor_MyIdxList0 = middleOutConstructor0 . new MyIdxList ( ) ; int [ ] intArray0 = new int [ 9 ] ; middleOutConstructor0 . setInstanceList ( intArray0 ) ; middleOutConstructor_MyIdxList0 . insertReverseSorted ( 0 , 0 ) ; middleOutConstructor0 . checkIndicesList ( middleOutConstructor_MyIdxList0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkIndicesList ( MyIdxList list , int startidx , int endidx ) throws Exception { boolean found ; ListNode node ; for ( int i = 0 ; i < list . size ( ) ; i + + ) { node = ( ListNode ) list . get ( i ) ; found = false ; for ( int j = startidx ; j < = endidx ; j + + ) { if ( node . idx = = m_InstList [ j ] ) { found = true ; break ; } } if ( ! found ) throw new Exception ( "Error : Element " + node . idx + " of the list not in " + "the array . " + "\nArray : " + printInsts ( startidx , endidx ) + "\nList : " + printList ( list ) ) ; } }
void test32 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String string0 = middleOutConstructor0 . printList ( ( MiddleOutConstructor . MyIdxList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test34 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . MyIdxList middleOutConstructor_MyIdxList0 = middleOutConstructor0 . new MyIdxList ( ) ; int [ ] intArray0 = new int [ 9 ] ; middleOutConstructor_MyIdxList0 . insertReverseSorted ( 597 , 597 ) ; middleOutConstructor0 . setInstanceList ( intArray0 ) ; middleOutConstructor_MyIdxList0 . insertReverseSorted ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkIndicesList ( MyIdxList list , int startidx , int endidx ) throws Exception { boolean found ; ListNode node ; for ( int i = 0 ; i < list . size ( ) ; i + + ) { node = ( ListNode ) list . get ( i ) ; found = false ; for ( int j = startidx ; j < = endidx ; j + + ) { if ( node . idx = = m_InstList [ j ] ) { found = true ; break ; } } if ( ! found ) throw new Exception ( "Error : Element " + node . idx + " of the list not in " + "the array . " + "\nArray : " + printInsts ( startidx , endidx ) + "\nList : " + printList ( list ) ) ; } }
void test35 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; String string0 = middleOutConstructor_TempNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test36 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . TempNode middleOutConstructor_TempNode0 = middleOutConstructor0 . new TempNode ( ) ; int [ ] intArray0 = new int [ 7 ] ; middleOutConstructor0 . setPoints ( middleOutConstructor_TempNode0 , 94 , 0 , intArray0 ) ; String string0 = middleOutConstructor_TempNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test37 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . MyIdxList middleOutConstructor_MyIdxList0 = middleOutConstructor0 . new MyIdxList ( 1638 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test38 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; MiddleOutConstructor . MyIdxList middleOutConstructor_MyIdxList0 = middleOutConstructor0 . new MyIdxList ( ) ; middleOutConstructor_MyIdxList0 . insertReverseSorted ( 422 , 422 ) ; middleOutConstructor_MyIdxList0 . insertReverseSorted ( 422 , 422 ) ; middleOutConstructor_MyIdxList0 . checkSorting ( middleOutConstructor_MyIdxList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test0 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; String string0 = bottomUpConstructor0 . containChildBallsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getContainChildBalls ( ) { return m_FullyContainChildBalls ; }
void test1 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; int int0 = middleOutConstructor0 . getNumNodes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxRelativeLeafRadius ( ) { return m_MaxRelLeafRadius ; }
void test2 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( ) ; middleOutConstructor0 . setEuclideanDistanceFunction ( euclideanDistance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxRelativeLeafRadius ( ) { return m_MaxRelLeafRadius ; }
void test3 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; int int0 = topDownConstructor0 . getMaxDepth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getContainChildBalls ( ) { return m_FullyContainChildBalls ; }
void test4 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; String string0 = topDownConstructor0 . maxInstancesInLeafTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getContainChildBalls ( ) { return m_FullyContainChildBalls ; }
void test5 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; String string0 = bottomUpConstructor0 . maxRelativeLeafRadiusTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxRelativeLeafRadius ( ) { return m_MaxRelLeafRadius ; }
void test6 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; double double0 = topDownConstructor0 . getMaxRelativeLeafRadius ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getContainChildBalls ( ) { return m_FullyContainChildBalls ; }
void test7 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; Enumeration < Object > enumeration0 = bottomUpConstructor0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxInstancesInLeaf ( ) { return m_MaxInstancesInLeaf ; }
void test8 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String [ ] stringArray0 = middleOutConstructor0 . getOptions ( ) ; middleOutConstructor0 . setOptions ( stringArray0 ) ; TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; topDownConstructor0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialAnchorRandom ( ) { return m_RandomInitialAnchor ; }
void test9 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; int int0 = topDownConstructor0 . getNumLeaves ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxRelativeLeafRadius ( ) { return m_MaxRelLeafRadius ; }
void test10 ( ) throws Throwable { BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor ( ) ; bottomUpConstructor0 . setInstances ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getContainChildBalls ( ) { return m_FullyContainChildBalls ; }
void test11 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; int [ ] intArray0 = new int [ 1 ] ; topDownConstructor0 . setInstanceList ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMaxRelativeLeafRadius ( ) { return m_MaxRelLeafRadius ; }
void test13 ( ) throws Throwable { TopDownConstructor topDownConstructor0 = new TopDownConstructor ( ) ; topDownConstructor0 . setMaxRelativeLeafRadius ( 85 . 54915821071111 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxInstancesInLeaf ( ) { return m_MaxInstancesInLeaf ; }
void test15 ( ) throws Throwable { MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor ( ) ; String [ ] stringArray0 = middleOutConstructor0 . getOptions ( ) ; middleOutConstructor0 . setOptions ( stringArray0 ) ; middleOutConstructor0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxInstancesInLeaf ( ) { return m_MaxInstancesInLeaf ; }
void test0 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( ) ; medianDistanceFromArbitraryPoint0 . setEuclideanDistanceFunction ( euclideanDistance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String invertSelectionTipText ( ) { return "Whether to invert the selection . " ; }
void test2 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; Enumeration < Object > enumeration0 = medianDistanceFromArbitraryPoint0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test3 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; String [ ] stringArray0 = medianDistanceFromArbitraryPoint0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test4 ( ) throws Throwable { MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint ( ) ; int [ ] intArray0 = new int [ 9 ] ; medianDistanceFromArbitraryPoint0 . setInstanceList ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 1 ] ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "a < M : : hP : | `^Y" , arrayList0 , 1694 ) ; EuclideanDistance euclideanDistance0 = new EuclideanDistance ( instances0 ) ; MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( intArray0 , instances0 , euclideanDistance0 ) ; medianOfWidestDimension0 . setInstances ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test0 ( ) throws Throwable { SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide ( ) ; String string0 = slidingMidPointOfWidestSide0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide ( ) ; String string0 = slidingMidPointOfWidestSide0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide ( ) ; int [ ] intArray0 = new int [ 8 ] ; int int0 = slidingMidPointOfWidestSide0 . rearrangePoints ( intArray0 , 0 , ( - 1923 ) , ( - 1923 ) , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int rearrangePoints ( int [ ] indices , int startidx , int endidx , int splitDim , double splitVal ) { int tmp , left = startidx - 1 ; for ( int i = startidx ; i < = endidx ; i + + ) { if ( m_EuclideanDistance . valueIsSmallerEqual ( m_Instances . instance ( indices [ i ] ) , splitDim , splitVal ) ) { left + + ; tmp = indices [ left ] ; indices [ left ] = indices [ i ] ; indices [ i ] = tmp ; } / / end valueIsSmallerEqual } / / endfor return left + 1 ; }
void test1 ( ) throws Throwable { SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide ( ) ; MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension ( ) ; String [ ] stringArray0 = slidingMidPointOfWidestSide0 . getOptions ( ) ; midPointOfWidestDimension0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test3 ( ) throws Throwable { KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod ( ) ; Enumeration < Object > enumeration0 = kMeansInpiredMethod0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test6 ( ) throws Throwable { SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "6%j ) 6 < eG~1 d Y@" , arrayList0 , 1495 ) ; slidingMidPointOfWidestSide0 . setInstances ( instances0 ) ; double [ ] [ ] doubleArray0 = new double [ 9 ] [ 3 ] ; double [ ] doubleArray1 = new double [ 16 ] ; doubleArray0 [ 0 ] = doubleArray1 ; doubleArray1 [ 2 ] = ( double ) 1495 ; double [ ] [ ] doubleArray2 = new double [ 10 ] [ 4 ] ; doubleArray2 [ 0 ] = doubleArray0 [ 0 ] ; slidingMidPointOfWidestSide0 . setNodeWidthNormalization ( true ) ; int int0 = slidingMidPointOfWidestSide0 . widestDim ( doubleArray0 , doubleArray2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int widestDim ( double [ ] [ ] nodeRanges , double [ ] [ ] universe ) { int classIdx = m_Instances . classIndex ( ) ; double widest = 0 . 0 ; int w = - 1 ; if ( m_NormalizeNodeWidth ) { for ( int i = 0 ; i < nodeRanges . length ; i + + ) { double newWidest = nodeRanges [ i ] [ WIDTH ] / universe [ i ] [ WIDTH ] ; if ( newWidest > widest ) { if ( i = = classIdx ) continue ; widest = newWidest ; w = i ; } } } else { for ( int i = 0 ; i < nodeRanges . length ; i + + ) { if ( nodeRanges [ i ] [ WIDTH ] > widest ) { if ( i = = classIdx ) continue ; widest = nodeRanges [ i ] [ WIDTH ] ; w = i ; } } } return w ; }
void test7 ( ) throws Throwable { SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "6%j ) 6 < eG~1 d Y@" , arrayList0 , 1495 ) ; slidingMidPointOfWidestSide0 . setInstances ( instances0 ) ; double [ ] [ ] doubleArray0 = new double [ 9 ] [ 3 ] ; double [ ] doubleArray1 = new double [ 16 ] ; doubleArray0 [ 0 ] = doubleArray1 ; doubleArray1 [ 2 ] = ( double ) 1495 ; int int0 = slidingMidPointOfWidestSide0 . widestDim ( doubleArray0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int widestDim ( double [ ] [ ] nodeRanges , double [ ] [ ] universe ) { int classIdx = m_Instances . classIndex ( ) ; double widest = 0 . 0 ; int w = - 1 ; if ( m_NormalizeNodeWidth ) { for ( int i = 0 ; i < nodeRanges . length ; i + + ) { double newWidest = nodeRanges [ i ] [ WIDTH ] / universe [ i ] [ WIDTH ] ; if ( newWidest > widest ) { if ( i = = classIdx ) continue ; widest = newWidest ; w = i ; } } } else { for ( int i = 0 ; i < nodeRanges . length ; i + + ) { if ( nodeRanges [ i ] [ WIDTH ] > widest ) { if ( i = = classIdx ) continue ; widest = nodeRanges [ i ] [ WIDTH ] ; w = i ; } } } return w ; }
void test0 ( ) throws Throwable { KDTreeNode kDTreeNode0 = new KDTreeNode ( ) ; int int0 = kDTreeNode0 . getSplitDim ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test1 ( ) throws Throwable { KDTreeNode kDTreeNode0 = new KDTreeNode ( ( - 1606 ) , ( - 1 ) , 0 , ( double [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test2 ( ) throws Throwable { KDTreeNode kDTreeNode0 = new KDTreeNode ( ) ; double double0 = kDTreeNode0 . getSplitValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test3 ( ) throws Throwable { KDTreeNode kDTreeNode0 = new KDTreeNode ( ) ; int int0 = kDTreeNode0 . numInstances ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test4 ( ) throws Throwable { KDTreeNode kDTreeNode0 = new KDTreeNode ( ) ; String string0 = kDTreeNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test5 ( ) throws Throwable { KDTreeNode kDTreeNode0 = new KDTreeNode ( ) ; kDTreeNode0 . m_Left = ( weka . core . neighboursearch . kdtrees . KDTreeNode ) kDTreeNode0 ; boolean boolean0 = kDTreeNode0 . isALeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isALeaf ( ) { return ( m_Left = = null & & m_Right = = null ) ; }
void test6 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 7 ] [ 6 ] ; KDTreeNode kDTreeNode0 = new KDTreeNode ( 0 , 0 , 0 , doubleArray0 , doubleArray0 ) ; boolean boolean0 = kDTreeNode0 . isALeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numInstances ( ) { return m_Instances . size ( ) ; }
void test0 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; String string0 = medianOfWidestDimension0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; String string0 = medianOfWidestDimension0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test4 ( ) throws Throwable { MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension ( ) ; int [ ] intArray0 = new int [ 34 ] ; int int0 = medianOfWidestDimension0 . select ( ( - 600 ) , intArray0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResultSet select ( String query ) throws SQLException { if ( ! isConnected ( ) ) throw new IllegalStateException ( "Not connected , please connect first ! " ) ; Statement statement ; if ( ! isCursorScrollable ( ) ) statement = m_Connection . createStatement ( ResultSet . TYPE_FORWARD_ONLY , ResultSet . CONCUR_READ_ONLY ) ; else statement = m_Connection . createStatement ( getSupportedCursorScrollType ( ) , ResultSet . CONCUR_READ_ONLY ) ; ResultSet result = statement . executeQuery ( query ) ; return result ; }
void test0 ( ) throws Throwable { MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension ( ) ; String string0 = midPointOfWidestDimension0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension ( ) ; String string0 = midPointOfWidestDimension0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension ( ) ; int [ ] intArray0 = new int [ 11 ] ; int int0 = midPointOfWidestDimension0 . rearrangePoints ( intArray0 , 0 , ( - 1923 ) , ( - 1923 ) , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int rearrangePoints ( int [ ] indices , int startidx , int endidx , int splitDim , double splitVal ) { int tmp , left = startidx - 1 ; for ( int i = startidx ; i < = endidx ; i + + ) { if ( m_EuclideanDistance . valueIsSmallerEqual ( m_Instances . instance ( indices [ i ] ) , splitDim , splitVal ) ) { left + + ; tmp = indices [ left ] ; indices [ left ] = indices [ i ] ; indices [ i ] = tmp ; } / / end valueIsSmallerEqual } / / endfor return left + 1 ; }
void test0 ( ) throws Throwable { KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod ( ) ; String string0 = kMeansInpiredMethod0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod ( ) ; String string0 = kMeansInpiredMethod0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "gL ( 1lU ) \"1X ] 1PM" , arrayList0 , 17 ) ; int [ ] intArray0 = new int [ 14 ] ; KMeansInpiredMethod . quickSort ( instances0 , intArray0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numAttributes ( ) { return m_AttValues . length ; }
void test4 ( ) throws Throwable { KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod ( ) ; int [ ] intArray0 = new int [ 7 ] ; int int0 = kMeansInpiredMethod0 . rearrangePoints ( intArray0 , 0 , ( - 29 ) , ( - 29 ) , ( double ) ( - 29 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int rearrangePoints ( int [ ] indices , int startidx , int endidx , int splitDim , double splitVal ) { int tmp , left = startidx - 1 ; for ( int i = startidx ; i < = endidx ; i + + ) { if ( m_EuclideanDistance . valueIsSmallerEqual ( m_Instances . instance ( indices [ i ] ) , splitDim , splitVal ) ) { left + + ; tmp = indices [ left ] ; indices [ left ] = indices [ i ] ; indices [ i ] = tmp ; } / / end valueIsSmallerEqual } / / endfor return left + 1 ; }
void test1 ( ) throws Throwable { Array . ArrayType array_ArrayType0 = Array . ArrayType . STRING ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String string ) { String [ ] item = tokenize ( string ) ; if ( ! item [ 0 ] . equals ( m_Root . value ) ) return false ; return isContained ( m_Root , item , 1 ) ; }
void test3 ( ) throws Throwable { Array . ArrayType array_ArrayType0 = Array . ArrayType . REAL ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; Array . ArrayType array_ArrayType1 = array0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test5 ( ) throws Throwable { Array . ArrayType array_ArrayType0 = Array . ArrayType . INT_SPARSE ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; int int0 = array0 . numValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numValues ( ) { return m_AttValues . length ; }
void test7 ( ) throws Throwable { Array . ArrayType array_ArrayType0 = Array . ArrayType . INT ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int index ( int position ) { return position ; }
void test8 ( ) throws Throwable { Array . ArrayType array_ArrayType0 = Array . ArrayType . REAL ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String string ) { String [ ] item = tokenize ( string ) ; if ( ! item [ 0 ] . equals ( m_Root . value ) ) return false ; return isContained ( m_Root , item , 1 ) ; }
void test9 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; linkedList0 . add ( ( Object ) "0x1 . 678414p9" ) ; Array array0 = Array . create ( ( List < Object > ) linkedList0 , ( List < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { Array . ArrayType array_ArrayType0 = Array . ArrayType . INT ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String string ) { String [ ] item = tokenize ( string ) ; if ( ! item [ 0 ] . equals ( m_Root . value ) ) return false ; return isContained ( m_Root , item , 1 ) ; }
void test15 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "INT - SparseArray" ) ; SparseArray sparseArray0 = ( SparseArray ) Array . create ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test16 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "REAL - ARRAY" ) ; boolean boolean0 = Array . isArray ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isArray ( Element arrayE ) { String name = arrayE . getTagName ( ) ; if ( name . equals ( "Array" ) | | name . equals ( "NUM - ARRAY" ) | | name . equals ( "INT - ARRAY" ) | | name . equals ( "REAL - ARRAY" ) | | name . equals ( "STRING - ARRAY" ) | | isSparseArray ( arrayE ) ) { return true ; } return false ; }
void test19 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "REAL - SparseArray" ) ; SparseArray sparseArray0 = ( SparseArray ) Array . create ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test22 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Long long0 = new Long ( ( - 469L ) ) ; linkedList0 . add ( ( Object ) long0 ) ; Array array0 = Array . create ( ( List < Object > ) linkedList0 , ( List < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int valueInt ( int index ) throws Exception { if ( m_type ! = ArrayType . INT & & m_type ! = ArrayType . INT_SPARSE ) { throw new Exception ( " [ Array ] Array does not contain integers ! " ) ; } return Integer . parseInt ( value ( index ) ) ; }
void test24 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Integer integer0 = new Integer ( 82 ) ; linkedList0 . add ( ( Object ) integer0 ) ; LinkedList < Integer > linkedList1 = new LinkedList < Integer > ( ) ; linkedList1 . add ( integer0 ) ; SparseArray sparseArray0 = ( SparseArray ) Array . create ( ( List < Object > ) linkedList0 , ( List < Integer > ) linkedList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test25 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; LinkedList < Integer > linkedList1 = new LinkedList < Integer > ( ) ; Integer integer0 = new Integer ( ( - 757 ) ) ; linkedList1 . add ( integer0 ) ; Float float0 = new Float ( ( double ) integer0 ) ; linkedList0 . add ( ( Object ) float0 ) ; SparseArray sparseArray0 = ( SparseArray ) Array . create ( ( List < Object > ) linkedList0 , ( List < Integer > ) linkedList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( ) { return m_Type ; }
void test28 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; linkedList0 . add ( ( Object ) "0x1 . 678414p9" ) ; Array array0 = Array . create ( ( List < Object > ) linkedList0 , ( List < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numValues ( ) { return m_AttValues . length ; }
void test35 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Array . ArrayType array_ArrayType0 = Array . ArrayType . INT_SPARSE ; Object object0 = new Object ( ) ; linkedList0 . add ( object0 ) ; linkedList0 . add ( object0 ) ; Array array0 = new Array ( array_ArrayType0 , ( List < Object > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int numValues ( ) { return m_AttValues . length ; }
void test0 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 108 ) ; Attribute attribute0 = new Attribute ( "" , instances0 , 108 ) ; NominalItem nominalItem0 = new NominalItem ( attribute0 , 108 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueIndex ( ) { return m_valueIndex ; }
void test1 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 125 ) ; Attribute attribute0 = new Attribute ( "" , instances0 , 125 ) ; BinaryItem binaryItem0 = new BinaryItem ( attribute0 , 125 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueIndex ( ) { return m_valueIndex ; }
void test2 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "r~D | $~ } Eln" , ( List < String > ) null ) ; BinaryItem binaryItem0 = new BinaryItem ( attribute0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueIndex ( ) { return m_valueIndex ; }
void test4 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "r~D | $~ } Eln" , ( List < String > ) null ) ; BinaryItem binaryItem0 = new BinaryItem ( attribute0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "r~D | $~ } Eln" , ( List < String > ) null ) ; NominalItem nominalItem0 = new NominalItem ( attribute0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "" , ( List < String > ) null ) ; NominalItem nominalItem0 = new NominalItem ( attribute0 , ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueIndex ( ) { return m_valueIndex ; }
void test7 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 125 ) ; Attribute attribute0 = new Attribute ( "" , instances0 , 125 ) ; BinaryItem binaryItem0 = new BinaryItem ( attribute0 , 125 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueIndex ( ) { return m_valueIndex ; }
void test0 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( 1 , 1 ) ; int [ ] intArray0 = new int [ 8 ] ; labeledItemSet0 . setItem ( intArray0 ) ; boolean boolean0 = labeledItemSet0 . equals ( ( Object ) labeledItemSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test1 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( ( - 329 ) , ( - 329 ) ) ; String string0 = labeledItemSet0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( 12 , 12 ) ; int int0 = labeledItemSet0 . support ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int support ( ) { return m_ruleSupCounter ; }
void test3 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( 834 , 834 ) ; boolean boolean0 = labeledItemSet0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test4 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( 834 , 834 ) ; boolean boolean0 = labeledItemSet0 . equalCondset ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equalCondset ( Object itemSet ) { if ( ( itemSet = = null ) | | ! ( itemSet . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } if ( m_items . length ! = ( ( ItemSet ) itemSet ) . items ( ) . length ) return false ; for ( int i = 0 ; i < m_items . length ; i + + ) if ( m_items [ i ] ! = ( ( ItemSet ) itemSet ) . itemAt ( i ) ) return false ; return true ; }
void test6 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( ( - 329 ) , ( - 329 ) ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( 0 ) ; int [ ] intArray0 = new int [ 4 ] ; labeledItemSet0 . setItem ( intArray0 ) ; DenseInstance denseInstance0 = new DenseInstance ( 834 ) ; labeledItemSet0 . upDateCounter ( ( Instance ) denseInstance0 , ( Instance ) binarySparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test7 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( 0 , 0 ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( 0 ) ; labeledItemSet0 . upDateCounter ( ( Instance ) binarySparseInstance0 , ( Instance ) binarySparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test8 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "v" , arrayList0 , 1 ) ; LabeledItemSet . upDateCounters ( ( FastVector ) null , instances0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( m_Root . getChildCount ( ) = = 0 ) ; }
void test10 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( ( - 329 ) , ( - 329 ) ) ; int [ ] intArray0 = new int [ 4 ] ; labeledItemSet0 . setItem ( intArray0 ) ; FastVector < Object > [ ] fastVectorArray0 = labeledItemSet0 . generateRules ( ( double ) 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastVector [ ] generateRules ( double minConfidence , FastVector hashtables , int numItemsInSet ) { FastVector premises = new FastVector ( ) , consequences = new FastVector ( ) , conf = new FastVector ( ) ; / / TODO FastVector lift = new FastVector ( ) , lev = new FastVector ( ) , conv = new FastVector ( ) ; / / TODO FastVector [ ] rules = new FastVector [ 6 ] , moreResults ; AprioriItemSet premise , consequence ; Hashtable hashtable = ( Hashtable ) hashtables . elementAt ( numItemsInSet - 2 ) ; / / Generate all rules with one item in the consequence . for ( int i = 0 ; i < m_items . length ; i + + ) if ( m_items [ i ] ! = - 1 ) { premise = new AprioriItemSet ( m_totalTransactions ) ; consequence = new AprioriItemSet ( m_totalTransactions ) ; premise . m_items = new int [ m_items . length ] ; consequence . m_items = new int [ m_items . length ] ; consequence . m_counter = m_counter ; for ( int j = 0 ; j < m_items . length ; j + + ) consequence . m_items [ j ] = - 1 ; System . arraycopy ( m_items , 0 , premise . m_items , 0 , m_items . length ) ; premise . m_items [ i ] = - 1 ; consequence . m_items [ i ] = m_items [ i ] ; premise . m_counter = ( ( Integer ) hashtable . get ( premise ) ) . intValue ( ) ; Hashtable hashtableForConsequence = ( Hashtable ) hashtables . elementAt ( 0 ) ; int consequenceUnconditionedCounter = ( ( Integer ) hashtableForConsequence . get ( consequence ) ) . intValue ( ) ; premises . addElement ( premise ) ; consequences . addElement ( consequence ) ; conf . addElement ( new Double ( confidenceForRule ( premise , consequence ) ) ) ; double tempLift = liftForRule ( premise , consequence , consequenceUnconditionedCounter ) ; double tempLev = leverageForRule ( premise , consequence , premise . m_counter , consequenceUnconditionedCounter ) ; double tempConv = convictionForRule ( premise , consequence , premise . m_counter , consequenceUnconditionedCounter ) ; lift . addElement ( new Double ( tempLift ) ) ; lev . addElement ( new Double ( tempLev ) ) ; conv . addElement ( new Double ( tempConv ) ) ; } rules [ 0 ] = premises ; rules [ 1 ] = consequences ; rules [ 2 ] = conf ; rules [ 3 ] = lift ; rules [ 4 ] = lev ; rules [ 5 ] = conv ; pruneRules ( rules , minConfidence ) ; / / Generate all the other rules moreResults = moreComplexRules ( rules , numItemsInSet , 1 , minConfidence , hashtables ) ; if ( moreResults ! = null ) for ( int i = 0 ; i < moreResults [ 0 ] . size ( ) ; i + + ) { rules [ 0 ] . addElement ( moreResults [ 0 ] . elementAt ( i ) ) ; rules [ 1 ] . addElement ( moreResults [ 1 ] . elementAt ( i ) ) ; rules [ 2 ] . addElement ( moreResults [ 2 ] . elementAt ( i ) ) ; / / TODO rules [ 3 ] . addElement ( moreResults [ 3 ] . elementAt ( i ) ) ; rules [ 4 ] . addElement ( moreResults [ 4 ] . elementAt ( i ) ) ; rules [ 5 ] . addElement ( moreResults [ 5 ] . elementAt ( i ) ) ; } return rules ; }
void test11 ( ) throws Throwable { LabeledItemSet labeledItemSet0 = new LabeledItemSet ( 834 , 834 ) ; int [ ] intArray0 = new int [ 8 ] ; labeledItemSet0 . setItem ( intArray0 ) ; FastVector < Object > [ ] fastVectorArray0 = labeledItemSet0 . generateRules ( ( double ) 834 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastVector [ ] generateRules ( double minConfidence , FastVector hashtables , int numItemsInSet ) { FastVector premises = new FastVector ( ) , consequences = new FastVector ( ) , conf = new FastVector ( ) ; / / TODO FastVector lift = new FastVector ( ) , lev = new FastVector ( ) , conv = new FastVector ( ) ; / / TODO FastVector [ ] rules = new FastVector [ 6 ] , moreResults ; AprioriItemSet premise , consequence ; Hashtable hashtable = ( Hashtable ) hashtables . elementAt ( numItemsInSet - 2 ) ; / / Generate all rules with one item in the consequence . for ( int i = 0 ; i < m_items . length ; i + + ) if ( m_items [ i ] ! = - 1 ) { premise = new AprioriItemSet ( m_totalTransactions ) ; consequence = new AprioriItemSet ( m_totalTransactions ) ; premise . m_items = new int [ m_items . length ] ; consequence . m_items = new int [ m_items . length ] ; consequence . m_counter = m_counter ; for ( int j = 0 ; j < m_items . length ; j + + ) consequence . m_items [ j ] = - 1 ; System . arraycopy ( m_items , 0 , premise . m_items , 0 , m_items . length ) ; premise . m_items [ i ] = - 1 ; consequence . m_items [ i ] = m_items [ i ] ; premise . m_counter = ( ( Integer ) hashtable . get ( premise ) ) . intValue ( ) ; Hashtable hashtableForConsequence = ( Hashtable ) hashtables . elementAt ( 0 ) ; int consequenceUnconditionedCounter = ( ( Integer ) hashtableForConsequence . get ( consequence ) ) . intValue ( ) ; premises . addElement ( premise ) ; consequences . addElement ( consequence ) ; conf . addElement ( new Double ( confidenceForRule ( premise , consequence ) ) ) ; double tempLift = liftForRule ( premise , consequence , consequenceUnconditionedCounter ) ; double tempLev = leverageForRule ( premise , consequence , premise . m_counter , consequenceUnconditionedCounter ) ; double tempConv = convictionForRule ( premise , consequence , premise . m_counter , consequenceUnconditionedCounter ) ; lift . addElement ( new Double ( tempLift ) ) ; lev . addElement ( new Double ( tempLev ) ) ; conv . addElement ( new Double ( tempConv ) ) ; } rules [ 0 ] = premises ; rules [ 1 ] = consequences ; rules [ 2 ] = conf ; rules [ 3 ] = lift ; rules [ 4 ] = lev ; rules [ 5 ] = conv ; pruneRules ( rules , minConfidence ) ; / / Generate all the other rules moreResults = moreComplexRules ( rules , numItemsInSet , 1 , minConfidence , hashtables ) ; if ( moreResults ! = null ) for ( int i = 0 ; i < moreResults [ 0 ] . size ( ) ; i + + ) { rules [ 0 ] . addElement ( moreResults [ 0 ] . elementAt ( i ) ) ; rules [ 1 ] . addElement ( moreResults [ 1 ] . elementAt ( i ) ) ; rules [ 2 ] . addElement ( moreResults [ 2 ] . elementAt ( i ) ) ; / / TODO rules [ 3 ] . addElement ( moreResults [ 3 ] . elementAt ( i ) ) ; rules [ 4 ] . addElement ( moreResults [ 4 ] . elementAt ( i ) ) ; rules [ 5 ] . addElement ( moreResults [ 5 ] . elementAt ( i ) ) ; } return rules ; }
void test0 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; String string0 = checkAssociator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 1 ] = " : 7" ; stringArray0 [ 3 ] = " : 7" ; stringArray0 [ 4 ] = " : 7" ; stringArray0 [ 5 ] = " : 7" ; stringArray0 [ 0 ] = " : 7" ; stringArray0 [ 2 ] = " : 7" ; checkAssociator0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumNominal ( ) { return m_NumNominal ; }
void test2 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; Enumeration < Object > enumeration0 = checkAssociator0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test3 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; String [ ] stringArray0 = checkAssociator0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test4 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . doTests ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test5 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . testsPerClassType ( ( - 1 ) , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test6 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . testsPerClassType ( 1 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSilent ( ) { return m_Silent ; }
void test7 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . testsWithoutClass ( true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSilent ( ) { return m_Silent ; }
void test8 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; boolean [ ] booleanArray0 = checkAssociator0 . canHandleClassAsNthAttribute ( true , true , true , true , true , true , ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] canHandleClassAsNthAttribute ( AttrTypes attrTypes , int numAtts , int attrIndex , int classType , int classIndex ) { if ( classIndex = = TestInstances . CLASS_IS_LAST ) print ( "class attribute as last attribute" ) ; else print ( "class attribute as " + ( classIndex + 1 ) + " . attribute" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; FastVector accepts = new FastVector ( ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 0 ; boolean attributeMissing = false , classMissing = false ; return runBasicTest ( attrTypes , numAtts , attrIndex , classType , classIndex , missingLevel , attributeMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
void test9 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; boolean [ ] booleanArray0 = checkAssociator0 . correctBuildInitialisation ( false , false , false , false , false , false , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] correctBuildInitialisation ( AttrTypes attrTypes , int classType ) { boolean [ ] result = new boolean [ 2 ] ; print ( "correct initialisation during buildEstimator" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 0 ; boolean attributeMissing = false , classMissing = false ; Instances train1 = null ; Instances test1 = null ; Instances train2 = null ; Instances test2 = null ; Estimator estimator = null ; Estimator estimator1 = null ; boolean built = false ; int stage = 0 ; int attrIndex1 = 1 ; int attrIndex2 = 2 ; try { / / Make two sets of train / test splits with different / / numbers of attributes train1 = makeTestDataset ( 42 , numTrain , 2 , attrTypes , numClasses , classType ) ; train2 = makeTestDataset ( 84 , numTrain , 3 , attrTypes , numClasses , classType ) ; if ( missingLevel > 0 ) { addMissing ( train1 , missingLevel , attributeMissing , classMissing , attrIndex1 ) ; addMissing ( train2 , missingLevel , attributeMissing , classMissing , attrIndex2 ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { / / TESTING ? ? stage = 0 ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; estimator1 = estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; stage = 1 ; built = false ; estimator . addValues ( train2 , attrIndex2 ) ; built = true ; stage = 2 ; built = false ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; stage = 3 ; if ( ! estimator . equals ( estimator1 ) ) { if ( m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst build estimator\n" + estimator . toString ( ) + "\n\n" ) ; println ( "\nSecond build estimator\n" + estimator . toString ( ) + "\n\n" ) ; } throw new Exception ( "Results differ between buildEstimator calls" ) ; } println ( "yes" ) ; result [ 0 ] = true ; if ( false & & m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst buildEstimator ( ) " + "\n\n" ) ; println ( "\nSecond buildEstimator ( ) " + "\n\n" ) ; } } catch ( Exception ex ) { String msg = ex . getMessage ( ) . toLowerCase ( ) ; if ( msg . indexOf ( "worse than zeror" ) > = 0 ) { println ( "warning : performs worse than ZeroR" ) ; result [ 0 ] = true ; result [ 1 ] = true ; } else { println ( "no" ) ; result [ 0 ] = false ; } if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } switch ( stage ) { case 0 : print ( " of dataset 1" ) ; break ; case 1 : print ( " of dataset 2" ) ; break ; case 2 : print ( " of dataset 1 ( 2nd build ) " ) ; break ; case 3 : print ( " , comparing results from builds of dataset 1" ) ; break ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "here are the datasets : \n" ) ; println ( " = = = Train1 Dataset = = = \n" + train1 . toString ( ) + "\n" ) ; println ( " = = = Test1 Dataset = = = \n" + test1 . toString ( ) + "\n\n" ) ; println ( " = = = Train2 Dataset = = = \n" + train2 . toString ( ) + "\n" ) ; println ( " = = = Test2 Dataset = = = \n" + test2 . toString ( ) + "\n\n" ) ; } } return result ; }
void test10 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; boolean [ ] booleanArray0 = checkAssociator0 . correctBuildInitialisation ( true , true , true , true , true , true , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] correctBuildInitialisation ( AttrTypes attrTypes , int classType ) { boolean [ ] result = new boolean [ 2 ] ; print ( "correct initialisation during buildEstimator" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 0 ; boolean attributeMissing = false , classMissing = false ; Instances train1 = null ; Instances test1 = null ; Instances train2 = null ; Instances test2 = null ; Estimator estimator = null ; Estimator estimator1 = null ; boolean built = false ; int stage = 0 ; int attrIndex1 = 1 ; int attrIndex2 = 2 ; try { / / Make two sets of train / test splits with different / / numbers of attributes train1 = makeTestDataset ( 42 , numTrain , 2 , attrTypes , numClasses , classType ) ; train2 = makeTestDataset ( 84 , numTrain , 3 , attrTypes , numClasses , classType ) ; if ( missingLevel > 0 ) { addMissing ( train1 , missingLevel , attributeMissing , classMissing , attrIndex1 ) ; addMissing ( train2 , missingLevel , attributeMissing , classMissing , attrIndex2 ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { / / TESTING ? ? stage = 0 ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; estimator1 = estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; stage = 1 ; built = false ; estimator . addValues ( train2 , attrIndex2 ) ; built = true ; stage = 2 ; built = false ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; stage = 3 ; if ( ! estimator . equals ( estimator1 ) ) { if ( m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst build estimator\n" + estimator . toString ( ) + "\n\n" ) ; println ( "\nSecond build estimator\n" + estimator . toString ( ) + "\n\n" ) ; } throw new Exception ( "Results differ between buildEstimator calls" ) ; } println ( "yes" ) ; result [ 0 ] = true ; if ( false & & m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst buildEstimator ( ) " + "\n\n" ) ; println ( "\nSecond buildEstimator ( ) " + "\n\n" ) ; } } catch ( Exception ex ) { String msg = ex . getMessage ( ) . toLowerCase ( ) ; if ( msg . indexOf ( "worse than zeror" ) > = 0 ) { println ( "warning : performs worse than ZeroR" ) ; result [ 0 ] = true ; result [ 1 ] = true ; } else { println ( "no" ) ; result [ 0 ] = false ; } if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } switch ( stage ) { case 0 : print ( " of dataset 1" ) ; break ; case 1 : print ( " of dataset 2" ) ; break ; case 2 : print ( " of dataset 1 ( 2nd build ) " ) ; break ; case 3 : print ( " , comparing results from builds of dataset 1" ) ; break ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "here are the datasets : \n" ) ; println ( " = = = Train1 Dataset = = = \n" + train1 . toString ( ) + "\n" ) ; println ( " = = = Test1 Dataset = = = \n" + test1 . toString ( ) + "\n\n" ) ; println ( " = = = Train2 Dataset = = = \n" + train2 . toString ( ) + "\n" ) ; println ( " = = = Test2 Dataset = = = \n" + test2 . toString ( ) + "\n\n" ) ; } } return result ; }
void test11 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . setNumString ( 0 ) ; checkAssociator0 . setDebug ( true ) ; checkAssociator0 . doTests ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWords ( ) { return arrayToList ( m_Words ) ; }
void test12 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . setDebug ( true ) ; boolean [ ] booleanArray0 = checkAssociator0 . correctBuildInitialisation ( true , true , true , true , true , true , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] correctBuildInitialisation ( AttrTypes attrTypes , int classType ) { boolean [ ] result = new boolean [ 2 ] ; print ( "correct initialisation during buildEstimator" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 0 ; boolean attributeMissing = false , classMissing = false ; Instances train1 = null ; Instances test1 = null ; Instances train2 = null ; Instances test2 = null ; Estimator estimator = null ; Estimator estimator1 = null ; boolean built = false ; int stage = 0 ; int attrIndex1 = 1 ; int attrIndex2 = 2 ; try { / / Make two sets of train / test splits with different / / numbers of attributes train1 = makeTestDataset ( 42 , numTrain , 2 , attrTypes , numClasses , classType ) ; train2 = makeTestDataset ( 84 , numTrain , 3 , attrTypes , numClasses , classType ) ; if ( missingLevel > 0 ) { addMissing ( train1 , missingLevel , attributeMissing , classMissing , attrIndex1 ) ; addMissing ( train2 , missingLevel , attributeMissing , classMissing , attrIndex2 ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { / / TESTING ? ? stage = 0 ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; estimator1 = estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; stage = 1 ; built = false ; estimator . addValues ( train2 , attrIndex2 ) ; built = true ; stage = 2 ; built = false ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; stage = 3 ; if ( ! estimator . equals ( estimator1 ) ) { if ( m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst build estimator\n" + estimator . toString ( ) + "\n\n" ) ; println ( "\nSecond build estimator\n" + estimator . toString ( ) + "\n\n" ) ; } throw new Exception ( "Results differ between buildEstimator calls" ) ; } println ( "yes" ) ; result [ 0 ] = true ; if ( false & & m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst buildEstimator ( ) " + "\n\n" ) ; println ( "\nSecond buildEstimator ( ) " + "\n\n" ) ; } } catch ( Exception ex ) { String msg = ex . getMessage ( ) . toLowerCase ( ) ; if ( msg . indexOf ( "worse than zeror" ) > = 0 ) { println ( "warning : performs worse than ZeroR" ) ; result [ 0 ] = true ; result [ 1 ] = true ; } else { println ( "no" ) ; result [ 0 ] = false ; } if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } switch ( stage ) { case 0 : print ( " of dataset 1" ) ; break ; case 1 : print ( " of dataset 2" ) ; break ; case 2 : print ( " of dataset 1 ( 2nd build ) " ) ; break ; case 3 : print ( " , comparing results from builds of dataset 1" ) ; break ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "here are the datasets : \n" ) ; println ( " = = = Train1 Dataset = = = \n" + train1 . toString ( ) + "\n" ) ; println ( " = = = Test1 Dataset = = = \n" + test1 . toString ( ) + "\n\n" ) ; println ( " = = = Train2 Dataset = = = \n" + train2 . toString ( ) + "\n" ) ; println ( " = = = Test2 Dataset = = = \n" + test2 . toString ( ) + "\n\n" ) ; } } return result ; }
void test13 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; boolean [ ] booleanArray0 = checkAssociator0 . canHandleMissing ( false , false , true , false , true , true , 2 , true , true , ( - 828 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] canHandleMissing ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing , int missingLevel ) { if ( missingLevel = = 100 ) print ( "100% " ) ; print ( "missing" ) ; if ( attributeMissing ) { print ( " attribute" ) ; if ( classMissing ) print ( " and" ) ; } if ( classMissing ) print ( " class" ) ; print ( " values" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; FastVector accepts = new FastVector ( ) ; accepts . addElement ( "missing" ) ; accepts . addElement ( "value" ) ; accepts . addElement ( "train" ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 ; int numAtts = 1 , attrIndex = 0 ; return runBasicTest ( attrTypes , numAtts , attrIndex , classType , missingLevel , attributeMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
void test15 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . setDebug ( true ) ; checkAssociator0 . testsWithoutClass ( true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumRelational ( ) { return m_NumRelational ; }
void test16 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; boolean [ ] booleanArray0 = checkAssociator0 . datasetIntegrity ( true , true , true , true , true , true , ( - 1 ) , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] datasetIntegrity ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing ) { Estimator estimator = null ; print ( "estimator doesn't alter original datasets" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 100 ; boolean [ ] result = new boolean [ 2 ] ; Instances train = null ; boolean built = false ; try { train = makeTestDataset ( 42 , numTrain , 1 , attrTypes , numClasses , classType ) ; int attrIndex = 0 ; if ( missingLevel > 0 ) { addMissing ( train , missingLevel , attributeMissing , classMissing , attrIndex ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { Instances trainCopy = new Instances ( train ) ; int attrIndex = 0 ; estimator . addValues ( trainCopy , attrIndex ) ; compareDatasets ( train , trainCopy ) ; built = true ; println ( "yes" ) ; result [ 0 ] = true ; } catch ( Exception ex ) { println ( "no" ) ; result [ 0 ] = false ; if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "Here are the datasets : \n" ) ; println ( " = = = Train Dataset = = = \n" + train . toString ( ) + "\n" ) ; } } return result ; }
void test17 ( ) throws Throwable { CheckAssociator checkAssociator0 = new CheckAssociator ( ) ; checkAssociator0 . setDebug ( true ) ; boolean [ ] booleanArray0 = checkAssociator0 . datasetIntegrity ( false , false , true , false , false , true , 1 , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] datasetIntegrity ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing ) { Estimator estimator = null ; print ( "estimator doesn't alter original datasets" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 100 ; boolean [ ] result = new boolean [ 2 ] ; Instances train = null ; boolean built = false ; try { train = makeTestDataset ( 42 , numTrain , 1 , attrTypes , numClasses , classType ) ; int attrIndex = 0 ; if ( missingLevel > 0 ) { addMissing ( train , missingLevel , attributeMissing , classMissing , attrIndex ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { Instances trainCopy = new Instances ( train ) ; int attrIndex = 0 ; estimator . addValues ( trainCopy , attrIndex ) ; compareDatasets ( train , trainCopy ) ; built = true ; println ( "yes" ) ; result [ 0 ] = true ; } catch ( Exception ex ) { println ( "no" ) ; result [ 0 ] = false ; if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "Here are the datasets : \n" ) ; println ( " = = = Train Dataset = = = \n" + train . toString ( ) + "\n" ) ; } } return result ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; int int0 = itemSet0 . counter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test1 ( ) throws Throwable { ItemSet itemSet0 = new ItemSet ( ( - 303 ) ) ; String string0 = itemSet0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; itemSet0 . setTreatZeroAsMissing ( true ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( 1 ) ; boolean boolean0 = itemSet0 . containedBy ( ( Instance ) binarySparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; itemSet0 . setItem ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 15 ] ; ItemSet itemSet0 = new ItemSet ( intArray0 ) ; boolean boolean0 = itemSet0 . equals ( ( Object ) itemSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; int [ ] intArray1 = itemSet0 . items ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test6 ( ) throws Throwable { ItemSet itemSet0 = new ItemSet ( 46 ) ; itemSet0 . setCounter ( 46 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test7 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; int int0 = itemSet0 . support ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test8 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; boolean boolean0 = itemSet0 . getTreatZeroAsMissing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int support ( ) { return m_ruleSupCounter ; }
void test9 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; ItemSet itemSet0 = new ItemSet ( intArray0 ) ; itemSet0 . itemAt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int support ( ) { return m_ruleSupCounter ; }
void test11 ( ) throws Throwable { int [ ] intArray0 = new int [ 18 ] ; ItemSet itemSet0 = new ItemSet ( 1596 , intArray0 ) ; DenseInstance denseInstance0 = new DenseInstance ( 1596 ) ; itemSet0 . upDateCounter ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int support ( ) { return m_ruleSupCounter ; }
void test12 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; intArray0 [ 0 ] = ( - 1688 ) ; intArray0 [ 1 ] = ( - 1688 ) ; intArray0 [ 3 ] = ( - 1688 ) ; intArray0 [ 4 ] = ( - 1688 ) ; intArray0 [ 5 ] = ( - 1688 ) ; intArray0 [ 6 ] = ( - 1688 ) ; intArray0 [ 2 ] = ( - 1688 ) ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; itemSet0 . setTreatZeroAsMissing ( true ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( 1 ) ; itemSet0 . upDateCounter ( ( Instance ) binarySparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test13 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test14 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; intArray0 [ 0 ] = ( - 1688 ) ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( 1 ) ; itemSet0 . upDateCounter ( ( Instance ) binarySparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test15 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test16 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int support ( ) { return m_ruleSupCounter ; }
void test18 ( ) throws Throwable { ItemSet itemSet0 = new ItemSet ( 46 ) ; boolean boolean0 = itemSet0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test19 ( ) throws Throwable { ItemSet itemSet0 = new ItemSet ( ( - 611 ) ) ; boolean boolean0 = itemSet0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test20 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; ItemSet itemSet0 = new ItemSet ( ( - 1688 ) , intArray0 ) ; int int0 = itemSet0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int counter ( ) { return m_counter ; }
void test21 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; ItemSet itemSet0 = new ItemSet ( intArray0 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "~t0b ? G$ { q$Dw" , arrayList0 , 2 ) ; Attribute attribute0 = new Attribute ( "~t0b ? G$ { q$Dw" ) ; arrayList0 . add ( attribute0 ) ; intArray0 [ 2 ] = ( - 1 ) ; arrayList0 . add ( attribute0 ) ; arrayList0 . add ( attribute0 ) ; String string0 = itemSet0 . toString ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTreatZeroAsMissing ( ) { return m_treatZeroAsMissing ; }
void test22 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "A\"UMD" , arrayList0 , 637 ) ; ItemSet . upDateCounters ( ( FastVector ) null , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / double sumOfWeights ( ) { double sum = 0 ; for ( int i = 0 ; i < numInstances ( ) ; i + + ) { sum + = instance ( i ) . weight ( ) ; } return sum ; }
void test0 ( ) throws Throwable { FilteredAssociationRules filteredAssociationRules0 = new FilteredAssociationRules ( ( Object ) " : " , ( Filter ) null , ( AssociationRules ) null ) ; filteredAssociationRules0 . setWrappedRules ( ( AssociationRules ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProducer ( ) { return m_producer ; }
void test3 ( ) throws Throwable { FilteredAssociationRules filteredAssociationRules0 = new FilteredAssociationRules ( ( Object ) " : " , ( Filter ) null , ( AssociationRules ) null ) ; AssociationRules associationRules0 = filteredAssociationRules0 . getWrappedRules ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AssociationRules getWrappedRules ( ) { return m_wrappedRules ; }
void test0 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . CONVICTION ; LinkedList < Item > linkedList0 = new LinkedList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) linkedList0 , ( Collection < Item > ) linkedList0 , defaultAssociationRule_METRIC_TYPE0 , ( - 1294 ) , ( - 1294 ) , ( - 1294 ) , ( - 1294 ) ) ; String string0 = defaultAssociationRule0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPrimaryMetricValue ( ) ; / * * * Get the value of the named metric for this rule * * @param metricName the metric to get the value for * @return the value of the named metric * @throws Exception if the requested metric is unknown for this rule * / double getNamedMetricValue ( String metricName ) throws Exception ; / * * * Gets the number of metrics available for this rule . * * @return the number of metrics available for this rule * / int getNumberOfMetricsForRule ( ) ; / * * * Return the names of the metrics available for this rule . * * @return the names of the metrics that are available for this rule . * / String [ ] getMetricNamesForRule ( ) ; / * * * Get all the available metric values for this rule . Values are * returned in an array with entries that correspond to the metric * names returned by getMetricNamesForRule ( ) . * * @return all the available metrics for this rule . * @throws Exception if a metric can't be computed for some reason . * / double [ ] getMetricValuesForRule ( ) throws Exception ; / * * * Get the support for the premise . * * @return the support for the premise . * / int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test1 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . CONVICTION ; String string0 = defaultAssociationRule_METRIC_TYPE0 . toXML ( 10 , 10 , 10 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XMLDocument toXML ( Object o ) throws Exception { clear ( ) ; invokeWriteToXML ( null , writePreProcess ( o ) , VAL_ROOT ) ; writePostProcess ( o ) ; return m_Document ; }
void test2 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LEVERAGE ; String string0 = defaultAssociationRule_METRIC_TYPE0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . CONVICTION ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) null , ( Collection < Item > ) null , defaultAssociationRule_METRIC_TYPE0 , 10 , 10 , 10 , 10 ) ; int int0 = defaultAssociationRule0 . getTotalSupport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test4 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) null , ( Collection < Item > ) null , defaultAssociationRule_METRIC_TYPE0 , 1534 , 1534 , 1534 , 1534 ) ; defaultAssociationRule0 . getConsequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test5 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; ArrayList < Item > arrayList0 = new ArrayList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) arrayList0 , ( Collection < Item > ) arrayList0 , defaultAssociationRule_METRIC_TYPE0 , 513 , 513 , 513 , 513 ) ; String string0 = defaultAssociationRule0 . getPrimaryMetricName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPrimaryMetricValue ( ) ; / * * * Get the value of the named metric for this rule * * @param metricName the metric to get the value for * @return the value of the named metric * @throws Exception if the requested metric is unknown for this rule * / double getNamedMetricValue ( String metricName ) throws Exception ; / * * * Gets the number of metrics available for this rule . * * @return the number of metrics available for this rule * / int getNumberOfMetricsForRule ( ) ; / * * * Return the names of the metrics available for this rule . * * @return the names of the metrics that are available for this rule . * / String [ ] getMetricNamesForRule ( ) ; / * * * Get all the available metric values for this rule . Values are * returned in an array with entries that correspond to the metric * names returned by getMetricNamesForRule ( ) . * * @return all the available metrics for this rule . * @throws Exception if a metric can't be computed for some reason . * / double [ ] getMetricValuesForRule ( ) throws Exception ; / * * * Get the support for the premise . * * @return the support for the premise . * / int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test6 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; ArrayList < Item > arrayList0 = new ArrayList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) arrayList0 , ( Collection < Item > ) arrayList0 , defaultAssociationRule_METRIC_TYPE0 , 513 , 513 , 513 , 513 ) ; int int0 = defaultAssociationRule0 . getTotalTransactions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LEVERAGE ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) null , ( Collection < Item > ) null , defaultAssociationRule_METRIC_TYPE0 , ( - 14 ) , ( - 14 ) , ( - 14 ) , ( - 14 ) ) ; double double0 = defaultAssociationRule0 . getPrimaryMetricValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPrimaryMetricValue ( ) ; / * * * Get the value of the named metric for this rule * * @param metricName the metric to get the value for * @return the value of the named metric * @throws Exception if the requested metric is unknown for this rule * / double getNamedMetricValue ( String metricName ) throws Exception ; / * * * Gets the number of metrics available for this rule . * * @return the number of metrics available for this rule * / int getNumberOfMetricsForRule ( ) ; / * * * Return the names of the metrics available for this rule . * * @return the names of the metrics that are available for this rule . * / String [ ] getMetricNamesForRule ( ) ; / * * * Get all the available metric values for this rule . Values are * returned in an array with entries that correspond to the metric * names returned by getMetricNamesForRule ( ) . * * @return all the available metrics for this rule . * @throws Exception if a metric can't be computed for some reason . * / double [ ] getMetricValuesForRule ( ) throws Exception ; / * * * Get the support for the premise . * * @return the support for the premise . * / int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test8 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; ArrayList < Item > arrayList0 = new ArrayList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) arrayList0 , ( Collection < Item > ) arrayList0 , defaultAssociationRule_METRIC_TYPE0 , 513 , 513 , 513 , 513 ) ; Collection < Item > collection0 = defaultAssociationRule0 . getPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPrimaryMetricValue ( ) ; / * * * Get the value of the named metric for this rule * * @param metricName the metric to get the value for * @return the value of the named metric * @throws Exception if the requested metric is unknown for this rule * / double getNamedMetricValue ( String metricName ) throws Exception ; / * * * Gets the number of metrics available for this rule . * * @return the number of metrics available for this rule * / int getNumberOfMetricsForRule ( ) ; / * * * Return the names of the metrics available for this rule . * * @return the names of the metrics that are available for this rule . * / String [ ] getMetricNamesForRule ( ) ; / * * * Get all the available metric values for this rule . Values are * returned in an array with entries that correspond to the metric * names returned by getMetricNamesForRule ( ) . * * @return all the available metrics for this rule . * @throws Exception if a metric can't be computed for some reason . * / double [ ] getMetricValuesForRule ( ) throws Exception ; / * * * Get the support for the premise . * * @return the support for the premise . * / int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test9 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; ArrayList < Item > arrayList0 = new ArrayList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) arrayList0 , ( Collection < Item > ) arrayList0 , defaultAssociationRule_METRIC_TYPE0 , 513 , 513 , 513 , 513 ) ; int int0 = defaultAssociationRule0 . getConsequenceSupport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) null , ( Collection < Item > ) null , defaultAssociationRule_METRIC_TYPE0 , 1534 , 1534 , 1534 , 1534 ) ; int int0 = defaultAssociationRule0 . getPremiseSupport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPrimaryMetricValue ( ) ; / * * * Get the value of the named metric for this rule * * @param metricName the metric to get the value for * @return the value of the named metric * @throws Exception if the requested metric is unknown for this rule * / double getNamedMetricValue ( String metricName ) throws Exception ; / * * * Gets the number of metrics available for this rule . * * @return the number of metrics available for this rule * / int getNumberOfMetricsForRule ( ) ; / * * * Return the names of the metrics available for this rule . * * @return the names of the metrics that are available for this rule . * / String [ ] getMetricNamesForRule ( ) ; / * * * Get all the available metric values for this rule . Values are * returned in an array with entries that correspond to the metric * names returned by getMetricNamesForRule ( ) . * * @return all the available metrics for this rule . * @throws Exception if a metric can't be computed for some reason . * / double [ ] getMetricValuesForRule ( ) throws Exception ; / * * * Get the support for the premise . * * @return the support for the premise . * / int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test11 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LEVERAGE ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) null , ( Collection < Item > ) null , defaultAssociationRule_METRIC_TYPE0 , ( - 14 ) , ( - 14 ) , ( - 14 ) , ( - 14 ) ) ; defaultAssociationRule0 . getNumberOfMetricsForRule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPrimaryMetricValue ( ) ; / * * * Get the value of the named metric for this rule * * @param metricName the metric to get the value for * @return the value of the named metric * @throws Exception if the requested metric is unknown for this rule * / double getNamedMetricValue ( String metricName ) throws Exception ; / * * * Gets the number of metrics available for this rule . * * @return the number of metrics available for this rule * / int getNumberOfMetricsForRule ( ) ; / * * * Return the names of the metrics available for this rule . * * @return the names of the metrics that are available for this rule . * / String [ ] getMetricNamesForRule ( ) ; / * * * Get all the available metric values for this rule . Values are * returned in an array with entries that correspond to the metric * names returned by getMetricNamesForRule ( ) . * * @return all the available metrics for this rule . * @throws Exception if a metric can't be computed for some reason . * / double [ ] getMetricValuesForRule ( ) throws Exception ; / * * * Get the support for the premise . * * @return the support for the premise . * / int getPremiseSupport ( ) ; / * * * Get the support for the consequence . * * @return the support for the consequence . * / int getConsequenceSupport ( ) ; / * * * Get the total support for this rule ( premise + consequence ) . * * @return the total support for this rule . * / int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test12 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . CONVICTION ; LinkedList < Item > linkedList0 = new LinkedList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) linkedList0 , ( Collection < Item > ) linkedList0 , defaultAssociationRule_METRIC_TYPE0 , ( - 1294 ) , ( - 1294 ) , ( - 1294 ) , ( - 1294 ) ) ; double [ ] doubleArray0 = defaultAssociationRule0 . getMetricValuesForRule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . CONVICTION ; LinkedList < Item > linkedList0 = new LinkedList < Item > ( ) ; DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule ( ( Collection < Item > ) linkedList0 , ( Collection < Item > ) linkedList0 , defaultAssociationRule_METRIC_TYPE0 , ( - 1294 ) , ( - 1294 ) , ( - 1294 ) , ( - 1294 ) ) ; String [ ] stringArray0 = defaultAssociationRule0 . getMetricNamesForRule ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalSupport ( ) ; / * * * Get the total number of transactions in the data . * * @return the total number of transactions in the data . * / int getTotalTransactions ( ) ; / * * * Compare this rule to the supplied rule . * * @param other the rule to compare to . * @return the result of the comparison . * / int compareTo ( AssociationRule other ) { return - Double . compare ( getPrimaryMetricValue ( ) , other . getPrimaryMetricValue ( ) ) ; }
void test0 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "#" , "#" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 28 . 500046998486614 ) , numericItem_Comparison0 ) ; int int0 = numericItem0 . compareTo ( ( Item ) numericItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { int result ; int major ; int minor ; int revision ; int [ ] maj = new int [ 1 ] ; int [ ] min = new int [ 1 ] ; int [ ] rev = new int [ 1 ] ; / / do we have a string ? if ( o instanceof String ) { parseVersion ( ( String ) o , maj , min , rev ) ; major = maj [ 0 ] ; minor = min [ 0 ] ; revision = rev [ 0 ] ; } else { System . out . println ( this . getClass ( ) . getName ( ) + " : no version - string for comparTo povided ! " ) ; major = - 1 ; minor = - 1 ; revision = - 1 ; } if ( MAJOR < major ) { result = - 1 ; } else if ( MAJOR = = major ) { if ( MINOR < minor ) { result = - 1 ; } else if ( MINOR = = minor ) { if ( REVISION < revision ) { result = - 1 ; } else if ( REVISION = = revision ) { result = 0 ; } else { result = 1 ; } } else { result = 1 ; } } else { result = 1 ; } return result ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } expected at end of enumeration" , 124 ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . EQUAL ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 124 , numericItem_Comparison0 ) ; numericItem0 . decreaseFrequency ( 124 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrequency ( ) { return m_frequency ; }
void test2 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "#" , "#" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 28 . 500046998486614 ) , numericItem_Comparison0 ) ; int int0 = numericItem0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return m_storedObjectArray . length ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } expected at end of enumeration" , 124 ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . EQUAL ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 124 , numericItem_Comparison0 ) ; String string0 = numericItem0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } expected at end of enumeration" , 124 ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . EQUAL ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 124 , numericItem_Comparison0 ) ; numericItem0 . decreaseFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrequency ( ) { return m_frequency ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "#" , "#" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 28 . 500046998486614 ) , numericItem_Comparison0 ) ; numericItem0 . increaseFrequency ( ) ; NumericItem numericItem1 = new NumericItem ( attribute0 , ( - 28 . 500046998486614 ) , numericItem_Comparison0 ) ; int int0 = numericItem1 . compareTo ( ( Item ) numericItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrequency ( ) { return m_frequency ; }
void test6 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } expected at end of enumeration" , 124 ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . EQUAL ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 124 , numericItem_Comparison0 ) ; numericItem0 . increaseFrequency ( 124 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrequency ( ) { return m_frequency ; }
void test7 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "#" , "#" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 28 . 500046998486614 ) , numericItem_Comparison0 ) ; numericItem0 . increaseFrequency ( ) ; NumericItem numericItem1 = new NumericItem ( attribute0 , ( - 28 . 500046998486614 ) , numericItem_Comparison0 ) ; int int0 = numericItem0 . compareTo ( ( Item ) numericItem1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFrequency ( ) { return m_frequency ; }
void test0 ( ) throws Throwable { ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , ( - 390 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , ( - 1771 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FPGrowth ( ) { resetOptions ( ) ; }
void test5 ( ) throws Throwable { FPGrowth . FPTreeNode fPGrowth_FPTreeNode0 = new FPGrowth . FPTreeNode ( ( FPGrowth . FPTreeNode ) null , ( BinaryItem ) null ) ; LinkedList < BinaryItem > linkedList0 = new LinkedList < BinaryItem > ( ) ; HashMap < BinaryItem , FPGrowth . FPTreeRoot . Header > hashMap0 = new HashMap < BinaryItem , FPGrowth . FPTreeRoot . Header > ( ) ; linkedList0 . add ( ( BinaryItem ) null ) ; fPGrowth_FPTreeNode0 . addItemSet ( ( Collection < BinaryItem > ) linkedList0 , ( Map < BinaryItem , FPGrowth . FPTreeRoot . Header > ) hashMap0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int assignIDs ( int lastID ) { int currLastID = lastID + 1 ; m_id = currLastID ; if ( m_left ! = null ) { currLastID = m_left . assignIDs ( currLastID ) ; } if ( m_right ! = null ) { currLastID = m_right . assignIDs ( currLastID ) ; } return currLastID ; }
void test6 ( ) throws Throwable { FPGrowth . FPTreeRoot . Header fPGrowth_FPTreeRoot_Header0 = new FPGrowth . FPTreeRoot . Header ( ) ; List < FPGrowth . FPTreeNode > list0 = fPGrowth_FPTreeRoot_Header0 . getHeaderList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( m_Root . getChildCount ( ) = = 0 ) ; }
void test7 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; fPGrowth0 . setOffDiskReportingFrequency ( ( - 10 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBoundMinSupport ( ) { return m_lowerBoundMinSupport ; }
void test8 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . maxNumberOfItemsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBoundMinSupport ( ) { return m_upperBoundMinSupport ; }
void test9 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . metricTypeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumRulesToFind ( ) { return m_numRulesToFind ; }
void test10 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . minMetricTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinMetric ( ) { return m_metricThreshold ; }
void test12 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLowerBoundMinSupport ( ) { return m_lowerBoundMinSupport ; }
void test13 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . findAllRulesForSupportLevelTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinMetric ( ) { return m_metricThreshold ; }
void test14 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; fPGrowth0 . setTransactionsMustContain ( " #_$ ) " ) ; String [ ] stringArray0 = fPGrowth0 . getOptions ( ) ; fPGrowth0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPositiveIndex ( ) { return m_positiveIndex ; }
void test15 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . lowerBoundMinSupportTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBoundMinSupport ( ) { return m_upperBoundMinSupport ; }
void test16 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . deltaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBoundMinSupport ( ) { return m_upperBoundMinSupport ; }
void test18 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . upperBoundMinSupportTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinMetric ( ) { return m_metricThreshold ; }
void test19 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String [ ] stringArray0 = fPGrowth0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPositiveIndex ( ) { return m_positiveIndex ; }
void test20 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . transactionsMustContainTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getFindAllRulesForSupportLevel ( ) { return m_findAllRulesForSupportLevel ; }
void test21 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . useORForMustContainListTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNumberOfItems ( ) { return m_maxItems ; }
void test22 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . numRulesToFindTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDelta ( ) { return m_delta ; }
void test23 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; boolean boolean0 = fPGrowth0 . canProduceRules ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBoundMinSupport ( ) { return m_upperBoundMinSupport ; }
void test24 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . rulesMustContainTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinMetric ( ) { return m_metricThreshold ; }
void test25 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseORForMustContainList ( ) { return m_mustContainOR ; }
void test26 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; fPGrowth0 . setRulesMustContain ( " #_$ ) " ) ; String [ ] stringArray0 = fPGrowth0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRulesMustContain ( ) { return m_rulesMustContain ; }
void test27 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . positiveIndexTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBoundMinSupport ( ) { return m_upperBoundMinSupport ; }
void test28 ( ) throws Throwable { FPGrowth . FPTreeNode fPGrowth_FPTreeNode0 = new FPGrowth . FPTreeNode ( ( FPGrowth . FPTreeNode ) null , ( BinaryItem ) null ) ; FPGrowth . FPTreeNode fPGrowth_FPTreeNode1 = fPGrowth_FPTreeNode0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Edge getParent ( int i ) { if ( i < m_parent . size ( ) ) { return ( Edge ) m_parent . elementAt ( i ) ; } else { return null ; } }
void test29 ( ) throws Throwable { FPGrowth . FPTreeNode fPGrowth_FPTreeNode0 = new FPGrowth . FPTreeNode ( ( FPGrowth . FPTreeNode ) null , ( BinaryItem ) null ) ; int int0 = fPGrowth_FPTreeNode0 . getProjectedCount ( 1024 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FPGrowth ( ) { resetOptions ( ) ; }
void test31 ( ) throws Throwable { FPGrowth . FPTreeNode fPGrowth_FPTreeNode0 = new FPGrowth . FPTreeNode ( ( FPGrowth . FPTreeNode ) null , ( BinaryItem ) null ) ; BinaryItem binaryItem0 = fPGrowth_FPTreeNode0 . getItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FPGrowth ( ) { resetOptions ( ) ; }
void test33 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( 0 ) ; fPGrowth_FrequentItemSets0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test35 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( 6 ) ; int int0 = fPGrowth_FrequentItemSets0 . getNumberOfTransactions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FPGrowth ( ) { resetOptions ( ) ; }
void test36 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( ( - 17 ) ) ; ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , ( - 17 ) ) ; fPGrowth_FrequentItemSets0 . addItemSet ( fPGrowth_FrequentBinaryItemSet0 ) ; String string0 = fPGrowth_FrequentItemSets0 . toString ( ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test37 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( ( - 108 ) ) ; DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . CONVICTION ; ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , ( - 108 ) ) ; Attribute attribute0 = new Attribute ( "No frequent items sets found ! " , ( List < String > ) null ) ; BinaryItem binaryItem0 = new BinaryItem ( attribute0 , ( - 108 ) ) ; arrayList0 . add ( binaryItem0 ) ; fPGrowth_FrequentItemSets0 . addItemSet ( fPGrowth_FrequentBinaryItemSet0 ) ; fPGrowth_FrequentItemSets0 . addItemSet ( fPGrowth_FrequentBinaryItemSet0 ) ; FPGrowth . generateRulesBruteForce ( fPGrowth_FrequentItemSets0 , defaultAssociationRule_METRIC_TYPE0 , ( double ) ( - 108 ) , ( - 108 ) , ( - 108 ) , ( - 108 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test38 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( ( - 108 ) ) ; String string0 = fPGrowth_FrequentItemSets0 . toString ( ( - 108 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test39 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( 6 ) ; ArrayList < BinaryItem > arrayList0 = new ArrayList < BinaryItem > ( ) ; FPGrowth . FrequentBinaryItemSet fPGrowth_FrequentBinaryItemSet0 = new FPGrowth . FrequentBinaryItemSet ( arrayList0 , 6 ) ; fPGrowth_FrequentItemSets0 . addItemSet ( fPGrowth_FrequentBinaryItemSet0 ) ; String string0 = fPGrowth_FrequentItemSets0 . toString ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test44 ( ) throws Throwable { FPGrowth . FPTreeNode fPGrowth_FPTreeNode0 = new FPGrowth . FPTreeNode ( ( FPGrowth . FPTreeNode ) null , ( BinaryItem ) null ) ; int int0 = fPGrowth_FPTreeNode0 . assignIDs ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int assignIDs ( int lastID ) { int currLastID = lastID + 1 ; m_id = currLastID ; if ( m_left ! = null ) { currLastID = m_left . assignIDs ( currLastID ) ; } if ( m_right ! = null ) { currLastID = m_right . assignIDs ( currLastID ) ; } return currLastID ; }
void test48 ( ) throws Throwable { FPGrowth . FrequentItemSets fPGrowth_FrequentItemSets0 = new FPGrowth . FrequentItemSets ( 0 ) ; DefaultAssociationRule . METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule . METRIC_TYPE . LIFT ; List < AssociationRule > list0 = FPGrowth . generateRulesBruteForce ( fPGrowth_FrequentItemSets0 , defaultAssociationRule_METRIC_TYPE0 , ( double ) 0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AssociationRule > pruneRules ( List < AssociationRule > rulesToPrune , ArrayList < Item > itemsToConsider , boolean useOr ) { ArrayList < AssociationRule > result = new ArrayList < AssociationRule > ( ) ; for ( AssociationRule r : rulesToPrune ) { if ( r . containsItems ( itemsToConsider , useOr ) ) { result . add ( r ) ; } } return result ; }
void test49 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( " < E * W ) H~m^" , arrayList0 , 220 ) ; SparseInstance sparseInstance0 = new SparseInstance ( 220 ) ; DenseInstance denseInstance0 = new DenseInstance ( ( Instance ) sparseInstance0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; ArrayList < BinaryItem > arrayList1 = fPGrowth0 . getSingletons ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumRulesToFind ( ) { return m_numRulesToFind ; }
void test52 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( " attValues = new FastVector ( ) ; \n" , ( List < String > ) null , 592 ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( " attValues = new FastVector ( ) ; \n" , arrayList0 , 592 ) ; ArrayList < BinaryItem > arrayList1 = fPGrowth0 . getSingletons ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return m_History . size ( ) ; }
void test53 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; Tag [ ] tagArray0 = new Tag [ 6 ] ; Tag tag0 = new Tag ( ) ; tagArray0 [ 0 ] = tag0 ; tagArray0 [ 1 ] = tagArray0 [ 0 ] ; Tag tag1 = new Tag ( ( - 1771 ) , "" , "" , false ) ; tagArray0 [ 2 ] = tag1 ; SelectedTag selectedTag0 = new SelectedTag ( "" , tagArray0 ) ; fPGrowth0 . setMetricType ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getUpperBoundMinSupport ( ) { return m_upperBoundMinSupport ; }
void test54 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String [ ] stringArray0 = fPGrowth0 . getRuleMetricNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDelta ( ) { return m_delta ; }
void test55 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseORForMustContainList ( ) { return m_mustContainOR ; }
void test56 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; fPGrowth0 . setFindAllRulesForSupportLevel ( true ) ; fPGrowth0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDelta ( ) { return m_delta ; }
void test57 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumRulesToFind ( ) { return m_numRulesToFind ; }
void test58 ( ) throws Throwable { FPGrowth fPGrowth0 = new FPGrowth ( ) ; String string0 = fPGrowth0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumRulesToFind ( ) { return m_numRulesToFind ; }
void test0 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test1 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test2 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test3 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test4 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test5 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test6 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test7 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test8 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test9 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void buildAssociations ( Instances data ) throws Exception { / / see if there is an environment variable with / / options for the associator if ( m_env ! = null & & m_Associator instanceof OptionHandler ) { String opts = m_env . getVariableValue ( "weka . gui . beans . associator . schemeOptions" ) ; if ( opts ! = null & & opts . length ( ) > 0 ) { String [ ] options = Utils . splitOptions ( opts ) ; if ( options . length > 0 ) { try { ( ( OptionHandler ) m_Associator ) . setOptions ( options ) ; } catch ( Exception ex ) { String warningMessage = " [ Associator ] WARNING : unable to set options \"" + opts + "\"for " + m_Associator . getClass ( ) . getName ( ) ; if ( m_log ! = null ) { m_log . logMessage ( warningMessage ) ; } else { System . err . print ( warningMessage ) ; } } } } } m_Associator . buildAssociations ( data ) ; }
void test11 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void buildAssociations ( Instances data ) throws Exception { / / see if there is an environment variable with / / options for the associator if ( m_env ! = null & & m_Associator instanceof OptionHandler ) { String opts = m_env . getVariableValue ( "weka . gui . beans . associator . schemeOptions" ) ; if ( opts ! = null & & opts . length ( ) > 0 ) { String [ ] options = Utils . splitOptions ( opts ) ; if ( options . length > 0 ) { try { ( ( OptionHandler ) m_Associator ) . setOptions ( options ) ; } catch ( Exception ex ) { String warningMessage = " [ Associator ] WARNING : unable to set options \"" + opts + "\"for " + m_Associator . getClass ( ) . getName ( ) ; if ( m_log ! = null ) { m_log . logMessage ( warningMessage ) ; } else { System . err . print ( warningMessage ) ; } } } } } m_Associator . buildAssociations ( data ) ; }
void test12 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test13 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProducer ( ) { return m_producer ; }
void test14 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test15 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test16 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canProduceRules ( ) ; }
void test17 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClassIndex ( ) { return m_ClassIndex ; }
void test18 ( ) throws Throwable { FilteredAssociator filteredAssociator0 = new FilteredAssociator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterSpec ( Filter filter ) { String result ; if ( filter = = null ) { result = "" ; } else { result = filter . getClass ( ) . getName ( ) ; if ( filter instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) filter ) . getOptions ( ) ) ; } return result ; }
void test0 ( ) throws Throwable { NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . GREATER_THAN ; Attribute attribute0 = new Attribute ( "$" , "$" ) ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 1538632695 , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getItemValueAsString ( ) { return Utils . doubleToString ( m_splitPoint , 3 ) ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . GREATER_THAN ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 11 . 453218746847764 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getItemValueAsString ( ) { return Utils . doubleToString ( m_splitPoint , 3 ) ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "$" , "$" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . EQUAL ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 1538632695 , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getItemValueAsString ( ) { return Utils . doubleToString ( m_splitPoint , 3 ) ; }
void test4 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . GREATER_THAN ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 11 . 453218746847764 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } KSBz^ ; 7Mc : 9m , t | J^" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . LESS_THAN_OR_EQUAL_TO ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 13 . 371727760196123 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getItemValueAsString ( ) { return Utils . doubleToString ( m_splitPoint , 3 ) ; }
void test6 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } KSBz^ ; 7Mc : 9m , t | J^" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 13 . 371727760196123 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getItemValueAsString ( ) { return Utils . doubleToString ( m_splitPoint , 3 ) ; }
void test7 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "$" , "$" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . EQUAL ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 1538632695 , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . GREATER_THAN ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 11 . 453218746847764 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "M { s2s@S _" , "M { s2s@S _" , 27 ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . LESS_THAN_OR_EQUAL_TO ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( double ) 27 , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } KSBz^ ; 7Mc : 9m , t | J^" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 13 . 371727760196123 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { Attribute attribute0 = new Attribute ( " } KSBz^ ; 7Mc : 9m , t | J^" ) ; NumericItem . Comparison numericItem_Comparison0 = NumericItem . Comparison . NONE ; NumericItem numericItem0 = new NumericItem ( attribute0 , ( - 13 . 371727760196123 ) , numericItem_Comparison0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSplitPoint ( ) { return m_Value ; }
void test0 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String [ ] stringArray0 = stacking0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test1 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 1 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 2 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 3 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 4 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 5 ] = "Hamilton , NZ" ; stringArray0 [ 6 ] = "If set to true , classifier may output additional info to the console . " ; stacking0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test2 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String string0 = stacking0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test3 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; Enumeration < Object > enumeration0 = stacking0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test0 ( ) throws Throwable { ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression ( ) ; String string0 = classificationViaRegression0 . getClassifierSpec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassifierSpec ( ) { String result ; Classifier c ; c = getClassifier ( ) ; result = c . getClass ( ) . getName ( ) ; if ( c instanceof OptionHandler ) result + = " " + Utils . joinOptions ( ( ( OptionHandler ) c ) . getOptions ( ) ) ; return result ; }
void test1 ( ) throws Throwable { CVParameterSelection cVParameterSelection0 = new CVParameterSelection ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "n'd3" ; cVParameterSelection0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultClassifierString ( ) { return "weka . classifiers . rules . ZeroR" ; }
void test2 ( ) throws Throwable { ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression ( ) ; String string0 = classificationViaRegression0 . classifierTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String classifierTipText ( ) { return "The classifier to use for classification . " ; }
void test3 ( ) throws Throwable { CVParameterSelection cVParameterSelection0 = new CVParameterSelection ( ) ; Enumeration < Object > enumeration0 = cVParameterSelection0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultClassifierString ( ) { return "weka . classifiers . rules . ZeroR" ; }
void test4 ( ) throws Throwable { ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression ( ) ; String [ ] stringArray0 = classificationViaRegression0 . getOptions ( ) ; classificationViaRegression0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier ( ) ; String [ ] stringArray0 = costSensitiveClassifier0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test6 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; regressionByDiscretization0 . setClassifier ( ( Classifier ) null ) ; Capabilities capabilities0 = regressionByDiscretization0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression ( ) ; Capabilities capabilities0 = classificationViaRegression0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Bagging bagging0 = new Bagging ( ) ; String string0 = bagging0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test1 ( ) throws Throwable { RandomCommittee randomCommittee0 = new RandomCommittee ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "09zBH" ; randomCommittee0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test2 ( ) throws Throwable { Bagging bagging0 = new Bagging ( ) ; Enumeration < Object > enumeration0 = bagging0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test3 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String [ ] stringArray0 = randomSubSpace0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test0 ( ) throws Throwable { CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "The random number seed to be used . " ; stringArray0 [ 1 ] = "The random number seed to be used . " ; stringArray0 [ 2 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 3 ] = "If set to true , classifier may output additional info to the console . " ; stringArray0 [ 4 ] = "The random number seed to be used . " ; stringArray0 [ 5 ] = "If set to true , classifier may output additional info to the console . " ; costSensitiveClassifier0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test1 ( ) throws Throwable { CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier ( ) ; String string0 = costSensitiveClassifier0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test2 ( ) throws Throwable { CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier ( ) ; String [ ] stringArray0 = costSensitiveClassifier0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test3 ( ) throws Throwable { CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier ( ) ; Enumeration < Object > enumeration0 = costSensitiveClassifier0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test0 ( ) throws Throwable { RandomCommittee randomCommittee0 = new RandomCommittee ( ) ; String string0 = randomCommittee0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { RandomCommittee randomCommittee0 = new RandomCommittee ( ) ; Instances instances0 = randomCommittee0 . getTrainingSet ( 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instances getTrainingSet ( ) { return m_trainingSet ; }
void test2 ( ) throws Throwable { RandomCommittee randomCommittee0 = new RandomCommittee ( ) ; String string0 = randomCommittee0 . defaultClassifierString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultClassifierString ( ) { return "weka . classifiers . rules . ZeroR" ; }
void test3 ( ) throws Throwable { RandomCommittee randomCommittee0 = new RandomCommittee ( ) ; String string0 = randomCommittee0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { RandomCommittee randomCommittee0 = new RandomCommittee ( ) ; String string0 = randomCommittee0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String [ ] stringArray0 = stacking0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test1 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String string0 = stacking0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test2 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String string0 = stacking0 . metaClassifierTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test3 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String string0 = stacking0 . numFoldsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test4 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The meta classifiers to be used . " ) ; stacking0 . buildClassifier ( instances0 ) ; String string0 = stacking0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; Enumeration < Object > enumeration0 = stacking0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String metaOption ( ) { return "\tFull name of meta classifier , followed by options . \n" + "\t ( default : \"weka . classifiers . rules . Zero\" ) " ; }
void test6 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String string0 = stacking0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test8 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; stacking0 . setOptions ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test10 ( ) throws Throwable { Stacking stacking0 = new Stacking ( ) ; String string0 = stacking0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumFolds ( ) { return m_NumFolds ; }
void test0 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String string0 = randomSubSpace0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test1 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; randomSubSpace0 . getTrainingSet ( 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test2 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String [ ] stringArray0 = randomSubSpace0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test3 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String string0 = randomSubSpace0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test4 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; Enumeration < Object > enumeration0 = randomSubSpace0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultClassifierString ( ) { return "weka . classifiers . rules . ZeroR" ; }
void test5 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String string0 = randomSubSpace0 . subSpaceSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test6 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " > 3U^" ; randomSubSpace0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test7 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; int int0 = randomSubSpace0 . numberOfAttributes ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test8 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; int int0 = randomSubSpace0 . numberOfAttributes ( ( - 14 ) , ( - 14 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test9 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; Integer [ ] integerArray0 = new Integer [ 33 ] ; Random random0 = new Random ( ) ; String string0 = randomSubSpace0 . randomSubSpace ( integerArray0 , 1 , 1 , random0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String randomSubSpace ( Integer [ ] indices , int subSpaceSize , int classIndex , Random random ) { Collections . shuffle ( Arrays . asList ( indices ) , random ) ; StringBuffer sb = new StringBuffer ( "" ) ; for ( int i = 0 ; i < subSpaceSize ; i + + ) { sb . append ( indices [ i ] + " , " ) ; } sb . append ( classIndex ) ; if ( getDebug ( ) ) System . out . println ( "subSPACE = " + sb ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; randomSubSpace0 . setDebug ( true ) ; Integer [ ] integerArray0 = new Integer [ 33 ] ; Random random0 = new Random ( ) ; String string0 = randomSubSpace0 . randomSubSpace ( integerArray0 , 1 , 1 , random0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String randomSubSpace ( Integer [ ] indices , int subSpaceSize , int classIndex , Random random ) { Collections . shuffle ( Arrays . asList ( indices ) , random ) ; StringBuffer sb = new StringBuffer ( "" ) ; for ( int i = 0 ; i < subSpaceSize ; i + + ) { sb . append ( indices [ i ] + " , " ) ; } sb . append ( classIndex ) ; if ( getDebug ( ) ) System . out . println ( "subSPACE = " + sb ) ; return sb . toString ( ) ; }
void test12 ( ) throws Throwable { RandomSubSpace randomSubSpace0 = new RandomSubSpace ( ) ; String string0 = randomSubSpace0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSubSpaceSize ( ) { return m_SubSpaceSize ; }
void test2 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "The density estimator to use . " ; stringArray0 [ 1 ] = "The density estimator to use . " ; stringArray0 [ 2 ] = "The density estimator to use . " ; regressionByDiscretization0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultClassifierString ( ) { return "weka . classifiers . rules . ZeroR" ; }
void test3 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBins ( ) { return m_NumBins ; }
void test4 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMinimizeAbsoluteError ( ) { return m_MinimizeAbsoluteError ; }
void test5 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; SelectedTag selectedTag0 = regressionByDiscretization0 . getEstimatorType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBins ( ) { return m_NumBins ; }
void test6 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . useEqualFrequencyTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test7 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . numBinsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBins ( ) { return m_NumBins ; }
void test8 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . deleteEmptyBinsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test9 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . minimizeAbsoluteErrorTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test10 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . estimatorTypeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test11 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; Enumeration < Object > enumeration0 = regressionByDiscretization0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String defaultClassifierString ( ) { return "weka . classifiers . rules . ZeroR" ; }
void test12 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String [ ] stringArray0 = regressionByDiscretization0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test13 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; regressionByDiscretization0 . setDeleteEmptyBins ( true ) ; regressionByDiscretization0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDeleteEmptyBins ( ) { return m_DeleteEmptyBins ; }
void test14 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBins ( ) { return m_NumBins ; }
void test15 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumBins ( ) { return m_NumBins ; }
void test16 ( ) throws Throwable { RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; String string0 = regressionByDiscretization0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseEqualFrequency ( ) { return true ; }
void test0 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; String string0 = vote0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; String string0 = vote0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; vote0 . removePreBuiltClassifier ( ( Classifier ) regressionByDiscretization0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String classifiersTipText ( ) { return "The base classifiers to be used . " ; }
void test3 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Environment environment0 = new Environment ( ) ; vote0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; String string0 = vote0 . combinationRuleTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String combinationRuleTipText ( ) { return "The combination rule used . " ; }
void test5 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; String string0 = vote0 . preBuiltClassifiersTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String preBuiltClassifiersTipText ( ) { return "The pre - built serialized classifiers to include . Multiple " + "serialized classifiers can be included alongside those " + "that are built from scratch when this classifier runs . " + "Note that it does not make sense to include pre - built " + "classifiers in a cross - validation since they are " + "and their models do not change from fold to fold . " ; }
void test6 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Enumeration < Object > enumeration0 = vote0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test7 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; File [ ] fileArray0 = new File [ 8 ] ; NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; File file0 = naiveBayesMultinomialText0 . getStopwords ( ) ; fileArray0 [ 0 ] = file0 ; fileArray0 [ 1 ] = file0 ; fileArray0 [ 2 ] = file0 ; fileArray0 [ 3 ] = fileArray0 [ 2 ] ; fileArray0 [ 4 ] = fileArray0 [ 0 ] ; fileArray0 [ 5 ] = fileArray0 [ 1 ] ; fileArray0 [ 6 ] = file0 ; fileArray0 [ 7 ] = file0 ; vote0 . setPreBuiltClassifiers ( fileArray0 ) ; String [ ] stringArray0 = vote0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; vote0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; LogitBoost logitBoost0 = new LogitBoost ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) logitBoost0 ) ; Stacking stacking0 = new Stacking ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) stacking0 ) ; Capabilities capabilities0 = vote0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . lastInstance ( ) ; double double0 = vote0 . classifyInstanceMedian ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double classifyInstanceMedian ( Instance instance ) throws Exception { double [ ] results = new double [ m_Classifiers . length + m_preBuiltClassifiers . size ( ) ] ; double result ; for ( int i = 0 ; i < m_Classifiers . length ; i + + ) results [ i ] = m_Classifiers [ i ] . classifyInstance ( instance ) ; for ( int i = 0 ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { results [ i + m_Classifiers . length ] = m_preBuiltClassifiers . get ( i ) . classifyInstance ( instance ) ; } if ( results . length = = 0 ) result = 0 ; else if ( results . length = = 1 ) result = results [ 0 ] ; else result = Utils . kthSmallestValue ( results , results . length / 2 ) ; return result ; }
void test12 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = ( Vote ) AbstractClassifier . makeCopy ( ( Classifier ) vote0 ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) vote1 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . lastInstance ( ) ; double double0 = vote0 . classifyInstanceMedian ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = new Vote ( ) ; Classifier [ ] classifierArray0 = new Classifier [ 2 ] ; classifierArray0 [ 0 ] = ( Classifier ) vote1 ; classifierArray0 [ 1 ] = ( Classifier ) vote1 ; vote0 . setClassifiers ( classifierArray0 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; vote0 . buildClassifier ( instances0 ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMajorityVoting ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstanceMajorityVoting ( Instance instance ) throws Exception { double [ ] probs = new double [ instance . classAttribute ( ) . numValues ( ) ] ; double [ ] votes = new double [ probs . length ] ; for ( int i = 0 ; i < m_Classifiers . length ; i + + ) { probs = getClassifier ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } for ( int i = 0 ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { probs = m_preBuiltClassifiers . get ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } int tmpMajorityIndex = 0 ; for ( int k = 1 ; k < votes . length ; k + + ) { if ( votes [ k ] > votes [ tmpMajorityIndex ] ) tmpMajorityIndex = k ; } / / Consider the cases when multiple classes receive the same amount of votes Vector < Integer > majorityIndexes = new Vector < Integer > ( ) ; for ( int k = 0 ; k < votes . length ; k + + ) { if ( votes [ k ] = = votes [ tmpMajorityIndex ] ) majorityIndexes . add ( k ) ; } / / Resolve the ties according to a uniform random distribution int majorityIndex = majorityIndexes . get ( m_Random . nextInt ( majorityIndexes . size ( ) ) ) ; / / set probs to 0 probs = new double [ probs . length ] ; probs [ majorityIndex ] = 1 ; / / the class that have been voted the most / / receives 1 return probs ; }
void test14 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = ( Vote ) AbstractClassifier . makeCopy ( ( Classifier ) vote0 ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) vote1 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . lastInstance ( ) ; double double0 = vote0 . classifyInstance ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = new Vote ( ) ; Classifier [ ] classifierArray0 = new Classifier [ 2 ] ; classifierArray0 [ 0 ] = ( Classifier ) vote1 ; classifierArray0 [ 1 ] = ( Classifier ) vote1 ; vote0 . setClassifiers ( classifierArray0 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceProduct ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstanceProduct ( Instance instance ) throws Exception { double [ ] probs = ( m_Classifiers . length > 0 ) ? getClassifier ( 0 ) . distributionForInstance ( instance ) : m_preBuiltClassifiers . get ( 0 ) . distributionForInstance ( instance ) ; probs = probs . clone ( ) ; for ( int i = 1 ; i < m_Classifiers . length ; i + + ) { double [ ] dist = getClassifier ( i ) . distributionForInstance ( instance ) ; for ( int j = 0 ; j < dist . length ; j + + ) { probs [ j ] * = dist [ j ] ; } } int index = ( m_Classifiers . length > 0 ) ? 0 : 1 ; for ( int i = index ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { double [ ] dist = m_preBuiltClassifiers . get ( i ) . distributionForInstance ( instance ) ; for ( int j = 0 ; j < dist . length ; j + + ) { probs [ j ] * = dist [ j ] ; } } return probs ; }
void test16 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = new Vote ( ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) vote1 ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceProduct ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { Random . setNextRandom ( 125 ) ; Vote vote0 = new Vote ( ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; vote0 . buildClassifier ( instances0 ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMajorityVoting ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstanceMajorityVoting ( Instance instance ) throws Exception { double [ ] probs = new double [ instance . classAttribute ( ) . numValues ( ) ] ; double [ ] votes = new double [ probs . length ] ; for ( int i = 0 ; i < m_Classifiers . length ; i + + ) { probs = getClassifier ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } for ( int i = 0 ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { probs = m_preBuiltClassifiers . get ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } int tmpMajorityIndex = 0 ; for ( int k = 1 ; k < votes . length ; k + + ) { if ( votes [ k ] > votes [ tmpMajorityIndex ] ) tmpMajorityIndex = k ; } / / Consider the cases when multiple classes receive the same amount of votes Vector < Integer > majorityIndexes = new Vector < Integer > ( ) ; for ( int k = 0 ; k < votes . length ; k + + ) { if ( votes [ k ] = = votes [ tmpMajorityIndex ] ) majorityIndexes . add ( k ) ; } / / Resolve the ties according to a uniform random distribution int majorityIndex = majorityIndexes . get ( m_Random . nextInt ( majorityIndexes . size ( ) ) ) ; / / set probs to 0 probs = new double [ probs . length ] ; probs [ majorityIndex ] = 1 ; / / the class that have been voted the most / / receives 1 return probs ; }
void test18 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; CVParameterSelection cVParameterSelection0 = new CVParameterSelection ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) cVParameterSelection0 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMajorityVoting ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstanceMajorityVoting ( Instance instance ) throws Exception { double [ ] probs = new double [ instance . classAttribute ( ) . numValues ( ) ] ; double [ ] votes = new double [ probs . length ] ; for ( int i = 0 ; i < m_Classifiers . length ; i + + ) { probs = getClassifier ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } for ( int i = 0 ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { probs = m_preBuiltClassifiers . get ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } int tmpMajorityIndex = 0 ; for ( int k = 1 ; k < votes . length ; k + + ) { if ( votes [ k ] > votes [ tmpMajorityIndex ] ) tmpMajorityIndex = k ; } / / Consider the cases when multiple classes receive the same amount of votes Vector < Integer > majorityIndexes = new Vector < Integer > ( ) ; for ( int k = 0 ; k < votes . length ; k + + ) { if ( votes [ k ] = = votes [ tmpMajorityIndex ] ) majorityIndexes . add ( k ) ; } / / Resolve the ties according to a uniform random distribution int majorityIndex = majorityIndexes . get ( m_Random . nextInt ( majorityIndexes . size ( ) ) ) ; / / set probs to 0 probs = new double [ probs . length ] ; probs [ majorityIndex ] = 1 ; / / the class that have been voted the most / / receives 1 return probs ; }
void test19 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Random . setNextRandom ( 29 ) ; CVParameterSelection cVParameterSelection0 = new CVParameterSelection ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) cVParameterSelection0 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; cVParameterSelection0 . buildClassifier ( instances0 ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMajorityVoting ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstanceMajorityVoting ( Instance instance ) throws Exception { double [ ] probs = new double [ instance . classAttribute ( ) . numValues ( ) ] ; double [ ] votes = new double [ probs . length ] ; for ( int i = 0 ; i < m_Classifiers . length ; i + + ) { probs = getClassifier ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } for ( int i = 0 ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { probs = m_preBuiltClassifiers . get ( i ) . distributionForInstance ( instance ) ; int maxIndex = 0 ; for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] > probs [ maxIndex ] ) maxIndex = j ; } / / Consider the cases when multiple classes happen to have the same / / probability for ( int j = 0 ; j < probs . length ; j + + ) { if ( probs [ j ] = = probs [ maxIndex ] ) votes [ j ] + + ; } } int tmpMajorityIndex = 0 ; for ( int k = 1 ; k < votes . length ; k + + ) { if ( votes [ k ] > votes [ tmpMajorityIndex ] ) tmpMajorityIndex = k ; } / / Consider the cases when multiple classes receive the same amount of votes Vector < Integer > majorityIndexes = new Vector < Integer > ( ) ; for ( int k = 0 ; k < votes . length ; k + + ) { if ( votes [ k ] = = votes [ tmpMajorityIndex ] ) majorityIndexes . add ( k ) ; } / / Resolve the ties according to a uniform random distribution int majorityIndex = majorityIndexes . get ( m_Random . nextInt ( majorityIndexes . size ( ) ) ) ; / / set probs to 0 probs = new double [ probs . length ] ; probs [ majorityIndex ] = 1 ; / / the class that have been voted the most / / receives 1 return probs ; }
void test20 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = new Vote ( ) ; Classifier [ ] classifierArray0 = new Classifier [ 2 ] ; classifierArray0 [ 0 ] = ( Classifier ) vote1 ; classifierArray0 [ 1 ] = ( Classifier ) vote1 ; vote0 . setClassifiers ( classifierArray0 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMax ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstanceMax ( Instance instance ) throws Exception { double [ ] max = ( m_Classifiers . length > 0 ) ? getClassifier ( 0 ) . distributionForInstance ( instance ) : m_preBuiltClassifiers . get ( 0 ) . distributionForInstance ( instance ) ; max = max . clone ( ) ; for ( int i = 1 ; i < m_Classifiers . length ; i + + ) { double [ ] dist = getClassifier ( i ) . distributionForInstance ( instance ) ; for ( int j = 0 ; j < dist . length ; j + + ) { if ( max [ j ] < dist [ j ] ) max [ j ] = dist [ j ] ; } } int index = ( m_Classifiers . length > 0 ) ? 0 : 1 ; for ( int i = index ; i < m_preBuiltClassifiers . size ( ) ; i + + ) { double [ ] dist = m_preBuiltClassifiers . get ( i ) . distributionForInstance ( instance ) ; for ( int j = 0 ; j < dist . length ; j + + ) { if ( max [ j ] < dist [ j ] ) max [ j ] = dist [ j ] ; } } return max ; }
void test21 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = new Vote ( ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . firstInstance ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) vote1 ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMax ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test24 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; Vote vote1 = ( Vote ) AbstractClassifier . makeCopy ( ( Classifier ) vote0 ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) vote1 ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( "The pre - built serialized classifiers to include . Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs . Note that it does not make sense to include pre - built classifiers in a cross - validation since they are and their models do not change from fold to fold . " ) ; DenseInstance denseInstance0 = ( DenseInstance ) instances0 . lastInstance ( ) ; double [ ] doubleArray0 = vote0 . distributionForInstanceMin ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test25 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable ( ) ; SelectedTag selectedTag0 = multiClassClassifierUpdateable0 . getMethod ( ) ; vote0 . setCombinationRule ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test26 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; File [ ] fileArray0 = vote0 . getPreBuiltClassifiers ( ) ; vote0 . setPreBuiltClassifiers ( fileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test27 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; File [ ] fileArray0 = new File [ 10 ] ; SGDText sGDText0 = new SGDText ( ) ; File file0 = sGDText0 . getStopwords ( ) ; fileArray0 [ 0 ] = file0 ; fileArray0 [ 1 ] = file0 ; fileArray0 [ 2 ] = file0 ; fileArray0 [ 3 ] = fileArray0 [ 0 ] ; fileArray0 [ 4 ] = file0 ; fileArray0 [ 5 ] = file0 ; fileArray0 [ 6 ] = file0 ; fileArray0 [ 7 ] = fileArray0 [ 2 ] ; fileArray0 [ 8 ] = fileArray0 [ 5 ] ; fileArray0 [ 9 ] = fileArray0 [ 2 ] ; vote0 . setPreBuiltClassifiers ( fileArray0 ) ; File [ ] fileArray1 = vote0 . getPreBuiltClassifiers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File [ ] getPreBuiltClassifiers ( ) { File [ ] result = new File [ m_classifiersToLoad . size ( ) ] ; for ( int i = 0 ; i < m_classifiersToLoad . size ( ) ; i + + ) { result [ i ] = new File ( m_classifiersToLoad . get ( i ) ) ; } return result ; }
void test28 ( ) throws Throwable { Vote vote0 = new Vote ( ) ; REPTree rEPTree0 = new REPTree ( ) ; vote0 . addPreBuiltClassifier ( ( Classifier ) rEPTree0 ) ; String string0 = vote0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" , "" ) ; JRip . NumericAntd jRip_NumericAntd0 = jRip0 . new NumericAntd ( attribute0 ) ; double double0 = jRip_NumericAntd0 . getCover ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCheckErrorRate ( ) { return m_CheckErr ; }
void test1 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" ) ; JRip . NominalAntd jRip_NominalAntd0 = jRip0 . new NominalAntd ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test2 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" ) ; JRip . NominalAntd jRip_NominalAntd0 = jRip0 . new NominalAntd ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test3 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" ) ; JRip . NominalAntd jRip_NominalAntd0 = jRip0 . new NominalAntd ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test4 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "This class implements a propositional rule learner , Repeated Incremental Pruning to Produce Error Reduction ( RIPPER ) , which was proposed by William W . Cohen as an optimized version of IREP . \n\nThe algorithm is briefly described as follows : \n\nInitialize RS = { } , and for each class from the less prevalent one to the more frequent one , DO : \n\n1 . Building stage : \nRepeat 1 . 1 and 1 . 2 until the descrition length ( DL ) of the ruleset and examples is 64 bits greater than the smallest DL met so far , or there are no positive examples , or the error rate > = 50% . \n\n1 . 1 . Grow phase : \nGrow one rule by greedily adding antecedents ( or conditions ) to the rule until the rule is perfect ( i . e . 100% accurate ) . The procedure tries every possible value of each attribute and selects the condition with highest information gain : p ( log ( p / t ) - log ( P / T ) ) . \n\n1 . 2 . Prune phase : \nIncrementally prune each rule and allow the pruning of any sequences of the antecedents ; The pruning metric is ( p - n ) / ( p + n ) - - but it's actually 2p / ( p + n ) - 1 , so in this implementation we simply use p / ( p + n ) ( actually ( p + 1 ) / ( p + n + 2 ) , thus if p + n is 0 , it's 0 . 5 ) . \n\n2 . Optimization stage : \n after generating the initial ruleset { Ri } , generate and prune two variants of each rule Ri from randomized data using procedure 1 . 1 and 1 . 2 . But one variant is generated from an empty rule while the other is generated by greedily adding antecedents to the original rule . Moreover , the pruning metric used here is ( TP + TN ) / ( P + N ) . Then the smallest possible DL for each variant and the original rule is computed . The variant with the minimal DL is selected as the representative of Ri in the ruleset . After all the rules in { Ri } have been examined and if there are still residual positives , more rules are generated based on the residual positives using Building Stage again . \n3 . Delete the rules from the ruleset that would increase the DL of the whole ruleset if it were in it . and add resultant ruleset to RS . \nENDDO\n\nNote that there seem to be 2 bugs in the original ripper program that would affect the ruleset size and accuracy slightly . This implementation avoids these bugs and thus is a little bit different from Cohen's original implementation . Even after fixing the bugs , since the order of classes with the same frequency is not defined in ripper , there still seems to be some trivial difference between this implementation and the original ripper , especially for audiology data in UCI repository , where there are lots of classes of few instances . \n\nDetails please see : \n\nWilliam W . Cohen : Fast Effective Rule Induction . In : Twelfth International Conference on Machine Learning , 115 - 123 , 1995 . \n\nPS . We have compared this implementation with the original ripper implementation in aspects of accuracy , ruleset size and running time on both artificial data \"ab + bcd + defg\" and UCI datasets . In all these aspects it seems to be quite comparable to the original ripper implementation . However , we didn't consider memory consumption optimization in this implementation . \n\n" , 65 ) ; JRip . NumericAntd jRip_NumericAntd0 = jRip0 . new NumericAntd ( attribute0 ) ; double double0 = jRip_NumericAntd0 . getMaxInfoGain ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test5 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" , "" ) ; JRip . NumericAntd jRip_NumericAntd0 = jRip0 . new NumericAntd ( attribute0 ) ; JRip . NumericAntd jRip_NumericAntd1 = ( JRip . NumericAntd ) jRip_NumericAntd0 . copy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test6 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" ) ; JRip . NominalAntd jRip_NominalAntd0 = jRip0 . new NominalAntd ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinNo ( ) { return m_MinNo ; }
void test7 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( " / { u . Xr ) " , ( List < String > ) null , 0 ) ; JRip . NominalAntd jRip_NominalAntd0 = jRip0 . new NominalAntd ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test8 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Attribute attribute0 = new Attribute ( "" , 185 ) ; JRip . NominalAntd jRip_NominalAntd0 = jRip0 . new NominalAntd ( attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test9 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . checkErrorRateTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test10 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; boolean boolean0 = jRip0 . getUsePruning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test11 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; double double0 = jRip0 . getMinNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test12 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test13 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinNo ( ) { return m_MinNo ; }
void test14 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . usePruningTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUsePruning ( ) { return m_UsePruning ; }
void test15 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; boolean boolean0 = jRip0 . getDebug ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinNo ( ) { return m_MinNo ; }
void test16 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; boolean boolean0 = jRip0 . getCheckErrorRate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUsePruning ( ) { return m_UsePruning ; }
void test17 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test18 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Enumeration < Object > enumeration0 = jRip0 . enumerateMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test19 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test21 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; long long0 = jRip0 . getSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test22 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; jRip0 . setSeed ( 6L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test24 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test25 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; jRip0 . setOptimizations ( ( - 1403 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinNo ( ) { return m_MinNo ; }
void test26 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . minNoTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test28 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . optimizationsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUsePruning ( ) { return m_UsePruning ; }
void test29 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinNo ( ) { return m_MinNo ; }
void test30 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . foldsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCheckErrorRate ( ) { return m_CheckErr ; }
void test31 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; int int0 = jRip0 . getOptimizations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFolds ( ) { return m_folds ; }
void test32 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . debugTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUsePruning ( ) { return m_UsePruning ; }
void test33 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; String string0 = jRip0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test34 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; int int0 = jRip0 . getFolds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUsePruning ( ) { return m_UsePruning ; }
void test35 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; Enumeration < Object > enumeration0 = jRip0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test36 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; JRip . NumericAntd jRip_NumericAntd0 = jRip0 . new NumericAntd ( ( Attribute ) null ) ; String string0 = jRip_NumericAntd0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUsePruning ( ) { return m_UsePruning ; }
void test37 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; JRip . NumericAntd jRip_NumericAntd0 = jRip0 . new NumericAntd ( ( Attribute ) null ) ; double double0 = jRip_NumericAntd0 . getSplitPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCheckErrorRate ( ) { return m_CheckErr ; }
void test38 ( ) throws Throwable { JRip jRip0 = new JRip ( ) ; JRip . RipperRule jRip_RipperRule0 = jRip0 . new RipperRule ( ) ; JRip . RipperRule jRip_RipperRule1 = ( JRip . RipperRule ) jRip_RipperRule0 . copy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOptimizations ( ) { return m_Optimizations ; }
void test0 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 1 ] ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 13 ] ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; decisionTableHashKey0 . print_hash_code ( ) ; decisionTableHashKey0 . print_hash_code ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 1 ] ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 3 ] ; doubleArray0 [ 0 ] = Double . NEGATIVE_INFINITY ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; decisionTableHashKey0 . print_hash_code ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test5 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 13 ] ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test6 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 13 ] ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test7 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 3 ] ; doubleArray0 [ 0 ] = Double . NEGATIVE_INFINITY ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test8 ( ) throws Throwable { double [ ] doubleArray0 = new double [ 3 ] ; DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test0 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; int int0 = decisionTable0 . getCrossVal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test1 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . useIBkTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test2 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test3 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; Enumeration < Object > enumeration0 = decisionTable0 . enumerateMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test5 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseIBk ( ) { return m_useIBk ; }
void test6 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; SelectedTag selectedTag0 = decisionTable0 . getEvaluationMeasure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test7 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . displayRulesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseIBk ( ) { return m_useIBk ; }
void test8 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . searchTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test9 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; boolean boolean0 = decisionTable0 . getDisplayRules ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test10 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . crossValTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test11 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test13 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; boolean boolean0 = decisionTable0 . getUseIBk ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test14 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . evaluationMeasureTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseIBk ( ) { return m_useIBk ; }
void test16 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; Capabilities capabilities0 = naiveBayesMultinomialUpdateable0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Random . setNextRandom ( 2147483641 ) ; Instances instances0 = testInstances0 . generate ( ) ; decisionTable0 . buildClassifier ( instances0 ) ; DenseInstance denseInstance0 = new DenseInstance ( 2511 ) ; decisionTable0 . distributionForInstance ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { Random . setNextRandom ( ( - 57 ) ) ; DecisionTable decisionTable0 = new DecisionTable ( ) ; decisionTable0 . setCrossVal ( 5 ) ; Capabilities capabilities0 = decisionTable0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Instances instances0 = testInstances0 . generate ( "fEq ( 29XDL3K9VGrx" ) ; decisionTable0 . buildClassifier ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureNumRules ( ) { return m_entries . size ( ) ; }
void test18 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; Enumeration < Object > enumeration0 = decisionTable0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test19 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; GaussianProcesses gaussianProcesses0 = new GaussianProcesses ( ) ; SelectedTag selectedTag0 = gaussianProcesses0 . getFilterType ( ) ; decisionTable0 . setEvaluationMeasure ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test20 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String [ ] stringArray0 = decisionTable0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseIBk ( ) { return m_useIBk ; }
void test21 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test22 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayRules ( ) { return m_displayRules ; }
void test23 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; Capabilities capabilities0 = naiveBayesMultinomialUpdateable0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; decisionTable0 . setUseIBk ( true ) ; Instances instances0 = testInstances0 . generate ( ) ; decisionTable0 . buildClassifier ( instances0 ) ; String string0 = decisionTable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test24 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; Capabilities capabilities0 = naiveBayesMultinomialUpdateable0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Instances instances0 = testInstances0 . generate ( ) ; decisionTable0 . buildClassifier ( instances0 ) ; DenseInstance denseInstance0 = new DenseInstance ( 2519 ) ; decisionTable0 . distributionForInstance ( ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test26 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; String string0 = decisionTable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test27 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; Capabilities capabilities0 = naiveBayesMultinomialUpdateable0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Instances instances0 = testInstances0 . generate ( ) ; decisionTable0 . buildClassifier ( instances0 ) ; decisionTable0 . setCrossVal ( 2511 ) ; String string0 = decisionTable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCrossVal ( ) { return m_CVFolds ; }
void test28 ( ) throws Throwable { DecisionTable decisionTable0 = new DecisionTable ( ) ; decisionTable0 . setDisplayRules ( true ) ; NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; Capabilities capabilities0 = naiveBayesMultinomialUpdateable0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Random . setNextRandom ( 2147483641 ) ; Instances instances0 = testInstances0 . generate ( ) ; decisionTable0 . buildClassifier ( instances0 ) ; String string0 = decisionTable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { SigmoidUnit sigmoidUnit0 = new SigmoidUnit ( ) ; String string0 = sigmoidUnit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { boolean boolean0 = NeuralConnection . connect ( ( NeuralConnection ) null , ( NeuralConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void connect ( ) { / / disconnect if still connected if ( m_DbUtils . isConnected ( ) ) { try { m_DbUtils . disconnectFromDatabase ( ) ; notifyConnectionListeners ( ConnectionEvent . DISCONNECT ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; notifyConnectionListeners ( ConnectionEvent . DISCONNECT , e ) ; } } / / connect try { m_DbUtils . setDatabaseURL ( getURL ( ) ) ; m_DbUtils . setUsername ( getUser ( ) ) ; m_DbUtils . setPassword ( getPassword ( ) ) ; m_DbUtils . connectToDatabase ( ) ; notifyConnectionListeners ( ConnectionEvent . CONNECT ) ; / / add to history addHistory ( getUser ( ) + "@" + getURL ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; notifyConnectionListeners ( ConnectionEvent . CONNECT , e ) ; } setButtons ( ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = NeuralConnection . disconnect ( ( NeuralConnection ) null , ( NeuralConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean disconnect ( NeuralConnection s , NeuralConnection t ) { if ( s = = null | | t = = null ) { return false ; } boolean stat1 = s . disconnectOutput ( t , - 1 ) ; boolean stat2 = t . disconnectInput ( s , - 1 ) ; if ( stat1 & & stat2 ) { if ( ( s . getType ( ) & PURE_INPUT ) = = PURE_INPUT ) { t . setType ( t . getType ( ) & ( ~INPUT ) ) ; } else if ( ( t . getType ( ) & ( PURE_OUTPUT ) ) = = PURE_OUTPUT ) { s . setType ( s . getType ( ) & ( ~OUTPUT ) ) ; } if ( s . getNumInputs ( ) = = 0 & & s . getNumOutputs ( ) = = 0 ) { s . setType ( s . getType ( ) & ( ~CONNECTED ) ) ; } if ( t . getNumInputs ( ) = = 0 & & t . getNumOutputs ( ) = = 0 ) { t . setType ( t . getType ( ) & ( ~CONNECTED ) ) ; } } return stat1 & & stat2 ; }
void test0 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; String string0 = normalizedPolyKernel0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; String string0 = normalizedPolyKernel0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; String string0 = normalizedPolyKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; normalizedPolyKernel0 . setUseLowerOrder ( true ) ; String string0 = normalizedPolyKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; String string0 = regSMOImproved0 . useVariant1TipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useVariant1TipText ( ) { return "set true to use variant 1 of the paper , otherwise use variant 2 . " ; }
void test1 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; String string0 = regSMOImproved0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; String [ ] stringArray0 = regSMOImproved0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseVariant1 ( ) { return m_bUseVariant1 ; }
void test3 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; String string0 = regSMOImproved0 . toleranceTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toleranceTipText ( ) { return "tolerance parameter used for checking stopping criterion b . up < b . low + 2 tol" ; }
void test5 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; String string0 = regSMOImproved0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test6 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; boolean boolean0 = regSMOImproved0 . isUseVariant1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseVariant1 ( ) { return m_bUseVariant1 ; }
void test7 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; Enumeration < Object > enumeration0 = regSMOImproved0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTolerance ( ) { return m_fTolerance ; }
void test8 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTolerance ( ) { return m_fTolerance ; }
void test10 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; int int0 = regSMOImproved0 . takeStep ( ( - 1082 ) , ( - 1082 ) , 0 . 0010 , 0 . 0010 , ( double ) ( - 1082 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int takeStep ( int i1 , int i2 , double alpha2 , double alpha2Star , double phi2 ) throws Exception { / / if ( i1 = = i2 ) return 0 if ( i1 = = i2 ) { return 0 ; } double C1 = m_C * m_data . instance ( i1 ) . weight ( ) ; double C2 = m_C * m_data . instance ( i2 ) . weight ( ) ; / / alpha1 , alpha1 * = Lagrange multipliers for i1 / / y1 = target [ i1 ] / / phi1 = SVM output on point [ i1 ] ? y1 ( in error cache ) double alpha1 = m_alpha [ i1 ] ; double alpha1Star = m_alphaStar [ i1 ] ; double y1 = m_target [ i1 ] ; double phi1 = m_error [ i1 ] ; / / k11 = kernel ( point [ i1 ] , point [ i1 ] ) / / k12 = kernel ( point [ i1 ] , point [ i2 ] ) / / k22 = kernel ( point [ i2 ] , point [ i2 ] ) / / eta = 2 * k12 ? - k11 ? - k22 / / gamma = alpha1 ? - alpha1 * + alpha2 ? - alpha2 * double k11 = m_kernel . eval ( i1 , i1 , m_data . instance ( i1 ) ) ; double k12 = m_kernel . eval ( i1 , i2 , m_data . instance ( i1 ) ) ; double k22 = m_kernel . eval ( i2 , i2 , m_data . instance ( i2 ) ) ; double eta = - 2 * k12 + k11 + k22 ; / / note , Smola's psuedocode has signs swapped , Keerthi's doesn't if ( eta < 0 ) { / / this may happen due to numeric instability / / due to Mercer's condition , this should not happen , hence we give up return 0 ; } double gamma = alpha1 - alpha1Star + alpha2 - alpha2Star ; / / % we assume eta < 0 . otherwise one has to repeat the complete / / % reasoning similarly ( compute objective function for L and H / / % and decide which one is largest / / case1 = case2 = case3 = case4 = finished = 0 / / alpha1old = alpha1 , alpha1old * = alpha1 * / / alpha2old = alpha2 , alpha2old * = alpha2 * / / deltaPhi = phi1 ? - phi2 double alpha1old = alpha1 ; double alpha1Starold = alpha1Star ; double alpha2old = alpha2 ; double alpha2Starold = alpha2Star ; double deltaPhi = phi2 - phi1 ; if ( findOptimalPointOnLine ( i1 , alpha1 , alpha1Star , C1 , i2 , alpha2 , alpha2Star , C2 , gamma , eta , deltaPhi ) ) { alpha1 = m_alpha [ i1 ] ; alpha1Star = m_alphaStar [ i1 ] ; alpha2 = m_alpha [ i2 ] ; alpha2Star = m_alphaStar [ i2 ] ; / / Update error cache using new Lagrange multipliers double dAlpha1 = alpha1 - alpha1old - ( alpha1Star - alpha1Starold ) ; double dAlpha2 = alpha2 - alpha2old - ( alpha2Star - alpha2Starold ) ; for ( int j = 0 ; j < m_nInstances ; j + + ) { if ( ( j ! = i1 ) & & ( j ! = i2 ) / * & & m_error [ j ] ! = MAXERR * / ) { m_error [ j ] + = dAlpha1 * m_kernel . eval ( i1 , j , m_data . instance ( i1 ) ) + dAlpha2 * m_kernel . eval ( i2 , j , m_data . instance ( i2 ) ) ; } } m_error [ i1 ] + = dAlpha1 * k11 + dAlpha2 * k12 ; m_error [ i2 ] + = dAlpha1 * k12 + dAlpha2 * k22 ; / / Update threshold to reflect change in Lagrange multipliers double b1 = Double . MAX_VALUE ; double b2 = Double . MAX_VALUE ; if ( ( 0 < alpha1 & & alpha1 < C1 ) | | ( 0 < alpha1Star & & alpha1Star < C1 ) | | ( 0 < alpha2 & & alpha2 < C2 ) | | ( 0 < alpha2Star & & alpha2Star < C2 ) ) { if ( 0 < alpha1 & & alpha1 < C1 ) { b1 = m_error [ i1 ] - m_epsilon ; } else if ( 0 < alpha1Star & & alpha1Star < C1 ) { b1 = m_error [ i1 ] + m_epsilon ; } if ( 0 < alpha2 & & alpha2 < C2 ) { b2 = m_error [ i2 ] - m_epsilon ; } else if ( 0 < alpha2Star & & alpha2Star < C2 ) { b2 = m_error [ i2 ] + m_epsilon ; } if ( b1 < Double . MAX_VALUE ) { m_b = b1 ; if ( b2 < Double . MAX_VALUE ) { m_b = ( b1 + b2 ) / 2 . 0 ; } } else if ( b2 < Double . MAX_VALUE ) { m_b = b2 ; } } else if ( m_b = = 0 ) { / / both alpha's are on the boundary , and m_b is not initialized m_b = ( m_error [ i1 ] + m_error [ i2 ] ) / 2 . 0 ; } / / if changes in alpha1 ( * ) , alpha2 ( * ) are larger than some eps / / return 1 / / else / / return 0 / / endif return 1 ; } else { return 0 ; } / / endprocedure }
void test13 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; regSMOImproved0 . optimize1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTolerance ( ) { return m_fTolerance ; }
void test14 ( ) throws Throwable { RegSMOImproved regSMOImproved0 = new RegSMOImproved ( ) ; regSMOImproved0 . optimize2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTolerance ( ) { return m_fTolerance ; }
void test0 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; RBFKernel rBFKernel0 = new RBFKernel ( ) ; NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; Capabilities capabilities0 = normalizedPolyKernel0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Instances instances0 = testInstances0 . generate ( "8034" ) ; String string0 = kernelEvaluation0 . evaluate ( ( Kernel ) rBFKernel0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numEvals ( ) { return 0 ; }
void test2 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; String string0 = kernelEvaluation0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; String string0 = kernelEvaluation0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { String string0 = KernelEvaluation . makeOptionString ( ( Kernel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeOptionString ( ASEvaluation ASEvaluator , ASSearch searchMethod ) throws Exception { StringBuffer optionsText = new StringBuffer ( "" ) ; / / General options optionsText . append ( "\n\nGeneral options : \n\n" ) ; optionsText . append ( " - h\n\tdisplay this help\n" ) ; optionsText . append ( " - i < name of input file > \n" ) ; optionsText . append ( "\tSets training file . \n" ) ; optionsText . append ( " - c < class index > \n" ) ; optionsText . append ( "\tSets the class index for supervised attribute\n" ) ; optionsText . append ( "\tselection . Default = last column . \n" ) ; optionsText . append ( " - s < class name > \n" ) ; optionsText . append ( "\tSets search method for subset evaluators . \n" ) ; optionsText . append ( " - x < number of folds > \n" ) ; optionsText . append ( "\tPerform a cross validation . \n" ) ; optionsText . append ( " - n < random number seed > \n" ) ; optionsText . append ( "\tUse in conjunction with - x . \n" ) ; / / Get attribute evaluator - specific options if ( ASEvaluator instanceof OptionHandler ) { optionsText . append ( "\nOptions specific to " + ASEvaluator . getClass ( ) . getName ( ) + " : \n\n" ) ; Enumeration enu = ( ( OptionHandler ) ASEvaluator ) . listOptions ( ) ; while ( enu . hasMoreElements ( ) ) { Option option = ( Option ) enu . nextElement ( ) ; optionsText . append ( option . synopsis ( ) + '\n' ) ; optionsText . append ( option . description ( ) + "\n" ) ; } } if ( searchMethod ! = null ) { if ( searchMethod instanceof OptionHandler ) { optionsText . append ( "\nOptions specific to " + searchMethod . getClass ( ) . getName ( ) + " : \n\n" ) ; Enumeration enu = ( ( OptionHandler ) searchMethod ) . listOptions ( ) ; while ( enu . hasMoreElements ( ) ) { Option option = ( Option ) enu . nextElement ( ) ; optionsText . append ( option . synopsis ( ) + '\n' ) ; optionsText . append ( option . description ( ) + "\n" ) ; } } } else { if ( ASEvaluator instanceof SubsetEvaluator ) { System . out . println ( "No search method given . " ) ; } } return optionsText . toString ( ) ; }
void test6 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; RBFKernel rBFKernel0 = new RBFKernel ( ) ; NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; Capabilities capabilities0 = normalizedPolyKernel0 . getCapabilities ( ) ; TestInstances testInstances0 = TestInstances . forCapabilities ( capabilities0 ) ; Instances instances0 = testInstances0 . generate ( "8034" ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "8034" ; stringArray0 [ 1 ] = "\n = = = Model = = = \n\nRBF kernel : K ( x , y ) = e^ - ( 0 . 01 * < x - y , x - y > ^2 ) \n\n = = = Evaluation = = = \n\nCache size : 250007\n# Evaluations : 210\n# Cache hits : 210\nElapsed time : 0 . 0s\n" ; stringArray0 [ 2 ] = "\n = = = Model = = = \n\nRBF kernel : K ( x , y ) = e^ - ( 0 . 01 * < x - y , x - y > ^2 ) \n\n = = = Evaluation = = = \n\nCache size : 250007\n# Evaluations : 210\n# Cache hits : 210\nElapsed time : 0 . 0s\n" ; stringArray0 [ 3 ] = "8034" ; stringArray0 [ 4 ] = "\n = = = Model = = = \n\nRBF kernel : K ( x , y ) = e^ - ( 0 . 01 * < x - y , x - y > ^2 ) \n\n = = = Evaluation = = = \n\nCache size : 250007\n# Evaluations : 210\n# Cache hits : 210\nElapsed time : 0 . 0s\n" ; stringArray0 [ 5 ] = "8034" ; kernelEvaluation0 . setUserOptions ( stringArray0 ) ; String string0 = kernelEvaluation0 . evaluate ( ( Kernel ) rBFKernel0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numEvals ( ) { return 0 ; }
void test7 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; boolean boolean0 = kernelEvaluation0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test8 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; boolean boolean0 = kernelEvaluation0 . equals ( ( Object ) "8034" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test9 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; boolean boolean0 = kernelEvaluation0 . equals ( ( Object ) kernelEvaluation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test10 ( ) throws Throwable { KernelEvaluation kernelEvaluation0 = new KernelEvaluation ( ) ; String string0 = kernelEvaluation0 . toSummaryString ( "EUzZ & wb7 { GH9V 32" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSummaryString ( ) { StringBuffer result = new StringBuffer ( ) ; result . append ( "Relation Name : " ) . append ( relationName ( ) ) . append ( '\n' ) ; result . append ( "Num Instances : " ) . append ( numInstances ( ) ) . append ( '\n' ) ; result . append ( "Num Attributes : " ) . append ( numAttributes ( ) ) . append ( '\n' ) ; result . append ( '\n' ) ; result . append ( Utils . padLeft ( "" , 5 ) ) . append ( Utils . padRight ( "Name" , 25 ) ) ; result . append ( Utils . padLeft ( "Type" , 5 ) ) . append ( Utils . padLeft ( "Nom" , 5 ) ) ; result . append ( Utils . padLeft ( "Int" , 5 ) ) . append ( Utils . padLeft ( "Real" , 5 ) ) ; result . append ( Utils . padLeft ( "Missing" , 12 ) ) ; result . append ( Utils . padLeft ( "Unique" , 12 ) ) ; result . append ( Utils . padLeft ( "Dist" , 6 ) ) . append ( '\n' ) ; for ( int i = 0 ; i < numAttributes ( ) ; i + + ) { Attribute a = attribute ( i ) ; AttributeStats as = attributeStats ( i ) ; result . append ( Utils . padLeft ( "" + ( i + 1 ) , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padRight ( a . name ( ) , 25 ) ) . append ( ' ' ) ; long percent ; switch ( a . type ( ) ) { case Attribute . NOMINAL : result . append ( Utils . padLeft ( "Nom" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . NUMERIC : result . append ( Utils . padLeft ( "Num" , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . DATE : result . append ( Utils . padLeft ( "Dat" , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . STRING : result . append ( Utils . padLeft ( "Str" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . RELATIONAL : result . append ( Utils . padLeft ( "Rel" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; default : result . append ( Utils . padLeft ( " ? ? ? " , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; } result . append ( Utils . padLeft ( "" + as . missingCount , 5 ) ) . append ( " / " ) ; percent = Math . round ( 100 . 0 * as . missingCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + as . uniqueCount , 5 ) ) . append ( " / " ) ; percent = Math . round ( 100 . 0 * as . uniqueCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + as . distinctCount , 5 ) ) . append ( ' ' ) ; result . append ( '\n' ) ; } return result . toString ( ) ; }
void test1 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String [ ] stringArray0 = stringKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test2 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . useNormalizationTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test3 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . maxSubsequenceLengthTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLambda ( ) { return m_lambda ; }
void test4 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . internalCacheSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test5 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . cacheSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLambda ( ) { return m_lambda ; }
void test6 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; int int0 = stringKernel0 . numEvals ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test7 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLambda ( ) { return m_lambda ; }
void test8 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . subsequenceLengthTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxSubsequenceLength ( ) { return m_maxSubsequenceLength ; }
void test9 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . lambdaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test10 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; int int0 = stringKernel0 . numCacheHits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLambda ( ) { return m_lambda ; }
void test11 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . pruningMethodTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseNormalization ( ) { return m_normalize ; }
void test12 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; SelectedTag selectedTag0 = stringKernel0 . getPruningMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test13 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; Enumeration < Object > enumeration0 = stringKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test14 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; stringKernel0 . setChecksTurnedOff ( true ) ; String [ ] stringArray0 = stringKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxSubsequenceLength ( ) { return m_maxSubsequenceLength ; }
void test15 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; Tag [ ] tagArray0 = new Tag [ 1 ] ; Tag tag0 = new Tag ( ( int ) 'p' , "" , "" ) ; tagArray0 [ 0 ] = tag0 ; SelectedTag selectedTag0 = new SelectedTag ( "" , tagArray0 ) ; stringKernel0 . setPruningMethod ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseNormalization ( ) { return m_normalize ; }
void test16 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; stringKernel0 . setInternalCacheSize ( ( - 185 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test17 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseNormalization ( ) { return m_normalize ; }
void test23 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test25 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "7R < > } ] N ( nX { efr" , arrayList0 , 0 ) ; stringKernel0 . initVars ( instances0 ) ; char [ ] charArray0 = new char [ 3 ] ; double double0 = stringKernel0 . unnormalizedKernel ( charArray0 , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test27 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 20 ] ; double double0 = stringKernel0 . kernelHelper2 ( ( - 6 ) , charArray0 , ( - 6 ) , charArray0 , ( int ) '\u0000' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseNormalization ( ) { return m_normalize ; }
void test28 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 2 ] ; double double0 = stringKernel0 . kernelLP ( 0 , charArray0 , 0 , charArray0 , ( int ) 'v' , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test29 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 3 ] ; double double0 = stringKernel0 . kernelLP ( 1350 , charArray0 , 1350 , charArray0 , 0 , 1350 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test32 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 3 ] ; double double0 = stringKernel0 . kernelHelperLP ( 0 , charArray0 , ( int ) 'B' , charArray0 , ( int ) '\u0000' , ( int ) 'B' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubsequenceLength ( ) { return m_subsequenceLength ; }
void test33 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 26 ] ; double double0 = stringKernel0 . kernelHelperLP ( ( int ) '2' , charArray0 , ( int ) '2' , charArray0 , 0 , ( int ) '\u0000' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test34 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 3 ] ; double double0 = stringKernel0 . kernelHelper2LP ( ( - 1474 ) , charArray0 , ( - 1726 ) , charArray0 , ( int ) 'J' , ( - 1726 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInternalCacheSize ( ) { return m_internalCacheSize ; }
void test35 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 9 ] ; double double0 = stringKernel0 . kernelHelper2LP ( 6 , charArray0 , ( int ) 'w' , charArray0 , ( int ) '\u0000' , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxSubsequenceLength ( ) { return m_maxSubsequenceLength ; }
void test37 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; char [ ] charArray0 = new char [ 9 ] ; double double0 = stringKernel0 . kernelHelper2LP ( ( - 1345 ) , charArray0 , ( int ) '\u0000' , charArray0 , ( - 1345 ) , ( - 1345 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLambda ( ) { return m_lambda ; }
void test38 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "7R < > } ] N ( nX { efr" , arrayList0 , 0 ) ; Attribute attribute0 = new Attribute ( "7R < > } ] N ( nX { efr" , 0 ) ; arrayList0 . add ( attribute0 ) ; stringKernel0 . initVars ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubsequenceLength ( ) { return m_subsequenceLength ; }
void test0 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 690 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test1 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 690 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test2 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 664 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String string ) { String [ ] item = tokenize ( string ) ; if ( ! item [ 0 ] . equals ( m_Root . value ) ) return false ; return isContained ( m_Root , item , 1 ) ; }
void test3 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 664 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test4 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 690 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test5 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 664 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test6 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 664 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test7 ( ) throws Throwable { SMOset sMOset0 = new SMOset ( 664 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numElements ( ) throws Exception ; }
void test0 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; String string0 = rBFKernel0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getGamma ( ) { return m_gamma ; }
void test1 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; String string0 = rBFKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; String string0 = rBFKernel0 . gammaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getGamma ( ) { return m_gamma ; }
void test5 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; String string0 = rBFKernel0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getGamma ( ) { return m_gamma ; }
void test6 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; Enumeration < Object > enumeration0 = rBFKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getGamma ( ) { return m_gamma ; }
void test8 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; String [ ] stringArray0 = rBFKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; double double0 = rBFKernel0 . eval ( ( - 585 ) , ( - 585 ) , ( Instance ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numEvals ( ) { return 0 ; }
void test0 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String [ ] stringArray0 = puk0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test1 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; String string0 = normalizedPolyKernel0 . cacheSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test2 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; int int0 = polyKernel0 . numEvals ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test3 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; int int0 = rBFKernel0 . numCacheHits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test4 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; Enumeration < Object > enumeration0 = rBFKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test6 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; rBFKernel0 . setDebug ( true ) ; String [ ] stringArray0 = rBFKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test7 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; DenseInstance denseInstance0 = new DenseInstance ( 0 ) ; puk0 . eval ( ( - 21 ) , ( - 21 ) , ( Instance ) denseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return m_cacheSize ; }
void test9 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test0 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String [ ] stringArray0 = puk0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test1 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = ( PrecomputedKernelMatrixKernel ) Kernel . makeCopy ( ( Kernel ) precomputedKernelMatrixKernel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test3 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String [ ] stringArray0 = stringKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Estimator forName ( String name , String [ ] options ) throws Exception { return ( Estimator ) Utils . forName ( Estimator . class , name , options ) ; }
void test4 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; Enumeration < Object > enumeration0 = rBFKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDebug ( ) { return m_Debug ; }
void test5 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; String string0 = rBFKernel0 . debugTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test6 ( ) throws Throwable { StringKernel stringKernel0 = new StringKernel ( ) ; String string0 = stringKernel0 . checksTurnedOffTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test8 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test9 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test10 ( ) throws Throwable { RBFKernel rBFKernel0 = new RBFKernel ( ) ; Kernel [ ] kernelArray0 = Kernel . makeCopies ( ( Kernel ) rBFKernel0 , 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getChecksTurnedOff ( ) { return m_checksTurnedOff ; }
void test0 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; int int0 = precomputedKernelMatrixKernel0 . numEvals ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; String string0 = precomputedKernelMatrixKernel0 . kernelMatrixFileTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; Capabilities capabilities0 = precomputedKernelMatrixKernel0 . getCapabilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; String string0 = precomputedKernelMatrixKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; String string0 = precomputedKernelMatrixKernel0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; precomputedKernelMatrixKernel0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; String string0 = precomputedKernelMatrixKernel0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; int int0 = precomputedKernelMatrixKernel0 . numCacheHits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test8 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; precomputedKernelMatrixKernel0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; Enumeration < Object > enumeration0 = precomputedKernelMatrixKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; String [ ] stringArray0 = precomputedKernelMatrixKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; precomputedKernelMatrixKernel0 . setDebug ( true ) ; String [ ] stringArray0 = precomputedKernelMatrixKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; double [ ] [ ] doubleArray0 = new double [ 4 ] [ 5 ] ; Matrix matrix0 = new Matrix ( doubleArray0 , 973 , 973 ) ; precomputedKernelMatrixKernel0 . setKernelMatrix ( matrix0 ) ; precomputedKernelMatrixKernel0 . initVars ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test16 ( ) throws Throwable { PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel ( ) ; precomputedKernelMatrixKernel0 . initVars ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String [ ] stringArray0 = puk0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOmega ( ) { return m_omega ; }
void test1 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String string0 = puk0 . sigmaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOmega ( ) { return m_omega ; }
void test4 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String string0 = puk0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOmega ( ) { return m_omega ; }
void test5 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String string0 = puk0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSigma ( ) { return m_sigma ; }
void test6 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String string0 = puk0 . omegaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOmega ( ) { return m_omega ; }
void test7 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String string0 = puk0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOmega ( ) { return m_omega ; }
void test8 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; Enumeration < Object > enumeration0 = puk0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getOmega ( ) { return m_omega ; }
void test9 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; puk0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSigma ( ) { return m_sigma ; }
void test11 ( ) throws Throwable { Puk puk0 = new Puk ( ) ; double [ ] doubleArray0 = new double [ 5 ] ; BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance ( ( double ) ( - 1014 ) , doubleArray0 ) ; double double0 = puk0 . eval ( ( - 1014 ) , ( - 1014 ) , ( Instance ) binarySparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numEvals ( ) { return 0 ; }
void test0 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; String string0 = checkKernel0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "uRbwbTG ( L : m | $X" ; stringArray0 [ 2 ] = "fAa%v ( } Ac~X~o . Z" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "Y\" ) x@gHF$uryb / s | #" ; stringArray0 [ 5 ] = "L_POu > : @M" ; stringArray0 [ 6 ] = "" ; stringArray0 [ 7 ] = "" ; checkKernel0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumDate ( ) { return m_NumDate ; }
void test3 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; Enumeration < Object > enumeration0 = checkKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test4 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; String [ ] stringArray0 = checkKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test5 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; checkKernel0 . testsPerClassType ( 0 , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWords ( ) { return arrayToList ( m_Words ) ; }
void test6 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; checkKernel0 . testsPerClassType ( 0 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test7 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; Random . setNextRandom ( 92 ) ; checkKernel0 . doTests ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWords ( ) { return arrayToList ( m_Words ) ; }
void test8 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; checkKernel0 . setDebug ( true ) ; checkKernel0 . doTests ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumInstancesRelational ( ) { return m_NumInstancesRelational ; }
void test9 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; boolean [ ] booleanArray0 = checkKernel0 . correctBuildInitialisation ( true , true , true , false , true , true , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] correctBuildInitialisation ( AttrTypes attrTypes , int classType ) { boolean [ ] result = new boolean [ 2 ] ; print ( "correct initialisation during buildEstimator" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 0 ; boolean attributeMissing = false , classMissing = false ; Instances train1 = null ; Instances test1 = null ; Instances train2 = null ; Instances test2 = null ; Estimator estimator = null ; Estimator estimator1 = null ; boolean built = false ; int stage = 0 ; int attrIndex1 = 1 ; int attrIndex2 = 2 ; try { / / Make two sets of train / test splits with different / / numbers of attributes train1 = makeTestDataset ( 42 , numTrain , 2 , attrTypes , numClasses , classType ) ; train2 = makeTestDataset ( 84 , numTrain , 3 , attrTypes , numClasses , classType ) ; if ( missingLevel > 0 ) { addMissing ( train1 , missingLevel , attributeMissing , classMissing , attrIndex1 ) ; addMissing ( train2 , missingLevel , attributeMissing , classMissing , attrIndex2 ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { / / TESTING ? ? stage = 0 ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; estimator1 = estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; stage = 1 ; built = false ; estimator . addValues ( train2 , attrIndex2 ) ; built = true ; stage = 2 ; built = false ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; stage = 3 ; if ( ! estimator . equals ( estimator1 ) ) { if ( m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst build estimator\n" + estimator . toString ( ) + "\n\n" ) ; println ( "\nSecond build estimator\n" + estimator . toString ( ) + "\n\n" ) ; } throw new Exception ( "Results differ between buildEstimator calls" ) ; } println ( "yes" ) ; result [ 0 ] = true ; if ( false & & m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst buildEstimator ( ) " + "\n\n" ) ; println ( "\nSecond buildEstimator ( ) " + "\n\n" ) ; } } catch ( Exception ex ) { String msg = ex . getMessage ( ) . toLowerCase ( ) ; if ( msg . indexOf ( "worse than zeror" ) > = 0 ) { println ( "warning : performs worse than ZeroR" ) ; result [ 0 ] = true ; result [ 1 ] = true ; } else { println ( "no" ) ; result [ 0 ] = false ; } if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } switch ( stage ) { case 0 : print ( " of dataset 1" ) ; break ; case 1 : print ( " of dataset 2" ) ; break ; case 2 : print ( " of dataset 1 ( 2nd build ) " ) ; break ; case 3 : print ( " , comparing results from builds of dataset 1" ) ; break ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "here are the datasets : \n" ) ; println ( " = = = Train1 Dataset = = = \n" + train1 . toString ( ) + "\n" ) ; println ( " = = = Test1 Dataset = = = \n" + test1 . toString ( ) + "\n\n" ) ; println ( " = = = Train2 Dataset = = = \n" + train2 . toString ( ) + "\n" ) ; println ( " = = = Test2 Dataset = = = \n" + test2 . toString ( ) + "\n\n" ) ; } } return result ; }
void test10 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; boolean [ ] booleanArray0 = checkKernel0 . correctBuildInitialisation ( false , false , false , true , false , true , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] correctBuildInitialisation ( AttrTypes attrTypes , int classType ) { boolean [ ] result = new boolean [ 2 ] ; print ( "correct initialisation during buildEstimator" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 , missingLevel = 0 ; boolean attributeMissing = false , classMissing = false ; Instances train1 = null ; Instances test1 = null ; Instances train2 = null ; Instances test2 = null ; Estimator estimator = null ; Estimator estimator1 = null ; boolean built = false ; int stage = 0 ; int attrIndex1 = 1 ; int attrIndex2 = 2 ; try { / / Make two sets of train / test splits with different / / numbers of attributes train1 = makeTestDataset ( 42 , numTrain , 2 , attrTypes , numClasses , classType ) ; train2 = makeTestDataset ( 84 , numTrain , 3 , attrTypes , numClasses , classType ) ; if ( missingLevel > 0 ) { addMissing ( train1 , missingLevel , attributeMissing , classMissing , attrIndex1 ) ; addMissing ( train2 , missingLevel , attributeMissing , classMissing , attrIndex2 ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; } catch ( Exception ex ) { throw new Error ( "Error setting up for tests : " + ex . getMessage ( ) ) ; } try { / / TESTING ? ? stage = 0 ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; estimator1 = estimator . makeCopies ( getEstimator ( ) , 1 ) [ 0 ] ; stage = 1 ; built = false ; estimator . addValues ( train2 , attrIndex2 ) ; built = true ; stage = 2 ; built = false ; estimator . addValues ( train1 , attrIndex1 ) ; built = true ; stage = 3 ; if ( ! estimator . equals ( estimator1 ) ) { if ( m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst build estimator\n" + estimator . toString ( ) + "\n\n" ) ; println ( "\nSecond build estimator\n" + estimator . toString ( ) + "\n\n" ) ; } throw new Exception ( "Results differ between buildEstimator calls" ) ; } println ( "yes" ) ; result [ 0 ] = true ; if ( false & & m_Debug ) { println ( "\n = = = Full report = = = \n" + "\nFirst buildEstimator ( ) " + "\n\n" ) ; println ( "\nSecond buildEstimator ( ) " + "\n\n" ) ; } } catch ( Exception ex ) { String msg = ex . getMessage ( ) . toLowerCase ( ) ; if ( msg . indexOf ( "worse than zeror" ) > = 0 ) { println ( "warning : performs worse than ZeroR" ) ; result [ 0 ] = true ; result [ 1 ] = true ; } else { println ( "no" ) ; result [ 0 ] = false ; } if ( m_Debug ) { println ( "\n = = = Full Report = = = " ) ; print ( "Problem during" ) ; if ( built ) { print ( " testing" ) ; } else { print ( " training" ) ; } switch ( stage ) { case 0 : print ( " of dataset 1" ) ; break ; case 1 : print ( " of dataset 2" ) ; break ; case 2 : print ( " of dataset 1 ( 2nd build ) " ) ; break ; case 3 : print ( " , comparing results from builds of dataset 1" ) ; break ; } println ( " : " + ex . getMessage ( ) + "\n" ) ; println ( "here are the datasets : \n" ) ; println ( " = = = Train1 Dataset = = = \n" + train1 . toString ( ) + "\n" ) ; println ( " = = = Test1 Dataset = = = \n" + test1 . toString ( ) + "\n\n" ) ; println ( " = = = Train2 Dataset = = = \n" + train2 . toString ( ) + "\n" ) ; println ( " = = = Test2 Dataset = = = \n" + test2 . toString ( ) + "\n\n" ) ; } } return result ; }
void test11 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; checkKernel0 . setNumRelational ( 0 ) ; checkKernel0 . setDebug ( true ) ; checkKernel0 . testsPerClassType ( 0 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumInstancesRelational ( ) { return m_NumInstancesRelational ; }
void test12 ( ) throws Throwable { CheckKernel checkKernel0 = new CheckKernel ( ) ; boolean [ ] booleanArray0 = checkKernel0 . canHandleMissing ( false , true , true , true , true , true , 0 , true , true , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] canHandleMissing ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing , int missingLevel ) { if ( missingLevel = = 100 ) print ( "100% " ) ; print ( "missing" ) ; if ( attributeMissing ) { print ( " attribute" ) ; if ( classMissing ) print ( " and" ) ; } if ( classMissing ) print ( " class" ) ; print ( " values" ) ; printAttributeSummary ( attrTypes , classType ) ; print ( " . . . " ) ; FastVector accepts = new FastVector ( ) ; accepts . addElement ( "missing" ) ; accepts . addElement ( "value" ) ; accepts . addElement ( "train" ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = 2 ; int numAtts = 1 , attrIndex = 0 ; return runBasicTest ( attrTypes , numAtts , attrIndex , classType , missingLevel , attributeMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
void test0 ( ) throws Throwable { SMOreg sMOreg0 = new SMOreg ( ) ; RegSMOImproved regSMOImproved0 = ( RegSMOImproved ) sMOreg0 . getRegOptimizer ( ) ; String string0 = regSMOImproved0 . epsilonParameterTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test1 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " [ " ; regOptimizer0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilonParameter ( ) { return m_epsilon ; }
void test3 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; String string0 = regOptimizer0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean modelBuilt ( ) { return m_bModelBuilt ; }
void test4 ( ) throws Throwable { SMOreg sMOreg0 = new SMOreg ( ) ; RegSMOImproved regSMOImproved0 = ( RegSMOImproved ) sMOreg0 . getRegOptimizer ( ) ; String [ ] stringArray0 = regSMOImproved0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilonParameter ( ) { return m_epsilon ; }
void test5 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; Enumeration < Object > enumeration0 = regOptimizer0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilonParameter ( ) { return m_epsilon ; }
void test6 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; String string0 = regOptimizer0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilonParameter ( ) { return m_epsilon ; }
void test8 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; int int0 = regOptimizer0 . getCacheHits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilonParameter ( ) { return m_epsilon ; }
void test9 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; boolean boolean0 = regOptimizer0 . modelBuilt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; int int0 = regOptimizer0 . getKernelEvaluations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test12 ( ) throws Throwable { RegOptimizer regOptimizer0 = new RegOptimizer ( ) ; double double0 = regOptimizer0 . getScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { SMOreg sMOreg0 = new SMOreg ( ) ; RegSMOImproved regSMOImproved0 = ( RegSMOImproved ) sMOreg0 . getRegOptimizer ( ) ; String string0 = regSMOImproved0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; String string0 = regSMO0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test2 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; String string0 = regSMO0 . epsilonTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test3 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; regSMO0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test4 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; String [ ] stringArray0 = regSMO0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test5 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; String string0 = regSMO0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test7 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; Enumeration < Object > enumeration0 = regSMO0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test9 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; boolean boolean0 = regSMO0 . findOptimalPointOnLine ( 7 , 7 , 7 , 7 , ( - 18 ) , 7 , 7 , 7 , 7 , ( - 18 ) , 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test23 ( ) throws Throwable { RegSMO regSMO0 = new RegSMO ( ) ; int int0 = regSMO0 . takeStep ( ( - 8 ) , ( - 8 ) , 1 . 0E - 12 , ( double ) ( - 8 ) , ( double ) ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getEpsilon ( ) { return m_eps ; }
void test0 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; String [ ] stringArray0 = polyKernel0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; String string0 = polyKernel0 . useLowerOrderTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; String string0 = polyKernel0 . exponentTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; String string0 = polyKernel0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; String string0 = polyKernel0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel ( ) ; normalizedPolyKernel0 . setCacheSize ( 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExponent ( ) { return m_Exponent ; }
void test7 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; Enumeration < Object > enumeration0 = polyKernel0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test9 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseLowerOrder ( ) { return m_lowerOrder ; }
void test12 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; polyKernel0 . setExponent ( 464 . 47431712381893 ) ; String string0 = polyKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; String string0 = polyKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseLowerOrder ( ) { return m_lowerOrder ; }
void test15 ( ) throws Throwable { PolyKernel polyKernel0 = new PolyKernel ( ) ; polyKernel0 . setExponent ( 464 . 47431712381893 ) ; polyKernel0 . setUseLowerOrder ( true ) ; String string0 = polyKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getExponent ( ) { return m_Exponent ; }
void test0 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Abstract class for nearest neighbour search All algorithms ( classes ) that do nearest neighbour search should extend this class . " , arrayList0 , 33 ) ; inputMappedClassifier0 . setModelHeader ( instances0 ) ; double [ ] doubleArray0 = new double [ 8 ] ; SparseInstance sparseInstance0 = new SparseInstance ( ( double ) 33 , doubleArray0 ) ; inputMappedClassifier0 . classifyInstance ( ( Instance ) sparseInstance0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test3 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "Whether to use binary splits on nominal attributes when building the trees . " ; stringArray0 [ 1 ] = "Whether to use binary splits on nominal attributes when building the trees . " ; stringArray0 [ 2 ] = "Whether to use binary splits on nominal attributes when building the trees . " ; stringArray0 [ 3 ] = "Whether to use binary splits on nominal attributes when building the trees . " ; stringArray0 [ 4 ] = "Whether to use binary splits on nominal attributes when building the trees . " ; stringArray0 [ 5 ] = "Whether to use binary splits on nominal attributes when building the trees . " ; inputMappedClassifier0 . setOptions ( stringArray0 ) ; inputMappedClassifier0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSuppressMappingReport ( ) { return m_suppressMappingReport ; }
void test4 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; Environment environment0 = Environment . getSystemWide ( ) ; inputMappedClassifier0 . setEnvironment ( environment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSuppressMappingReport ( ) { return m_suppressMappingReport ; }
void test5 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . trimTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSuppressMappingReport ( ) { return m_suppressMappingReport ; }
void test6 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCaseForNames ( ) { return m_ignoreCase ; }
void test7 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test8 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . ignoreCaseForNamesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test9 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . suppressMappingReportTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCaseForNames ( ) { return m_ignoreCase ; }
void test11 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . modelPathTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test12 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; inputMappedClassifier0 . setModelPath ( ( String ) null ) ; inputMappedClassifier0 . setModelPath ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCaseForNames ( ) { return m_ignoreCase ; }
void test13 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; Enumeration < Option > enumeration0 = inputMappedClassifier0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test14 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSuppressMappingReport ( ) { return m_suppressMappingReport ; }
void test15 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; inputMappedClassifier0 . setModelPath ( ( String ) null ) ; String [ ] stringArray0 = inputMappedClassifier0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCaseForNames ( ) { return m_ignoreCase ; }
void test16 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; inputMappedClassifier0 . setModelPath ( "ij { 82 otq > s } 11" ) ; String [ ] stringArray0 = inputMappedClassifier0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test17 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; inputMappedClassifier0 . setModelPath ( ( String ) null ) ; String string0 = inputMappedClassifier0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test18 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; inputMappedClassifier0 . setModelPath ( "Don't output a report of model - to - input mappings . " ) ; InputMappedClassifier inputMappedClassifier1 = ( InputMappedClassifier ) AbstractClassifier . makeCopy ( ( Classifier ) inputMappedClassifier0 ) ; inputMappedClassifier0 . setClassifier ( ( Classifier ) inputMappedClassifier1 ) ; String string0 = inputMappedClassifier0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test20 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; inputMappedClassifier0 . setModelPath ( "8034" ) ; inputMappedClassifier0 . setTestStructure ( ( Instances ) null ) ; inputMappedClassifier0 . buildClassifier ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test21 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Abstract class for nearest neighbour search All algorithms ( classes ) that do nearest neighbour search should extend this class . " , arrayList0 , 33 ) ; inputMappedClassifier0 . setModelHeader ( instances0 ) ; Instances instances1 = inputMappedClassifier0 . getModelHeader ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCaseForNames ( ) { return m_ignoreCase ; }
void test24 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double classifyInstance ( Instance instance ) throws Exception ; / * * * Predicts the class memberships for a given instance . If * an instance is unclassified , the returned array elements * must be all zero . If the class is numeric , the array * must consist of only one element , which contains the * predicted value . Note that a classifier MUST implement * either this or classifyInstance ( ) . * * @param instance the instance to be classified * @return an array containing the estimated membership * probabilities of the test instance in each class * or the numeric prediction * @exception Exception if distribution could not be * computed successfully * / double [ ] distributionForInstance ( Instance instance ) throws Exception ; / * * * Returns the Capabilities of this classifier . Maximally permissive * capabilities are allowed by default . Derived classifiers should * override this method and first disable all capabilities and then * enable just those capabilities that make sense for the scheme . * * @return the capabilities of this object * @see Capabilities * / Capabilities getCapabilities ( ) ; }
void test25 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; String string0 = inputMappedClassifier0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSuppressMappingReport ( ) { return m_suppressMappingReport ; }
void test26 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSuppressMappingReport ( ) { return m_suppressMappingReport ; }
void test27 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; int int0 = inputMappedClassifier0 . graphType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCaseForNames ( ) { return m_ignoreCase ; }
void test29 ( ) throws Throwable { InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier ( ) ; InputMappedClassifier inputMappedClassifier1 = ( InputMappedClassifier ) AbstractClassifier . makeCopy ( ( Classifier ) inputMappedClassifier0 ) ; inputMappedClassifier0 . setClassifier ( ( Classifier ) inputMappedClassifier1 ) ; Enumeration < Object > enumeration0 = inputMappedClassifier0 . enumerateMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrim ( ) { return m_trim ; }
void test0 ( ) throws Throwable { InputMappedClassifierBeanInfo inputMappedClassifierBeanInfo0 = new InputMappedClassifierBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = inputMappedClassifierBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor p1 ; p1 = new PropertyDescriptor ( "classValue" , ClassValuePicker . class ) ; PropertyDescriptor [ ] pds = { p1 } ; return pds ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return null ; }
void test0 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; String [ ] stringArray0 = serializedClassifier0 . getOptions ( ) ; serializedClassifier0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test4 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String modelFileTipText ( ) { return "The serialized classifier model to use for predictions . " ; }
void test6 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test7 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; Classifier classifier0 = serializedClassifier0 . getCurrentModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Classifier getCurrentModel ( ) { return m_Model ; }
void test8 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; Enumeration < Object > enumeration0 = serializedClassifier0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test9 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; serializedClassifier0 . setDebug ( true ) ; String [ ] stringArray0 = serializedClassifier0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test10 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; String [ ] stringArray0 = new String [ 26 ] ; stringArray0 [ 4 ] = "kaDnTe3" ; stringArray0 [ 6 ] = "kaDnTe3" ; stringArray0 [ 8 ] = "kaDnTe3" ; stringArray0 [ 21 ] = "kaDnTe3" ; stringArray0 [ 1 ] = "kaDnTe3" ; stringArray0 [ 3 ] = "kaDnTe3" ; stringArray0 [ 5 ] = "kaDnTe3" ; stringArray0 [ 7 ] = "kaDnTe3" ; stringArray0 [ 9 ] = "kaDnTe3" ; stringArray0 [ 10 ] = "kaDnTe3" ; stringArray0 [ 11 ] = "kaDnTe3" ; stringArray0 [ 12 ] = "kaDnTe3" ; stringArray0 [ 13 ] = "kaDnTe3" ; stringArray0 [ 14 ] = "kaDnTe3" ; stringArray0 [ 15 ] = "kaDnTe3" ; stringArray0 [ 16 ] = "kaDnTe3" ; stringArray0 [ 17 ] = "kaDnTe3" ; stringArray0 [ 18 ] = "kaDnTe3" ; stringArray0 [ 19 ] = "kaDnTe3" ; stringArray0 [ 20 ] = "kaDnTe3" ; stringArray0 [ 22 ] = "kaDnTe3" ; stringArray0 [ 23 ] = "kaDnTe3" ; stringArray0 [ 24 ] = "kaDnTe3" ; stringArray0 [ 25 ] = "kaDnTe3" ; stringArray0 [ 0 ] = "kaDnTe3" ; stringArray0 [ 2 ] = "kaDnTe3" ; serializedClassifier0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test11 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test13 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test15 ( ) throws Throwable { SerializedClassifier serializedClassifier0 = new SerializedClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . LOGLOG ; String string0 = generalRegression_CumulativeLinkFunction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { GeneralRegression . Predictor generalRegression_Predictor0 = new GeneralRegression . Predictor ( ) ; String string0 = generalRegression_Predictor0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . CLOGLOG ; double double0 = generalRegression_CumulativeLinkFunction0 . eval ( 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test4 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . LOGLOG ; double double0 = generalRegression_CumulativeLinkFunction0 . eval ( 1640 . 712567260209 , 1640 . 712567260209 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test5 ( ) throws Throwable { GeneralRegression . Parameter generalRegression_Parameter0 = new GeneralRegression . Parameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralRegression ( Element model , Instances dataDictionary , MiningSchema miningSchema ) throws Exception { super ( dataDictionary , miningSchema ) ; / / get the model type String mType = model . getAttribute ( "modelType" ) ; boolean found = false ; for ( ModelType m : ModelType . values ( ) ) { if ( m . toString ( ) . equals ( mType ) ) { m_modelType = m ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown model type : " + mType ) ; } if ( m_modelType = = ModelType . ORDINALMULTINOMIAL ) { / / get the cumulative link function String cLink = model . getAttribute ( "cumulativeLink" ) ; found = false ; for ( CumulativeLinkFunction c : CumulativeLinkFunction . values ( ) ) { if ( c . toString ( ) . equals ( cLink ) ) { m_cumulativeLinkFunction = c ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] cumulative link function " + cLink ) ; } } else if ( m_modelType = = ModelType . GENERALIZEDLINEAR | | m_modelType = = ModelType . GENERALLINEAR ) { / / get the link function String link = model . getAttribute ( "linkFunction" ) ; found = false ; for ( LinkFunction l : LinkFunction . values ( ) ) { if ( l . toString ( ) . equals ( link ) ) { m_linkFunction = l ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown link function " + link ) ; } / / get the link parameter String linkP = model . getAttribute ( "linkParameter" ) ; if ( linkP ! = null & & linkP . length ( ) > 0 ) { try { m_linkParameter = Double . parseDouble ( linkP ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the link parameter" ) ; } } / / get the trials variable String trials = model . getAttribute ( "trialsVariable" ) ; if ( trials ! = null & & trials . length ( ) > 0 ) { m_trialsVariable = trials ; } / / get the trials value String trialsV = model . getAttribute ( "trialsValue" ) ; if ( trialsV ! = null & & trialsV . length ( ) > 0 ) { try { m_trialsValue = Double . parseDouble ( trialsV ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the trials value" ) ; } } } String mName = model . getAttribute ( "modelName" ) ; if ( mName ! = null & & mName . length ( ) > 0 ) { m_modelName = mName ; } String fName = model . getAttribute ( "functionName" ) ; if ( fName . equals ( "classification" ) ) { m_functionType = Regression . RegressionTable . CLASSIFICATION ; } String algName = model . getAttribute ( "algorithmName" ) ; if ( algName ! = null & & algName . length ( ) > 0 ) { m_algorithmName = algName ; } String distribution = model . getAttribute ( "distribution" ) ; if ( distribution ! = null & & distribution . length ( ) > 0 ) { found = false ; for ( Distribution d : Distribution . values ( ) ) { if ( d . toString ( ) . equals ( distribution ) ) { m_distribution = d ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown distribution type " + distribution ) ; } } String distP = model . getAttribute ( "distParameter" ) ; if ( distP ! = null & & distP . length ( ) > 0 ) { try { m_distParameter = Double . parseDouble ( distP ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the distribution parameter" ) ; } } String offsetV = model . getAttribute ( "offsetVariable" ) ; if ( offsetV ! = null & & offsetV . length ( ) > 0 ) { m_offsetVariable = offsetV ; } String offsetVal = model . getAttribute ( "offsetValue" ) ; if ( offsetVal ! = null & & offsetVal . length ( ) > 0 ) { try { m_offsetValue = Double . parseDouble ( offsetVal ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the offset value" ) ; } } / / get the parameter list readParameterList ( model ) ; / / get the factors and covariates readFactorsAndCovariates ( model , "FactorList" ) ; readFactorsAndCovariates ( model , "CovariateList" ) ; / / read the PPMatrix readPPMatrix ( model ) ; / / read the parameter estimates readParamMatrix ( model ) ; }
void test6 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . CAUCHIT ; double double0 = generalRegression_CumulativeLinkFunction0 . eval ( ( - 158 . 6222249983336 ) , ( - 158 . 6222249983336 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test7 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . NONE ; double double0 = generalRegression_CumulativeLinkFunction0 . eval ( ( - 130 . 90956139931845 ) , ( - 130 . 90956139931845 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test8 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . LOGIT ; double double0 = generalRegression_CumulativeLinkFunction0 . eval ( ( - 1424 . 368072172764 ) , ( - 1424 . 368072172764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test9 ( ) throws Throwable { GeneralRegression . CumulativeLinkFunction generalRegression_CumulativeLinkFunction0 = GeneralRegression . CumulativeLinkFunction . PROBIT ; double double0 = generalRegression_CumulativeLinkFunction0 . eval ( 719 . 6493983240866 , 719 . 6493983240866 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test10 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . LOGC ; String string0 = generalRegression_LinkFunction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test11 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . PROBIT ; double double0 = generalRegression_LinkFunction0 . eval ( ( - 1424 . 368072172764 ) , ( - 1424 . 368072172764 ) , ( - 1424 . 368072172764 ) , ( - 1424 . 368072172764 ) , ( - 1424 . 368072172764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test12 ( ) throws Throwable { GeneralRegression . PPCell generalRegression_PPCell0 = new GeneralRegression . PPCell ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralRegression ( Element model , Instances dataDictionary , MiningSchema miningSchema ) throws Exception { super ( dataDictionary , miningSchema ) ; / / get the model type String mType = model . getAttribute ( "modelType" ) ; boolean found = false ; for ( ModelType m : ModelType . values ( ) ) { if ( m . toString ( ) . equals ( mType ) ) { m_modelType = m ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown model type : " + mType ) ; } if ( m_modelType = = ModelType . ORDINALMULTINOMIAL ) { / / get the cumulative link function String cLink = model . getAttribute ( "cumulativeLink" ) ; found = false ; for ( CumulativeLinkFunction c : CumulativeLinkFunction . values ( ) ) { if ( c . toString ( ) . equals ( cLink ) ) { m_cumulativeLinkFunction = c ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] cumulative link function " + cLink ) ; } } else if ( m_modelType = = ModelType . GENERALIZEDLINEAR | | m_modelType = = ModelType . GENERALLINEAR ) { / / get the link function String link = model . getAttribute ( "linkFunction" ) ; found = false ; for ( LinkFunction l : LinkFunction . values ( ) ) { if ( l . toString ( ) . equals ( link ) ) { m_linkFunction = l ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown link function " + link ) ; } / / get the link parameter String linkP = model . getAttribute ( "linkParameter" ) ; if ( linkP ! = null & & linkP . length ( ) > 0 ) { try { m_linkParameter = Double . parseDouble ( linkP ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the link parameter" ) ; } } / / get the trials variable String trials = model . getAttribute ( "trialsVariable" ) ; if ( trials ! = null & & trials . length ( ) > 0 ) { m_trialsVariable = trials ; } / / get the trials value String trialsV = model . getAttribute ( "trialsValue" ) ; if ( trialsV ! = null & & trialsV . length ( ) > 0 ) { try { m_trialsValue = Double . parseDouble ( trialsV ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the trials value" ) ; } } } String mName = model . getAttribute ( "modelName" ) ; if ( mName ! = null & & mName . length ( ) > 0 ) { m_modelName = mName ; } String fName = model . getAttribute ( "functionName" ) ; if ( fName . equals ( "classification" ) ) { m_functionType = Regression . RegressionTable . CLASSIFICATION ; } String algName = model . getAttribute ( "algorithmName" ) ; if ( algName ! = null & & algName . length ( ) > 0 ) { m_algorithmName = algName ; } String distribution = model . getAttribute ( "distribution" ) ; if ( distribution ! = null & & distribution . length ( ) > 0 ) { found = false ; for ( Distribution d : Distribution . values ( ) ) { if ( d . toString ( ) . equals ( distribution ) ) { m_distribution = d ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown distribution type " + distribution ) ; } } String distP = model . getAttribute ( "distParameter" ) ; if ( distP ! = null & & distP . length ( ) > 0 ) { try { m_distParameter = Double . parseDouble ( distP ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the distribution parameter" ) ; } } String offsetV = model . getAttribute ( "offsetVariable" ) ; if ( offsetV ! = null & & offsetV . length ( ) > 0 ) { m_offsetVariable = offsetV ; } String offsetVal = model . getAttribute ( "offsetValue" ) ; if ( offsetVal ! = null & & offsetVal . length ( ) > 0 ) { try { m_offsetValue = Double . parseDouble ( offsetVal ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the offset value" ) ; } } / / get the parameter list readParameterList ( model ) ; / / get the factors and covariates readFactorsAndCovariates ( model , "FactorList" ) ; readFactorsAndCovariates ( model , "CovariateList" ) ; / / read the PPMatrix readPPMatrix ( model ) ; / / read the parameter estimates readParamMatrix ( model ) ; }
void test13 ( ) throws Throwable { GeneralRegression . Distribution generalRegression_Distribution0 = GeneralRegression . Distribution . INVGAUSSIAN ; String string0 = generalRegression_Distribution0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test14 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . IDENTITY ; double double0 = generalRegression_LinkFunction0 . eval ( 0 . 6321205588285577 , 0 . 6321205588285577 , 0 . 6321205588285577 , 0 . 6321205588285577 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test15 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . LOG ; double double0 = generalRegression_LinkFunction0 . eval ( 309 . 6969179006979 , 309 . 6969179006979 , 309 . 6969179006979 , 309 . 6969179006979 , 309 . 6969179006979 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test16 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . LOGC ; double double0 = generalRegression_LinkFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test17 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . LOGIT ; double double0 = generalRegression_LinkFunction0 . eval ( 1640 . 712567260209 , 1640 . 712567260209 , 1640 . 712567260209 , 1640 . 712567260209 , 1640 . 712567260209 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test18 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . LOGLOG ; double double0 = generalRegression_LinkFunction0 . eval ( ( double ) 1537707164 , ( double ) 1537707164 , ( double ) 1537707164 , ( double ) 1537707164 , ( double ) 1537707164 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test19 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . NEGBIN ; double double0 = generalRegression_LinkFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test20 ( ) throws Throwable { GeneralRegression . PCell generalRegression_PCell0 = new GeneralRegression . PCell ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralRegression ( Element model , Instances dataDictionary , MiningSchema miningSchema ) throws Exception { super ( dataDictionary , miningSchema ) ; / / get the model type String mType = model . getAttribute ( "modelType" ) ; boolean found = false ; for ( ModelType m : ModelType . values ( ) ) { if ( m . toString ( ) . equals ( mType ) ) { m_modelType = m ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown model type : " + mType ) ; } if ( m_modelType = = ModelType . ORDINALMULTINOMIAL ) { / / get the cumulative link function String cLink = model . getAttribute ( "cumulativeLink" ) ; found = false ; for ( CumulativeLinkFunction c : CumulativeLinkFunction . values ( ) ) { if ( c . toString ( ) . equals ( cLink ) ) { m_cumulativeLinkFunction = c ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] cumulative link function " + cLink ) ; } } else if ( m_modelType = = ModelType . GENERALIZEDLINEAR | | m_modelType = = ModelType . GENERALLINEAR ) { / / get the link function String link = model . getAttribute ( "linkFunction" ) ; found = false ; for ( LinkFunction l : LinkFunction . values ( ) ) { if ( l . toString ( ) . equals ( link ) ) { m_linkFunction = l ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown link function " + link ) ; } / / get the link parameter String linkP = model . getAttribute ( "linkParameter" ) ; if ( linkP ! = null & & linkP . length ( ) > 0 ) { try { m_linkParameter = Double . parseDouble ( linkP ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the link parameter" ) ; } } / / get the trials variable String trials = model . getAttribute ( "trialsVariable" ) ; if ( trials ! = null & & trials . length ( ) > 0 ) { m_trialsVariable = trials ; } / / get the trials value String trialsV = model . getAttribute ( "trialsValue" ) ; if ( trialsV ! = null & & trialsV . length ( ) > 0 ) { try { m_trialsValue = Double . parseDouble ( trialsV ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the trials value" ) ; } } } String mName = model . getAttribute ( "modelName" ) ; if ( mName ! = null & & mName . length ( ) > 0 ) { m_modelName = mName ; } String fName = model . getAttribute ( "functionName" ) ; if ( fName . equals ( "classification" ) ) { m_functionType = Regression . RegressionTable . CLASSIFICATION ; } String algName = model . getAttribute ( "algorithmName" ) ; if ( algName ! = null & & algName . length ( ) > 0 ) { m_algorithmName = algName ; } String distribution = model . getAttribute ( "distribution" ) ; if ( distribution ! = null & & distribution . length ( ) > 0 ) { found = false ; for ( Distribution d : Distribution . values ( ) ) { if ( d . toString ( ) . equals ( distribution ) ) { m_distribution = d ; found = true ; break ; } } if ( ! found ) { throw new Exception ( " [ GeneralRegression ] unknown distribution type " + distribution ) ; } } String distP = model . getAttribute ( "distParameter" ) ; if ( distP ! = null & & distP . length ( ) > 0 ) { try { m_distParameter = Double . parseDouble ( distP ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the distribution parameter" ) ; } } String offsetV = model . getAttribute ( "offsetVariable" ) ; if ( offsetV ! = null & & offsetV . length ( ) > 0 ) { m_offsetVariable = offsetV ; } String offsetVal = model . getAttribute ( "offsetValue" ) ; if ( offsetVal ! = null & & offsetVal . length ( ) > 0 ) { try { m_offsetValue = Double . parseDouble ( offsetVal ) ; } catch ( IllegalArgumentException ex ) { throw new Exception ( " [ GeneralRegression ] unable to parse the offset value" ) ; } } / / get the parameter list readParameterList ( model ) ; / / get the factors and covariates readFactorsAndCovariates ( model , "FactorList" ) ; readFactorsAndCovariates ( model , "CovariateList" ) ; / / read the PPMatrix readPPMatrix ( model ) ; / / read the parameter estimates readParamMatrix ( model ) ; }
void test21 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . NONE ; double double0 = generalRegression_LinkFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , ( - 1424 . 368072172764 ) , ( - 1424 . 368072172764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test22 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . CLOGLOG ; double double0 = generalRegression_LinkFunction0 . eval ( ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test23 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . ODDSPOWER ; double double0 = generalRegression_LinkFunction0 . eval ( 1729 . 0846567946237 , 1729 . 0846567946237 , 1729 . 0846567946237 , 1729 . 0846567946237 , ( - 991 . 1474511222211 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test24 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . ODDSPOWER ; double double0 = generalRegression_LinkFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test25 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . POWER ; double double0 = generalRegression_LinkFunction0 . eval ( ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) , ( - 1574 . 8334365859946 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test26 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . POWER ; double double0 = generalRegression_LinkFunction0 . eval ( - 0 . 0 , - 0 . 0 , - 0 . 0 , - 0 . 0 , - 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test27 ( ) throws Throwable { GeneralRegression . LinkFunction generalRegression_LinkFunction0 = GeneralRegression . LinkFunction . POWER ; double double0 = generalRegression_LinkFunction0 . eval ( 1096 . 5451692710787 , 1096 . 5451692710787 , 1096 . 5451692710787 , 1096 . 5451692710787 , 1096 . 5451692710787 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test0 ( ) throws Throwable { NeuralNetwork . Normalization neuralNetwork_Normalization0 = NeuralNetwork . Normalization . SOFTMAX ; String string0 = neuralNetwork_Normalization0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . SINE ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( - 1384 . 1749537319827 ) , ( - 1384 . 1749537319827 ) , ( - 1384 . 1749537319827 ) , ( - 1384 . 1749537319827 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test2 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . GAUSS ; double double0 = neuralNetwork_ActivationFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test3 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . SQUARE ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( - 33 . 858398881751654 ) , ( - 33 . 858398881751654 ) , ( - 33 . 858398881751654 ) , ( - 33 . 858398881751654 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test4 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . RECIPROCAL ; double double0 = neuralNetwork_ActivationFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 1901 . 2303346303968 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test5 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . EXPONENTIAL ; double double0 = neuralNetwork_ActivationFunction0 . eval ( 4 . 977436680714586 , 4 . 977436680714586 , 4 . 977436680714586 , 4 . 977436680714586 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test6 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . LOGISTIC ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( double ) 1953772231 , ( double ) 1953772231 , ( double ) 1953772231 , ( double ) 1953772231 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test7 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . TANH ; double double0 = neuralNetwork_ActivationFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test8 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . IDENTITY ; double double0 = neuralNetwork_ActivationFunction0 . eval ( 0 . 3 , 0 . 3 , 0 . 3 , ( - 529 . 3290056087261 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test9 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . ELLICOT ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( - 93 . 74545757786719 ) , ( - 93 . 74545757786719 ) , ( - 93 . 74545757786719 ) , ( - 93 . 74545757786719 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test10 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . COSINE ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( - 308 . 9798486974494 ) , ( - 308 . 9798486974494 ) , ( - 308 . 9798486974494 ) , ( - 308 . 9798486974494 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test11 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . COSINE ; String string0 = neuralNetwork_ActivationFunction0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test12 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . RADIALBASIS ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( double ) 1377883715 , ( double ) 1377883715 , ( double ) 1377883715 , ( double ) 1377883715 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test13 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . ARCTAN ; double double0 = neuralNetwork_ActivationFunction0 . eval ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test14 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; NeuralNetwork . Neuron neuralNetwork_Neuron0 = new NeuralNetwork . Neuron ( ( Element ) iIOMetadataNode0 , ( NeuralNetwork . NeuralLayer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test16 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; NeuralNetwork . Neuron neuralNetwork_Neuron0 = new NeuralNetwork . Neuron ( ( Element ) iIOMetadataNode0 , ( NeuralNetwork . NeuralLayer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValue ( Instance instance , int index ) { if ( instance . isMissing ( index ) ) return new Double ( Utils . missingValue ( ) ) ; else if ( instance . attribute ( index ) . isNominal ( ) ) return new String ( instance . stringValue ( index ) ) ; else if ( instance . attribute ( index ) . isNumeric ( ) ) return new Double ( instance . value ( index ) ) ; else throw new IllegalArgumentException ( "Unhandled attribute type '" + instance . attribute ( index ) . type ( ) + "' ! " ) ; }
void test17 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; NeuralNetwork . Neuron neuralNetwork_Neuron0 = new NeuralNetwork . Neuron ( ( Element ) iIOMetadataNode0 , ( NeuralNetwork . NeuralLayer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . THRESHOLD ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( double ) 1293132251 , ( double ) 1293132251 , ( double ) 1293132251 , ( double ) 1293132251 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test19 ( ) throws Throwable { NeuralNetwork . ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork . ActivationFunction . THRESHOLD ; double double0 = neuralNetwork_ActivationFunction0 . eval ( ( double ) 1293132251 , ( - 308 . 9798486974494 ) , ( double ) 1293132251 , ( double ) 1293132251 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double eval ( HashMap symbols ) { SymbolFactory sf ; ByteArrayInputStream parserInput ; Parser parser ; double result ; try { sf = new DefaultSymbolFactory ( ) ; parserInput = new ByteArrayInputStream ( m_expression . getBytes ( ) ) ; parser = new Parser ( new Scanner ( parserInput , sf ) , sf ) ; parser . setSymbols ( symbols ) ; parser . parse ( ) ; result = parser . getResult ( ) ; } catch ( Exception e ) { result = Double . NaN ; e . printStackTrace ( ) ; } return result ; }
void test2 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor ( ) ; LogPanel logPanel0 = new LogPanel ( wekaTaskMonitor0 , false ) ; SupportVectorMachineModel . PolynomialKernel supportVectorMachineModel_PolynomialKernel0 = new SupportVectorMachineModel . PolynomialKernel ( ( Element ) iIOMetadataNode0 , ( Logger ) logPanel0 ) ; String string0 = supportVectorMachineModel_PolynomialKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; SupportVectorMachineModel . RadialBasisKernel supportVectorMachineModel_RadialBasisKernel0 = new SupportVectorMachineModel . RadialBasisKernel ( ( Element ) iIOMetadataNode0 ) ; String string0 = supportVectorMachineModel_RadialBasisKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; SupportVectorMachineModel . SigmoidKernel supportVectorMachineModel_SigmoidKernel0 = new SupportVectorMachineModel . SigmoidKernel ( ( Element ) iIOMetadataNode0 , ( Logger ) null ) ; String string0 = supportVectorMachineModel_SigmoidKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test10 ( ) throws Throwable { SupportVectorMachineModel . LinearKernel supportVectorMachineModel_LinearKernel0 = new SupportVectorMachineModel . LinearKernel ( ) ; String string0 = supportVectorMachineModel_LinearKernel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { TreeModel . Predicate . Eval treeModel_Predicate_Eval0 = TreeModel . Predicate . booleanToEval ( false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { TreeModel . Predicate . Eval treeModel_Predicate_Eval0 = TreeModel . Predicate . booleanToEval ( true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { TreeModel . Predicate . Eval treeModel_Predicate_Eval0 = TreeModel . Predicate . booleanToEval ( false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test1 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPMMLVersion ( ) ; / * * * Set the name of the application ( if specified ) that created this . * model * * @param doc the Document encapsulating the pmml * / void setCreatorApplication ( Document doc ) ; / * * * Get the name of the application that created this model . * * @return the name of the creating application or null * if not specified in the pmml . * / String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test2 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test3 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test4 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test5 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void buildClassifier ( Instances data ) throws Exception { super . buildClassifier ( data ) ; if ( m_numExecutionSlots < 1 ) { throw new Exception ( "Number of execution slots needs to be > = 1 ! " ) ; } if ( m_numExecutionSlots > 1 ) { startExecutorPool ( ) ; } m_completed = 0 ; m_failed = 0 ; }
void test6 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPMMLVersion ( ) ; / * * * Set the name of the application ( if specified ) that created this . * model * * @param doc the Document encapsulating the pmml * / void setCreatorApplication ( Document doc ) ; / * * * Get the name of the application that created this model . * * @return the name of the creating application or null * if not specified in the pmml . * / String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test7 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; DenseInstance denseInstance0 = new DenseInstance ( 2040 ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstance ( Instance instance ) throws Exception { if ( m_Filter . numPendingOutput ( ) > 0 ) throw new Exception ( "Filter output queue not empty ! " ) ; if ( ! m_Filter . input ( instance ) ) throw new Exception ( "Filter didn't make the test instance immediately available ! " ) ; m_Filter . batchFinished ( ) ; Instance newInstance = m_Filter . output ( ) ; return m_Clusterer . distributionForInstance ( newInstance ) ; }
void test8 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; TreeModel treeModel0 = new TreeModel ( ( Element ) iIOMetadataNode0 , ( Instances ) null , ( MiningSchema ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorApplication ( ) ; / * * * Get the mining schema . * * @return the mining schema * / MiningSchema getMiningSchema ( ) ; / * * * Set a logger to use . * * @param log the logger to use * / void setLog ( Logger log ) ; / * * * Get the logger . * * @return the logger ( or null if none is being used ) * / Logger getLog ( ) ; }
void test0 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; String string0 = gainRatioSplitCrit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 1 ] [ 6 ] ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double [ ] doubleArray1 = new double [ 6 ] ; doubleArray1 [ 1 ] = Double . POSITIVE_INFINITY ; doubleArray0 [ 0 ] = doubleArray1 ; double double0 = gainRatioSplitCrit0 . splitCritValue ( distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test2 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 136 , 136 ) ; double double0 = gainRatioSplitCrit0 . splitCritValue ( distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test3 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 1 ] [ 6 ] ; double [ ] doubleArray1 = new double [ 6 ] ; doubleArray1 [ 1 ] = Double . POSITIVE_INFINITY ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double double0 = gainRatioSplitCrit0 . splitCritValue ( distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test4 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 8 ] [ 10 ] ; double [ ] doubleArray1 = new double [ 10 ] ; doubleArray1 [ 5 ] = 1625 . 564253513858 ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double double0 = gainRatioSplitCrit0 . splitCritValue ( distribution0 , ( - 966 . 0914674371966 ) , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test5 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 136 , 136 ) ; double double0 = gainRatioSplitCrit0 . splitCritValue ( distribution0 , 1 . 7976931348623157E308 , 1 . 7976931348623157E308 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test0 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; String string0 = nBTreeNoSplit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numSubsets ( ) { return m_numSubsets ; }
void test1 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; nBTreeNoSplit0 . getNaiveBayesModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkModel ( int minNumInstances ) { / / checks if there are at least 2 subsets that contain > = minNumInstances int count = 0 ; for ( int i = 0 ; i < m_distribution . numBags ( ) ; i + + ) { if ( m_distribution . perBag ( i ) > = minNumInstances ) count + + ; } return ( count > = 2 ) ; }
void test2 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; double double0 = nBTreeNoSplit0 . getErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numSubsets ( ) { return m_numSubsets ; }
void test3 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; String string0 = nBTreeNoSplit0 . sourceExpression ( 12 , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkModel ( int minNumInstances ) { / / checks if there are at least 2 subsets that contain > = minNumInstances int count = 0 ; for ( int i = 0 ; i < m_distribution . numBags ( ) ; i + + ) { if ( m_distribution . perBag ( i ) > = minNumInstances ) count + + ; } return ( count > = 2 ) ; }
void test5 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; nBTreeNoSplit0 . weights ( ( Instance ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkModel ( int minNumInstances ) { / / checks if there are at least 2 subsets that contain > = minNumInstances int count = 0 ; for ( int i = 0 ; i < m_distribution . numBags ( ) ; i + + ) { if ( m_distribution . perBag ( i ) > = minNumInstances ) count + + ; } return ( count > = 2 ) ; }
void test9 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; nBTreeNoSplit0 . getDiscretizer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numSubsets ( ) { return m_numSubsets ; }
void test0 ( ) throws Throwable { NBTreeModelSelection nBTreeModelSelection0 = new NBTreeModelSelection ( 1038 , ( Instances ) null ) ; nBTreeModelSelection0 . cleanup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { NBTreeModelSelection nBTreeModelSelection0 = new NBTreeModelSelection ( 1038 , ( Instances ) null ) ; ClassifierSplitModel classifierSplitModel0 = nBTreeModelSelection0 . selectModel ( ( Instances ) null , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassifierSplitModel selectModel ( Instances data , double [ ] [ ] dataZs , double [ ] [ ] dataWs ) throws Exception { int numAttributes = data . numAttributes ( ) ; if ( numAttributes < 2 ) throw new Exception ( "Can't select Model without non - class attribute" ) ; if ( data . numInstances ( ) < m_minNumInstances ) return new NoSplit ( new Distribution ( data ) ) ; double bestGain = - Double . MAX_VALUE ; int bestAttribute = - 1 ; / / try split on every attribute for ( int i = 0 ; i < numAttributes ; i + + ) { if ( i ! = data . classIndex ( ) ) { / / build split ResidualSplit split = new ResidualSplit ( i ) ; split . buildClassifier ( data , dataZs , dataWs ) ; if ( split . checkModel ( m_minNumInstances ) ) { / / evaluate split double gain = split . entropyGain ( ) ; if ( gain > bestGain ) { bestGain = gain ; bestAttribute = i ; } } } } if ( bestGain > = m_minInfoGain ) { / / return best split ResidualSplit split = new ResidualSplit ( bestAttribute ) ; split . buildClassifier ( data , dataZs , dataWs ) ; return split ; } else { / / could not find any split with enough information gain return new NoSplit ( new Distribution ( data ) ) ; } }
void test2 ( ) throws Throwable { NBTreeModelSelection nBTreeModelSelection0 = new NBTreeModelSelection ( 1038 , ( Instances ) null ) ; String string0 = nBTreeModelSelection0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { PruneableClassifierTree pruneableClassifierTree0 = new PruneableClassifierTree ( ( ModelSelection ) null , true , 0 , true , 0 ) ; String string0 = pruneableClassifierTree0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { EntropySplitCrit entropySplitCrit0 = new EntropySplitCrit ( ) ; String string0 = entropySplitCrit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { EntropySplitCrit entropySplitCrit0 = new EntropySplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 3 ] [ 3 ] ; double [ ] doubleArray1 = new double [ 3 ] ; doubleArray1 [ 0 ] = 0 . 2 ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double double0 = entropySplitCrit0 . splitCritValue ( distribution0 , distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test0 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; String string0 = infoGainSplitCrit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 2 ] [ 8 ] ; double [ ] doubleArray1 = new double [ 8 ] ; doubleArray1 [ 4 ] = Double . POSITIVE_INFINITY ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test2 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 0 , 0 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test3 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 1 ] [ 1 ] ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test4 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 22 , 875 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 , ( double ) 875 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test5 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 0 , 0 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 , ( double ) 0 , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test6 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; double [ ] [ ] doubleArray0 = new double [ 1 ] [ 1 ] ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 , ( - 670 . 9463975844382 ) , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test1 ( ) throws Throwable { C45ModelSelection c45ModelSelection0 = new C45ModelSelection ( 1022 , ( Instances ) null , true ) ; C45PruneableClassifierTree c45PruneableClassifierTree0 = new C45PruneableClassifierTree ( ( ModelSelection ) c45ModelSelection0 , true , ( float ) 1022 , true , true , true ) ; String string0 = c45PruneableClassifierTree0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test0 ( ) throws Throwable { NBTreeModelSelection nBTreeModelSelection0 = new NBTreeModelSelection ( ( - 710 ) , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( 808 , 808 , 808 ) ; double double0 = nBTreeSplit0 . getErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test4 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( ( - 244 ) , ( - 244 ) , ( - 244 ) ) ; String string0 = nBTreeSplit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test6 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( ( - 244 ) , ( - 244 ) , ( - 244 ) ) ; nBTreeSplit0 . getGlobalModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test8 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( 689 , 689 , 689 ) ; int int0 = nBTreeSplit0 . attIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test0 ( ) throws Throwable { BinC45Split binC45Split0 = new BinC45Split ( 234 , ( - 837 ) , ( double ) 234 , true ) ; double double0 = binC45Split0 . splitPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test1 ( ) throws Throwable { BinC45Split binC45Split0 = new BinC45Split ( ( - 13 ) , ( - 13 ) , ( double ) ( - 13 ) , true ) ; double double0 = binC45Split0 . infoGain ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test2 ( ) throws Throwable { BinC45Split binC45Split0 = new BinC45Split ( 1282 , 1282 , ( double ) 1282 , false ) ; double double0 = binC45Split0 . gainRatio ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test3 ( ) throws Throwable { BinC45Split binC45Split0 = new BinC45Split ( ( - 13 ) , ( - 13 ) , ( double ) ( - 13 ) , true ) ; int int0 = binC45Split0 . attIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test4 ( ) throws Throwable { BinC45Split binC45Split0 = new BinC45Split ( 19 , 19 , ( double ) 19 , false ) ; String string0 = binC45Split0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test10 ( ) throws Throwable { BinC45Split binC45Split0 = new BinC45Split ( ( - 1309 ) , ( - 1309 ) , ( double ) ( - 1309 ) , true ) ; String string0 = binC45Split0 . sourceExpression ( ( - 1309 ) , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sourceExpression ( int index , Instances data ) { / / method not in use return "" ; }
void test2 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; NoSplit noSplit0 = new NoSplit ( distribution0 ) ; noSplit0 . leftSide ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numSubsets ( ) { return m_numSubsets ; }
void test3 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; NoSplit noSplit0 = new NoSplit ( distribution0 ) ; String string0 = noSplit0 . sourceExpression ( 1 , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numSubsets ( ) { return m_numSubsets ; }
void test4 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; NoSplit noSplit0 = new NoSplit ( distribution0 ) ; noSplit0 . rightSide ( ( - 264 ) , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkModel ( int minNumInstances ) { / / checks if there are at least 2 subsets that contain > = minNumInstances int count = 0 ; for ( int i = 0 ; i < m_distribution . numBags ( ) ; i + + ) { if ( m_distribution . perBag ( i ) > = minNumInstances ) count + + ; } return ( count > = 2 ) ; }
void test5 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; NoSplit noSplit0 = new NoSplit ( distribution0 ) ; String string0 = noSplit0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numSubsets ( ) { return m_numSubsets ; }
void test1 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , ( - 3 ) , ( double ) 0 , true ) ; double double0 = c45Split0 . gainRatio ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test2 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( ( - 473 ) , ( - 473 ) , ( double ) ( - 473 ) , false ) ; double double0 = c45Split0 . splitPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test3 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( ( - 473 ) , ( - 473 ) , ( double ) ( - 473 ) , false ) ; double double0 = c45Split0 . codingCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test4 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( ( - 473 ) , ( - 473 ) , ( double ) ( - 473 ) , false ) ; double double0 = c45Split0 . infoGain ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test5 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 1 , 1 , ( double ) 1 , true ) ; int int0 = c45Split0 . attIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test6 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 1 , 0 , ( double ) 1 , false ) ; String string0 = c45Split0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test9 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , 0 , ( double ) 0 , true ) ; DenseInstance denseInstance0 = new DenseInstance ( 1315 ) ; double double0 = c45Split0 . classProb ( 0 , ( Instance ) denseInstance0 , ( - 1718 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test11 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , 18 , ( double ) 18 , true ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "K" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "K" , arrayList0 , 1127 ) ; String string0 = c45Split0 . rightSide ( 1672 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String rightSide ( int index , Instances data ) { StringBuffer text ; text = new StringBuffer ( ) ; if ( data . attribute ( m_attIndex ) . isNominal ( ) ) text . append ( " = " + data . attribute ( m_attIndex ) . value ( index ) ) ; else if ( index = = 0 ) text . append ( " < = " + Utils . doubleToString ( m_splitPoint , 6 ) ) ; else text . append ( " > " + Utils . doubleToString ( m_splitPoint , 6 ) ) ; return text . toString ( ) ; }
void test12 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , ( - 3 ) , ( double ) 0 , true ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "K" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "K" , arrayList0 , 18 ) ; String string0 = c45Split0 . rightSide ( 0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String rightSide ( int index , Instances data ) { StringBuffer text ; text = new StringBuffer ( ) ; if ( data . attribute ( m_attIndex ) . isNominal ( ) ) text . append ( " = " + data . attribute ( m_attIndex ) . value ( index ) ) ; else if ( index = = 0 ) text . append ( " < = " + Utils . doubleToString ( m_splitPoint , 6 ) ) ; else text . append ( " > " + Utils . doubleToString ( m_splitPoint , 6 ) ) ; return text . toString ( ) ; }
void test13 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( ( - 1957 ) , ( - 1957 ) , ( double ) ( - 1957 ) , false ) ; String string0 = c45Split0 . sourceExpression ( ( - 1957 ) , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sourceExpression ( int index , Instances data ) { / / method not in use return "" ; }
void test14 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , 18 , ( double ) 18 , true ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "K" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "K" , arrayList0 , 1127 ) ; String string0 = c45Split0 . sourceExpression ( 334 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sourceExpression ( int index , Instances data ) { / / method not in use return "" ; }
void test15 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , ( - 3 ) , ( double ) 0 , true ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "K" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "K" , arrayList0 , 18 ) ; String string0 = c45Split0 . sourceExpression ( 0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sourceExpression ( int index , Instances data ) { / / method not in use return "" ; }
void test16 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , 18 , ( double ) 18 , true ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "K" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "K" , arrayList0 , 1127 ) ; c45Split0 . setSplitPoint ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitPoint ( ) { return m_splitPoint ; }
void test17 ( ) throws Throwable { C45Split c45Split0 = new C45Split ( 0 , 18 , ( double ) 18 , true ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "K" ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "K" , arrayList0 , 1127 ) ; double [ ] [ ] doubleArray0 = new double [ 10 ] [ 4 ] ; arrayList0 . add ( attribute0 ) ; double [ ] [ ] doubleArray1 = c45Split0 . minsAndMaxs ( instances0 , doubleArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int attIndex ( ) { return m_attIndex ; }
void test0 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; double double0 = gainRatioSplitCrit0 . logFunc ( ( double ) 828 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double logFunc ( double num ) { / / Constant hard coded for efficiency reasons if ( num < 1e - 6 ) return 0 ; else return num * Math . log ( num ) / log2 ; }
void test1 ( ) throws Throwable { GainRatioSplitCrit gainRatioSplitCrit0 = new GainRatioSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 828 , 0 ) ; double double0 = gainRatioSplitCrit0 . splitEnt ( distribution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitEnt ( Distribution bags , double totalnoInst ) { double returnValue = 0 ; double noUnknown ; int i ; noUnknown = totalnoInst - bags . total ( ) ; if ( Utils . gr ( bags . total ( ) , 0 ) ) { for ( i = 0 ; i < bags . numBags ( ) ; i + + ) returnValue = returnValue - logFunc ( bags . perBag ( i ) ) ; returnValue = returnValue - logFunc ( noUnknown ) ; returnValue = returnValue + logFunc ( totalnoInst ) ; } return returnValue ; }
void test2 ( ) throws Throwable { InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit ( ) ; Distribution distribution0 = new Distribution ( 89 , 89 ) ; double double0 = infoGainSplitCrit0 . splitCritValue ( distribution0 , ( double ) 89 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double splitCritValue ( Distribution bags ) { double numerator ; double denumerator ; numerator = oldEnt ( bags ) - newEnt ( bags ) ; / / Splits with no gain are useless . if ( Utils . eq ( numerator , 0 ) ) return Double . MAX_VALUE ; denumerator = splitEnt ( bags ) ; / / Test if split is trivial . if ( Utils . eq ( denumerator , 0 ) ) return Double . MAX_VALUE ; / / We take the reciprocal value because we want to minimize the / / splitting criterion's value . return denumerator / numerator ; }
void test3 ( ) throws Throwable { BinC45ModelSelection binC45ModelSelection0 = new BinC45ModelSelection ( 645 , ( Instances ) null , true ) ; NBTreeClassifierTree nBTreeClassifierTree0 = new NBTreeClassifierTree ( ( ModelSelection ) binC45ModelSelection0 ) ; String string0 = nBTreeClassifierTree0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test5 ( ) throws Throwable { C45ModelSelection c45ModelSelection0 = new C45ModelSelection ( ( - 2 ) , ( Instances ) null , true ) ; NBTreeClassifierTree nBTreeClassifierTree0 = new NBTreeClassifierTree ( ( ModelSelection ) c45ModelSelection0 ) ; String string0 = nBTreeClassifierTree0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double total ( ) { double total = 0 ; for ( int row = 0 ; row < size ( ) ; row + + ) { for ( int col = 0 ; col < size ( ) ; col + + ) { total + = getElement ( row , col ) ; } } return total ; }
void test1 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 1 ] [ 7 ] ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double perClassPerBag ( int bagIndex , int classIndex ) { return m_perClassPerBag [ bagIndex ] [ classIndex ] ; }
void test5 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double numIncorrect ( ) { return totaL - numCorrect ( ) ; }
void test6 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double total ( ) { double total = 0 ; for ( int row = 0 ; row < size ( ) ; row + + ) { for ( int col = 0 ; col < size ( ) ; col + + ) { total + = getElement ( row , col ) ; } } return total ; }
void test7 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 6 ] [ 1 ] ; double [ ] doubleArray1 = new double [ 9 ] ; doubleArray1 [ 2 ] = 64 . 0 ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int maxClass ( ) { double maxCount = 0 ; int maxIndex = 0 ; int i ; for ( i = 0 ; i < m_perClass . length ; i + + ) if ( Utils . gr ( m_perClass [ i ] , maxCount ) ) { maxCount = m_perClass [ i ] ; maxIndex = i ; } return maxIndex ; }
void test8 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 95 , 95 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double total ( ) { double total = 0 ; for ( int row = 0 ; row < size ( ) ; row + + ) { for ( int col = 0 ; col < size ( ) ; col + + ) { total + = getElement ( row , col ) ; } } return total ; }
void test12 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpDistribution ( ) { StringBuffer text ; int i , j ; text = new StringBuffer ( ) ; for ( i = 0 ; i < m_perBag . length ; i + + ) { text . append ( "Bag num " + i + "\n" ) ; for ( j = 0 ; j < m_perClass . length ; j + + ) text . append ( "Class num " + j + " " + m_perClassPerBag [ i ] [ j ] + "\n" ) ; } return text . toString ( ) ; }
void test15 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 1 ] [ 7 ] ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double numIncorrect ( ) { return totaL - numCorrect ( ) ; }
void test18 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 1 ] [ 7 ] ; double [ ] doubleArray1 = new double [ 2 ] ; doubleArray0 [ 0 ] = doubleArray1 ; doubleArray1 [ 1 ] = ( - 926 . 5348517115302 ) ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double numIncorrect ( ) { return totaL - numCorrect ( ) ; }
void test19 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 6 ] [ 1 ] ; double [ ] doubleArray1 = new double [ 9 ] ; doubleArray1 [ 2 ] = 64 . 0 ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int maxBag ( ) { double max ; int maxIndex ; int i ; max = 0 ; maxIndex = - 1 ; for ( i = 0 ; i < m_perBag . length ; i + + ) if ( Utils . grOrEq ( m_perBag [ i ] , max ) ) { max = m_perBag [ i ] ; maxIndex = i ; } return maxIndex ; }
void test20 ( ) throws Throwable { double [ ] [ ] doubleArray0 = new double [ 6 ] [ 1 ] ; double [ ] doubleArray1 = new double [ 9 ] ; doubleArray1 [ 2 ] = 64 . 0 ; doubleArray0 [ 0 ] = doubleArray1 ; Distribution distribution0 = new Distribution ( doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double total ( ) { double total = 0 ; for ( int row = 0 ; row < size ( ) ; row + + ) { for ( int col = 0 ; col < size ( ) ; col + + ) { total + = getElement ( row , col ) ; } } return total ; }
void test21 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpDistribution ( ) { StringBuffer text ; int i , j ; text = new StringBuffer ( ) ; for ( i = 0 ; i < m_perBag . length ; i + + ) { text . append ( "Bag num " + i + "\n" ) ; for ( j = 0 ; j < m_perClass . length ; j + + ) text . append ( "Class num " + j + " " + m_perClassPerBag [ i ] [ j ] + "\n" ) ; } return text . toString ( ) ; }
void test22 ( ) throws Throwable { Distribution distribution0 = new Distribution ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpDistribution ( ) { StringBuffer text ; int i , j ; text = new StringBuffer ( ) ; for ( i = 0 ; i < m_perBag . length ; i + + ) { text . append ( "Bag num " + i + "\n" ) ; for ( j = 0 ; j < m_perClass . length ; j + + ) text . append ( "Class num " + j + " " + m_perClassPerBag [ i ] [ j ] + "\n" ) ; } return text . toString ( ) ; }
void test2 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( ( - 1194 ) , ( - 1194 ) , ( - 1194 ) ) ; NBTreeSplit nBTreeSplit1 = ( NBTreeSplit ) nBTreeSplit0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Estimator clone ( Estimator model ) throws Exception { return makeCopy ( model ) ; }
void test3 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( 1923 , 1923 , 1923 ) ; double double0 = nBTreeSplit0 . codingCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double codingCost ( ) { return Utils . log2 ( m_index ) ; }
void test4 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; Distribution distribution0 = nBTreeNoSplit0 . distribution ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distribution ( ) { return m_Distribution ; }
void test5 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( ( - 1194 ) , ( - 1194 ) , ( - 1194 ) ) ; boolean boolean0 = nBTreeSplit0 . checkModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkModel ( int minNumInstances ) { / / checks if there are at least 2 subsets that contain > = minNumInstances int count = 0 ; for ( int i = 0 ; i < m_distribution . numBags ( ) ; i + + ) { if ( m_distribution . perBag ( i ) > = minNumInstances ) count + + ; } return ( count > = 2 ) ; }
void test6 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; boolean boolean0 = nBTreeNoSplit0 . checkModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkModel ( int minNumInstances ) { / / checks if there are at least 2 subsets that contain > = minNumInstances int count = 0 ; for ( int i = 0 ; i < m_distribution . numBags ( ) ; i + + ) { if ( m_distribution . perBag ( i ) > = minNumInstances ) count + + ; } return ( count > = 2 ) ; }
void test10 ( ) throws Throwable { DenseInstance denseInstance0 = new DenseInstance ( 85 ) ; BinC45Split binC45Split0 = new BinC45Split ( 0 , 0 , ( double ) ( - 1542 ) , true ) ; double double0 = binC45Split0 . classProbLaplace ( 0 , ( Instance ) denseInstance0 , ( - 1542 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double classProbLaplace ( int classIndex , Instance instance , int theSubset ) throws Exception { if ( theSubset > - 1 ) { return m_distribution . laplaceProb ( classIndex , theSubset ) ; } else { double [ ] weights = weights ( instance ) ; if ( weights = = null ) { return m_distribution . laplaceProb ( classIndex ) ; } else { double prob = 0 ; for ( int i = 0 ; i < weights . length ; i + + ) { prob + = weights [ i ] * m_distribution . laplaceProb ( classIndex , i ) ; } return prob ; } } }
void test13 ( ) throws Throwable { NBTreeSplit nBTreeSplit0 = new NBTreeSplit ( ( - 1194 ) , ( - 1194 ) , ( - 1194 ) ) ; String string0 = nBTreeSplit0 . dumpModel ( ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpModel ( Instances data ) throws Exception { StringBuffer text ; int i ; text = new StringBuffer ( ) ; for ( i = 0 ; i < m_numSubsets ; i + + ) { text . append ( leftSide ( data ) + rightSide ( i , data ) + " : " ) ; text . append ( dumpLabel ( i , data ) + "\n" ) ; } return text . toString ( ) ; }
void test15 ( ) throws Throwable { NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( " - eE . . " , arrayList0 , 0 ) ; double [ ] doubleArray0 = new double [ 3 ] ; DenseInstance denseInstance0 = new DenseInstance ( ( double ) 0 , doubleArray0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; Instances [ ] instancesArray0 = nBTreeNoSplit0 . split ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void split ( Stack < DistanceNode > point_set , Stack < DistanceNode > far_set , int max_scale ) { int new_index = 0 ; double fmax = dist_of_scale ( max_scale ) ; for ( int i = 0 ; i < point_set . length ; i + + ) { DistanceNode n = point_set . element ( i ) ; if ( n . dist . element ( n . dist . length - 1 ) . doubleValue ( ) < = fmax ) { point_set . set ( new_index + + , point_set . element ( i ) ) ; } else far_set . push ( point_set . element ( i ) ) ; / / point_set [ i ] ) ; } List < DistanceNode > l = new java . util . LinkedList < DistanceNode > ( ) ; for ( int i = 0 ; i < new_index ; i + + ) l . add ( point_set . element ( i ) ) ; / / removing all and adding only the near points point_set . clear ( ) ; point_set . addAll ( l ) ; / / point_set . index = new_index ; }
void test0 ( ) throws Throwable { C45ModelSelection c45ModelSelection0 = new C45ModelSelection ( ( - 597 ) , ( Instances ) null , true ) ; ClassifierSplitModel classifierSplitModel0 = c45ModelSelection0 . selectModel ( ( Instances ) null , ( Instances ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassifierSplitModel selectModel ( Instances data , double [ ] [ ] dataZs , double [ ] [ ] dataWs ) throws Exception { int numAttributes = data . numAttributes ( ) ; if ( numAttributes < 2 ) throw new Exception ( "Can't select Model without non - class attribute" ) ; if ( data . numInstances ( ) < m_minNumInstances ) return new NoSplit ( new Distribution ( data ) ) ; double bestGain = - Double . MAX_VALUE ; int bestAttribute = - 1 ; / / try split on every attribute for ( int i = 0 ; i < numAttributes ; i + + ) { if ( i ! = data . classIndex ( ) ) { / / build split ResidualSplit split = new ResidualSplit ( i ) ; split . buildClassifier ( data , dataZs , dataWs ) ; if ( split . checkModel ( m_minNumInstances ) ) { / / evaluate split double gain = split . entropyGain ( ) ; if ( gain > bestGain ) { bestGain = gain ; bestAttribute = i ; } } } } if ( bestGain > = m_minInfoGain ) { / / return best split ResidualSplit split = new ResidualSplit ( bestAttribute ) ; split . buildClassifier ( data , dataZs , dataWs ) ; return split ; } else { / / could not find any split with enough information gain return new NoSplit ( new Distribution ( data ) ) ; } }
void test1 ( ) throws Throwable { C45ModelSelection c45ModelSelection0 = new C45ModelSelection ( ( - 597 ) , ( Instances ) null , true ) ; c45ModelSelection0 . cleanup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { C45ModelSelection c45ModelSelection0 = new C45ModelSelection ( ( - 597 ) , ( Instances ) null , true ) ; String string0 = c45ModelSelection0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { NBTreeModelSelection nBTreeModelSelection0 = new NBTreeModelSelection ( 8 , ( Instances ) null ) ; ClassifierTree classifierTree0 = new ClassifierTree ( ( ModelSelection ) nBTreeModelSelection0 ) ; String string0 = classifierTree0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long nextID ( ) { return PRINTED_NODES + + ; }
void test5 ( ) throws Throwable { ClassifierTree classifierTree0 = new ClassifierTree ( ( ModelSelection ) null ) ; int int0 = classifierTree0 . graphType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int graphType ( ) ; / * * * Returns a string that describes a graph representing * the object . The string should be in XMLBIF ver . * 0 . 3 format if the graph is a BayesNet , otherwise * it should be in dotty format . * * @return the graph described by a string * @exception Exception if the graph can't be computed * / String graph ( ) throws Exception ; }
void test14 ( ) throws Throwable { C45ModelSelection c45ModelSelection0 = new C45ModelSelection ( ( - 15 ) , ( Instances ) null , false ) ; ClassifierTree classifierTree0 = new ClassifierTree ( ( ModelSelection ) c45ModelSelection0 ) ; String string0 = classifierTree0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long nextID ( ) { return PRINTED_NODES + + ; }
void test0 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . estimatorTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String estimatorTipText ( ) { return "Select Estimator algorithm for finding the conditional probability tables" + " of the Bayes Network . " ; }
void test1 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; Enumeration < Object > enumeration0 = bayesNet0 . enumerateMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getMeasure ( "measureBayesScore" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test5 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getADTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseADTree ( ) { return m_bUseADTree ; }
void test8 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; int int0 = bayesNet0 . graphType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int graphType ( ) ; / * * * Returns a string that describes a graph representing * the object . The string should be in XMLBIF ver . * 0 . 3 format if the graph is a BayesNet , otherwise * it should be in dotty format . * * @return the graph described by a string * @exception Exception if the graph can't be computed * / String graph ( ) throws Exception ; }
void test10 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . measureBDeuScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureBDeuScore ( ) { LocalScoreSearchAlgorithm s = new LocalScoreSearchAlgorithm ( this , m_Instances ) ; return s . logScore ( Scoreable . BDeu ) ; }
void test11 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String [ ] stringArray0 = bayesNet0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseADTree ( ) { return m_bUseADTree ; }
void test12 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . measureAICScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureAICScore ( ) { LocalScoreSearchAlgorithm s = new LocalScoreSearchAlgorithm ( this , m_Instances ) ; return s . logScore ( Scoreable . AIC ) ; }
void test13 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getMeasure ( "measureMDLScore" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test14 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . BIFFileTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String BIFFileTipText ( ) { return "Set the name of a file in BIF XML format . A Bayes network learned" + " from data can be compared with the Bayes network represented by the BIF file . " + " Statistics calculated are o . a . the number of missing and extra arcs . " ; }
void test15 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . searchAlgorithmTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String searchAlgorithmTipText ( ) { return "Select method used for searching network structures . " ; }
void test17 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getDistributions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] getDistributions ( int index ) { if ( ( m_Distributions ! = null ) & & ( index < m_Distributions . size ( ) ) ) return ( double [ ] ) m_Distributions . elementAt ( index ) ; return null ; }
void test19 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test20 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getMeasure ( "measureEntropyScore" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test22 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . setBIFFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBIFFile ( String sBIFFile ) { try { m_otherBayesNet = new BIFReader ( ) . processFile ( sBIFFile ) ; } catch ( Throwable t ) { m_otherBayesNet = null ; } }
void test27 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . useADTreeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useADTreeTipText ( ) { return "When ADTree ( the data structure for increasing speed on counts , " + " not to be confused with the classifier under the same name ) is used" + " learning time goes down typically . However , because ADTrees are memory" + " intensive , memory problems may occur . Switching this option off makes" + " the structure learning algorithms slower , and run with less memory . " + " By default , ADTrees are used . " ; }
void test29 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . graph ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test30 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; boolean boolean0 = bayesNet0 . getUseADTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseADTree ( ) { return m_bUseADTree ; }
void test34 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . getBIFHeader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBIFHeader ( ) { StringBuffer text = new StringBuffer ( ) ; text . append ( " < ? xml version = \"1 . 0\" ? > \n" ) ; text . append ( " < ! - - DTD for the XMLBIF 0 . 3 format - - > \n" ) ; text . append ( " < ! DOCTYPE BIF [ \n" ) ; text . append ( " < ! ELEMENT BIF ( NETWORK ) * > \n" ) ; text . append ( " < ! ATTLIST BIF VERSION CDATA #REQUIRED > \n" ) ; text . append ( " < ! ELEMENT NETWORK ( NAME , ( PROPERTY | VARIABLE | DEFINITION ) * ) > \n" ) ; text . append ( " < ! ELEMENT NAME ( #PCDATA ) > \n" ) ; text . append ( " < ! ELEMENT VARIABLE ( NAME , ( OUTCOME | PROPERTY ) * ) > \n" ) ; text . append ( " < ! ATTLIST VARIABLE TYPE ( nature | decision | utility ) \"nature\" > \n" ) ; text . append ( " < ! ELEMENT OUTCOME ( #PCDATA ) > \n" ) ; text . append ( " < ! ELEMENT DEFINITION ( FOR | GIVEN | TABLE | PROPERTY ) * > \n" ) ; text . append ( " < ! ELEMENT FOR ( #PCDATA ) > \n" ) ; text . append ( " < ! ELEMENT GIVEN ( #PCDATA ) > \n" ) ; text . append ( " < ! ELEMENT TABLE ( #PCDATA ) > \n" ) ; text . append ( " < ! ELEMENT PROPERTY ( #PCDATA ) > \n" ) ; text . append ( " ] > \n" ) ; return text . toString ( ) ; }
void test36 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test37 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getParentSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ParentSet [ ] getParentSets ( ) { return m_ParentSets ; }
void test38 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; Enumeration < Object > enumeration0 = bayesNet0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test39 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "YeasureMDLScorV" , arrayList0 , 112 ) ; Instances instances1 = bayesNet0 . normalizeDataSet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Instances normalizeDataSet ( Instances instances ) throws Exception { m_DiscretizeFilter = null ; m_MissingValuesFilter = null ; boolean bHasNonNominal = false ; boolean bHasMissingValues = false ; Enumeration enu = instances . enumerateAttributes ( ) ; while ( enu . hasMoreElements ( ) ) { Attribute attribute = ( Attribute ) enu . nextElement ( ) ; if ( attribute . type ( ) ! = Attribute . NOMINAL ) { m_nNonDiscreteAttribute = attribute . index ( ) ; bHasNonNominal = true ; / / throw new UnsupportedAttributeTypeException ( "BayesNet handles nominal variables only . Non - nominal variable in dataset detected . " ) ; } Enumeration enum2 = instances . enumerateInstances ( ) ; while ( enum2 . hasMoreElements ( ) ) { if ( ( ( Instance ) enum2 . nextElement ( ) ) . isMissing ( attribute ) ) { bHasMissingValues = true ; / / throw new NoSupportForMissingValuesException ( "BayesNet : no missing values , please . " ) ; } } } if ( bHasNonNominal ) { System . err . println ( "Warning : discretizing data set" ) ; m_DiscretizeFilter = new Discretize ( ) ; m_DiscretizeFilter . setInputFormat ( instances ) ; instances = Filter . useFilter ( instances , m_DiscretizeFilter ) ; } if ( bHasMissingValues ) { System . err . println ( "Warning : filling in missing values in data set" ) ; m_MissingValuesFilter = new ReplaceMissingValues ( ) ; m_MissingValuesFilter . setInputFormat ( instances ) ; instances = Filter . useFilter ( instances , m_MissingValuesFilter ) ; } return instances ; }
void test40 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; double [ ] doubleArray0 = bayesNet0 . countsForInstance ( ( Instance ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] countsForInstance ( Instance instance ) throws Exception { double [ ] fCounts = new double [ m_NumClasses ] ; for ( int iClass = 0 ; iClass < m_NumClasses ; iClass + + ) { fCounts [ iClass ] = 0 . 0 ; } for ( int iClass = 0 ; iClass < m_NumClasses ; iClass + + ) { double fCount = 0 ; for ( int iAttribute = 0 ; iAttribute < m_Instances . numAttributes ( ) ; iAttribute + + ) { double iCPT = 0 ; for ( int iParent = 0 ; iParent < m_ParentSets [ iAttribute ] . getNrOfParents ( ) ; iParent + + ) { int nParent = m_ParentSets [ iAttribute ] . getParent ( iParent ) ; if ( nParent = = m_Instances . classIndex ( ) ) { iCPT = iCPT * m_NumClasses + iClass ; } else { iCPT = iCPT * m_Instances . attribute ( nParent ) . numValues ( ) + instance . value ( nParent ) ; } } if ( iAttribute = = m_Instances . classIndex ( ) ) { fCount + = ( ( DiscreteEstimatorBayes ) m_Distributions [ iAttribute ] [ ( int ) iCPT ] ) . getCount ( iClass ) ; } else { fCount + = ( ( DiscreteEstimatorBayes ) m_Distributions [ iAttribute ] [ ( int ) iCPT ] ) . getCount ( instance . value ( iAttribute ) ) ; } } fCounts [ iClass ] + = fCount ; } return fCounts ; }
void test41 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test42 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; String [ ] stringArray1 = BayesNet . partitionOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test43 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 1 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 2 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 3 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 4 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 5 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 6 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 7 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 8 ] = "s^CU , ? ? - N$Y / ; \"O'7q , " ; stringArray0 [ 9 ] = " - - " ; String [ ] stringArray1 = BayesNet . partitionOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test44 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . getBIFFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBIFFile ( ) { if ( m_otherBayesNet ! = null ) { return m_otherBayesNet . getFileName ( ) ; } return "" ; }
void test45 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test46 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test47 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . XMLNormalize ( " , 6W%j * _ < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XMLNormalize ( String sStr ) { StringBuffer sStr2 = new StringBuffer ( ) ; for ( int iStr = 0 ; iStr < sStr . length ( ) ; iStr + + ) { char c = sStr . charAt ( iStr ) ; switch ( c ) { case ' & ' : sStr2 . append ( " & amp ; " ) ; break ; case '\'' : sStr2 . append ( " & apos ; " ) ; break ; case '\"' : sStr2 . append ( " & quot ; " ) ; break ; case ' < ' : sStr2 . append ( " & lt ; " ) ; break ; case ' > ' : sStr2 . append ( " & gt ; " ) ; break ; default : sStr2 . append ( c ) ; } } return sStr2 . toString ( ) ; }
void test48 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . XMLNormalize ( "qHP' - @K & ] \"Rp , / yD * * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XMLNormalize ( String sStr ) { StringBuffer sStr2 = new StringBuffer ( ) ; for ( int iStr = 0 ; iStr < sStr . length ( ) ; iStr + + ) { char c = sStr . charAt ( iStr ) ; switch ( c ) { case ' & ' : sStr2 . append ( " & amp ; " ) ; break ; case '\'' : sStr2 . append ( " & apos ; " ) ; break ; case '\"' : sStr2 . append ( " & quot ; " ) ; break ; case ' < ' : sStr2 . append ( " & lt ; " ) ; break ; case ' > ' : sStr2 . append ( " & gt ; " ) ; break ; default : sStr2 . append ( c ) ; } } return sStr2 . toString ( ) ; }
void test49 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; String string0 = bayesNet0 . XMLNormalize ( " - GE ] g4g > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XMLNormalize ( String sStr ) { StringBuffer sStr2 = new StringBuffer ( ) ; for ( int iStr = 0 ; iStr < sStr . length ( ) ; iStr + + ) { char c = sStr . charAt ( iStr ) ; switch ( c ) { case ' & ' : sStr2 . append ( " & amp ; " ) ; break ; case '\'' : sStr2 . append ( " & apos ; " ) ; break ; case '\"' : sStr2 . append ( " & quot ; " ) ; break ; case ' < ' : sStr2 . append ( " & lt ; " ) ; break ; case ' > ' : sStr2 . append ( " & gt ; " ) ; break ; default : sStr2 . append ( c ) ; } } return sStr2 . toString ( ) ; }
void test50 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; double double0 = bayesNet0 . getMeasure ( "measureExtraArcs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test51 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; double double0 = bayesNet0 . getMeasure ( "measureReversedArcs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test52 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; double double0 = bayesNet0 . getMeasure ( "measureMissingArcs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test53 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; double double0 = bayesNet0 . getMeasure ( "measureDivergence" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test54 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; bayesNet0 . getMeasure ( "YeasureMDLScorV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMeasure ( String additionalMeasureName ) { if ( m_clusterer instanceof AdditionalMeasureProducer ) { return ( ( AdditionalMeasureProducer ) m_clusterer ) . getMeasure ( additionalMeasureName ) ; } else { throw new IllegalArgumentException ( "DensityBasedClustererSplitEvaluator : " + "Can't return value for : " + additionalMeasureName + " . " + m_clusterer . getClass ( ) . getName ( ) + " " + "is not an AdditionalMeasureProducer" ) ; } }
void test0 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNorm ( ) { return m_norm ; }
void test1 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseWordFrequencies ( ) { return m_wordFrequencies ; }
void test2 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseWordFrequencies ( ) { return m_wordFrequencies ; }
void test3 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SelectedTag getNormalizeDocLength ( ) { return new SelectedTag ( m_filterType , TAGS_FILTER ) ; }
void test4 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLNorm ( ) { return m_lnorm ; }
void test5 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; TestInstances testInstances0 = new TestInstances ( ) ; Instances instances0 = testInstances0 . generate ( ) ; naiveBayesMultinomialText0 . buildClassifier ( instances0 ) ; String string0 = naiveBayesMultinomialText0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test7 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseWordFrequencies ( ) { return m_wordFrequencies ; }
void test8 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test9 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SelectedTag getNormalizeDocLength ( ) { return new SelectedTag ( m_filterType , TAGS_FILTER ) ; }
void test10 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNorm ( ) { return m_norm ; }
void test11 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test12 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseWordFrequencies ( ) { return m_wordFrequencies ; }
void test13 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNorm ( ) { return m_norm ; }
void test14 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test15 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test16 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test17 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test18 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double [ ] distributionForInstance ( Instance instance ) throws Exception { if ( m_Filter . numPendingOutput ( ) > 0 ) throw new Exception ( "Filter output queue not empty ! " ) ; if ( ! m_Filter . input ( instance ) ) throw new Exception ( "Filter didn't make the test instance immediately available ! " ) ; m_Filter . batchFinished ( ) ; Instance newInstance = m_Filter . output ( ) ; return m_Clusterer . distributionForInstance ( newInstance ) ; }
void test19 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void pruneDictionary ( ) { if ( m_periodicP < = 0 | | m_t % m_periodicP > 0 ) { return ; } Iterator < Map . Entry < String , Count > > entries = m_dictionary . entrySet ( ) . iterator ( ) ; while ( entries . hasNext ( ) ) { Map . Entry < String , Count > entry = entries . next ( ) ; if ( entry . getValue ( ) . m_count < m_minWordP ) { entries . remove ( ) ; } } }
void test20 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getPeriodicPruning ( ) { return m_PeriodicPruningRate ; }
void test21 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test22 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseWordFrequencies ( ) { return m_wordFrequencies ; }
void test23 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNorm ( ) { return m_norm ; }
void test24 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test25 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLNorm ( ) { return m_lnorm ; }
void test26 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getNorm ( ) { return m_norm ; }
void test27 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseStopList ( ) { return m_useStopList ; }
void test28 ( ) throws Throwable { NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getMinWordFrequency ( ) { return m_minWordP ; }
void test0 ( ) throws Throwable { NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; String string0 = naiveBayesMultinomialUpdateable0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; String string0 = naiveBayesMultinomialUpdateable0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test3 ( ) throws Throwable { NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable ( ) ; String string0 = naiveBayesMultinomialUpdateable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double lnFactorial ( double x ) { return Statistics . lnGamma ( x + 1 ) ; }
void test6 ( ) throws Throwable { NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double lnFactorial ( double x ) { return Statistics . lnGamma ( x + 1 ) ; }
void test7 ( ) throws Throwable { NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; String string0 = naiveBayesUpdateable0 . useKernelEstimatorTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseKernelEstimator ( ) { return m_UseKernelEstimator ; }
void test1 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; String string0 = naiveBayes0 . displayModelInOldFormatTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseSupervisedDiscretization ( ) { return m_UseDiscretization ; }
void test3 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; boolean boolean0 = naiveBayesUpdateable0 . getUseSupervisedDiscretization ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseKernelEstimator ( ) { return m_UseKernelEstimator ; }
void test4 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; String string0 = naiveBayes0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseSupervisedDiscretization ( ) { return m_UseDiscretization ; }
void test5 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; String string0 = naiveBayes0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseKernelEstimator ( ) { return m_UseKernelEstimator ; }
void test6 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; String string0 = naiveBayes0 . useSupervisedDiscretizationTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayModelInOldFormat ( ) { return m_displayModelInOldFormat ; }
void test7 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; boolean boolean0 = naiveBayes0 . getUseKernelEstimator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayModelInOldFormat ( ) { return m_displayModelInOldFormat ; }
void test8 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; Enumeration < Object > enumeration0 = naiveBayes0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayModelInOldFormat ( ) { return m_displayModelInOldFormat ; }
void test9 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; boolean boolean0 = naiveBayes0 . getDisplayModelInOldFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseSupervisedDiscretization ( ) { return m_UseDiscretization ; }
void test12 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double classifyInstance ( Instance instance ) throws Exception ; / * * * Predicts the class memberships for a given instance . If * an instance is unclassified , the returned array elements * must be all zero . If the class is numeric , the array * must consist of only one element , which contains the * predicted value . Note that a classifier MUST implement * either this or classifyInstance ( ) . * * @param instance the instance to be classified * @return an array containing the estimated membership * probabilities of the test instance in each class * or the numeric prediction * @exception Exception if distribution could not be * computed successfully * / double [ ] distributionForInstance ( Instance instance ) throws Exception ; / * * * Returns the Capabilities of this classifier . Maximally permissive * capabilities are allowed by default . Derived classifiers should * override this method and first disable all capabilities and then * enable just those capabilities that make sense for the scheme . * * @return the capabilities of this object * @see Capabilities * / Capabilities getCapabilities ( ) ; }
void test13 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseKernelEstimator ( ) { return m_UseKernelEstimator ; }
void test14 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseSupervisedDiscretization ( ) { return m_UseDiscretization ; }
void test15 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayModelInOldFormat ( ) { return m_displayModelInOldFormat ; }
void test16 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; String string0 = naiveBayesUpdateable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseSupervisedDiscretization ( ) { return m_UseDiscretization ; }
void test17 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDisplayModelInOldFormat ( ) { return m_displayModelInOldFormat ; }
void test0 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; String string0 = naiveBayesUpdateable0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; String string0 = naiveBayesUpdateable0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable ( ) ; naiveBayesUpdateable0 . setUseSupervisedDiscretization ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseSupervisedDiscretization ( ) { return m_UseDiscretization ; }
void test0 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCardinalityOfParents ( ) { return m_nCardinalityOfParents ; }
void test1 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteLastParent ( Instances _Instances ) { m_nNrOfParents - - ; m_nCardinalityOfParents = m_nCardinalityOfParents / _Instances . attribute ( m_nParents [ m_nNrOfParents ] ) . numValues ( ) ; }
void test2 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNrOfParents ( int iNode ) { return m_ParentSets [ iNode ] . getNrOfParents ( ) ; }
void test3 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNrOfParents ( int iNode ) { return m_ParentSets [ iNode ] . getNrOfParents ( ) ; }
void test4 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void SetParent ( int iParent , int nNode ) { m_nParents [ iParent ] = nNode ; }
void test5 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCardinalityOfParents ( ) { return m_nCardinalityOfParents ; }
void test6 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( 267 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Edge getParent ( int i ) { if ( i < m_parent . size ( ) ) { return ( Edge ) m_parent . elementAt ( i ) ; } else { return null ; } }
void test7 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNrOfParents ( int iNode ) { return m_ParentSets [ iNode ] . getNrOfParents ( ) ; }
void test8 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addParent ( int nParent , Instances _Instances ) { if ( m_nNrOfParents = = m_nParents . length ) { / / 10 ) { / / reserve more memory int [ ] nParents = new int [ 2 * m_nParents . length ] ; / / 50 ] ; for ( int i = 0 ; i < m_nNrOfParents ; i + + ) { nParents [ i ] = m_nParents [ i ] ; } m_nParents = nParents ; } m_nParents [ m_nNrOfParents ] = nParent ; m_nNrOfParents + + ; m_nCardinalityOfParents * = _Instances . attribute ( nParent ) . numValues ( ) ; }
void test9 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNrOfParents ( int iNode ) { return m_ParentSets [ iNode ] . getNrOfParents ( ) ; }
void test10 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNrOfParents ( int iNode ) { return m_ParentSets [ iNode ] . getNrOfParents ( ) ; }
void test11 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( 104 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addParent ( int nParent , Instances _Instances ) { if ( m_nNrOfParents = = m_nParents . length ) { / / 10 ) { / / reserve more memory int [ ] nParents = new int [ 2 * m_nParents . length ] ; / / 50 ] ; for ( int i = 0 ; i < m_nNrOfParents ; i + + ) { nParents [ i ] = m_nParents [ i ] ; } m_nParents = nParents ; } m_nParents [ m_nNrOfParents ] = nParent ; m_nNrOfParents + + ; m_nCardinalityOfParents * = _Instances . attribute ( nParent ) . numValues ( ) ; }
void test12 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addParent ( int nParent , Instances _Instances ) { if ( m_nNrOfParents = = m_nParents . length ) { / / 10 ) { / / reserve more memory int [ ] nParents = new int [ 2 * m_nParents . length ] ; / / 50 ] ; for ( int i = 0 ; i < m_nNrOfParents ; i + + ) { nParents [ i ] = m_nParents [ i ] ; } m_nParents = nParents ; } m_nParents [ m_nNrOfParents ] = nParent ; m_nNrOfParents + + ; m_nCardinalityOfParents * = _Instances . attribute ( nParent ) . numValues ( ) ; }
void test13 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addParent ( int nParent , Instances _Instances ) { if ( m_nNrOfParents = = m_nParents . length ) { / / 10 ) { / / reserve more memory int [ ] nParents = new int [ 2 * m_nParents . length ] ; / / 50 ] ; for ( int i = 0 ; i < m_nNrOfParents ; i + + ) { nParents [ i ] = m_nParents [ i ] ; } m_nParents = nParents ; } m_nParents [ m_nNrOfParents ] = nParent ; m_nNrOfParents + + ; m_nCardinalityOfParents * = _Instances . attribute ( nParent ) . numValues ( ) ; }
void test14 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNrOfParents ( int iNode ) { return m_ParentSets [ iNode ] . getNrOfParents ( ) ; }
void test15 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCardinalityOfParents ( ) { return m_nCardinalityOfParents ; }
void test16 ( ) throws Throwable { ParentSet parentSet0 = new ParentSet ( 18 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCardinalityOfParents ( ) { return m_nCardinalityOfParents ; }
void test1 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "eO" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / int classIndex ( ) { if ( m_Dataset = = null ) { throw new UnassignedDatasetException ( "DenseInstance doesn't have access to a dataset ! " ) ; } return m_Dataset . classIndex ( ) ; }
void test2 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; EditableBayesNet . AddNodeAction editableBayesNet_AddNodeAction0 = editableBayesNet0 . new AddNodeAction ( "" , 7 , 7 , 20 ) ; editableBayesNet_AddNodeAction0 . redo ( ) ; editableBayesNet0 . undo ( ) ; EditableBayesNet . AddArcAction editableBayesNet_AddArcAction0 = editableBayesNet0 . new AddArcAction ( 0 , 0 ) ; editableBayesNet_AddArcAction0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureEntropyScore ( ) { LocalScoreSearchAlgorithm s = new LocalScoreSearchAlgorithm ( this , m_Instances ) ; return s . logScore ( Scoreable . ENTROPY ) ; }
void test3 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; EditableBayesNet . AddArcAction editableBayesNet_AddArcAction0 = editableBayesNet0 . new AddArcAction ( ( - 768 ) , ( - 1 ) ) ; editableBayesNet_AddArcAction0 . undo ( ) ; String string0 = editableBayesNet0 . lastActionMsg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String lastActionMsg ( ) { if ( m_undoStack . size ( ) = = 0 ) { return "" ; } return ( ( UndoAction ) m_undoStack . lastElement ( ) ) . getRedoMsg ( ) ; }
void test4 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( true ) ; EditableBayesNet . DelValueAction editableBayesNet_DelValueAction0 = editableBayesNet0 . new DelValueAction ( ( - 1782 ) , "~x . M2Aq * = U7e ] n" ) ; editableBayesNet_DelValueAction0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; double [ ] [ ] doubleArray0 = new double [ 9 ] [ 4 ] ; EditableBayesNet . SetDistributionAction editableBayesNet_SetDistributionAction0 = editableBayesNet0 . new SetDistributionAction ( ( - 1 ) , doubleArray0 ) ; editableBayesNet_SetDistributionAction0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canUndo ( ) { return ( ( ArffTableModel ) getModel ( ) ) . canUndo ( ) ; }
void test10 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( true ) ; double [ ] [ ] doubleArray0 = new double [ 5 ] [ 5 ] ; EditableBayesNet . SetDistributionAction editableBayesNet_SetDistributionAction0 = editableBayesNet0 . new SetDistributionAction ( 1465 , doubleArray0 ) ; editableBayesNet_SetDistributionAction0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test18 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; String string0 = editableBayesNet0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChanged ( ) { return m_ArffPanel . isChanged ( ) ; }
void test20 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( true ) ; editableBayesNet0 . isSaved ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLBIF03 ( ) { if ( m_Instances = = null ) { return ( " < ! - - No model built yet - - > " ) ; } StringBuffer text = new StringBuffer ( ) ; text . append ( getBIFHeader ( ) ) ; text . append ( "\n" ) ; text . append ( "\n" ) ; text . append ( " < BIF VERSION = \"0 . 3\" > \n" ) ; text . append ( " < NETWORK > \n" ) ; text . append ( " < NAME > " + XMLNormalize ( m_Instances . relationName ( ) ) + " < / NAME > \n" ) ; for ( int iAttribute = 0 ; iAttribute < m_Instances . numAttributes ( ) ; iAttribute + + ) { text . append ( " < VARIABLE TYPE = \"nature\" > \n" ) ; text . append ( " < NAME > " + XMLNormalize ( m_Instances . attribute ( iAttribute ) . name ( ) ) + " < / NAME > \n" ) ; for ( int iValue = 0 ; iValue < m_Instances . attribute ( iAttribute ) . numValues ( ) ; iValue + + ) { text . append ( " < OUTCOME > " + XMLNormalize ( m_Instances . attribute ( iAttribute ) . value ( iValue ) ) + " < / OUTCOME > \n" ) ; } text . append ( " < / VARIABLE > \n" ) ; } for ( int iAttribute = 0 ; iAttribute < m_Instances . numAttributes ( ) ; iAttribute + + ) { text . append ( " < DEFINITION > \n" ) ; text . append ( " < FOR > " + XMLNormalize ( m_Instances . attribute ( iAttribute ) . name ( ) ) + " < / FOR > \n" ) ; for ( int iParent = 0 ; iParent < m_ParentSets [ iAttribute ] . getNrOfParents ( ) ; iParent + + ) { text . append ( " < GIVEN > " + XMLNormalize ( m_Instances . attribute ( m_ParentSets [ iAttribute ] . getParent ( iParent ) ) . name ( ) ) + " < / GIVEN > \n" ) ; } text . append ( " < TABLE > \n" ) ; for ( int iParent = 0 ; iParent < m_ParentSets [ iAttribute ] . getCardinalityOfParents ( ) ; iParent + + ) { for ( int iValue = 0 ; iValue < m_Instances . attribute ( iAttribute ) . numValues ( ) ; iValue + + ) { text . append ( m_Distributions [ iAttribute ] [ iParent ] . getProbability ( iValue ) ) ; text . append ( ' ' ) ; } text . append ( '\n' ) ; } text . append ( " < / TABLE > \n" ) ; text . append ( " < / DEFINITION > \n" ) ; } text . append ( " < / NETWORK > \n" ) ; text . append ( " < / BIF > \n" ) ; return text . toString ( ) ; }
void test21 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteArc ( String sParent , String sChild ) throws Exception { int nParent = getNode ( sParent ) ; int nChild = getNode ( sChild ) ; deleteArc ( nParent , nChild ) ; }
void test22 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDistribution ( SelectedTag newDstr ) { if ( newDstr . getTags ( ) = = TAGS_DSTRS_TYPE ) { m_distribution = newDstr . getSelectedTag ( ) . getID ( ) ; } }
void test24 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; EditableBayesNet . AddNodeAction editableBayesNet_AddNodeAction0 = editableBayesNet0 . new AddNodeAction ( "" , 7 , 7 , 20 ) ; editableBayesNet_AddNodeAction0 . redo ( ) ; editableBayesNet0 . setData ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test30 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; EditableBayesNet . PasteAction editableBayesNet_PasteAction0 = editableBayesNet0 . new PasteAction ( "" , ( - 1 ) ) ; editableBayesNet_PasteAction0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChanged ( ) { return m_ArffPanel . isChanged ( ) ; }
void test31 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; EditableBayesNet . DeleteArcAction editableBayesNet_DeleteArcAction0 = editableBayesNet0 . new DeleteArcAction ( 12 , 1923 ) ; editableBayesNet_DeleteArcAction0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String redo ( ) { if ( ! canRedo ( ) ) { return "" ; } m_nCurrentEditAction + + ; UndoAction undoAction = ( UndoAction ) m_undoStack . elementAt ( m_nCurrentEditAction ) ; m_bNeedsUndoAction = false ; undoAction . redo ( ) ; m_bNeedsUndoAction = true ; / / undo stack debugging / * if ( m_nCurrentEditAction < m_sXMLStack . size ( ) ) { String sXML = ( String ) m_sXMLStack . elementAt ( m_nCurrentEditAction ) ; String sXMLCurrent = toXMLBIF03 ( ) ; if ( ! sXML . equals ( sXMLCurrent ) ) { String sDiff = "" ; String sDiff2 = "" ; for ( int i = 0 ; i < sXML . length ( ) & & sDiff . length ( ) < 80 ; i + + ) { if ( sXML . charAt ( i ) ! = sXMLCurrent . charAt ( i ) ) { sDiff + = sXML . charAt ( i ) ; sDiff2 + = sXMLCurrent . charAt ( i ) ; } } JOptionPane . showMessageDialog ( null , "redo error\n" + sDiff + " \n" + sDiff2 ) ; } } * / return undoAction . getRedoMsg ( ) ; }
void test32 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChanged ( ) { return m_ArffPanel . isChanged ( ) ; }
void test33 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "eO" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureAICScore ( ) { LocalScoreSearchAlgorithm s = new LocalScoreSearchAlgorithm ( this , m_Instances ) ; return s . logScore ( Scoreable . AIC ) ; }
void test34 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; EditableBayesNet . AddNodeAction editableBayesNet_AddNodeAction0 = editableBayesNet0 . new AddNodeAction ( "" , 7 , 7 , 20 ) ; editableBayesNet_AddNodeAction0 . redo ( ) ; editableBayesNet_AddNodeAction0 . undo ( ) ; String string0 = editableBayesNet0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSummaryString ( ) { StringBuffer result = new StringBuffer ( ) ; result . append ( "Relation Name : " ) . append ( relationName ( ) ) . append ( '\n' ) ; result . append ( "Num Instances : " ) . append ( numInstances ( ) ) . append ( '\n' ) ; result . append ( "Num Attributes : " ) . append ( numAttributes ( ) ) . append ( '\n' ) ; result . append ( '\n' ) ; result . append ( Utils . padLeft ( "" , 5 ) ) . append ( Utils . padRight ( "Name" , 25 ) ) ; result . append ( Utils . padLeft ( "Type" , 5 ) ) . append ( Utils . padLeft ( "Nom" , 5 ) ) ; result . append ( Utils . padLeft ( "Int" , 5 ) ) . append ( Utils . padLeft ( "Real" , 5 ) ) ; result . append ( Utils . padLeft ( "Missing" , 12 ) ) ; result . append ( Utils . padLeft ( "Unique" , 12 ) ) ; result . append ( Utils . padLeft ( "Dist" , 6 ) ) . append ( '\n' ) ; for ( int i = 0 ; i < numAttributes ( ) ; i + + ) { Attribute a = attribute ( i ) ; AttributeStats as = attributeStats ( i ) ; result . append ( Utils . padLeft ( "" + ( i + 1 ) , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padRight ( a . name ( ) , 25 ) ) . append ( ' ' ) ; long percent ; switch ( a . type ( ) ) { case Attribute . NOMINAL : result . append ( Utils . padLeft ( "Nom" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . NUMERIC : result . append ( Utils . padLeft ( "Num" , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . DATE : result . append ( Utils . padLeft ( "Dat" , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . STRING : result . append ( Utils . padLeft ( "Str" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . RELATIONAL : result . append ( Utils . padLeft ( "Rel" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; default : result . append ( Utils . padLeft ( " ? ? ? " , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; } result . append ( Utils . padLeft ( "" + as . missingCount , 5 ) ) . append ( " / " ) ; percent = Math . round ( 100 . 0 * as . missingCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + as . uniqueCount , 5 ) ) . append ( " / " ) ; percent = Math . round ( 100 . 0 * as . uniqueCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + as . distinctCount , 5 ) ) . append ( ' ' ) ; result . append ( '\n' ) ; } return result . toString ( ) ; }
void test35 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureAICScore ( ) { LocalScoreSearchAlgorithm s = new LocalScoreSearchAlgorithm ( this , m_Instances ) ; return s . logScore ( Scoreable . AIC ) ; }
void test36 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "eO" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String lastActionMsg ( ) { if ( m_undoStack . size ( ) = = 0 ) { return "" ; } return ( ( UndoAction ) m_undoStack . lastElement ( ) ) . getRedoMsg ( ) ; }
void test37 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test38 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; EditableBayesNet . AddValueAction editableBayesNet_AddValueAction0 = editableBayesNet0 . new AddValueAction ( 0 , "b ) Q" ) ; editableBayesNet_AddValueAction0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXMLBIF03 ( ) { if ( m_Instances = = null ) { return ( " < ! - - No model built yet - - > " ) ; } StringBuffer text = new StringBuffer ( ) ; text . append ( getBIFHeader ( ) ) ; text . append ( "\n" ) ; text . append ( "\n" ) ; text . append ( " < BIF VERSION = \"0 . 3\" > \n" ) ; text . append ( " < NETWORK > \n" ) ; text . append ( " < NAME > " + XMLNormalize ( m_Instances . relationName ( ) ) + " < / NAME > \n" ) ; for ( int iAttribute = 0 ; iAttribute < m_Instances . numAttributes ( ) ; iAttribute + + ) { text . append ( " < VARIABLE TYPE = \"nature\" > \n" ) ; text . append ( " < NAME > " + XMLNormalize ( m_Instances . attribute ( iAttribute ) . name ( ) ) + " < / NAME > \n" ) ; for ( int iValue = 0 ; iValue < m_Instances . attribute ( iAttribute ) . numValues ( ) ; iValue + + ) { text . append ( " < OUTCOME > " + XMLNormalize ( m_Instances . attribute ( iAttribute ) . value ( iValue ) ) + " < / OUTCOME > \n" ) ; } text . append ( " < / VARIABLE > \n" ) ; } for ( int iAttribute = 0 ; iAttribute < m_Instances . numAttributes ( ) ; iAttribute + + ) { text . append ( " < DEFINITION > \n" ) ; text . append ( " < FOR > " + XMLNormalize ( m_Instances . attribute ( iAttribute ) . name ( ) ) + " < / FOR > \n" ) ; for ( int iParent = 0 ; iParent < m_ParentSets [ iAttribute ] . getNrOfParents ( ) ; iParent + + ) { text . append ( " < GIVEN > " + XMLNormalize ( m_Instances . attribute ( m_ParentSets [ iAttribute ] . getParent ( iParent ) ) . name ( ) ) + " < / GIVEN > \n" ) ; } text . append ( " < TABLE > \n" ) ; for ( int iParent = 0 ; iParent < m_ParentSets [ iAttribute ] . getCardinalityOfParents ( ) ; iParent + + ) { for ( int iValue = 0 ; iValue < m_Instances . attribute ( iAttribute ) . numValues ( ) ; iValue + + ) { text . append ( m_Distributions [ iAttribute ] [ iParent ] . getProbability ( iValue ) ) ; text . append ( ' ' ) ; } text . append ( '\n' ) ; } text . append ( " < / TABLE > \n" ) ; text . append ( " < / DEFINITION > \n" ) ; } text . append ( " < / NETWORK > \n" ) ; text . append ( " < / BIF > \n" ) ; return text . toString ( ) ; }
void test39 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; EditableBayesNet . AddValueAction editableBayesNet_AddValueAction0 = editableBayesNet0 . new AddValueAction ( 0 , "b ) Q" ) ; editableBayesNet_AddValueAction0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test44 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void spaceHorizontal ( FastVector nodes ) { / / update undo stack if ( m_bNeedsUndoAction ) { addUndoAction ( new spaceHorizontalAction ( nodes ) ) ; } int nMinX = - 1 ; int nMaxX = - 1 ; for ( int iNode = 0 ; iNode < nodes . size ( ) ; iNode + + ) { int nX = getPositionX ( ( Integer ) nodes . elementAt ( iNode ) ) ; if ( nX < nMinX | | iNode = = 0 ) { nMinX = nX ; } if ( nX > nMaxX | | iNode = = 0 ) { nMaxX = nX ; } } for ( int iNode = 0 ; iNode < nodes . size ( ) ; iNode + + ) { int nNode = ( Integer ) nodes . elementAt ( iNode ) ; m_nPositionX . setElementAt ( ( int ) ( nMinX + iNode * ( nMaxX - nMinX ) / ( nodes . size ( ) - 1 . 0 ) ) , nNode ) ; } }
void test45 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; String string0 = editableBayesNet0 . graph ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChanged ( ) { return m_ArffPanel . isChanged ( ) ; }
void test46 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "eO" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "eO" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test47 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; String string0 = editableBayesNet0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canUndo ( ) { return ( ( ArffTableModel ) getModel ( ) ) . canUndo ( ) ; }
void test48 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; String string0 = editableBayesNet0 . redo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canUndo ( ) { return ( ( ArffTableModel ) getModel ( ) ) . canUndo ( ) ; }
void test49 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( false ) ; boolean boolean0 = editableBayesNet0 . isChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test50 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; EditableBayesNet . AddArcAction editableBayesNet_AddArcAction0 = editableBayesNet0 . new AddArcAction ( ( - 768 ) , ( - 1 ) ) ; editableBayesNet_AddArcAction0 . undo ( ) ; boolean boolean0 = editableBayesNet0 . isChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChanged ( ) { return m_ArffPanel . isChanged ( ) ; }
void test51 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( true ) ; String string0 = editableBayesNet0 . lastActionMsg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return m_attributeName ; }
void test52 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 7 ) ; Attribute attribute0 = new Attribute ( "" ) ; arrayList0 . add ( attribute0 ) ; EditableBayesNet editableBayesNet0 = new EditableBayesNet ( instances0 ) ; EditableBayesNet . AddNodeAction editableBayesNet_AddNodeAction0 = editableBayesNet0 . new AddNodeAction ( "" , 7 , 7 , 20 ) ; editableBayesNet_AddNodeAction0 . undo ( ) ; String string0 = editableBayesNet0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test53 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( ) ; EditableBayesNet . AddArcAction editableBayesNet_AddArcAction0 = editableBayesNet0 . new AddArcAction ( 1938 , ( FastVector ) null ) ; editableBayesNet_AddArcAction0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChanged ( ) { return m_ArffPanel . isChanged ( ) ; }
void test54 ( ) throws Throwable { EditableBayesNet editableBayesNet0 = new EditableBayesNet ( true ) ; EditableBayesNet . PasteAction editableBayesNet_PasteAction0 = editableBayesNet0 . new PasteAction ( "S" , ( - 1 ) ) ; editableBayesNet_PasteAction0 . undo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void graph ( ) { boolean flag = true ; String s ; / / expect digraph int t ; nextToken ( "expected 'digraph'" ) ; if ( m_st . sval . equalsIgnoreCase ( "digraph" ) ) { m_digraph = true ; } else { System . out . println ( "expected 'digraph'" ) ; } nextToken ( "expected a Graph Name" ) ; if ( m_st . sval ! = null ) { m_graphName = m_st . sval ; } else { System . out . println ( "expected a Graph Name" ) ; } nextToken ( "expected ' { '" ) ; if ( m_st . ttype = = ' { ' ) { stmtList ( ) ; } else { System . out . println ( "expected ' { '" ) ; } }
void test0 ( ) throws Throwable { VaryNode varyNode0 = new VaryNode ( ( - 812 ) ) ; String string0 = varyNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { VaryNode varyNode0 = new VaryNode ( ( - 812 ) ) ; int [ ] intArray0 = new int [ 5 ] ; ADNode aDNode0 = new ADNode ( ) ; ADNode [ ] aDNodeArray0 = new ADNode [ 20 ] ; VaryNode [ ] varyNodeArray0 = new VaryNode [ 4 ] ; varyNodeArray0 [ 0 ] = varyNode0 ; aDNode0 . m_VaryNodes = ( weka . classifiers . bayes . net . VaryNode [ ] ) varyNodeArray0 ; varyNode0 . m_ADNodes = ( weka . classifiers . bayes . net . ADNode [ ] ) aDNodeArray0 ; aDNodeArray0 [ 9 ] = aDNode0 ; varyNode0 . getCounts ( intArray0 , intArray0 , intArray0 , 0 , 0 , aDNode0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void getCounts ( int [ ] nCounts , int [ ] nNodes , int [ ] nOffsets , int iNode , int iOffset , boolean bSubstract ) { / / for ( int iNode2 = 0 ; iNode2 < nCounts . length ; iNode2 + + ) { / / System . out . print ( nCounts [ iNode2 ] + " " ) ; / / } / / System . out . println ( ) ; if ( iNode > = nNodes . length ) { if ( bSubstract ) { nCounts [ iOffset ] - = m_nCount ; } else { nCounts [ iOffset ] + = m_nCount ; } return ; } else { if ( m_VaryNodes ! = null ) { m_VaryNodes [ nNodes [ iNode ] - m_nStartNode ] . getCounts ( nCounts , nNodes , nOffsets , iNode , iOffset , this , bSubstract ) ; } else { for ( int iInstance = 0 ; iInstance < m_Instances . length ; iInstance + + ) { int iOffset2 = iOffset ; Instance instance = m_Instances [ iInstance ] ; for ( int iNode2 = iNode ; iNode2 < nNodes . length ; iNode2 + + ) { iOffset2 = iOffset2 + nOffsets [ iNode2 ] * ( int ) instance . value ( nNodes [ iNode2 ] ) ; } if ( bSubstract ) { nCounts [ iOffset2 ] - - ; } else { nCounts [ iOffset2 ] + + ; } } } } }
void test2 ( ) throws Throwable { VaryNode varyNode0 = new VaryNode ( ( - 812 ) ) ; ADNode [ ] aDNodeArray0 = new ADNode [ 20 ] ; varyNode0 . m_ADNodes = ( weka . classifiers . bayes . net . ADNode [ ] ) aDNodeArray0 ; varyNode0 . print ( "8034" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void print ( Object msg ) { if ( ! getSilent ( ) ) System . out . print ( msg ) ; }
void test2 ( ) throws Throwable { BIFReader bIFReader0 = new BIFReader ( ) ; String string0 = bIFReader0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test3 ( ) throws Throwable { BIFReader bIFReader0 = new BIFReader ( ) ; String string0 = bIFReader0 . getFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return m_sFile ; }
void test6 ( ) throws Throwable { BIFReader bIFReader0 = new BIFReader ( ) ; String string0 = bIFReader0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test8 ( ) throws Throwable { BIFReader bIFReader0 = new BIFReader ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; iIOMetadataNode0 . appendChild ( ( Node ) iIOMetadataNode0 ) ; String string0 = bIFReader0 . getContent ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { String result ; if ( m_Document = = null ) return "" ; try { ( m_Document ) { result = m_Document . getText ( 0 , m_Document . getLength ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; result = null ; } return result ; }
void test4 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; String string0 = marginCalculator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test5 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; BayesNet bayesNet0 = new BayesNet ( ) ; MarginCalculator . JunctionTreeSeparator marginCalculator_JunctionTreeSeparator0 = marginCalculator0 . new JunctionTreeSeparator ( ( Set ) treeSet0 , bayesNet0 , ( MarginCalculator . JunctionTreeNode ) null , ( MarginCalculator . JunctionTreeNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test7 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; MarginCalculator . JunctionTreeNode [ ] marginCalculator_JunctionTreeNodeArray0 = new MarginCalculator . JunctionTreeNode [ 3 ] ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; BayesNet bayesNet0 = new BayesNet ( ) ; MarginCalculator . JunctionTreeSeparator marginCalculator_JunctionTreeSeparator0 = marginCalculator0 . new JunctionTreeSeparator ( ( Set ) treeSet0 , bayesNet0 , ( MarginCalculator . JunctionTreeNode ) null , ( MarginCalculator . JunctionTreeNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initialize ( ) throws Exception { m_RunNumber = getRunLower ( ) ; m_DatasetNumber = 0 ; m_PropertyNumber = 0 ; m_CurrentProperty = - 1 ; m_CurrentInstances = null ; m_Finished = false ; if ( m_UsePropertyIterator & & ( m_PropertyArray = = null ) ) { throw new Exception ( "Null array for property iterator" ) ; } if ( getRunLower ( ) > getRunUpper ( ) ) { throw new Exception ( "Lower run number is greater than upper run number" ) ; } if ( getDatasets ( ) . size ( ) = = 0 ) { throw new Exception ( "No datasets have been specified" ) ; } if ( m_ResultProducer = = null ) { throw new Exception ( "No ResultProducer set" ) ; } if ( m_ResultListener = = null ) { throw new Exception ( "No ResultListener set" ) ; } / / if ( m_UsePropertyIterator & & ( m_PropertyArray ! = null ) ) { determineAdditionalResultMeasures ( ) ; / / } m_ResultProducer . setResultListener ( m_ResultListener ) ; m_ResultProducer . setAdditionalMeasures ( m_AdditionalMeasures ) ; m_ResultProducer . preProcess ( ) ; / / constrain the additional measures to be only those allowable / / by the ResultListener String [ ] columnConstraints = m_ResultListener . determineColumnConstraints ( m_ResultProducer ) ; if ( columnConstraints ! = null ) { m_ResultProducer . setAdditionalMeasures ( columnConstraints ) ; } }
void test8 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; BayesNet bayesNet0 = new BayesNet ( ) ; MarginCalculator . JunctionTreeSeparator marginCalculator_JunctionTreeSeparator0 = marginCalculator0 . new JunctionTreeSeparator ( ( Set ) treeSet0 , bayesNet0 , ( MarginCalculator . JunctionTreeNode ) null , ( MarginCalculator . JunctionTreeNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JunctionTreeNode [ ] getJunctionTree ( Set [ ] cliques , Set [ ] separators , int [ ] parentCliques , int [ ] order , BayesNet bayesNet ) { int nNodes = order . length ; JunctionTreeNode root = null ; JunctionTreeNode [ ] jtns = new JunctionTreeNode [ nNodes ] ; boolean [ ] bDone = new boolean [ nNodes ] ; / / create junction tree nodes for ( int i = 0 ; i < nNodes ; i + + ) { int iNode = order [ i ] ; if ( cliques [ iNode ] ! = null ) { jtns [ iNode ] = new JunctionTreeNode ( cliques [ iNode ] , bayesNet , bDone ) ; } } / / create junction tree separators for ( int i = 0 ; i < nNodes ; i + + ) { int iNode = order [ i ] ; if ( cliques [ iNode ] ! = null ) { JunctionTreeNode parent = null ; if ( parentCliques [ iNode ] > 0 ) { parent = jtns [ parentCliques [ iNode ] ] ; JunctionTreeSeparator jts = new JunctionTreeSeparator ( separators [ iNode ] , bayesNet , jtns [ iNode ] , parent ) ; jtns [ iNode ] . setParentSeparator ( jts ) ; jtns [ parentCliques [ iNode ] ] . addChildClique ( jtns [ iNode ] ) ; } else { root = jtns [ iNode ] ; } } } return jtns ; }
void test11 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; int [ ] intArray0 = new int [ 10 ] ; int int0 = marginCalculator0 . getCPT ( intArray0 , 0 , intArray0 , intArray0 , ( BayesNet ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCPT ( int [ ] nodeSet , int nNodes , int [ ] values , int [ ] order , BayesNet bayesNet ) { int iCPTnew = 0 ; for ( int iNode = 0 ; iNode < nNodes ; iNode + + ) { int nNode = nodeSet [ iNode ] ; iCPTnew = iCPTnew * bayesNet . getCardinality ( nNode ) ; iCPTnew + = values [ order [ nNode ] ] ; } return iCPTnew ; }
void test14 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; int [ ] intArray0 = new int [ 3 ] ; Set < Integer > [ ] setArray0 = ( Set < Integer > [ ] ) Array . newInstance ( Set . class , 3 ) ; Environment environment0 = Environment . getSystemWide ( ) ; Set < String > set0 = environment0 . getVariableNames ( ) ; setArray0 [ 0 ] = set0 ; int [ ] intArray1 = marginCalculator0 . getCliqueTree ( intArray0 , ( Set [ ] ) setArray0 , ( Set [ ] ) setArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getCliqueTree ( int [ ] order , Set [ ] cliques , Set [ ] separators ) { int nNodes = order . length ; int [ ] parentCliques = new int [ nNodes ] ; / / for ( int i = nNodes - 1 ; i > = 0 ; i - - ) { for ( int i = 0 ; i < nNodes ; i + + ) { int iNode = order [ i ] ; parentCliques [ iNode ] = - 1 ; if ( cliques [ iNode ] ! = null & & separators [ iNode ] . size ( ) > 0 ) { / / for ( int j = nNodes - 1 ; j > i ; j - - ) { for ( int j = 0 ; j < nNodes ; j + + ) { int iNode2 = order [ j ] ; if ( iNode ! = iNode2 & & cliques [ iNode2 ] ! = null & & cliques [ iNode2 ] . containsAll ( separators [ iNode ] ) ) { parentCliques [ iNode ] = iNode2 ; j = i ; j = 0 ; j = nNodes ; } } } } return parentCliques ; }
void test15 ( ) throws Throwable { MarginCalculator marginCalculator0 = new MarginCalculator ( ) ; int [ ] intArray0 = new int [ 10 ] ; boolean [ ] [ ] booleanArray0 = new boolean [ 9 ] [ 4 ] ; Set < Object > [ ] setArray0 = marginCalculator0 . getCliques ( intArray0 , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set [ ] getCliques ( int [ ] order , boolean [ ] [ ] bAdjacencyMatrix ) throws Exception { int nNodes = bAdjacencyMatrix . length ; Set [ ] cliques = new HashSet [ nNodes ] ; / / int [ ] inverseOrder = new int [ nNodes ] ; / / for ( int iNode = 0 ; iNode < nNodes ; iNode + + ) { / / inverseOrder [ order [ iNode ] ] = iNode ; / / } / / consult nodes in reverse order for ( int i = nNodes - 1 ; i > = 0 ; i - - ) { int iNode = order [ i ] ; if ( iNode = = 22 ) { int h = 3 ; h + + ; } Set clique = new HashSet ( ) ; clique . add ( iNode ) ; for ( int j = 0 ; j < i ; j + + ) { int iNode2 = order [ j ] ; if ( bAdjacencyMatrix [ iNode ] [ iNode2 ] ) { clique . add ( iNode2 ) ; } } / / for ( int iNode2 = 0 ; iNode2 < nNodes ; iNode2 + + ) { / / if ( bAdjacencyMatrix [ iNode ] [ iNode2 ] & & inverseOrder [ iNode2 ] < inverseOrder [ iNode ] ) { / / clique . add ( iNode2 ) ; / / } / / } cliques [ iNode ] = clique ; } for ( int iNode = 0 ; iNode < nNodes ; iNode + + ) { for ( int iNode2 = 0 ; iNode2 < nNodes ; iNode2 + + ) { if ( iNode ! = iNode2 & & cliques [ iNode ] ! = null & & cliques [ iNode2 ] ! = null & & cliques [ iNode ] . containsAll ( cliques [ iNode2 ] ) ) { cliques [ iNode2 ] = null ; } } } / / sanity check if ( m_debug ) { int [ ] nNodeSet = new int [ nNodes ] ; for ( int iNode = 0 ; iNode < nNodes ; iNode + + ) { if ( cliques [ iNode ] ! = null ) { Iterator it = cliques [ iNode ] . iterator ( ) ; int k = 0 ; while ( it . hasNext ( ) ) { nNodeSet [ k + + ] = ( Integer ) it . next ( ) ; } for ( int i = 0 ; i < cliques [ iNode ] . size ( ) ; i + + ) { for ( int j = 0 ; j < cliques [ iNode ] . size ( ) ; j + + ) { if ( i ! = j & & ! bAdjacencyMatrix [ nNodeSet [ i ] ] [ nNodeSet [ j ] ] ) { throw new Exception ( "Non clique" + i + " " + j ) ; } } } } } } return cliques ; }
void test0 ( ) throws Throwable { ADNode aDNode0 = new ADNode ( ) ; TechnicalInformation technicalInformation0 = aDNode0 . getTechnicalInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBibTex ( ) { String result ; Field field ; Vector < Field > list ; int i ; String value ; result = "@" + getType ( ) + " { " + getID ( ) + "" ; / / sort the fields list = new Vector < Field > ( ) ; Enumeration < Field > enm = fields ( ) ; while ( enm . hasMoreElements ( ) ) list . add ( enm . nextElement ( ) ) ; Collections . sort ( list ) ; / / list field = value pairs for ( i = 0 ; i < list . size ( ) ; i + + ) { field = ( Field ) list . get ( i ) ; if ( ! exists ( field ) ) continue ; value = getValue ( field ) ; value = value . replaceAll ( "\\~" , "\\\\~" ) ; result + = " , \n " + field + " = { " + value + " } " ; } result + = "\n } " ; / / additional informations ? Enumeration < TechnicalInformation > enm2 = additional ( ) ; while ( enm2 . hasMoreElements ( ) ) { result + = "\n\n" + ( ( TechnicalInformation ) enm2 . nextElement ( ) ) . toBibTex ( ) ; } return result ; }
void test1 ( ) throws Throwable { ADNode aDNode0 = new ADNode ( ) ; String string0 = aDNode0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "" , ( List < String > ) null ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "" , arrayList0 , 0 ) ; ADNode aDNode0 = ADNode . makeADTree ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void getCounts ( int [ ] nCounts , int [ ] nNodes , int [ ] nOffsets , int iNode , int iOffset , boolean bSubstract ) { / / for ( int iNode2 = 0 ; iNode2 < nCounts . length ; iNode2 + + ) { / / System . out . print ( nCounts [ iNode2 ] + " " ) ; / / } / / System . out . println ( ) ; if ( iNode > = nNodes . length ) { if ( bSubstract ) { nCounts [ iOffset ] - = m_nCount ; } else { nCounts [ iOffset ] + = m_nCount ; } return ; } else { if ( m_VaryNodes ! = null ) { m_VaryNodes [ nNodes [ iNode ] - m_nStartNode ] . getCounts ( nCounts , nNodes , nOffsets , iNode , iOffset , this , bSubstract ) ; } else { for ( int iInstance = 0 ; iInstance < m_Instances . length ; iInstance + + ) { int iOffset2 = iOffset ; Instance instance = m_Instances [ iInstance ] ; for ( int iNode2 = iNode ; iNode2 < nNodes . length ; iNode2 + + ) { iOffset2 = iOffset2 + nOffsets [ iNode2 ] * ( int ) instance . value ( nNodes [ iNode2 ] ) ; } if ( bSubstract ) { nCounts [ iOffset2 ] - - ; } else { nCounts [ iOffset2 ] + + ; } } } } }
void test4 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Attribute attribute0 = new Attribute ( "BNlv%O `dB ( " , ( List < String > ) null ) ; arrayList0 . add ( attribute0 ) ; Instances instances0 = new Instances ( "BNlv%O `dB ( " , arrayList0 , 0 ) ; attribute0 . addStringValue ( "BNlv%O `dB ( " ) ; ADNode aDNode0 = ADNode . makeADTree ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ADNode makeADTree ( int iNode , FastVector nRecords , Instances instances ) { ADNode _ADNode = new ADNode ( ) ; _ADNode . m_nCount = nRecords . size ( ) ; _ADNode . m_nStartNode = iNode ; if ( nRecords . size ( ) < MIN_RECORD_SIZE ) { _ADNode . m_Instances = new Instance [ nRecords . size ( ) ] ; for ( int iInstance = 0 ; iInstance < nRecords . size ( ) ; iInstance + + ) { _ADNode . m_Instances [ iInstance ] = instances . instance ( ( ( Integer ) nRecords . elementAt ( iInstance ) ) . intValue ( ) ) ; } } else { _ADNode . m_VaryNodes = new VaryNode [ instances . numAttributes ( ) - iNode ] ; for ( int iNode2 = iNode ; iNode2 < instances . numAttributes ( ) ; iNode2 + + ) { _ADNode . m_VaryNodes [ iNode2 - iNode ] = makeVaryNode ( iNode2 , nRecords , instances ) ; } } return _ADNode ; }
void test5 ( ) throws Throwable { ADNode aDNode0 = new ADNode ( ) ; int [ ] intArray0 = new int [ 8 ] ; aDNode0 . getCounts ( intArray0 , intArray0 , intArray0 , 19 , 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void getCounts ( int [ ] nCounts , int [ ] nNodes , int [ ] nOffsets , int iNode , int iOffset , boolean bSubstract ) { / / for ( int iNode2 = 0 ; iNode2 < nCounts . length ; iNode2 + + ) { / / System . out . print ( nCounts [ iNode2 ] + " " ) ; / / } / / System . out . println ( ) ; if ( iNode > = nNodes . length ) { if ( bSubstract ) { nCounts [ iOffset ] - = m_nCount ; } else { nCounts [ iOffset ] + = m_nCount ; } return ; } else { if ( m_VaryNodes ! = null ) { m_VaryNodes [ nNodes [ iNode ] - m_nStartNode ] . getCounts ( nCounts , nNodes , nOffsets , iNode , iOffset , this , bSubstract ) ; } else { for ( int iInstance = 0 ; iInstance < m_Instances . length ; iInstance + + ) { int iOffset2 = iOffset ; Instance instance = m_Instances [ iInstance ] ; for ( int iNode2 = iNode ; iNode2 < nNodes . length ; iNode2 + + ) { iOffset2 = iOffset2 + nOffsets [ iNode2 ] * ( int ) instance . value ( nNodes [ iNode2 ] ) ; } if ( bSubstract ) { nCounts [ iOffset2 ] - - ; } else { nCounts [ iOffset2 ] + + ; } } } } }
void test7 ( ) throws Throwable { ADNode aDNode0 = new ADNode ( ) ; aDNode0 . m_nStartNode = 56 ; aDNode0 . print ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test9 ( ) throws Throwable { ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "Ti ! uX = N`j ; H [ , " , arrayList0 , 0 ) ; ADNode aDNode0 = ADNode . makeADTree ( instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void print ( Object msg ) { if ( ! getSilent ( ) ) System . out . print ( msg ) ; }
void test0 ( ) throws Throwable { BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator ( ) ; String [ ] stringArray0 = bayesNetGenerator0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOptions ( String [ ] options ) throws Exception { setDebug ( Utils . getFlag ( 'D' , options ) ) ; }
void test1 ( ) throws Throwable { BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator ( ) ; String string0 = bayesNetGenerator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "Bayes Network learning using various search algorithms and quality measures . \nBase class for a Bayes Network classifier . Provides datastructures ( network structure , conditional probability distributions , etc . ) and facilities common to Bayes Network learning algorithms like K2 and B . \n\nFor more information see : \n\nhttp : / / www . cs . waikato . ac . nz / ~remco / weka . pdf" ; AbstractClassifier . runClassifier ( ( Classifier ) bayesNetGenerator0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void runClassifier ( Classifier classifier , String [ ] options ) { try { System . out . println ( Evaluation . evaluateModel ( classifier , options ) ) ; } catch ( Exception e ) { if ( ( ( e . getMessage ( ) ! = null ) & & ( e . getMessage ( ) . indexOf ( "General options" ) = = - 1 ) ) | | ( e . getMessage ( ) = = null ) ) e . printStackTrace ( ) ; else System . err . println ( e . getMessage ( ) ) ; } }
void test3 ( ) throws Throwable { BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator ( ) ; bayesNetGenerator0 . generateRandomNetworkStructure ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void generateRandomNetworkStructure ( int nNodes , int nArcs ) throws Exception { if ( nArcs < nNodes - 1 ) { throw new Exception ( "Number of arcs should be at least ( nNodes - 1 ) = " + ( nNodes - 1 ) + " instead of " + nArcs ) ; } if ( nArcs > nNodes * ( nNodes - 1 ) / 2 ) { throw new Exception ( "Number of arcs should be at most nNodes * ( nNodes - 1 ) / 2 = " + ( nNodes * ( nNodes - 1 ) / 2 ) + " instead of " + nArcs ) ; } if ( nArcs = = 0 ) { return ; } / / deal with patalogical case for nNodes = 1 / / first generate tree connecting all nodes generateTree ( nNodes ) ; / / The tree contains nNodes - 1 arcs , so there are / / nArcs - ( nNodes - 1 ) to add at random . / / All arcs point from lower to higher ordered nodes / / so that acyclicity is ensured . for ( int iArc = nNodes - 1 ; iArc < nArcs ; iArc + + ) { boolean bDone = false ; while ( ! bDone ) { int nNode1 = random . nextInt ( nNodes ) ; int nNode2 = random . nextInt ( nNodes ) ; if ( nNode1 = = nNode2 ) { nNode2 = ( nNode1 + 1 ) % nNodes ; } if ( nNode2 < nNode1 ) { int h = nNode1 ; nNode1 = nNode2 ; nNode2 = h ; } if ( ! m_ParentSets [ nNode2 ] . contains ( nNode1 ) ) { m_ParentSets [ nNode2 ] . addParent ( nNode1 , m_Instances ) ; bDone = true ; } } } }
void test11 ( ) throws Throwable { BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; bayesNetGenerator0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOptions ( String [ ] options ) throws Exception { setDebug ( Utils . getFlag ( 'D' , options ) ) ; }
void test12 ( ) throws Throwable { M5Rules m5Rules0 = new M5Rules ( ) ; BayesNetGenerator . printOptions ( ( OptionHandler ) m5Rules0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; SimpleEstimator simpleEstimator0 = ( SimpleEstimator ) bayesNet0 . getEstimator ( ) ; String string0 = simpleEstimator0 . alphaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAlpha ( ) { return m_fAlpha ; }
void test2 ( ) throws Throwable { BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator ( ) ; bayesNetEstimator0 . setAlpha ( 1 . 0E - 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAlpha ( ) { return m_fAlpha ; }
void test4 ( ) throws Throwable { BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator ( ) ; String string0 = bayesNetEstimator0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAlpha ( ) { return m_fAlpha ; }
void test5 ( ) throws Throwable { BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator ( ) ; Enumeration < Object > enumeration0 = bayesNetEstimator0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test7 ( ) throws Throwable { BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator ( ) ; double double0 = bayesNetEstimator0 . getAlpha ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAlpha ( ) { return m_fAlpha ; }
void test9 ( ) throws Throwable { BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator ( ) ; String string0 = bayesNetEstimator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAlpha ( ) { return m_fAlpha ; }
void test11 ( ) throws Throwable { BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator ( ) ; String [ ] stringArray0 = bayesNetEstimator0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAlpha ( ) { return m_fAlpha ; }
void test0 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 0 , 2 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( double value , double weight ) ; / * * * Returns the quantile for the given percentage * * @param value the value at which to evaluate * @return the quantile * / double predictQuantile ( double quantile ) ; }
void test1 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test2 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 0 , 15 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test3 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 0 , 15 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test4 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 0 , 2 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test5 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test6 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 1527 , 1 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test7 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 8 , 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { BMAEstimator bMAEstimator0 = new BMAEstimator ( ) ; String string0 = bMAEstimator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test1 ( ) throws Throwable { BMAEstimator bMAEstimator0 = new BMAEstimator ( ) ; String [ ] stringArray0 = bMAEstimator0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test2 ( ) throws Throwable { BMAEstimator bMAEstimator0 = new BMAEstimator ( ) ; String string0 = bMAEstimator0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test4 ( ) throws Throwable { BMAEstimator bMAEstimator0 = new BMAEstimator ( ) ; Enumeration < Object > enumeration0 = bMAEstimator0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test5 ( ) throws Throwable { BMAEstimator bMAEstimator0 = new BMAEstimator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test2 ( ) throws Throwable { MultiNomialBMAEstimator multiNomialBMAEstimator0 = new MultiNomialBMAEstimator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test3 ( ) throws Throwable { MultiNomialBMAEstimator multiNomialBMAEstimator0 = new MultiNomialBMAEstimator ( ) ; String [ ] stringArray0 = multiNomialBMAEstimator0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test4 ( ) throws Throwable { MultiNomialBMAEstimator multiNomialBMAEstimator0 = new MultiNomialBMAEstimator ( ) ; String string0 = multiNomialBMAEstimator0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test5 ( ) throws Throwable { MultiNomialBMAEstimator multiNomialBMAEstimator0 = new MultiNomialBMAEstimator ( ) ; String string0 = multiNomialBMAEstimator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test6 ( ) throws Throwable { MultiNomialBMAEstimator multiNomialBMAEstimator0 = new MultiNomialBMAEstimator ( ) ; Enumeration < Object > enumeration0 = multiNomialBMAEstimator0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseK2Prior ( ) { return m_bUseK2Prior ; }
void test0 ( ) throws Throwable { DiscreteEstimatorBayes discreteEstimatorBayes0 = new DiscreteEstimatorBayes ( 0 , 0 ) ; DiscreteEstimatorFullBayes discreteEstimatorFullBayes0 = new DiscreteEstimatorFullBayes ( 711 , ( double ) 0 , ( double ) 0 , discreteEstimatorBayes0 , discreteEstimatorBayes0 , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test0 ( ) throws Throwable { SimpleEstimator simpleEstimator0 = new SimpleEstimator ( ) ; String string0 = simpleEstimator0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { SimpleEstimator simpleEstimator0 = new SimpleEstimator ( ) ; String string0 = simpleEstimator0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test0 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; Enumeration < Object > enumeration0 = searchAlgorithm0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test1 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; String string0 = searchAlgorithm0 . markovBlanketClassifierTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test2 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; String string0 = searchAlgorithm0 . maxNrOfParentsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test3 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; String [ ] stringArray0 = new String [ 6 ] ; searchAlgorithm0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test4 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void buildStructure ( ) throws Exception { m_SearchAlgorithm . buildStructure ( this , m_Instances ) ; }
void test5 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; String string0 = searchAlgorithm0 . initAsNaiveBayesTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test6 ( ) throws Throwable { BayesNet bayesNet0 = new BayesNet ( ) ; K2 k2_0 = ( K2 ) bayesNet0 . getSearchAlgorithm ( ) ; k2_0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNrOfParents ( ) { return m_nMaxNrOfParents ; }
void test7 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 15 ) ; searchAlgorithm0 . buildStructure ( ( BayesNet ) null , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test8 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; String string0 = searchAlgorithm0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test9 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; String string0 = searchAlgorithm0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test11 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; BayesNet bayesNet0 = new BayesNet ( ) ; boolean boolean0 = searchAlgorithm0 . addArcMakesSense ( bayesNet0 , ( Instances ) null , 1541 , 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test13 ( ) throws Throwable { SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm ( ) ; BayesNet bayesNet0 = new BayesNet ( ) ; boolean boolean0 = searchAlgorithm0 . reverseArcMakesSense ( bayesNet0 , ( Instances ) null , 1541 , 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test0 ( ) throws Throwable { FromFile fromFile0 = new FromFile ( ) ; String string0 = fromFile0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { FromFile fromFile0 = new FromFile ( ) ; String [ ] stringArray0 = fromFile0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBIFFile ( ) { if ( m_otherBayesNet ! = null ) { return m_otherBayesNet . getFileName ( ) ; } return "" ; }
void test2 ( ) throws Throwable { FromFile fromFile0 = new FromFile ( ) ; String string0 = fromFile0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test3 ( ) throws Throwable { FromFile fromFile0 = new FromFile ( ) ; Enumeration < Object > enumeration0 = fromFile0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test0 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; String string0 = naiveBayes0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; String string0 = naiveBayes0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { NaiveBayes naiveBayes0 = new NaiveBayes ( ) ; BayesNet bayesNet0 = new BayesNet ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "SearchAlgorithm\n" , arrayList0 , 1811 ) ; naiveBayes0 . buildStructure ( bayesNet0 , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double measureMissingArcs ( ) { if ( m_otherBayesNet ! = null ) { return m_otherBayesNet . missingArcs ( this ) ; } return 0 ; }
void test0 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; k2_0 . setOptions ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRandomOrder ( ) { return m_bRandomOrder ; }
void test1 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; int int0 = k2_0 . getMaxNrOfParents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNrOfParents ( ) { return m_nMaxNrOfParents ; }
void test2 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; String string0 = k2_0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test3 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; String string0 = k2_0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; String string0 = k2_0 . randomOrderTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String randomOrderTipText ( ) { return "When set to true , the order of the nodes in the network is random . " + " Default random order is false and the order" + " of the nodes in the dataset is used . " + " In any case , when the network was initialized as Naive Bayes Network , the" + " class variable is first in the ordering though . " ; }
void test5 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; boolean boolean0 = k2_0 . getInitAsNaiveBayes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInitAsNaiveBayes ( ) { return m_bInitAsNaiveBayes ; }
void test6 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; k2_0 . setInitAsNaiveBayes ( false ) ; String [ ] stringArray0 = k2_0 . getOptions ( ) ; k2_0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInitAsNaiveBayes ( ) { return m_bInitAsNaiveBayes ; }
void test7 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; Enumeration < Object > enumeration0 = k2_0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRandomOrder ( ) { return m_bRandomOrder ; }
void test8 ( ) throws Throwable { K2 k2_0 = new K2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRandomOrder ( ) { return m_bRandomOrder ; }
void test0 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String string0 = simulatedAnnealing0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String string0 = simulatedAnnealing0 . TStartTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String TStartTipText ( ) { return "Sets the start temperature of the simulated annealing search . " + "The start temperature determines the probability that a step in the 'wrong' direction in the " + "search space is accepted . The higher the temperature , the higher the probability of acceptance . " ; }
void test2 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String [ ] stringArray0 = simulatedAnnealing0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getTStart ( ) { return m_fTStart ; }
void test3 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String string0 = simulatedAnnealing0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test4 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String string0 = simulatedAnnealing0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String seedTipText ( ) { return "the random number seed for shuffling the dataset . If seed is negative , shuffling will not be performed . " ; }
void test5 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String string0 = simulatedAnnealing0 . deltaTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String deltaTipText ( ) { return "Iteratively decrease support by this factor . Reduces support " + "until min support is reached or required number of rules has been " + "generated . " ; }
void test6 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String string0 = simulatedAnnealing0 . runsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String runsTipText ( ) { return "Sets the number of generations of Bayes network structure populations . " ; }
void test7 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; Enumeration < Object > enumeration0 = simulatedAnnealing0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRuns ( ) { return m_nRuns ; }
void test8 ( ) throws Throwable { SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "Sets the factor with which the temperature ( and thus the acceptance probability of steps in the wrong direction in the search space ) is decreased in each iteration . " ; simulatedAnnealing0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDelta ( ) { return m_delta ; }
void test0 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; GeneticSearch . BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0 . new BayesNetRepresentation ( 0 ) ; String string0 = geneticSearch_BayesNetRepresentation0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String string0 = geneticSearch0 . runsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String runsTipText ( ) { return "Sets the number of generations of Bayes network structure populations . " ; }
void test3 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String string0 = geneticSearch0 . descendantPopulationSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String descendantPopulationSizeTipText ( ) { return "Sets the size of the population of descendants that is created each generation . " ; }
void test4 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "jt`O + NO ! rwH" ; stringArray0 [ 2 ] = "" ; geneticSearch0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRuns ( ) { return m_nRuns ; }
void test5 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String string0 = geneticSearch0 . useCrossOverTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useCrossOverTipText ( ) { return "Determines whether cross - over is allowed . Cross over combined the bit " + "representations of network structure by taking a random first k bits of one" + "and adding the remainder of the other . At least one of mutation or cross - over " + "should be used . " ; }
void test6 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String string0 = geneticSearch0 . useTournamentSelectionTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useTournamentSelectionTipText ( ) { return "Determines the method of selecting a population . When set to true , tournament " + "selection is used ( pick two at random and the highest is allowed to continue ) . " + "When set to false , the top scoring network structures are selected . " ; }
void test7 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String string0 = geneticSearch0 . useMutationTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useMutationTipText ( ) { return "Determines whether mutation is allowed . Mutation flips a bit in the bit " + "representation of the network structure . At least one of mutation or cross - over " + "should be used . " ; }
void test8 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String [ ] stringArray0 = geneticSearch0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPopulationSize ( ) { return m_nPopulationSize ; }
void test9 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; String string0 = geneticSearch0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String seedTipText ( ) { return "the random number seed for shuffling the dataset . If seed is negative , shuffling will not be performed . " ; }
void test10 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; GeneticSearch . BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0 . new BayesNetRepresentation ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object copy ( Object obj ) { SerializedObject so ; Object result ; try { so = new SerializedObject ( obj ) ; result = so . getObject ( ) ; } catch ( Exception e ) { result = null ; e . printStackTrace ( ) ; } return result ; }
void test12 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; GeneticSearch . BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0 . new BayesNetRepresentation ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test13 ( ) throws Throwable { GeneticSearch geneticSearch0 = new GeneticSearch ( ) ; Enumeration < Object > enumeration0 = geneticSearch0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDescendantPopulationSize ( ) { return m_nDescendantPopulationSize ; }
void test0 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; SelectedTag selectedTag0 = globalScoreSearchAlgorithm0 . getCVType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = "DD Conditional Estimator . " + m_Estimators . length + " sub - estimators : \n" ; for ( int i = 0 ; i < m_Estimators . length ; i + + ) { result + = "Sub - estimator " + i + " : " + m_Estimators [ i ] ; } return result ; }
void test1 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; String string0 = globalScoreSearchAlgorithm0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test2 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; globalScoreSearchAlgorithm0 . setMarkovBlanketClassifier ( true ) ; globalScoreSearchAlgorithm0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMarkovBlanketClassifier ( ) { return m_bMarkovBlanketClassifier ; }
void test3 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; String string0 = globalScoreSearchAlgorithm0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test4 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; globalScoreSearchAlgorithm0 . markovBlanketClassifierTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseProb ( ) { return m_bUseProb ; }
void test5 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; String string0 = globalScoreSearchAlgorithm0 . useProbTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useProbTipText ( ) { return "If set to true , the probability of the class if returned in the estimate of the " + "accuracy . If set to false , the accuracy estimate is only increased if the classifier returns " + "exactly the correct class . " ; }
void test6 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; String string0 = globalScoreSearchAlgorithm0 . CVTypeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String CVTypeTipText ( ) { return "Select cross validation strategy to be used in searching for networks . " + "LOO - CV = Leave one out cross validation\n" + "k - Fold - CV = k fold cross validation\n" + "Cumulative - CV = cumulative cross validation . " ; }
void test8 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double calcScore ( BayesNet bayesNet ) throws Exception { switch ( m_nCVType ) { case LOOCV : return leaveOneOutCV ( bayesNet ) ; case CUMCV : return cumulativeCV ( bayesNet ) ; case KFOLDCV : return kFoldCV ( bayesNet , m_nNrOfFolds ) ; default : throw new Exception ( "Unrecognized cross validation type encountered : " + m_nCVType ) ; } }
void test10 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double accuracyIncrease ( Instance instance ) throws Exception { if ( m_bUseProb ) { double [ ] fProb = m_BayesNet . distributionForInstance ( instance ) ; return fProb [ ( int ) instance . classValue ( ) ] * instance . weight ( ) ; } else { if ( m_BayesNet . classifyInstance ( instance ) = = instance . classValue ( ) ) { return instance . weight ( ) ; } } return 0 ; }
void test12 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; Vote vote0 = new Vote ( ) ; SelectedTag selectedTag0 = vote0 . getCombinationRule ( ) ; globalScoreSearchAlgorithm0 . setCVType ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCVType ( SelectedTag newCVType ) { if ( newCVType . getTags ( ) = = TAGS_CV_TYPE ) { m_nCVType = newCVType . getSelectedTag ( ) . getID ( ) ; } }
void test13 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; Enumeration < Object > enumeration0 = globalScoreSearchAlgorithm0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration listOptions ( ) { Vector newVector = new Vector ( 1 ) ; newVector . addElement ( new Option ( "\tIf set , estimator is run in debug mode and\n" + "\tmay output additional info to the console" , "D" , 0 , " - D" ) ) ; return newVector . elements ( ) ; }
void test14 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOptions ( String [ ] options ) throws Exception { setDebug ( Utils . getFlag ( 'D' , options ) ) ; }
void test15 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseProb ( ) { return m_bUseProb ; }
void test16 ( ) throws Throwable { GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getOptions ( ) { String [ ] options ; if ( getDebug ( ) ) { options = new String [ 1 ] ; options [ 0 ] = " - D" ; } else { options = new String [ 0 ] ; } return options ; }
void test0 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; String string0 = repeatedHillClimber0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; String [ ] stringArray0 = repeatedHillClimber0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSeed ( ) { return m_Seed ; }
void test2 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; String string0 = repeatedHillClimber0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test3 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; String string0 = repeatedHillClimber0 . runsTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String runsTipText ( ) { return "Sets the number of generations of Bayes network structure populations . " ; }
void test4 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; String string0 = repeatedHillClimber0 . seedTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String seedTipText ( ) { return "the random number seed for shuffling the dataset . If seed is negative , shuffling will not be performed . " ; }
void test6 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; Enumeration < Object > enumeration0 = repeatedHillClimber0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRuns ( ) { return m_nRuns ; }
void test7 ( ) throws Throwable { RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "Sets the number of times hill climbing is performed . " ; repeatedHillClimber0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRuns ( ) { return m_nRuns ; }
void test0 ( ) throws Throwable { TAN tAN0 = new TAN ( ) ; String string0 = tAN0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test1 ( ) throws Throwable { TAN tAN0 = new TAN ( ) ; String string0 = tAN0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { TAN tAN0 = new TAN ( ) ; String [ ] stringArray0 = tAN0 . getOptions ( ) ; tAN0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String CVTypeTipText ( ) { return "Select cross validation strategy to be used in searching for networks . " + "LOO - CV = Leave one out cross validation\n" + "k - Fold - CV = k fold cross validation\n" + "Cumulative - CV = cumulative cross validation . " ; }
void test3 ( ) throws Throwable { TAN tAN0 = new TAN ( ) ; Enumeration < Object > enumeration0 = tAN0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" / * @pure@ * / boolean hasMoreElements ( ) { if ( m_Counter < m_Vector . size ( ) ) { return true ; } return false ; }
void test0 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 132 ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . getOptimalOperation ( ( BayesNet ) null , instances0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseArcReversal ( ) { return m_bUseArcReversal ; }
void test1 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( ) ; String string0 = hillClimber_Operation0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test2 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( 3 , 3 , 3 ) ; boolean boolean0 = hillClimber_Operation0 . equals ( ( HillClimber . Operation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test3 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; String string0 = hillClimber0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test4 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "\nMatlab - Format\n" ; stringArray0 [ 1 ] = "\nMatlab - Format\n" ; stringArray0 [ 2 ] = "\nMatlab - Format\n" ; stringArray0 [ 3 ] = "\nMatlab - Format\n" ; stringArray0 [ 4 ] = "\nMatlab - Format\n" ; stringArray0 [ 5 ] = "\nMatlab - Format\n" ; stringArray0 [ 6 ] = "\nMatlab - Format\n" ; stringArray0 [ 7 ] = "\nMatlab - Format\n" ; stringArray0 [ 8 ] = "\nMatlab - Format\n" ; stringArray0 [ 9 ] = "\nMatlab - Format\n" ; hillClimber0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNrOfParents ( ) { return m_nMaxNrOfParents ; }
void test5 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; int int0 = hillClimber0 . getMaxNrOfParents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNrOfParents ( ) { return m_nMaxNrOfParents ; }
void test6 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( ) ; boolean boolean0 = hillClimber0 . isNotTabu ( hillClimber_Operation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotTabu ( Operation oOperation ) { for ( int iTabu = 0 ; iTabu < m_nTabuList ; iTabu + + ) { if ( oOperation . equals ( m_oTabuList [ iTabu ] ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; String string0 = hillClimber0 . useArcReversalTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String useArcReversalTipText ( ) { return "When set to true , the arc reversal operation is used in the search . " ; }
void test9 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; String string0 = hillClimber0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test11 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( 32 , 32 , 32 ) ; boolean boolean0 = hillClimber_Operation0 . equals ( hillClimber_Operation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test12 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( 32 , 32 , 32 ) ; HillClimber . Operation hillClimber_Operation1 = hillClimber0 . new Operation ( ) ; boolean boolean0 = hillClimber_Operation0 . equals ( hillClimber_Operation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test13 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( 32 , 32 , 32 ) ; HillClimber . Operation hillClimber_Operation1 = hillClimber0 . new Operation ( 32 , 100 , 32 ) ; boolean boolean0 = hillClimber_Operation0 . equals ( hillClimber_Operation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test14 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( ( - 1581 ) , 0 , 0 ) ; HillClimber . Operation hillClimber_Operation1 = hillClimber0 . new Operation ( 0 , 0 , 0 ) ; boolean boolean0 = hillClimber_Operation0 . equals ( hillClimber_Operation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( ( obj = = null ) | | ! ( obj . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return false ; } Estimator cmp = ( Estimator ) obj ; if ( m_Debug ! = cmp . m_Debug ) return false ; if ( m_classValueIndex ! = cmp . m_classValueIndex ) return false ; if ( m_noClass ! = cmp . m_noClass ) return false ; return true ; }
void test15 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseArcReversal ( ) { return m_bUseArcReversal ; }
void test16 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; HillClimber . Operation hillClimber_Operation0 = hillClimber0 . new Operation ( 3 , 3 , 3 ) ; BayesNet bayesNet0 = new BayesNet ( ) ; hillClimber0 . performOperation ( bayesNet0 , ( Instances ) null , hillClimber_Operation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void performOperation ( BayesNet bayesNet , Instances instances , Operation oOperation ) throws Exception { / / perform operation switch ( oOperation . m_nOperation ) { case Operation . OPERATION_ADD : applyArcAddition ( bayesNet , oOperation . m_nHead , oOperation . m_nTail , instances ) ; if ( bayesNet . getDebug ( ) ) { System . out . print ( "Add " + oOperation . m_nHead + " - > " + oOperation . m_nTail ) ; } break ; case Operation . OPERATION_DEL : applyArcDeletion ( bayesNet , oOperation . m_nHead , oOperation . m_nTail , instances ) ; if ( bayesNet . getDebug ( ) ) { System . out . print ( "Del " + oOperation . m_nHead + " - > " + oOperation . m_nTail ) ; } break ; case Operation . OPERATION_REVERSE : applyArcDeletion ( bayesNet , oOperation . m_nHead , oOperation . m_nTail , instances ) ; applyArcAddition ( bayesNet , oOperation . m_nTail , oOperation . m_nHead , instances ) ; if ( bayesNet . getDebug ( ) ) { System . out . print ( "Rev " + oOperation . m_nHead + " - > " + oOperation . m_nTail ) ; } break ; } }
void test18 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; Enumeration < Object > enumeration0 = hillClimber0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseArcReversal ( ) { return m_bUseArcReversal ; }
void test19 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNrOfParents ( ) { return m_nMaxNrOfParents ; }
void test20 ( ) throws Throwable { HillClimber hillClimber0 = new HillClimber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getInitAsNaiveBayes ( ) { return m_bInitAsNaiveBayes ; }
void test0 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ICSSearchAlgorithm . SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0 . new SeparationSet ( ) ; String string0 = iCSSearchAlgorithm_SeparationSet0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test1 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "K1JXJ ) GJ" , arrayList0 , 275 ) ; iCSSearchAlgorithm0 . search ( ( BayesNet ) null , instances0 ) ; iCSSearchAlgorithm0 . setMaxCardinality ( 275 ) ; boolean [ ] [ ] booleanArray0 = new boolean [ 5 ] [ 4 ] ; iCSSearchAlgorithm0 . existsSepSet ( 275 , 275 , 275 , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test2 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; String string0 = iCSSearchAlgorithm0 . maxCardinalityTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test3 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; String string0 = iCSSearchAlgorithm0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test4 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; String string0 = iCSSearchAlgorithm0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test7 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ICSSearchAlgorithm . SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0 . new SeparationSet ( ) ; boolean boolean0 = iCSSearchAlgorithm_SeparationSet0 . contains ( 440 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test8 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ICSSearchAlgorithm . SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0 . new SeparationSet ( ) ; boolean boolean0 = iCSSearchAlgorithm_SeparationSet0 . contains ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test10 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "When set to true ( default ) , the initial network used for structure learning is a Naive Bayes Network , that is , a network with an arrow from the classifier node to each other node . When set to false , an empty network is used as initial network structure" , arrayList0 , 2 ) ; iCSSearchAlgorithm0 . search ( ( BayesNet ) null , instances0 ) ; boolean [ ] [ ] booleanArray0 = new boolean [ 5 ] [ 4 ] ; boolean [ ] booleanArray1 = new boolean [ 6 ] ; booleanArray1 [ 1 ] = true ; booleanArray0 [ 0 ] = booleanArray1 ; booleanArray0 [ 3 ] = booleanArray1 ; booleanArray1 [ 0 ] = true ; arrayList0 . add ( ( Attribute ) null ) ; arrayList0 . add ( ( Attribute ) null ) ; arrayList0 . add ( ( Attribute ) null ) ; booleanArray0 [ 2 ] = booleanArray0 [ 3 ] ; iCSSearchAlgorithm0 . calcArcDirections ( booleanArray0 , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test11 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "When set to true ( default ) , the initial network used for structure learning is a Naive Bayes Network , that is , a network with an arrow from the classifier node to each other node . When set to false , an empty network is used as initial network structure" , arrayList0 , 2 ) ; iCSSearchAlgorithm0 . search ( ( BayesNet ) null , instances0 ) ; boolean [ ] [ ] booleanArray0 = new boolean [ 5 ] [ 4 ] ; boolean [ ] booleanArray1 = new boolean [ 6 ] ; booleanArray1 [ 1 ] = true ; booleanArray0 [ 0 ] = booleanArray1 ; booleanArray0 [ 3 ] = booleanArray1 ; arrayList0 . add ( ( Attribute ) null ) ; arrayList0 . add ( ( Attribute ) null ) ; boolean [ ] booleanArray2 = new boolean [ 17 ] ; booleanArray2 [ 0 ] = true ; arrayList0 . add ( ( Attribute ) null ) ; booleanArray0 [ 2 ] = booleanArray2 ; arrayList0 . add ( ( Attribute ) null ) ; iCSSearchAlgorithm0 . calcArcDirections ( booleanArray0 , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test12 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "When set to true ( default ) , the initial network used for structure learning is a Naive Bayes Network , that is , a network with an arrow from the classifier node to each other node . When set to false , an empty network is used as initial network structure" , arrayList0 , 2 ) ; iCSSearchAlgorithm0 . search ( ( BayesNet ) null , instances0 ) ; boolean [ ] [ ] booleanArray0 = new boolean [ 5 ] [ 4 ] ; boolean [ ] booleanArray1 = new boolean [ 6 ] ; booleanArray1 [ 1 ] = true ; booleanArray0 [ 0 ] = booleanArray1 ; booleanArray0 [ 1 ] = booleanArray1 ; booleanArray1 [ 0 ] = true ; arrayList0 . add ( ( Attribute ) null ) ; arrayList0 . add ( ( Attribute ) null ) ; boolean [ ] [ ] booleanArray2 = new boolean [ 10 ] [ 10 ] ; iCSSearchAlgorithm0 . calcArcDirections ( booleanArray0 , booleanArray2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test13 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; Enumeration < Object > enumeration0 = iCSSearchAlgorithm0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test14 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; iCSSearchAlgorithm0 . setOptions ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test15 ( ) throws Throwable { ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm ( ) ; String [ ] stringArray0 = iCSSearchAlgorithm0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCardinality ( ) { return m_nMaxCardinality ; }
void test0 ( ) throws Throwable { CISearchAlgorithm cISearchAlgorithm0 = new CISearchAlgorithm ( ) ; String string0 = cISearchAlgorithm0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRevision ( ) { return RevisionUtils . extract ( "$Revision : 8034 $" ) ; }
void test1 ( ) throws Throwable { CISearchAlgorithm cISearchAlgorithm0 = new CISearchAlgorithm ( ) ; String string0 = cISearchAlgorithm0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String globalInfo ( ) ; / * * * Returns an enumeration describing the available options . * * @return an enumeration of all the available options . * / Enumeration listOptions ( ) { Vector result = new Vector ( ) ; result . addElement ( new Option ( "\tTurns on output of debugging information . " , "D" , 0 , " - D" ) ) ; return result . elements ( ) ; }
void test0 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; String string0 = iBk0 . globalInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMeanSquared ( ) { return m_MeanSquared ; }
void test1 ( ) throws Throwable { IBk iBk0 = new IBk ( ( - 1095 ) ) ; String [ ] stringArray0 = iBk0 . getOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test2 ( ) throws Throwable { IBk iBk0 = new IBk ( 21 ) ; String string0 = iBk0 . distanceWeightingTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test3 ( ) throws Throwable { IBk iBk0 = new IBk ( 16 ) ; LinearNNSearch linearNNSearch0 = ( LinearNNSearch ) iBk0 . getNearestNeighbourSearchAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test5 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; String string0 = iBk0 . windowSizeTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test6 ( ) throws Throwable { IBk iBk0 = new IBk ( ( - 1095 ) ) ; String string0 = iBk0 . meanSquaredTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test7 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; String string0 = iBk0 . KNNTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test8 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; String string0 = iBk0 . getRevision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test9 ( ) throws Throwable { IBk iBk0 = new IBk ( 43 ) ; Enumeration < Object > enumeration0 = iBk0 . listOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test10 ( ) throws Throwable { IBk iBk0 = new IBk ( 0 ) ; String string0 = iBk0 . nearestNeighbourSearchAlgorithmTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test11 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; int int0 = iBk0 . getWindowSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMeanSquared ( ) { return m_MeanSquared ; }
void test12 ( ) throws Throwable { IBk iBk0 = new IBk ( 16 ) ; String string0 = iBk0 . crossValidateTipText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKNN ( ) { return m_kNN ; }
void test14 ( ) throws Throwable { IBk iBk0 = new IBk ( 21 ) ; SelectedTag selectedTag0 = iBk0 . getDistanceWeighting ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test15 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization ( ) ; SelectedTag selectedTag0 = regressionByDiscretization0 . getEstimatorType ( ) ; iBk0 . setDistanceWeighting ( selectedTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test16 ( ) throws Throwable { IBk iBk0 = new IBk ( 21 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKNN ( ) { return m_kNN ; }
void test17 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKNN ( ) { return m_kNN ; }
void test18 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKNN ( ) { return m_kNN ; }
void test19 ( ) throws Throwable { IBk iBk0 = new IBk ( ( - 1095 ) ) ; Enumeration < Object > enumeration0 = iBk0 . enumerateMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test20 ( ) throws Throwable { IBk iBk0 = new IBk ( 16 ) ; CoverTree coverTree0 = new CoverTree ( ) ; iBk0 . setNearestNeighbourSearchAlgorithm ( ( NearestNeighbourSearch ) coverTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test22 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; double double0 = iBk0 . getMeasure ( "measureKNN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWindowSize ( ) { return m_WindowSize ; }
void test23 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; String string0 = iBk0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMeanSquared ( ) { return m_MeanSquared ; }
void test24 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "P ] PqIjE~3 { e" , arrayList0 , 1 ) ; double [ ] doubleArray0 = new double [ 9 ] ; double [ ] doubleArray1 = iBk0 . makeDistribution ( instances0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test28 ( ) throws Throwable { IBk iBk0 = new IBk ( ) ; double [ ] doubleArray0 = new double [ 9 ] ; iBk0 . pruneToK ( ( Instances ) null , doubleArray0 , 789 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test29 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 753 ) ; double [ ] doubleArray0 = new double [ 10 ] ; Instances instances1 = iBk0 . pruneToK ( instances0 , doubleArray0 , 753 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCrossValidate ( ) { return m_CrossValidate ; }
void test30 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 753 ) ; double [ ] doubleArray0 = new double [ 10 ] ; DenseInstance denseInstance0 = new DenseInstance ( 0 . 0 , doubleArray0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; Instances instances1 = iBk0 . pruneToK ( instances0 , doubleArray0 , 753 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKNN ( ) { return m_kNN ; }
void test31 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 753 ) ; double [ ] doubleArray0 = new double [ 8 ] ; DenseInstance denseInstance0 = new DenseInstance ( 0 . 0 , doubleArray0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; Instances instances1 = iBk0 . pruneToK ( instances0 , doubleArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMeanSquared ( ) { return m_MeanSquared ; }
void test32 ( ) throws Throwable { IBk iBk0 = new IBk ( 753 ) ; ArrayList < Attribute > arrayList0 = new ArrayList < Attribute > ( ) ; Instances instances0 = new Instances ( "" , arrayList0 , 753 ) ; double [ ] doubleArray0 = new double [ 8 ] ; doubleArray0 [ 1 ] = ( double ) 753 ; DenseInstance denseInstance0 = new DenseInstance ( 0 . 0 , doubleArray0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; instances0 . add ( ( Instance ) denseInstance0 ) ; Instances instances1 = iBk0 . pruneToK ( instances0 , doubleArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSummaryString ( ) { StringBuffer result = new StringBuffer ( ) ; result . append ( "Relation Name : " ) . append ( relationName ( ) ) . append ( '\n' ) ; result . append ( "Num Instances : " ) . append ( numInstances ( ) ) . append ( '\n' ) ; result . append ( "Num Attributes : " ) . append ( numAttributes ( ) ) . append ( '\n' ) ; result . append ( '\n' ) ; result . append ( Utils . padLeft ( "" , 5 ) ) . append ( Utils . padRight ( "Name" , 25 ) ) ; result . append ( Utils . padLeft ( "Type" , 5 ) ) . append ( Utils . padLeft ( "Nom" , 5 ) ) ; result . append ( Utils . padLeft ( "Int" , 5 ) ) . append ( Utils . padLeft ( "Real" , 5 ) ) ; result . append ( Utils . padLeft ( "Missing" , 12 ) ) ; result . append ( Utils . padLeft ( "Unique" , 12 ) ) ; result . append ( Utils . padLeft ( "Dist" , 6 ) ) . append ( '\n' ) ; for ( int i = 0 ; i < numAttributes ( ) ; i + + ) { Attribute a = attribute ( i ) ; AttributeStats as = attributeStats ( i ) ; result . append ( Utils . padLeft ( "" + ( i + 1 ) , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padRight ( a . name ( ) , 25 ) ) . append ( ' ' ) ; long percent ; switch ( a . type ( ) ) { case Attribute . NOMINAL : result . append ( Utils . padLeft ( "Nom" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . NUMERIC : result . append ( Utils . padLeft ( "Num" , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . DATE : result . append ( Utils . padLeft ( "Dat" , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . STRING : result . append ( Utils . padLeft ( "Str" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; case Attribute . RELATIONAL : result . append ( Utils . padLeft ( "Rel" , 4 ) ) . append ( ' ' ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; default : result . append ( Utils . padLeft ( " ? ? ? " , 4 ) ) . append ( ' ' ) ; result . append ( Utils . padLeft ( "" + 0 , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . intCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; percent = Math . round ( 100 . 0 * as . realCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; break ; } result . append ( Utils . padLeft ( "" + as . missingCount , 5 ) ) . append ( " / " ) ; percent = Math . round ( 100 . 0 * as . missingCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + as . uniqueCount , 5 ) ) . append ( " / " ) ; percent = Math . round ( 100 . 0 * as . uniqueCount / as . totalCount ) ; result . append ( Utils . padLeft ( "" + percent , 3 ) ) . append ( "% " ) ; result . append ( Utils . padLeft ( "" + as . distinctCount , 5 ) ) . append ( ' ' ) ; result . append ( '\n' ) ; } return result . toString ( ) ; }
