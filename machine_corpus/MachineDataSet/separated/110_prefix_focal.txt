void test0 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return connected ; }
void test1 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void eventOccurred ( DatabaseEvent event ) ; }
void test2 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test3 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test4 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test5 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWaitTimeout ( ) { return waitTimeout ; }
void test6 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int waitForEvent ( String eventName ) throws InterruptedException , SQLException { return waitForEvent ( eventName , 0 ) ; }
void test7 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( ) { return this . host ; }
void test8 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWaitTimeout ( ) { return waitTimeout ; }
void test9 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return connected ; }
void test10 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( ) { return this . host ; }
void test11 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return connected ; }
void test12 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWaitTimeout ( ) { return waitTimeout ; }
void test13 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWaitTimeout ( ) { return waitTimeout ; }
void test14 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWaitTimeout ( ) { return waitTimeout ; }
void test15 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWaitTimeout ( ) { return waitTimeout ; }
void test16 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void connect ( ) throws SQLException { if ( connected ) { throw new IllegalStateException ( "Connect called while already connected" ) ; } DatabaseParameterBuffer dpb = gds . createDatabaseParameterBuffer ( ) ; dpb . addArgument ( DatabaseParameterBuffer . USER , user ) ; dpb . addArgument ( DatabaseParameterBuffer . PASSWORD , password ) ; try { String connString = GDSFactory . getDatabasePath ( gds . getType ( ) , host , port , database ) ; gds . iscAttachDatabase ( connString , dbHandle , dpb ) ; } catch ( GDSException e ) { throw new FBSQLException ( e ) ; } connected = true ; eventDispatcher = new EventDispatcher ( ) ; dispatchThread = new Thread ( eventDispatcher ) ; dispatchThread . setDaemon ( true ) ; dispatchThread . start ( ) ; }
void test17 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void disconnect ( ) throws SQLException { if ( ! connected ) { throw new IllegalStateException ( "Disconnect called while not connected" ) ; } for ( String eventName : new HashSet < String > ( handlerMap . keySet ( ) ) ) { try { unregisterListener ( eventName ) ; } catch ( GDSException e1 ) { throw new FBSQLException ( e1 ) ; } } handlerMap . clear ( ) ; listenerMap . clear ( ) ; try { gds . iscDetachDatabase ( dbHandle ) ; } catch ( GDSException e2 ) { throw new FBSQLException ( e2 ) ; } connected = false ; eventDispatcher . stop ( ) ; / / join the thread and wait until it dies try { dispatchThread . join ( ) ; } catch ( InterruptedException ex ) { throw new FBSQLException ( ex ) ; } }
void test18 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addEventListener ( String eventName , EventListener listener ) throws SQLException { if ( ! connected ) { throw new IllegalStateException ( "Can't add event listeners to disconnected EventManager" ) ; } if ( listener = = null | | eventName = = null ) { throw new NullPointerException ( ) ; } ( listenerMap ) { if ( ! listenerMap . containsKey ( eventName ) ) { try { registerListener ( eventName ) ; } catch ( GDSException e ) { throw new FBSQLException ( e ) ; } listenerMap . put ( eventName , new HashSet < EventListener > ( ) ) ; } Set < EventListener > listenerSet = listenerMap . get ( eventName ) ; listenerSet . add ( listener ) ; } }
void test19 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeEventListener ( String eventName , EventListener listener ) throws SQLException { if ( eventName = = null | | listener = = null ) { throw new NullPointerException ( ) ; } Set < EventListener > listenerSet = listenerMap . get ( eventName ) ; if ( listenerSet ! = null ) { listenerSet . remove ( listener ) ; if ( listenerSet . isEmpty ( ) ) { listenerMap . remove ( eventName ) ; try { unregisterListener ( eventName ) ; } catch ( GDSException e ) { throw new FBSQLException ( e ) ; } } } }
void test20 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeEventListener ( String eventName , EventListener listener ) throws SQLException { if ( eventName = = null | | listener = = null ) { throw new NullPointerException ( ) ; } Set < EventListener > listenerSet = listenerMap . get ( eventName ) ; if ( listenerSet ! = null ) { listenerSet . remove ( listener ) ; if ( listenerSet . isEmpty ( ) ) { listenerMap . remove ( eventName ) ; try { unregisterListener ( eventName ) ; } catch ( GDSException e ) { throw new FBSQLException ( e ) ; } } } }
void test21 ( ) throws Throwable { FBEventManager fBEventManager0 = new FBEventManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( ) { return this . host ; }
void test0 ( ) throws Throwable { FBDatabaseEvent fBDatabaseEvent0 = new FBDatabaseEvent ( "" , ( - 1946 ) ) ; String string0 = fBDatabaseEvent0 . getEventName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test1 ( ) throws Throwable { FBDatabaseEvent fBDatabaseEvent0 = new FBDatabaseEvent ( "" , ( - 1946 ) ) ; int int0 = fBDatabaseEvent0 . getEventCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test1 ( ) throws Throwable { LoggerFactory loggerFactory0 = new LoggerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "DxsNUV / | H" ) ; boolean boolean0 = log4jLogger0 . isTraceEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTraceEnabled ( ) { return isDebugEnabled ( ) ; }
void test1 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "q1" ) ; log4jLogger0 . trace ( ( Object ) log4jLogger0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTraceEnabled ( ) { return isDebugEnabled ( ) ; }
void test2 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "DxsNUV / | H" ) ; log4jLogger0 . trace ( ( Object ) "DxsNUV / | H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTraceEnabled ( ) { return isDebugEnabled ( ) ; }
void test3 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "L" ) ; Object object0 = new Object ( ) ; log4jLogger0 . info ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfoEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . INFO ) ; }
void test4 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "f9 - : CvDGe4 { xv , hmwa" ) ; Object object0 = new Object ( ) ; log4jLogger0 . info ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfoEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . INFO ) ; }
void test5 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "f9 - : CvDGe4 { xv , hmwa" ) ; Object object0 = new Object ( ) ; log4jLogger0 . warn ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWarnEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . WARN ) ; }
void test6 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "f9 - : CvDGe4 { xv , hmwa" ) ; log4jLogger0 . warn ( ( Object ) "f9 - : CvDGe4 { xv , hmwa" , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWarnEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . WARN ) ; }
void test7 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "q1" ) ; Object object0 = new Object ( ) ; log4jLogger0 . error ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . ERROR ) ; }
void test8 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "q1" ) ; log4jLogger0 . error ( ( Object ) log4jLogger0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . ERROR ) ; }
void test9 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "f9 - : CvDGe4 { xv , hmwa" ) ; Object object0 = new Object ( ) ; log4jLogger0 . fatal ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test10 ( ) throws Throwable { Log4jLogger log4jLogger0 = new Log4jLogger ( "f9 - : CvDGe4 { xv , hmwa" ) ; Object object0 = new Object ( ) ; log4jLogger0 . fatal ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test0 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; boolean boolean0 = nullLogger0 . isTraceEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTraceEnabled ( ) { return isDebugEnabled ( ) ; }
void test1 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . info ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test2 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; boolean boolean0 = nullLogger0 . isFatalEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test3 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . error ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . ERROR ) ; }
void test4 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . debug ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfoEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . INFO ) ; }
void test5 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . error ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfoEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . INFO ) ; }
void test6 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( " & rFRt`" ) ; nullLogger0 . trace ( ( Object ) " & rFRt`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test7 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . fatal ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test8 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; boolean boolean0 = nullLogger0 . isDebugEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test9 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; boolean boolean0 = nullLogger0 . isWarnEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWarnEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . WARN ) ; }
void test10 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . warn ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test11 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; boolean boolean0 = nullLogger0 . isInfoEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfoEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . INFO ) ; }
void test12 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . info ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test13 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . fatal ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test14 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; boolean boolean0 = nullLogger0 . isErrorEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . ERROR ) ; }
void test15 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . trace ( object0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test16 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . warn ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . ERROR ) ; }
void test17 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( "" ) ; Object object0 = new Object ( ) ; nullLogger0 . debug ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test0 ( ) throws Throwable { ConsoleLogger consoleLogger0 = new ConsoleLogger ( "W ? v\"EM . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfoEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . INFO ) ; }
void test1 ( ) throws Throwable { ConsoleLogger consoleLogger0 = new ConsoleLogger ( "W ? v\"EM . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFatalEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . FATAL ) ; }
void test2 ( ) throws Throwable { ConsoleLogger consoleLogger0 = new ConsoleLogger ( "W ? v\"EM . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTraceEnabled ( ) { return isDebugEnabled ( ) ; }
void test3 ( ) throws Throwable { ConsoleLogger consoleLogger0 = new ConsoleLogger ( "W ? v\"EM . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isErrorEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . ERROR ) ; }
void test4 ( ) throws Throwable { ConsoleLogger consoleLogger0 = new ConsoleLogger ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWarnEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . WARN ) ; }
void test5 ( ) throws Throwable { ConsoleLogger consoleLogger0 = new ConsoleLogger ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDebugEnabled ( ) { return loggingAvailable & & log . isEnabledFor ( Priority . DEBUG ) ; }
void test0 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; Reference reference0 = fBSimpleDataSource0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Reference getReference ( ) throws NamingException { Reference ref = new Reference ( getClass ( ) . getName ( ) , DataSourceFactory . class . getName ( ) , null ) ; FBAbstractCommonDataSource . updateReference ( ref , this ) ; return ref ; }
void test1 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getTpbMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test2 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test3 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setTpbMapping ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test4 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test5 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setUseStreamBlobs ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test6 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getDefaultIsolation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test7 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setBlobBufferLength ( ( Integer ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test8 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setRoleName ( " int : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test9 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getCharSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test10 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = ( DatabaseParameterBufferImp ) fBSimpleDataSource0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test11 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setSqlDialect ( "Unable to load generated key parser" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test12 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; Integer integer0 = fBSimpleDataSource0 . getBlobBufferLength ( ) ; TransactionParameterBuffer transactionParameterBuffer0 = fBSimpleDataSource0 . getTransactionParameters ( ( int ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransactionParameterBuffer getTransactionParameters ( int isolation ) { return connectionProperties . getTransactionParameters ( isolation ) ; }
void test13 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; int int0 = fBSimpleDataSource0 . getBlobBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test14 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; boolean boolean0 = fBSimpleDataSource0 . isDefaultResultSetHoldable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test15 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; int int0 = fBSimpleDataSource0 . getBuffersNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test16 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setTimestampUsesLocalTimezone ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test17 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return this . password ; }
void test19 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setSoTimeout ( 276 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test21 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; int int0 = fBSimpleDataSource0 . getDefaultTransactionIsolation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test22 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setUserName ( "Unable to load generated key parser" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test23 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; int int0 = fBSimpleDataSource0 . getSoTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test24 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test25 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setNonStandardProperty ( "jdbc : firebirdsql : : " , " ? T\"Q & 7hL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test26 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setBlobBufferSize ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test27 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setCharSet ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test28 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setPassword ( "PKTABLE_CAT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test29 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setBuffersNumber ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test30 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getRoleName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRoleName ( ) { return connectionProperties . getRoleName ( ) ; }
void test31 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; int int0 = fBSimpleDataSource0 . getLoginTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginTimeout ( ) throws SQLException { return connectionProperties . getSoTimeout ( ) / 1000 ; }
void test32 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setUseTranslation ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginTimeout ( ) throws SQLException { return connectionProperties . getSoTimeout ( ) / 1000 ; }
void test33 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; Integer integer0 = fBSimpleDataSource0 . getBlobBufferLength ( ) ; fBSimpleDataSource0 . setTransactionParameters ( ( int ) integer0 , ( TransactionParameterBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test34 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test35 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; boolean boolean0 = fBSimpleDataSource0 . isUseStandardUdf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test36 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setDefaultResultSetHoldable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test37 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test38 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; int int0 = fBSimpleDataSource0 . getSocketBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test39 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setReference ( ( Reference ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test40 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setLoginTimeout ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginTimeout ( ) throws SQLException { return connectionProperties . getSoTimeout ( ) / 1000 ; }
void test41 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getDatabase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test42 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setSocketBufferSize ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test43 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setUseStandardUdf ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test45 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getSqlDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSqlDialect ( ) { return connectionProperties . getSqlDialect ( ) ; }
void test46 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; boolean boolean0 = fBSimpleDataSource0 . isUseStreamBlobs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test47 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getUseTranslation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUseTranslation ( ) { ( lock ) { return connectionProperties . getUseTranslation ( ) ; } }
void test48 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; boolean boolean0 = fBSimpleDataSource0 . isTimestampUsesLocalTimezone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test50 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; String string0 = fBSimpleDataSource0 . getNonStandardProperty ( " int : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNonStandardProperty ( String key ) { return connectionProperties . getNonStandardProperty ( key ) ; }
void test51 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setDescription ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test52 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setDefaultTransactionIsolation ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test53 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; fBSimpleDataSource0 . setEncoding ( "PKTABLE_CAT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test56 ( ) throws Throwable { FBSimpleDataSource fBSimpleDataSource0 = new FBSimpleDataSource ( ) ; Class < FBSimpleDataSource > class0 = FBSimpleDataSource . class ; FBSimpleDataSource fBSimpleDataSource1 = ( FBSimpleDataSource ) fBSimpleDataSource0 . unwrap ( ( Class < FBSimpleDataSource > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRoleName ( ) { return connectionProperties . getRoleName ( ) ; }
void test1 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; Reference reference0 = fBXADataSource0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test1 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; Reference reference0 = fBConnectionPoolDataSource0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test2 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . checkNotStarted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test0 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; FBPreparedStatement fBPreparedStatement0 = new FBPreparedStatement ( ( GDSHelper ) null , ( - 601 ) , ( - 601 ) , ( - 601 ) , ( FBObjectListener . StatementListener ) null , ( FBObjectListener . BlobListener ) internalTransactionCoordinator0 ) ; StatementHandler statementHandler0 = new StatementHandler ( ( PooledConnectionHandler ) null , ( Statement ) fBPreparedStatement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return connection = = null | | proxy = = null ; }
void test0 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; boolean boolean0 = fBConnectionPoolDataSource0 . isDefaultResultSetHoldable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test1 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; String string0 = fBConnectionPoolDataSource0 . getCharSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test2 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setBlobBufferSize ( 401 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test3 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = ( DatabaseParameterBufferImp ) fBConnectionPoolDataSource0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test4 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; String string0 = fBConnectionPoolDataSource0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test5 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setLoginTimeout ( 128 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test6 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setUseTranslation ( " . zip" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) { return this . user ; }
void test7 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setSocketBufferSize ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test8 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; String string0 = fBXADataSource0 . getUseTranslation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUseTranslation ( ) { ( lock ) { return connectionProperties . getUseTranslation ( ) ; } }
void test9 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; FBConnectionProperties fBConnectionProperties0 = fBConnectionPoolDataSource0 . getConnectionProperties ( ) ; fBConnectionPoolDataSource0 . setConnectionProperties ( fBConnectionProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test10 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setBuffersNumber ( ( - 125 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test11 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setTimestampUsesLocalTimezone ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test13 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test14 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; TransactionParameterBuffer transactionParameterBuffer0 = fBConnectionPoolDataSource0 . getTransactionParameters ( ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransactionParameterBuffer getTransactionParameters ( int isolation ) { return connectionProperties . getTransactionParameters ( isolation ) ; }
void test15 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; Reference reference0 = fBXADataSource0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test16 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; String string0 = fBXADataSource0 . getDefaultIsolation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test17 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setServerName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test18 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; int int0 = fBXADataSource0 . getSocketBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test19 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setSqlDialect ( " . zip" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test20 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setEncoding ( "XLas~qYoN8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPortNumber ( ) { ( lock ) { return portNumber ; } }
void test21 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test22 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test23 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setDefaultTransactionIsolation ( 764 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test24 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setNonStandardProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseName ( ) { ( lock ) { return databaseName ; } }
void test25 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; int int0 = fBConnectionPoolDataSource0 . getSoTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test26 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; String string0 = fBXADataSource0 . getTpbMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test27 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; boolean boolean0 = fBXADataSource0 . isTimestampUsesLocalTimezone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test28 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; int int0 = fBXADataSource0 . getBuffersNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test29 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; int int0 = fBXADataSource0 . getBlobBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test31 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setUseStandardUdf ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test33 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setSoTimeout ( ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test34 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setUseStreamBlobs ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test35 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; String string0 = fBXADataSource0 . getNonStandardProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNonStandardProperty ( String key ) { return connectionProperties . getNonStandardProperty ( key ) ; }
void test36 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setDatabaseName ( " . java" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test37 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setTransactionParameters ( 1830 , ( TransactionParameterBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test38 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; int int0 = fBConnectionPoolDataSource0 . getDefaultTransactionIsolation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test39 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; boolean boolean0 = fBConnectionPoolDataSource0 . isUseStandardUdf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test40 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setDefaultResultSetHoldable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test41 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setUser ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test42 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; String string0 = fBConnectionPoolDataSource0 . getSqlDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSqlDialect ( ) { return connectionProperties . getSqlDialect ( ) ; }
void test43 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; int int0 = fBXADataSource0 . getLoginTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginTimeout ( ) throws SQLException { return connectionProperties . getSoTimeout ( ) / 1000 ; }
void test44 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; fBConnectionPoolDataSource0 . setTpbMapping ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRoleName ( ) { return connectionProperties . getRoleName ( ) ; }
void test45 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setPortNumber ( ( - 1993 ) ) ; Reference reference0 = fBXADataSource0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPortNumber ( ) { ( lock ) { return portNumber ; } }
void test46 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setRoleName ( "XLas~qYoN8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test47 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; boolean boolean0 = fBConnectionPoolDataSource0 . isUseStreamBlobs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test48 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setCharSet ( "XLas~qYoN8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test49 ( ) throws Throwable { FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource ( ) ; String string0 = fBConnectionPoolDataSource0 . getRoleName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRoleName ( ) { return connectionProperties . getRoleName ( ) ; }
void test50 ( ) throws Throwable { FBXADataSource fBXADataSource0 = new FBXADataSource ( ) ; fBXADataSource0 . setServerName ( "qUM * ^ ) ID^B" ) ; fBXADataSource0 . setPortNumber ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test0 ( ) throws Throwable { DataSourceFactory dataSourceFactory0 = new DataSourceFactory ( ) ; Reference reference0 = new Reference ( "java . naming . authoritative" , "java . naming . authoritative" , "java . naming . authoritative" ) ; CompositeName compositeName0 = new CompositeName ( ) ; Hashtable < Object , FBConnectionProperties > hashtable0 = new Hashtable < Object , FBConnectionProperties > ( ) ; InitialContext initialContext0 = new InitialContext ( hashtable0 ) ; FBConnectionPoolDataSource fBConnectionPoolDataSource0 = ( FBConnectionPoolDataSource ) dataSourceFactory0 . getObjectInstance ( ( Object ) reference0 , ( Name ) compositeName0 , ( Context ) initialContext0 , ( Hashtable < ? , ? > ) hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectInstance ( Object obj , Name name , Context nameCtx , Hashtable < ? , ? > environment ) throws Exception { Reference ref = ( Reference ) obj ; String className = ref . getClassName ( ) ; if ( className . equals ( "org . firebirdsql . ds . FBConnectionPoolDataSource" ) ) { return loadConnectionPoolDS ( ref ) ; } if ( className . equals ( "org . firebirdsql . ds . FBXADataSource" ) ) { return loadXADS ( ref ) ; } return null ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = DataSourceFactory . serialize ( ( Object ) "java . naming . authoritative" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] serialize ( Object obj ) { ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; try { ObjectOutputStream out = new ObjectOutputStream ( bout ) ; out . writeObject ( obj ) ; out . flush ( ) ; } catch ( IOException ex ) { return null ; } return bout . toByteArray ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; Object object0 = DataSourceFactory . deserialize ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deserialize ( byte [ ] data ) { ByteArrayInputStream bin = new ByteArrayInputStream ( data ) ; try { ObjectInputStream in = new ObjectInputStream ( bin ) ; return in . readObject ( ) ; } catch ( IOException ex ) { return null ; } catch ( ClassNotFoundException ex ) { return null ; } }
void test3 ( ) throws Throwable { StringRefAddr stringRefAddr0 = new StringRefAddr ( "org . firebirdsql . ds . FBConnectionPoolDataSource" , ( String ) null ) ; Reference reference0 = new Reference ( "org . firebirdsql . ds . FBConnectionPoolDataSource" , ( RefAddr ) stringRefAddr0 ) ; String string0 = DataSourceFactory . getRefAddr ( reference0 , "org . firebirdsql . ds . FBConnectionPoolDataSource" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRefAddr ( Reference ref , String type ) { RefAddr addr = ref . get ( type ) ; if ( addr = = null ) { return null ; } Object content = addr . getContent ( ) ; return content ! = null ? content . toString ( ) : null ; }
void test4 ( ) throws Throwable { Reference reference0 = new Reference ( "java . naming . authoritative" , "java . naming . authoritative" , "java . naming . authoritative" ) ; String string0 = DataSourceFactory . getRefAddr ( reference0 , "java . naming . authoritative" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRefAddr ( Reference ref , String type ) { RefAddr addr = ref . get ( type ) ; if ( addr = = null ) { return null ; } Object content = addr . getContent ( ) ; return content ! = null ? content . toString ( ) : null ; }
void test5 ( ) throws Throwable { StringRefAddr stringRefAddr0 = new StringRefAddr ( "org . firebirdsql . ds . FBXADataSource" , "org . firebirdsql . ds . FBXADataSource" ) ; Reference reference0 = new Reference ( "org . firebirdsql . ds . FBXADataSource" , ( RefAddr ) stringRefAddr0 ) ; String string0 = DataSourceFactory . getRefAddr ( reference0 , "org . firebirdsql . ds . FBXADataSource" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRefAddr ( Reference ref , String type ) { RefAddr addr = ref . get ( type ) ; if ( addr = = null ) { return null ; } Object content = addr . getContent ( ) ; return content ! = null ? content . toString ( ) : null ; }
void test5 ( ) throws Throwable { FBUserManager fBUserManager0 = new FBUserManager ( ) ; fBUserManager0 . setSecurityDatabase ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return this . password ; }
void test0 ( ) throws Throwable { FBTraceManager fBTraceManager0 = new FBTraceManager ( " , $M : AYEjx^EI / * A" ) ; fBTraceManager0 . startTraceSession ( " , $M : AYEjx^EI / * A" , " , $M : AYEjx^EI / * A" ) ; fBTraceManager0 . startTraceSession ( " , $M : AYEjx^EI / * A" , " , $M : AYEjx^EI / * A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test4 ( ) throws Throwable { FBTraceManager fBTraceManager0 = new FBTraceManager ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test9 ( ) throws Throwable { FBTraceManager fBTraceManager0 = new FBTraceManager ( ( String ) null ) ; fBTraceManager0 . startTraceSession ( ( String ) null , " | IW~tgWMGLiS#92A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test0 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setPassword ( " | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserId ( ) ; / * * * Optional group ID number , defined in / etc / group , to assign to the user in * security database ; reserved for future implementation * * @param groupId * / void setGroupId ( int groupId ) ; / * * * @return group id number . * / int getGroupId ( ) ; }
void test1 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; String string0 = fBUser0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test2 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setFirstName ( "null | null | null | null | null | - 1 | - 1" ) ; int int0 = fBUser0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test3 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser0 . setUserId ( ( - 1133 ) ) ; boolean boolean0 = fBUser1 . equals ( ( Object ) fBUser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserId ( ) ; / * * * Optional group ID number , defined in / etc / group , to assign to the user in * security database ; reserved for future implementation * * @param groupId * / void setGroupId ( int groupId ) ; / * * * @return group id number . * / int getGroupId ( ) ; }
void test4 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; boolean boolean0 = fBUser0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test5 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser0 . setUserName ( "null | null | null | null | null | - 1133 | - 1" ) ; boolean boolean0 = fBUser0 . equals ( ( Object ) fBUser1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test6 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser0 . setUserName ( "null | null | null | null | null | - 1133 | - 1" ) ; boolean boolean0 = fBUser1 . equals ( ( Object ) fBUser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test7 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser1 . setFirstName ( "null | null | null | null | null | - 1 | - 1" ) ; boolean boolean0 = fBUser1 . equals ( ( Object ) fBUser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test8 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser1 . setFirstName ( "null | null | null | null | null | - 1 | - 1" ) ; boolean boolean0 = fBUser0 . equals ( ( Object ) fBUser1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test9 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser1 . setMiddleName ( "H0 { `SIW59 < ^T & " ) ; boolean boolean0 = fBUser1 . equals ( ( Object ) fBUser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test10 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser1 . setMiddleName ( "H0 { `SIW59 < ^T & " ) ; boolean boolean0 = fBUser0 . equals ( ( Object ) fBUser1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test11 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser1 . setLastName ( "Q0t_$w" ) ; boolean boolean0 = fBUser1 . equals ( ( Object ) fBUser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test12 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser1 . setLastName ( "Q0t_$w" ) ; boolean boolean0 = fBUser0 . equals ( ( Object ) fBUser1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test13 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; FBUser fBUser1 = new FBUser ( ) ; fBUser0 . setGroupId ( ( - 1382 ) ) ; boolean boolean0 = fBUser1 . equals ( ( Object ) fBUser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGroupId ( ) ; }
void test14 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setUserName ( "" ) ; int int0 = fBUser0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test15 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setMiddleName ( "null | null | null | null | null | - 1 | - 1" ) ; int int0 = fBUser0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test16 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setLastName ( "null | null | null | null | null | - 1 | - 1" ) ; int int0 = fBUser0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test17 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setUserId ( ( - 1629 ) ) ; int int0 = fBUser0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserId ( ) ; / * * * Optional group ID number , defined in / etc / group , to assign to the user in * security database ; reserved for future implementation * * @param groupId * / void setGroupId ( int groupId ) ; / * * * @return group id number . * / int getGroupId ( ) ; }
void test18 ( ) throws Throwable { FBUser fBUser0 = new FBUser ( ) ; fBUser0 . setGroupId ( ( - 1629 ) ) ; int int0 = fBUser0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test0 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( "Q6 * " ) ; fBServiceManager0 . setDatabase ( "Q6 * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test1 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ) ; fBServiceManager0 . setUser ( "5" ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) fBServiceManager0 . getGds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IscSvcHandle attachServiceManager ( GDS gds ) throws GDSException { ServiceParameterBuffer serviceParameterBuffer = gds . createServiceParameterBuffer ( ) ; if ( getUser ( ) ! = null ) serviceParameterBuffer . addArgument ( ISCConstants . isc_spb_user_name , getUser ( ) ) ; if ( getPassword ( ) ! = null ) serviceParameterBuffer . addArgument ( ISCConstants . isc_spb_password , getPassword ( ) ) ; serviceParameterBuffer . addArgument ( ISCConstants . isc_spb_dummy_packet_interval , new byte [ ] { 120 , 10 , 0 , 0 } ) ; IscSvcHandle handle = gds . createIscSvcHandle ( ) ; gds . iscServiceAttach ( getServiceName ( ) , handle , serviceParameterBuffer ) ; return handle ; }
void test2 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ) ; ServiceRequestBuffer serviceRequestBuffer0 = fBServiceManager0 . createRequestBuffer ( 3050 , 3050 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void executeServicesOperation ( ServiceRequestBuffer srb ) throws FBSQLException { try { IscSvcHandle svcHandle = attachServiceManager ( gds ) ; try { gds . iscServiceStart ( svcHandle , srb ) ; queueService ( gds , svcHandle ) ; } finally { detachServiceManager ( gds , svcHandle ) ; } } catch ( GDSException gdse ) { throw new FBSQLException ( gdse ) ; } catch ( IOException ioe ) { throw new FBSQLException ( ioe ) ; } }
void test3 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ) ; fBServiceManager0 . setPassword ( "" ) ; ServiceRequestBuffer serviceRequestBuffer0 = fBServiceManager0 . createRequestBuffer ( 3050 , 3050 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void executeServicesOperation ( ServiceRequestBuffer srb ) throws FBSQLException { try { IscSvcHandle svcHandle = attachServiceManager ( gds ) ; try { gds . iscServiceStart ( svcHandle , srb ) ; queueService ( gds , svcHandle ) ; } finally { detachServiceManager ( gds , svcHandle ) ; } } catch ( GDSException gdse ) { throw new FBSQLException ( gdse ) ; } catch ( IOException ioe ) { throw new FBSQLException ( ioe ) ; } }
void test4 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ( GDSType ) null ) ; fBServiceManager0 . setHost ( "" ) ; String string0 = fBServiceManager0 . getServiceName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceName ( ) { StringBuffer sb = new StringBuffer ( ) ; if ( getHost ( ) ! = null ) { sb . append ( getHost ( ) ) ; if ( getPort ( ) ! = 3050 ) { sb . append ( " / " ) ; sb . append ( getPort ( ) ) ; } sb . append ( " : " ) ; } sb . append ( "service_mgr" ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ( GDSType ) null ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) fBServiceManager0 . getGds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test8 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ) ; fBServiceManager0 . setLogger ( ( OutputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test9 ( ) throws Throwable { FBServiceManager fBServiceManager0 = new FBServiceManager ( ( GDSType ) null ) ; fBServiceManager0 . setHost ( "" ) ; fBServiceManager0 . setPort ( 760 ) ; String string0 = fBServiceManager0 . getServiceName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test0 ( ) throws Throwable { FBCommandLine fBCommandLine0 = new FBCommandLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FBCommandLine ( ) { }
void test2 ( ) throws Throwable { FBStatisticsManager fBStatisticsManager0 = new FBStatisticsManager ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) { return this . user ; }
void test3 ( ) throws Throwable { FBNBackupManager fBNBackupManager0 = new FBNBackupManager ( ) ; fBNBackupManager0 . setDatabase ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test4 ( ) throws Throwable { FBNBackupManager fBNBackupManager0 = new FBNBackupManager ( ( String ) null ) ; fBNBackupManager0 . setNoDBTriggers ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) { return this . user ; }
void test5 ( ) throws Throwable { FBNBackupManager fBNBackupManager0 = new FBNBackupManager ( ) ; fBNBackupManager0 . setBackupLevel ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) { return this . user ; }
void test6 ( ) throws Throwable { FBNBackupManager fBNBackupManager0 = new FBNBackupManager ( ) ; fBNBackupManager0 . clearBackupFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( ) { return this . host ; }
void test0 ( ) throws Throwable { FBBackupManager fBBackupManager0 = new FBBackupManager ( ) ; fBBackupManager0 . clearRestorePaths ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return this . password ; }
void test4 ( ) throws Throwable { FBBackupManager fBBackupManager0 = new FBBackupManager ( "jdbc : firebirdsql : : " ) ; fBBackupManager0 . clearBackupPaths ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test13 ( ) throws Throwable { FBBackupManager fBBackupManager0 = new FBBackupManager ( ) ; fBBackupManager0 . setRestorePageSize ( 1024 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return this . password ; }
void test15 ( ) throws Throwable { FBBackupManager fBBackupManager0 = new FBBackupManager ( ) ; fBBackupManager0 . setRestorePageSize ( 2048 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test17 ( ) throws Throwable { FBBackupManager fBBackupManager0 = new FBBackupManager ( ) ; fBBackupManager0 . setRestorePageSize ( 16384 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceName ( ) { StringBuffer sb = new StringBuffer ( ) ; if ( getHost ( ) ! = null ) { sb . append ( getHost ( ) ) ; if ( getPort ( ) ! = 3050 ) { sb . append ( " / " ) ; sb . append ( getPort ( ) ) ; } sb . append ( " : " ) ; } sb . append ( "service_mgr" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ) ; boolean boolean0 = fBManager0 . isForceCreate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test1 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test2 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ( String ) null ) ; fBManager0 . setUserName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test3 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( "N" ) ; String string0 = fBManager0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test5 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stop ( ) throws Exception ; String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test8 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ( String ) null ) ; String string0 = fBManager0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test9 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ( String ) null ) ; String string0 = fBManager0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test10 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ) ; String string0 = fBManager0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test11 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( "N" ) ; fBManager0 . setForceCreate ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test12 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ) ; fBManager0 . setPort ( ( - 961 ) ) ; int int0 = fBManager0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test13 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( "N" ) ; fBManager0 . setPassword ( "N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test14 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ( String ) null ) ; fBManager0 . setFileName ( "Firebird Database manager" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test15 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ( String ) null ) ; fBManager0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test16 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ( String ) null ) ; int int0 = fBManager0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test17 ( ) throws Throwable { FBManager fBManager0 = new FBManager ( ) ; fBManager0 . setType ( "PURE_JAVA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test0 ( ) throws Throwable { FatalGDSErrorHelper fatalGDSErrorHelper0 = new FatalGDSErrorHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; int int0 = fBConnectionRequestInfo0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test1 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; boolean boolean0 = fBConnectionRequestInfo0 . hasArgument ( ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasArgument ( int argumentType ) { return dpb . hasArgument ( argumentType ) ; }
void test2 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; FBConnectionRequestInfo fBConnectionRequestInfo1 = ( FBConnectionRequestInfo ) fBConnectionRequestInfo0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test3 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; int int0 = fBConnectionRequestInfo0 . getArgumentAsInt ( ( - 1517 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgumentAsInt ( int argumentType ) { return dpb . getArgumentAsInt ( argumentType ) ; }
void test5 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; DatabaseParameterBufferImp databaseParameterBufferImp1 = ( DatabaseParameterBufferImp ) fBConnectionRequestInfo0 . getDpb ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer getDpb ( ) { return dpb ; }
void test6 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; fBConnectionRequestInfo0 . setUserName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test8 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; fBConnectionRequestInfo0 . addArgument ( 3 , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test9 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; fBConnectionRequestInfo0 . addArgument ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test10 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; String string0 = fBConnectionRequestInfo0 . getArgumentAsString ( ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getArgumentAsString ( int argumentType ) { return dpb . getArgumentAsString ( argumentType ) ; }
void test11 ( ) throws Throwable { FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) null ) ; DatabaseParameterBuffer databaseParameterBuffer0 = fBConnectionRequestInfo0 . removeExtensionParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer removeExtensionParams ( ) { if ( dpb instanceof DatabaseParameterBufferExtension ) return ( ( DatabaseParameterBufferExtension ) dpb ) . removeExtensionParams ( ) ; else return dpb ; }
void test12 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp1 = ( org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ) fBConnectionRequestInfo0 . removeExtensionParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer removeExtensionParams ( ) { if ( dpb instanceof DatabaseParameterBufferExtension ) return ( ( DatabaseParameterBufferExtension ) dpb ) . removeExtensionParams ( ) ; else return dpb ; }
void test14 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; fBConnectionRequestInfo0 . setPassword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test15 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; FBConnectionRequestInfo fBConnectionRequestInfo1 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) fBConnectionRequestInfo0 ) ; boolean boolean0 = fBConnectionRequestInfo0 . equals ( ( Object ) fBConnectionRequestInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test16 ( ) throws Throwable { FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) null ) ; boolean boolean0 = fBConnectionRequestInfo0 . equals ( ( Object ) fBConnectionRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test17 ( ) throws Throwable { FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo ( ( DatabaseParameterBuffer ) null ) ; boolean boolean0 = fBConnectionRequestInfo0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test3 ( ) throws Throwable { FBManagedConnectionMetaData fBManagedConnectionMetaData0 = new FBManagedConnectionMetaData ( ( FBManagedConnection ) null ) ; int int0 = fBManagedConnectionMetaData0 . getMaxConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxConnections ( ) throws ResourceException { return 0 ; }
void test0 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; fBTpb0 . setTransactionParameterBuffer ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return tpb . isReadOnly ( ) ; }
void test1 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl1 = ( org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ) fBTpb0 . getTransactionParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransactionParameterBuffer getTransactionParameterBuffer ( ) { return transactionParams ; }
void test2 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; int int0 = fBTpb0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test3 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; boolean boolean0 = fBTpb0 . isReadOnly ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return tpb . isReadOnly ( ) ; }
void test4 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; boolean boolean0 = fBTpb0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test5 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; FBTpb fBTpb1 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; boolean boolean0 = fBTpb0 . equals ( ( Object ) fBTpb1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test6 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; fBTpb0 . setReadOnly ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return tpb . isReadOnly ( ) ; }
void test7 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org . firebirdsql . gds . impl . jni . TransactionParameterBufferImpl ( ) ; FBTpb fBTpb0 = new FBTpb ( ( TransactionParameterBuffer ) transactionParameterBufferImpl0 ) ; fBTpb0 . setReadOnly ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadOnly ( ) { return tpb . isReadOnly ( ) ; }
void test0 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; int int0 = fBManagedConnectionFactory0 . getBlobBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test1 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; PrintWriter printWriter0 = fBManagedConnectionFactory0 . getLogWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PrintWriter getLogWriter ( ) { return null ; / / we are using log4j . }
void test2 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyRollback ( FBManagedConnection mc , Xid xid ) throws GDSException , XAException { FBManagedConnection targetMc = xidMap . get ( xid ) ; if ( targetMc = = null ) tryCompleteInLimboTransaction ( getGDS ( ) , xid , false ) ; else targetMc . internalRollback ( xid ) ; xidMap . remove ( xid ) ; }
void test3 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) pipedOutputStream0 ) ; OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter ( ( OutputStream ) dataOutputStream0 ) ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) outputStreamWriter0 ) ; fBManagedConnectionFactory0 . setLogWriter ( printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test4 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test5 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test7 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; int int0 = fBManagedConnectionFactory0 . getSoTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSoTimeout ( ) { return connectionProperties . getSoTimeout ( ) ; }
void test8 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getCharSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test9 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setNonStandardProperty ( "H# ; = oSz + uF" , "H# ; = oSz + uF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSqlDialect ( ) { return connectionProperties . getSqlDialect ( ) ; }
void test10 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection createManagedConnection ( Subject subject , ConnectionRequestInfo cri ) throws ResourceException { start ( ) ; return new FBManagedConnection ( subject , cri , this ) ; }
void test11 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getRoleName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRoleName ( ) { return connectionProperties . getRoleName ( ) ; }
void test12 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setTpbMapping ( "IkeH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test13 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return this . password ; }
void test14 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setCharSet ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test15 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyStart ( FBManagedConnection mc , Xid xid ) throws GDSException { xidMap . put ( xid , mc ) ; }
void test16 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; boolean boolean0 = fBManagedConnectionFactory0 . isUseStreamBlobs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test17 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; boolean boolean0 = fBManagedConnectionFactory0 . isDefaultResultSetHoldable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test18 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; boolean boolean0 = fBManagedConnectionFactory0 . isTimestampUsesLocalTimezone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test19 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test20 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getUseTranslation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUseTranslation ( ) { ( lock ) { return connectionProperties . getUseTranslation ( ) ; } }
void test21 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test22 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test23 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setRoleName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return this . password ; }
void test24 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test25 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test26 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setTransactionParameters ( ( - 340 ) , ( TransactionParameterBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test27 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test28 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setSqlDialect ( "x" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test29 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; int int0 = fBManagedConnectionFactory0 . getSocketBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test30 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test31 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getDefaultIsolation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test32 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test33 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test34 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getNonStandardProperty ( "H# ; = oSz + uF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNonStandardProperty ( String key ) { return connectionProperties . getNonStandardProperty ( key ) ; }
void test35 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test36 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test37 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; FBStandAloneConnectionManager fBStandAloneConnectionManager0 = new FBStandAloneConnectionManager ( ) ; fBManagedConnectionFactory0 . setDefaultConnectionManager ( ( ConnectionManager ) fBStandAloneConnectionManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRoleName ( ) { return connectionProperties . getRoleName ( ) ; }
void test38 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; FBDataSource fBDataSource0 = ( FBDataSource ) fBManagedConnectionFactory0 . createConnectionFactory ( ) ; FBStandAloneConnectionManager fBStandAloneConnectionManager0 = new FBStandAloneConnectionManager ( ) ; FBDataSource fBDataSource1 = ( FBDataSource ) fBManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) fBStandAloneConnectionManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test39 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test40 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setDatabase ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test41 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setUserName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test42 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setNonStandardProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharSet ( ) { ( lock ) { return connectionProperties . getCharSet ( ) ; } }
void test43 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; TransactionParameterBuffer transactionParameterBuffer0 = fBManagedConnectionFactory0 . getTransactionParameters ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransactionParameterBuffer getTransactionParameters ( int isolation ) { return connectionProperties . getTransactionParameters ( isolation ) ; }
void test44 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; int int0 = fBManagedConnectionFactory0 . getBuffersNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test45 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setEncoding ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test46 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; FBStandAloneConnectionManager fBStandAloneConnectionManager0 = new FBStandAloneConnectionManager ( ) ; FBDataSource fBDataSource0 = ( FBDataSource ) fBManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) fBStandAloneConnectionManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginTimeout ( ) throws SQLException { return connectionProperties . getSoTimeout ( ) / 1000 ; }
void test47 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; fBManagedConnectionFactory0 . setUseTranslation ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test48 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; GDSType gDSType0 = fBManagedConnectionFactory0 . getGDSType ( ) ; FBManagedConnectionFactory fBManagedConnectionFactory1 = new FBManagedConnectionFactory ( gDSType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBuffersNumber ( ) { return connectionProperties . getBuffersNumber ( ) ; }
void test49 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test50 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getTpbMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test51 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; boolean boolean0 = fBManagedConnectionFactory0 . isUseStandardUdf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test52 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; String string0 = fBManagedConnectionFactory0 . getSqlDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSqlDialect ( ) { return connectionProperties . getSqlDialect ( ) ; }
void test54 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FBManagedConnectionFactory canonicalize ( ) { FBManagedConnectionFactory mcf = mcfInstances . get ( this ) ; if ( mcf ! = null ) return mcf ; return this ; }
void test55 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test56 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; LinkedHashSet < Object > linkedHashSet0 = new LinkedHashSet < Object > ( ) ; linkedHashSet0 . add ( ( Object ) fBManagedConnectionFactory0 ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = fBManagedConnectionFactory0 . getDefaultConnectionRequestInfo ( ) ; ManagedConnection managedConnection0 = fBManagedConnectionFactory0 . matchManagedConnections ( ( Set ) linkedHashSet0 , ( Subject ) null , ( ConnectionRequestInfo ) fBConnectionRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( Set connectionSet , javax . security . auth . Subject subject , ConnectionRequestInfo cxRequestInfo ) throws ResourceException { Iterator i = connectionSet . iterator ( ) ; while ( i . hasNext ( ) ) { Object connection = i . next ( ) ; if ( ! ( connection instanceof FBManagedConnection ) ) continue ; FBManagedConnection mc = ( FBManagedConnection ) connection ; if ( mc . matches ( subject , cxRequestInfo ) ) return mc ; } return null ; }
void test57 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int notifyPrepare ( FBManagedConnection mc , Xid xid ) throws GDSException , XAException { FBManagedConnection targetMc = xidMap . get ( xid ) ; if ( targetMc = = null ) throw new FBXAException ( "Commit called with unknown transaction" , XAException . XAER_NOTA ) ; return targetMc . internalPrepare ( xid ) ; }
void test58 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notifyCommit ( FBManagedConnection mc , Xid xid , boolean onePhase ) throws GDSException , XAException { FBManagedConnection targetMc = xidMap . get ( xid ) ; if ( targetMc = = null ) tryCompleteInLimboTransaction ( getGDS ( ) , xid , true ) ; else targetMc . internalCommit ( xid , onePhase ) ; xidMap . remove ( xid ) ; }
void test2 ( ) throws Throwable { String string0 = FBXid . toString ( ( Xid ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test0 ( ) throws Throwable { FBLocalTransaction fBLocalTransaction0 = new FBLocalTransaction ( ( FBManagedConnection ) null , ( AbstractConnection ) null ) ; Xid xid0 = fBLocalTransaction0 . getXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Xid getXid ( ) ; }
void test5 ( ) throws Throwable { FBLocalTransaction . FBLocalXid fBLocalTransaction_FBLocalXid0 = new FBLocalTransaction . FBLocalXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test6 ( ) throws Throwable { FBLocalTransaction . FBLocalXid fBLocalTransaction_FBLocalXid0 = new FBLocalTransaction . FBLocalXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test7 ( ) throws Throwable { FBLocalTransaction . FBLocalXid fBLocalTransaction_FBLocalXid0 = new FBLocalTransaction . FBLocalXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test8 ( ) throws Throwable { FBLocalTransaction . FBLocalXid fBLocalTransaction_FBLocalXid0 = new FBLocalTransaction . FBLocalXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test0 ( ) throws Throwable { SQLExceptionChainBuilder < SQLException > sQLExceptionChainBuilder0 = new SQLExceptionChainBuilder < SQLException > ( ) ; SQLExceptionChainBuilder < SQLException > sQLExceptionChainBuilder1 = sQLExceptionChainBuilder0 . append ( ( SQLException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SQLExceptionChainBuilder < E > append ( E sqle ) { if ( root = = null ) { root = sqle ; } else { root . setNextException ( sqle ) ; } return this ; }
void test1 ( ) throws Throwable { SQLExceptionChainBuilder < SQLException > sQLExceptionChainBuilder0 = new SQLExceptionChainBuilder < SQLException > ( ) ; boolean boolean0 = sQLExceptionChainBuilder0 . hasException ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasException ( ) { return root ! = null ; }
void test0 ( ) throws Throwable { Class < ? > class0 = Class . class ; Class < ? > [ ] classArray0 = ReflectionHelper . getAllInterfaces ( class0 ) ; Method method0 = ReflectionHelper . findMethod ( class0 , "DbL~M%" , classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method findMethod ( Class < ? > clazz , String name , Class < ? > [ ] args ) { try { return clazz . getMethod ( name , args ) ; } catch ( NoSuchMethodException nmex ) { return null ; } }
void test0 ( ) throws Throwable { Encoding_Cp860 encoding_Cp860_0 = new Encoding_Cp860 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp860_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp869 encoding_Cp869_0 = new Encoding_Cp869 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp869_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_ISO8859_5 encoding_ISO8859_5_0 = new Encoding_ISO8859_5 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_5_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp1253 encoding_Cp1253_0 = new Encoding_Cp1253 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1253_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { Encoding_Cp1252 encoding_Cp1252_0 = new Encoding_Cp1252 ( ) ; byte [ ] byteArray0 = encoding_Cp1252_0 . encodeToCharset ( "Cp869" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp1252 encoding_Cp1252_0 = new Encoding_Cp1252 ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; String string0 = encoding_Cp1252_0 . decodeFromCharset ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decodeFromCharset ( byte [ ] in , int off , int len , char [ ] out ) { return super . decodeFromCharset ( byteToChar , in , off , len , out ) ; }
void test0 ( ) throws Throwable { Encoding_Cp1256 encoding_Cp1256_0 = new Encoding_Cp1256 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1256_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { Encoding_Cp737 encoding_Cp737_0 = new Encoding_Cp737 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp737_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { Encoding_Cp1250 encoding_Cp1250_0 = new Encoding_Cp1250 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1250_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp1251 encoding_Cp1251_0 = new Encoding_Cp1251 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1251_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp437 encoding_Cp437_0 = new Encoding_Cp437 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp437_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp857 encoding_Cp857_0 = new Encoding_Cp857 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp857_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { Encoding_Cp862 encoding_Cp862_0 = new Encoding_Cp862 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp862_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { CharacterTranslator characterTranslator0 = new CharacterTranslator ( ) ; char [ ] charArray0 = characterTranslator0 . getMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] getMapping ( ) { return mapping ; }
void test1 ( ) throws Throwable { CharacterTranslator characterTranslator0 = new CharacterTranslator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] getMapping ( ) { return mapping ; }
void test1 ( ) throws Throwable { Encoding_ISO8859_13 encoding_ISO8859_13_0 = new Encoding_ISO8859_13 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_13_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp861 encoding_Cp861_0 = new Encoding_Cp861 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp861_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_NotOneByte encoding_NotOneByte0 = new Encoding_NotOneByte ( " Lv7BR | " ) ; byte [ ] byteArray0 = encoding_NotOneByte0 . encodeToCharset ( " Lv7BR | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_ISO8859_9 encoding_ISO8859_9_0 = new Encoding_ISO8859_9 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_9_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp1255 encoding_Cp1255_0 = new Encoding_Cp1255 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1255_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_ISO8859_7 encoding_ISO8859_7_0 = new Encoding_ISO8859_7 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_7_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp866 encoding_Cp866_0 = new Encoding_Cp866 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp866_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp864 encoding_Cp864_0 = new Encoding_Cp864 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp864_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp850 encoding_Cp850_0 = new Encoding_Cp850 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp850_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp865 encoding_Cp865_0 = new Encoding_Cp865 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp865_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp863 encoding_Cp863_0 = new Encoding_Cp863 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp863_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_ISO8859_2 encoding_ISO8859_2_0 = new Encoding_ISO8859_2 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_2_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_ISO8859_3 encoding_ISO8859_3_0 = new Encoding_ISO8859_3 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_3_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp775 encoding_Cp775_0 = new Encoding_Cp775 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp775_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_ISO8859_1 encoding_ISO8859_1_0 = new Encoding_ISO8859_1 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_1_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp1252 encoding_Cp1252_0 = new Encoding_Cp1252 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1252_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { EncodingFactory encodingFactory0 = new EncodingFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Encoding_Cp865 encoding_Cp865_0 = ( Encoding_Cp865 ) EncodingFactory . createEncoding ( "Cp865" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test2 ( ) throws Throwable { Encoding_NotOneByte encoding_NotOneByte0 = ( Encoding_NotOneByte ) EncodingFactory . getEncoding ( "NONE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test3 ( ) throws Throwable { Encoding_Cp1252 encoding_Cp1252_0 = ( Encoding_Cp1252 ) EncodingFactory . getEncoding ( "cp1252" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test4 ( ) throws Throwable { Encoding_Cp1250 encoding_Cp1250_0 = ( Encoding_Cp1250 ) EncodingFactory . createEncoding ( "Cp1250" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test5 ( ) throws Throwable { Encoding_Cp1251 encoding_Cp1251_0 = ( Encoding_Cp1251 ) EncodingFactory . createEncoding ( "Cp1251" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test6 ( ) throws Throwable { Encoding_Cp1253 encoding_Cp1253_0 = ( Encoding_Cp1253 ) EncodingFactory . getEncoding ( "Cp1253" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test7 ( ) throws Throwable { Encoding_Cp1254 encoding_Cp1254_0 = ( Encoding_Cp1254 ) EncodingFactory . createEncoding ( "Cp1254" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test8 ( ) throws Throwable { Encoding_Cp1255 encoding_Cp1255_0 = ( Encoding_Cp1255 ) EncodingFactory . createEncoding ( "Cp1255" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test9 ( ) throws Throwable { Encoding_Cp1256 encoding_Cp1256_0 = ( Encoding_Cp1256 ) EncodingFactory . createEncoding ( "Cp1256" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test10 ( ) throws Throwable { Encoding_Cp1257 encoding_Cp1257_0 = ( Encoding_Cp1257 ) EncodingFactory . getEncoding ( "Cp1257" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test11 ( ) throws Throwable { Encoding_Cp437 encoding_Cp437_0 = ( Encoding_Cp437 ) EncodingFactory . createEncoding ( "Cp437" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test12 ( ) throws Throwable { Encoding_Cp737 encoding_Cp737_0 = ( Encoding_Cp737 ) EncodingFactory . getEncoding ( "Cp737" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test13 ( ) throws Throwable { Encoding_Cp775 encoding_Cp775_0 = ( Encoding_Cp775 ) EncodingFactory . createEncoding ( "Cp775" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test14 ( ) throws Throwable { Encoding_Cp850 encoding_Cp850_0 = ( Encoding_Cp850 ) EncodingFactory . createEncoding ( "Cp850" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test15 ( ) throws Throwable { Encoding_Cp852 encoding_Cp852_0 = ( Encoding_Cp852 ) EncodingFactory . createEncoding ( "Cp852" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test16 ( ) throws Throwable { Encoding_Cp857 encoding_Cp857_0 = ( Encoding_Cp857 ) EncodingFactory . createEncoding ( "Cp857" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test17 ( ) throws Throwable { Encoding_Cp858 encoding_Cp858_0 = ( Encoding_Cp858 ) EncodingFactory . getEncoding ( "Cp858" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test18 ( ) throws Throwable { Encoding_Cp860 encoding_Cp860_0 = ( Encoding_Cp860 ) EncodingFactory . getEncoding ( "Cp860" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test19 ( ) throws Throwable { Encoding_Cp861 encoding_Cp861_0 = ( Encoding_Cp861 ) EncodingFactory . createEncoding ( "Cp861" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test20 ( ) throws Throwable { Encoding_Cp862 encoding_Cp862_0 = ( Encoding_Cp862 ) EncodingFactory . getEncoding ( "Cp862" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test21 ( ) throws Throwable { Encoding_Cp863 encoding_Cp863_0 = ( Encoding_Cp863 ) EncodingFactory . getEncoding ( "Cp863" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test22 ( ) throws Throwable { Encoding_Cp864 encoding_Cp864_0 = ( Encoding_Cp864 ) EncodingFactory . createEncoding ( "Cp864" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test23 ( ) throws Throwable { Encoding_Cp866 encoding_Cp866_0 = ( Encoding_Cp866 ) EncodingFactory . getEncoding ( "Cp866" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test24 ( ) throws Throwable { Encoding_Cp869 encoding_Cp869_0 = ( Encoding_Cp869 ) EncodingFactory . createEncoding ( "Cp869" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test25 ( ) throws Throwable { Encoding_ISO8859_1 encoding_ISO8859_1_0 = ( Encoding_ISO8859_1 ) EncodingFactory . createEncoding ( "ISO8859_1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test26 ( ) throws Throwable { Encoding_ISO8859_2 encoding_ISO8859_2_0 = ( Encoding_ISO8859_2 ) EncodingFactory . createEncoding ( "ISO8859_2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test27 ( ) throws Throwable { Encoding_ISO8859_3 encoding_ISO8859_3_0 = ( Encoding_ISO8859_3 ) EncodingFactory . createEncoding ( "ISO8859_3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test28 ( ) throws Throwable { Encoding_ISO8859_4 encoding_ISO8859_4_0 = ( Encoding_ISO8859_4 ) EncodingFactory . getEncoding ( "ISO8859_4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test29 ( ) throws Throwable { Encoding_ISO8859_5 encoding_ISO8859_5_0 = ( Encoding_ISO8859_5 ) EncodingFactory . getEncoding ( "ISO8859_5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test30 ( ) throws Throwable { Encoding_ISO8859_6 encoding_ISO8859_6_0 = ( Encoding_ISO8859_6 ) EncodingFactory . createEncoding ( "ISO8859_6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test31 ( ) throws Throwable { Encoding_ISO8859_7 encoding_ISO8859_7_0 = ( Encoding_ISO8859_7 ) EncodingFactory . createEncoding ( "ISO8859_7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test32 ( ) throws Throwable { Encoding_ISO8859_8 encoding_ISO8859_8_0 = ( Encoding_ISO8859_8 ) EncodingFactory . getEncoding ( "ISO8859_8" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test33 ( ) throws Throwable { Encoding_ISO8859_9 encoding_ISO8859_9_0 = ( Encoding_ISO8859_9 ) EncodingFactory . getEncoding ( "ISO8859_9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test34 ( ) throws Throwable { Encoding_ISO8859_13 encoding_ISO8859_13_0 = ( Encoding_ISO8859_13 ) EncodingFactory . createEncoding ( "ISO8859_13" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoding createEncoding ( String encoding ) { if ( encoding . equals ( "NONE" ) ) { encoding = defaultEncoding ; } else { String tempEncoding = javaAliases . get ( encoding ) ; if ( tempEncoding ! = null ) { encoding = tempEncoding ; } } if ( encoding . equals ( "Cp1250" ) ) return new Encoding_Cp1250 ( ) ; else if ( encoding . equals ( "Cp1251" ) ) return new Encoding_Cp1251 ( ) ; else if ( encoding . equals ( "Cp1252" ) ) return new Encoding_Cp1252 ( ) ; else if ( encoding . equals ( "Cp1253" ) ) return new Encoding_Cp1253 ( ) ; else if ( encoding . equals ( "Cp1254" ) ) return new Encoding_Cp1254 ( ) ; else if ( encoding . equals ( "Cp1255" ) ) return new Encoding_Cp1255 ( ) ; else if ( encoding . equals ( "Cp1256" ) ) return new Encoding_Cp1256 ( ) ; else if ( encoding . equals ( "Cp1257" ) ) return new Encoding_Cp1257 ( ) ; else if ( encoding . equals ( "Cp437" ) ) return new Encoding_Cp437 ( ) ; else if ( encoding . equals ( "Cp737" ) ) return new Encoding_Cp737 ( ) ; else if ( encoding . equals ( "Cp775" ) ) return new Encoding_Cp775 ( ) ; else if ( encoding . equals ( "Cp850" ) ) return new Encoding_Cp850 ( ) ; else if ( encoding . equals ( "Cp852" ) ) return new Encoding_Cp852 ( ) ; else if ( encoding . equals ( "Cp857" ) ) return new Encoding_Cp857 ( ) ; else if ( encoding . equals ( "Cp858" ) ) return new Encoding_Cp858 ( ) ; else if ( encoding . equals ( "Cp860" ) ) return new Encoding_Cp860 ( ) ; else if ( encoding . equals ( "Cp861" ) ) return new Encoding_Cp861 ( ) ; else if ( encoding . equals ( "Cp862" ) ) return new Encoding_Cp862 ( ) ; else if ( encoding . equals ( "Cp863" ) ) return new Encoding_Cp863 ( ) ; else if ( encoding . equals ( "Cp864" ) ) return new Encoding_Cp864 ( ) ; else if ( encoding . equals ( "Cp865" ) ) return new Encoding_Cp865 ( ) ; else if ( encoding . equals ( "Cp866" ) ) return new Encoding_Cp866 ( ) ; else if ( encoding . equals ( "Cp869" ) ) return new Encoding_Cp869 ( ) ; else if ( encoding . equals ( "ISO8859_1" ) ) return new Encoding_ISO8859_1 ( ) ; else if ( encoding . equals ( "ISO8859_2" ) ) return new Encoding_ISO8859_2 ( ) ; else if ( encoding . equals ( "ISO8859_3" ) ) return new Encoding_ISO8859_3 ( ) ; else if ( encoding . equals ( "ISO8859_4" ) ) return new Encoding_ISO8859_4 ( ) ; else if ( encoding . equals ( "ISO8859_5" ) ) return new Encoding_ISO8859_5 ( ) ; else if ( encoding . equals ( "ISO8859_6" ) ) return new Encoding_ISO8859_6 ( ) ; else if ( encoding . equals ( "ISO8859_7" ) ) return new Encoding_ISO8859_7 ( ) ; else if ( encoding . equals ( "ISO8859_8" ) ) return new Encoding_ISO8859_8 ( ) ; else if ( encoding . equals ( "ISO8859_9" ) ) return new Encoding_ISO8859_9 ( ) ; else if ( encoding . equals ( "ISO8859_13" ) ) return new Encoding_ISO8859_13 ( ) ; else return new Encoding_NotOneByte ( encoding ) ; }
void test35 ( ) throws Throwable { int int0 = EncodingFactory . getCharacterSetSize ( 1178 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharacterSetSize ( int characterSetId ) { for ( int i = 0 ; i < CHARSET_MAXIMUM_SIZE . length ; i + + ) { if ( CHARSET_MAXIMUM_SIZE [ i ] [ 0 ] = = characterSetId ) return CHARSET_MAXIMUM_SIZE [ i ] [ 1 ] ; } / / let's assume that default length is 1 return 1 ; }
void test36 ( ) throws Throwable { int int0 = EncodingFactory . getCharacterSetSize ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharacterSetSize ( int characterSetId ) { for ( int i = 0 ; i < CHARSET_MAXIMUM_SIZE . length ; i + + ) { if ( CHARSET_MAXIMUM_SIZE [ i ] [ 0 ] = = characterSetId ) return CHARSET_MAXIMUM_SIZE [ i ] [ 1 ] ; } / / let's assume that default length is 1 return 1 ; }
void test37 ( ) throws Throwable { Encoding_NotOneByte encoding_NotOneByte0 = ( Encoding_NotOneByte ) EncodingFactory . getEncoding ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test38 ( ) throws Throwable { char [ ] charArray0 = new char [ 1 ] ; Encoding_NotOneByte encoding_NotOneByte0 = ( Encoding_NotOneByte ) EncodingFactory . getEncoding ( ( String ) null , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test40 ( ) throws Throwable { char [ ] charArray0 = new char [ 1 ] ; Encoding_NotOneByte encoding_NotOneByte0 = ( Encoding_NotOneByte ) EncodingFactory . getEncoding ( "NONE" , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test72 ( ) throws Throwable { String string0 = EncodingFactory . getIscEncoding ( "ISO8859_1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIscEncoding ( String javaEncoding ) { if ( javaEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; return javaEncodings . get ( javaEncoding . toLowerCase ( ) ) ; }
void test73 ( ) throws Throwable { String string0 = EncodingFactory . getIscEncoding ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIscEncoding ( String javaEncoding ) { if ( javaEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; return javaEncodings . get ( javaEncoding . toLowerCase ( ) ) ; }
void test74 ( ) throws Throwable { int int0 = EncodingFactory . getIscEncodingSize ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIscEncodingSize ( String iscEncoding ) { if ( iscEncoding = = null ) { return 1 ; } if ( ! encodingSizesLoaded ) loadEncodingSizes ( ) ; Byte result = iscEncodingSizes . get ( iscEncoding . toLowerCase ( ) ) ; if ( result = = null ) return 1 ; else return result . byteValue ( ) ; }
void test75 ( ) throws Throwable { int int0 = EncodingFactory . getIscEncodingSize ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIscEncodingSize ( String iscEncoding ) { if ( iscEncoding = = null ) { return 1 ; } if ( ! encodingSizesLoaded ) loadEncodingSizes ( ) ; Byte result = iscEncodingSizes . get ( iscEncoding . toLowerCase ( ) ) ; if ( result = = null ) return 1 ; else return result . byteValue ( ) ; }
void test76 ( ) throws Throwable { int int0 = EncodingFactory . getIscEncodingSize ( "ISO8859_4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIscEncodingSize ( String iscEncoding ) { if ( iscEncoding = = null ) { return 1 ; } if ( ! encodingSizesLoaded ) loadEncodingSizes ( ) ; Byte result = iscEncodingSizes . get ( iscEncoding . toLowerCase ( ) ) ; if ( result = = null ) return 1 ; else return result . byteValue ( ) ; }
void test77 ( ) throws Throwable { String string0 = EncodingFactory . getJavaEncoding ( " - N : Q ! CVA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncoding ( String iscEncoding ) { if ( iscEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = iscEncodings . get ( iscEncoding . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test78 ( ) throws Throwable { String string0 = EncodingFactory . getJavaEncoding ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncoding ( String iscEncoding ) { if ( iscEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = iscEncodings . get ( iscEncoding . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test79 ( ) throws Throwable { String string0 = EncodingFactory . getJavaEncoding ( "utf8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncoding ( String iscEncoding ) { if ( iscEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = iscEncodings . get ( iscEncoding . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test80 ( ) throws Throwable { String string0 = EncodingFactory . getJavaEncodingForAlias ( " - N : Q ! CVA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncodingForAlias ( String javaAlias ) { if ( javaAlias = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = javaAliases . get ( javaAlias . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test81 ( ) throws Throwable { String string0 = EncodingFactory . getJavaEncodingForAlias ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncodingForAlias ( String javaAlias ) { if ( javaAlias = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = javaAliases . get ( javaAlias . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test82 ( ) throws Throwable { String string0 = EncodingFactory . getJavaEncodingForAlias ( "Cp1255" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncodingForAlias ( String javaAlias ) { if ( javaAlias = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = javaAliases . get ( javaAlias . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test0 ( ) throws Throwable { Encoding_ISO8859_6 encoding_ISO8859_6_0 = new Encoding_ISO8859_6 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_6_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_ISO8859_4 encoding_ISO8859_4_0 = new Encoding_ISO8859_4 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_4_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { Encoding_ISO8859_8 encoding_ISO8859_8_0 = new Encoding_ISO8859_8 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_ISO8859_8_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test2 ( ) throws Throwable { Encoding_Cp858 encoding_Cp858_0 = new Encoding_Cp858 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp858_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp1254 encoding_Cp1254_0 = new Encoding_Cp1254 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1254_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp852 encoding_Cp852_0 = new Encoding_Cp852 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp852_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test1 ( ) throws Throwable { Encoding_Cp1257 encoding_Cp1257_0 = new Encoding_Cp1257 ( ) ; char [ ] charArray0 = new char [ 3 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = encoding_Cp1257_0 . encodeToCharset ( charArray0 , 1028 , ( - 219 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int encodeToCharset ( char [ ] in , int off , int len , byte [ ] out ) { return super . encodeToCharset ( charToByte , in , off , len , out ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; fBCachedBlob0 . getSynchronizationObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; FBCachedBlob fBCachedBlob1 = ( FBCachedBlob ) fBCachedBlob0 . detach ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; boolean boolean0 = fBCachedBlob0 . isSegmented ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; long long0 = fBCachedBlob0 . length ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; fBCachedBlob0 . free ( ) ; byte [ ] byteArray1 = fBCachedBlob0 . getBytes ( ( long ) ( byte ) 0 , ( int ) ( byte ) ( - 104 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytes ( String value ) { if ( value ! = null ) return value . getBytes ( ) ; else return null ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) fBCachedBlob0 . getBinaryStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; fBCachedBlob0 . free ( ) ; InputStream inputStream0 = fBCachedBlob0 . getBinaryStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getBinaryStream ( ) throws SQLException { if ( blobData = = null ) return STREAM_NULL_VALUE ; return new ByteArrayInputStream ( blobData ) ; }
void test0 ( ) throws Throwable { FBDriverPropertyManager fBDriverPropertyManager0 = new FBDriverPropertyManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; DriverPropertyInfo driverPropertyInfo0 = new DriverPropertyInfo ( "isc_dpb_isc_dpb_set_db_charse" , "isc_dpb_isc_dpb_set_db_charse" ) ; properties0 . put ( ( Object ) "isc_dpb_isc_dpb_set_db_charse" , ( Object ) driverPropertyInfo0 ) ; Map < String , String > map0 = FBDriverPropertyManager . normalize ( ( String ) null , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "encoding" , ( Object ) "encoding" ) ; Map < String , String > map0 = FBDriverPropertyManager . normalize ( "" , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test3 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "UTF8" , ( Object ) "isc_dpb_isc_dpb_set_db_charse" ) ; Map < String , String > map0 = FBDriverPropertyManager . normalize ( ( String ) null , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test4 ( ) throws Throwable { String string0 = FBDriverPropertyManager . getCanonicalName ( "encoding" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCanonicalName ( String propertyName ) { return FBDriverPropertyManager . getCanonicalName ( propertyName ) ; }
void test5 ( ) throws Throwable { String string0 = FBDriverPropertyManager . getCanonicalName ( "Z ) > + IL < ? o% = C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCanonicalName ( String propertyName ) { return FBDriverPropertyManager . getCanonicalName ( propertyName ) ; }
void test6 ( ) throws Throwable { String string0 = FBDriverPropertyManager . getCanonicalName ( "isc_dpb_lc_ctype" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCanonicalName ( String propertyName ) { return FBDriverPropertyManager . getCanonicalName ( propertyName ) ; }
void test7 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; Map < String , String > map0 = FBDriverPropertyManager . normalize ( " } %xjR51\"6 | SC ? 8 < { " , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test8 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; Map < String , String > map0 = FBDriverPropertyManager . normalize ( "Z ) > + IL < ? o% = C" , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test9 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; DriverPropertyInfo driverPropertyInfo0 = new DriverPropertyInfo ( "isc_dpb_isc_dpb_set_db_charse" , "isc_dpb_isc_dpb_set_db_charse" ) ; properties0 . put ( ( Object ) "isc_dpb_isc_dpb_set_db_charse" , ( Object ) driverPropertyInfo0 ) ; DriverPropertyInfo [ ] driverPropertyInfoArray0 = FBDriverPropertyManager . getDriverPropertyInfo ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DriverPropertyInfo [ ] getDriverPropertyInfo ( Properties props ) { List < DriverPropertyInfo > result = new ArrayList < DriverPropertyInfo > ( ) ; / / TODO : Replace with iterating over stringPropertyNames ( ) when Java 5 support is dropped for ( Enumeration propertyNames = props . propertyNames ( ) ; propertyNames . hasMoreElements ( ) ; ) { String propName = ( String ) propertyNames . nextElement ( ) ; Object propValue = props . getProperty ( propName ) ; PropertyInfo propInfo = aliases . get ( propName ) ; / / if the specified property is not an alias , check / / the full list if ( propInfo = = null ) { String tempKey = propName ; if ( ! tempKey . startsWith ( FBConnectionHelper . DPB_PREFIX ) ) tempKey = FBConnectionHelper . DPB_PREFIX + tempKey ; propInfo = dpbMap . get ( tempKey ) ; } DriverPropertyInfo driverPropInfo = new DriverPropertyInfo ( propName , propValue ! = null ? propValue . toString ( ) : "" ) ; if ( propInfo ! = null ) driverPropInfo . description = propInfo . description ; result . add ( driverPropInfo ) ; } return result . toArray ( new DriverPropertyInfo [ result . size ( ) ] ) ; }
void test10 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "encoding" , ( Object ) "encoding" ) ; DriverPropertyInfo [ ] driverPropertyInfoArray0 = FBDriverPropertyManager . getDriverPropertyInfo ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DriverPropertyInfo [ ] getDriverPropertyInfo ( Properties props ) { List < DriverPropertyInfo > result = new ArrayList < DriverPropertyInfo > ( ) ; / / TODO : Replace with iterating over stringPropertyNames ( ) when Java 5 support is dropped for ( Enumeration propertyNames = props . propertyNames ( ) ; propertyNames . hasMoreElements ( ) ; ) { String propName = ( String ) propertyNames . nextElement ( ) ; Object propValue = props . getProperty ( propName ) ; PropertyInfo propInfo = aliases . get ( propName ) ; / / if the specified property is not an alias , check / / the full list if ( propInfo = = null ) { String tempKey = propName ; if ( ! tempKey . startsWith ( FBConnectionHelper . DPB_PREFIX ) ) tempKey = FBConnectionHelper . DPB_PREFIX + tempKey ; propInfo = dpbMap . get ( tempKey ) ; } DriverPropertyInfo driverPropInfo = new DriverPropertyInfo ( propName , propValue ! = null ? propValue . toString ( ) : "" ) ; if ( propInfo ! = null ) driverPropInfo . description = propInfo . description ; result . add ( driverPropInfo ) ; } return result . toArray ( new DriverPropertyInfo [ result . size ( ) ] ) ; }
void test11 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "UTF8" , ( Object ) "isc_dpb_isc_dpb_set_db_charse" ) ; DriverPropertyInfo [ ] driverPropertyInfoArray0 = FBDriverPropertyManager . getDriverPropertyInfo ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DriverPropertyInfo [ ] getDriverPropertyInfo ( Properties props ) { List < DriverPropertyInfo > result = new ArrayList < DriverPropertyInfo > ( ) ; / / TODO : Replace with iterating over stringPropertyNames ( ) when Java 5 support is dropped for ( Enumeration propertyNames = props . propertyNames ( ) ; propertyNames . hasMoreElements ( ) ; ) { String propName = ( String ) propertyNames . nextElement ( ) ; Object propValue = props . getProperty ( propName ) ; PropertyInfo propInfo = aliases . get ( propName ) ; / / if the specified property is not an alias , check / / the full list if ( propInfo = = null ) { String tempKey = propName ; if ( ! tempKey . startsWith ( FBConnectionHelper . DPB_PREFIX ) ) tempKey = FBConnectionHelper . DPB_PREFIX + tempKey ; propInfo = dpbMap . get ( tempKey ) ; } DriverPropertyInfo driverPropInfo = new DriverPropertyInfo ( propName , propValue ! = null ? propValue . toString ( ) : "" ) ; if ( propInfo ! = null ) driverPropInfo . description = propInfo . description ; result . add ( driverPropInfo ) ; } return result . toArray ( new DriverPropertyInfo [ result . size ( ) ] ) ; }
void test9 ( ) throws Throwable { FBClob fBClob0 = new FBClob ( ( FBBlob ) null ) ; InputStream inputStream0 = fBClob0 . getAsciiStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getAsciiStream ( ) throws SQLException { InputStream inputStream = null ; if ( wrappedBlob ! = null ) { inputStream = wrappedBlob . getBinaryStream ( ) ; } return inputStream ; }
void test0 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 12 ) ; String string0 = fBEscapedParser0 . escapeToNative ( "escape" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test2 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 3 ) ) ; String string0 = fBEscapedParser0 . escapeToNative ( "call" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test3 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 4 ) ) ; String string0 = fBEscapedParser0 . escapeToNative ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastState ( ) { return lastState ; }
void test4 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 138 ) ; String string0 = fBEscapedParser0 . escapeToNative ( "t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastState ( ) { return lastState ; }
void test5 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 1235 ) ) ; String string0 = fBEscapedParser0 . escapeToNative ( "ts" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test6 ( ) throws Throwable { boolean boolean0 = FBEscapedParser . supportsLikeEscapeClause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsLikeEscapeClause ( ) throws SQLException { return true ; }
void test7 ( ) throws Throwable { boolean boolean0 = FBEscapedParser . supportsStoredProcedures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsStoredProcedures ( ) throws SQLException { return true ; }
void test9 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 1333 ) ) ; fBEscapedParser0 . switchState ( '\'' ) ; fBEscapedParser0 . switchState ( '\'' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastState ( ) { return lastState ; }
void test10 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 505 ) ; String string0 = fBEscapedParser0 . parse ( "\"$U { * ' / gP { t\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test11 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 53 ) ; fBEscapedParser0 . switchState ( ' } ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test12 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 57 ) ) ; String string0 = fBEscapedParser0 . parse ( " ; { call" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test13 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 15 ) ) ; String string0 = fBEscapedParser0 . parse ( " { ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test14 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 16 ) ) ; boolean boolean0 = fBEscapedParser0 . checkForEscapes ( " { d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastState ( ) { return lastState ; }
void test15 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 641 ) ) ; String string0 = fBEscapedParser0 . parse ( "O { escape" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test16 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 57 ) ) ; String string0 = fBEscapedParser0 . parse ( " { fn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test17 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 1659 ) ; boolean boolean0 = fBEscapedParser0 . checkForEscapes ( " { oj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test18 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 1235 ) ) ; String string0 = fBEscapedParser0 . parse ( "ts" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastState ( ) { return lastState ; }
void test19 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 16 ) ) ; StringBuffer stringBuffer0 = new StringBuffer ( "Pg ; ? ) Ay ? ~4 < p2pP" ) ; fBEscapedParser0 . processEscaped ( "Pg ; ? ) Ay ? ~4 < p2pP" , stringBuffer0 , stringBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test20 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 4 ) ) ; StringBuffer stringBuffer0 = new StringBuffer ( ) ; StringBuffer stringBuffer1 = new StringBuffer ( ( CharSequence ) "d" ) ; fBEscapedParser0 . processEscaped ( "d" , stringBuffer0 , stringBuffer1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test21 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 12 ) ; String string0 = fBEscapedParser0 . escapeToNative ( " ? bZu | E783HvgF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test23 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( 155 ) ; String string0 = fBEscapedParser0 . escapeToNative ( "oj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test24 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 1333 ) ) ; String string0 = fBEscapedParser0 . convertEscapedFunction ( "SUBSTRI3G ( { 0 } FROM { 1 } FOR2 { t } ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test25 ( ) throws Throwable { FBEscapedParser fBEscapedParser0 = new FBEscapedParser ( ( - 1333 ) ) ; String string0 = fBEscapedParser0 . convertEscapedFunction ( "SUBSTRING ( { 0 } FROM { 1 } FOR { 2 } ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test0 ( ) throws Throwable { FBEscapedFunctionHelper fBEscapedFunctionHelper0 = new FBEscapedFunctionHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = FBEscapedFunctionHelper . convertTemplate ( "OALSE ( { } , { 1 } ) " , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertTemplate ( String functionCall , int mode ) throws FBSQLParseException { String name = parseFunction ( functionCall ) ; String [ ] params = parseArguments ( functionCall ) . toArray ( new String [ 0 ] ) ; String firebirdTemplate = FUNCTION_MAP . get ( name . toUpperCase ( ) ) ; if ( firebirdTemplate ! = null ) return MessageFormat . format ( firebirdTemplate , ( Object [ ] ) params ) ; if ( mode = = FBEscapedParser . USE_STANDARD_UDF ) return convertUsingStandardUDF ( name , params ) ; return null ; }
void test4 ( ) throws Throwable { String string0 = FBEscapedFunctionHelper . convertTemplate ( "atan2 ( uz\"b^Tynf04J~ ] = Z , uz\"b^Tynf04J~ ] = Z ) " , ( - 1504 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertTemplate ( String functionCall , int mode ) throws FBSQLParseException { String name = parseFunction ( functionCall ) ; String [ ] params = parseArguments ( functionCall ) . toArray ( new String [ 0 ] ) ; String firebirdTemplate = FUNCTION_MAP . get ( name . toUpperCase ( ) ) ; if ( firebirdTemplate ! = null ) return MessageFormat . format ( firebirdTemplate , ( Object [ ] ) params ) ; if ( mode = = FBEscapedParser . USE_STANDARD_UDF ) return convertUsingStandardUDF ( name , params ) ; return null ; }
void test6 ( ) throws Throwable { List < String > list0 = FBEscapedFunctionHelper . parseArguments ( "cos ( ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . abs ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String abs ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function abs : " + params . length ) ; return "abs ( " + params [ 0 ] + " ) " ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . acos ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String acos ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function acos : " + params . length ) ; return "acos ( " + params [ 0 ] + " ) " ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . asin ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asin ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function asin : " + params . length ) ; return "asin ( " + params [ 0 ] + " ) " ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . atan ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String atan ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function atan : " + params . length ) ; return "atan ( " + params [ 0 ] + " ) " ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; String string0 = FBEscapedFunctionHelper . atan2 ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String atan2 ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 2 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function atan2 : " + params . length ) ; return "atan2 ( " + params [ 0 ] + " , " + params [ 1 ] + " ) " ; }
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . ceiling ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ceiling ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function ceiling : " + params . length ) ; return "ceiling ( " + params [ 0 ] + " ) " ; }
void test19 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . cos ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cos ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function cos : " + params . length ) ; return "cos ( " + params [ 0 ] + " ) " ; }
void test21 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . cot ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cot ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function cot : " + params . length ) ; return "cot ( " + params [ 0 ] + " ) " ; }
void test23 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . floor ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String floor ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function floor : " + params . length ) ; return "floor ( " + params [ 0 ] + " ) " ; }
void test25 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . log ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String log ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function log : " + params . length ) ; return "ln ( " + params [ 0 ] + " ) " ; }
void test27 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . log10 ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String log10 ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function log10 : " + params . length ) ; return "log10 ( " + params [ 0 ] + " ) " ; }
void test29 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; String string0 = FBEscapedFunctionHelper . mod ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String mod ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 2 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function mod : " + params . length ) ; return "mod ( " + params [ 0 ] + " , " + params [ 1 ] + " ) " ; }
void test33 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . sign ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sign ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function sign : " + params . length ) ; return "sign ( " + params [ 0 ] + " ) " ; }
void test35 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . sin ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sin ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function sin : " + params . length ) ; return "sin ( " + params [ 0 ] + " ) " ; }
void test37 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . sqrt ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String sqrt ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function sqrt : " + params . length ) ; return "sqrt ( " + params [ 0 ] + " ) " ; }
void test39 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . tan ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tan ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function tan : " + params . length ) ; return "tan ( " + params [ 0 ] + " ) " ; }
void test43 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "tan ( null ) " ; String string0 = FBEscapedFunctionHelper . ascii ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ascii ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function ascii : " + params . length ) ; if ( params [ 0 ] = = null | | params [ 0 ] . length ( ) < 1 ) throw new FBSQLParseException ( "Parameter must not be " + "empty or null" ) ; return "ascii_val ( " + params [ 0 ] . charAt ( 0 ) + " ) " ; }
void test45 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . _char ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _char ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function char : " + params . length ) ; return "char ( " + params [ 0 ] + " ) " ; }
void test47 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . lcase ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String lcase ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function lcase : " + params . length ) ; return "lower ( " + params [ 0 ] + " ) " ; }
void test49 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . length ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test51 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . ltrim ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ltrim ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function ltrim : " + params . length ) ; return "ltrim ( " + params [ 0 ] + " ) " ; }
void test53 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String string0 = FBEscapedFunctionHelper . rtrim ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String rtrim ( String [ ] params ) throws FBSQLParseException { if ( params . length ! = 1 ) throw new FBSQLParseException ( "Incorrect number of " + "parameters of function rtrim : " + params . length ) ; return "rtrim ( " + params [ 0 ] + " ) " ; }
void test0 ( ) throws Throwable { FBStatement fBStatement0 = new FBStatement ( ( GDSHelper ) null , 427 , ( - 316 ) , 427 , ( FBObjectListener . StatementListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResultSet executeQuery ( ) throws SQLException { Object syncObject = getSynchronizationObject ( ) ; ( syncObject ) { notifyStatementStarted ( ) ; try { currentRs = null ; prepareFixedStatement ( procedureCall . getSQL ( isSelectableProcedure ( ) ) , true ) ; if ( ! internalExecute ( ! isSelectableProcedure ( ) ) ) throw new FBSQLException ( "No resultset for sql" , FBSQLException . SQL_STATE_NO_RESULT_SET ) ; getResultSet ( ) ; setRequiredTypes ( ) ; return getCurrentResultSet ( ) ; } catch ( GDSException ex ) { throw new FBSQLException ( ex ) ; } } }
void test1 ( ) throws Throwable { InternalTransactionCoordinator . MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator . MetaDataTransactionCoordinator ( ) ; FBPreparedStatement fBPreparedStatement0 = new FBPreparedStatement ( ( GDSHelper ) null , ( - 520 ) , ( - 865 ) , 0 , ( FBObjectListener . StatementListener ) internalTransactionCoordinator_MetaDataTransactionCoordinator0 , ( FBObjectListener . BlobListener ) internalTransactionCoordinator_MetaDataTransactionCoordinator0 ) ; fBPreparedStatement0 . getConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test0 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test1 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; String string0 = fBConnectionProperties0 . getTpbMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test3 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; int int0 = fBConnectionProperties0 . getBlobBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test4 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setBuffersNumber ( 532 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test5 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; boolean boolean0 = fBConnectionProperties0 . isTimestampUsesLocalTimezone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test7 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; String string0 = fBConnectionProperties0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test8 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; String string0 = fBConnectionProperties0 . getDefaultIsolation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test9 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; int int0 = fBConnectionProperties0 . getBuffersNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test10 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; boolean boolean0 = fBConnectionProperties0 . isUseStreamBlobs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test11 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setDefaultResultSetHoldable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test12 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getCharSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test13 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setSocketBufferSize ( 532 ) ; int int0 = fBConnectionProperties0 . getSocketBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test14 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getSqlDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test15 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; boolean boolean0 = fBConnectionProperties0 . isUseStandardUdf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test16 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setPassword ( "isc_dpb_result_set_holdable" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test17 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; boolean boolean0 = fBConnectionProperties0 . isDefaultResultSetHoldable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test18 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getUseTranslation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test19 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; String string0 = fBConnectionProperties0 . getDatabase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test20 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test21 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getNonStandardProperty ( "defaultIsolation" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test22 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; int int0 = fBConnectionProperties0 . getSoTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test23 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setDatabase ( "" ) ; int int0 = fBConnectionProperties0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test24 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getRoleName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test25 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUseStandardUdf ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test26 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setSoTimeout ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test27 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUserName ( " int : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test28 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setBlobBufferSize ( 0 ) ; fBConnectionProperties0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBlobBufferSize ( ) { return connectionProperties . getBlobBufferSize ( ) ; }
void test29 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test30 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setEncoding ( "ISO8859_1" ) ; fBConnectionProperties0 . setEncoding ( " int : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test31 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setNonStandardProperty ( "database" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test32 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setNonStandardProperty ( "type" , "type" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test33 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; int int0 = fBConnectionProperties0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test34 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setType ( "isc_info_sql_sub_type" ) ; int int0 = fBConnectionProperties0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test35 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; boolean boolean0 = fBConnectionProperties0 . equals ( ( Object ) "u / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test36 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setType ( "\"\" / - Nm7nH" ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test37 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setType ( "\"\" / - Nm7nH" ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; FBConnectionProperties fBConnectionProperties2 = new FBConnectionProperties ( ) ; boolean boolean0 = fBConnectionProperties2 . equals ( ( Object ) fBConnectionProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test38 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setDatabase ( "" ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test39 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setDatabase ( "\"\" / - Nm7nH" ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabase ( ) { return this . database ; }
void test40 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setTpbMapping ( "\"\" / - Nm7nH" ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTpbMapping ( ) { return connectionProperties . getTpbMapping ( ) ; }
void test41 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setTpbMapping ( "\"\" / - Nm7nH" ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test42 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBConnectionProperties fBConnectionProperties1 = ( FBConnectionProperties ) fBConnectionProperties0 . clone ( ) ; fBConnectionProperties0 . setDefaultTransactionIsolation ( 0 ) ; boolean boolean0 = fBConnectionProperties0 . equals ( ( Object ) fBConnectionProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test43 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBTpbMapper fBTpbMapper0 = fBConnectionProperties0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test44 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setCharSet ( "" ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = ( DatabaseParameterBufferImp ) fBConnectionProperties0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test45 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setCharSet ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test46 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setCharSet ( "ISO8859_1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test47 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setEncoding ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test48 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setEncoding ( "u / " ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = ( DatabaseParameterBufferImp ) fBConnectionProperties0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test49 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setRoleName ( "" ) ; fBConnectionProperties0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test50 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setRoleName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test51 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setSqlDialect ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test52 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setSqlDialect ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test53 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUseTranslation ( "ql ( NDv / } DYF_3o + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test54 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUseTranslation ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test55 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUseStreamBlobs ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test56 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUseStreamBlobs ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStandardUdf ( ) { return connectionProperties . isUseStandardUdf ( ) ; }
void test57 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUseStandardUdf ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test58 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setTimestampUsesLocalTimezone ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test59 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setTimestampUsesLocalTimezone ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test61 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setDefaultResultSetHoldable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test62 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setNonStandardProperty ( " int : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUseStreamBlobs ( ) { return connectionProperties . isUseStreamBlobs ( ) ; }
void test63 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setNonStandardProperty ( "HY` = oiHp } H [ H2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultResultSetHoldable ( ) { return connectionProperties . isDefaultResultSetHoldable ( ) ; }
void test64 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setNonStandardProperty ( "isc_dpb_result_set_holdable" ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = ( DatabaseParameterBufferImp ) fBConnectionProperties0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test65 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setNonStandardProperty ( "u / " ) ; fBConnectionProperties0 . getDatabaseParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test66 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBTpbMapper fBTpbMapper0 = fBConnectionProperties0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTpbMapping ( String tpbMapping ) { checkNotStarted ( ) ; connectionProperties . setTpbMapping ( tpbMapping ) ; }
void test67 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBTpbMapper fBTpbMapper0 = fBConnectionProperties0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test68 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getMapper ( ) ; fBConnectionProperties0 . setDefaultTransactionIsolation ( 387617 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test69 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . getTransactionParameters ( 1301 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultIsolation ( ) { return connectionProperties . getDefaultIsolation ( ) ; }
void test70 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBTpbMapper fBTpbMapper0 = fBConnectionProperties0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransactionParameterBuffer getTransactionParameters ( int isolation ) { return connectionProperties . getTransactionParameters ( isolation ) ; }
void test72 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBTpbMapper fBTpbMapper0 = fBConnectionProperties0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTransactionParameters ( int isolation , TransactionParameterBuffer tpb ) { checkNotStarted ( ) ; connectionProperties . setTransactionParameters ( isolation , tpb ) ; }
void test73 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; FBTpbMapper fBTpbMapper0 = fBConnectionProperties0 . getMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test1 ( ) throws Throwable { InternalTransactionCoordinator . ManagedTransactionCoordinator internalTransactionCoordinator_ManagedTransactionCoordinator0 = new InternalTransactionCoordinator . ManagedTransactionCoordinator ( ( AbstractConnection ) null ) ; FBPreparedStatement fBPreparedStatement0 = new FBPreparedStatement ( ( GDSHelper ) null , 0 , 0 , 0 , ( FBObjectListener . StatementListener ) internalTransactionCoordinator_ManagedTransactionCoordinator0 , ( FBObjectListener . BlobListener ) internalTransactionCoordinator_ManagedTransactionCoordinator0 ) ; int [ ] intArray0 = fBPreparedStatement0 . executeBatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] executeBatch ( ) throws SQLException { Object syncObject = getSynchronizationObject ( ) ; ( syncObject ) { boolean success = false ; try { notifyStatementStarted ( ) ; List < Integer > results = new ArrayList < Integer > ( batchList . size ( ) ) ; Iterator < Object > iterator = batchList . iterator ( ) ; try { while ( iterator . hasNext ( ) ) { procedureCall = ( FBProcedureCall ) iterator . next ( ) ; executeSingleForBatch ( results ) ; } success = true ; return toArray ( results ) ; } finally { clearBatch ( ) ; } } finally { notifyStatementCompleted ( success ) ; } } }
void test14 ( ) throws Throwable { InternalTransactionCoordinator . MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator . MetaDataTransactionCoordinator ( ) ; FBPreparedStatement fBPreparedStatement0 = new FBPreparedStatement ( ( GDSHelper ) null , 335544324 , 335544324 , 335544324 , ( FBObjectListener . StatementListener ) null , ( FBObjectListener . BlobListener ) internalTransactionCoordinator_MetaDataTransactionCoordinator0 ) ; fBPreparedStatement0 . completeStatement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getMoreResults ( ) throws SQLException { return getMoreResults ( Statement . CLOSE_ALL_RESULTS ) ; }
void test16 ( ) throws Throwable { FBPreparedStatement fBPreparedStatement0 = new FBPreparedStatement ( ( GDSHelper ) null , 310 , ( - 1832 ) , ( - 1832 ) , ( FBObjectListener . StatementListener ) null , ( FBObjectListener . BlobListener ) null ) ; fBPreparedStatement0 . clearParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpdateCount ( ) throws SQLException { if ( isResultSet | | ! hasMoreResults ) return - 1 ; else { try { gdsHelper . getSqlCounts ( fixedStmt ) ; int insCount = fixedStmt . getInsertCount ( ) ; int updCount = fixedStmt . getUpdateCount ( ) ; int delCount = fixedStmt . getDeleteCount ( ) ; int resCount = ( ( updCount > delCount ) ? updCount : delCount ) ; resCount = ( ( resCount > insCount ) ? resCount : insCount ) ; return resCount ; } catch ( GDSException ge ) { throw new FBSQLException ( ge ) ; } finally { hasMoreResults = false ; } } }
void test1 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . othersInsertsAreVisible ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean othersInsertsAreVisible ( int type ) throws SQLException { return false ; }
void test4 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsDifferentTableCorrelationNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsDifferentTableCorrelationNames ( ) throws SQLException { return false ; / / I think }
void test5 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . storesUpperCaseIdentifiers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean storesUpperCaseIdentifiers ( ) throws SQLException { return true ; }
void test6 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsMultipleTransactions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMultipleTransactions ( ) throws SQLException { return true ; }
void test7 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; FBResultSet fBResultSet0 = ( FBResultSet ) fBDatabaseMetaData0 . getTypeInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return connection = = null | | proxy = = null ; }
void test8 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . storesUpperCaseQuotedIdentifiers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean storesUpperCaseQuotedIdentifiers ( ) throws SQLException { return false ; }
void test9 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsMultipleResultSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMultipleResultSets ( ) throws SQLException { return false ; }
void test10 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsOpenCursorsAcrossCommit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOpenCursorsAcrossCommit ( ) throws SQLException { return false ; / / only when commit retaining is executed I think }
void test11 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; int int0 = fBDatabaseMetaData0 . getSQLStateType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSQLStateType ( ) throws SQLException { return DatabaseMetaData . sqlStateSQL99 ; }
void test12 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsMultipleOpenResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMultipleOpenResults ( ) throws SQLException { return false ; }
void test13 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; int [ ] intArray0 = new int [ 2 ] ; FBResultSet fBResultSet0 = ( FBResultSet ) fBDatabaseMetaData0 . getUDTs ( " [ NULL Xid ] " , " [ NULL Xid ] " , " [ NULL Xid ] " , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBeforeFirst ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isBeforeFirst ; }
void test14 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . nullsAreSortedHigh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nullsAreSortedHigh ( ) throws SQLException { / / in Firebird 1 . 5 . x NULLs are always sorted at the end / / in Firebird 2 . 0 . x NULLs are sorted low return false ; }
void test15 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsSubqueriesInQuantifieds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsSubqueriesInQuantifieds ( ) throws SQLException { return true ; }
void test16 ( ) throws Throwable { FBDatabaseMetaData fBDatabaseMetaData0 = new FBDatabaseMetaData ( ( GDSHelper ) null ) ; boolean boolean0 = fBDatabaseMetaData0 . supportsTransactionIsolationLevel ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsTransactionIsolationLevel ( int level ) throws SQLException { switch ( level ) { case Connection . TRANSACTION_NONE : return false ; case Connection . TRANSACTION_READ_COMMITTED : return true ; / / true soon case Connection . TRANSACTION_READ_UNCOMMITTED : return false ; case Connection . TRANSACTION_REPEATABLE_READ : return true ; / / ? ? case Connection . TRANSACTION_SERIALIZABLE : return true ; / / ? ? ? ? default : return false ; } }
void test0 ( ) throws Throwable { Map < String , Integer > map0 = FBConnectionHelper . getDpbMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test2 ( ) throws Throwable { FBConnectionHelper fBConnectionHelper0 = new FBConnectionHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { Boolean boolean0 = Boolean . valueOf ( false ) ; Boolean boolean1 = ( Boolean ) FBConnectionHelper . parseDpbString ( "3 ? RM" , ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object parseDpbString ( String name , Object value ) { / / for the sake of unification we allow passing boolean , byte and integer / / types too , we loose some cycles here , but that is called relatively / / rarely , a tradeoff between code maintainability and CPU cycles . if ( value instanceof Boolean | | value instanceof Byte | | value instanceof Integer ) return value ; / / if passed value is not string , throw an exception if ( value ! = null & & ! ( value instanceof String ) ) throw new ClassCastException ( value . getClass ( ) . getName ( ) ) ; Integer type = dpbParameterTypes . get ( name ) ; if ( type = = null ) type = Integer . valueOf ( TYPE_UNKNOWN ) ; switch ( type . intValue ( ) ) { case TYPE_BOOLEAN : return "" . equals ( value ) ? Boolean . TRUE : Boolean . valueOf ( ( String ) value ) ; case TYPE_BYTE : return Byte . valueOf ( ( String ) value ) ; case TYPE_INT : return Integer . valueOf ( ( String ) value ) ; case TYPE_STRING : return value ; case TYPE_UNKNOWN : default : / * set the value of the DPB by probing to convert string * into int or byte value , this method gives very good result * for guessing the method to call from the actual value ; * null values and empty strings are assumed to be booleans . * / if ( value = = null | | "" . equals ( value ) ) return Boolean . TRUE ; try { / / try to deal with a value as a byte or int int intValue = Integer . parseInt ( ( String ) value ) ; / / TODO Find out if this is intentional if ( intValue < 256 ) return Byte . valueOf ( ( byte ) intValue ) ; else return Integer . valueOf ( intValue ) ; } catch ( NumberFormatException nfex ) { / / all else fails : return as is ( string ) return value ; } } }
void test5 ( ) throws Throwable { Integer integer0 = ( Integer ) FBConnectionHelper . parseDpbString ( "3 ? RM" , "1314" ) ; Integer integer1 = ( Integer ) FBConnectionHelper . parseDpbString ( "1314" , ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object parseDpbString ( String name , Object value ) { / / for the sake of unification we allow passing boolean , byte and integer / / types too , we loose some cycles here , but that is called relatively / / rarely , a tradeoff between code maintainability and CPU cycles . if ( value instanceof Boolean | | value instanceof Byte | | value instanceof Integer ) return value ; / / if passed value is not string , throw an exception if ( value ! = null & & ! ( value instanceof String ) ) throw new ClassCastException ( value . getClass ( ) . getName ( ) ) ; Integer type = dpbParameterTypes . get ( name ) ; if ( type = = null ) type = Integer . valueOf ( TYPE_UNKNOWN ) ; switch ( type . intValue ( ) ) { case TYPE_BOOLEAN : return "" . equals ( value ) ? Boolean . TRUE : Boolean . valueOf ( ( String ) value ) ; case TYPE_BYTE : return Byte . valueOf ( ( String ) value ) ; case TYPE_INT : return Integer . valueOf ( ( String ) value ) ; case TYPE_STRING : return value ; case TYPE_UNKNOWN : default : / * set the value of the DPB by probing to convert string * into int or byte value , this method gives very good result * for guessing the method to call from the actual value ; * null values and empty strings are assumed to be booleans . * / if ( value = = null | | "" . equals ( value ) ) return Boolean . TRUE ; try { / / try to deal with a value as a byte or int int intValue = Integer . parseInt ( ( String ) value ) ; / / TODO Find out if this is intentional if ( intValue < 256 ) return Byte . valueOf ( ( byte ) intValue ) ; else return Integer . valueOf ( intValue ) ; } catch ( NumberFormatException nfex ) { / / all else fails : return as is ( string ) return value ; } } }
void test6 ( ) throws Throwable { Byte byte0 = ( Byte ) FBConnectionHelper . parseDpbString ( "1" , "1" ) ; Byte byte1 = ( Byte ) FBConnectionHelper . parseDpbString ( "1" , ( Object ) byte0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object parseDpbString ( String name , Object value ) { / / for the sake of unification we allow passing boolean , byte and integer / / types too , we loose some cycles here , but that is called relatively / / rarely , a tradeoff between code maintainability and CPU cycles . if ( value instanceof Boolean | | value instanceof Byte | | value instanceof Integer ) return value ; / / if passed value is not string , throw an exception if ( value ! = null & & ! ( value instanceof String ) ) throw new ClassCastException ( value . getClass ( ) . getName ( ) ) ; Integer type = dpbParameterTypes . get ( name ) ; if ( type = = null ) type = Integer . valueOf ( TYPE_UNKNOWN ) ; switch ( type . intValue ( ) ) { case TYPE_BOOLEAN : return "" . equals ( value ) ? Boolean . TRUE : Boolean . valueOf ( ( String ) value ) ; case TYPE_BYTE : return Byte . valueOf ( ( String ) value ) ; case TYPE_INT : return Integer . valueOf ( ( String ) value ) ; case TYPE_STRING : return value ; case TYPE_UNKNOWN : default : / * set the value of the DPB by probing to convert string * into int or byte value , this method gives very good result * for guessing the method to call from the actual value ; * null values and empty strings are assumed to be booleans . * / if ( value = = null | | "" . equals ( value ) ) return Boolean . TRUE ; try { / / try to deal with a value as a byte or int int intValue = Integer . parseInt ( ( String ) value ) ; / / TODO Find out if this is intentional if ( intValue < 256 ) return Byte . valueOf ( ( byte ) intValue ) ; else return Integer . valueOf ( intValue ) ; } catch ( NumberFormatException nfex ) { / / all else fails : return as is ( string ) return value ; } } }
void test7 ( ) throws Throwable { Boolean boolean0 = ( Boolean ) FBConnectionHelper . parseDpbString ( "9" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object parseDpbString ( String name , Object value ) { / / for the sake of unification we allow passing boolean , byte and integer / / types too , we loose some cycles here , but that is called relatively / / rarely , a tradeoff between code maintainability and CPU cycles . if ( value instanceof Boolean | | value instanceof Byte | | value instanceof Integer ) return value ; / / if passed value is not string , throw an exception if ( value ! = null & & ! ( value instanceof String ) ) throw new ClassCastException ( value . getClass ( ) . getName ( ) ) ; Integer type = dpbParameterTypes . get ( name ) ; if ( type = = null ) type = Integer . valueOf ( TYPE_UNKNOWN ) ; switch ( type . intValue ( ) ) { case TYPE_BOOLEAN : return "" . equals ( value ) ? Boolean . TRUE : Boolean . valueOf ( ( String ) value ) ; case TYPE_BYTE : return Byte . valueOf ( ( String ) value ) ; case TYPE_INT : return Integer . valueOf ( ( String ) value ) ; case TYPE_STRING : return value ; case TYPE_UNKNOWN : default : / * set the value of the DPB by probing to convert string * into int or byte value , this method gives very good result * for guessing the method to call from the actual value ; * null values and empty strings are assumed to be booleans . * / if ( value = = null | | "" . equals ( value ) ) return Boolean . TRUE ; try { / / try to deal with a value as a byte or int int intValue = Integer . parseInt ( ( String ) value ) ; / / TODO Find out if this is intentional if ( intValue < 256 ) return Byte . valueOf ( ( byte ) intValue ) ; else return Integer . valueOf ( intValue ) ; } catch ( NumberFormatException nfex ) { / / all else fails : return as is ( string ) return value ; } } }
void test9 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; fBConnectionProperties0 . setUserName ( "9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketBufferSize ( ) { return connectionProperties . getSocketBufferSize ( ) ; }
void test10 ( ) throws Throwable { Boolean boolean0 = ( Boolean ) FBConnectionHelper . parseDpbString ( "w7" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object parseDpbString ( String name , Object value ) { / / for the sake of unification we allow passing boolean , byte and integer / / types too , we loose some cycles here , but that is called relatively / / rarely , a tradeoff between code maintainability and CPU cycles . if ( value instanceof Boolean | | value instanceof Byte | | value instanceof Integer ) return value ; / / if passed value is not string , throw an exception if ( value ! = null & & ! ( value instanceof String ) ) throw new ClassCastException ( value . getClass ( ) . getName ( ) ) ; Integer type = dpbParameterTypes . get ( name ) ; if ( type = = null ) type = Integer . valueOf ( TYPE_UNKNOWN ) ; switch ( type . intValue ( ) ) { case TYPE_BOOLEAN : return "" . equals ( value ) ? Boolean . TRUE : Boolean . valueOf ( ( String ) value ) ; case TYPE_BYTE : return Byte . valueOf ( ( String ) value ) ; case TYPE_INT : return Integer . valueOf ( ( String ) value ) ; case TYPE_STRING : return value ; case TYPE_UNKNOWN : default : / * set the value of the DPB by probing to convert string * into int or byte value , this method gives very good result * for guessing the method to call from the actual value ; * null values and empty strings are assumed to be booleans . * / if ( value = = null | | "" . equals ( value ) ) return Boolean . TRUE ; try { / / try to deal with a value as a byte or int int intValue = Integer . parseInt ( ( String ) value ) ; / / TODO Find out if this is intentional if ( intValue < 256 ) return Byte . valueOf ( ( byte ) intValue ) ; else return Integer . valueOf ( intValue ) ; } catch ( NumberFormatException nfex ) { / / all else fails : return as is ( string ) return value ; } } }
void test11 ( ) throws Throwable { FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties ( ) ; Properties properties0 = new Properties ( ( Properties ) null ) ; FBConnectionHelper . processTpbMapping ( ( GDS ) null , ( FirebirdConnectionProperties ) fBConnectionProperties0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTimestampUsesLocalTimezone ( ) { return connectionProperties . isTimestampUsesLocalTimezone ( ) ; }
void test0 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; int int0 = fBProcedureParam0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test1 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 857 , "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test2 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; int int0 = fBProcedureParam0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test3 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; fBProcedureParam0 . isValueSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test4 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; String string0 = fBProcedureParam0 . getParamValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test5 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; fBProcedureParam0 . setIndex ( 852407 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test6 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; int int0 = fBProcedureParam0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test7 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; fBProcedureParam0 . setType ( ( - 510 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test8 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 857 , "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isParam ( ) { return isParam ; }
void test9 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; fBProcedureParam0 . setValue ( ( Object ) " ] sKi ? \"pn6" ) ; FBProcedureParam fBProcedureParam1 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; boolean boolean0 = fBProcedureParam0 . equals ( ( Object ) fBProcedureParam1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValueSet ( ) { return valueSet ; }
void test10 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 857 , "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( Object value ) throws SQLException { if ( ! isParam ) throw new FBSQLException ( "Cannot set parameter , since it is constant . " , FBSQLException . SQL_STATE_INVALID_PARAM_TYPE ) ; this . value = value ; this . valueSet = true ; }
void test11 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; boolean boolean0 = fBProcedureParam0 . equals ( ( Object ) ( - 510 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test12 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; FBProcedureParam fBProcedureParam1 = new FBProcedureParam ( ( - 510 ) , "' > ; hZqwZ } - Z\"4tc" ) ; boolean boolean0 = fBProcedureParam0 . equals ( ( Object ) fBProcedureParam1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test13 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; fBProcedureParam0 . setValue ( ( Object ) " ] sKi ? \"pn6" ) ; FBProcedureParam fBProcedureParam1 = ( FBProcedureParam ) fBProcedureParam0 . clone ( ) ; FBProcedureParam fBProcedureParam2 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; boolean boolean0 = fBProcedureParam2 . equals ( ( Object ) fBProcedureParam1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValueSet ( ) { return valueSet ; }
void test14 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; int int0 = fBProcedureParam0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test15 ( ) throws Throwable { FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( 1008 , " ] sKi ? \"pn6" ) ; fBProcedureParam0 . setValue ( ( Object ) " ] sKi ? \"pn6" ) ; int int0 = fBProcedureParam0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValueSet ( ) { return valueSet ; }
void test0 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean relative ( int row ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test1 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test2 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test3 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test4 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) fBManagedConnectionFactory0 . getGDS ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; org . firebirdsql . gds . impl . jni . isc_stmt_handle_impl isc_stmt_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_stmt_handle_impl ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) javaGDSImpl0 , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; byte [ ] byteArray0 = new byte [ 6 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( gDSHelper0 , ( Synchronizable ) fBCachedBlob0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , ( - 682 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) throws SQLException { SQLException receivedException = null ; if ( handler ! = null ) { try { handler . close ( ) ; } catch ( SQLException se ) { receivedException = se ; } } if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException se ) { / / We want the exception of closing the physical connection to be the first if ( receivedException ! = null ) { se . setNextException ( receivedException ) ; } receivedException = se ; } finally { connection = null ; } } if ( receivedException ! = null ) { throw receivedException ; } }
void test5 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test6 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test7 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test8 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , ( - 673 ) , ( - 673 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test9 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test10 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test11 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test12 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test13 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test14 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setAllRowsFetched ( true ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test15 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] [ ] getNextRow ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return _nextRow ; }
void test16 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test17 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test18 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 663 , 663 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean next ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; setIsBeforeFirst ( false ) ; setIsFirst ( false ) ; setIsLast ( false ) ; setIsAfterLast ( false ) ; if ( isEmpty ( ) ) return false ; else if ( getNextRow ( ) = = null | | ( maxRows ! = 0 & & getRowNum ( ) = = maxRows ) ) { setIsAfterLast ( true ) ; fetcherListener . allRowsFetched ( this ) ; setRowNum ( 0 ) ; return false ; } else { try { fetcherListener . rowChanged ( this , getNextRow ( ) ) ; fetch ( ) ; setRowNum ( getRowNum ( ) + 1 ) ; if ( getRowNum ( ) = = 1 ) setIsFirst ( true ) ; if ( ( getNextRow ( ) = = null ) | | ( maxRows ! = 0 & & getRowNum ( ) = = maxRows ) ) { setIsLast ( true ) ; } return true ; } catch ( SQLException sqle ) { throw sqle ; } } }
void test19 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) fBManagedConnectionFactory0 . getGDS ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; org . firebirdsql . gds . impl . jni . isc_stmt_handle_impl isc_stmt_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_stmt_handle_impl ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) javaGDSImpl0 , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; byte [ ] byteArray0 = new byte [ 6 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( gDSHelper0 , ( Synchronizable ) fBCachedBlob0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLast ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isLast ; }
void test20 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowNum ( ) { return rowNum ; }
void test21 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , ( - 673 ) , ( - 673 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test22 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 32767 , 32767 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBeforeFirst ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isBeforeFirst ; }
void test23 ( ) throws Throwable { InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; FBStatementFetcher fBStatementFetcher0 = new FBStatementFetcher ( ( GDSHelper ) null , ( Synchronizable ) internalTransactionCoordinator0 , ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , ( FBObjectListener . FetcherListener ) null , 0 , 2002 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test0 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; int int0 = fBDriver0 . getMinorVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinorVersion ( ) { return 0 ; }
void test1 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; Properties properties0 = new Properties ( ) ; DriverPropertyInfo [ ] driverPropertyInfoArray0 = fBDriver0 . getPropertyInfo ( "jdbc : firebirdsql : java : You cannot commit a closed connecton . " , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DriverPropertyInfo [ ] getPropertyInfo ( String url , Properties info ) throws SQLException { return FBDriverPropertyManager . getDriverPropertyInfo ( info ) ; }
void test3 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; boolean boolean0 = fBDriver0 . jdbcCompliant ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean jdbcCompliant ( ) { return true ; }
void test4 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; int int0 = fBDriver0 . getMajorVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMajorVersion ( ) { return 2 ; }
void test5 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; Properties properties0 = new Properties ( ) ; Connection connection0 = fBDriver0 . connect ( "ThisGstatement is alread" , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void connect ( ) throws SQLException { if ( connected ) { throw new IllegalStateException ( "Connect called while already connected" ) ; } DatabaseParameterBuffer dpb = gds . createDatabaseParameterBuffer ( ) ; dpb . addArgument ( DatabaseParameterBuffer . USER , user ) ; dpb . addArgument ( DatabaseParameterBuffer . PASSWORD , password ) ; try { String connString = GDSFactory . getDatabasePath ( gds . getType ( ) , host , port , database ) ; gds . iscAttachDatabase ( connString , dbHandle , dpb ) ; } catch ( GDSException e ) { throw new FBSQLException ( e ) ; } connected = true ; eventDispatcher = new EventDispatcher ( ) ; dispatchThread = new Thread ( eventDispatcher ) ; dispatchThread . setDaemon ( true ) ; dispatchThread . start ( ) ; }
void test9 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; boolean boolean0 = fBDriver0 . acceptsURL ( "ThisGstatement is alread" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean acceptsURL ( String url ) throws SQLException { for ( String protocol : GDSFactory . getSupportedProtocols ( ) ) { if ( url . startsWith ( protocol ) ) return true ; } return false ; }
void test10 ( ) throws Throwable { FBDriver fBDriver0 = new FBDriver ( ) ; boolean boolean0 = fBDriver0 . acceptsURL ( "jdbc : firebirdsql : java : You cannot commit a closed connecton . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean acceptsURL ( String url ) throws SQLException { for ( String protocol : GDSFactory . getSupportedProtocols ( ) ) { if ( url . startsWith ( protocol ) ) return true ; } return false ; }
void test0 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = ( isc_db_handle_impl ) javaGDSImpl0 . createIscDbHandle ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) isc_db_handle_impl0 , ( GDSHelper . GDSHelperErrorListener ) null ) ; FBBlob fBBlob0 = new FBBlob ( gDSHelper0 , 0L ) ; fBBlob0 . setBlobId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBlobId ( long blob_id ) { this . blob_id = blob_id ; this . isNew = false ; }
void test1 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = ( isc_db_handle_impl ) javaGDSImpl0 . createIscDbHandle ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) isc_db_handle_impl0 , ( GDSHelper . GDSHelperErrorListener ) null ) ; FBBlob fBBlob0 = new FBBlob ( gDSHelper0 , 0L ) ; fBBlob0 . free ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void free ( ) throws SQLException { this . wrappedBlob . free ( ) ; }
void test6 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = ( isc_db_handle_impl ) javaGDSImpl0 . createIscDbHandle ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) isc_db_handle_impl0 , ( GDSHelper . GDSHelperErrorListener ) null ) ; FBBlob fBBlob0 = new FBBlob ( gDSHelper0 , 0L ) ; FBBlob fBBlob1 = ( FBBlob ) fBBlob0 . detach ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FirebirdBlob detach ( ) throws SQLException ; / * * * Check if blob is segmented . If Blob is segmented , you cannot use * { @link BlobInputStream#seek ( int ) }
void test10 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = ( isc_db_handle_impl ) javaGDSImpl0 . createIscDbHandle ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) isc_db_handle_impl0 , ( GDSHelper . GDSHelperErrorListener ) null ) ; FBBlob fBBlob0 = new FBBlob ( gDSHelper0 , 0L ) ; fBBlob0 . getBlobId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBlobId ( ) throws SQLException { if ( isNew ) throw new FBSQLException ( "No Blob ID is available in new Blob object . " ) ; return blob_id ; }
void test0 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSavepointName ( ) throws SQLException { if ( name = = null ) throw new SQLException ( "Savepoint is unnamed . " ) ; else return name ; }
void test1 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "lt + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test2 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( " = By ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSavepointName ( ) throws SQLException { if ( name = = null ) throw new SQLException ( "Savepoint is unnamed . " ) ; else return name ; }
void test3 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test4 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "ua$ ) W`Z * pQ5\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test5 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSavepointId ( ) throws SQLException { if ( name = = null ) return savepointId ; else throw new SQLException ( "Savepoint is named . " ) ; }
void test6 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test7 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "lt + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test8 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "lt + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test9 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( 961 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSavepointId ( ) throws SQLException { if ( name = = null ) return savepointId ; else throw new SQLException ( "Savepoint is named . " ) ; }
void test10 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "lt + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test11 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test12 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test13 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( 1349 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSavepointId ( ) throws SQLException { if ( name = = null ) return savepointId ; else throw new SQLException ( "Savepoint is named . " ) ; }
void test14 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( " = By ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test15 ( ) throws Throwable { FBSavepoint fBSavepoint0 = new FBSavepoint ( 961 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerSavepointId ( ) { return serverId ; }
void test0 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 1053 ) ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "U [ & , + = f { _ > c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test1 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 1296 ) ; int int0 = fBEscapedCallParser0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test2 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 17 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test3 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 8 ) ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "1H'eIT1@ u3'W [ ~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test4 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 1091 ) ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "oFe , % - NR ; ^ ( T ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test5 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 1 ) ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( " YYIsUeoj } ) * zZ [ Y1d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test6 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test7 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 4 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "@' , ( { > u4q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test8 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 4 ) ; fBEscapedCallParser0 . setState ( 4 ) ; fBEscapedCallParser0 . switchState ( ' , ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test9 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 7 ) ) ; fBEscapedCallParser0 . switchState ( ' ) ' ) ; fBEscapedCallParser0 . switchState ( 'j' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test11 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 1053 ) ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test12 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( ( - 8 ) ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( " { j" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test13 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 21 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( " . / n , ( ( kZilJTM } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test14 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 0 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "EXECUTE / v ( ROCEDU { E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test15 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 1296 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( " ? = } Vs | & stamxk" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test16 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 3 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "Procedure name is empty . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test17 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 1296 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( " > Td^ ? , QWE < _" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test18 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 17 ) ; FBProcedureCall fBProcedureCall0 = fBEscapedCallParser0 . parseCall ( "y < ? : JHYgXCN\" ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test19 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 1734 ) ; boolean boolean0 = fBEscapedCallParser0 . processToken ( "execute" ) ; boolean boolean1 = fBEscapedCallParser0 . processToken ( "execute" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test20 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 1718 ) ; boolean boolean0 = fBEscapedCallParser0 . processToken ( "execute" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processToken ( String token ) { if ( "EXECUTE" . equalsIgnoreCase ( token ) & & ! isExecuteWordProcessed & & ! isProcedureWordProcessed & & ! isNameProcessed ) { isExecuteWordProcessed = true ; return true ; } if ( "PROCEDURE" . equalsIgnoreCase ( token ) & & isExecuteWordProcessed & & ! isProcedureWordProcessed & & ! isNameProcessed ) { isProcedureWordProcessed = true ; return true ; } if ( "call" . equalsIgnoreCase ( token ) & & ! isCallWordProcessed & & ! isNameProcessed ) { isCallWordProcessed = true ; return true ; } if ( ( isCallWordProcessed | | ( isExecuteWordProcessed & & isProcedureWordProcessed ) ) & & ! isNameProcessed ) { procedureCall . setName ( token ) ; isNameProcessed = true ; return true ; } return false ; }
void test21 ( ) throws Throwable { FBEscapedCallParser fBEscapedCallParser0 = new FBEscapedCallParser ( 17 ) ; boolean boolean0 = fBEscapedCallParser0 . processToken ( "call" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processToken ( String token ) { if ( "EXECUTE" . equalsIgnoreCase ( token ) & & ! isExecuteWordProcessed & & ! isProcedureWordProcessed & & ! isNameProcessed ) { isExecuteWordProcessed = true ; return true ; } if ( "PROCEDURE" . equalsIgnoreCase ( token ) & & isExecuteWordProcessed & & ! isProcedureWordProcessed & & ! isNameProcessed ) { isProcedureWordProcessed = true ; return true ; } if ( "call" . equalsIgnoreCase ( token ) & & ! isCallWordProcessed & & ! isNameProcessed ) { isCallWordProcessed = true ; return true ; } if ( ( isCallWordProcessed | | ( isExecuteWordProcessed & & isProcedureWordProcessed ) ) & & ! isNameProcessed ) { procedureCall . setName ( token ) ; isNameProcessed = true ; return true ; } return false ; }
void test3 ( ) throws Throwable { InternalTransactionCoordinator . MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator . MetaDataTransactionCoordinator ( ) ; InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ( InternalTransactionCoordinator . AbstractTransactionCoordinator ) internalTransactionCoordinator_MetaDataTransactionCoordinator0 ) ; AbstractConnection abstractConnection0 = internalTransactionCoordinator0 . getConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Connection getConnection ( ) throws SQLException { if ( connection = = null ) { FBSQLException ex = new FBSQLException ( "The PooledConnection has been closed" , FBSQLException . SQL_STATE_CONNECTION_CLOSED ) ; fireFatalConnectionError ( ex ) ; throw ex ; } try { if ( handler ! = null ) { handler . close ( ) ; } resetConnection ( ) ; } catch ( SQLException ex ) { fireFatalConnectionError ( ex ) ; throw ex ; } handler = createConnectionHandler ( ) ; return handler . getProxy ( ) ; }
void test7 ( ) throws Throwable { InternalTransactionCoordinator . MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator . MetaDataTransactionCoordinator ( ) ; InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ( InternalTransactionCoordinator . AbstractTransactionCoordinator ) internalTransactionCoordinator_MetaDataTransactionCoordinator0 ) ; byte [ ] byteArray0 = new byte [ 3 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; internalTransactionCoordinator0 . executionCompleted ( ( FirebirdBlob ) fBCachedBlob0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSegmented ( ) throws SQLException ; }
void test9 ( ) throws Throwable { InternalTransactionCoordinator . AutoCommitCoordinator internalTransactionCoordinator_AutoCommitCoordinator0 = new InternalTransactionCoordinator . AutoCommitCoordinator ( ( AbstractConnection ) null , ( FirebirdLocalTransaction ) null ) ; InternalTransactionCoordinator . ManagedTransactionCoordinator internalTransactionCoordinator_ManagedTransactionCoordinator0 = new InternalTransactionCoordinator . ManagedTransactionCoordinator ( ( AbstractConnection ) null ) ; Collection < AbstractStatement > collection0 = internalTransactionCoordinator_ManagedTransactionCoordinator0 . getStatements ( ) ; internalTransactionCoordinator_AutoCommitCoordinator0 . setStatements ( collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test24 ( ) throws Throwable { InternalTransactionCoordinator . MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator . MetaDataTransactionCoordinator ( ) ; InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator ( ( InternalTransactionCoordinator . AbstractTransactionCoordinator ) internalTransactionCoordinator_MetaDataTransactionCoordinator0 ) ; byte [ ] byteArray0 = new byte [ 4 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; internalTransactionCoordinator0 . executionStarted ( ( FirebirdBlob ) fBCachedBlob0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSegmented ( ) throws SQLException ; }
void test26 ( ) throws Throwable { InternalTransactionCoordinator . ManagedTransactionCoordinator internalTransactionCoordinator_ManagedTransactionCoordinator0 = new InternalTransactionCoordinator . ManagedTransactionCoordinator ( ( AbstractConnection ) null ) ; byte [ ] byteArray0 = new byte [ 6 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; internalTransactionCoordinator_ManagedTransactionCoordinator0 . executionStarted ( ( FirebirdBlob ) fBCachedBlob0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test0 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; int int0 = fBCachedFetcher0 . getFetchSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLast ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isLast ; }
void test1 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; fBCachedFetcher0 . afterLast ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test2 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; fBCachedFetcher0 . setFetchSize ( ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test3 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; int int0 = fBCachedFetcher0 . getRowNum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLast ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isLast ; }
void test4 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; fBCachedFetcher0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFirst ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isFirst ; }
void test5 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; fBCachedFetcher0 . beforeFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFirst ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isFirst ; }
void test7 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; linkedList0 . add ( byteArray0 ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean previous ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test8 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; boolean boolean0 = fBCachedFetcher0 . absolute ( ( int ) ( byte ) 55 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLast ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isLast ; }
void test10 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; linkedList0 . add ( byteArray0 ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void beforeFirst ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test11 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; boolean boolean0 = fBCachedFetcher0 . isFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLast ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isLast ; }
void test12 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; boolean boolean0 = fBCachedFetcher0 . isLast ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLast ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isLast ; }
void test13 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; linkedList0 . add ( byteArray0 ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFirst ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isFirst ; }
void test16 ( ) throws Throwable { LinkedList < byte [ ] [ ] > linkedList0 = new LinkedList < byte [ ] [ ] > ( ) ; byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; linkedList0 . add ( byteArray0 ) ; FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher ( ( List < byte [ ] [ ] > ) linkedList0 , ( FBObjectListener . FetcherListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateRow ( byte [ ] [ ] data ) throws SQLException { / / empty }
void test0 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; List < FBProcedureParam > list0 = fBProcedureCall0 . getOutputParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test2 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; List < FBProcedureParam > list0 = fBProcedureCall0 . getInputParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test3 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; String string0 = fBProcedureCall0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test5 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureCall fBProcedureCall1 = ( FBProcedureCall ) fBProcedureCall0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test6 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 1172 , "RJbW + %5G ? { H%c" ) ; FBProcedureCall fBProcedureCall1 = ( FBProcedureCall ) fBProcedureCall0 . clone ( ) ; fBProcedureParam0 . setValue ( ( Object ) fBProcedureCall1 ) ; fBProcedureCall0 . registerOutParam ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test7 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 1172 , "RJbW + %5G ? { H%c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test8 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; fBProcedureCall0 . getInputParam ( 1536 ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . getInputParam ( 1536 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test9 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 1160 , "ca" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mapOutParamIndexToPosition ( int index ) throws FBSQLException { return mapOutParamIndexToPosition ( index , OLD_CALLABLE_STATEMENT_COMPATIBILITY ) ; }
void test10 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 1172 , "RJbW + %5G ? { H%c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mapOutParamIndexToPosition ( int index ) throws FBSQLException { return mapOutParamIndexToPosition ( index , OLD_CALLABLE_STATEMENT_COMPATIBILITY ) ; }
void test11 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 1172 , "RJbW + %5G ? { H%c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mapOutParamIndexToPosition ( int index ) throws FBSQLException { return mapOutParamIndexToPosition ( index , OLD_CALLABLE_STATEMENT_COMPATIBILITY ) ; }
void test13 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . getInputParam ( 1536 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( boolean select ) throws FBSQLException { StringBuilder sb = new StringBuilder ( ) ; if ( select ) sb . append ( AbstractCallableStatement . NATIVE_SELECT_COMMAND ) ; else sb . append ( AbstractCallableStatement . NATIVE_CALL_COMMAND ) ; sb . append ( " " ) ; sb . append ( name ) ; StringBuilder paramsBuffer = new StringBuilder ( ) ; boolean firstParam = true ; for ( FBProcedureParam param : inputParams ) { if ( param = = null ) continue ; / / if parameter does not have set value , and is not registered / / as output parameter , throw an exception , otherwise , continue / / to the next one . if ( ! param . isValueSet ( ) ) { if ( param . isParam ( ) & & outputParams . size ( ) > 0 & & outputParams . get ( param . getPosition ( ) ) = = null ) throw new FBSQLException ( "Value of parameter " + param . getIndex ( ) + " not set and " + "it was not registered as output parameter . " , FBSQLException . SQL_STATE_WRONG_PARAM_NUM ) ; } if ( ! firstParam ) paramsBuffer . append ( " , " ) ; else firstParam = false ; paramsBuffer . append ( param . getParamValue ( ) ) ; } if ( paramsBuffer . length ( ) > 0 ) sb . append ( ' ( ' ) . append ( paramsBuffer ) . append ( ' ) ' ) ; return sb . toString ( ) ; }
void test14 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; fBProcedureCall0 . addInputParam ( fBProcedureParam0 ) ; FBProcedureParam fBProcedureParam1 = fBProcedureCall0 . addParam ( 0 , "fmH9iU ; = | x } T ? $FzG_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test16 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 1172 , "RJbW + %5G ? { H%c" ) ; fBProcedureCall0 . addOutputParam ( fBProcedureParam0 ) ; fBProcedureCall0 . registerOutParam ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test17 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; String string0 = fBProcedureCall0 . getSQL ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( boolean select ) throws FBSQLException { StringBuilder sb = new StringBuilder ( ) ; if ( select ) sb . append ( AbstractCallableStatement . NATIVE_SELECT_COMMAND ) ; else sb . append ( AbstractCallableStatement . NATIVE_CALL_COMMAND ) ; sb . append ( " " ) ; sb . append ( name ) ; StringBuilder paramsBuffer = new StringBuilder ( ) ; boolean firstParam = true ; for ( FBProcedureParam param : inputParams ) { if ( param = = null ) continue ; / / if parameter does not have set value , and is not registered / / as output parameter , throw an exception , otherwise , continue / / to the next one . if ( ! param . isValueSet ( ) ) { if ( param . isParam ( ) & & outputParams . size ( ) > 0 & & outputParams . get ( param . getPosition ( ) ) = = null ) throw new FBSQLException ( "Value of parameter " + param . getIndex ( ) + " not set and " + "it was not registered as output parameter . " , FBSQLException . SQL_STATE_WRONG_PARAM_NUM ) ; } if ( ! firstParam ) paramsBuffer . append ( " , " ) ; else firstParam = false ; paramsBuffer . append ( param . getParamValue ( ) ) ; } if ( paramsBuffer . length ( ) > 0 ) sb . append ( ' ( ' ) . append ( paramsBuffer ) . append ( ' ) ' ) ; return sb . toString ( ) ; }
void test18 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = new FBProcedureParam ( ) ; fBProcedureCall0 . addInputParam ( fBProcedureParam0 ) ; String string0 = fBProcedureCall0 . getSQL ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( boolean select ) throws FBSQLException { StringBuilder sb = new StringBuilder ( ) ; if ( select ) sb . append ( AbstractCallableStatement . NATIVE_SELECT_COMMAND ) ; else sb . append ( AbstractCallableStatement . NATIVE_CALL_COMMAND ) ; sb . append ( " " ) ; sb . append ( name ) ; StringBuilder paramsBuffer = new StringBuilder ( ) ; boolean firstParam = true ; for ( FBProcedureParam param : inputParams ) { if ( param = = null ) continue ; / / if parameter does not have set value , and is not registered / / as output parameter , throw an exception , otherwise , continue / / to the next one . if ( ! param . isValueSet ( ) ) { if ( param . isParam ( ) & & outputParams . size ( ) > 0 & & outputParams . get ( param . getPosition ( ) ) = = null ) throw new FBSQLException ( "Value of parameter " + param . getIndex ( ) + " not set and " + "it was not registered as output parameter . " , FBSQLException . SQL_STATE_WRONG_PARAM_NUM ) ; } if ( ! firstParam ) paramsBuffer . append ( " , " ) ; else firstParam = false ; paramsBuffer . append ( param . getParamValue ( ) ) ; } if ( paramsBuffer . length ( ) > 0 ) sb . append ( ' ( ' ) . append ( paramsBuffer ) . append ( ' ) ' ) ; return sb . toString ( ) ; }
void test19 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . getInputParam ( 1536 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( boolean select ) throws FBSQLException { StringBuilder sb = new StringBuilder ( ) ; if ( select ) sb . append ( AbstractCallableStatement . NATIVE_SELECT_COMMAND ) ; else sb . append ( AbstractCallableStatement . NATIVE_CALL_COMMAND ) ; sb . append ( " " ) ; sb . append ( name ) ; StringBuilder paramsBuffer = new StringBuilder ( ) ; boolean firstParam = true ; for ( FBProcedureParam param : inputParams ) { if ( param = = null ) continue ; / / if parameter does not have set value , and is not registered / / as output parameter , throw an exception , otherwise , continue / / to the next one . if ( ! param . isValueSet ( ) ) { if ( param . isParam ( ) & & outputParams . size ( ) > 0 & & outputParams . get ( param . getPosition ( ) ) = = null ) throw new FBSQLException ( "Value of parameter " + param . getIndex ( ) + " not set and " + "it was not registered as output parameter . " , FBSQLException . SQL_STATE_WRONG_PARAM_NUM ) ; } if ( ! firstParam ) paramsBuffer . append ( " , " ) ; else firstParam = false ; paramsBuffer . append ( param . getParamValue ( ) ) ; } if ( paramsBuffer . length ( ) > 0 ) sb . append ( ' ( ' ) . append ( paramsBuffer ) . append ( ' ) ' ) ; return sb . toString ( ) ; }
void test20 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 0 , "fmH9iU ; = | x } T ? $FzG_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( boolean select ) throws FBSQLException { StringBuilder sb = new StringBuilder ( ) ; if ( select ) sb . append ( AbstractCallableStatement . NATIVE_SELECT_COMMAND ) ; else sb . append ( AbstractCallableStatement . NATIVE_CALL_COMMAND ) ; sb . append ( " " ) ; sb . append ( name ) ; StringBuilder paramsBuffer = new StringBuilder ( ) ; boolean firstParam = true ; for ( FBProcedureParam param : inputParams ) { if ( param = = null ) continue ; / / if parameter does not have set value , and is not registered / / as output parameter , throw an exception , otherwise , continue / / to the next one . if ( ! param . isValueSet ( ) ) { if ( param . isParam ( ) & & outputParams . size ( ) > 0 & & outputParams . get ( param . getPosition ( ) ) = = null ) throw new FBSQLException ( "Value of parameter " + param . getIndex ( ) + " not set and " + "it was not registered as output parameter . " , FBSQLException . SQL_STATE_WRONG_PARAM_NUM ) ; } if ( ! firstParam ) paramsBuffer . append ( " , " ) ; else firstParam = false ; paramsBuffer . append ( param . getParamValue ( ) ) ; } if ( paramsBuffer . length ( ) > 0 ) sb . append ( ' ( ' ) . append ( paramsBuffer ) . append ( ' ) ' ) ; return sb . toString ( ) ; }
void test21 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; FBProcedureParam fBProcedureParam0 = fBProcedureCall0 . addParam ( 0 , "fmH9iU ; = | x } T ? $FzG_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( boolean select ) throws FBSQLException { StringBuilder sb = new StringBuilder ( ) ; if ( select ) sb . append ( AbstractCallableStatement . NATIVE_SELECT_COMMAND ) ; else sb . append ( AbstractCallableStatement . NATIVE_CALL_COMMAND ) ; sb . append ( " " ) ; sb . append ( name ) ; StringBuilder paramsBuffer = new StringBuilder ( ) ; boolean firstParam = true ; for ( FBProcedureParam param : inputParams ) { if ( param = = null ) continue ; / / if parameter does not have set value , and is not registered / / as output parameter , throw an exception , otherwise , continue / / to the next one . if ( ! param . isValueSet ( ) ) { if ( param . isParam ( ) & & outputParams . size ( ) > 0 & & outputParams . get ( param . getPosition ( ) ) = = null ) throw new FBSQLException ( "Value of parameter " + param . getIndex ( ) + " not set and " + "it was not registered as output parameter . " , FBSQLException . SQL_STATE_WRONG_PARAM_NUM ) ; } if ( ! firstParam ) paramsBuffer . append ( " , " ) ; else firstParam = false ; paramsBuffer . append ( param . getParamValue ( ) ) ; } if ( paramsBuffer . length ( ) > 0 ) sb . append ( ' ( ' ) . append ( paramsBuffer ) . append ( ' ) ' ) ; return sb . toString ( ) ; }
void test22 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; boolean boolean0 = fBProcedureCall0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test23 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; int int0 = fBProcedureCall0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test24 ( ) throws Throwable { FBProcedureCall fBProcedureCall0 = new FBProcedureCall ( ) ; fBProcedureCall0 . setName ( " - d" ) ; int int0 = fBProcedureCall0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test0 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test1 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 , ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test2 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test3 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test4 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test5 ( ) throws Throwable { String string0 = FBTpbMapper . getTransactionIsolationName ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTransactionIsolationName ( ) { return getDefaultIsolation ( ) ; }
void test7 ( ) throws Throwable { String string0 = FBTpbMapper . getTransactionIsolationName ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTransactionIsolationName ( ) { return getDefaultIsolation ( ) ; }
void test8 ( ) throws Throwable { String string0 = FBTpbMapper . getTransactionIsolationName ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTransactionIsolationName ( ) { return getDefaultIsolation ( ) ; }
void test9 ( ) throws Throwable { String string0 = FBTpbMapper . getTransactionIsolationName ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTransactionIsolationName ( ) { return getDefaultIsolation ( ) ; }
void test11 ( ) throws Throwable { String string0 = FBTpbMapper . getTransactionIsolationName ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTransactionIsolationName ( ) { return getDefaultIsolation ( ) ; }
void test12 ( ) throws Throwable { int int0 = FBTpbMapper . getTransactionIsolationLevel ( "TRANSACTION_READ_UNCOMMITTED" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIsolationLevel ( String isolationName ) { if ( TRANSACTION_NONE . equals ( isolationName ) ) return Connection . TRANSACTION_NONE ; else if ( TRANSACTION_READ_UNCOMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_UNCOMMITTED ; else if ( TRANSACTION_READ_COMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_COMMITTED ; else if ( TRANSACTION_REPEATABLE_READ . equals ( isolationName ) ) return Connection . TRANSACTION_REPEATABLE_READ ; else if ( TRANSACTION_SERIALIZABLE . equals ( isolationName ) ) return Connection . TRANSACTION_SERIALIZABLE ; else throw new IllegalArgumentException ( "Invalid isolation name . " ) ; }
void test13 ( ) throws Throwable { int int0 = FBTpbMapper . getTransactionIsolationLevel ( "TRANSACTION_NONE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIsolationLevel ( String isolationName ) { if ( TRANSACTION_NONE . equals ( isolationName ) ) return Connection . TRANSACTION_NONE ; else if ( TRANSACTION_READ_UNCOMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_UNCOMMITTED ; else if ( TRANSACTION_READ_COMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_COMMITTED ; else if ( TRANSACTION_REPEATABLE_READ . equals ( isolationName ) ) return Connection . TRANSACTION_REPEATABLE_READ ; else if ( TRANSACTION_SERIALIZABLE . equals ( isolationName ) ) return Connection . TRANSACTION_SERIALIZABLE ; else throw new IllegalArgumentException ( "Invalid isolation name . " ) ; }
void test14 ( ) throws Throwable { int int0 = FBTpbMapper . getTransactionIsolationLevel ( "TRANSACTION_REPEATABLE_READ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIsolationLevel ( String isolationName ) { if ( TRANSACTION_NONE . equals ( isolationName ) ) return Connection . TRANSACTION_NONE ; else if ( TRANSACTION_READ_UNCOMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_UNCOMMITTED ; else if ( TRANSACTION_READ_COMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_COMMITTED ; else if ( TRANSACTION_REPEATABLE_READ . equals ( isolationName ) ) return Connection . TRANSACTION_REPEATABLE_READ ; else if ( TRANSACTION_SERIALIZABLE . equals ( isolationName ) ) return Connection . TRANSACTION_SERIALIZABLE ; else throw new IllegalArgumentException ( "Invalid isolation name . " ) ; }
void test15 ( ) throws Throwable { int int0 = FBTpbMapper . getTransactionIsolationLevel ( "TRANSACTION_READ_COMMITTED" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIsolationLevel ( String isolationName ) { if ( TRANSACTION_NONE . equals ( isolationName ) ) return Connection . TRANSACTION_NONE ; else if ( TRANSACTION_READ_UNCOMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_UNCOMMITTED ; else if ( TRANSACTION_READ_COMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_COMMITTED ; else if ( TRANSACTION_REPEATABLE_READ . equals ( isolationName ) ) return Connection . TRANSACTION_REPEATABLE_READ ; else if ( TRANSACTION_SERIALIZABLE . equals ( isolationName ) ) return Connection . TRANSACTION_SERIALIZABLE ; else throw new IllegalArgumentException ( "Invalid isolation name . " ) ; }
void test16 ( ) throws Throwable { int int0 = FBTpbMapper . getTransactionIsolationLevel ( "TRANSACTION_SERIALIZABLE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIsolationLevel ( String isolationName ) { if ( TRANSACTION_NONE . equals ( isolationName ) ) return Connection . TRANSACTION_NONE ; else if ( TRANSACTION_READ_UNCOMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_UNCOMMITTED ; else if ( TRANSACTION_READ_COMMITTED . equals ( isolationName ) ) return Connection . TRANSACTION_READ_COMMITTED ; else if ( TRANSACTION_REPEATABLE_READ . equals ( isolationName ) ) return Connection . TRANSACTION_REPEATABLE_READ ; else if ( TRANSACTION_SERIALIZABLE . equals ( isolationName ) ) return Connection . TRANSACTION_SERIALIZABLE ; else throw new IllegalArgumentException ( "Invalid isolation name . " ) ; }
void test18 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; TransactionParameterBufferImpl transactionParameterBufferImpl0 = ( TransactionParameterBufferImpl ) FBTpbMapper . processMapping ( ( GDS ) javaGDSImpl0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test20 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] getMapping ( ) { return mapping ; }
void test21 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test22 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMapping ( int transactionIsolation , TransactionParameterBuffer tpb ) { switch ( transactionIsolation ) { case Connection . TRANSACTION_SERIALIZABLE : case Connection . TRANSACTION_REPEATABLE_READ : case Connection . TRANSACTION_READ_COMMITTED : mapping . put ( Integer . valueOf ( transactionIsolation ) , tpb ) ; break ; case Connection . TRANSACTION_READ_UNCOMMITTED : case Connection . TRANSACTION_NONE : default : throw new IllegalArgumentException ( "Transaction isolation level " + transactionIsolation + " is not supported . " ) ; } }
void test23 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test24 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] getMapping ( ) { return mapping ; }
void test25 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test26 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] getMapping ( ) { return mapping ; }
void test27 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMapping ( int transactionIsolation , TransactionParameterBuffer tpb ) { switch ( transactionIsolation ) { case Connection . TRANSACTION_SERIALIZABLE : case Connection . TRANSACTION_REPEATABLE_READ : case Connection . TRANSACTION_READ_COMMITTED : mapping . put ( Integer . valueOf ( transactionIsolation ) , tpb ) ; break ; case Connection . TRANSACTION_READ_UNCOMMITTED : case Connection . TRANSACTION_NONE : default : throw new IllegalArgumentException ( "Transaction isolation level " + transactionIsolation + " is not supported . " ) ; } }
void test28 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMapping ( int transactionIsolation , TransactionParameterBuffer tpb ) { switch ( transactionIsolation ) { case Connection . TRANSACTION_SERIALIZABLE : case Connection . TRANSACTION_REPEATABLE_READ : case Connection . TRANSACTION_READ_COMMITTED : mapping . put ( Integer . valueOf ( transactionIsolation ) , tpb ) ; break ; case Connection . TRANSACTION_READ_UNCOMMITTED : case Connection . TRANSACTION_NONE : default : throw new IllegalArgumentException ( "Transaction isolation level " + transactionIsolation + " is not supported . " ) ; } }
void test29 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = FBTpbMapper . getDefaultMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test30 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMapping ( int transactionIsolation , TransactionParameterBuffer tpb ) { switch ( transactionIsolation ) { case Connection . TRANSACTION_SERIALIZABLE : case Connection . TRANSACTION_REPEATABLE_READ : case Connection . TRANSACTION_READ_COMMITTED : mapping . put ( Integer . valueOf ( transactionIsolation ) , tpb ) ; break ; case Connection . TRANSACTION_READ_UNCOMMITTED : case Connection . TRANSACTION_NONE : default : throw new IllegalArgumentException ( "Transaction isolation level " + transactionIsolation + " is not supported . " ) ; } }
void test31 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test32 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; FBTpbMapper fBTpbMapper0 = new FBTpbMapper ( ( GDS ) javaGDSImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultTransactionIsolation ( ) { return connectionProperties . getDefaultTransactionIsolation ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; TranslatingReader translatingReader0 = TranslatingReader . getInstance ( ( InputStream ) byteArrayInputStream0 , "Cp437" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { ( lock ) { return connectionProperties . getEncoding ( ) ; } }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 13 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; TranslatingReader translatingReader0 = TranslatingReader . getInstance ( ( InputStream ) byteArrayInputStream0 , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( InputStream in ) throws IOException { return in . read ( ) ; }
void test1 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBStringField fBStringField0 = new FBStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 619 ) ; FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) fBManagedConnectionFactory0 . getGDS ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) javaGDSImpl0 , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; fBStringField0 . setConnection ( gDSHelper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean inTransaction ( ) { return gdsHelper . inTransaction ( ) ; }
void test11 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBStringField fBStringField0 = new FBStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBStringField0 . setBoolean ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlias ( ) { return field . aliasname ; }
void test13 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBStringField fBStringField0 = new FBStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Writer setCharacterStream ( long position ) throws SQLException { String encoding = wrappedBlob . gdsHelper . getJavaEncoding ( ) ; OutputStream outputStream = wrappedBlob . setBinaryStream ( position ) ; if ( encoding = = null ) { return new OutputStreamWriter ( outputStream ) ; } else { try { return new OutputStreamWriter ( outputStream , encoding ) ; } catch ( UnsupportedEncodingException ioe ) { throw new FBSQLException ( ioe ) ; } } }
void test17 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBStringField fBStringField0 = new FBStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTime ( String param1 , Time param2 ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test18 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBStringField fBStringField0 = new FBStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 335544328 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTime ( String param1 , Time param2 ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; FBCachedClob fBCachedClob0 = new FBCachedClob ( fBCachedBlob0 , ( String ) null ) ; fBCachedClob0 . free ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws SQLException { throw new FBDriverNotCapableException ( ) ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; FBCachedBlob fBCachedBlob0 = new FBCachedBlob ( byteArray0 ) ; FBCachedClob fBCachedClob0 = new FBCachedClob ( fBCachedBlob0 , ( String ) null ) ; InputStreamReader inputStreamReader0 = ( InputStreamReader ) fBCachedClob0 . getCharacterStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( InputStream in ) throws IOException { return in . read ( ) ; }
void test0 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlias ( ) { return field . aliasname ; }
void test5 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBLongVarCharField fBLongVarCharField0 = new FBLongVarCharField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBLongVarCharField0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationName ( ) { return field . relname ; }
void test0 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBWorkaroundStringField0 . setTrimString ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationName ( ) { return field . relname ; }
void test3 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; String string0 = fBWorkaroundStringField0 . getAlias ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlias ( ) { return field . aliasname ; }
void test8 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date getDate ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getDate ( parameterIndex ) ; }
void test14 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBWorkaroundStringField0 . setRequiredType ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlias ( ) { return field . aliasname ; }
void test19 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBNullField fBNullField0 = new FBNullField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; String string0 = fBNullField0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test20 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBNullField fBNullField0 = new FBNullField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBNullField0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInvertTimeZone ( ) { if ( gdsHelper = = null ) return false ; DatabaseParameterBuffer dpb = gdsHelper . getDatabaseParameterBuffer ( ) ; return dpb . hasArgument ( DatabaseParameterBufferExtension . TIMESTAMP_USES_LOCAL_TIMEZONE ) ; }
void test24 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField ( xSQLVAR0 , ( FieldDataProvider ) null , ( - 1543 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Time getTime ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getTime ( parameterIndex ) ; }
void test26 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; String string0 = fBCachedLongVarCharField0 . getRelationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationName ( ) { return field . relname ; }
void test33 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField ( xSQLVAR0 , ( FieldDataProvider ) null , ( byte ) 0 ) ; fBCachedLongVarCharField0 . setConnection ( ( GDSHelper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInvertTimeZone ( ) { if ( gdsHelper = = null ) return false ; DatabaseParameterBuffer dpb = gdsHelper . getDatabaseParameterBuffer ( ) ; return dpb . hasArgument ( DatabaseParameterBufferExtension . TIMESTAMP_USES_LOCAL_TIMEZONE ) ; }
void test34 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; boolean boolean0 = FBField . isCompatible ( xSQLVAR0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompatible ( XSQLVAR field , int type ) { / / turn off null flag , in this case we're not interested in it . int tempType = field . sqltype & ~1 ; switch ( tempType ) { / / this type does not belong to JDBC v . 1 . 20 , but as long as / / Firebird supports arrays , lets use them . case ISCConstants . SQL_ARRAY : return ( type = = Types . ARRAY ) ; / / this type does not belong to JDBC v . 1 . 20 , but as long as / / Firebird supports arrays , lets use them . case ISCConstants . SQL_BLOB : return ( type = = Types . BLOB ) | | ( type = = Types . BINARY ) | | ( type = = Types . VARBINARY ) | | ( type = = Types . LONGVARBINARY ) | | ( type = = Types . LONGVARCHAR ) ; / / Unfortunately we do not know the SQL correspondence to these type case ISCConstants . SQL_QUAD : case ISCConstants . SQL_D_FLOAT : return false ; / / currently we do not provide compatibility with CHAR and VARCHAR case ISCConstants . SQL_DOUBLE : case ISCConstants . SQL_FLOAT : case ISCConstants . SQL_INT64 : case ISCConstants . SQL_LONG : case ISCConstants . SQL_SHORT : return ( type = = Types . DOUBLE ) | | ( type = = Types . FLOAT ) | | ( type = = Types . REAL ) | | ( type = = Types . BIGINT ) | | ( type = = Types . INTEGER ) | | ( type = = Types . SMALLINT ) | | ( type = = Types . TINYINT ) | | ( type = = Types . NUMERIC ) | | ( type = = Types . DECIMAL ) | | ( type = = Types . BIT ) ; case ISCConstants . SQL_TEXT : case ISCConstants . SQL_VARYING : return ( type = = Types . CHAR ) | | ( type = = Types . VARCHAR ) | | ( type = = Types . LONGVARCHAR ) ; case ISCConstants . SQL_TIMESTAMP : return ( type = = Types . TIMESTAMP ) | | ( type = = Types . TIME ) | | ( type = = Types . DATE ) ; case ISCConstants . SQL_TYPE_DATE : return ( type = = Types . DATE ) | | ( type = = Types . TIMESTAMP ) ; case ISCConstants . SQL_TYPE_TIME : return ( type = = Types . TIME ) | | ( type = = Types . TIMESTAMP ) ; case ISCConstants . SQL_NULL : return true ; default : return false ; } }
void test35 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBCachedBlobField0 . setObject ( ( Object ) "Error converting to long . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlias ( ) { return field . aliasname ; }
void test36 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInvertTimeZone ( ) { if ( gdsHelper = = null ) return false ; DatabaseParameterBuffer dpb = gdsHelper . getDatabaseParameterBuffer ( ) ; return dpb . hasArgument ( DatabaseParameterBufferExtension . TIMESTAMP_USES_LOCAL_TIMEZONE ) ; }
void test9 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; FBBlobField fBBlobField0 = new FBBlobField ( xSQLVAR0 , ( FieldDataProvider ) null , 0 ) ; fBBlobField0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test0 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . setDefaultValues ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValues ( ) { return defaultValues ; }
void test1 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; List < String > list0 = jaybirdStatementModel0 . getValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test2 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . setStatementType ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatementType ( ) throws FBSQLException ; }
void test3 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; String string0 = jaybirdStatementModel0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( int column ) throws SQLException { String result = getXsqlvar ( column ) . relname ; if ( result = = null ) result = "" ; return result ; }
void test4 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . addColumn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatementType ( ) throws FBSQLException ; }
void test5 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . setTableName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatementType ( ) throws FBSQLException ; }
void test6 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; String string0 = jaybirdStatementModel0 . getSelectClause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSelectClause ( ) { return selectClause ; }
void test7 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . setSelectClause ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValues ( ) { return defaultValues ; }
void test8 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; List < String > list0 = jaybirdStatementModel0 . getReturningColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test9 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; boolean boolean0 = jaybirdStatementModel0 . isDefaultValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValues ( ) { return defaultValues ; }
void test10 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . addReturningColumn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValues ( ) { return defaultValues ; }
void test11 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; int int0 = jaybirdStatementModel0 . getStatementType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatementType ( ) throws FBSQLException ; }
void test12 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; jaybirdStatementModel0 . addValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValues ( ) { return defaultValues ; }
void test13 ( ) throws Throwable { JaybirdStatementModel jaybirdStatementModel0 = new JaybirdStatementModel ( ) ; List < String > list0 = jaybirdStatementModel0 . getColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test0 ( ) throws Throwable { JaybirdSqlParser . insertValues_return jaybirdSqlParser_insertValues_return0 = new JaybirdSqlParser . insertValues_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test1 ( ) throws Throwable { ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream ( ( String ) null , " ? mU64Fvx | ] Hkoln & c" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRFileStream0 , recognizerSharedState0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 , 0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . nonCharType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser . nonCharType_return nonCharType ( ) throws RecognitionException { JaybirdSqlParser . nonCharType_return retval = new JaybirdSqlParser . nonCharType_return ( ) ; retval . start = input . LT ( 1 ) ; int nonCharType_StartIndex = input . index ( ) ; CommonTree root_0 = null ; Token KW_BIGINT137 = null ; Token KW_DATE138 = null ; Token KW_DECIMAL139 = null ; Token char_literal140 = null ; Token INTEGER141 = null ; Token char_literal142 = null ; Token INTEGER143 = null ; Token char_literal144 = null ; Token KW_DOUBLE145 = null ; Token KW_PRECISION146 = null ; Token KW_FLOAT147 = null ; Token KW_INTEGER148 = null ; Token KW_INT149 = null ; Token KW_NUMERIC150 = null ; Token char_literal151 = null ; Token INTEGER152 = null ; Token char_literal153 = null ; Token INTEGER154 = null ; Token char_literal155 = null ; Token KW_SMALLINT156 = null ; Token KW_TIME157 = null ; Token KW_TIMESTAMP158 = null ; CommonTree KW_BIGINT137_tree = null ; CommonTree KW_DATE138_tree = null ; CommonTree KW_DECIMAL139_tree = null ; CommonTree char_literal140_tree = null ; CommonTree INTEGER141_tree = null ; CommonTree char_literal142_tree = null ; CommonTree INTEGER143_tree = null ; CommonTree char_literal144_tree = null ; CommonTree KW_DOUBLE145_tree = null ; CommonTree KW_PRECISION146_tree = null ; CommonTree KW_FLOAT147_tree = null ; CommonTree KW_INTEGER148_tree = null ; CommonTree KW_INT149_tree = null ; CommonTree KW_NUMERIC150_tree = null ; CommonTree char_literal151_tree = null ; CommonTree INTEGER152_tree = null ; CommonTree char_literal153_tree = null ; CommonTree INTEGER154_tree = null ; CommonTree char_literal155_tree = null ; CommonTree KW_SMALLINT156_tree = null ; CommonTree KW_TIME157_tree = null ; CommonTree KW_TIMESTAMP158_tree = null ; try { if ( state . backtracking > 0 & & alreadyParsedRule ( input , 31 ) ) { return retval ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 474 : 3 : ( KW_BIGINT | KW_DATE | KW_DECIMAL ' ( ' INTEGER ( ' , ' INTEGER ) ? ' ) ' | KW_DOUBLE KW_PRECISION | KW_FLOAT | KW_INTEGER | KW_INT | KW_NUMERIC ' ( ' INTEGER ( ' , ' INTEGER ) ? ' ) ' | KW_SMALLINT | KW_TIME | KW_TIMESTAMP ) int alt23 = 11 ; switch ( input . LA ( 1 ) ) { case KW_BIGINT : { alt23 = 1 ; } break ; case KW_DATE : { alt23 = 2 ; } break ; case KW_DECIMAL : { alt23 = 3 ; } break ; case KW_DOUBLE : { alt23 = 4 ; } break ; case KW_FLOAT : { alt23 = 5 ; } break ; case KW_INTEGER : { alt23 = 6 ; } break ; case KW_INT : { alt23 = 7 ; } break ; case KW_NUMERIC : { alt23 = 8 ; } break ; case KW_SMALLINT : { alt23 = 9 ; } break ; case KW_TIME : { alt23 = 10 ; } break ; case KW_TIMESTAMP : { alt23 = 11 ; } break ; default : if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 23 , 0 , input ) ; throw nvae ; } switch ( alt23 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 474 : 5 : KW_BIGINT { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_BIGINT137 = ( Token ) match ( input , KW_BIGINT , FOLLOW_KW_BIGINT_in_nonCharType1424 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_BIGINT137_tree = ( CommonTree ) adaptor . create ( KW_BIGINT137 ) ; adaptor . addChild ( root_0 , KW_BIGINT137_tree ) ; } } break ; case 2 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 475 : 5 : KW_DATE { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_DATE138 = ( Token ) match ( input , KW_DATE , FOLLOW_KW_DATE_in_nonCharType1430 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_DATE138_tree = ( CommonTree ) adaptor . create ( KW_DATE138 ) ; adaptor . addChild ( root_0 , KW_DATE138_tree ) ; } } break ; case 3 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 476 : 5 : KW_DECIMAL ' ( ' INTEGER ( ' , ' INTEGER ) ? ' ) ' { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_DECIMAL139 = ( Token ) match ( input , KW_DECIMAL , FOLLOW_KW_DECIMAL_in_nonCharType1436 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_DECIMAL139_tree = ( CommonTree ) adaptor . create ( KW_DECIMAL139 ) ; adaptor . addChild ( root_0 , KW_DECIMAL139_tree ) ; } char_literal140 = ( Token ) match ( input , LEFT_PAREN , FOLLOW_LEFT_PAREN_in_nonCharType1438 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal140_tree = ( CommonTree ) adaptor . create ( char_literal140 ) ; adaptor . addChild ( root_0 , char_literal140_tree ) ; } INTEGER141 = ( Token ) match ( input , INTEGER , FOLLOW_INTEGER_in_nonCharType1440 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { INTEGER141_tree = ( CommonTree ) adaptor . create ( INTEGER141 ) ; adaptor . addChild ( root_0 , INTEGER141_tree ) ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 476 : 28 : ( ' , ' INTEGER ) ? int alt21 = 2 ; int LA21_0 = input . LA ( 1 ) ; if ( ( LA21_0 = = COMMA ) ) { alt21 = 1 ; } switch ( alt21 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 476 : 29 : ' , ' INTEGER { char_literal142 = ( Token ) match ( input , COMMA , FOLLOW_COMMA_in_nonCharType1443 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal142_tree = ( CommonTree ) adaptor . create ( char_literal142 ) ; adaptor . addChild ( root_0 , char_literal142_tree ) ; } INTEGER143 = ( Token ) match ( input , INTEGER , FOLLOW_INTEGER_in_nonCharType1445 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { INTEGER143_tree = ( CommonTree ) adaptor . create ( INTEGER143 ) ; adaptor . addChild ( root_0 , INTEGER143_tree ) ; } } break ; } char_literal144 = ( Token ) match ( input , RIGHT_PAREN , FOLLOW_RIGHT_PAREN_in_nonCharType1449 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal144_tree = ( CommonTree ) adaptor . create ( char_literal144 ) ; adaptor . addChild ( root_0 , char_literal144_tree ) ; } } break ; case 4 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 477 : 5 : KW_DOUBLE KW_PRECISION { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_DOUBLE145 = ( Token ) match ( input , KW_DOUBLE , FOLLOW_KW_DOUBLE_in_nonCharType1455 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_DOUBLE145_tree = ( CommonTree ) adaptor . create ( KW_DOUBLE145 ) ; adaptor . addChild ( root_0 , KW_DOUBLE145_tree ) ; } KW_PRECISION146 = ( Token ) match ( input , KW_PRECISION , FOLLOW_KW_PRECISION_in_nonCharType1457 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_PRECISION146_tree = ( CommonTree ) adaptor . create ( KW_PRECISION146 ) ; adaptor . addChild ( root_0 , KW_PRECISION146_tree ) ; } } break ; case 5 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 478 : 5 : KW_FLOAT { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_FLOAT147 = ( Token ) match ( input , KW_FLOAT , FOLLOW_KW_FLOAT_in_nonCharType1463 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_FLOAT147_tree = ( CommonTree ) adaptor . create ( KW_FLOAT147 ) ; adaptor . addChild ( root_0 , KW_FLOAT147_tree ) ; } } break ; case 6 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 479 : 5 : KW_INTEGER { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_INTEGER148 = ( Token ) match ( input , KW_INTEGER , FOLLOW_KW_INTEGER_in_nonCharType1469 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_INTEGER148_tree = ( CommonTree ) adaptor . create ( KW_INTEGER148 ) ; adaptor . addChild ( root_0 , KW_INTEGER148_tree ) ; } } break ; case 7 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 480 : 5 : KW_INT { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_INT149 = ( Token ) match ( input , KW_INT , FOLLOW_KW_INT_in_nonCharType1475 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_INT149_tree = ( CommonTree ) adaptor . create ( KW_INT149 ) ; adaptor . addChild ( root_0 , KW_INT149_tree ) ; } } break ; case 8 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 481 : 5 : KW_NUMERIC ' ( ' INTEGER ( ' , ' INTEGER ) ? ' ) ' { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_NUMERIC150 = ( Token ) match ( input , KW_NUMERIC , FOLLOW_KW_NUMERIC_in_nonCharType1481 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_NUMERIC150_tree = ( CommonTree ) adaptor . create ( KW_NUMERIC150 ) ; adaptor . addChild ( root_0 , KW_NUMERIC150_tree ) ; } char_literal151 = ( Token ) match ( input , LEFT_PAREN , FOLLOW_LEFT_PAREN_in_nonCharType1483 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal151_tree = ( CommonTree ) adaptor . create ( char_literal151 ) ; adaptor . addChild ( root_0 , char_literal151_tree ) ; } INTEGER152 = ( Token ) match ( input , INTEGER , FOLLOW_INTEGER_in_nonCharType1485 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { INTEGER152_tree = ( CommonTree ) adaptor . create ( INTEGER152 ) ; adaptor . addChild ( root_0 , INTEGER152_tree ) ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 481 : 28 : ( ' , ' INTEGER ) ? int alt22 = 2 ; int LA22_0 = input . LA ( 1 ) ; if ( ( LA22_0 = = COMMA ) ) { alt22 = 1 ; } switch ( alt22 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 481 : 29 : ' , ' INTEGER { char_literal153 = ( Token ) match ( input , COMMA , FOLLOW_COMMA_in_nonCharType1488 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal153_tree = ( CommonTree ) adaptor . create ( char_literal153 ) ; adaptor . addChild ( root_0 , char_literal153_tree ) ; } INTEGER154 = ( Token ) match ( input , INTEGER , FOLLOW_INTEGER_in_nonCharType1490 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { INTEGER154_tree = ( CommonTree ) adaptor . create ( INTEGER154 ) ; adaptor . addChild ( root_0 , INTEGER154_tree ) ; } } break ; } char_literal155 = ( Token ) match ( input , RIGHT_PAREN , FOLLOW_RIGHT_PAREN_in_nonCharType1494 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal155_tree = ( CommonTree ) adaptor . create ( char_literal155 ) ; adaptor . addChild ( root_0 , char_literal155_tree ) ; } } break ; case 9 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 482 : 5 : KW_SMALLINT { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_SMALLINT156 = ( Token ) match ( input , KW_SMALLINT , FOLLOW_KW_SMALLINT_in_nonCharType1500 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_SMALLINT156_tree = ( CommonTree ) adaptor . create ( KW_SMALLINT156 ) ; adaptor . addChild ( root_0 , KW_SMALLINT156_tree ) ; } } break ; case 10 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 483 : 5 : KW_TIME { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_TIME157 = ( Token ) match ( input , KW_TIME , FOLLOW_KW_TIME_in_nonCharType1506 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_TIME157_tree = ( CommonTree ) adaptor . create ( KW_TIME157 ) ; adaptor . addChild ( root_0 , KW_TIME157_tree ) ; } } break ; case 11 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 484 : 5 : KW_TIMESTAMP { root_0 = ( CommonTree ) adaptor . nil ( ) ; KW_TIMESTAMP158 = ( Token ) match ( input , KW_TIMESTAMP , FOLLOW_KW_TIMESTAMP_in_nonCharType1512 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { KW_TIMESTAMP158_tree = ( CommonTree ) adaptor . create ( KW_TIMESTAMP158 ) ; adaptor . addChild ( root_0 , KW_TIMESTAMP158_tree ) ; } } break ; } retval . stop = input . LT ( - 1 ) ; if ( state . backtracking = = 0 ) { retval . tree = ( CommonTree ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } } catch ( RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; retval . tree = ( CommonTree ) adaptor . errorNode ( input , retval . start , input . LT ( - 1 ) , re ) ; } finally { / / do for sure before leaving if ( state . backtracking > 0 ) { memoize ( input , 31 , nonCharType_StartIndex ) ; } } return retval ; }
void test3 ( ) throws Throwable { ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 , recognizerSharedState0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . charSetCharType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test4 ( ) throws Throwable { ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 , recognizerSharedState0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . simpleValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser . simpleValue_return simpleValue ( ) throws RecognitionException { JaybirdSqlParser . simpleValue_return retval = new JaybirdSqlParser . simpleValue_return ( ) ; retval . start = input . LT ( 1 ) ; int simpleValue_StartIndex = input . index ( ) ; CommonTree root_0 = null ; Token set102 = null ; CommonTree set102_tree = null ; try { if ( state . backtracking > 0 & & alreadyParsedRule ( input , 22 ) ) { return retval ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 429 : 3 : ( GENERIC_ID | STRING | INTEGER | REAL ) / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : { root_0 = ( CommonTree ) adaptor . nil ( ) ; set102 = ( Token ) input . LT ( 1 ) ; if ( input . LA ( 1 ) = = GENERIC_ID | | input . LA ( 1 ) = = INTEGER | | input . LA ( 1 ) = = REAL | | input . LA ( 1 ) = = STRING ) { input . consume ( ) ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , ( CommonTree ) adaptor . create ( set102 ) ) ; state . errorRecovery = false ; state . failed = false ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } MismatchedSetException mse = new MismatchedSetException ( null , input ) ; throw mse ; } } retval . stop = input . LT ( - 1 ) ; if ( state . backtracking = = 0 ) { retval . tree = ( CommonTree ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } } catch ( RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; retval . tree = ( CommonTree ) adaptor . errorNode ( input , retval . start , input . LT ( - 1 ) , re ) ; } finally { / / do for sure before leaving if ( state . backtracking > 0 ) { memoize ( input , 22 , simpleValue_StartIndex ) ; } } return retval ; }
void test5 ( ) throws Throwable { JaybirdSqlParser . simpleValue_return jaybirdSqlParser_simpleValue_return0 = new JaybirdSqlParser . simpleValue_return ( ) ; Object object0 = jaybirdSqlParser_simpleValue_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test6 ( ) throws Throwable { ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream ( ( String ) null , " ? mU64Fvx | ] Hkoln & c" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRFileStream0 , recognizerSharedState0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 , 0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . extractFunction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ( InputStream ) byteArrayInputStream0 ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . arraySpec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test9 ( ) throws Throwable { ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 , recognizerSharedState0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . dataTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser . dataTypeDescriptor_return dataTypeDescriptor ( ) throws RecognitionException { JaybirdSqlParser . dataTypeDescriptor_return retval = new JaybirdSqlParser . dataTypeDescriptor_return ( ) ; retval . start = input . LT ( 1 ) ; int dataTypeDescriptor_StartIndex = input . index ( ) ; CommonTree root_0 = null ; JaybirdSqlParser . nonArrayType_return nonArrayType119 = null ; JaybirdSqlParser . arrayType_return arrayType120 = null ; try { if ( state . backtracking > 0 & & alreadyParsedRule ( input , 25 ) ) { return retval ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 445 : 3 : ( nonArrayType | arrayType ) int alt15 = 2 ; switch ( input . LA ( 1 ) ) { case KW_BIGINT : { int LA15_1 = input . LA ( 2 ) ; if ( ( LA15_1 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_1 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 1 , input ) ; throw nvae ; } } break ; case KW_DATE : { int LA15_2 = input . LA ( 2 ) ; if ( ( LA15_2 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_2 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 2 , input ) ; throw nvae ; } } break ; case KW_DECIMAL : { int LA15_3 = input . LA ( 2 ) ; if ( ( LA15_3 = = LEFT_PAREN ) ) { int LA15_16 = input . LA ( 3 ) ; if ( ( LA15_16 = = INTEGER ) ) { int LA15_21 = input . LA ( 4 ) ; if ( ( LA15_21 = = COMMA ) ) { int LA15_25 = input . LA ( 5 ) ; if ( ( LA15_25 = = INTEGER ) ) { int LA15_31 = input . LA ( 6 ) ; if ( ( LA15_31 = = RIGHT_PAREN ) ) { int LA15_26 = input . LA ( 7 ) ; if ( ( LA15_26 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_26 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 26 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 31 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 25 , input ) ; throw nvae ; } } else if ( ( LA15_21 = = RIGHT_PAREN ) ) { int LA15_26 = input . LA ( 5 ) ; if ( ( LA15_26 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_26 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 26 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 21 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 16 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 3 , input ) ; throw nvae ; } } break ; case KW_DOUBLE : { int LA15_4 = input . LA ( 2 ) ; if ( ( LA15_4 = = KW_PRECISION ) ) { int LA15_17 = input . LA ( 3 ) ; if ( ( LA15_17 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_17 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 17 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 4 , input ) ; throw nvae ; } } break ; case KW_FLOAT : { int LA15_5 = input . LA ( 2 ) ; if ( ( LA15_5 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_5 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 5 , input ) ; throw nvae ; } } break ; case KW_INTEGER : { int LA15_6 = input . LA ( 2 ) ; if ( ( LA15_6 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_6 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 6 , input ) ; throw nvae ; } } break ; case KW_INT : { int LA15_7 = input . LA ( 2 ) ; if ( ( LA15_7 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_7 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 7 , input ) ; throw nvae ; } } break ; case KW_NUMERIC : { int LA15_8 = input . LA ( 2 ) ; if ( ( LA15_8 = = LEFT_PAREN ) ) { int LA15_18 = input . LA ( 3 ) ; if ( ( LA15_18 = = INTEGER ) ) { int LA15_22 = input . LA ( 4 ) ; if ( ( LA15_22 = = COMMA ) ) { int LA15_27 = input . LA ( 5 ) ; if ( ( LA15_27 = = INTEGER ) ) { int LA15_32 = input . LA ( 6 ) ; if ( ( LA15_32 = = RIGHT_PAREN ) ) { int LA15_28 = input . LA ( 7 ) ; if ( ( LA15_28 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_28 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 28 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 32 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 27 , input ) ; throw nvae ; } } else if ( ( LA15_22 = = RIGHT_PAREN ) ) { int LA15_28 = input . LA ( 5 ) ; if ( ( LA15_28 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_28 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 28 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 22 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 18 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 8 , input ) ; throw nvae ; } } break ; case KW_SMALLINT : { int LA15_9 = input . LA ( 2 ) ; if ( ( LA15_9 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_9 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 9 , input ) ; throw nvae ; } } break ; case KW_TIME : { int LA15_10 = input . LA ( 2 ) ; if ( ( LA15_10 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_10 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 10 , input ) ; throw nvae ; } } break ; case KW_TIMESTAMP : { int LA15_11 = input . LA ( 2 ) ; if ( ( LA15_11 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_11 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 11 , input ) ; throw nvae ; } } break ; case KW_CHAR : { switch ( input . LA ( 2 ) ) { case LEFT_PAREN : { int LA15_19 = input . LA ( 3 ) ; if ( ( LA15_19 = = INTEGER ) ) { int LA15_23 = input . LA ( 4 ) ; if ( ( LA15_23 = = RIGHT_PAREN ) ) { int LA15_29 = input . LA ( 5 ) ; if ( ( LA15_29 = = CHARACTER | | LA15_29 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_29 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 29 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 23 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 19 , input ) ; throw nvae ; } } break ; case CHARACTER : case RIGHT_PAREN : { alt15 = 1 ; } break ; case 82 : { alt15 = 2 ; } break ; default : if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 12 , input ) ; throw nvae ; } } break ; case KW_VARCHAR : { int LA15_13 = input . LA ( 2 ) ; if ( ( LA15_13 = = LEFT_PAREN ) ) { int LA15_20 = input . LA ( 3 ) ; if ( ( LA15_20 = = INTEGER ) ) { int LA15_24 = input . LA ( 4 ) ; if ( ( LA15_24 = = RIGHT_PAREN ) ) { int LA15_30 = input . LA ( 5 ) ; if ( ( LA15_30 = = CHARACTER | | LA15_30 = = RIGHT_PAREN ) ) { alt15 = 1 ; } else if ( ( LA15_30 = = 82 ) ) { alt15 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 30 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 24 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 20 , input ) ; throw nvae ; } } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 13 , input ) ; throw nvae ; } } break ; case KW_BLOB : { alt15 = 1 ; } break ; default : if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 15 , 0 , input ) ; throw nvae ; } switch ( alt15 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 445 : 5 : nonArrayType { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_nonArrayType_in_dataTypeDescriptor1295 ) ; nonArrayType119 = nonArrayType ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , nonArrayType119 . getTree ( ) ) ; } break ; case 2 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 446 : 5 : arrayType { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_arrayType_in_dataTypeDescriptor1301 ) ; arrayType120 = arrayType ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , arrayType120 . getTree ( ) ) ; } break ; } retval . stop = input . LT ( - 1 ) ; if ( state . backtracking = = 0 ) { retval . tree = ( CommonTree ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } } catch ( RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; retval . tree = ( CommonTree ) adaptor . errorNode ( input , retval . start , input . LT ( - 1 ) , re ) ; } finally { / / do for sure before leaving if ( state . backtracking > 0 ) { memoize ( input , 25 , dataTypeDescriptor_StartIndex ) ; } } return retval ; }
void test10 ( ) throws Throwable { ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream ( ( String ) null , " ? mU64Fvx | ] Hkoln & c" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRFileStream0 , recognizerSharedState0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 , 0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . fullIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test11 ( ) throws Throwable { JaybirdSqlParser . trimSpecification_return jaybirdSqlParser_trimSpecification_return0 = new JaybirdSqlParser . trimSpecification_return ( ) ; Object object0 = jaybirdSqlParser_trimSpecification_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test12 ( ) throws Throwable { JaybirdSqlParser . blobSubtype_return jaybirdSqlParser_blobSubtype_return0 = new JaybirdSqlParser . blobSubtype_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test13 ( ) throws Throwable { JaybirdSqlParser . nonArrayType_return jaybirdSqlParser_nonArrayType_return0 = new JaybirdSqlParser . nonArrayType_return ( ) ; Object object0 = jaybirdSqlParser_nonArrayType_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test15 ( ) throws Throwable { ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRReaderStream0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . valueList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser . valueList_return valueList ( ) throws RecognitionException { JaybirdSqlParser . valueList_return retval = new JaybirdSqlParser . valueList_return ( ) ; retval . start = input . LT ( 1 ) ; int valueList_StartIndex = input . index ( ) ; CommonTree root_0 = null ; Token char_literal57 = null ; JaybirdSqlParser . value_return value56 = null ; JaybirdSqlParser . value_return value58 = null ; CommonTree char_literal57_tree = null ; try { if ( state . backtracking > 0 & & alreadyParsedRule ( input , 18 ) ) { return retval ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 351 : 3 : ( value ( ' , ' value ) * ) / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 351 : 5 : value ( ' , ' value ) * { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_value_in_valueList942 ) ; value56 = value ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , value56 . getTree ( ) ) ; / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 351 : 11 : ( ' , ' value ) * loop12 : do { int alt12 = 2 ; int LA12_0 = input . LA ( 1 ) ; if ( ( LA12_0 = = COMMA ) ) { alt12 = 1 ; } switch ( alt12 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 351 : 12 : ' , ' value { char_literal57 = ( Token ) match ( input , COMMA , FOLLOW_COMMA_in_valueList945 ) ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) { char_literal57_tree = ( CommonTree ) adaptor . create ( char_literal57 ) ; adaptor . addChild ( root_0 , char_literal57_tree ) ; } pushFollow ( FOLLOW_value_in_valueList947 ) ; value58 = value ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , value58 . getTree ( ) ) ; } break ; default : break loop12 ; } } while ( true ) ; } retval . stop = input . LT ( - 1 ) ; if ( state . backtracking = = 0 ) { retval . tree = ( CommonTree ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } } catch ( RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; retval . tree = ( CommonTree ) adaptor . errorNode ( input , retval . start , input . LT ( - 1 ) , re ) ; } finally { / / do for sure before leaving if ( state . backtracking > 0 ) { memoize ( input , 18 , valueList_StartIndex ) ; } } return retval ; }
void test16 ( ) throws Throwable { JaybirdSqlParser . valueList_return jaybirdSqlParser_valueList_return0 = new JaybirdSqlParser . valueList_return ( ) ; Object object0 = jaybirdSqlParser_valueList_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test17 ( ) throws Throwable { ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 , recognizerSharedState0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; Parser [ ] parserArray0 = jaybirdSqlParser0 . getDelegates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Parser [ ] getDelegates ( ) { return new Parser [ ] { } ; }
void test18 ( ) throws Throwable { JaybirdSqlParser . trimFunction_return jaybirdSqlParser_trimFunction_return0 = new JaybirdSqlParser . trimFunction_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test19 ( ) throws Throwable { ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 , recognizerSharedState0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . assignments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test20 ( ) throws Throwable { JaybirdSqlParser . assignments_return jaybirdSqlParser_assignments_return0 = new JaybirdSqlParser . assignments_return ( ) ; Object object0 = jaybirdSqlParser_assignments_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test21 ( ) throws Throwable { JaybirdSqlParser . defaultValuesClause_return jaybirdSqlParser_defaultValuesClause_return0 = new JaybirdSqlParser . defaultValuesClause_return ( ) ; Object object0 = jaybirdSqlParser_defaultValuesClause_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test22 ( ) throws Throwable { JaybirdSqlParser . simpleType_return jaybirdSqlParser_simpleType_return0 = new JaybirdSqlParser . simpleType_return ( ) ; Object object0 = jaybirdSqlParser_simpleType_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test23 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; byteArray0 [ 1 ] = ( byte ) 58 ; byteArray0 [ 2 ] = ( byte ) 58 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ( InputStream ) byteArrayInputStream0 ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . returningClause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test24 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "L# - fN" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 , recognizerSharedState0 ) ; CommonTokenStream commonTokenStream0 = new CommonTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) commonTokenStream0 , recognizerSharedState0 ) ; JaybirdSqlParser . blobSegSize_return jaybirdSqlParser_blobSegSize_return0 = jaybirdSqlParser0 . blobSegSize ( ) ; jaybirdSqlParser_blobSegSize_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test25 ( ) throws Throwable { JaybirdSqlParser . castExpression_return jaybirdSqlParser_castExpression_return0 = new JaybirdSqlParser . castExpression_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test27 ( ) throws Throwable { JaybirdSqlParser . arrayType_return jaybirdSqlParser_arrayType_return0 = new JaybirdSqlParser . arrayType_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test28 ( ) throws Throwable { JaybirdSqlParser . updateStatement_return jaybirdSqlParser_updateStatement_return0 = new JaybirdSqlParser . updateStatement_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test29 ( ) throws Throwable { JaybirdSqlParser . updateOrInsertStatement_return jaybirdSqlParser_updateOrInsertStatement_return0 = new JaybirdSqlParser . updateOrInsertStatement_return ( ) ; Object object0 = jaybirdSqlParser_updateOrInsertStatement_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test30 ( ) throws Throwable { JaybirdSqlParser . charType_return jaybirdSqlParser_charType_return0 = new JaybirdSqlParser . charType_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test31 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ( InputStream ) byteArrayInputStream0 ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; JaybirdSqlParser . returningClause_return jaybirdSqlParser_returningClause_return0 = jaybirdSqlParser0 . returningClause ( ) ; jaybirdSqlParser_returningClause_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test33 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "L# - fN" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 , recognizerSharedState0 ) ; CommonTokenStream commonTokenStream0 = new CommonTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) commonTokenStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . parameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test34 ( ) throws Throwable { JaybirdSqlParser . nextValueExpression_return jaybirdSqlParser_nextValueExpression_return0 = new JaybirdSqlParser . nextValueExpression_return ( ) ; Object object0 = jaybirdSqlParser_nextValueExpression_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test35 ( ) throws Throwable { JaybirdSqlParser . arrayElement_return jaybirdSqlParser_arrayElement_return0 = new JaybirdSqlParser . arrayElement_return ( ) ; Object object0 = jaybirdSqlParser_arrayElement_return0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test36 ( ) throws Throwable { JaybirdSqlParser . deleteStatement_return jaybirdSqlParser_deleteStatement_return0 = new JaybirdSqlParser . deleteStatement_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test37 ( ) throws Throwable { JaybirdSqlParser . insertStatement_return jaybirdSqlParser_insertStatement_return0 = new JaybirdSqlParser . insertStatement_return ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser ( TokenStream input ) { this ( input , new RecognizerSharedState ( ) ) ; }
void test39 ( ) throws Throwable { ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRReaderStream0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . statement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser . statement_return statement ( ) throws RecognitionException { JaybirdSqlParser . statement_return retval = new JaybirdSqlParser . statement_return ( ) ; retval . start = input . LT ( 1 ) ; int statement_StartIndex = input . index ( ) ; CommonTree root_0 = null ; JaybirdSqlParser . insertStatement_return insertStatement1 = null ; JaybirdSqlParser . deleteStatement_return deleteStatement2 = null ; JaybirdSqlParser . updateStatement_return updateStatement3 = null ; JaybirdSqlParser . updateOrInsertStatement_return updateOrInsertStatement4 = null ; try { if ( state . backtracking > 0 & & alreadyParsedRule ( input , 1 ) ) { return retval ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 186 : 3 : ( insertStatement | deleteStatement | updateStatement | updateOrInsertStatement ) int alt1 = 4 ; switch ( input . LA ( 1 ) ) { case INSERT : { alt1 = 1 ; } break ; case DELETE : { alt1 = 2 ; } break ; case UPDATE : { int LA1_3 = input . LA ( 2 ) ; if ( ( LA1_3 = = OR ) ) { alt1 = 4 ; } else if ( ( LA1_3 = = GENERIC_ID | | LA1_3 = = QUOTED_ID ) ) { alt1 = 3 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 1 , 3 , input ) ; throw nvae ; } } break ; default : if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 1 , 0 , input ) ; throw nvae ; } switch ( alt1 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 186 : 5 : insertStatement { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_insertStatement_in_statement474 ) ; insertStatement1 = insertStatement ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , insertStatement1 . getTree ( ) ) ; } break ; case 2 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 187 : 5 : deleteStatement { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_deleteStatement_in_statement480 ) ; deleteStatement2 = deleteStatement ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , deleteStatement2 . getTree ( ) ) ; } break ; case 3 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 188 : 5 : updateStatement { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_updateStatement_in_statement486 ) ; updateStatement3 = updateStatement ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , updateStatement3 . getTree ( ) ) ; } break ; case 4 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 190 : 5 : updateOrInsertStatement { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_updateOrInsertStatement_in_statement493 ) ; updateOrInsertStatement4 = updateOrInsertStatement ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , updateOrInsertStatement4 . getTree ( ) ) ; } break ; } retval . stop = input . LT ( - 1 ) ; if ( state . backtracking = = 0 ) { retval . tree = ( CommonTree ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } } catch ( RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; retval . tree = ( CommonTree ) adaptor . errorNode ( input , retval . start , input . LT ( - 1 ) , re ) ; } finally { / / do for sure before leaving if ( state . backtracking > 0 ) { memoize ( input , 1 , statement_StartIndex ) ; } } return retval ; }
void test40 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( "L# - fN" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 , recognizerSharedState0 ) ; CommonTokenStream commonTokenStream0 = new CommonTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) commonTokenStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . updateOrInsertStatement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test41 ( ) throws Throwable { ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream ( ( String ) null , " ? mU64Fvx | ] Hkoln & c" ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRFileStream0 , recognizerSharedState0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 , 0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; jaybirdSqlParser0 . nonArrayType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlParser . nonArrayType_return nonArrayType ( ) throws RecognitionException { JaybirdSqlParser . nonArrayType_return retval = new JaybirdSqlParser . nonArrayType_return ( ) ; retval . start = input . LT ( 1 ) ; int nonArrayType_StartIndex = input . index ( ) ; CommonTree root_0 = null ; JaybirdSqlParser . simpleType_return simpleType121 = null ; JaybirdSqlParser . blobType_return blobType122 = null ; try { if ( state . backtracking > 0 & & alreadyParsedRule ( input , 26 ) ) { return retval ; } / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 450 : 3 : ( simpleType | blobType ) int alt16 = 2 ; int LA16_0 = input . LA ( 1 ) ; if ( ( LA16_0 = = KW_BIGINT | | ( LA16_0 > = KW_CHAR & & LA16_0 < = KW_NUMERIC ) | | ( LA16_0 > = KW_SMALLINT & & LA16_0 < = KW_VARCHAR ) ) ) { alt16 = 1 ; } else if ( ( LA16_0 = = KW_BLOB ) ) { alt16 = 2 ; } else { if ( state . backtracking > 0 ) { state . failed = true ; return retval ; } NoViableAltException nvae = new NoViableAltException ( "" , 16 , 0 , input ) ; throw nvae ; } switch ( alt16 ) { case 1 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 450 : 5 : simpleType { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_simpleType_in_nonArrayType1316 ) ; simpleType121 = simpleType ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , simpleType121 . getTree ( ) ) ; } break ; case 2 : / / D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g : 451 : 5 : blobType { root_0 = ( CommonTree ) adaptor . nil ( ) ; pushFollow ( FOLLOW_blobType_in_nonArrayType1322 ) ; blobType122 = blobType ( ) ; state . _fsp - - ; if ( state . failed ) return retval ; if ( state . backtracking = = 0 ) adaptor . addChild ( root_0 , blobType122 . getTree ( ) ) ; } break ; } retval . stop = input . LT ( - 1 ) ; if ( state . backtracking = = 0 ) { retval . tree = ( CommonTree ) adaptor . rulePostProcessing ( root_0 ) ; adaptor . setTokenBoundaries ( retval . tree , retval . start , retval . stop ) ; } } catch ( RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; retval . tree = ( CommonTree ) adaptor . errorNode ( input , retval . start , input . LT ( - 1 ) , re ) ; } finally { / / do for sure before leaving if ( state . backtracking > 0 ) { memoize ( input , 26 , nonArrayType_StartIndex ) ; } } return retval ; }
void test42 ( ) throws Throwable { ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 , recognizerSharedState0 ) ; BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) bufferedTokenStream0 ) ; jaybirdSqlParser0 . arrayElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test43 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; byteArray0 [ 1 ] = ( byte ) 58 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream ( ( InputStream ) byteArrayInputStream0 ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRInputStream0 ) ; TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream ( ( TokenSource ) jaybirdSqlLexer0 ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser ( ( TokenStream ) tokenRewriteStream0 , recognizerSharedState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test13 ( ) throws Throwable { JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ) ; Lexer [ ] lexerArray0 = jaybirdSqlLexer0 . getDelegates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Parser [ ] getDelegates ( ) { return new Parser [ ] { } ; }
void test14 ( ) throws Throwable { ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( ) ; RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState ( ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 , recognizerSharedState0 ) ; BitSet bitSet0 = new BitSet ( 1713 ) ; jaybirdSqlLexer0 . mismatchIsMissingToken ( ( IntStream ) aNTLRStringStream0 , bitSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test19 ( ) throws Throwable { JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ) ; ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream ( ) ; jaybirdSqlLexer0 . mismatchIsUnwantedToken ( ( IntStream ) aNTLRReaderStream0 , ( - 351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test20 ( ) throws Throwable { JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ) ; String string0 = jaybirdSqlLexer0 . getGrammarFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGrammarFileName ( ) { return "D : \\Users\\rrokytskyy\\workspace\\client - java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql . g" ; }
void test28 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , 76 ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; Collection < Object > collection0 = jaybirdSqlLexer0 . getErrorMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test31 ( ) throws Throwable { JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ) ; int int0 = jaybirdSqlLexer0 . getMismatchCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMismatchCount ( ) { return _mismatchCount ; }
void test32 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 1 ] = 'O' ; charArray0 [ 2 ] = '$' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; CommonToken commonToken0 = ( CommonToken ) jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test33 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 0 ] = 'B' ; charArray0 [ 1 ] = '2' ; charArray0 [ 2 ] = '\'' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test34 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; charArray0 [ 5 ] = 'A' ; charArray0 [ 6 ] = ' > ' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test35 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 2 ] = '$' ; charArray0 [ 3 ] = '2' ; charArray0 [ 4 ] = 'u' ; charArray0 [ 5 ] = 'A' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test36 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 4 ] = 'k' ; charArray0 [ 5 ] = 'H' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'W' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test38 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 0 ] = 'O' ; charArray0 [ 1 ] = 'O' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test40 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 2 ] = 'B' ; charArray0 [ 3 ] = 'Z' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test41 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; charArray0 [ 2 ] = '$' ; charArray0 [ 3 ] = '_' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test42 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 5 ] = 'o' ; charArray0 [ 6 ] = 'a' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test43 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 3 ] = 'Z' ; charArray0 [ 4 ] = 'k' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'W' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test44 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 0 ] = 'o' ; charArray0 [ 1 ] = 'o' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test45 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; charArray0 [ 1 ] = '7' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test48 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; charArray0 [ 0 ] = '\'' ; charArray0 [ 7 ] = '\'' ; ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream ( charArray0 , ( int ) 'L' ) ; JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer ( ( CharStream ) aNTLRStringStream0 ) ; jaybirdSqlLexer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JaybirdSqlLexer ( ) { }
void test0 ( ) throws Throwable { StatementParserImpl statementParserImpl0 = new StatementParserImpl ( ) ; JaybirdStatementModel jaybirdStatementModel0 = statementParserImpl0 . parseInsertStatement ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSelectClause ( ) { return selectClause ; }
void test0 ( ) throws Throwable { CaseInsensitiveStream caseInsensitiveStream0 = new CaseInsensitiveStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CaseInsensitiveStream ( ) { super ( ) ; }
void test1 ( ) throws Throwable { char [ ] charArray0 = new char [ 1 ] ; CaseInsensitiveStream caseInsensitiveStream0 = new CaseInsensitiveStream ( charArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CaseInsensitiveStream ( ) { super ( ) ; }
void test2 ( ) throws Throwable { CaseInsensitiveStream caseInsensitiveStream0 = new CaseInsensitiveStream ( "b } TRi" ) ; int int0 = caseInsensitiveStream0 . LA ( 318 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int LA ( int i ) { / / return stream . LA ( i ) ; if ( i = = 0 ) { return 0 ; / / undefined } if ( i < 0 ) { i + + ; / / e . g . , translate LA ( - 1 ) to use offset 0 } if ( ( p + i - 1 ) > = n ) { return CharStream . EOF ; } return Character . toLowerCase ( data [ p + i - 1 ] ) ; }
void test3 ( ) throws Throwable { CaseInsensitiveStream caseInsensitiveStream0 = new CaseInsensitiveStream ( "wujA . d ; L { 2 > ] { X * rz^" ) ; int int0 = caseInsensitiveStream0 . LT ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CaseInsensitiveStream ( ) { super ( ) ; }
void test0 ( ) throws Throwable { GDSExceptionHelper . GDSMessage gDSExceptionHelper_GDSMessage0 = GDSExceptionHelper . getMessage ( ( - 1094 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { String s = super . getMessage ( ) ; if ( getLinkedException ( ) = = null ) return s ; if ( s = = null ) return getLinkedException ( ) . getMessage ( ) ; return s + "\nReason : " + getLinkedException ( ) . getMessage ( ) ; }
void test1 ( ) throws Throwable { GDSExceptionHelper gDSExceptionHelper0 = new GDSExceptionHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { String string0 = GDSExceptionHelper . getSQLState ( ( - 1094 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQLState ( ) { if ( original ! = null ) return original . getSQLState ( ) ; else return super . getSQLState ( ) ; }
void test3 ( ) throws Throwable { GDSExceptionHelper . GDSMessage gDSExceptionHelper_GDSMessage0 = new GDSExceptionHelper . GDSMessage ( " ; + P } ? ZrHQ ( OD7 > { K7'S > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { GDSExceptionHelper . GDSMessage gDSExceptionHelper_GDSMessage0 = new GDSExceptionHelper . GDSMessage ( " ; + P } ? ZrHQ ( OD7 > { K7'S > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test0 ( ) throws Throwable { XSQLDA xSQLDA0 = new XSQLDA ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLDA ( ) { version = ISCConstants . SQLDA_VERSION1 ; }
void test1 ( ) throws Throwable { XSQLDA xSQLDA0 = new XSQLDA ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLDA ( ) { version = ISCConstants . SQLDA_VERSION1 ; }
void test0 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; Timestamp timestamp0 = xSQLVAR0 . decodeTimestamp ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Timestamp encodeTimestamp ( java . sql . Timestamp value , Calendar cal ) { return encodeTimestamp ( value , cal , false ) ; }
void test1 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Date date0 = xSQLVAR0 . decodeDate ( ( byte [ ] ) null ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 745 , 0 , 0 , 745 , 0 , 0 ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeDateCalendar ( date0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeDateCalendar ( Date d , Calendar c ) { datetime dt = new datetime ( d , c ) ; return dt . toDateBytes ( ) ; }
void test2 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; XSQLVAR xSQLVAR1 = xSQLVAR0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer deepCopy ( ) { return new FBConnectionRequestInfo ( dpb . deepCopy ( ) ) ; }
void test5 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeShort ( ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeShort ( short value ) { return encodeInt ( value ) ; }
void test6 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Time time0 = xSQLVAR0 . decodeTime ( ( byte [ ] ) null ) ; Locale locale0 = Locale . JAPANESE ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( locale0 ) ; xSQLVAR0 . encodeTime ( time0 , ( Calendar ) gregorianCalendar0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test8 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Timestamp timestamp0 = new Timestamp ( ( long ) 0 ) ; Timestamp timestamp1 = xSQLVAR0 . decodeTimestamp ( timestamp0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Timestamp decodeTimestamp ( Timestamp value , Calendar cal ) { return decodeTimestamp ( value , cal , false ) ; }
void test9 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeDouble ( ( double ) 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeDouble ( double value ) { return encodeLong ( Double . doubleToLongBits ( value ) ) ; }
void test10 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Time time0 = new Time ( ( long ) 0 ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeTime ( time0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time encodeTime ( Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) + ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test11 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeFloat ( ( float ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeFloat ( float value ) { return encodeInt ( Float . floatToIntBits ( value ) ) ; }
void test12 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Timestamp timestamp0 = new Timestamp ( ( long ) 0 ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Timestamp timestamp1 = xSQLVAR0 . encodeTimestamp ( timestamp0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Timestamp encodeTimestamp ( java . sql . Timestamp value , Calendar cal ) { return encodeTimestamp ( value , cal , false ) ; }
void test13 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Date date0 = new Date ( ( - 1376L ) ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date encodeDate ( java . sql . Date d , Calendar cal ) { if ( cal = = null ) { return ( d ) ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test14 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = new byte [ 22 ] ; xSQLVAR0 . sqldata = byteArray0 ; XSQLVAR xSQLVAR1 = xSQLVAR0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer deepCopy ( ) { return new FBConnectionRequestInfo ( dpb . deepCopy ( ) ) ; }
void test15 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = new byte [ 22 ] ; xSQLVAR0 . sqldata = byteArray0 ; xSQLVAR0 . copyFrom ( xSQLVAR0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyFrom ( XSQLVAR original ) { copyFrom ( original , true ) ; }
void test18 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = xSQLVAR0 . encodeString ( xSQLVAR0 . sqldata , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeString ( String value , String encoding , String mappingPath ) throws SQLException { if ( coder = = null ) coder = EncodingFactory . getEncoding ( encoding , mappingPath ) ; return coder . encodeToCharset ( value ) ; }
void test20 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; xSQLVAR0 . decodeString ( byteArray0 , ( String ) null , ( String ) null ) ; String string0 = xSQLVAR0 . decodeString ( byteArray0 , "888\uFFFD" , "888\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodeString ( byte [ ] value , String encoding , String mappingPath ) throws SQLException { if ( coder = = null ) coder = EncodingFactory . getEncoding ( encoding , mappingPath ) ; return coder . decodeFromCharset ( value ) ; }
void test21 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; Timestamp timestamp0 = xSQLVAR0 . decodeTimestamp ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date getDate ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getDate ( parameterIndex ) ; }
void test22 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Timestamp timestamp0 = new Timestamp ( ( long ) 0 ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Timestamp timestamp1 = xSQLVAR0 . encodeTimestamp ( timestamp0 , ( Calendar ) gregorianCalendar0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Timestamp encodeTimestamp ( java . sql . Timestamp value , Calendar cal ) { return encodeTimestamp ( value , cal , false ) ; }
void test23 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Timestamp timestamp0 = new Timestamp ( ( long ) 0 ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Timestamp timestamp1 = xSQLVAR0 . decodeTimestamp ( timestamp0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Timestamp decodeTimestamp ( Timestamp value , Calendar cal ) { return decodeTimestamp ( value , cal , false ) ; }
void test24 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Timestamp timestamp0 = new Timestamp ( ( long ) 0 ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Timestamp timestamp1 = xSQLVAR0 . decodeTimestamp ( timestamp0 , ( Calendar ) gregorianCalendar0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Time getTime ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getTime ( parameterIndex ) ; }
void test26 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Time time0 = new Time ( ( long ) 0 ) ; Time time1 = xSQLVAR0 . encodeTime ( time0 , ( Calendar ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time encodeTime ( Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) + ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test27 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Time time0 = new Time ( ( long ) 0 ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( int ) ( byte ) 0 , 8 , 0 , 0 , 0 , 8 ) ; Time time1 = xSQLVAR0 . encodeTime ( time0 , ( Calendar ) gregorianCalendar0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time encodeTime ( Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) + ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test28 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Time time0 = xSQLVAR0 . decodeTime ( ( byte [ ] ) null ) ; Locale locale0 = Locale . JAPANESE ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( locale0 ) ; Time time1 = xSQLVAR0 . decodeTime ( time0 , ( Calendar ) gregorianCalendar0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test29 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Time time0 = xSQLVAR0 . decodeTime ( ( byte [ ] ) null ) ; Time time1 = xSQLVAR0 . decodeTime ( time0 , ( Calendar ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time decodeTime ( java . sql . Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) - ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test30 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Time time0 = new Time ( ( long ) 0 ) ; Time time1 = xSQLVAR0 . decodeTime ( time0 , ( Calendar ) gregorianCalendar0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Time getTime ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getTime ( parameterIndex ) ; }
void test31 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 1702 ) , 0 , 0 , 0 , 0 , 0 ) ; Date date0 = xSQLVAR0 . decodeDateCalendar ( ( byte [ ] ) null , ( Calendar ) gregorianCalendar0 ) ; Date date1 = xSQLVAR0 . encodeDate ( date0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test32 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Date date0 = xSQLVAR0 . decodeDate ( ( byte [ ] ) null ) ; Date date1 = xSQLVAR0 . encodeDate ( date0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date encodeDate ( java . sql . Date d , Calendar cal ) { if ( cal = = null ) { return ( d ) ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test33 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; Date date0 = xSQLVAR0 . decodeDate ( ( byte [ ] ) null ) ; Date date1 = xSQLVAR0 . decodeDate ( date0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date decodeDate ( Date d , Calendar cal ) { if ( cal = = null | | d = = null ) { return d ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test34 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 0 , 0 , 0 ) ; Date date0 = xSQLVAR0 . decodeDate ( ( Date ) null , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date decodeDate ( Date d , Calendar cal ) { if ( cal = = null | | d = = null ) { return d ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test35 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 1702 ) , 0 , 0 , 0 , 0 , 0 ) ; Date date0 = xSQLVAR0 . decodeDateCalendar ( ( byte [ ] ) null , ( Calendar ) gregorianCalendar0 ) ; Date date1 = xSQLVAR0 . decodeDate ( date0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test36 ( ) throws Throwable { XSQLVAR xSQLVAR0 = new XSQLVAR ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 0 ] = ( byte ) ( - 119 ) ; byteArray0 [ 3 ] = ( byte ) 15 ; Timestamp timestamp0 = xSQLVAR0 . decodeTimestamp ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test0 ( ) throws Throwable { DbAttachInfo dbAttachInfo0 = new DbAttachInfo ( "wT_l\"yA } 5y5 ) rPH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test1 ( ) throws Throwable { DbAttachInfo dbAttachInfo0 = new DbAttachInfo ( "Bad server string : '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test2 ( ) throws Throwable { Integer integer0 = new Integer ( 475 ) ; DbAttachInfo dbAttachInfo0 = new DbAttachInfo ( ( String ) null , integer0 , "lAoalhos" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test11 ( ) throws Throwable { DbAttachInfo dbAttachInfo0 = new DbAttachInfo ( "wT_l\"yA } 5y5 ) rPH" , ( Integer ) null , "wT_l\"yA } 5y5 ) rPH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return this . port ; }
void test0 ( ) throws Throwable { GDSType gDSType0 = GDSType . getType ( "EMBEDDED" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object readResolve ( ) throws ObjectStreamException { FBManagedConnectionFactory mcf = mcfInstances . get ( this ) ; if ( mcf ! = null ) return mcf ; mcf = new FBManagedConnectionFactory ( getGDSType ( ) , ( FBConnectionProperties ) this . connectionProperties . clone ( ) ) ; return mcf ; }
void test1 ( ) throws Throwable { GDSType gDSType0 = GDSType . getType ( "EMBEDDED" ) ; String string0 = gDSType0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test2 ( ) throws Throwable { GDSType gDSType0 = GDSType . getType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test0 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; JavaGDSImpl javaGDSImpl1 = ( JavaGDSImpl ) javaGDSImpl0 . readResolve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test3 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; GDSType gDSType0 = javaGDSImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test1 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setProtocol ( ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocol ( ) ; / * * * @return the major ODS version of the database . * / int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test2 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setResp_blob_id ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocol ( ) ; / * * * @return the major ODS version of the database . * / int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test3 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; List < GDSException > list0 = isc_db_handle_impl0 . getWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) throws SQLException { if ( ! wasFetched ) fetch ( ) ; return isEmpty ; }
void test4 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getRdbId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRdbId ( ) { checkValidity ( ) ; return rdb_id ; }
void test6 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; Collection < AbstractIscTrHandle > collection0 = isc_db_handle_impl0 . getTransactions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test7 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getODSMajorVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test9 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setSubject ( ( Subject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getResp_blob_id ( ) { return resp_blob_id ; }
void test11 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; isc_db_handle_impl0 . addWarning ( ( GDSException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenTransactionCount ( ) { checkValidity ( ) ; return rdb_transactions . size ( ) ; }
void test12 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setODSMajorVersion ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test14 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setODSMinorVersion ( ( int ) ( byte ) 74 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test15 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; long long0 = isc_db_handle_impl0 . getResp_blob_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getResp_blob_id ( ) { return resp_blob_id ; }
void test16 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getOpenTransactionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenTransactionCount ( ) { checkValidity ( ) ; return rdb_transactions . size ( ) ; }
void test17 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; byte [ ] byteArray0 = isc_db_handle_impl0 . getResp_data_truncated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getResp_data_truncated ( ) { byte [ ] dest = new byte [ getResp_data_len ( ) ] ; System . arraycopy ( getResp_data ( ) , 0 , dest , 0 , dest . length ) ; return dest ; }
void test19 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setRdbId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRdbId ( ) { checkValidity ( ) ; return rdb_id ; }
void test20 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setResp_object ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResp_object ( ) { return resp_object ; }
void test21 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getProtocol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocol ( ) ; / * * * @return the major ODS version of the database . * / int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test22 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getResp_object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResp_object ( ) { return resp_object ; }
void test23 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getODSMinorVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test24 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; Subject subject0 = isc_db_handle_impl0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Subject getSubject ( ) { return subject ; }
void test25 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . invalidateHandle ( ) ; boolean boolean0 = isc_db_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test26 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getDialect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDialect ( ) ; void setDialect ( int value ) ; / * * * Get the Firebird protocol version that is used for this handle * * @return Protocol version number * / int getProtocol ( ) ; / * * * @return the major ODS version of the database . * / int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test27 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setDialect ( ( - 119 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDialect ( ) ; void setDialect ( int value ) ; / * * * Get the Firebird protocol version that is used for this handle * * @return Protocol version number * / int getProtocol ( ) ; / * * * @return the major ODS version of the database . * / int getODSMajorVersion ( ) ; void setODSMajorVersion ( int value ) ; / * * * @return the minor ODS version of the database . * / int getODSMinorVersion ( ) ; void setODSMinorVersion ( int value ) ; / * * * @return database server version . * / String getVersion ( ) ; / * * * * @param version Version string * @throws GDSException For failures to parse or process the version string * / void setVersion ( String version ) throws GDSException ; / * * * Retrieve whether this handle is valid . * * @return < code > true < / code > if this handle is valid , * < code > false < / code > otherwise * / boolean isValid ( ) ; }
void test28 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . isc_db_handle_impl isc_db_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_db_handle_impl ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; isc_db_handle_impl0 . setResp_data ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRdbId ( ) { checkValidity ( ) ; return rdb_id ; }
void test29 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; boolean boolean0 = isc_db_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test31 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; boolean boolean0 = isc_db_handle_impl0 . hasTransactions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasTransactions ( ) { checkValidity ( ) ; return ! rdb_transactions . isEmpty ( ) ; }
void test1 ( ) throws Throwable { GDSFactory gDSFactory0 = new GDSFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Set < String > set0 = GDSFactory . getSupportedProtocols ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test6 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) GDSFactory . getDefaultGDS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDS getDefaultGDS ( ) { return getGDSForType ( defaultType ) ; }
void test7 ( ) throws Throwable { LocalGDSFactoryPlugin localGDSFactoryPlugin0 = new LocalGDSFactoryPlugin ( ) ; GDSFactory . registerPlugin ( ( GDSFactoryPlugin ) localGDSFactoryPlugin0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultProtocol ( ) ; String [ ] getSupportedProtocols ( ) ; GDS getGDS ( ) ; String getDatabasePath ( String server , Integer port , String path ) throws GDSException ; String getDatabasePath ( String jdbcUrl ) throws GDSException ; }
void test8 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) GDSFactory . getGDSForType ( ( GDSType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDS getGDSForType ( GDSType gdsType ) { if ( gdsType = = null ) gdsType = defaultType ; GDSFactoryPlugin gdsPlugin = typeToPluginMap . get ( gdsType ) ; if ( gdsPlugin = = null ) throw new IllegalArgumentException ( "Specified GDS type " + gdsType + " is unknown . " ) ; return gdsPlugin . getGDS ( ) ; }
void test9 ( ) throws Throwable { GDSType gDSType0 = GDSType . getType ( " ( " ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) GDSFactory . getGDSForType ( gDSType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDS getGDSForType ( GDSType gdsType ) { if ( gdsType = = null ) gdsType = defaultType ; GDSFactoryPlugin gdsPlugin = typeToPluginMap . get ( gdsType ) ; if ( gdsPlugin = = null ) throw new IllegalArgumentException ( "Specified GDS type " + gdsType + " is unknown . " ) ; return gdsPlugin . getGDS ( ) ; }
void test10 ( ) throws Throwable { GDSType gDSType0 = GDSFactory . getTypeForProtocol ( "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDSType getTypeForProtocol ( String jdbcUrl ) { / / TODO use TreeMap functionality to locate protocol ( eg using floorKey ( ) or ceilingKey ( ) ) ? for ( Entry < String , GDSFactoryPlugin > entry : jdbcUrlToPluginMap . entrySet ( ) ) { String jdbcProtocol = entry . getKey ( ) ; if ( jdbcUrl . startsWith ( jdbcProtocol ) ) return GDSType . getType ( entry . getValue ( ) . getTypeName ( ) ) ; } return null ; }
void test11 ( ) throws Throwable { GDSType gDSType0 = GDSFactory . getTypeForProtocol ( "jdbc : firebirdsql : jva [ w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test0 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setExecutionPlan ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test1 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; String string0 = isc_stmt_handle_impl0 . getExecutionPlan ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExecutionPlan ( ) throws SQLException ; }
void test0 ( ) throws Throwable { EmbeddedGDSFactoryPlugin embeddedGDSFactoryPlugin0 = new EmbeddedGDSFactoryPlugin ( ) ; Class < ? > class0 = embeddedGDSFactoryPlugin0 . getConnectionClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? > getConnectionClass ( GDSType gdsType ) { return getPlugin ( gdsType ) . getConnectionClass ( ) ; }
void test1 ( ) throws Throwable { NativeGDSFactoryPlugin nativeGDSFactoryPlugin0 = new NativeGDSFactoryPlugin ( ) ; String string0 = nativeGDSFactoryPlugin0 . getDefaultProtocol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultProtocol ( ) ; String [ ] getSupportedProtocols ( ) ; GDS getGDS ( ) ; String getDatabasePath ( String server , Integer port , String path ) throws GDSException ; String getDatabasePath ( String jdbcUrl ) throws GDSException ; }
void test2 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; int int0 = wireGDSFactoryPlugin0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test4 ( ) throws Throwable { NativeGDSFactoryPlugin nativeGDSFactoryPlugin0 = new NativeGDSFactoryPlugin ( ) ; String string0 = nativeGDSFactoryPlugin0 . getDatabasePath ( "jdbc : firebirdsql : : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabasePath ( GDSType gdsType , String server , Integer port , String path ) throws GDSException { return getPlugin ( gdsType ) . getDatabasePath ( server , port , path ) ; }
void test5 ( ) throws Throwable { EmbeddedGDSFactoryPlugin embeddedGDSFactoryPlugin0 = new EmbeddedGDSFactoryPlugin ( ) ; boolean boolean0 = embeddedGDSFactoryPlugin0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test6 ( ) throws Throwable { NativeGDSFactoryPlugin nativeGDSFactoryPlugin0 = new NativeGDSFactoryPlugin ( ) ; boolean boolean0 = nativeGDSFactoryPlugin0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test1 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; gDSHelper0 . setCurrentTrHandle ( ( AbstractIscTrHandle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test3 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; String string0 = gDSHelper0 . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserName ( ) { return getUser ( ) ; }
void test4 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; IscDbHandle iscDbHandle0 = gDSHelper0 . getCurrentDbHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IscDbHandle getCurrentDbHandle ( ) { return currentDbHandle ; }
void test5 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; GDS gDS0 = gDSHelper0 . getInternalAPIHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDS getInternalAPIHandler ( ) throws SQLException { try { return getGDSHelper ( ) . getInternalAPIHandler ( ) ; } catch ( GDSException ex ) { throw new FBSQLException ( ex ) ; } }
void test6 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; AbstractIscTrHandle abstractIscTrHandle0 = gDSHelper0 . getCurrentTrHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractIscTrHandle getCurrentTrHandle ( ) { return currentTr ; }
void test7 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; String string0 = gDSHelper0 . getJavaEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaEncoding ( String iscEncoding ) { if ( iscEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; / / / / very important for performance / / if javaEncoding is the default one , set to null / / String javaEncoding = iscEncodings . get ( iscEncoding . toLowerCase ( ) ) ; if ( javaEncoding = = null | | javaEncoding . equalsIgnoreCase ( defaultEncoding ) ) return null ; else return javaEncoding ; }
void test8 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; String string0 = gDSHelper0 . getMappingPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMappingPath ( ) { return dpb . getArgumentAsString ( DatabaseParameterBufferExtension . MAPPING_PATH ) ; }
void test10 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; IscDbHandle iscDbHandle0 = gDSHelper0 . getIscDBHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IscDbHandle getIscDBHandle ( ) throws GDSException { return getGDSHelper ( ) . getIscDBHandle ( ) ; }
void test12 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) javaGDSImpl0 , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractIscTrHandle startTransaction ( TransactionParameterBuffer tpb ) throws GDSException { try { AbstractIscTrHandle trHandle = ( AbstractIscTrHandle ) gds . createIscTrHandle ( ) ; gds . iscStartTransaction ( trHandle , currentDbHandle , tpb ) ; setCurrentTrHandle ( trHandle ) ; return trHandle ; } catch ( GDSException ex ) { notifyListeners ( ex ) ; throw ex ; } }
void test13 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) javaGDSImpl0 , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean inTransaction ( ) { return gdsHelper . inTransaction ( ) ; }
void test18 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; org . firebirdsql . gds . impl . wire . isc_stmt_handle_impl isc_stmt_handle_impl0 = new org . firebirdsql . gds . impl . wire . isc_stmt_handle_impl ( ) ; gDSHelper0 . closeStatement ( ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test22 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getBlobBufferLength ( ) { return Integer . valueOf ( mcf . getBlobBufferSize ( ) ) ; }
void test23 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIscEncoding ( String javaEncoding ) { if ( javaEncoding = = null ) { return null ; } if ( ! encodingsLoaded ) loadEncodings ( ) ; return javaEncodings . get ( javaEncoding . toLowerCase ( ) ) ; }
void test24 ( ) throws Throwable { FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory ( ) ; FBConnectionRequestInfo fBConnectionRequestInfo0 = fBManagedConnectionFactory0 . getDefaultConnectionRequestInfo ( ) ; isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) fBConnectionRequestInfo0 , ( IscDbHandle ) isc_db_handle_impl0 , ( GDSHelper . GDSHelperErrorListener ) null ) ; List < GDSException > list0 = gDSHelper0 . getWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test25 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; List < GDSException > list0 = gDSHelper0 . getWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test26 ( ) throws Throwable { org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp databaseParameterBufferImp0 = new org . firebirdsql . gds . impl . jni . DatabaseParameterBufferImp ( ) ; GDSHelper gDSHelper0 = new GDSHelper ( ( GDS ) null , ( DatabaseParameterBuffer ) databaseParameterBufferImp0 , ( IscDbHandle ) null , ( GDSHelper . GDSHelperErrorListener ) null ) ; gDSHelper0 . clearWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMappingPath ( ) { return dpb . getArgumentAsString ( DatabaseParameterBufferExtension . MAPPING_PATH ) ; }
void test0 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Time time0 = xSQLVARLittleEndianImpl0 . decodeTime ( xSQLVARLittleEndianImpl0 . sqldata ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time decodeTime ( java . sql . Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) - ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test1 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( xSQLVARLittleEndianImpl0 . sqldata ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date encodeDate ( java . sql . Date d , Calendar cal ) { if ( cal = = null ) { return ( d ) ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test3 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 1721119 , ( int ) ( byte ) ( - 31 ) , ( int ) ( byte ) 0 , ( int ) ( byte ) ( - 31 ) , ( - 1474 ) ) ; Time time0 = xSQLVARLittleEndianImpl0 . decodeTimeCalendar ( xSQLVARLittleEndianImpl0 . sqldata , ( Calendar ) gregorianCalendar0 ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeTime ( time0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time encodeTime ( Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) + ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test4 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeLong ( ( - 1022L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; float float0 = xSQLVARLittleEndianImpl0 . decodeFloat ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float decodeFloat ( byte [ ] byte_int ) { return Float . intBitsToFloat ( decodeInt ( byte_int ) ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( 1613 , 1613 , ( - 770 ) , 1613 , byteArray0 , "" , "" , "" , "" , "" ) ; Timestamp timestamp0 = new Timestamp ( ( long ) ( byte ) 106 ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ) ; Timestamp timestamp1 = xSQLVARLittleEndianImpl0 . encodeTimestamp ( timestamp0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ( - 791 ) , ( - 791 ) , ( - 1842 ) , 0 , byteArray0 , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; xSQLVARLittleEndianImpl0 . decodeString ( byteArray0 , ( String ) null , ( String ) null ) ; byte [ ] byteArray1 = xSQLVARLittleEndianImpl0 . encodeString ( "Cp864" , "\u0010'\u000E\u0000" , "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test10 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeShort ( ( short ) ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeShort ( short value ) { return encodeInt ( value ) ; }
void test11 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeDouble ( ( double ) ( byte ) 94 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeDouble ( double value ) { return encodeLong ( Double . doubleToLongBits ( value ) ) ; }
void test12 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl1 = ( XSQLVARLittleEndianImpl ) xSQLVARLittleEndianImpl0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer deepCopy ( ) { return new FBConnectionRequestInfo ( dpb . deepCopy ( ) ) ; }
void test13 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeFloat ( ( float ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeFloat ( float value ) { return encodeInt ( Float . floatToIntBits ( value ) ) ; }
void test16 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = xSQLVARLittleEndianImpl0 . encodeString ( xSQLVARLittleEndianImpl0 . sqldata , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeString ( String value , String encoding , String mappingPath ) throws SQLException { if ( coder = = null ) coder = EncodingFactory . getEncoding ( encoding , mappingPath ) ; return coder . encodeToCharset ( value ) ; }
void test17 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; String string0 = xSQLVARLittleEndianImpl0 . decodeString ( byteArray0 , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeString ( String value , String encoding , String mappingPath ) throws SQLException { if ( coder = = null ) coder = EncodingFactory . getEncoding ( encoding , mappingPath ) ; return coder . encodeToCharset ( value ) ; }
void test18 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ( - 791 ) , ( - 791 ) , ( - 1842 ) , 0 , byteArray0 , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; String string0 = xSQLVARLittleEndianImpl0 . decodeString ( byteArray0 , ( String ) null , ( String ) null ) ; String string1 = xSQLVARLittleEndianImpl0 . decodeString ( xSQLVARLittleEndianImpl0 . sqldata , ( String ) null , "\u0010'\u000E\u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test19 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 1721119 , ( int ) ( byte ) ( - 31 ) , ( int ) ( byte ) 0 , ( int ) ( byte ) ( - 31 ) , ( - 1474 ) ) ; Timestamp timestamp0 = new Timestamp ( 0L ) ; Timestamp timestamp1 = xSQLVARLittleEndianImpl0 . decodeTimestamp ( timestamp0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test20 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Timestamp timestamp0 = new Timestamp ( ( long ) 0 ) ; Timestamp timestamp1 = xSQLVARLittleEndianImpl0 . decodeTimestamp ( timestamp0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Timestamp decodeTimestamp ( Timestamp value , Calendar cal ) { return decodeTimestamp ( value , cal , false ) ; }
void test22 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Time time0 = new Time ( ( long ) 0 ) ; Locale locale0 = Locale . KOREA ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( locale0 ) ; Time time1 = xSQLVARLittleEndianImpl0 . encodeTime ( time0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test23 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Time time0 = new Time ( ( long ) 0 ) ; Time time1 = xSQLVARLittleEndianImpl0 . encodeTime ( time0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Time getTime ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getTime ( parameterIndex ) ; }
void test24 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Time time0 = new Time ( ( long ) 0 ) ; Locale locale0 = Locale . KOREA ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( locale0 ) ; Time time1 = xSQLVARLittleEndianImpl0 . decodeTime ( time0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time decodeTime ( java . sql . Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) - ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test25 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Time time0 = new Time ( ( long ) 0 ) ; Time time1 = xSQLVARLittleEndianImpl0 . decodeTime ( time0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Time decodeTime ( java . sql . Time d , Calendar cal , boolean invertTimeZone ) { if ( cal = = null ) { return d ; } else { long time = d . getTime ( ) - ( invertTimeZone ? - 1 : 1 ) * ( cal . getTimeZone ( ) . getRawOffset ( ) - Calendar . getInstance ( ) . getTimeZone ( ) . getRawOffset ( ) ) ; return new Time ( time ) ; } }
void test26 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( xSQLVARLittleEndianImpl0 . sqldata ) ; Locale locale0 = Locale . getDefault ( ) ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( locale0 ) ; Date date1 = xSQLVARLittleEndianImpl0 . encodeDate ( date0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test27 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Date date0 = xSQLVARLittleEndianImpl0 . encodeDate ( ( Date ) null , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date encodeDate ( java . sql . Date d , Calendar cal ) { if ( cal = = null ) { return ( d ) ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test28 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( xSQLVARLittleEndianImpl0 . sqldata ) ; Date date1 = xSQLVARLittleEndianImpl0 . decodeDate ( date0 , ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date decodeDate ( Date d , Calendar cal ) { if ( cal = = null | | d = = null ) { return d ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test29 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( xSQLVARLittleEndianImpl0 . sqldata ) ; TimeZone timeZone0 = TimeZone . getTimeZone ( "" ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( timeZone0 ) ; Date date1 = xSQLVARLittleEndianImpl0 . decodeDate ( date0 , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test30 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( 1721119 , ( int ) ( byte ) ( - 31 ) , ( int ) ( byte ) 0 , ( int ) ( byte ) ( - 31 ) , ( - 1474 ) ) ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( ( Date ) null , ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date decodeDate ( Date d , Calendar cal ) { if ( cal = = null | | d = = null ) { return d ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test31 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = new byte [ 5 ] ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date decodeDate ( Date d , Calendar cal ) { if ( cal = = null | | d = = null ) { return d ; } else { cal . setTime ( d ) ; return new Date ( cal . getTime ( ) . getTime ( ) ) ; } }
void test32 ( ) throws Throwable { XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( ) ; byte [ ] byteArray0 = new byte [ 22 ] ; byteArray0 [ 3 ] = ( byte ) 82 ; Date date0 = xSQLVARLittleEndianImpl0 . decodeDate ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date getDate ( int parameterIndex ) throws SQLException { assertHasData ( getCurrentResultSet ( ) ) ; parameterIndex = procedureCall . mapOutParamIndexToPosition ( parameterIndex ) ; return getCurrentResultSet ( ) . getDate ( parameterIndex ) ; }
void test0 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "eventHandle : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test1 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) { return this . cancelled ; }
void test2 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test3 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( ) ; int int0 = eventHandleImp0 . getEventStructHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) { return this . cancelled ; }
void test4 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventId ( ) ; }
void test5 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test6 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventStructHandle ( ) { return this . eventStructHandle ; }
void test7 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test8 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test9 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test10 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test12 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " * NhS ( } @4z\" ; < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test13 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( ) ; eventHandleImp0 . setEventStructHandle ( 1195 ) ; boolean boolean0 = eventHandleImp0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventStructHandle ( ) { return this . eventStructHandle ; }
void test0 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; byte [ ] byteArray0 = databaseParameterBufferImp0 . getBytesForNativeCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytesForNativeCode ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_tpb_version3 ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test1 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp1 = ( DatabaseParameterBufferImp ) databaseParameterBufferImp0 . removeExtensionParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer removeExtensionParams ( ) { if ( dpb instanceof DatabaseParameterBufferExtension ) return ( ( DatabaseParameterBufferExtension ) dpb ) . removeExtensionParams ( ) ; else return dpb ; }
void test0 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getStatementType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test1 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getRsrId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test2 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getInsertCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test3 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getSelectCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test4 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . registerTransaction ( ( AbstractIscTrHandle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test5 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test6 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setInsertCount ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInsertCount ( ) ; / * * * Get the rows retrieved by executing this statement . * * @return Array of rows retrieved * / byte [ ] [ ] [ ] getRows ( ) ; / * * * Get the number of rows that were updated by executing this statement . * * @return The number of updated rows * / int getUpdateCount ( ) ; / * * * Retrieve whether this statement has an open < code > ResultSet < / code > . * * @return < code > true < / code > if this statement has an open * < code > ResultSet < / code > , false otherwise * / boolean hasOpenResultSet ( ) ; / * * * Retrieve whether this statement has singleton result set . * * @return < code > true < / code > if result set has singleton result set . * / boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test8 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getUpdateCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test9 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getDeleteCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test10 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_stmt_handle_impl0 . setRsr_rdb ( isc_db_handle_impl0 ) ; boolean boolean0 = isc_stmt_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test11 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setOutSqlda ( ( XSQLDA ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test12 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getInSqlda ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test13 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . isSingletonResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test14 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setStatementType ( 79 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatementType ( ) throws FBSQLException ; }
void test15 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test16 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setUpdateCount ( ( - 1583 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpdateCount ( ) throws SQLException { if ( isResultSet | | ! hasMoreResults ) return - 1 ; else { try { gdsHelper . getSqlCounts ( fixedStmt ) ; int insCount = fixedStmt . getInsertCount ( ) ; int updCount = fixedStmt . getUpdateCount ( ) ; int delCount = fixedStmt . getDeleteCount ( ) ; int resCount = ( ( updCount > delCount ) ? updCount : delCount ) ; resCount = ( ( resCount > insCount ) ? resCount : insCount ) ; return resCount ; } catch ( GDSException ge ) { throw new FBSQLException ( ge ) ; } finally { hasMoreResults = false ; } } }
void test17 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test18 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test19 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setSingletonResult ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test20 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setRsr_id_ptr ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test21 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . removeRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test22 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . isAllRowsFetched ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test23 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getOutSqlda ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test24 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getRsr_id_ptr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test25 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getTransaction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test26 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setDeleteCount ( 668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeleteCount ( ) ; / * * * Get the number of rows that were inserted by executing this statement . * * @return The number of inserted rows * / int getInsertCount ( ) ; / * * * Get the rows retrieved by executing this statement . * * @return Array of rows retrieved * / byte [ ] [ ] [ ] getRows ( ) ; / * * * Get the number of rows that were updated by executing this statement . * * @return The number of updated rows * / int getUpdateCount ( ) ; / * * * Retrieve whether this statement has an open < code > ResultSet < / code > . * * @return < code > true < / code > if this statement has an open * < code > ResultSet < / code > , false otherwise * / boolean hasOpenResultSet ( ) ; / * * * Retrieve whether this statement has singleton result set . * * @return < code > true < / code > if result set has singleton result set . * / boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test27 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setSelectCount ( 668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectCount ( ) { return selectCount ; }
void test29 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . hasOpenResultSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test30 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getRsr_rdb ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test31 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . unregisterTransaction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test32 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setInSqlda ( ( XSQLDA ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test33 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . ensureCapacity ( 668 ) ; isc_stmt_handle_impl0 . ensureCapacity ( 668 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test34 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . ensureCapacity ( 0 ) ; isc_stmt_handle_impl0 . ensureCapacity ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test35 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . clearRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test36 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . ensureCapacity ( 668 ) ; isc_stmt_handle_impl0 . clearRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id_ptr ( ) { return rsr_id_ptr ; }
void test37 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOpenResultSet ( ) ; / * * * Get current result set . Behaviour of this method is similar to the * behavior of the { @link Statement#getResultSet ( ) }
void test0 ( ) throws Throwable { DynamicLibraryLoader dynamicLibraryLoader0 = new DynamicLibraryLoader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { boolean boolean0 = DynamicLibraryLoader . loadLibraryFromClassPath ( "_e^\b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean loadLibraryFromClassPath ( String libraryName ) throws IOException { String platformLibName = System . mapLibraryName ( libraryName ) ; InputStream in = DynamicLibraryLoader . class . getResourceAsStream ( platformLibName ) ; if ( in = = null ) return false ; try { File tempFile = File . createTempFile ( TEMP_PREFIX , TEMP_SUFFIX ) ; FileOutputStream out = new FileOutputStream ( tempFile ) ; int counter = 0 ; byte [ ] buffer = new byte [ 8192 ] ; while ( ( counter = in . read ( buffer ) ) ! = - 1 ) out . write ( buffer , 0 , counter ) ; out . flush ( ) ; out . close ( ) ; tempFile . deleteOnExit ( ) ; String canonicalFileName = tempFile . getCanonicalPath ( ) ; Runtime . getRuntime ( ) . load ( canonicalFileName ) ; return true ; } finally { in . close ( ) ; } }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; XSQLVARBigEndianImpl xSQLVARBigEndianImpl0 = new XSQLVARBigEndianImpl ( 0 , 0 , ( - 1 ) , 0 , byteArray0 , " - GP - q + Jak\" & " , " - GP - q + Jak\" & " , " - GP - q + Jak\" & " , " - GP - q + Jak\" & " , " - GP - q + Jak\" & " ) ; XSQLVARBigEndianImpl xSQLVARBigEndianImpl1 = ( XSQLVARBigEndianImpl ) xSQLVARBigEndianImpl0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer deepCopy ( ) { return new FBConnectionRequestInfo ( dpb . deepCopy ( ) ) ; }
void test2 ( ) throws Throwable { XSQLVARBigEndianImpl xSQLVARBigEndianImpl0 = new XSQLVARBigEndianImpl ( ) ; byte [ ] byteArray0 = xSQLVARBigEndianImpl0 . encodeShort ( ( short ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeShort ( short value ) { return encodeInt ( value ) ; }
void test0 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; transactionParameterBufferImpl0 . addArgument ( 11 , " ? K" ) ; String string0 = transactionParameterBufferImpl0 . getArgumentAsString ( 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getArgumentAsString ( int argumentType ) { return dpb . getArgumentAsString ( argumentType ) ; }
void test1 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; databaseParameterBufferImp0 . addArgument ( 142 ) ; DatabaseParameterBufferImp databaseParameterBufferImp1 = ( DatabaseParameterBufferImp ) databaseParameterBufferImp0 . removeExtensionParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test2 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; byte [ ] byteArray0 = new byte [ 27 ] ; databaseParameterBufferImp0 . addArgument ( 13 , byteArray0 ) ; int int0 = databaseParameterBufferImp0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test3 ( ) throws Throwable { BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; blobParameterBufferImp0 . addArgument ( 22 , ( byte ) ( - 1 ) ) ; byte [ ] byteArray0 = blobParameterBufferImp0 . getBytesForNativeCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytesForNativeCode ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_tpb_version3 ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test5 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 142 , " + F * " ) ; int int0 = parameterBufferBase_StringArgument0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test7 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; transactionParameterBufferImpl0 . addArgument ( 1145 , byteArray0 ) ; boolean boolean0 = transactionParameterBufferImpl0 . hasArgument ( 1145 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasArgument ( int argumentType ) { return dpb . hasArgument ( argumentType ) ; }
void test8 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; byte [ ] byteArray0 = new byte [ 27 ] ; databaseParameterBufferImp0 . addArgument ( 13 , byteArray0 ) ; byte [ ] byteArray1 = databaseParameterBufferImp0 . getBytesForNativeCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test9 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; databaseParameterBufferImp0 . addArgument ( 13 ) ; byte [ ] byteArray0 = databaseParameterBufferImp0 . getBytesForNativeCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytesForNativeCode ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_tpb_version3 ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test10 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; databaseParameterBufferImp0 . addArgument ( 13 ) ; int int0 = databaseParameterBufferImp0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test11 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 4 , 4 ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; parameterBufferBase_NumericArgument0 . writeValue ( byteArrayOutputStream0 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test12 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 1019 , 1019 ) ; int int0 = parameterBufferBase_NumericArgument0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test13 ( ) throws Throwable { BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; blobParameterBufferImp0 . addArgument ( 22 , ( byte ) ( - 1 ) ) ; boolean boolean0 = blobParameterBufferImp0 . hasArgument ( ( int ) ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasArgument ( int argumentType ) { return dpb . hasArgument ( argumentType ) ; }
void test14 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 512 , 512 ) ; int int0 = parameterBufferBase_NumericArgument0 . getValueAsInt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test17 ( ) throws Throwable { BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; blobParameterBufferImp0 . addArgument ( 22 , ( byte ) ( - 1 ) ) ; String string0 = blobParameterBufferImp0 . getArgumentAsString ( ( int ) ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getArgumentAsString ( int argumentType ) { return dpb . getArgumentAsString ( argumentType ) ; }
void test18 ( ) throws Throwable { BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; blobParameterBufferImp0 . addArgument ( 22 , ( byte ) ( - 1 ) ) ; int int0 = blobParameterBufferImp0 . getArgumentAsInt ( ( int ) ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgumentAsInt ( int argumentType ) { return dpb . getArgumentAsInt ( argumentType ) ; }
void test19 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; boolean boolean0 = databaseParameterBufferImp0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test20 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; boolean boolean0 = databaseParameterBufferImp0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test21 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; boolean boolean0 = transactionParameterBufferImpl0 . equals ( ( Object ) transactionParameterBufferImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test22 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 21 , "2^oBcsqd ) LPXvMd%9pS" ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; parameterBufferBase_StringArgument0 . writeTo ( byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test23 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1019 , ( String ) null ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test24 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 21 , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) parameterBufferBase_StringArgument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test25 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1208 , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) 1208 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test26 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1145 , "'8 ) < r" ) ; ParameterBufferBase . StringArgument parameterBufferBase_StringArgument1 = new ParameterBufferBase . StringArgument ( 0 , "'8 ) < r" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) parameterBufferBase_StringArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test27 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 21 , "" ) ; ParameterBufferBase . StringArgument parameterBufferBase_StringArgument1 = new ParameterBufferBase . StringArgument ( 21 , "2^oBcsqd ) LPXvMd%9pS" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) parameterBufferBase_StringArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test28 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 847 , 847 ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test29 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 86 , 86 ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) parameterBufferBase_NumericArgument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test30 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 4 , 4 ) ; TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) transactionParameterBufferImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test31 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 4 , 4 ) ; ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument1 = new ParameterBufferBase . NumericArgument ( 131 , 131 ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) parameterBufferBase_NumericArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test32 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 86 , 86 ) ; ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument1 = new ParameterBufferBase . NumericArgument ( 86 , 0 ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) parameterBufferBase_NumericArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test34 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; transactionParameterBufferImpl0 . addArgument ( 1145 , byteArray0 ) ; int int0 = transactionParameterBufferImpl0 . getArgumentAsInt ( 1145 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgumentAsInt ( int argumentType ) { return dpb . getArgumentAsInt ( argumentType ) ; }
void test0 ( ) throws Throwable { ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp ( ) ; byte [ ] byteArray0 = serviceParameterBufferImp0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_spb_version ) ; byteArrayOutputStream . write ( ISCConstants . isc_spb_current_version ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl ( 1 , ( - 1 ) , 1 , 0 , byteArray0 , "IzWx ] lty + Y . : tvY : " , "IzWx ] lty + Y . : tvY : " , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLVARLittleEndianImpl ( ) { super ( ) ; }
void test1 ( ) throws Throwable { XSQLVARBigEndianImpl xSQLVARBigEndianImpl0 = new XSQLVARBigEndianImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLVARBigEndianImpl ( ) { super ( ) ; }
void test0 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; TransactionParameterBufferImpl transactionParameterBufferImpl1 = ( TransactionParameterBufferImpl ) transactionParameterBufferImpl0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer deepCopy ( ) { return new FBConnectionRequestInfo ( dpb . deepCopy ( ) ) ; }
void test1 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; byte [ ] byteArray0 = transactionParameterBufferImpl0 . getBytesForNativeCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytesForNativeCode ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_tpb_version3 ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test0 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . getDbHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test2 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_tr_handle_impl0 . registerStatementWithTransaction ( ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 ) ; isc_tr_handle_impl0 . forgetResultSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIdPtr ( ) { return rtr_id_ptr ; }
void test3 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; org . firebirdsql . gds . impl . jni . isc_stmt_handle_impl isc_stmt_handle_impl0 = new org . firebirdsql . gds . impl . jni . isc_stmt_handle_impl ( ) ; isc_tr_handle_impl0 . unregisterStatementFromTransaction ( ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test4 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . setTransactionIdPtr ( 4 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( IscTrHandle trHandle ) throws GDSException { try { byte [ ] trInfo = gds . iscTransactionInformation ( trHandle , new byte [ ] { ISCConstants . isc_info_tra_id } , 32 ) ; if ( trInfo . length < 3 | | trInfo [ 0 ] ! = ISCConstants . isc_info_tra_id ) { throw new GDSException ( "Unexpected response buffer" ) ; } int length = gds . iscVaxInteger ( trInfo , 1 , 2 ) ; return gds . iscVaxInteger ( trInfo , 3 , length ) ; } catch ( GDSException ex ) { notifyListeners ( ex ) ; throw ex ; } }
void test5 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; int int0 = isc_tr_handle_impl0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIdPtr ( ) { return rtr_id_ptr ; }
void test6 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; int int0 = isc_tr_handle_impl0 . getTransactionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test8 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . setState ( ( - 1472 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test9 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_tr_handle_impl0 . removeBlob ( isc_blob_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionIdPtr ( ) { return rtr_id_ptr ; }
void test11 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_tr_handle_impl0 . addBlob ( isc_blob_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test12 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; int int0 = isc_tr_handle_impl0 . getTransactionIdPtr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test13 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . forgetResultSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test0 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( ( - 1886 ) ) ; serviceRequestBufferImp0 . addArgument ( 477 , "" ) ; byte [ ] byteArray0 = serviceRequestBufferImp0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_spb_version ) ; byteArrayOutputStream . write ( ISCConstants . isc_spb_current_version ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test0 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setRdb_id_ptr ( 0 , 1157 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRdb_id_ptr ( ) { return rdb_id_ptr ; }
void test1 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . removeTransaction ( ( isc_tr_handle_impl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRdb_id_ptr ( ) { return rdb_id_ptr ; }
void test2 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_db_handle_impl0 . addTransaction ( isc_tr_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOpenTransactionCount ( ) { checkValidity ( ) ; return rdb_transactions . size ( ) ; }
void test3 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . invalidate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test4 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; int int0 = isc_db_handle_impl0 . getRdb_id_ptr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRdb_id_ptr ( ) { return rdb_id_ptr ; }
void test0 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . clearWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotValid ( ) ; / * * * Get list of warnings that were returned by the server . * * @return instance of { @link java . util . List }
void test1 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . addWarning ( ( GDSException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test2 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; int int0 = isc_svc_handle_impl0 . getHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandle ( ) { return handle ; }
void test3 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; List < GDSException > list0 = isc_svc_handle_impl0 . getWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandle ( ) { return handle ; }
void test4 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; boolean boolean0 = isc_svc_handle_impl0 . isNotValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotValid ( ) ; / * * * Get list of warnings that were returned by the server . * * @return instance of { @link java . util . List }
void test5 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . setHandle ( ( - 1546 ) ) ; boolean boolean0 = isc_svc_handle_impl0 . isNotValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandle ( ) { return handle ; }
void test0 ( ) throws Throwable { XSQLDAImpl xSQLDAImpl0 = new XSQLDAImpl ( 16 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLDAImpl ( ) { / / empty }
void test1 ( ) throws Throwable { XSQLVAR [ ] xSQLVARArray0 = new XSQLVAR [ 10 ] ; XSQLDAImpl xSQLDAImpl0 = new XSQLDAImpl ( 146 , 146 , xSQLVARArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLDAImpl ( ) { / / empty }
void test2 ( ) throws Throwable { XSQLDAImpl xSQLDAImpl0 = new XSQLDAImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XSQLDAImpl ( ) { / / empty }
void test2 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; GDSSynchronizationPolicy . ClientLibrarySyncPolicy gDSSynchronizationPolicy_ClientLibrarySyncPolicy0 = new GDSSynchronizationPolicy . ClientLibrarySyncPolicy ( ( GDS ) javaGDSImpl0 ) ; JavaGDSImpl javaGDSImpl1 = ( JavaGDSImpl ) gDSSynchronizationPolicy_ClientLibrarySyncPolicy0 . getGds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDS getGds ( ) { return gds ; }
void test3 ( ) throws Throwable { GDSSynchronizationPolicy gDSSynchronizationPolicy0 = new GDSSynchronizationPolicy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { GDS gDS0 = GDSSynchronizationPolicy . applySyncronizationPolicy ( ( GDS ) null , ( GDSSynchronizationPolicy . AbstractSynchronizationPolicy ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GDS applySyncronizationPolicy ( GDS gds , AbstractSynchronizationPolicy syncPolicy ) { / / no policy specified , use default sync policy ( thread - per - connection ) if ( syncPolicy = = null ) return gds ; GDS wrappedObject = ( GDS ) Proxy . newProxyInstance ( gds . getClass ( ) . getClassLoader ( ) , ReflectionHelper . getAllInterfaces ( gds . getClass ( ) ) , syncPolicy ) ; return wrappedObject ; }
void test0 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setRblId ( ( - 1647 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test1 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . getTr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test2 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; int int0 = isc_blob_handle_impl0 . getRblId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRblId ( ) { return rbl_id ; }
void test3 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setTr ( ( isc_tr_handle_impl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test5 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . getDb ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test6 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; boolean boolean0 = isc_blob_handle_impl0 . isEof ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test7 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setBlobId ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test8 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setDb ( ( isc_db_handle_impl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test9 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . getBlobId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test0 ( ) throws Throwable { BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; blobParameterBufferImp0 . addArgument ( 6 , 6 ) ; byte [ ] byteArray0 = blobParameterBufferImp0 . getBytesForNativeCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytesForNativeCode ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_tpb_version3 ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test0 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test1 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test2 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( " & Bo | n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventId ( ) ; }
void test3 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "uC [ 55" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalId ( ) { return this . localId ; }
void test4 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test5 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test6 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventId ( ) ; }
void test7 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventId ( ) ; }
void test8 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test9 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getUserName ( ) + " | " + getPassword ( ) + " | " + getFirstName ( ) + " | " + getMiddleName ( ) + " | " + getLastName ( ) + " | " + getUserId ( ) + " | " + getGroupId ( ) ; }
void test11 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "EventHandle : internal id = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalId ( ) { return this . localId ; }
void test0 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; DatabaseParameterBufferImp databaseParameterBufferImp1 = ( DatabaseParameterBufferImp ) databaseParameterBufferImp0 . removeExtensionParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer removeExtensionParams ( ) { if ( dpb instanceof DatabaseParameterBufferExtension ) return ( ( DatabaseParameterBufferExtension ) dpb ) . removeExtensionParams ( ) ; else return dpb ; }
void test0 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test1 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test2 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setDeleteCount ( ( - 1488 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeleteCount ( ) ; / * * * Get the number of rows that were inserted by executing this statement . * * @return The number of inserted rows * / int getInsertCount ( ) ; / * * * Get the rows retrieved by executing this statement . * * @return Array of rows retrieved * / byte [ ] [ ] [ ] getRows ( ) ; / * * * Get the number of rows that were updated by executing this statement . * * @return The number of updated rows * / int getUpdateCount ( ) ; / * * * Retrieve whether this statement has an open < code > ResultSet < / code > . * * @return < code > true < / code > if this statement has an open * < code > ResultSet < / code > , false otherwise * / boolean hasOpenResultSet ( ) ; / * * * Retrieve whether this statement has singleton result set . * * @return < code > true < / code > if result set has singleton result set . * / boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test3 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . isSingletonResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test4 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setSelectCount ( ( - 5 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectCount ( ) { return selectCount ; }
void test5 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getStatementType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test6 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test7 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . notifyOpenResultSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test8 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test9 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getRsr_rdb ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test10 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setInsertCount ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test11 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . unregisterTransaction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test12 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getDeleteCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test13 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setRsr_id ( ( - 5 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRsr_id ( ) { return rsr_id ; }
void test14 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getRsr_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test15 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . registerTransaction ( ( AbstractIscTrHandle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test16 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; XSQLDA xSQLDA0 = new XSQLDA ( 129 ) ; isc_stmt_handle_impl0 . setInSqlda ( xSQLDA0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test17 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getUpdateCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test18 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getInsertCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test19 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . isAllRowsFetched ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test20 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setUpdateCount ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpdateCount ( ) throws SQLException { if ( isResultSet | | ! hasMoreResults ) return - 1 ; else { try { gdsHelper . getSqlCounts ( fixedStmt ) ; int insCount = fixedStmt . getInsertCount ( ) ; int updCount = fixedStmt . getUpdateCount ( ) ; int delCount = fixedStmt . getDeleteCount ( ) ; int resCount = ( ( updCount > delCount ) ? updCount : delCount ) ; resCount = ( ( resCount > insCount ) ? resCount : insCount ) ; return resCount ; } catch ( GDSException ge ) { throw new FBSQLException ( ge ) ; } finally { hasMoreResults = false ; } } }
void test22 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; int int0 = isc_stmt_handle_impl0 . getSelectCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test23 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getInSqlda ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test24 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getTransaction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test25 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setStatementType ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatementType ( ) throws FBSQLException ; }
void test26 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . getOutSqlda ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test27 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . removeRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test28 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . hasOpenResultSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test29 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_stmt_handle_impl0 . setRsr_rdb ( isc_db_handle_impl0 ) ; boolean boolean0 = isc_stmt_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test30 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . setOutSqlda ( ( XSQLDA ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test31 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . ensureCapacity ( 0 ) ; isc_stmt_handle_impl0 . ensureCapacity ( ( int ) ( byte ) 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test32 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . ensureCapacity ( 0 ) ; isc_stmt_handle_impl0 . ensureCapacity ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test33 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . clearRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test34 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_stmt_handle_impl0 . ensureCapacity ( 0 ) ; isc_stmt_handle_impl0 . clearRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAllRowsFetched ( ) ; / * * * Get the execution plan from the statement . * * @return execution plan or < code > null < / code > if the execution plan was * not fetched from the server . * / String getExecutionPlan ( ) ; / * * * Get the statement type . * * @return one of the constants defined in this interface or { @link #TYPE_UNKNOWN }
void test35 ( ) throws Throwable { isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; boolean boolean0 = isc_stmt_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingletonResult ( ) ; / * * * Retrieve whether or not this statement is valid . * * @return < code > true < / code > if this is a valid statement , * < code > false < / code > otherwise * / boolean isValid ( ) ; / * * * Get the number of rows contained in this statement . * * @return The rowcount for this statement * / int size ( ) ; / * * * Remove all rows contained by this statement . This method differs from * { @link #clearRows }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = JavaGDSImpl . parseRawAddress ( "Exected lngine vrsion . ormat : < platform > U < xype > < major versiop > . Fmino ver : ion > . ~variant > . < buldnuber > < seVver n . me > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseRawAddress ( String server ) { ArrayList < Byte > result = new ArrayList < Byte > ( ) ; String [ ] bytes = server . split ( "\\ . | : " ) ; try { / / Only 4 byte ( IPv4 ) and 16 byte ( IPv6 ) addresses are acceptable . if ( bytes . length = = 4 ) { / / convert each string into a byte . If the string doesn't isn't in / / the range of 0 . . 255 return null . for ( int index = 0 ; index < bytes . length ; index + + ) { int value = Integer . parseInt ( bytes [ index ] ) ; if ( value > = 0 & & value < = 255 ) result . add ( ( byte ) value ) ; else return null ; } } else if ( bytes . length = = 16 | | bytes . length = = 8 ) { / / convert each string into a byte . If the string doesn't isn't in / / the range of 0 . . 255 return null . for ( int index = 0 ; index < bytes . length ; index + + ) { bytes [ index ] = prependZeros ( bytes [ index ] , 4 ) ; String hi = bytes [ index ] . substring ( 0 , 2 ) ; String lo = bytes [ index ] . substring ( 2 ) ; int hiValue = Integer . parseInt ( hi , 16 ) ; int loValue = Integer . parseInt ( lo , 16 ) ; if ( hiValue = = - 1 | | loValue = = - 1 ) return null ; result . add ( ( byte ) hiValue ) ; result . add ( ( byte ) loValue ) ; } } else return null ; } catch ( NumberFormatException ex ) { return null ; } byte [ ] address = new byte [ result . size ( ) ] ; for ( int i = 0 ; i < result . size ( ) ; i + + ) address [ i ] = result . get ( i ) ; return address ; }
void test0 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; parameterBufferBase0 . addArgument ( ( - 805 ) ) ; int int0 = parameterBufferBase0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test1 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; parameterBufferBase0 . addArgument ( ( - 805 ) ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) null ) ; parameterBufferBase0 . write ( xdrOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test2 ( ) throws Throwable { BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; blobParameterBufferImp0 . addArgument ( ( - 2005 ) ) ; int int0 = blobParameterBufferImp0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test3 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; parameterBufferBase0 . addArgument ( ( - 805 ) ) ; int int0 = parameterBufferBase0 . getArgumentAsInt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test4 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; parameterBufferBase0 . addArgument ( 898 , "" ) ; parameterBufferBase0 . removeArgument ( ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test5 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream ( ) ; parameterBufferBase0 . read ( ( XdrInputStream ) wireXdrInputStream0 , ( - 805 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test6 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; byte [ ] byteArray0 = new byte [ 15 ] ; databaseParameterBufferImp0 . addArgument ( 0 , byteArray0 ) ; boolean boolean0 = databaseParameterBufferImp0 . hasArgument ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test7 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; databaseParameterBufferImp0 . addArgument ( 0 , 0 ) ; boolean boolean0 = databaseParameterBufferImp0 . hasArgument ( ( int ) ( byte ) 29 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test8 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1812 , "fFAq ; ZBC0rkim / & " ) ; int int0 = parameterBufferBase_StringArgument0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test9 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 0 , "" ) ; String string0 = parameterBufferBase_StringArgument0 . getValueAsString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test11 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1812 , "fFAq ; ZBC0rkim / & " ) ; int int0 = parameterBufferBase_StringArgument0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test12 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1497 , "8" ) ; int int0 = parameterBufferBase_StringArgument0 . getValueAsInt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test13 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( ( - 732 ) , ( - 732 ) ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) null ) ; parameterBufferBase_NumericArgument0 . writeValue ( xdrOutputStream0 , ( - 732 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test15 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 898 , 0 ) ; int int0 = parameterBufferBase_NumericArgument0 . getValueAsInt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test16 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 898 , 0 ) ; int int0 = parameterBufferBase_NumericArgument0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test17 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 0 , 0 ) ; int int0 = parameterBufferBase_NumericArgument0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test20 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; parameterBufferBase0 . addArgument ( ( - 732 ) , byteArray0 ) ; int int0 = parameterBufferBase0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test21 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; parameterBufferBase0 . addArgument ( ( - 732 ) , byteArray0 ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) null ) ; parameterBufferBase0 . write ( xdrOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test22 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; databaseParameterBufferImp0 . addArgument ( 0 , byteArray0 ) ; int int0 = databaseParameterBufferImp0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test23 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; parameterBufferBase0 . addArgument ( ( - 805 ) ) ; parameterBufferBase0 . getArgumentAsString ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test24 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; parameterBufferBase0 . addArgument ( 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test25 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; boolean boolean0 = parameterBufferBase0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test26 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; boolean boolean0 = databaseParameterBufferImp0 . equals ( ( Object ) "java . security . Permissions@2dc42474 ( \n ) \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test27 ( ) throws Throwable { DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp ( ) ; TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; boolean boolean0 = databaseParameterBufferImp0 . equals ( ( Object ) transactionParameterBufferImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test28 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( ( - 387 ) , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test29 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( ( - 387 ) , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) parameterBufferBase_StringArgument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test30 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 0 , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test31 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( ( - 387 ) , "" ) ; ParameterBufferBase . StringArgument parameterBufferBase_StringArgument1 = new ParameterBufferBase . StringArgument ( 62 , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) parameterBufferBase_StringArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test32 ( ) throws Throwable { ParameterBufferBase . StringArgument parameterBufferBase_StringArgument0 = new ParameterBufferBase . StringArgument ( 1812 , "fFAq ; ZBC0rkim / & " ) ; ParameterBufferBase . StringArgument parameterBufferBase_StringArgument1 = new ParameterBufferBase . StringArgument ( 1812 , "" ) ; boolean boolean0 = parameterBufferBase_StringArgument0 . equals ( ( Object ) parameterBufferBase_StringArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test33 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 62 , ( - 387 ) ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test34 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( ( - 805 ) , ( - 805 ) ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) parameterBufferBase_NumericArgument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test35 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( 1812 , 654182136 ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test36 ( ) throws Throwable { ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument0 = new ParameterBufferBase . NumericArgument ( ( - 805 ) , ( - 805 ) ) ; ParameterBufferBase . NumericArgument parameterBufferBase_NumericArgument1 = new ParameterBufferBase . NumericArgument ( 0 , 0 ) ; boolean boolean0 = parameterBufferBase_NumericArgument0 . equals ( ( Object ) parameterBufferBase_NumericArgument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { ( lock ) { return connectionProperties . getType ( ) ; } }
void test38 ( ) throws Throwable { ParameterBufferBase parameterBufferBase0 = new ParameterBufferBase ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; parameterBufferBase0 . addArgument ( ( - 131 ) , byteArray0 ) ; parameterBufferBase0 . getArgumentAsInt ( ( - 131 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test0 ( ) throws Throwable { ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp ( ) ; int int0 = serviceParameterBufferImp0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test1 ( ) throws Throwable { ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp ( ) ; byte [ ] byteArray0 = serviceParameterBufferImp0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; byteArrayOutputStream . write ( ISCConstants . isc_spb_version ) ; byteArrayOutputStream . write ( ISCConstants . isc_spb_current_version ) ; super . writeArgumentsTo ( byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
void test0 ( ) throws Throwable { TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl ( ) ; TransactionParameterBufferImpl transactionParameterBufferImpl1 = ( TransactionParameterBufferImpl ) transactionParameterBufferImpl0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseParameterBuffer deepCopy ( ) { return new FBConnectionRequestInfo ( dpb . deepCopy ( ) ) ; }
void test0 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_tr_handle_impl0 . registerStatementWithTransaction ( ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 ) ; isc_tr_handle_impl0 . forgetResultSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test1 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; int int0 = isc_tr_handle_impl0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test2 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; int int0 = isc_tr_handle_impl0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test3 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; int int0 = isc_tr_handle_impl0 . getTransactionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test4 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . setState ( 68 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test5 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_tr_handle_impl0 . removeBlob ( isc_blob_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test6 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl ( ) ; isc_tr_handle_impl0 . unregisterStatementFromTransaction ( ( AbstractIscStmtHandle ) isc_stmt_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test7 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_tr_handle_impl0 . addBlob ( isc_blob_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test8 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . getDbHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test9 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . forgetResultSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test10 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; boolean boolean0 = isc_tr_handle_impl0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test11 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl ( ) ; boolean boolean0 = isc_tr_handle_impl0 . equals ( ( Object ) isc_tr_handle_impl1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) ; void setServer ( String host ) ; String getServer ( ) ; void setPort ( int port ) ; int getPort ( ) ; String getFileName ( ) ; / * * * Set the value of fileName * @param fileName Value to assign to fileName * * @jmx : managed - attribute * / void setFileName ( String fileName ) ; / * * * mbean get - set pair for field userName * Get the value of userName * @return value of userName * * @jmx : managed - attribute * / String getUserName ( ) ; / * * * Set the value of userName * @param userName Value to assign to userName * * @jmx : managed - attribute * / void setUserName ( String userName ) ; / * * * mbean get - set pair for field password * Get the value of password * @return value of password * * @jmx : managed - attribute * / String getPassword ( ) ; / * * * Set the value of password * @param password Value to assign to password * * @jmx : managed - attribute * / void setPassword ( String password ) ; / * * * mbean get - set pair for field createOnStart * Get the value of createOnStart * @return value of createOnStart * * @jmx : managed - attribute * / boolean isCreateOnStart ( ) ; / * * * Set the value of createOnStart * @param createOnStart Value to assign to createOnStart * * @jmx : managed - attribute * / void setCreateOnStart ( boolean createOnStart ) ; / * * * mbean get - set pair for field dropOnStop * Get the value of dropOnStop * @return value of dropOnStop * * @jmx : managed - attribute * / boolean isDropOnStop ( ) ; / * * * Set the value of dropOnStop * @param dropOnStop Value to assign to dropOnStop * * @jmx : managed - attribute * / void setDropOnStop ( boolean dropOnStop ) ; boolean isForceCreate ( ) ; void setForceCreate ( boolean forceCreate ) ; void createDatabase ( String filename , String user , String password ) throws Exception ; void dropDatabase ( String fileName , String user , String password ) throws Exception ; boolean isDatabaseExists ( String fileName , String user , String password ) throws Exception ; }
void test12 ( ) throws Throwable { isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . setTransactionId ( 1431 ) ; isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_tr_handle_impl1 . setDbHandle ( isc_db_handle_impl0 ) ; isc_tr_handle_impl0 . setDbHandle ( isc_db_handle_impl0 ) ; isc_tr_handle_impl0 . unsetDbHandle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = this ) return true ; if ( ! ( obj instanceof User ) ) return false ; User user = ( User ) obj ; boolean result = true ; result & = getUserName ( ) ! = null ? getUserName ( ) . equals ( user . getUserName ( ) ) : user . getUserName ( ) = = null ; result & = getFirstName ( ) ! = null ? getFirstName ( ) . equals ( user . getFirstName ( ) ) : user . getFirstName ( ) = = null ; result & = getMiddleName ( ) ! = null ? getMiddleName ( ) . equals ( user . getMiddleName ( ) ) : user . getMiddleName ( ) = = null ; result & = getLastName ( ) ! = null ? getLastName ( ) . equals ( user . getLastName ( ) ) : user . getLastName ( ) = = null ; result & = user . getUserId ( ) = = getUserId ( ) ; result & = user . getGroupId ( ) = = getGroupId ( ) ; return result ; }
void test0 ( ) throws Throwable { WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WireXdrInputStream ( ) { super ( ) ; }
void test1 ( ) throws Throwable { WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WireXdrInputStream ( ) { super ( ) ; }
void test0 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( ( - 495 ) ) ; serviceRequestBufferImp0 . addArgument ( ( - 2027 ) , "" ) ; serviceRequestBufferImp0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTaskIdentifier ( ) { return taskIdentifier ; }
void test1 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( 0 ) ; serviceRequestBufferImp0 . addArgument ( 0 , "LXP } { fyz6c'I > 99q" ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) pipedOutputStream0 ) ; serviceRequestBufferImp0 . write ( xdrOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTaskIdentifier ( ) { return taskIdentifier ; }
void test2 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( ( - 495 ) ) ; serviceRequestBufferImp0 . addArgument ( 1 , 1733 ) ; int int0 = serviceRequestBufferImp0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test3 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( ( - 495 ) ) ; serviceRequestBufferImp0 . addArgument ( 1 , 1733 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTaskIdentifier ( ) { return taskIdentifier ; }
void test4 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( 0 ) ; serviceRequestBufferImp0 . addArgument ( 0 , ( byte ) ( - 92 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTaskIdentifier ( ) { return taskIdentifier ; }
void test5 ( ) throws Throwable { ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp ( 0 ) ; int int0 = serviceRequestBufferImp0 . getTaskIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTaskIdentifier ( ) { return taskIdentifier ; }
void test0 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_db_handle_impl0 . setResp_data_len ( 32766 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResp_data_len ( ) { return this . resp_data_len ; }
void test1 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; byte [ ] byteArray0 = isc_db_handle_impl0 . getResp_data_truncated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResp_data_len ( ) { return this . resp_data_len ; }
void test2 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_tr_handle_impl0 . setDbHandle ( isc_db_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasTransactions ( ) { checkValidity ( ) ; return ! rdb_transactions . isEmpty ( ) ; }
void test3 ( ) throws Throwable { isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_db_handle_impl0 . removeTransaction ( isc_tr_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResp_data_len ( ) { return this . resp_data_len ; }
void test1 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; EventHandleImp eventHandleImp0 = ( EventHandleImp ) javaGDSImpl0 . createEventHandle ( "" ) ; javaGDSImpl0 . iscEventCounts ( ( EventHandle ) eventHandleImp0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventCount ( ) { return this . eventCount ; }
void test2 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; EventHandleImp eventHandleImp0 = ( EventHandleImp ) javaGDSImpl0 . createEventHandle ( "'y2 ? " ) ; javaGDSImpl0 . iscEventBlock ( ( EventHandle ) eventHandleImp0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEventName ( ) { return this . eventName ; }
void test4 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; TransactionParameterBufferImpl transactionParameterBufferImpl0 = ( TransactionParameterBufferImpl ) javaGDSImpl0 . newTransactionParameterBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test8 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; Object [ ] objectArray0 = new Object [ 2 ] ; byte [ ] byteArray1 = javaGDSImpl0 . iscExpandDpb ( byteArray0 , ( int ) ( byte ) ( - 122 ) , ( int ) ( byte ) ( - 83 ) , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] iscExpandDpb ( byte [ ] dpb , int dpb_length , int param , Object [ ] params ) throws GDSException { return dpb ; }
void test13 ( ) throws Throwable { EventHandleImp eventHandleImp0 = new EventHandleImp ( "G\"_B - ^v\"CU } lZ78" ) ; AbstractJavaGDSImpl . EventGlob abstractJavaGDSImpl_EventGlob0 = new AbstractJavaGDSImpl . EventGlob ( ( EventHandler ) null , eventHandleImp0 ) ; EventHandler eventHandler0 = abstractJavaGDSImpl_EventGlob0 . getEventHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractJavaGDSImpl ( ) { super ( GDSType . getType ( PURE_JAVA_TYPE_NAME ) ) ; }
void test15 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; org . firebirdsql . gds . impl . wire . DatabaseParameterBufferImp databaseParameterBufferImp0 = ( org . firebirdsql . gds . impl . wire . DatabaseParameterBufferImp ) javaGDSImpl0 . createDatabaseParameterBuffer ( ) ; javaGDSImpl0 . addProcessId ( ( DatabaseParameterBuffer ) databaseParameterBufferImp0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test33 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = javaGDSImpl0 . iscVaxInteger ( byteArray0 , 1 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int iscVaxInteger ( byte [ ] buffer , int pos , int length ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / / Blob methods / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * Create a new blob within a given transaction . * * @param db * Handle to the database in which the blob will be created * @param tr * Handle to the transaction in which the blob will be created * @param blob * Handle to be attached to the newly created blob * @param blobParameterBuffer * contains parameters for creation of the new blob , can be null * @throws GDSException * if an error occurs while creating the blob * / void iscCreateBlob2 ( IscDbHandle db , IscTrHandle tr , IscBlobHandle blob , BlobParameterBuffer blobParameterBuffer ) throws GDSException ; / * * * Open a blob within a given transaction . * * @param db * Handle to the database in which the blob will be opened * @param tr * Handle to the transaction in which the blob will be opened * @param blob * Handle to the blob to be opened * @param blobParameterBuffer * Contains parameters for the blob * @throws GDSException * if an error occurs while opening the blob * / void iscOpenBlob2 ( IscDbHandle db , IscTrHandle tr , IscBlobHandle blob , BlobParameterBuffer blobParameterBuffer ) throws GDSException ; / * * * Fetch a segment of a blob . * * @param blob * Handle to the blob from which a segment is to be fetched * @param maxread * The maximum number of bytes to attempt to fetch * @return A segment of data from the blob , with maximum length of * < code > maxread < / code > * @throws GDSException * if an error occurs while fetching the blob segment * / byte [ ] iscGetSegment ( IscBlobHandle blob , int maxread ) throws GDSException ; / * * * Write a segment of data to a blob . * * @param blob_handle * Handle to the blob to which data is to be written * @param buffer * Data to be written to the blob * @throws GDSException * if an error occurs while writing to the blob * / void iscPutSegment ( IscBlobHandle blob_handle , byte [ ] buffer ) throws GDSException ; / * * * Close an open blob . * * @param blob * Handle to the blob to be closed * @throws GDSException * if an error occurs while closing the blob * / void iscCloseBlob ( IscBlobHandle blob ) throws GDSException ; / * * * Retrieve data about an existing blob . The parameters to be retrieved are * placed in < code > items < / code > , and the corresponding values are * returned . The values in < code > items < / code > should be * < code > isc_info_blob_ * < / code > constants from { @link ISCConstants }
void test34 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; int int0 = javaGDSImpl0 . iscInteger ( byteArray0 , 448 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int iscInteger ( byte [ ] buffer , int pos , int length ) { int value ; value = 0 ; int i = pos ; while ( i < length ) { value = value < < 8 ; value + = ( buffer [ i + + ] & 0xff ) ; } return value ; }
void test42 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl ( ) ; javaGDSImpl0 . receiveResponse ( isc_db_handle_impl0 , ( - 863 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResp_data_len ( ) { return this . resp_data_len ; }
void test43 ( ) throws Throwable { XSQLDA xSQLDA0 = new XSQLDA ( ) ; AbstractJavaGDSImpl . calculateBLR ( xSQLDA0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void calculateBLR ( XSQLDA xsqlda ) throws GDSException { int blr_len = 0 ; if ( xsqlda ! = null ) { / / Determine the BLR length blr_len = 8 ; int par_count = 0 ; for ( int i = 0 ; i < xsqlda . sqld ; i + + ) { int dtype = xsqlda . sqlvar [ i ] . sqltype & ~1 ; if ( dtype = = ISCConstants . SQL_VARYING | | dtype = = ISCConstants . SQL_TEXT | | dtype = = ISCConstants . SQL_NULL ) { blr_len + = 3 ; } else if ( dtype = = ISCConstants . SQL_SHORT | | dtype = = ISCConstants . SQL_LONG | | dtype = = ISCConstants . SQL_INT64 | | dtype = = ISCConstants . SQL_QUAD | | dtype = = ISCConstants . SQL_BLOB | | dtype = = ISCConstants . SQL_ARRAY ) { blr_len + = 2 ; } else { blr_len + + ; } blr_len + = 2 ; par_count + = 2 ; } byte [ ] blr = new byte [ blr_len ] ; int n = 0 ; blr [ n + + ] = 5 ; / / blr_version5 blr [ n + + ] = 2 ; / / blr_begin blr [ n + + ] = 4 ; / / blr_message blr [ n + + ] = 0 ; blr [ n + + ] = ( byte ) ( par_count & 255 ) ; blr [ n + + ] = ( byte ) ( par_count > > 8 ) ; for ( int i = 0 ; i < xsqlda . sqld ; i + + ) { int dtype = xsqlda . sqlvar [ i ] . sqltype & ~1 ; int len = xsqlda . sqlvar [ i ] . sqllen ; if ( dtype = = ISCConstants . SQL_VARYING ) { blr [ n + + ] = 37 ; / / blr_varying blr [ n + + ] = ( byte ) ( len & 255 ) ; blr [ n + + ] = ( byte ) ( len > > 8 ) ; } else if ( dtype = = ISCConstants . SQL_TEXT ) { blr [ n + + ] = 14 ; / / blr_text blr [ n + + ] = ( byte ) ( len & 255 ) ; blr [ n + + ] = ( byte ) ( len > > 8 ) ; } else if ( dtype = = ISCConstants . SQL_NULL ) { blr [ n + + ] = 14 ; / / blr_text blr [ n + + ] = 0 ; blr [ n + + ] = 0 ; } else if ( dtype = = ISCConstants . SQL_DOUBLE ) { blr [ n + + ] = 27 ; / / blr_double } else if ( dtype = = ISCConstants . SQL_FLOAT ) { blr [ n + + ] = 10 ; / / blr_float } else if ( dtype = = ISCConstants . SQL_D_FLOAT ) { blr [ n + + ] = 11 ; / / blr_d_float } else if ( dtype = = ISCConstants . SQL_TYPE_DATE ) { blr [ n + + ] = 12 ; / / blr_sql_date } else if ( dtype = = ISCConstants . SQL_TYPE_TIME ) { blr [ n + + ] = 13 ; / / blr_sql_time } else if ( dtype = = ISCConstants . SQL_TIMESTAMP ) { blr [ n + + ] = 35 ; / / blr_timestamp } else if ( dtype = = ISCConstants . SQL_BLOB ) { blr [ n + + ] = 9 ; / / blr_quad blr [ n + + ] = 0 ; } else if ( dtype = = ISCConstants . SQL_ARRAY ) { blr [ n + + ] = 9 ; / / blr_quad blr [ n + + ] = 0 ; } else if ( dtype = = ISCConstants . SQL_LONG ) { blr [ n + + ] = 8 ; / / blr_long blr [ n + + ] = ( byte ) xsqlda . sqlvar [ i ] . sqlscale ; } else if ( dtype = = ISCConstants . SQL_SHORT ) { blr [ n + + ] = 7 ; / / blr_short blr [ n + + ] = ( byte ) xsqlda . sqlvar [ i ] . sqlscale ; } else if ( dtype = = ISCConstants . SQL_INT64 ) { blr [ n + + ] = 16 ; / / blr_int64 blr [ n + + ] = ( byte ) xsqlda . sqlvar [ i ] . sqlscale ; } else if ( dtype = = ISCConstants . SQL_QUAD ) { blr [ n + + ] = 9 ; / / blr_quad blr [ n + + ] = ( byte ) xsqlda . sqlvar [ i ] . sqlscale ; } else { / / return error_dsql_804 ( gds__dsql_sqlda_value_err ) ; } blr [ n + + ] = 7 ; / / blr_short blr [ n + + ] = 0 ; } blr [ n + + ] = ( byte ) 255 ; / / blr_end blr [ n + + ] = 76 ; / / blr_eoc / / save xsqlda . blr = blr ; } }
void test49 ( ) throws Throwable { JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = ( isc_db_handle_impl ) javaGDSImpl0 . createIscDbHandle ( ) ; EventHandleImp eventHandleImp0 = ( EventHandleImp ) javaGDSImpl0 . createEventHandle ( " + ksTr6P & AGQbU" ) ; javaGDSImpl0 . iscCancelEvents ( ( IscDbHandle ) isc_db_handle_impl0 , ( EventHandle ) eventHandleImp0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEventName ( ) { return this . eventName ; }
void test0 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . setResp_blob_id ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test4 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . setResp_object ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotValid ( ) ; / * * * Get list of warnings that were returned by the server . * * @return instance of { @link java . util . List }
void test5 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; int int0 = isc_svc_handle_impl0 . getResp_object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test6 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; byte [ ] byteArray0 = new byte [ 5 ] ; isc_svc_handle_impl0 . setResp_data ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test9 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . setHandle ( 1 ) ; boolean boolean0 = isc_svc_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandle ( ) { return handle ; }
void test10 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; boolean boolean0 = isc_svc_handle_impl0 . isNotValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotValid ( ) ; / * * * Get list of warnings that were returned by the server . * * @return instance of { @link java . util . List }
void test11 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . getResp_data ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotValid ( ) ; / * * * Get list of warnings that were returned by the server . * * @return instance of { @link java . util . List }
void test12 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . getResp_blob_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test13 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; boolean boolean0 = isc_svc_handle_impl0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test14 ( ) throws Throwable { isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl ( ) ; isc_svc_handle_impl0 . setHandle ( 1 ) ; isc_svc_handle_impl0 . getWarnings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( int timeout ) throws SQLException { try { GDS gds = getInternalAPIHandler ( ) ; byte [ ] infoRequest = new byte [ ] { ISCConstants . isc_info_user_names , ISCConstants . isc_info_end } ; gds . iscDatabaseInfo ( getIscDBHandle ( ) , infoRequest , 1024 ) ; return true ; } catch ( GDSException ex ) { return false ; } }
void test0 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; long long0 = isc_blob_handle_impl0 . getBlobId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBlobId ( ) throws SQLException { if ( isNew ) throw new FBSQLException ( "No Blob ID is available in new Blob object . " ) ; return blob_id ; }
void test1 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; int int0 = isc_blob_handle_impl0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test2 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setPosition ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test3 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0 . getTr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" isc_tr_handle_impl getTr ( ) { return tr ; }
void test4 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setDb ( ( isc_db_handle_impl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRbl_id ( ) { return rbl_id ; }
void test5 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . rbl_flagsRemove ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test6 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl ( ) ; isc_blob_handle_impl0 . setTr ( isc_tr_handle_impl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test7 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0 . getDb ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" isc_db_handle_impl getDb ( ) { return db ; }
void test8 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; int int0 = isc_blob_handle_impl0 . getRbl_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRbl_id ( ) { return rbl_id ; }
void test9 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setRbl_id ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRbl_id ( ) { return rbl_id ; }
void test10 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; isc_blob_handle_impl0 . setBlobId ( 997L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBlobId ( ) throws SQLException { if ( isNew ) throw new FBSQLException ( "No Blob ID is available in new Blob object . " ) ; return blob_id ; }
void test11 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; boolean boolean0 = isc_blob_handle_impl0 . isEof ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test12 ( ) throws Throwable { isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEof ( ) ; }
void test0 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; String [ ] stringArray0 = wireGDSFactoryPlugin0 . getTypeAliases ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getTypeAliases ( ) ; Class < ? > getConnectionClass ( ) ; String getDefaultProtocol ( ) ; String [ ] getSupportedProtocols ( ) ; GDS getGDS ( ) ; String getDatabasePath ( String server , Integer port , String path ) throws GDSException ; String getDatabasePath ( String jdbcUrl ) throws GDSException ; }
void test2 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; String string0 = wireGDSFactoryPlugin0 . getPluginName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginName ( ) ; String getTypeName ( ) ; String [ ] getTypeAliases ( ) ; Class < ? > getConnectionClass ( ) ; String getDefaultProtocol ( ) ; String [ ] getSupportedProtocols ( ) ; GDS getGDS ( ) ; String getDatabasePath ( String server , Integer port , String path ) throws GDSException ; String getDatabasePath ( String jdbcUrl ) throws GDSException ; }
void test3 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; JavaGDSImpl javaGDSImpl0 = ( JavaGDSImpl ) wireGDSFactoryPlugin0 . getGDS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) ; String [ ] getTypeAliases ( ) ; Class < ? > getConnectionClass ( ) ; String getDefaultProtocol ( ) ; String [ ] getSupportedProtocols ( ) ; GDS getGDS ( ) ; String getDatabasePath ( String server , Integer port , String path ) throws GDSException ; String getDatabasePath ( String jdbcUrl ) throws GDSException ; }
void test4 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; int int0 = wireGDSFactoryPlugin0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int hashCode = 17 ; hashCode ^ = userName ! = null ? userName . hashCode ( ) : 0 ; hashCode ^ = firstName ! = null ? firstName . hashCode ( ) : 0 ; hashCode ^ = middleName ! = null ? middleName . hashCode ( ) : 0 ; hashCode ^ = lastName ! = null ? lastName . hashCode ( ) : 0 ; hashCode ^ = userId ! = - 1 ? userId : 0 ; hashCode ^ = groupId ! = - 1 ? groupId : 0 ; return hashCode ; }
void test5 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; String string0 = wireGDSFactoryPlugin0 . getDatabasePath ( "Pure Java GDS implementation . " , ( Integer ) 1073827593 , "jdbc : firebirdsql : java : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabasePath ( GDSType gdsType , String server , Integer port , String path ) throws GDSException { return getPlugin ( gdsType ) . getDatabasePath ( server , port , path ) ; }
void test8 ( ) throws Throwable { WireGDSFactoryPlugin wireGDSFactoryPlugin0 = new WireGDSFactoryPlugin ( ) ; String string0 = wireGDSFactoryPlugin0 . getDatabasePath ( "PURE_JAVA" , ( Integer ) null , "PURE_JAVA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabasePath ( GDSType gdsType , String server , Integer port , String path ) throws GDSException { return getPlugin ( gdsType ) . getDatabasePath ( server , port , path ) ; }
void test4 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) printStream0 ) ; xdrOutputStream0 . write ( 1604 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; xdrOutputStream0 . write ( byteArray0 , 1482 , 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( int b ) throws IOException { / / This won't be called , don't implement throw new IOException ( "FBBlobOutputStream . write ( int b ) not implemented" ) ; }
void test6 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) printStream0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; xdrOutputStream0 . writeBlobBuffer ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeBlobBuffer ( byte [ ] buffer ) throws IOException { int len = buffer . length ; / / 2 for short for buffer length if ( log ! = null & & log . isDebugEnabled ( ) ) log . debug ( "writeBlobBuffer len : " + len ) ; if ( len > Short . MAX_VALUE ) { throw new IOException ( "" ) ; / / Need a value ? ? ? } writeInt ( len + 2 ) ; writeInt ( len + 2 ) ; / / bizarre but true ! three copies of the length checkBufferSize ( 2 ) ; buf [ count + + ] = ( byte ) ( ( len > > 0 ) & 0xff ) ; buf [ count + + ] = ( byte ) ( ( len > > 8 ) & 0xff ) ; write ( buffer , len , ( ( 4 - len + 2 ) & 3 ) ) ; }
void test11 ( ) throws Throwable { XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ) ; BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp ( ) ; xdrOutputStream0 . writeTyped ( ( int ) ( byte ) ( - 79 ) , ( Xdrable ) blobParameterBufferImp0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { return 1 + 1 + 4 + 1 + 4 + globalId . length + 1 + 4 + branchId . length ; }
void test13 ( ) throws Throwable { XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) null ) ; XSQLDA xSQLDA0 = new XSQLDA ( ) ; xdrOutputStream0 . writeSQLData ( xSQLDA0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeSQLData ( XSQLDA xsqlda ) throws IOException { for ( int i = 0 ; i < xsqlda . sqld ; i + + ) { XSQLVAR xsqlvar = xsqlda . sqlvar [ i ] ; if ( log ! = null & & log . isDebugEnabled ( ) ) { if ( out = = null ) { log . debug ( "db . out null in writeSQLDatum" ) ; } if ( xsqlvar . sqldata = = null ) { log . debug ( "sqldata null in writeSQLDatum : " + xsqlvar ) ; } if ( xsqlvar . sqldata = = null ) { log . debug ( "sqldata still null in writeSQLDatum : " + xsqlvar ) ; } } int len = xsqlda . ioLength [ i ] ; byte [ ] buffer = xsqlvar . sqldata ; int tempType = xsqlvar . sqltype & ~1 ; if ( tempType = = ISCConstants . SQL_NULL ) { write ( xsqlvar . sqldata ! = null ? zero : minusOne , 4 , 0 ) ; } else if ( len = = 0 ) { if ( buffer ! = null ) { len = buffer . length ; writeInt ( len ) ; write ( buffer , len , ( 4 - len ) & 3 ) ; / / sqlind write ( zero , 4 , 0 ) ; } else { writeInt ( 0 ) ; / / sqlind write ( minusOne , 4 , 0 ) ; } } else if ( len < 0 ) { if ( buffer ! = null ) { write ( buffer , - len , 0 ) ; / / sqlind write ( zero , 4 , 0 ) ; } else { write ( textPad , - len , 0 ) ; / / sqlind write ( minusOne , 4 , 0 ) ; } } else { / / decrement length because it was incremented before len - - ; if ( buffer ! = null ) { int buflen = buffer . length ; if ( buflen > = len ) { write ( buffer , len , ( 4 - len ) & 3 ) ; } else { write ( buffer , buflen , 0 ) ; write ( textPad , len - buflen , ( 4 - len ) & 3 ) ; } / / sqlind write ( zero , 4 , 0 ) ; } else { write ( textPad , len , ( 4 - len ) & 3 ) ; / / sqlind write ( minusOne , 4 , 0 ) ; } } } }
void test16 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) printStream0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; xdrOutputStream0 . write ( byteArray0 , 1594 , 1401 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( int b ) throws IOException { / / This won't be called , don't implement throw new IOException ( "FBBlobOutputStream . write ( int b ) not implemented" ) ; }
void test17 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void flush ( ) throws IOException { if ( count > 0 ) { out . write ( buf , 0 , count ) ; } count = 0 ; out . flush ( ) ; }
void test18 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; XdrOutputStream xdrOutputStream0 = new XdrOutputStream ( ( OutputStream ) printStream0 ) ; xdrOutputStream0 . write ( 1604 ) ; xdrOutputStream0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void flush ( ) throws IOException { if ( count > 0 ) { out . write ( buf , 0 , count ) ; } count = 0 ; out . flush ( ) ; }
