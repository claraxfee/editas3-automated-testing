void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; String [ ] stringArray1 = argsParser0 . getArgs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getArgs ( ) { return args ; }
void test2 ( ) throws Throwable { ArgsParser argsParser0 = new ArgsParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArgsParser ( ) { super ( ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; int int0 = argsParser0 . getArgsCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsCount ( ) { return args . length ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; stringArray0 [ 6 ] = " - %" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 4 ] = " - - " ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return isSet ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 1 ] = " - - DHK { J0RAn ] E" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return isSet ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 12 ] ; stringArray0 [ 3 ] = " - 1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 14 ] ; stringArray0 [ 1 ] = " < " ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 14 ] ; stringArray0 [ 2 ] = "%q`EY ; N1@" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 14 ] ; stringArray0 [ 4 ] = " - - " ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; stringArray0 [ 6 ] = " - %" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 21 ] ; stringArray0 [ 2 ] = " - 1 } & , " ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 17 ] ; stringArray0 [ 0 ] = " - - DHK { J0RAn ] E" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test14 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 3 ] = " - & '1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 4 ] = " - - - & '1" ; stringArray0 [ 5 ] = " - - - & '1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 4 ] = " - & '1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 5 ] = "1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test18 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 4 ] = "'1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test19 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 4 ] = " - - " ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test20 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 3 ] = " - %Z + qETY ; N1@" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test21 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 9 ] = " - Aem1 [ ] } ydk" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test22 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test23 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 4 ] = " - & '1" ; stringArray0 [ 5 ] = "1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = new String [ 12 ] ; stringArray0 [ 3 ] = " - 1" ; stringArray0 [ 4 ] = " - 1" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test25 ( ) throws Throwable { String [ ] stringArray0 = new String [ 21 ] ; stringArray0 [ 2 ] = " - 1 } & , " ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test26 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 5 ] = " / i { XZPwz ] # / ] i < PU * A" ; ArgsParser argsParser0 = new ArgsParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArgsLeftCount ( ) { int result = 0 ; for ( int i = 0 ; i < innerArgs . length ; + + i ) if ( innerArgs [ i ] ! = null ) result + + ; return result ; }
void test0 ( ) throws Throwable { SwitchArgument switchArgument0 = new SwitchArgument ( ( - 802 ) , "WWU'JL" , false ) ; boolean boolean0 = switchArgument0 . isSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return isSet ; }
void test0 ( ) throws Throwable { StringArgument stringArgument0 = new StringArgument ( 0 , "" ) ; String string0 = stringArgument0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test0 ( ) throws Throwable { ParameterArgument parameterArgument0 = new ParameterArgument ( ( - 1953 ) , "Key cannot be an empty string . " , "Key cannot be an empty string . " ) ; String string0 = parameterArgument0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test0 ( ) throws Throwable { Argument argument0 = new Argument ( 1 ) ; int int0 = argument0 . compareTo ( argument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Argument arg0 ) { return position - arg0 . getPosition ( ) ; }
void test0 ( ) throws Throwable { SwitchArgument switchArgument0 = new SwitchArgument ( 0 , "O * / mQ . Aem1" , true ) ; String string0 = switchArgument0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test3 ( ) throws Throwable { ParameterArgument parameterArgument0 = new ParameterArgument ( 297 , "S" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLongKey ( ) { return ( key . length ( ) > 1 ) ; }
void test4 ( ) throws Throwable { SwitchArgument switchArgument0 = new SwitchArgument ( 1805 , " / PY0 - / gFQL$ ; dZsE" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLongKey ( ) { return ( key . length ( ) > 1 ) ; }
