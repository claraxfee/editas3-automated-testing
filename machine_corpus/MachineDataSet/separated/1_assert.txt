assertEquals ( "Cancel Market Data Sending Error - " , string0 )
assertEquals ( ( - 353 ) , eClientErrors_CodeMsgPair0 . m_errorCode )
assertEquals ( 521 , int0 )
assertNotNull ( eClientErrors0 )
assertEquals ( false , boolean0 )
assertEquals ( 0 , comboLeg0 . m_conId )
assertEquals ( false , boolean0 )
assertEquals ( 0 , comboLeg1 . m_openClose )
assertEquals ( 5 , comboLeg0 . m_shortSaleSlot )
assertEquals ( 0 , comboLeg0 . m_conId )
assertEquals ( 0 , comboLeg1 . m_ratio )
assertEquals ( 0 , comboLeg0 . m_conId )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertFalse ( tagValue1 . equals ( tagValue0 ) )
assertEquals ( 0 , executionFilter0 . m_clientId )
assertEquals ( ( - 2 ) , executionFilter0 . m_clientId )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertFalse ( executionFilter1 . equals ( executionFilter0 ) )
assertEquals ( false , boolean0 )
assertEquals ( 0 , executionFilter1 . m_clientId )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( 500 . 1158817614033 , orderState0 . m_commission , 0 . 01D )
assertEquals ( 500 . 1158817614033 , orderState0 . m_minCommission , 0 . 01D )
assertEquals ( false , boolean0 )
assertEquals ( 0 . 0 , orderState0 . m_minCommission , 0 . 01D )
assertFalse ( orderState1 . equals ( orderState0 ) )
assertEquals ( 0 . 0 , orderState0 . m_minCommission , 0 . 01D )
assertEquals ( false , boolean0 )
assertEquals ( 0 . 0 , orderState0 . m_minCommission , 0 . 01D )
assertEquals ( 0 . 0 , orderState0 . m_maxCommission , 0 . 01D )
assertEquals ( false , boolean0 )
assertEquals ( "UffG } " , string0 )
assertEquals ( "Connection Closed" , anyWrapperMsgGenerator0 . connectionClosed ( ) )
assertEquals ( "Error - null" , string0 )
assertEquals ( "0 | 0 | UffG } " , string0 )
assertEquals ( "Connection Closed" , string0 )
assertEquals ( 0 . 0 , underComp0 . m_price , 0 . 01D )
assertEquals ( 0 . 0 , underComp1 . m_delta , 0 . 01D )
assertEquals ( 0 . 0 , underComp0 . m_delta , 0 . 01D )
assertEquals ( 0 , underComp0 . m_conId )
assertEquals ( 0 . 0 , underComp1 . m_delta , 0 . 01D )
assertEquals ( 0 . 0 , underComp0 . m_price , 0 . 01D )
assertEquals ( false , eClientSocket0 . isConnected ( ) )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNull ( string0 )
assertEquals ( false , eClientSocket0 . isConnected ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( util0 )
assertEquals ( 2 , int0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( "" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( " - 1" , string0 )
assertEquals ( "" , string0 )
assertEquals ( " - 1675 . 101690083464" , string0 )
assertEquals ( "" , string0 )
assertNotNull ( tickType0 )
assertEquals ( "bidSize" , string0 )
assertEquals ( "high" , string0 )
assertEquals ( "bidPrice" , string0 )
assertEquals ( "askPrice" , string0 )
assertEquals ( "askSize" , string0 )
assertEquals ( "lastPrice" , string0 )
assertEquals ( "lastSize" , string0 )
assertEquals ( "low" , string0 )
assertEquals ( "volume" , string0 )
assertEquals ( "close" , string0 )
assertEquals ( "bidOptComp" , string0 )
assertEquals ( "askOptComp" , string0 )
assertEquals ( "lastOptComp" , string0 )
assertEquals ( "modelOptComp" , string0 )
assertEquals ( "open" , string0 )
assertEquals ( "13WeekLow" , string0 )
assertEquals ( "13WeekHigh" , string0 )
assertEquals ( "26WeekLow" , string0 )
assertEquals ( "26WeekHigh" , string0 )
assertEquals ( "52WeekLow" , string0 )
assertEquals ( "52WeekHigh" , string0 )
assertEquals ( "AvgVolume" , string0 )
assertEquals ( "OpenInterest" , string0 )
assertEquals ( "OptionHistoricalVolatility" , string0 )
assertEquals ( "OptionImpliedVolatility" , string0 )
assertEquals ( "OptionBidExchStr" , string0 )
assertEquals ( "OptionAskExchStr" , string0 )
assertEquals ( "OptionCallOpenInterest" , string0 )
assertEquals ( "OptionPutOpenInterest" , string0 )
assertEquals ( "OptionCallVolume" , string0 )
assertEquals ( "OptionPutVolume" , string0 )
assertEquals ( "IndexFuturePremium" , string0 )
assertEquals ( "bidExch" , string0 )
assertEquals ( "askExch" , string0 )
assertEquals ( "auctionVolume" , string0 )
assertEquals ( "auctionPrice" , string0 )
assertEquals ( "auctionImbalance" , string0 )
assertEquals ( "markPrice" , string0 )
assertEquals ( "bidEFP" , string0 )
assertEquals ( "askEFP" , string0 )
assertEquals ( "lastEFP" , string0 )
assertEquals ( "openEFP" , string0 )
assertEquals ( "highEFP" , string0 )
assertEquals ( "lowEFP" , string0 )
assertEquals ( "closeEFP" , string0 )
assertEquals ( "lastTimestamp" , string0 )
assertEquals ( "shortable" , string0 )
assertEquals ( "fundamentals" , string0 )
assertEquals ( "RTVolume" , string0 )
assertEquals ( "halted" , string0 )
assertEquals ( "unknown" , string0 )
assertEquals ( "Next Valid Order ID : 0" , string0 )
assertNotNull ( string0 )
assertEquals ( "current time = 34 ( 01 - Jan - 1970 01 : 00 : 34 ) " , string0 )
assertNotNull ( string0 )
assertEquals ( "updateAccountValue : " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "id = - 1489 underComp . conId = 0 underComp . delta = 0 . 0 underComp . price = 0 . 0" , string0 )
assertEquals ( " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " , string0 )
assertNotNull ( string0 )
assertEquals ( "reqId = - 1 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n - - - - Bond Contract Details begin - - - - \nsymbol = null\nsecType = null\ncusip = null\ncoupon = 0 . 0\nmaturity = null\nissueDate = null\nratings = null\nbondType = null\ncouponType = null\nconvertible = false\ncallable = false\nputable = false\ndescAppend = null\nexchange = null\ncurrency = null\nmarketName = null\ntradingClass = null\nconid = 0\nminTick = 0 . 0\norderTypes = null\nvalidExchanges = null\nnextOptionDate = null\nnextOptionType = null\nnextOptionPartial = false\nnotes = null\nlongName = null\n - - - - Bond Contract Details End - - - - \n" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "id = 34 time = 34 open = 34 . 0 high = 34 . 0 low = 34 . 0 close = 34 . 0 volume = 34 count = 34 WAP = 34 . 0" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "MsgId = 1055 : : MsgType = 1055 : : Origin = status = : : Message = status = " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "id = 0 bidSize : basisPoints = 0 . 0 / null impliedFuture = 0 . 0 holdDays = 0 futureExpiry = null dividendImpact = 0 . 0 dividends to expiry = 0 . 0" , string0 )
assertEquals ( "updatePortfolio : conid = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0 . 0\nright = null\nmultiplier = null\nexchange = null\nprimaryExch = null\ncurrency = null\nlocalSymbol = null\n0 0 . 0 0 . 0 0 . 0 0 . 0 652 . 0 null" , string0 )
assertEquals ( "id = 1 date = { ykQ * '^p'GvcR\u0005TJ open = 1 . 0 high = 1 . 0 low = 1 . 0 close = 1 . 0 volume = 1 count = 1 WAP = 1 . 0 hasGaps = true" , string0 )
assertNotNull ( string0 )
assertEquals ( " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " , eWrapperMsgGenerator0 . openOrderEnd ( ) )
assertEquals ( "Connected : The list of managed accounts are : [ Next Valid Order ID : 1794 ] " , string0 )
assertEquals ( "id = 41 = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " , string0 )
assertEquals ( "id = 687 rank = 687 symbol = null secType = null expiry = null strike = 0 . 0 right = null exchange = null currency = null localSymbol = null marketName = null tradingClass = null distance = null benchmark = null projection = null legsStr = null" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "id = - 1 unknown : vol = N / A delta = - 1 . 0" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "id = 2 modelOptComp : vol = 13 . 0 delta = N / A : modelPrice = N / A : pvDividend = N / A" , string0 )
assertNotNull ( string0 )
assertEquals ( "open order : orderId = 1055 action = null quantity = 0 symbol = status = exchange = status = secType = id = 1055 unknown = 1055 type = null lmtPrice = 0 . 0 auxPrice = 0 . 0 TIF = null localSymbol = id = 1055 unknown = 1055 client Id = 0 parent Id = 0 permId = 0 outsideRth = false hidden = false discretionaryAmt = 0 . 0 triggerMethod = 0 goodAfterTime = null goodTillDate = null faGroup = null faMethod = null faPercentage = null faProfile = null shortSaleSlot = 0 designatedLocation = ocaGroup = null ocaType = 0 rule80A = null allOrNone = false minQty = 2147483647 percentOffset = 1 . 7976931348623157E308 eTradeOnly = false firmQuoteOnly = false nbboPriceCap = 1 . 7976931348623157E308 auctionStrategy = 0 startingPrice = 1 . 7976931348623157E308 stockRefPrice = 1 . 7976931348623157E308 delta = 1 . 7976931348623157E308 stockRangeLower = 1 . 7976931348623157E308 stockRangeUpper = 1 . 7976931348623157E308 volatility = 1 . 7976931348623157E308 volatilityType = 2147483647 deltaNeutralOrderType = deltaNeutralAuxPrice = 1 . 7976931348623157E308 continuousUpdate = 0 referencePriceType = 2147483647 trailStopPrice = 1 . 7976931348623157E308 scaleInitLevelSize = scaleSubsLevelSize = scalePriceIncrement = account = null settlingFirm = null clearingAccount = null clearingIntent = null notHeld = false whatIf = false status = null initMargin = id = 1055 unknown = 1055 maintMargin = status = equityWithLoan = O commission = 1055 . 0 minCommission = 2 . 147483647E9 maxCommission = commissionCurrency = null warningText = id = 1055 unknown = 1055" , string0 )
assertEquals ( "open order : orderId = 1 action = null quantity = 0 symbol = BAG exchange = BAG secType = BAG type = null lmtPrice = 0 . 0 auxPrice = 0 . 0 TIF = null localSymbol = BAG client Id = 0 parent Id = 0 permId = 0 outsideRth = false hidden = false discretionaryAmt = 0 . 0 triggerMethod = 0 goodAfterTime = null goodTillDate = null faGroup = null faMethod = null faPercentage = null faProfile = null shortSaleSlot = 0 designatedLocation = ocaGroup = null ocaType = 0 rule80A = null allOrNone = false minQty = 2147483647 percentOffset = 1 . 7976931348623157E308 eTradeOnly = false firmQuoteOnly = false nbboPriceCap = 1 . 7976931348623157E308 auctionStrategy = 0 startingPrice = 1 . 7976931348623157E308 stockRefPrice = 1 . 7976931348623157E308 delta = 1 . 7976931348623157E308 stockRangeLower = 1 . 7976931348623157E308 stockRangeUpper = 1 . 7976931348623157E308 volatility = 1 . 7976931348623157E308 volatilityType = 2147483647 deltaNeutralOrderType = deltaNeutralAuxPrice = 1 . 7976931348623157E308 continuousUpdate = 0 referencePriceType = 2147483647 trailStopPrice = 1 . 7976931348623157E308 scaleInitLevelSize = scaleSubsLevelSize = scalePriceIncrement = account = null settlingFirm = null clearingAccount = null clearingIntent = null notHeld = false whatIf = false comboLegsDescrip = BAG status = null initMargin = null maintMargin = null equityWithLoan = null commission = minCommission = 0 . 0 maxCommission = 2 . 147483647E9 commissionCurrency = null warningText = null" , string0 )
assertNotNull ( string0 )
assertEquals ( 0 , execution0 . m_permId )
assertEquals ( 0 , execution0 . m_cumQty )
assertEquals ( ( - 1 ) , execution0 . m_permId )
assertTrue ( contract1 . equals ( contract0 ) )
assertEquals ( false , contract0 . m_includeExpired )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( 0 . 0 , contract0 . m_strike , 0 . 01D )
assertTrue ( contract0 . equals ( contract1 ) )
assertEquals ( 0 . 0 , contract1 . m_strike , 0 . 01D )
assertNotNull ( contract1 )
assertNotNull ( contract2 )
assertNotNull ( contract1 )
assertTrue ( contract1 . equals ( contract0 ) )
assertTrue ( contract1 . equals ( contract0 ) )
assertEquals ( 0 , contract1 . m_conId )
assertNotSame ( contract1 , contract2 )
assertEquals ( false , contract0 . m_includeExpired )
assertTrue ( contract0 . equals ( contract1 ) )
assertTrue ( contract1 . equals ( contract0 ) )
assertFalse ( contract0 . equals ( contract1 ) )
assertEquals ( Integer . MAX_VALUE , order0 . m_volatilityType )
assertEquals ( 1 . 7976931348623157E308 , order0 . m_startingPrice , 0 . 01D )
assertEquals ( Integer . MAX_VALUE , order1 . m_volatilityType )
assertEquals ( - 1 , scannerSubscription0 . numberOfRows ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateBelow ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . marketCapAbove ( ) , 0 . 01D )
assertEquals ( - 1 , scannerSubscription0 . numberOfRows ( ) )
assertEquals ( 2147483647 , scannerSubscription0 . averageOptionVolumeAbove ( ) )
assertEquals ( 2147483647 , scannerSubscription0 . averageOptionVolumeAbove ( ) )
assertEquals ( 1 . 7976931348623157E308 , double0 , 0 . 01D )
assertEquals ( 2147483647 , scannerSubscription0 . aboveVolume ( ) )
assertEquals ( 2147483647 , scannerSubscription0 . averageOptionVolumeAbove ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . marketCapAbove ( ) , 0 . 01D )
assertEquals ( 2147483647 , scannerSubscription0 . averageOptionVolumeAbove ( ) )
assertEquals ( - 1795 , scannerSubscription0 . aboveVolume ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . abovePrice ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . marketCapAbove ( ) , 0 . 01D )
assertEquals ( 2147483647 , scannerSubscription0 . aboveVolume ( ) )
assertEquals ( 796 . 073826279912 , scannerSubscription0 . marketCapBelow ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateAbove ( ) , 0 . 01D )
assertEquals ( 2147483647 , scannerSubscription0 . averageOptionVolumeAbove ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateAbove ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . abovePrice ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . marketCapBelow ( ) , 0 . 01D )
assertEquals ( - 1 , scannerSubscription0 . numberOfRows ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . belowPrice ( ) , 0 . 01D )
assertEquals ( 1561 . 0748744037935 , scannerSubscription0 . abovePrice ( ) , 0 . 01D )
assertEquals ( - 125 , scannerSubscription0 . numberOfRows ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . belowPrice ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . marketCapAbove ( ) , 0 . 01D )
assertEquals ( 2 . 147483647E9 , scannerSubscription0 . belowPrice ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateAbove ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . belowPrice ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateAbove ( ) , 0 . 01D )
assertEquals ( 2147483647 , scannerSubscription0 . aboveVolume ( ) )
assertEquals ( 92 . 23299081413151 , scannerSubscription0 . marketCapAbove ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateBelow ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateAbove ( ) , 0 . 01D )
assertEquals ( 2147483647 , scannerSubscription0 . averageOptionVolumeAbove ( ) )
assertEquals ( - 1 , scannerSubscription0 . numberOfRows ( ) )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateBelow ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . couponRateAbove ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . marketCapAbove ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . abovePrice ( ) , 0 . 01D )
assertEquals ( 1 . 7976931348623157E308 , scannerSubscription0 . abovePrice ( ) , 0 . 01D )
