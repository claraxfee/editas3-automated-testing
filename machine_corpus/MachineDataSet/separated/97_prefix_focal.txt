void test0 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . getLord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test1 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . getFiefdom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test2 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . kill ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test3 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . setLocation ( " & Q5VB } UBt , , { z ! 6 - L6x" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test4 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . setLord ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test5 ( ) throws Throwable { Vassals vassals0 = new Vassals ( "a" , "a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test6 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test7 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . setFiefdom ( "a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test8 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; vassals0 . setRank ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return location ; }
void test9 ( ) throws Throwable { Vassals vassals0 = new Vassals ( ) ; String string0 = vassals0 . getRank ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRank ( ) { return rank ; }
void test0 ( ) throws Throwable { VassalRebellion vassalRebellion0 = new VassalRebellion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; Object object0 = editUser_FiefdomsListModel0 . getSelectedItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test1 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . copy ( editUser_FiefdomsListModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test3 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; ArrayList < Object > arrayList0 = editUser_FiefdomsListModel0 . getAnArrayList ( ) ; editUser_FiefdomsListModel0 . setModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test4 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . removeElement ( ( Object ) "icon" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test6 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . removeAllElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test7 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; int int0 = editUser_FiefdomsListModel0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test8 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . removeThese ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test9 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . addElement ( ( Object ) "cut - to - clipboard" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test10 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . removeElementAt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test11 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . setSelectedItem ( ( Object ) "icon" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test12 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . addElement ( ( Object ) "cut - to - clipboard" ) ; editUser_FiefdomsListModel0 . setSelectedItem ( ( Object ) "cut - to - clipboard" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test13 ( ) throws Throwable { EditUser . FiefdomsListModel editUser_FiefdomsListModel0 = new EditUser . FiefdomsListModel ( ) ; editUser_FiefdomsListModel0 . addElement ( ( Object ) "cut - to - clipboard" ) ; editUser_FiefdomsListModel0 . printList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EditUser ( ) { setSize ( 300 , 300 ) ; / / populate all fiefdoms list Object [ ] oFiefdoms = Map . getAll ( ) . keySet ( ) . toArray ( ) ; for ( Object name : oFiefdoms ) { allFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { belongingFiefsModel . addElement ( name ) ; } for ( Object name : oFiefdoms ) { restFiefsModel . addElement ( name ) ; } / / only allow one selection at a time DefaultListSelectionModel dlsm = new DefaultListSelectionModel ( ) ; dlsm . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; playersList . setSelectionModel ( dlsm ) ; playersList . addListSelectionListener ( new PlayerListListener ( ) ) ; generateFields ( ) ; enableBtns ( ) ; deleteBtn . setBackground ( new Color ( 255 , 00 , 00 ) ) ; deleteBtn . addActionListener ( new Delete ( this ) ) ; updateBtn . addActionListener ( new Update ( this ) ) ; MouseListener mouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & TabbedInterface . listModel . size ( ) > 0 & & playersList . getSelectedValue ( ) ! = null ) { String player = ( String ) playersList . getSelectedValue ( ) ; updateFields ( player ) ; } enableBtns ( ) ; } } ; MouseListener mouseListenerFiefs = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { if ( e . getButton ( ) = = MouseEvent . BUTTON1 & & restFiefsList . getSelectedValue ( ) ! = null ) { fiefOwner . setText ( Map . getAll ( ) . get ( restFiefsList . getSelectedValue ( ) ) . getOwner ( ) ) ; } } } ; playersList . addMouseListener ( mouseListener ) ; restFiefsList . addMouseListener ( mouseListenerFiefs ) ; }
void test0 ( ) throws Throwable { GridLayout2 gridLayout2_0 = new GridLayout2 ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "V * nZ | '" , false , false ) ; gridLayout2_0 . layoutContainer ( ( Container ) jInternalFrame0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layoutContainer ( Container parent ) { / / System . err . println ( "layoutContainer" ) ; ( parent . getTreeLock ( ) ) { Insets insets = parent . getInsets ( ) ; int ncomponents = parent . getComponentCount ( ) ; int nrows = getRows ( ) ; int ncols = getColumns ( ) ; if ( ncomponents = = 0 ) { return ; } if ( nrows > 0 ) { ncols = ( ncomponents + nrows - 1 ) / nrows ; } else { nrows = ( ncomponents + ncols - 1 ) / ncols ; } int hgap = getHgap ( ) ; int vgap = getVgap ( ) ; / / scaling factors Dimension pd = preferredLayoutSize ( parent ) ; double sw = ( 1 . 0 * parent . getWidth ( ) ) / pd . width ; double sh = ( 1 . 0 * parent . getHeight ( ) ) / pd . height ; / / scale int [ ] w = new int [ ncols ] ; int [ ] h = new int [ nrows ] ; for ( int i = 0 ; i < ncomponents ; i + + ) { int r = i / ncols ; int c = i % ncols ; Component comp = parent . getComponent ( i ) ; Dimension d = comp . getPreferredSize ( ) ; d . width = ( int ) ( sw * d . width ) ; d . height = ( int ) ( sh * d . height ) ; if ( w [ c ] < d . width ) { w [ c ] = d . width ; } if ( h [ r ] < d . height ) { h [ r ] = d . height ; } } for ( int c = 0 , x = insets . left ; c < ncols ; c + + ) { for ( int r = 0 , y = insets . top ; r < nrows ; r + + ) { int i = r * ncols + c ; if ( i < ncomponents ) { parent . getComponent ( i ) . setBounds ( x , y , w [ c ] , h [ r ] ) ; } y + = h [ r ] + vgap ; } x + = w [ c ] + hgap ; } } }
void test1 ( ) throws Throwable { GridLayout2 gridLayout2_0 = new GridLayout2 ( ( - 292 ) , ( - 292 ) ) ; JToolBar jToolBar0 = new JToolBar ( 0 ) ; gridLayout2_0 . layoutContainer ( ( Container ) jToolBar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layoutContainer ( Container parent ) { / / System . err . println ( "layoutContainer" ) ; ( parent . getTreeLock ( ) ) { Insets insets = parent . getInsets ( ) ; int ncomponents = parent . getComponentCount ( ) ; int nrows = getRows ( ) ; int ncols = getColumns ( ) ; if ( ncomponents = = 0 ) { return ; } if ( nrows > 0 ) { ncols = ( ncomponents + nrows - 1 ) / nrows ; } else { nrows = ( ncomponents + ncols - 1 ) / ncols ; } int hgap = getHgap ( ) ; int vgap = getVgap ( ) ; / / scaling factors Dimension pd = preferredLayoutSize ( parent ) ; double sw = ( 1 . 0 * parent . getWidth ( ) ) / pd . width ; double sh = ( 1 . 0 * parent . getHeight ( ) ) / pd . height ; / / scale int [ ] w = new int [ ncols ] ; int [ ] h = new int [ nrows ] ; for ( int i = 0 ; i < ncomponents ; i + + ) { int r = i / ncols ; int c = i % ncols ; Component comp = parent . getComponent ( i ) ; Dimension d = comp . getPreferredSize ( ) ; d . width = ( int ) ( sw * d . width ) ; d . height = ( int ) ( sh * d . height ) ; if ( w [ c ] < d . width ) { w [ c ] = d . width ; } if ( h [ r ] < d . height ) { h [ r ] = d . height ; } } for ( int c = 0 , x = insets . left ; c < ncols ; c + + ) { for ( int r = 0 , y = insets . top ; r < nrows ; r + + ) { int i = r * ncols + c ; if ( i < ncomponents ) { parent . getComponent ( i ) . setBounds ( x , y , w [ c ] , h [ r ] ) ; } y + = h [ r ] + vgap ; } x + = w [ c ] + hgap ; } } }
void test2 ( ) throws Throwable { GridLayout2 gridLayout2_0 = new GridLayout2 ( ( - 1904 ) , 12 , 200 , 12 ) ; JSpinner jSpinner0 = new JSpinner ( ) ; gridLayout2_0 . layoutContainer ( ( Container ) jSpinner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layoutContainer ( Container parent ) { / / System . err . println ( "layoutContainer" ) ; ( parent . getTreeLock ( ) ) { Insets insets = parent . getInsets ( ) ; int ncomponents = parent . getComponentCount ( ) ; int nrows = getRows ( ) ; int ncols = getColumns ( ) ; if ( ncomponents = = 0 ) { return ; } if ( nrows > 0 ) { ncols = ( ncomponents + nrows - 1 ) / nrows ; } else { nrows = ( ncomponents + ncols - 1 ) / ncols ; } int hgap = getHgap ( ) ; int vgap = getVgap ( ) ; / / scaling factors Dimension pd = preferredLayoutSize ( parent ) ; double sw = ( 1 . 0 * parent . getWidth ( ) ) / pd . width ; double sh = ( 1 . 0 * parent . getHeight ( ) ) / pd . height ; / / scale int [ ] w = new int [ ncols ] ; int [ ] h = new int [ nrows ] ; for ( int i = 0 ; i < ncomponents ; i + + ) { int r = i / ncols ; int c = i % ncols ; Component comp = parent . getComponent ( i ) ; Dimension d = comp . getPreferredSize ( ) ; d . width = ( int ) ( sw * d . width ) ; d . height = ( int ) ( sh * d . height ) ; if ( w [ c ] < d . width ) { w [ c ] = d . width ; } if ( h [ r ] < d . height ) { h [ r ] = d . height ; } } for ( int c = 0 , x = insets . left ; c < ncols ; c + + ) { for ( int r = 0 , y = insets . top ; r < nrows ; r + + ) { int i = r * ncols + c ; if ( i < ncomponents ) { parent . getComponent ( i ) . setBounds ( x , y , w [ c ] , h [ r ] ) ; } y + = h [ r ] + vgap ; } x + = w [ c ] + hgap ; } } }
void test4 ( ) throws Throwable { GridLayout2 gridLayout2_0 = new GridLayout2 ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "V * nZ | '" , false , false ) ; Dimension dimension0 = gridLayout2_0 . minimumLayoutSize ( ( Container ) jInternalFrame0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension minimumLayoutSize ( Container parent ) { System . err . println ( "minimumLayoutSize" ) ; ( parent . getTreeLock ( ) ) { Insets insets = parent . getInsets ( ) ; int ncomponents = parent . getComponentCount ( ) ; int nrows = getRows ( ) ; int ncols = getColumns ( ) ; if ( nrows > 0 ) { ncols = ( ncomponents + nrows - 1 ) / nrows ; } else { nrows = ( ncomponents + ncols - 1 ) / ncols ; } int [ ] w = new int [ ncols ] ; int [ ] h = new int [ nrows ] ; for ( int i = 0 ; i < ncomponents ; i + + ) { int r = i / ncols ; int c = i % ncols ; Component comp = parent . getComponent ( i ) ; Dimension d = comp . getMinimumSize ( ) ; if ( w [ c ] < d . width ) { w [ c ] = d . width ; } if ( h [ r ] < d . height ) { h [ r ] = d . height ; } } int nw = 0 ; for ( int j = 0 ; j < ncols ; j + + ) { nw + = w [ j ] ; } int nh = 0 ; for ( int i = 0 ; i < nrows ; i + + ) { nh + = h [ i ] ; } return new Dimension ( insets . left + insets . right + nw + ( ncols - 1 ) * getHgap ( ) , insets . top + insets . bottom + nh + ( nrows - 1 ) * getVgap ( ) ) ; } }
void test5 ( ) throws Throwable { GridLayout2 gridLayout2_0 = new GridLayout2 ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; JInternalFrame . JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame . JDesktopIcon ( jInternalFrame0 ) ; gridLayout2_0 . layoutContainer ( ( Container ) jInternalFrame_JDesktopIcon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void layoutContainer ( Container parent ) { / / System . err . println ( "layoutContainer" ) ; ( parent . getTreeLock ( ) ) { Insets insets = parent . getInsets ( ) ; int ncomponents = parent . getComponentCount ( ) ; int nrows = getRows ( ) ; int ncols = getColumns ( ) ; if ( ncomponents = = 0 ) { return ; } if ( nrows > 0 ) { ncols = ( ncomponents + nrows - 1 ) / nrows ; } else { nrows = ( ncomponents + ncols - 1 ) / ncols ; } int hgap = getHgap ( ) ; int vgap = getVgap ( ) ; / / scaling factors Dimension pd = preferredLayoutSize ( parent ) ; double sw = ( 1 . 0 * parent . getWidth ( ) ) / pd . width ; double sh = ( 1 . 0 * parent . getHeight ( ) ) / pd . height ; / / scale int [ ] w = new int [ ncols ] ; int [ ] h = new int [ nrows ] ; for ( int i = 0 ; i < ncomponents ; i + + ) { int r = i / ncols ; int c = i % ncols ; Component comp = parent . getComponent ( i ) ; Dimension d = comp . getPreferredSize ( ) ; d . width = ( int ) ( sw * d . width ) ; d . height = ( int ) ( sh * d . height ) ; if ( w [ c ] < d . width ) { w [ c ] = d . width ; } if ( h [ r ] < d . height ) { h [ r ] = d . height ; } } for ( int c = 0 , x = insets . left ; c < ncols ; c + + ) { for ( int r = 0 , y = insets . top ; r < nrows ; r + + ) { int i = r * ncols + c ; if ( i < ncomponents ) { parent . getComponent ( i ) . setBounds ( x , y , w [ c ] , h [ r ] ) ; } y + = h [ r ] + vgap ; } x + = w [ c ] + hgap ; } } }
void test2 ( ) throws Throwable { TabbedInterface . ArrayListComboBoxModel tabbedInterface_ArrayListComboBoxModel0 = TabbedInterface . comboBoxModel ; tabbedInterface_ArrayListComboBoxModel0 . addElement ( ( Object ) "selectionModel" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
