void test0 ( ) throws Throwable { MSession mSession0 = MSession . getInstance ( ) ; String string0 = ( String ) mSession0 . getAttribute ( "password" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAttribute ( String attribute ) { return sessionMap . get ( attribute ) ; }
void test2 ( ) throws Throwable { File file0 = new File ( "@ } dt * f * F0MeHu } GBKZ" , "@ } dt * f * F0MeHu } GBKZ" ) ; MImageMigrator . setDirectoryToMigrate ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDirectoryToMigrate ( File dir ) { / / File dir = new File ( dirName ) ; if ( fileList = = null ) { dirToMigrate = dir ; filesList = dir . listFiles ( ) ; } }
void test0 ( ) throws Throwable { Date date0 = new Date ( ( - 1860L ) ) ; String string0 = MDate . getFormattedDate ( date0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormattedDate ( Date date , String dateTimeFormat ) { SimpleDateFormat sdf = new SimpleDateFormat ( dateTimeFormat ) ; return sdf . format ( date ) ; }
void test1 ( ) throws Throwable { MDate mDate0 = new MDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { String string0 = MDate . now ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String now ( String dateTimeFormat ) { Calendar cal = Calendar . getInstance ( ) ; SimpleDateFormat sdf = new SimpleDateFormat ( dateTimeFormat ) ; return sdf . format ( cal . getTime ( ) ) ; }
void test0 ( ) throws Throwable { MProperties mProperties0 = MProperties . getInstance ( ) ; String string0 = mProperties0 . getPropertyValue ( "DDJyhYBg7@iQL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertyValue ( String property ) { String value = prop . getProperty ( property ) ; return value ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MReportCSV mReportCSV0 = new MReportCSV ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; mReportCSV0 . addLine ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addLine ( List columns ) throws Exception ; }
void test0 ( ) throws Throwable { MReportHTML mReportHTML0 = new MReportHTML ( ) ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; mReportHTML0 . addLine ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addLine ( List columns ) throws Exception ; }
void test1 ( ) throws Throwable { MReportHTML mReportHTML0 = new MReportHTML ( ) ; PrintWriter printWriter0 = mReportHTML0 . openReportFile ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PrintWriter openReportFile ( String fileName ) throws Exception ; void addLine ( List columns ) throws Exception ; }
void test0 ( ) throws Throwable { HTMLFilter hTMLFilter0 = new HTMLFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = HTMLFilter . filter ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String filter ( String message ) { if ( message = = null ) return ( null ) ; char content [ ] = new char [ message . length ( ) ] ; message . getChars ( 0 , message . length ( ) , content , 0 ) ; StringBuffer result = new StringBuffer ( content . length + 50 ) ; for ( int i = 0 ; i < content . length ; i + + ) { switch ( content [ i ] ) { case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' & ' : result . append ( " & amp ; " ) ; break ; case '"' : result . append ( " & quot ; " ) ; break ; default : result . append ( content [ i ] ) ; } } return ( result . toString ( ) ) ; }
void test2 ( ) throws Throwable { String string0 = HTMLFilter . filter ( "P ; . \" : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String filter ( String message ) { if ( message = = null ) return ( null ) ; char content [ ] = new char [ message . length ( ) ] ; message . getChars ( 0 , message . length ( ) , content , 0 ) ; StringBuffer result = new StringBuffer ( content . length + 50 ) ; for ( int i = 0 ; i < content . length ; i + + ) { switch ( content [ i ] ) { case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' & ' : result . append ( " & amp ; " ) ; break ; case '"' : result . append ( " & quot ; " ) ; break ; default : result . append ( content [ i ] ) ; } } return ( result . toString ( ) ) ; }
void test3 ( ) throws Throwable { String string0 = HTMLFilter . filter ( "P ; . & quot ; : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String filter ( String message ) { if ( message = = null ) return ( null ) ; char content [ ] = new char [ message . length ( ) ] ; message . getChars ( 0 , message . length ( ) , content , 0 ) ; StringBuffer result = new StringBuffer ( content . length + 50 ) ; for ( int i = 0 ; i < content . length ; i + + ) { switch ( content [ i ] ) { case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' & ' : result . append ( " & amp ; " ) ; break ; case '"' : result . append ( " & quot ; " ) ; break ; default : result . append ( content [ i ] ) ; } } return ( result . toString ( ) ) ; }
void test4 ( ) throws Throwable { String string0 = HTMLFilter . filter ( "$$n / eSQ < | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String filter ( String message ) { if ( message = = null ) return ( null ) ; char content [ ] = new char [ message . length ( ) ] ; message . getChars ( 0 , message . length ( ) , content , 0 ) ; StringBuffer result = new StringBuffer ( content . length + 50 ) ; for ( int i = 0 ; i < content . length ; i + + ) { switch ( content [ i ] ) { case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' & ' : result . append ( " & amp ; " ) ; break ; case '"' : result . append ( " & quot ; " ) ; break ; default : result . append ( content [ i ] ) ; } } return ( result . toString ( ) ) ; }
void test5 ( ) throws Throwable { String string0 = HTMLFilter . filter ( " ] . . 3cadqdda ( dD - [ k > : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String filter ( String message ) { if ( message = = null ) return ( null ) ; char content [ ] = new char [ message . length ( ) ] ; message . getChars ( 0 , message . length ( ) , content , 0 ) ; StringBuffer result = new StringBuffer ( content . length + 50 ) ; for ( int i = 0 ; i < content . length ; i + + ) { switch ( content [ i ] ) { case ' < ' : result . append ( " & lt ; " ) ; break ; case ' > ' : result . append ( " & gt ; " ) ; break ; case ' & ' : result . append ( " & amp ; " ) ; break ; case '"' : result . append ( " & quot ; " ) ; break ; default : result . append ( content [ i ] ) ; } } return ( result . toString ( ) ) ; }
