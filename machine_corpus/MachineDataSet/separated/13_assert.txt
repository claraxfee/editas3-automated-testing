assertNotNull ( main0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( sQLUtil0 )
assertEquals ( "f~y@V | ) : = ] ; O as f~y@V | ) : = ] ; O on f~y@V | ) : = ] ; O . null = f~y@V | ) : = ] ; O . null" , string0 )
assertEquals ( "CONSTRAINT FOREIGN KEY ( , , , , , , , , , , , , , , , , , ) REFERENCES ( , , , , , , , , , , , , , , , , , ) " , dBForeignKeyConstraint0 . toString ( ) )
assertNotNull ( objectArray0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( 87 , rowOutputBinary0 . size ( ) )
assertEquals ( 121 , rowOutputBinary0 . size ( ) )
assertEquals ( 54 , rowOutputBinary0 . size ( ) )
assertEquals ( "f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O , f~y@V | ) : = ] ; O" , string0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( "F~Y@V | ) : = ] ; O ( - 519 ) " , stringBuilder0 . toString ( ) )
assertNotNull ( string0 )
assertEquals ( false , ( boolean ) boolean0 )
assertEquals ( true , ( boolean ) boolean0 )
assertEquals ( true , ( boolean ) boolean0 )
assertEquals ( false , ( boolean ) boolean0 )
assertEquals ( "CONSTRAINT \"drop materialized viewjna9 = e' - ` = < gn = n\" UNIQUE ( , , , , , , , , , ) " , dBUniqueConstraint0 . toString ( ) )
assertEquals ( "7EM7 as null on null . null = null . null and null . null = null . null and null . null = null . null and null . null = null . null and null . null = null . null and null . null = null . null and null . null = null . null" , string0 )
assertEquals ( "" , stringBuilder1 . toString ( ) )
assertEquals ( "false and left join gK < @Sc3 . \"5 * l - ( ZJ ; HT as drop materialized viewjna9 = e' - ` = < gn = n on gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT" , stringBuilder0 . toString ( ) )
assertEquals ( "f~y@V | ) : = ] ; O or null" , stringBuilder0 . toString ( ) )
assertNotNull ( string0 )
assertEquals ( " . " , string0 )
assertEquals ( "create table drop materialized viewjna9 = e' - ` = < gn = n ( , \n\tUNIQUE ( , , ) \n ) " , rowOutputBinary0 . toString ( ) )
assertEquals ( "CONSTRAINT 8 UNIQUE ( , , , ) " , dBUniqueConstraint0 . toString ( ) )
assertEquals ( "drop materialized viewjna9 = e' - ` = < gn = nCONSTRAINT \"drop materialized viewjna9 = e' - ` = < gn = n\" " , stringBuilder0 . toString ( ) )
assertEquals ( "" , string0 )
assertEquals ( "CONSTRAINT \"drop materialized viewjna9 = e' - ` = < gn = n\" " , string0 )
assertNotNull ( string0 )
assertNull ( string0 )
assertEquals ( "column " , string0 )
assertEquals ( " . na9 = e'$` = < gn = N" , string0 )
assertEquals ( "left join gK < @ Sc3 . \"5 * l - ( ZJ ; HT as drop materialized viewjna9 = e' - ` = < gn = n on gK < @Sc3 . \" 5 * l - ( ZJ ; HT . drop materialized viewjna9 = e ' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e ' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e ' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @ Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \" 5 * l - ( ZJ ; HT = drop materialized viewjna9 = e ' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @ Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \" 5 * l - ( ZJ ; HT . drop materialized viewjna9 = e ' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e ' - ` = < gn = n and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e ' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @ Sc3 . \"5 * l - ( ZJ ; HT . gK < @Sc3 . \" 5 * l - ( ZJ ; HT = drop materialized viewjna9 = e ' - ` = < gn = n . gK < @Sc3 . \"5 * l - ( ZJ ; HT and gK < @Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e ' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @ Sc3 . \"5 * l - ( ZJ ; HT . drop materialized viewjna9 = e' - ` = < gn = n = drop materialized viewjna9 = e' - ` = < gn = n . drop materialized viewjna9 = e' - ` = < gn = n and gK < @Sc3 . \" 5 * l - ( ZJ ; HT . gK < @ Sc3 . \"5 * l - ( ZJ ; HT = drop materialized viewjna9 = e' - ` = < gn = n . gK < @Sc3 . \" 5 * l - ( ZJ ; HT" , string0 )
assertEquals ( "yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . null , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . null , yW + NPs089 # vz48 . null , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . null , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089 # vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089 # vz48 . Yv - sio TTFRz | } ^ - Z , yW + NPs089 # vz48 . yW + NPs089 # vz48 , yW + NPs089 # vz48 . yW + NPs089 # vz48" , string0 )
assertNotNull ( string0 )
assertEquals ( " * / " , string0 )
assertNotNull ( string0 )
assertEquals ( "yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null , yW + NPs089#vz48 . null" , string0 )
assertNotNull ( databaseDialectManager0 )
assertEquals ( false , unknownDialect0 . supportsRegex ( ) )
assertEquals ( true , hSQL2Dialect0 . supportsRegex ( ) )
assertEquals ( true , hSQLDialect0 . isSequenceBoundarySupported ( ) )
assertNotNull ( string0 )
assertNotNull ( databaseTestUtil0 )
assertNotNull ( dBExecutionResult0 )
assertNull ( dBObject0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( jDBCConnectData0 )
assertNotNull ( resultSetIterator0 )
assertNotNull ( resultSetIterator0 )
assertNotNull ( resultSetIterator0 )
assertNotNull ( resultSetIterator0 )
assertNotNull ( derbyDialect0 )
assertNotNull ( mySQLDialect0 )
assertNotNull ( mySQLDialect0 )
assertNotNull ( sqlServerDialect0 )
assertNotNull ( derbyDialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( unknownDialect0 )
assertNotNull ( derbyDialect0 )
assertNotNull ( mySQLDialect0 )
assertNotNull ( dB2Dialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( sqlServerDialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( derby10_6Dialect0 )
assertNotNull ( unknownDialect0 )
assertNotNull ( postgreSQLDialect0 )
assertNotNull ( mySQLDialect0 )
assertNotNull ( postgreSQLDialect0 )
assertNotNull ( postgreSQLDialect0 )
assertNotNull ( mySQLDialect0 )
assertNotNull ( hSQLDialect0 )
assertNotNull ( unknownDialect0 )
assertNotNull ( oracleDialect0 )
assertNotNull ( derbyDialect0 )
assertNotNull ( derbyDialect0 )
assertNotNull ( firebirdDialect0 )
assertNotNull ( mySQLDialect0 )
assertAllDbResourcesClosed ( false )
assertAllDbResourcesClosed ( true )
assertNull ( jDBCDriverInfo0 . getName ( ) )
assertEquals ( false , collection0 . isEmpty ( ) )
assertEquals ( "http : / / hsqldb . sourceforge . net / " , string0 )
assertNull ( jDBCDriverInfo0 . getDownloadUrl ( ) )
assertNull ( string0 )
assertEquals ( "ORACLE" , string0 )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( "XE" , jDBCDriverInfo0 . getDefaultDatabase ( ) )
assertEquals ( "jdbc : hsqldb : hsql : / / { 0 } : { 1 } / { 2 } " , string0 )
assertEquals ( "jdbc : oracle : thin : @T : T : XE" , string0 )
assertNull ( string0 )
assertNull ( jDBCDriverInfo0 . getDefaultDatabase ( ) )
assertNull ( jDBCDriverInfo0 )
assertNull ( jDBCDriverInfo0 . getDefaultPort ( ) )
assertEquals ( "PUBLIC" , jDBCDriverInfo0 . getDefaultSchema ( ) )
assertNull ( string0 )
assertEquals ( "system" , jDBCDriverInfo0 . getDefaultUser ( ) )
assertEquals ( "ORACLE" , jDBCDriverInfo0 . getId ( ) )
assertEquals ( "Oracle Thin Driver" , string0 )
assertEquals ( "jdbc : hsqldb : hsql : / / { 0 } : { 1 } / { 2 } " , jDBCDriverInfo0 . getUrlPattern ( ) )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( "Oracle" , jDBCDriverInfo0 . toString ( ) )
assertEquals ( "jdbc : hsqldb : hsql : / / " , jDBCDriverInfo0 . getUrlPrefix ( ) )
assertEquals ( "" , string0 )
assertNull ( jDBCDriverInfo0 . getId ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertSame ( stringArray2 , stringArray1 )
assertSame ( stringArray2 , stringArray0 )
assertNull ( dBTable0 )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( false , defaultDBColumn0 . isVersionColumn ( ) )
assertEquals ( false , defaultDBColumn0 . isVersionColumn ( ) )
assertEquals ( " ] xN : ] XN ( 1982 ) " , defaultDBColumn0 . toString ( ) )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( "POWER ( 0 , - 1 ) : POWER ( 0 , - 1 ) " , defaultDBColumn0 . toString ( ) )
assertEquals ( false , boolean0 )
assertEquals ( true , defaultDBColumn0 . isNullable ( ) )
assertNotNull ( defaultDBColumn0 )
assertEquals ( true , defaultDBColumn0 . isNullable ( ) )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( false , boolean0 )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( false , defaultDBColumn0 . isVersionColumn ( ) )
assertEquals ( false , defaultDBColumn0 . isVersionColumn ( ) )
assertNotNull ( defaultDBColumn0 )
assertEquals ( " ] xN : ] XN ( 1982 ) " , defaultDBColumn0 . toString ( ) )
assertNotNull ( defaultDBColumn0 )
assertNotNull ( defaultDBColumn0 )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( defaultDBTable0 )
assertNotNull ( defaultDBTable0 )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( true , dBUniqueIndex0 . isUnique ( ) )
assertEquals ( true , collection0 . isEmpty ( ) )
assertNull ( dBSchema0 . toString ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertNotNull ( stringArray0 )
assertEquals ( "table" , defaultDBTable0 . getObjectType ( ) )
assertNull ( dBIndex0 )
assertNull ( string0 )
assertNotNull ( defaultDBTable0 )
assertNotNull ( dBColumnArray0 )
assertNotNull ( defaultDBTable0 )
assertEquals ( false , set0 . isEmpty ( ) )
assertEquals ( "CONSTRAINT $a PRIMARY KEY ( , ) " , dBPrimaryKeyConstraint1 . toString ( ) )
assertNull ( dBPrimaryKeyConstraint1 )
assertEquals ( true , dBUniqueConstraint1 . isNameDeterministic ( ) )
assertEquals ( "unique constraint" , dBPrimaryKeyConstraint1 . getObjectType ( ) )
assertNull ( dBPrimaryKeyConstraint1 )
assertNotNull ( defaultDBTable0 )
assertNotNull ( defaultDBTable0 )
assertNotNull ( defaultDBTable0 )
assertNotNull ( defaultDBTable0 )
assertNull ( dBSchema0 . getName ( ) )
assertNotNull ( defaultDBTable0 )
assertNotNull ( defaultDBTable0 )
assertNotNull ( string0 )
assertNotNull ( dBNotNullConstraint0 )
assertEquals ( "pCURRENT_UfER : PCURRENT_UFER NOT NULL" , defaultDBColumn0 . toString ( ) )
assertNotNull ( dBNotNullConstraint0 )
assertNotNull ( dBNotNullConstraint0 )
assertNotNull ( dBNotNullConstraint0 )
assertEquals ( 0 , bigInteger0 . getLowestSetBit ( ) )
assertNotNull ( dBSequence0 )
assertNull ( bigInteger0 )
assertNull ( bigInteger0 )
assertEquals ( "% = 7I7 ( + d`wD" , dBSequence0 . toString ( ) )
assertNotNull ( dBSequence0 )
assertNotNull ( dBSequence0 )
assertEquals ( "0" , bigInteger0 . toString ( ) )
assertEquals ( "B8lOAI ! Fe & rhmC7Qjj5" , dBSequence0 . getName ( ) )
assertEquals ( "" , string0 )
assertEquals ( " - ] RX^MhX" , string0 )
assertNull ( bigInteger0 )
assertEquals ( " - ] RX^MhX" , dBSequence0 . getCatalogName ( ) )
assertNotNull ( dBSequence0 )
assertEquals ( "sequence" , dBSequence0 . getObjectType ( ) )
assertNull ( bigInteger0 )
assertNull ( bigInteger0 )
assertNotNull ( dBSequence0 )
assertNotNull ( dBSequence0 )
assertNotNull ( dBSequence0 )
assertNotNull ( string0 )
assertSame ( defaultDBTable1 , defaultDBTable0 )
assertEquals ( " ( , , ) unique" , dBUniqueIndex0 . toString ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "Connection ool has been disposed . ( , , ) unique" , dBUniqueIndex0 . toString ( ) )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertNull ( dBObject0 )
assertSame ( dBCatalog0 , dBCatalog1 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "trigger" , dBTrigger0 . getObjectType ( ) )
assertEquals ( "container" , tableContainer0 . getObjectType ( ) )
assertEquals ( "schema" , dBSchema0 . getObjectType ( ) )
assertEquals ( "6266dVB\"n } } NWBC { - X8" , tableContainer0 . getName ( ) )
assertEquals ( "database" , defaultDatabase0 . getObjectType ( ) )
assertEquals ( "catalog" , dBCatalog0 . getObjectType ( ) )
assertEquals ( "container" , tableContainer0 . getObjectType ( ) )
assertEquals ( "catalog" , dBCatalog0 . getObjectType ( ) )
assertEquals ( "" , defaultDatabase0 . toString ( ) )
assertEquals ( "container" , tableContainer0 . getObjectType ( ) )
assertEquals ( false , boolean0 )
assertEquals ( true , defaultDatabase0 . isImportedChecks ( ) )
assertEquals ( false , defaultDatabase0 . isImportedUKs ( ) )
assertNull ( string0 )
assertEquals ( false , boolean0 )
assertNull ( defaultDatabase0 . getTableInclusionPattern ( ) )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( false , defaultDatabase0 . isImportedSequences ( ) )
assertNull ( defaultDatabase0 . getDoc ( ) )
assertSame ( versionNumber1 , versionNumber0 )
assertEquals ( false , defaultDatabase0 . isImportedChecks ( ) )
assertNull ( date0 )
assertNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , defaultDatabase0 . isImportedSequences ( ) )
assertEquals ( "" , string0 )
assertEquals ( false , boolean0 )
assertNull ( string0 )
assertNull ( dBCatalog0 )
assertNull ( dBTable0 )
assertEquals ( "database" , defaultDatabase0 . getObjectType ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , defaultDatabase0 . isImportedIndexes ( ) )
assertSame ( dBSchema1 , dBSchema0 )
assertEquals ( true , list0 . isEmpty ( ) )
assertNotNull ( dBCatalog0 )
assertSame ( defaultDBTable1 , defaultDBTable0 )
assertEquals ( 0 , list0 . size ( ) )
assertNotNull ( list0 )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 2 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertEquals ( 1 , defaultDBTable0 . countProviders ( ) )
assertNotNull ( dBUniqueConstraint0 )
assertEquals ( true , boolean0 )
assertNotNull ( defaultDBTable1 )
assertEquals ( true , dBNotNullConstraint0 . isNameDeterministic ( ) )
assertNotNull ( dBUniqueConstraint0 )
assertNotNull ( dBUniqueConstraint0 )
assertNotNull ( dBUniqueConstraint0 )
assertNotNull ( dBUniqueConstraint0 )
assertEquals ( ( - 1796951359 ) , int0 )
assertEquals ( true , boolean0 )
assertEquals ( false , dBNonUniqueIndex0 . isNameDeterministic ( ) )
assertEquals ( true , dBNonUniqueIndex0 . isNameDeterministic ( ) )
assertEquals ( false , dBNonUniqueIndex0 . isNameDeterministic ( ) )
assertNotNull ( string0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertNotNull ( dBDataType0 )
assertEquals ( true , boolean0 )
assertEquals ( "g`On ( , , , , , , , , , , , , , , , , , ) " , string0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertFalse ( dBNonUniqueIndex1 . equals ( dBNonUniqueIndex0 ) )
assertNull ( dBCatalog0 . getDoc ( ) )
assertEquals ( "schema" , dBSchema0 . getObjectType ( ) )
assertEquals ( "DROP ALIAS READ_CLOB_DB ; " , dBCatalog0 . getDoc ( ) )
assertNull ( database0 )
assertNull ( string0 )
assertNull ( dBSchema0 )
assertNotNull ( dBCatalog0 )
assertNull ( defaultDBTable1 )
assertNull ( defaultDBTable1 . getDoc ( ) )
assertNotNull ( dBSchema0 )
assertNotNull ( dBCheckConstraint0 )
assertEquals ( "ml" , string0 )
assertEquals ( true , boolean0 )
assertNotNull ( dBCheckConstraint0 )
assertNotNull ( dBCheckConstraint1 )
assertNotNull ( dBCheckConstraint0 )
assertNotNull ( dBCheckConstraint1 )
assertNotNull ( dBCheckConstraint0 )
assertNotNull ( dBCheckConstraint0 )
assertNotNull ( dBCheckConstraint1 )
assertNotNull ( dBCheckConstraint0 )
assertEquals ( "4" , dBCheckConstraint0 . getTableName ( ) )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( 0 , list0 . size ( ) )
assertNull ( string0 )
assertNull ( dBPackage0 . getSubObjectName ( ) )
assertNull ( string0 )
assertEquals ( 0 , list0 . size ( ) )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertNotNull ( dBPackage0 )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( "schema" , dBSchema0 . getObjectType ( ) )
assertEquals ( "catalog" , dBCatalog0 . getObjectType ( ) )
assertEquals ( 0 , defaultDBTable0 . countProviders ( ) )
assertNull ( dBTrigger0 . getTriggerType ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( " ] ! + i < '#gQ6" , dBSequence0 . getCatalogName ( ) )
assertNull ( dBPackage0 . getDoc ( ) )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertNull ( dBTable0 )
assertNull ( dBTable0 )
assertEquals ( false , defaultDBColumn0 . isVersionColumn ( ) )
assertEquals ( "null [ ] " , string0 )
assertEquals ( " . [ TRANSACTION_READ_COMMITTED ] " , dBRow0 . toString ( ) )
assertEquals ( "table" , defaultDBTable1 . getObjectType ( ) )
assertNull ( object0 )
assertEquals ( 0 , map0 . size ( ) )
assertNotNull ( objectArray0 )
assertNotNull ( object0 )
assertEquals ( "IU86E } 01BI\"CZ [ ] " , dBRow0 . toString ( ) )
assertEquals ( "null [ null ] " , dBRow0 . toString ( ) )
assertEquals ( "CONSTRAINT 'COM = %MENT' UNIQUE ( , , , , , , , , , , , , ) " , string0 )
assertEquals ( "CONSTRAINT 'COM = %MENT' UNIQUE ( , , , , , , , , , , , , ) " , dBUniqueConstraint0 . toString ( ) )
assertEquals ( "CONSTRAINT 'COM = %MENT' PRIMARY KEY ( 'COM = %MENT' , , , , , , , , , , , , ) " , dBPrimaryKeyConstraint0 . toString ( ) )
assertEquals ( "CONSTRAINT 0A PRIMARY KEY ( , , , 0A ) " , dBPrimaryKeyConstraint0 . toString ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( "CONSTRAINT 0A PRIMARY KEY ( , , ) " , dBPrimaryKeyConstraint0 . toString ( ) )
assertNull ( string0 )
assertNull ( dBTrigger0 . getTableOwner ( ) )
assertNull ( dBTrigger0 . getActionType ( ) )
assertNull ( dBTrigger0 . getDoc ( ) )
assertEquals ( "" , dBTrigger0 . getName ( ) )
assertNull ( string0 )
assertNull ( dBTrigger0 . getDoc ( ) )
assertEquals ( "setObjet ( String , Object ) " , dBTrigger0 . getName ( ) )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( false , boolean0 )
assertNotNull ( dBTrigger0 )
assertEquals ( true , boolean0 )
assertEquals ( true , list1 . isEmpty ( ) )
assertNull ( dBTable0 )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( 0 , list0 . size ( ) )
assertEquals ( true , list0 . isEmpty ( ) )
assertNull ( dBSchema0 )
assertNull ( dBCatalog0 )
assertNotNull ( file0 )
assertNull ( simpleXMLWriter0 . getSystemId ( ) )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( ( short ) 0 , importedKey0 . delete_rule )
assertNull ( dBTable0 )
assertNotNull ( string0 )
assertEquals ( true , list0 . isEmpty ( ) )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( false , jDBCDBImporter0 . importingPackages )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( true , jDBCDBImporter0 . importingUKs )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( false , jDBCDBImporter0 . lazy )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( false , jDBCDBImporter0 . importingPackages )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( true , jDBCDBImporter0 . importingChecks )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( true , jDBCDBImporter0 . importingChecks )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertNotNull ( jDBCDBImporter0 )
assertEquals ( "jdc , O ( 7p_gpUK ? j@ ; " , string0 )
assertNull ( dBSchema0 )
assertNotNull ( lazyTable0 )
assertNotNull ( lazyTable0 )
assertNotNull ( lazyTable0 )
assertNotNull ( lazyTable0 )
assertNotNull ( lazyTable0 )
assertEquals ( true , boolean0 )
assertNotNull ( lazyTable0 )
assertNotNull ( dBIndexInfo0 )
assertNotNull ( dBIndexInfo0 )
assertNotNull ( dBIndexInfo0 )
assertNotNull ( dBIndexInfo0 )
assertNotNull ( dBIndexInfo0 )
assertAllResultSetsClosed ( false )
assertEquals ( 0 , int0 )
assertNotNull ( loggingResultSetHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertAllStatementsClosed ( false )
assertNotNull ( loggingPreparedStatementHandler0 )
assertEquals ( 197 , int0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertNotNull ( loggingPreparedStatementHandler0 )
assertEquals ( 0 , int0 )
assertAllStatementsClosed ( true )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( loggingStatementHandler0 )
assertNotNull ( pooledConnectionHandler0 )
assertNotNull ( pooledConnectionHandler0 )
assertNotNull ( pooledConnectionHandler0 )
assertAllConnectionsClosed ( false )
assertEquals ( 62 , int0 )
assertNotNull ( pooledConnectionHandler0 )
assertSame ( versionNumber1 , versionNumber0 )
assertEquals ( "bf { [ j$ + efOU$ = O" , queryVersionProvider0 . getQuery ( ) )
assertEquals ( "bf { [ j$ + efOU$ = O" , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "CREATE GENERATOR o$ : 1 > 6Z5 ] / 8 | 49K" , string0 )
assertNotNull ( string0 )
assertEquals ( true , boolean0 )
assertEquals ( "org . firebirdsql . jdbc . FBDriver" , string0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( "call next value for " , string0 )
assertEquals ( false , boolean0 )
assertEquals ( "drop sequence . zb" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( hSQLDialect0 . randomUKNamePattern )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( "NO CYCLE" , string0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "CREATE SEQUENCE " , string0 )
assertEquals ( "CREATE SEQUENCE f CACHE 4611686018427387890" , string0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( " D / 2G8mPI'l ~ ' D / 2G8mPI'l'" , string0 )
assertNotNull ( string0 )
assertEquals ( "to_timestamp ( 'null' , 'yyyy - mm - dd HH24 : mi : ss . FF' ) " , string0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( "CREATE SEQUENCE \"9 < s\" . \"9 < s\" CACHE 0" , string0 )
assertEquals ( "CREATE SEQUENCE \"9 < s\" . \"9 < s\"NOORDER" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( "NOT REGEXP_LIKE ( oracle , 'oracle' ) " , string0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "1gQPA ] : u < } = a * ; 2 > = = CASE WHEN null THEN null ELSE 1gQPA ] : u < } = a * ; 2 > = END" , string0 )
assertEquals ( "null = CASE WHEN null THEN null END" , string0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( "drop sequence null" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "t7FIH\"IM30UuV < REGEXP 't7FIH\"IM30UuV < '" , string0 )
assertEquals ( "lwh : 5Jve NOT REGEXP 'lwh : 5Jve'" , string0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertNotNull ( h2Util0 )
assertNotNull ( hSQLUtil0 )
assertEquals ( true , columnExpression0 . isQuoted ( ) )
assertEquals ( true , boolean0 )
assertEquals ( "OXjZ5@g . " , string0 )
assertEquals ( "\"OXjZ5@g . \"" , string0 )
assertNull ( object0 )
assertEquals ( "" , string0 )
assertNotNull ( string0 )
assertEquals ( 12 , aNTLRNoCaseStringStream0 . index ( ) )
assertNotNull ( sQLParserUtil0 )
assertFalse ( expression1 . equals ( expression0 ) )
assertEquals ( 9 , aNTLRStringStream0 . getCharPositionInLine ( ) )
assertEquals ( 5 , aNTLRReaderStream0 . getCharPositionInLine ( ) )
assertEquals ( 35 , aNTLRReaderStream0 . getCharPositionInLine ( ) )
assertEquals ( "" , string0 )
assertEquals ( "" , string0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( 0 , int0 )
assertNull ( object0 )
assertNull ( object0 )
assertNotNull ( sQLParser_foreign_key_constraint_return0 )
assertEquals ( 1 , tokenRewriteStream0 . index ( ) )
assertEquals ( 0 , sQLParser0 . getNumberOfSyntaxErrors ( ) )
assertNull ( object0 )
assertNotNull ( sQLParser_default_value_return0 )
assertNotNull ( sQLParser_drop_sequence_return0 )
assertNull ( object0 )
assertNotNull ( sQLParser_column_detail_return0 )
assertNull ( object0 )
assertNotNull ( sQLParser_table_details_return0 )
assertNull ( object0 )
assertNull ( object0 )
assertNotNull ( sQLParser_table_comment_details_return0 )
assertNotNull ( sQLParser_partition_part_return0 )
assertNotNull ( sQLParser_ora_flag_return0 )
assertNotNull ( sQLParser_ora_partition_spec_return0 )
assertNotNull ( sQLParser_qualified_name_return0 )
assertNotNull ( sQLParser_ora_lob_return0 )
assertNull ( object0 )
assertNull ( object0 )
assertNull ( object0 )
assertNull ( object0 )
assertNull ( object0 )
assertNotNull ( sQLParser_ora_storage_spec_return0 )
assertNull ( object0 )
assertNull ( object0 )
assertNull ( object0 )
assertNotNull ( sQLParser_ora_lob_index_return0 )
assertNull ( object0 )
assertNull ( object0 )
assertNull ( object0 )
assertNotNull ( sQLParser_constraint_detail_return0 )
assertNull ( object0 )
assertNotNull ( sQLParser_arguments_return0 )
assertNotNull ( sQLParser_nullability_return0 )
assertEquals ( "1 : 1 : Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME )
assertEquals ( " / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g" , sQLLexer0 . getGrammarFileName ( ) )
assertEquals ( 0 , sQLLexer0 . getBacktrackingLevel ( ) )
assertEquals ( 0 , sQLLexer0 . getCharIndex ( ) )
assertEquals ( 1 , sQLLexer0 . getLine ( ) )
assertNull ( sQLLexer0 . getSourceName ( ) )
assertEquals ( " / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g" , sQLLexer0 . getGrammarFileName ( ) )
assertEquals ( 1 , sQLLexer0 . getLine ( ) )
assertEquals ( 0 , recognizerSharedState0 . tokenStartCharIndex )
assertEquals ( 0 , sQLLexer0 . getRuleMemoizationCacheSize ( ) )
assertEquals ( 0 , sQLLexer0 . getBacktrackingLevel ( ) )
assertEquals ( 0 , sQLLexer0 . getRuleMemoizationCacheSize ( ) )
assertEquals ( 0 , sQLLexer0 . getBacktrackingLevel ( ) )
assertEquals ( 1 , sQLLexer0 . getLine ( ) )
assertEquals ( 0 , sQLLexer0 . getBacktrackingLevel ( ) )
assertEquals ( " / Users / volker / Documents / databene / jdbacl / src / main / g / SQL . g" , sQLLexer0 . getGrammarFileName ( ) )
assertEquals ( 0 , sQLLexer0 . getBacktrackingLevel ( ) )
assertEquals ( 6 , sQLLexer0 . getCharIndex ( ) )
assertEquals ( 2 , sQLLexer0 . getCharIndex ( ) )
assertEquals ( 1 , sQLLexer0 . getLine ( ) )
assertEquals ( 1 , aNTLRStringStream0 . index ( ) )
assertEquals ( 1 , sQLLexer0 . getCharIndex ( ) )
assertEquals ( 4 , aNTLRStringStream0 . getCharPositionInLine ( ) )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( 0 , int0 )
assertEquals ( "ETITY - t * n3arsd identity by primary key" , string0 )
assertNotNull ( string0 )
assertEquals ( " | " , nKBuilder0 . toString ( ) )
assertEquals ( "" , nKBuilder0 . toString ( ) )
assertNull ( identityModel0 )
assertEquals ( "UniqueKeyIdentity ( i ) " , uniqueKeyIdentity1 . toString ( ) )
assertNotNull ( stringArray1 )
assertNotNull ( string0 )
assertNotNull ( objectArray1 )
assertNotNull ( naturalPkIdentity0 )
assertNotNull ( noIdentity0 )
assertNotNull ( uniqueKeyIdentity0 )
assertNotNull ( noIdentity0 )
assertNotNull ( nkPkQueryIdentity0 )
assertNotNull ( nkPkQueryIdentity0 )
assertNotNull ( noIdentity0 )
assertNotNull ( nkPkQueryIdentity0 )
assertNotNull ( naturalPkIdentity0 )
assertNotNull ( naturalPkIdentity0 )
assertNotNull ( noIdentity0 )
assertNotNull ( naturalPkIdentity0 )
assertNotNull ( naturalPkIdentity0 )
assertNotNull ( noIdentity0 )
assertNotNull ( noIdentity0 )
assertEquals ( "" , subNkPkQueryIdentity0 . getTableName ( ) )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNull ( identityProvider0 )
assertNotNull ( simpleTranscoder0 )
assertNotNull ( identityProvider0 )
assertNull ( recover0 . getDatabasePath ( ) )
assertEquals ( "it_IT" , string0 )
assertNull ( string0 )
assertEquals ( "" , string0 )
assertNull ( string0 )
assertNotNull ( globalRowId0 )
assertNotNull ( globalRowId0 )
assertEquals ( "_ { . 2 > v . _ { . 2 > v#_ { . 2 > v" , globalRowId0 . toString ( ) )
assertNotNull ( globalRowId0 )
assertNotNull ( globalRowId0 )
assertNotNull ( globalRowId0 )
assertNotNull ( globalRowId0 )
assertNotNull ( globalRowId0 )
assertNotNull ( globalRowId0 )
assertNotNull ( databasePane0 )
assertNotNull ( databasePane0 )
assertEquals ( " { rbwQ%" , string0 )
