void test0 ( ) throws Throwable { EClientErrors . CodeMsgPair eClientErrors_CodeMsgPair0 = EClientErrors . FAIL_SEND_CANMKT ; String string0 = eClientErrors_CodeMsgPair0 . msg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { EClientErrors . CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors . CodeMsgPair ( ( - 353 ) , "The TWS is out of date and must be upgraded . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EClientErrors ( ) { }
void test2 ( ) throws Throwable { EClientErrors . CodeMsgPair eClientErrors_CodeMsgPair0 = EClientErrors . FAIL_SEND_SERVER_LOG_LEVEL ; int int0 = eClientErrors_CodeMsgPair0 . code ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { EClientErrors eClientErrors0 = new EClientErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EClientErrors ( ) { }
void test0 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; ComboLeg comboLeg1 = new ComboLeg ( 0 , 0 , ( String ) null , ( String ) null , 0 , 1 , ( String ) null ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; ComboLeg comboLeg1 = new ComboLeg ( 1209 , 1209 , ( String ) null , ( String ) null , 0 ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; ComboLeg comboLeg1 = new ComboLeg ( 0 , ( - 786 ) , ( String ) null , ( String ) null , 0 ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( 1 , 1 , ( String ) null , ( String ) null , 5 , 5 , ( String ) null ) ; ComboLeg comboLeg1 = new ComboLeg ( 1 , 1 , ( String ) null , ( String ) null , 1 ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; ComboLeg comboLeg1 = new ComboLeg ( ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; comboLeg0 . m_action = "c4 > " ; ComboLeg comboLeg1 = new ComboLeg ( ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; ComboLeg comboLeg1 = new ComboLeg ( 0 , 0 , ( String ) null , " } ZYNs [ YC ! 6 * oW" , 0 ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { ComboLeg comboLeg0 = new ComboLeg ( ) ; comboLeg0 . m_designatedLocation = " } ZYNs [ YC ! 6 * oW" ; ComboLeg comboLeg1 = new ComboLeg ( ) ; boolean boolean0 = comboLeg0 . equals ( ( Object ) comboLeg1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { TagValue tagValue0 = new TagValue ( ) ; boolean boolean0 = tagValue0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { TagValue tagValue0 = new TagValue ( " ( XWhx ? C / " , " ( XWhx ? C / " ) ; TagValue tagValue1 = new TagValue ( ) ; boolean boolean0 = tagValue0 . equals ( ( Object ) tagValue1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { TagValue tagValue0 = new TagValue ( ) ; TagValue tagValue1 = new TagValue ( ) ; boolean boolean0 = tagValue0 . equals ( ( Object ) tagValue1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { TagValue tagValue0 = new TagValue ( " ] G5 / - Y\"\"Ct4A" , " ] G5 / - Y\"\"Ct4A" ) ; String string0 = "%D$m & s . [ FK } \\8mU" ; TagValue tagValue1 = new TagValue ( " ] G5 / - Y\"\"Ct4A" , string0 ) ; boolean boolean0 = tagValue0 . equals ( ( Object ) tagValue1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( ( - 2 ) , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( ( - 2 ) , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( ( - 2 ) , "" , "" , "" , "" , "" , "" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( ( - 2 ) , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( ( - 2 ) , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "t$ { L | 6V . gUo ! sff4" , "" , "t$ { L | 6V . gUo ! sff4" , "" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( 0 , "" , "" , "" , "" , "" , "" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( 0 , "" , "OB" , "" , "" , "" , "" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( ( - 2 ) , "" , "" , "" , "" , "" , "" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( ( - 2 ) , "" , "" , "t$ { L | 6V . gUo ! sff4" , "" , "" , "" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( 0 , "" , "" , "" , "" , "" , "" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( 0 , "" , "" , "" , "" , "" , "OB" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( 0 , "7" , "7" , "7" , "7" , "7" , "7" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( 0 , "7" , "7" , "7" , "7" , " [ po6 > `~u67v9o - ! n" , " [ po6 > `~u67v9o - ! n" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { ExecutionFilter executionFilter0 = new ExecutionFilter ( 0 , "7" , "7" , "7" , "7" , "7" , "7" ) ; ExecutionFilter executionFilter1 = new ExecutionFilter ( 0 , "7" , "7" , "7" , "7" , "7" , "7" ) ; boolean boolean0 = executionFilter0 . equals ( ( Object ) executionFilter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { OrderState orderState0 = new OrderState ( ) ; OrderState orderState1 = new OrderState ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , 0 . 0 , 0 . 0 , 0 . 0 , ( String ) null , ( String ) null ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { OrderState orderState0 = new OrderState ( "" , "" , "" , "" , 500 . 1158817614033 , 500 . 1158817614033 , 500 . 1158817614033 , "" , "" ) ; OrderState orderState1 = new OrderState ( ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { OrderState orderState0 = new OrderState ( "" , "" , "" , "" , 500 . 1158817614033 , 500 . 1158817614033 , 500 . 1158817614033 , "" , "" ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { OrderState orderState0 = new OrderState ( " ) p - #T9Ln" , " | < EiV" , " | < EiV" , ( String ) null , 8 . 796307208177932 , ( - 1 . 0 ) , 8 . 796307208177932 , " ) p - #T9Ln" , " ) p - #T9Ln" ) ; boolean boolean0 = orderState0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { OrderState orderState0 = new OrderState ( ) ; OrderState orderState1 = new OrderState ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , 0 . 0 , ( - 1 . 0 ) , 0 . 0 , ( String ) null , ( String ) null ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { OrderState orderState0 = new OrderState ( ) ; OrderState orderState1 = new OrderState ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , 0 . 0 , 0 . 0 , 1291 . 8648080794296 , ( String ) null , ( String ) null ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { OrderState orderState0 = new OrderState ( ) ; orderState0 . m_status = "e5PN ] ! n`F" ; OrderState orderState1 = new OrderState ( ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { OrderState orderState0 = new OrderState ( " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , "" , 0 . 0 , 0 . 0 , 0 . 0 , "" , "" ) ; OrderState orderState1 = new OrderState ( ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { OrderState orderState0 = new OrderState ( " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , "" , 0 . 0 , 0 . 0 , 0 . 0 , "" , "" ) ; OrderState orderState1 = new OrderState ( "" , " = / vON . wd_y , KpXQ2" , "c_ { A / Ie%l1P < K ? " , "C8GET > ] 2 , ? r ( qdq > + " , 0 . 0 , 0 . 0 , 0 . 0 , ( String ) null , ( String ) null ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { OrderState orderState0 = new OrderState ( " ) p - #T9Ln" , ( String ) null , ( String ) null , " ) p - #T9Ln" , 0 . 0 , 0 . 0 , 0 . 0 , " | < EiV" , ( String ) null ) ; OrderState orderState1 = new OrderState ( ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { OrderState orderState0 = new OrderState ( " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , 0 . 0 , 0 . 0 , 0 . 0 , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" ) ; OrderState orderState1 = new OrderState ( " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , " = / vON . wd_y , KpXQ2" , 0 . 0 , 0 . 0 , 0 . 0 , "" , " = / vON . wd_y , KpXQ2" ) ; boolean boolean0 = orderState0 . equals ( ( Object ) orderState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { String string0 = AnyWrapperMsgGenerator . error ( "UffG } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String error ( Exception ex ) { return "Error - " + ex ; }
void test1 ( ) throws Throwable { AnyWrapperMsgGenerator anyWrapperMsgGenerator0 = new AnyWrapperMsgGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String connectionClosed ( ) { return "Connection Closed" ; }
void test2 ( ) throws Throwable { String string0 = AnyWrapperMsgGenerator . ioError ( ( Exception ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ioError ( Exception ex ) { return error ( ex ) ; }
void test3 ( ) throws Throwable { String string0 = AnyWrapperMsgGenerator . error ( 0 , 0 , "UffG } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String error ( Exception ex ) { return "Error - " + ex ; }
void test4 ( ) throws Throwable { String string0 = AnyWrapperMsgGenerator . connectionClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String connectionClosed ( ) { return "Connection Closed" ; }
void test0 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; boolean boolean0 = underComp0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; UnderComp underComp1 = new UnderComp ( ) ; boolean boolean0 = underComp0 . equals ( ( Object ) underComp1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = underComp0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; UnderComp underComp1 = new UnderComp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { EClientSocket eClientSocket0 = new EClientSocket ( ) ; eClientSocket0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return m_socket ! = null & & m_socket . isConnected ( ) & & ! m_socket . isClosed ( ) ; }
void test11 ( ) throws Throwable { String string0 = EClientSocket . faMsgTypeName ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String faMsgTypeName ( int faDataType ) { switch ( faDataType ) { case GROUPS : return "GROUPS" ; case PROFILES : return "PROFILES" ; case ALIASES : return "ALIASES" ; } return null ; }
void test12 ( ) throws Throwable { String string0 = EClientSocket . faMsgTypeName ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String faMsgTypeName ( int faDataType ) { switch ( faDataType ) { case GROUPS : return "GROUPS" ; case PROFILES : return "PROFILES" ; case ALIASES : return "ALIASES" ; } return null ; }
void test13 ( ) throws Throwable { String string0 = EClientSocket . faMsgTypeName ( ( - 254 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String faMsgTypeName ( int faDataType ) { switch ( faDataType ) { case GROUPS : return "GROUPS" ; case PROFILES : return "PROFILES" ; case ALIASES : return "ALIASES" ; } return null ; }
void test16 ( ) throws Throwable { EClientSocket eClientSocket0 = new EClientSocket ( ) ; eClientSocket0 . eDisconnect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) { return m_socket ! = null & & m_socket . isConnected ( ) & & ! m_socket . isClosed ( ) ; }
void test0 ( ) throws Throwable { int int0 = Util . StringCompare ( "u - XqB - [ erRPX + y" , "u - XqB - [ erRPX + y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int StringCompare ( String lhs , String rhs ) { return NormalizeString ( lhs ) . compareTo ( NormalizeString ( rhs ) ) ; }
void test1 ( ) throws Throwable { Util util0 = new Util ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { int int0 = Util . StringCompareIgnCase ( " - 1" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int StringCompareIgnCase ( String lhs , String rhs ) { return NormalizeString ( lhs ) . compareToIgnoreCase ( NormalizeString ( rhs ) ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = Util . StringIsEmpty ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean StringIsEmpty ( String str ) { return str = = null | | str . length ( ) = = 0 ; }
void test4 ( ) throws Throwable { boolean boolean0 = Util . StringIsEmpty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean StringIsEmpty ( String str ) { return str = = null | | str . length ( ) = = 0 ; }
void test5 ( ) throws Throwable { boolean boolean0 = Util . StringIsEmpty ( "u - XqB - [ erRPX + y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean StringIsEmpty ( String str ) { return str = = null | | str . length ( ) = = 0 ; }
void test6 ( ) throws Throwable { String string0 = Util . NormalizeString ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String NormalizeString ( String str ) { return str ! = null ? str : "" ; }
void test7 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; Vector < Integer > vector1 = new Vector < Integer > ( ) ; vector0 . add ( ( Object ) " [ ] " ) ; boolean boolean0 = Util . VectorEqualsUnordered ( vector0 , vector1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean VectorEqualsUnordered ( Vector lhs , Vector rhs ) { if ( lhs = = rhs ) return true ; int lhsCount = lhs = = null ? 0 : lhs . size ( ) ; int rhsCount = rhs = = null ? 0 : rhs . size ( ) ; if ( lhsCount ! = rhsCount ) return false ; if ( lhsCount = = 0 ) return true ; boolean [ ] matchedRhsElems = new boolean [ rhsCount ] ; for ( int lhsIdx = 0 ; lhsIdx < lhsCount ; + + lhsIdx ) { Object lhsElem = lhs . get ( lhsIdx ) ; int rhsIdx = 0 ; for ( ; rhsIdx < rhsCount ; + + rhsIdx ) { if ( matchedRhsElems [ rhsIdx ] ) { continue ; } if ( lhsElem . equals ( rhs . get ( rhsIdx ) ) ) { matchedRhsElems [ rhsIdx ] = true ; break ; } } if ( rhsIdx > = rhsCount ) { / / no matching elem found return false ; } } return true ; }
void test8 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; boolean boolean0 = Util . VectorEqualsUnordered ( ( Vector ) null , vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean VectorEqualsUnordered ( Vector lhs , Vector rhs ) { if ( lhs = = rhs ) return true ; int lhsCount = lhs = = null ? 0 : lhs . size ( ) ; int rhsCount = rhs = = null ? 0 : rhs . size ( ) ; if ( lhsCount ! = rhsCount ) return false ; if ( lhsCount = = 0 ) return true ; boolean [ ] matchedRhsElems = new boolean [ rhsCount ] ; for ( int lhsIdx = 0 ; lhsIdx < lhsCount ; + + lhsIdx ) { Object lhsElem = lhs . get ( lhsIdx ) ; int rhsIdx = 0 ; for ( ; rhsIdx < rhsCount ; + + rhsIdx ) { if ( matchedRhsElems [ rhsIdx ] ) { continue ; } if ( lhsElem . equals ( rhs . get ( rhsIdx ) ) ) { matchedRhsElems [ rhsIdx ] = true ; break ; } } if ( rhsIdx > = rhsCount ) { / / no matching elem found return false ; } } return true ; }
void test9 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; boolean boolean0 = Util . VectorEqualsUnordered ( vector0 , ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean VectorEqualsUnordered ( Vector lhs , Vector rhs ) { if ( lhs = = rhs ) return true ; int lhsCount = lhs = = null ? 0 : lhs . size ( ) ; int rhsCount = rhs = = null ? 0 : rhs . size ( ) ; if ( lhsCount ! = rhsCount ) return false ; if ( lhsCount = = 0 ) return true ; boolean [ ] matchedRhsElems = new boolean [ rhsCount ] ; for ( int lhsIdx = 0 ; lhsIdx < lhsCount ; + + lhsIdx ) { Object lhsElem = lhs . get ( lhsIdx ) ; int rhsIdx = 0 ; for ( ; rhsIdx < rhsCount ; + + rhsIdx ) { if ( matchedRhsElems [ rhsIdx ] ) { continue ; } if ( lhsElem . equals ( rhs . get ( rhsIdx ) ) ) { matchedRhsElems [ rhsIdx ] = true ; break ; } } if ( rhsIdx > = rhsCount ) { / / no matching elem found return false ; } } return true ; }
void test10 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; Vector < Integer > vector1 = new Vector < Integer > ( ) ; vector0 . add ( ( Object ) " [ ] " ) ; vector1 . add ( ( Integer ) 0 ) ; boolean boolean0 = Util . VectorEqualsUnordered ( vector0 , vector1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean VectorEqualsUnordered ( Vector lhs , Vector rhs ) { if ( lhs = = rhs ) return true ; int lhsCount = lhs = = null ? 0 : lhs . size ( ) ; int rhsCount = rhs = = null ? 0 : rhs . size ( ) ; if ( lhsCount ! = rhsCount ) return false ; if ( lhsCount = = 0 ) return true ; boolean [ ] matchedRhsElems = new boolean [ rhsCount ] ; for ( int lhsIdx = 0 ; lhsIdx < lhsCount ; + + lhsIdx ) { Object lhsElem = lhs . get ( lhsIdx ) ; int rhsIdx = 0 ; for ( ; rhsIdx < rhsCount ; + + rhsIdx ) { if ( matchedRhsElems [ rhsIdx ] ) { continue ; } if ( lhsElem . equals ( rhs . get ( rhsIdx ) ) ) { matchedRhsElems [ rhsIdx ] = true ; break ; } } if ( rhsIdx > = rhsCount ) { / / no matching elem found return false ; } } return true ; }
void test11 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; vector0 . add ( "" ) ; vector0 . add ( "" ) ; Vector < String > vector1 = new Vector < String > ( ( Collection < ? extends String > ) vector0 ) ; boolean boolean0 = Util . VectorEqualsUnordered ( vector1 , vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean VectorEqualsUnordered ( Vector lhs , Vector rhs ) { if ( lhs = = rhs ) return true ; int lhsCount = lhs = = null ? 0 : lhs . size ( ) ; int rhsCount = rhs = = null ? 0 : rhs . size ( ) ; if ( lhsCount ! = rhsCount ) return false ; if ( lhsCount = = 0 ) return true ; boolean [ ] matchedRhsElems = new boolean [ rhsCount ] ; for ( int lhsIdx = 0 ; lhsIdx < lhsCount ; + + lhsIdx ) { Object lhsElem = lhs . get ( lhsIdx ) ; int rhsIdx = 0 ; for ( ; rhsIdx < rhsCount ; + + rhsIdx ) { if ( matchedRhsElems [ rhsIdx ] ) { continue ; } if ( lhsElem . equals ( rhs . get ( rhsIdx ) ) ) { matchedRhsElems [ rhsIdx ] = true ; break ; } } if ( rhsIdx > = rhsCount ) { / / no matching elem found return false ; } } return true ; }
void test12 ( ) throws Throwable { String string0 = Util . IntMaxString ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String IntMaxString ( int value ) { return ( value = = Integer . MAX_VALUE ) ? "" : "" + value ; }
void test13 ( ) throws Throwable { String string0 = Util . IntMaxString ( Integer . MAX_VALUE ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String IntMaxString ( int value ) { return ( value = = Integer . MAX_VALUE ) ? "" : "" + value ; }
void test14 ( ) throws Throwable { String string0 = Util . DoubleMaxString ( ( - 1675 . 101690083464 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String DoubleMaxString ( double value ) { return ( value = = Double . MAX_VALUE ) ? "" : "" + value ; }
void test15 ( ) throws Throwable { String string0 = Util . DoubleMaxString ( 1 . 7976931348623157E308 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String DoubleMaxString ( double value ) { return ( value = = Double . MAX_VALUE ) ? "" : "" + value ; }
void test0 ( ) throws Throwable { TickType tickType0 = new TickType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = TickType . getField ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test2 ( ) throws Throwable { String string0 = TickType . getField ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test3 ( ) throws Throwable { String string0 = TickType . getField ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test4 ( ) throws Throwable { String string0 = TickType . getField ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test5 ( ) throws Throwable { String string0 = TickType . getField ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test6 ( ) throws Throwable { String string0 = TickType . getField ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test7 ( ) throws Throwable { String string0 = TickType . getField ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test8 ( ) throws Throwable { String string0 = TickType . getField ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test9 ( ) throws Throwable { String string0 = TickType . getField ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test10 ( ) throws Throwable { String string0 = TickType . getField ( 9 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test11 ( ) throws Throwable { String string0 = TickType . getField ( 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test12 ( ) throws Throwable { String string0 = TickType . getField ( 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test13 ( ) throws Throwable { String string0 = TickType . getField ( 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test14 ( ) throws Throwable { String string0 = TickType . getField ( 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test15 ( ) throws Throwable { String string0 = TickType . getField ( 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test16 ( ) throws Throwable { String string0 = TickType . getField ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test17 ( ) throws Throwable { String string0 = TickType . getField ( 16 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test18 ( ) throws Throwable { String string0 = TickType . getField ( 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test19 ( ) throws Throwable { String string0 = TickType . getField ( 18 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test20 ( ) throws Throwable { String string0 = TickType . getField ( 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test21 ( ) throws Throwable { String string0 = TickType . getField ( 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test22 ( ) throws Throwable { String string0 = TickType . getField ( 21 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test23 ( ) throws Throwable { String string0 = TickType . getField ( 22 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test24 ( ) throws Throwable { String string0 = TickType . getField ( 23 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test25 ( ) throws Throwable { String string0 = TickType . getField ( 24 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test26 ( ) throws Throwable { String string0 = TickType . getField ( 25 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test27 ( ) throws Throwable { String string0 = TickType . getField ( 26 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test28 ( ) throws Throwable { String string0 = TickType . getField ( 27 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test29 ( ) throws Throwable { String string0 = TickType . getField ( 28 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test30 ( ) throws Throwable { String string0 = TickType . getField ( 29 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test31 ( ) throws Throwable { String string0 = TickType . getField ( 30 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test32 ( ) throws Throwable { String string0 = TickType . getField ( 31 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test33 ( ) throws Throwable { String string0 = TickType . getField ( 32 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test34 ( ) throws Throwable { String string0 = TickType . getField ( 33 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test35 ( ) throws Throwable { String string0 = TickType . getField ( 34 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test36 ( ) throws Throwable { String string0 = TickType . getField ( 35 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test37 ( ) throws Throwable { String string0 = TickType . getField ( 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test38 ( ) throws Throwable { String string0 = TickType . getField ( 37 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test39 ( ) throws Throwable { String string0 = TickType . getField ( 38 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test40 ( ) throws Throwable { String string0 = TickType . getField ( 39 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test41 ( ) throws Throwable { String string0 = TickType . getField ( 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test42 ( ) throws Throwable { String string0 = TickType . getField ( 41 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test43 ( ) throws Throwable { String string0 = TickType . getField ( 42 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test44 ( ) throws Throwable { String string0 = TickType . getField ( 43 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test45 ( ) throws Throwable { String string0 = TickType . getField ( 44 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test46 ( ) throws Throwable { String string0 = TickType . getField ( 45 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test47 ( ) throws Throwable { String string0 = TickType . getField ( 46 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test48 ( ) throws Throwable { String string0 = TickType . getField ( 47 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test49 ( ) throws Throwable { String string0 = TickType . getField ( 48 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test50 ( ) throws Throwable { String string0 = TickType . getField ( 49 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test51 ( ) throws Throwable { String string0 = TickType . getField ( ( - 1483 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( int tickType ) { switch ( tickType ) { case BID_SIZE : return "bidSize" ; case BID : return "bidPrice" ; case ASK : return "askPrice" ; case ASK_SIZE : return "askSize" ; case LAST : return "lastPrice" ; case LAST_SIZE : return "lastSize" ; case HIGH : return "high" ; case LOW : return "low" ; case VOLUME : return "volume" ; case CLOSE : return "close" ; case BID_OPTION : return "bidOptComp" ; case ASK_OPTION : return "askOptComp" ; case LAST_OPTION : return "lastOptComp" ; case MODEL_OPTION : return "modelOptComp" ; case OPEN : return "open" ; case LOW_13_WEEK : return "13WeekLow" ; case HIGH_13_WEEK : return "13WeekHigh" ; case LOW_26_WEEK : return "26WeekLow" ; case HIGH_26_WEEK : return "26WeekHigh" ; case LOW_52_WEEK : return "52WeekLow" ; case HIGH_52_WEEK : return "52WeekHigh" ; case AVG_VOLUME : return "AvgVolume" ; case OPEN_INTEREST : return "OpenInterest" ; case OPTION_HISTORICAL_VOL : return "OptionHistoricalVolatility" ; case OPTION_IMPLIED_VOL : return "OptionImpliedVolatility" ; case OPTION_BID_EXCH : return "OptionBidExchStr" ; case OPTION_ASK_EXCH : return "OptionAskExchStr" ; case OPTION_CALL_OPEN_INTEREST : return "OptionCallOpenInterest" ; case OPTION_PUT_OPEN_INTEREST : return "OptionPutOpenInterest" ; case OPTION_CALL_VOLUME : return "OptionCallVolume" ; case OPTION_PUT_VOLUME : return "OptionPutVolume" ; case INDEX_FUTURE_PREMIUM : return "IndexFuturePremium" ; case BID_EXCH : return "bidExch" ; case ASK_EXCH : return "askExch" ; case AUCTION_VOLUME : return "auctionVolume" ; case AUCTION_PRICE : return "auctionPrice" ; case AUCTION_IMBALANCE : return "auctionImbalance" ; case MARK_PRICE : return "markPrice" ; case BID_EFP_COMPUTATION : return "bidEFP" ; case ASK_EFP_COMPUTATION : return "askEFP" ; case LAST_EFP_COMPUTATION : return "lastEFP" ; case OPEN_EFP_COMPUTATION : return "openEFP" ; case HIGH_EFP_COMPUTATION : return "highEFP" ; case LOW_EFP_COMPUTATION : return "lowEFP" ; case CLOSE_EFP_COMPUTATION : return "closeEFP" ; case LAST_TIMESTAMP : return "lastTimestamp" ; case SHORTABLE : return "shortable" ; case FUNDAMENTAL_RATIOS : return "fundamentals" ; case RT_VOLUME : return "RTVolume" ; case HALTED : return "halted" ; default : return "unknown" ; } }
void test0 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . nextValidId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nextValidId ( int orderId ) { return "Next Valid Order ID : " + orderId ; }
void test1 ( ) throws Throwable { ContractDetails contractDetails0 = new ContractDetails ( ) ; String string0 = EWrapperMsgGenerator . contractDetails ( 0 , contractDetails0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String contractDetails ( int reqId , ContractDetails contractDetails ) { Contract contract = contractDetails . m_summary ; String msg = "reqId = " + reqId + " = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n" + " - - - - Contract Details begin - - - - \n" + contractMsg ( contract ) + contractDetailsMsg ( contractDetails ) + " - - - - Contract Details End - - - - \n" ; return msg ; }
void test2 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . currentTime ( ( long ) 34 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String currentTime ( long time ) { return "current time = " + time + " ( " + DateFormat . getDateTimeInstance ( ) . format ( new Date ( time * 1000 ) ) + " ) " ; }
void test3 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . updateAccountTime ( "id = 34 time = 34 open = 34 . 0 high = 34 . 0 low = 34 . 0 close = 34 . 0 volume = 34 count = 34 WAP = 34 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String updateAccountTime ( String timeStamp ) { return "updateAccountTime : " + timeStamp ; }
void test4 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . updateAccountValue ( "" , "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String updateAccountValue ( String key , String value , String currency , String accountName ) { return "updateAccountValue : " + key + " " + value + " " + currency + " " + accountName ; }
void test5 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickGeneric ( 1055 , 1055 , 1055 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickGeneric ( int tickerId , int tickType , double value ) { return "id = " + tickerId + " " + TickType . getField ( tickType ) + " = " + value ; }
void test6 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . receiveFA ( ( - 1 ) , "Oa0#fSgt2 ; Sy`xC@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String receiveFA ( int faDataType , String xml ) { return FINANCIAL_ADVISOR + " " + EClientSocket . faMsgTypeName ( faDataType ) + " " + xml ; }
void test7 ( ) throws Throwable { UnderComp underComp0 = new UnderComp ( ) ; String string0 = EWrapperMsgGenerator . deltaNeutralValidation ( ( - 1489 ) , underComp0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String deltaNeutralValidation ( int reqId , UnderComp underComp ) { return "id = " + reqId + " underComp . conId = " + underComp . m_conId + " underComp . delta = " + underComp . m_delta + " underComp . price = " + underComp . m_price ; }
void test8 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . openOrderEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String openOrderEnd ( ) { return " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " ; }
void test9 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . accountDownloadEnd ( "id = 2 askPrice = 2 . 0 noAutoExecute" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String accountDownloadEnd ( String accountName ) { return "accountDownloadEnd : " + accountName ; }
void test10 ( ) throws Throwable { ContractDetails contractDetails0 = new ContractDetails ( ) ; String string0 = EWrapperMsgGenerator . bondContractDetails ( ( - 1 ) , contractDetails0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String bondContractDetails ( int reqId , ContractDetails contractDetails ) { Contract contract = contractDetails . m_summary ; String msg = "reqId = " + reqId + " = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n" + " - - - - Bond Contract Details begin - - - - \n" + "symbol = " + contract . m_symbol + "\n" + "secType = " + contract . m_secType + "\n" + "cusip = " + contractDetails . m_cusip + "\n" + "coupon = " + contractDetails . m_coupon + "\n" + "maturity = " + contractDetails . m_maturity + "\n" + "issueDate = " + contractDetails . m_issueDate + "\n" + "ratings = " + contractDetails . m_ratings + "\n" + "bondType = " + contractDetails . m_bondType + "\n" + "couponType = " + contractDetails . m_couponType + "\n" + "convertible = " + contractDetails . m_convertible + "\n" + "callable = " + contractDetails . m_callable + "\n" + "putable = " + contractDetails . m_putable + "\n" + "descAppend = " + contractDetails . m_descAppend + "\n" + "exchange = " + contract . m_exchange + "\n" + "currency = " + contract . m_currency + "\n" + "marketName = " + contractDetails . m_marketName + "\n" + "tradingClass = " + contractDetails . m_tradingClass + "\n" + "conid = " + contract . m_conId + "\n" + "minTick = " + contractDetails . m_minTick + "\n" + "orderTypes = " + contractDetails . m_orderTypes + "\n" + "validExchanges = " + contractDetails . m_validExchanges + "\n" + "nextOptionDate = " + contractDetails . m_nextOptionDate + "\n" + "nextOptionType = " + contractDetails . m_nextOptionType + "\n" + "nextOptionPartial = " + contractDetails . m_nextOptionPartial + "\n" + "notes = " + contractDetails . m_notes + "\n" + "longName = " + contractDetails . m_longName + "\n" + " - - - - Bond Contract Details End - - - - \n" ; return msg ; }
void test11 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . execDetailsEnd ( 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String execDetailsEnd ( int reqId ) { return "reqId = " + reqId + " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " ; }
void test12 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . updateMktDepthL2 ( 1794 , 1794 , "Next Valid Order ID : 1794" , 1794 , 1794 , ( double ) 1794 , 1794 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String updateMktDepthL2 ( int tickerId , int position , String marketMaker , int operation , int side , double price , int size ) { return "updateMktDepth : " + tickerId + " " + position + " " + marketMaker + " " + operation + " " + side + " " + price + " " + size ; }
void test13 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . fundamentalData ( 0 , "FA : null Oa0#fSgt2 ; Sy`xC@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String fundamentalData ( int reqId , String data ) { return "id = " + reqId + " len = " + data . length ( ) + '\n' + data ; }
void test14 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . contractDetailsEnd ( 1055 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String contractDetailsEnd ( int reqId ) { return "reqId = " + reqId + " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " ; }
void test15 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . realtimeBar ( 34 , 34 , 34 , 34 , 34 , 34 , 34 , 34 , 34 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String realtimeBar ( int reqId , long time , double open , double high , double low , double close , long volume , double wap , int count ) { return "id = " + reqId + " time = " + time + " open = " + open + " high = " + high + " low = " + low + " close = " + close + " volume = " + volume + " count = " + count + " WAP = " + wap ; }
void test17 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . orderStatus ( 1794 , "Next Valid Order ID : 1794" , 1794 , 1794 , ( double ) 1794 , 1794 , 1794 , ( double ) 1794 , 1794 , "Next Valid Order ID : 1794" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String orderStatus ( int orderId , String status , int filled , int remaining , double avgFillPrice , int permId , int parentId , double lastFillPrice , int clientId , String whyHeld ) { return "order status : orderId = " + orderId + " clientId = " + clientId + " permId = " + permId + " status = " + status + " filled = " + filled + " remaining = " + remaining + " avgFillPrice = " + avgFillPrice + " lastFillPrice = " + lastFillPrice + " parent Id = " + parentId + " whyHeld = " + whyHeld ; }
void test18 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . updateMktDepth ( 41 , 41 , 41 , 41 , 41 , 41 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String updateMktDepth ( int tickerId , int position , int operation , int side , double price , int size ) { return "updateMktDepth : " + tickerId + " " + position + " " + operation + " " + side + " " + price + " " + size ; }
void test19 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . updateNewsBulletin ( 1055 , 1055 , " status = " , " status = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String updateNewsBulletin ( int msgId , int msgType , String message , String origExchange ) { return "MsgId = " + msgId + " : : MsgType = " + msgType + " : : Origin = " + origExchange + " : : Message = " + message ; }
void test20 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . scannerParameters ( "id = - 1489 underComp . conId = 0 underComp . delta = 0 . 0 underComp . price = 0 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String scannerParameters ( String xml ) { return SCANNER_PARAMETERS + "\n" + xml ; }
void test21 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickString ( 0 , 0 , "Next Valid Order ID : 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickString ( int tickerId , int tickType , String value ) { return "id = " + tickerId + " " + TickType . getField ( tickType ) + " = " + value ; }
void test22 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickEFP ( 0 , 0 , ( double ) 0 , ( String ) null , 0 . 0 , 0 , ( String ) null , ( double ) 0 , ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickEFP ( int tickerId , int tickType , double basisPoints , String formattedBasisPoints , double impliedFuture , int holdDays , String futureExpiry , double dividendImpact , double dividendsToExpiry ) { return "id = " + tickerId + " " + TickType . getField ( tickType ) + " : basisPoints = " + basisPoints + " / " + formattedBasisPoints + " impliedFuture = " + impliedFuture + " holdDays = " + holdDays + " futureExpiry = " + futureExpiry + " dividendImpact = " + dividendImpact + " dividends to expiry = " + dividendsToExpiry ; }
void test23 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; String string0 = EWrapperMsgGenerator . updatePortfolio ( contract0 , 0 , ( double ) 0 , 0 . 0 , ( double ) 0 , 0 . 0 , ( double ) 652 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String updatePortfolio ( Contract contract , int position , double marketPrice , double marketValue , double averageCost , double unrealizedPNL , double realizedPNL , String accountName ) { String msg = "updatePortfolio : " + contractMsg ( contract ) + position + " " + marketPrice + " " + marketValue + " " + averageCost + " " + unrealizedPNL + " " + realizedPNL + " " + accountName ; return msg ; }
void test24 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . historicalData ( 1 , " { ykQ * '^p'GvcR\u0005TJ" , ( double ) 1 , ( double ) 1 , ( double ) 1 , ( double ) 1 , 1 , 1 , ( double ) 1 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String historicalData ( int reqId , String date , double open , double high , double low , double close , int volume , int count , double WAP , boolean hasGaps ) { return "id = " + reqId + " date = " + date + " open = " + open + " high = " + high + " low = " + low + " close = " + close + " volume = " + volume + " count = " + count + " WAP = " + WAP + " hasGaps = " + hasGaps ; }
void test25 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickSize ( 1055 , 1055 , 1055 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickSize ( int tickerId , int field , int size ) { return "id = " + tickerId + " " + TickType . getField ( field ) + " = " + size ; }
void test26 ( ) throws Throwable { EWrapperMsgGenerator eWrapperMsgGenerator0 = new EWrapperMsgGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String openOrderEnd ( ) { return " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " ; }
void test27 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . managedAccounts ( "Next Valid Order ID : 1794" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String managedAccounts ( String accountsList ) { return "Connected : The list of managed accounts are : [ " + accountsList + " ] " ; }
void test28 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . scannerDataEnd ( 41 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String scannerDataEnd ( int reqId ) { return "id = " + reqId + " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " ; }
void test29 ( ) throws Throwable { ContractDetails contractDetails0 = new ContractDetails ( ) ; String string0 = EWrapperMsgGenerator . scannerData ( 687 , 687 , contractDetails0 , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String scannerData ( int reqId , int rank , ContractDetails contractDetails , String distance , String benchmark , String projection , String legsStr ) { Contract contract = contractDetails . m_summary ; return "id = " + reqId + " rank = " + rank + " symbol = " + contract . m_symbol + " secType = " + contract . m_secType + " expiry = " + contract . m_expiry + " strike = " + contract . m_strike + " right = " + contract . m_right + " exchange = " + contract . m_exchange + " currency = " + contract . m_currency + " localSymbol = " + contract . m_localSymbol + " marketName = " + contractDetails . m_marketName + " tradingClass = " + contractDetails . m_tradingClass + " distance = " + distance + " benchmark = " + benchmark + " projection = " + projection + " legsStr = " + legsStr ; }
void test30 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickSnapshotEnd ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickSnapshotEnd ( int tickerId ) { return "id = " + tickerId + " = = = = = = = = = = = = = = = end = = = = = = = = = = = = = = = " ; }
void test31 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickPrice ( 2 , 2 , 2 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickPrice ( int tickerId , int field , double price , int canAutoExecute ) { return "id = " + tickerId + " " + TickType . getField ( field ) + " = " + price + " " + ( ( canAutoExecute ! = 0 ) ? " canAutoExecute" : " noAutoExecute" ) ; }
void test32 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickPrice ( 1055 , 1055 , 1055 , 1055 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickPrice ( int tickerId , int field , double price , int canAutoExecute ) { return "id = " + tickerId + " " + TickType . getField ( field ) + " = " + price + " " + ( ( canAutoExecute ! = 0 ) ? " canAutoExecute" : " noAutoExecute" ) ; }
void test33 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickOptionComputation ( ( - 1 ) , ( - 1 ) , ( double ) ( - 1 ) , ( double ) ( - 1 ) , ( double ) 1473L , ( double ) 1473L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickOptionComputation ( int tickerId , int field , double impliedVol , double delta , double modelPrice , double pvDividend ) { String toAdd = "id = " + tickerId + " " + TickType . getField ( field ) + " : vol = " + ( ( impliedVol > = 0 & & impliedVol ! = Double . MAX_VALUE ) ? Double . toString ( impliedVol ) : "N / A" ) + " delta = " + ( ( Math . abs ( delta ) < = 1 ) ? Double . toString ( delta ) : "N / A" ) ; if ( field = = TickType . MODEL_OPTION ) { toAdd + = " : modelPrice = " + ( ( modelPrice > = 0 & & modelPrice ! = Double . MAX_VALUE ) ? Double . toString ( modelPrice ) : "N / A" ) ; toAdd + = " : pvDividend = " + ( ( pvDividend > = 0 & & pvDividend ! = Double . MAX_VALUE ) ? Double . toString ( pvDividend ) : "N / A" ) ; } return toAdd ; }
void test34 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickOptionComputation ( 0 , 0 , 1 . 7976931348623157E308 , ( double ) 0 , ( double ) 0 , 1 . 7976931348623157E308 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickOptionComputation ( int tickerId , int field , double impliedVol , double delta , double modelPrice , double pvDividend ) { String toAdd = "id = " + tickerId + " " + TickType . getField ( field ) + " : vol = " + ( ( impliedVol > = 0 & & impliedVol ! = Double . MAX_VALUE ) ? Double . toString ( impliedVol ) : "N / A" ) + " delta = " + ( ( Math . abs ( delta ) < = 1 ) ? Double . toString ( delta ) : "N / A" ) ; if ( field = = TickType . MODEL_OPTION ) { toAdd + = " : modelPrice = " + ( ( modelPrice > = 0 & & modelPrice ! = Double . MAX_VALUE ) ? Double . toString ( modelPrice ) : "N / A" ) ; toAdd + = " : pvDividend = " + ( ( pvDividend > = 0 & & pvDividend ! = Double . MAX_VALUE ) ? Double . toString ( pvDividend ) : "N / A" ) ; } return toAdd ; }
void test35 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickOptionComputation ( 0 , 13 , ( double ) 13 , ( double ) 0 , ( double ) 0 , 1 . 7976931348623157E308 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickOptionComputation ( int tickerId , int field , double impliedVol , double delta , double modelPrice , double pvDividend ) { String toAdd = "id = " + tickerId + " " + TickType . getField ( field ) + " : vol = " + ( ( impliedVol > = 0 & & impliedVol ! = Double . MAX_VALUE ) ? Double . toString ( impliedVol ) : "N / A" ) + " delta = " + ( ( Math . abs ( delta ) < = 1 ) ? Double . toString ( delta ) : "N / A" ) ; if ( field = = TickType . MODEL_OPTION ) { toAdd + = " : modelPrice = " + ( ( modelPrice > = 0 & & modelPrice ! = Double . MAX_VALUE ) ? Double . toString ( modelPrice ) : "N / A" ) ; toAdd + = " : pvDividend = " + ( ( pvDividend > = 0 & & pvDividend ! = Double . MAX_VALUE ) ? Double . toString ( pvDividend ) : "N / A" ) ; } return toAdd ; }
void test36 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickOptionComputation ( 2 , 13 , ( double ) 13 , ( double ) 2 , ( - 5 . 080579821457763 ) , ( - 5 . 080579821457763 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickOptionComputation ( int tickerId , int field , double impliedVol , double delta , double modelPrice , double pvDividend ) { String toAdd = "id = " + tickerId + " " + TickType . getField ( field ) + " : vol = " + ( ( impliedVol > = 0 & & impliedVol ! = Double . MAX_VALUE ) ? Double . toString ( impliedVol ) : "N / A" ) + " delta = " + ( ( Math . abs ( delta ) < = 1 ) ? Double . toString ( delta ) : "N / A" ) ; if ( field = = TickType . MODEL_OPTION ) { toAdd + = " : modelPrice = " + ( ( modelPrice > = 0 & & modelPrice ! = Double . MAX_VALUE ) ? Double . toString ( modelPrice ) : "N / A" ) ; toAdd + = " : pvDividend = " + ( ( pvDividend > = 0 & & pvDividend ! = Double . MAX_VALUE ) ? Double . toString ( pvDividend ) : "N / A" ) ; } return toAdd ; }
void test37 ( ) throws Throwable { String string0 = EWrapperMsgGenerator . tickOptionComputation ( 1 , 13 , ( double ) 13 , ( double ) 1 , 1 . 7976931348623157E308 , ( double ) 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String tickOptionComputation ( int tickerId , int field , double impliedVol , double delta , double modelPrice , double pvDividend ) { String toAdd = "id = " + tickerId + " " + TickType . getField ( field ) + " : vol = " + ( ( impliedVol > = 0 & & impliedVol ! = Double . MAX_VALUE ) ? Double . toString ( impliedVol ) : "N / A" ) + " delta = " + ( ( Math . abs ( delta ) < = 1 ) ? Double . toString ( delta ) : "N / A" ) ; if ( field = = TickType . MODEL_OPTION ) { toAdd + = " : modelPrice = " + ( ( modelPrice > = 0 & & modelPrice ! = Double . MAX_VALUE ) ? Double . toString ( modelPrice ) : "N / A" ) ; toAdd + = " : pvDividend = " + ( ( pvDividend > = 0 & & pvDividend ! = Double . MAX_VALUE ) ? Double . toString ( pvDividend ) : "N / A" ) ; } return toAdd ; }
void test38 ( ) throws Throwable { Contract contract0 = new Contract ( 1055 , " status = " , "id = 1055 unknown = 1055" , "id = 1055 unknown = 1055" , ( double ) 1055 , "id = 1055 unknown = 1055" , "id = 1055 unknown = 1055" , " status = " , "id = 1055 unknown = 1055" , "id = 1055 unknown = 1055" , ( Vector ) null , "id = 1055 unknown = 1055" , true , " status = " , "id = 1055 unknown = 1055" ) ; Order order0 = new Order ( ) ; OrderState orderState0 = new OrderState ( ( String ) null , "id = 1055 unknown = 1055" , " status = " , "O" , 1055 , Integer . MAX_VALUE , 1 . 7976931348623157E308 , ( String ) null , "id = 1055 unknown = 1055" ) ; String string0 = EWrapperMsgGenerator . openOrder ( 1055 , contract0 , order0 , orderState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String openOrder ( int orderId , Contract contract , Order order , OrderState orderState ) { String msg = "open order : orderId = " + orderId + " action = " + order . m_action + " quantity = " + order . m_totalQuantity + " symbol = " + contract . m_symbol + " exchange = " + contract . m_exchange + " secType = " + contract . m_secType + " type = " + order . m_orderType + " lmtPrice = " + order . m_lmtPrice + " auxPrice = " + order . m_auxPrice + " TIF = " + order . m_tif + " localSymbol = " + contract . m_localSymbol + " client Id = " + order . m_clientId + " parent Id = " + order . m_parentId + " permId = " + order . m_permId + " outsideRth = " + order . m_outsideRth + " hidden = " + order . m_hidden + " discretionaryAmt = " + order . m_discretionaryAmt + " triggerMethod = " + order . m_triggerMethod + " goodAfterTime = " + order . m_goodAfterTime + " goodTillDate = " + order . m_goodTillDate + " faGroup = " + order . m_faGroup + " faMethod = " + order . m_faMethod + " faPercentage = " + order . m_faPercentage + " faProfile = " + order . m_faProfile + " shortSaleSlot = " + order . m_shortSaleSlot + " designatedLocation = " + order . m_designatedLocation + " ocaGroup = " + order . m_ocaGroup + " ocaType = " + order . m_ocaType + " rule80A = " + order . m_rule80A + " allOrNone = " + order . m_allOrNone + " minQty = " + order . m_minQty + " percentOffset = " + order . m_percentOffset + " eTradeOnly = " + order . m_eTradeOnly + " firmQuoteOnly = " + order . m_firmQuoteOnly + " nbboPriceCap = " + order . m_nbboPriceCap + " auctionStrategy = " + order . m_auctionStrategy + " startingPrice = " + order . m_startingPrice + " stockRefPrice = " + order . m_stockRefPrice + " delta = " + order . m_delta + " stockRangeLower = " + order . m_stockRangeLower + " stockRangeUpper = " + order . m_stockRangeUpper + " volatility = " + order . m_volatility + " volatilityType = " + order . m_volatilityType + " deltaNeutralOrderType = " + order . m_deltaNeutralOrderType + " deltaNeutralAuxPrice = " + order . m_deltaNeutralAuxPrice + " continuousUpdate = " + order . m_continuousUpdate + " referencePriceType = " + order . m_referencePriceType + " trailStopPrice = " + order . m_trailStopPrice + " scaleInitLevelSize = " + Util . IntMaxString ( order . m_scaleInitLevelSize ) + " scaleSubsLevelSize = " + Util . IntMaxString ( order . m_scaleSubsLevelSize ) + " scalePriceIncrement = " + Util . DoubleMaxString ( order . m_scalePriceIncrement ) + " account = " + order . m_account + " settlingFirm = " + order . m_settlingFirm + " clearingAccount = " + order . m_clearingAccount + " clearingIntent = " + order . m_clearingIntent + " notHeld = " + order . m_notHeld + " whatIf = " + order . m_whatIf ; if ( "BAG" . equals ( contract . m_secType ) ) { if ( contract . m_comboLegsDescrip ! = null ) { msg + = " comboLegsDescrip = " + contract . m_comboLegsDescrip ; } if ( order . m_basisPoints ! = Double . MAX_VALUE ) { msg + = " basisPoints = " + order . m_basisPoints ; msg + = " basisPointsType = " + order . m_basisPointsType ; } } if ( contract . m_underComp ! = null ) { UnderComp underComp = contract . m_underComp ; msg + = " underComp . conId = " + underComp . m_conId + " underComp . delta = " + underComp . m_delta + " underComp . price = " + underComp . m_price ; } if ( ! Util . StringIsEmpty ( order . m_algoStrategy ) ) { msg + = " algoStrategy = " + order . m_algoStrategy ; msg + = " algoParams = { " ; if ( order . m_algoParams ! = null ) { Vector algoParams = order . m_algoParams ; for ( int i = 0 ; i < algoParams . size ( ) ; + + i ) { TagValue param = ( TagValue ) algoParams . elementAt ( i ) ; if ( i > 0 ) { msg + = " , " ; } msg + = param . m_tag + " = " + param . m_value ; } } msg + = " } " ; } String orderStateMsg = " status = " + orderState . m_status + " initMargin = " + orderState . m_initMargin + " maintMargin = " + orderState . m_maintMargin + " equityWithLoan = " + orderState . m_equityWithLoan + " commission = " + Util . DoubleMaxString ( orderState . m_commission ) + " minCommission = " + Util . DoubleMaxString ( orderState . m_minCommission ) + " maxCommission = " + Util . DoubleMaxString ( orderState . m_maxCommission ) + " commissionCurrency = " + orderState . m_commissionCurrency + " warningText = " + orderState . m_warningText ; return msg + orderStateMsg ; }
void test39 ( ) throws Throwable { Vector < TagValue > vector0 = new Vector < TagValue > ( ) ; Contract contract0 = new Contract ( 1 , "BAG" , "BAG" , "BAG" , ( double ) 1 , "BAG" , "BAG" , "BAG" , "BAG" , "BAG" , ( Vector ) vector0 , "BAG" , true , "BAG" , "BAG" ) ; contract0 . m_comboLegsDescrip = "BAG" ; Order order0 = new Order ( ) ; OrderState orderState0 = new OrderState ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , 1 . 7976931348623157E308 , 0 , Integer . MAX_VALUE , ( String ) null , ( String ) null ) ; String string0 = EWrapperMsgGenerator . openOrder ( 1 , contract0 , order0 , orderState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String openOrder ( int orderId , Contract contract , Order order , OrderState orderState ) { String msg = "open order : orderId = " + orderId + " action = " + order . m_action + " quantity = " + order . m_totalQuantity + " symbol = " + contract . m_symbol + " exchange = " + contract . m_exchange + " secType = " + contract . m_secType + " type = " + order . m_orderType + " lmtPrice = " + order . m_lmtPrice + " auxPrice = " + order . m_auxPrice + " TIF = " + order . m_tif + " localSymbol = " + contract . m_localSymbol + " client Id = " + order . m_clientId + " parent Id = " + order . m_parentId + " permId = " + order . m_permId + " outsideRth = " + order . m_outsideRth + " hidden = " + order . m_hidden + " discretionaryAmt = " + order . m_discretionaryAmt + " triggerMethod = " + order . m_triggerMethod + " goodAfterTime = " + order . m_goodAfterTime + " goodTillDate = " + order . m_goodTillDate + " faGroup = " + order . m_faGroup + " faMethod = " + order . m_faMethod + " faPercentage = " + order . m_faPercentage + " faProfile = " + order . m_faProfile + " shortSaleSlot = " + order . m_shortSaleSlot + " designatedLocation = " + order . m_designatedLocation + " ocaGroup = " + order . m_ocaGroup + " ocaType = " + order . m_ocaType + " rule80A = " + order . m_rule80A + " allOrNone = " + order . m_allOrNone + " minQty = " + order . m_minQty + " percentOffset = " + order . m_percentOffset + " eTradeOnly = " + order . m_eTradeOnly + " firmQuoteOnly = " + order . m_firmQuoteOnly + " nbboPriceCap = " + order . m_nbboPriceCap + " auctionStrategy = " + order . m_auctionStrategy + " startingPrice = " + order . m_startingPrice + " stockRefPrice = " + order . m_stockRefPrice + " delta = " + order . m_delta + " stockRangeLower = " + order . m_stockRangeLower + " stockRangeUpper = " + order . m_stockRangeUpper + " volatility = " + order . m_volatility + " volatilityType = " + order . m_volatilityType + " deltaNeutralOrderType = " + order . m_deltaNeutralOrderType + " deltaNeutralAuxPrice = " + order . m_deltaNeutralAuxPrice + " continuousUpdate = " + order . m_continuousUpdate + " referencePriceType = " + order . m_referencePriceType + " trailStopPrice = " + order . m_trailStopPrice + " scaleInitLevelSize = " + Util . IntMaxString ( order . m_scaleInitLevelSize ) + " scaleSubsLevelSize = " + Util . IntMaxString ( order . m_scaleSubsLevelSize ) + " scalePriceIncrement = " + Util . DoubleMaxString ( order . m_scalePriceIncrement ) + " account = " + order . m_account + " settlingFirm = " + order . m_settlingFirm + " clearingAccount = " + order . m_clearingAccount + " clearingIntent = " + order . m_clearingIntent + " notHeld = " + order . m_notHeld + " whatIf = " + order . m_whatIf ; if ( "BAG" . equals ( contract . m_secType ) ) { if ( contract . m_comboLegsDescrip ! = null ) { msg + = " comboLegsDescrip = " + contract . m_comboLegsDescrip ; } if ( order . m_basisPoints ! = Double . MAX_VALUE ) { msg + = " basisPoints = " + order . m_basisPoints ; msg + = " basisPointsType = " + order . m_basisPointsType ; } } if ( contract . m_underComp ! = null ) { UnderComp underComp = contract . m_underComp ; msg + = " underComp . conId = " + underComp . m_conId + " underComp . delta = " + underComp . m_delta + " underComp . price = " + underComp . m_price ; } if ( ! Util . StringIsEmpty ( order . m_algoStrategy ) ) { msg + = " algoStrategy = " + order . m_algoStrategy ; msg + = " algoParams = { " ; if ( order . m_algoParams ! = null ) { Vector algoParams = order . m_algoParams ; for ( int i = 0 ; i < algoParams . size ( ) ; + + i ) { TagValue param = ( TagValue ) algoParams . elementAt ( i ) ; if ( i > 0 ) { msg + = " , " ; } msg + = param . m_tag + " = " + param . m_value ; } } msg + = " } " ; } String orderStateMsg = " status = " + orderState . m_status + " initMargin = " + orderState . m_initMargin + " maintMargin = " + orderState . m_maintMargin + " equityWithLoan = " + orderState . m_equityWithLoan + " commission = " + Util . DoubleMaxString ( orderState . m_commission ) + " minCommission = " + Util . DoubleMaxString ( orderState . m_minCommission ) + " maxCommission = " + Util . DoubleMaxString ( orderState . m_maxCommission ) + " commissionCurrency = " + orderState . m_commissionCurrency + " warningText = " + orderState . m_warningText ; return msg + orderStateMsg ; }
void test40 ( ) throws Throwable { Vector < TagValue > vector0 = new Vector < TagValue > ( ) ; Contract contract0 = new Contract ( 12 , "BAG" , "BAG" , "BAG" , ( double ) 12 , "BAG" , "BAG" , "BAG" , "BAG" , "BAG" , ( Vector ) vector0 , "BAG" , true , "BAG" , "BAG" ) ; UnderComp underComp0 = new UnderComp ( ) ; contract0 . m_underComp = ( com . ib . client . UnderComp ) underComp0 ; Order order0 = new Order ( ) ; OrderState orderState0 = new OrderState ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , 1 . 7976931348623157E308 , 0 , Integer . MAX_VALUE , ( String ) null , ( String ) null ) ; String string0 = EWrapperMsgGenerator . openOrder ( 12 , contract0 , order0 , orderState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String openOrder ( int orderId , Contract contract , Order order , OrderState orderState ) { String msg = "open order : orderId = " + orderId + " action = " + order . m_action + " quantity = " + order . m_totalQuantity + " symbol = " + contract . m_symbol + " exchange = " + contract . m_exchange + " secType = " + contract . m_secType + " type = " + order . m_orderType + " lmtPrice = " + order . m_lmtPrice + " auxPrice = " + order . m_auxPrice + " TIF = " + order . m_tif + " localSymbol = " + contract . m_localSymbol + " client Id = " + order . m_clientId + " parent Id = " + order . m_parentId + " permId = " + order . m_permId + " outsideRth = " + order . m_outsideRth + " hidden = " + order . m_hidden + " discretionaryAmt = " + order . m_discretionaryAmt + " triggerMethod = " + order . m_triggerMethod + " goodAfterTime = " + order . m_goodAfterTime + " goodTillDate = " + order . m_goodTillDate + " faGroup = " + order . m_faGroup + " faMethod = " + order . m_faMethod + " faPercentage = " + order . m_faPercentage + " faProfile = " + order . m_faProfile + " shortSaleSlot = " + order . m_shortSaleSlot + " designatedLocation = " + order . m_designatedLocation + " ocaGroup = " + order . m_ocaGroup + " ocaType = " + order . m_ocaType + " rule80A = " + order . m_rule80A + " allOrNone = " + order . m_allOrNone + " minQty = " + order . m_minQty + " percentOffset = " + order . m_percentOffset + " eTradeOnly = " + order . m_eTradeOnly + " firmQuoteOnly = " + order . m_firmQuoteOnly + " nbboPriceCap = " + order . m_nbboPriceCap + " auctionStrategy = " + order . m_auctionStrategy + " startingPrice = " + order . m_startingPrice + " stockRefPrice = " + order . m_stockRefPrice + " delta = " + order . m_delta + " stockRangeLower = " + order . m_stockRangeLower + " stockRangeUpper = " + order . m_stockRangeUpper + " volatility = " + order . m_volatility + " volatilityType = " + order . m_volatilityType + " deltaNeutralOrderType = " + order . m_deltaNeutralOrderType + " deltaNeutralAuxPrice = " + order . m_deltaNeutralAuxPrice + " continuousUpdate = " + order . m_continuousUpdate + " referencePriceType = " + order . m_referencePriceType + " trailStopPrice = " + order . m_trailStopPrice + " scaleInitLevelSize = " + Util . IntMaxString ( order . m_scaleInitLevelSize ) + " scaleSubsLevelSize = " + Util . IntMaxString ( order . m_scaleSubsLevelSize ) + " scalePriceIncrement = " + Util . DoubleMaxString ( order . m_scalePriceIncrement ) + " account = " + order . m_account + " settlingFirm = " + order . m_settlingFirm + " clearingAccount = " + order . m_clearingAccount + " clearingIntent = " + order . m_clearingIntent + " notHeld = " + order . m_notHeld + " whatIf = " + order . m_whatIf ; if ( "BAG" . equals ( contract . m_secType ) ) { if ( contract . m_comboLegsDescrip ! = null ) { msg + = " comboLegsDescrip = " + contract . m_comboLegsDescrip ; } if ( order . m_basisPoints ! = Double . MAX_VALUE ) { msg + = " basisPoints = " + order . m_basisPoints ; msg + = " basisPointsType = " + order . m_basisPointsType ; } } if ( contract . m_underComp ! = null ) { UnderComp underComp = contract . m_underComp ; msg + = " underComp . conId = " + underComp . m_conId + " underComp . delta = " + underComp . m_delta + " underComp . price = " + underComp . m_price ; } if ( ! Util . StringIsEmpty ( order . m_algoStrategy ) ) { msg + = " algoStrategy = " + order . m_algoStrategy ; msg + = " algoParams = { " ; if ( order . m_algoParams ! = null ) { Vector algoParams = order . m_algoParams ; for ( int i = 0 ; i < algoParams . size ( ) ; + + i ) { TagValue param = ( TagValue ) algoParams . elementAt ( i ) ; if ( i > 0 ) { msg + = " , " ; } msg + = param . m_tag + " = " + param . m_value ; } } msg + = " } " ; } String orderStateMsg = " status = " + orderState . m_status + " initMargin = " + orderState . m_initMargin + " maintMargin = " + orderState . m_maintMargin + " equityWithLoan = " + orderState . m_equityWithLoan + " commission = " + Util . DoubleMaxString ( orderState . m_commission ) + " minCommission = " + Util . DoubleMaxString ( orderState . m_minCommission ) + " maxCommission = " + Util . DoubleMaxString ( orderState . m_maxCommission ) + " commissionCurrency = " + orderState . m_commissionCurrency + " warningText = " + orderState . m_warningText ; return msg + orderStateMsg ; }
void test0 ( ) throws Throwable { Execution execution0 = new Execution ( ) ; boolean boolean0 = execution0 . equals ( ( Object ) execution0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { Execution execution0 = new Execution ( ) ; boolean boolean0 = execution0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { Execution execution0 = new Execution ( 1 , 0 , "" , "" , "" , "" , "" , 1 , ( - 775 . 9541496412483 ) , ( - 1 ) , 1 , 0 , ( double ) ( - 1 ) ) ; Execution execution1 = new Execution ( ) ; boolean boolean0 = execution0 . equals ( ( Object ) execution1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; boolean boolean0 = contract0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = contract0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Vector < Object > vector0 = new Vector < Object > ( ) ; Contract contract1 = new Contract ( ( - 516 ) , "BOND" , "BOND" , "BOND" , ( double ) ( - 516 ) , "BOND" , "BOND" , "BOND" , "BOND" , ( String ) null , ( Vector ) vector0 , "BOND" , false , "BOND" , "BOND" ) ; Contract contract2 = ( Contract ) contract0 . clone ( ) ; boolean boolean0 = contract1 . equals ( ( Object ) contract2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = new Contract ( ( - 1 ) , "jOND" , "jOND" , "jOND" , ( double ) ( - 1 ) , "jOND" , "jOND" , "jOND" , "jOND" , "jOND" , ( Vector ) contract0 . m_comboLegs , ( String ) null , false , ( String ) null , "jOND" ) ; Contract contract2 = new Contract ( ( - 1 ) , "jOND" , ( String ) null , ( String ) null , ( - 1 . 0 ) , "jOND" , "jOND" , "jOND" , ( String ) null , ( String ) null , ( Vector ) contract0 . m_comboLegs , "jOND" , false , ( String ) null , ( String ) null ) ; contract1 . equals ( ( Object ) contract2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; Contract contract2 = new Contract ( 0 , ( String ) null , ( String ) null , "0FUX > AV | C `" , ( double ) 0 , ( String ) null , ( String ) null , "0FUX > AV | C `" , "0FUX > AV | C `" , ( String ) null , ( Vector ) contract0 . m_comboLegs , ( String ) null , false , ( String ) null , ( String ) null ) ; boolean boolean0 = contract2 . equals ( ( Object ) contract1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = new Contract ( 0 , ( String ) null , ( String ) null , ( String ) null , 0 . 0 , ( String ) null , " : & < jC9 . < 3Z~@eStW" , ( String ) null , ( String ) null , ( String ) null , ( Vector ) contract0 . m_comboLegs , ( String ) null , false , ( String ) null , ( String ) null ) ; contract0 . m_currency = " : & < jC9 . < 3Z~@eStW" ; Contract contract2 = ( Contract ) contract1 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = new Contract ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test11 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test12 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = new Contract ( 0 , ( String ) null , ( String ) null , ( String ) null , 0 . 0 , ( String ) null , " : & < jC9 . < 3Z~@eStW" , ( String ) null , ( String ) null , ( String ) null , ( Vector ) contract0 . m_comboLegs , ( String ) null , false , ( String ) null , ( String ) null ) ; boolean boolean0 = contract0 . equals ( ( Object ) contract1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test13 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; contract0 . m_secIdType = "BOND" ; Contract contract1 = new Contract ( ) ; Contract contract2 = ( Contract ) contract1 . clone ( ) ; boolean boolean0 = contract0 . equals ( ( Object ) contract2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; contract0 . m_secId = "'L" ; Contract contract1 = new Contract ( ) ; contract0 . equals ( ( Object ) contract1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test15 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; Contract contract0 = new Contract ( ( - 516 ) , "BOND" , "BOND" , "BOND" , ( double ) ( - 516 ) , "BOND" , "BOND" , "BOND" , "BOND" , ( String ) null , ( Vector ) vector0 , "BOND" , false , "BOND" , "BOND" ) ; Contract contract1 = ( Contract ) contract0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test16 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = new Contract ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test17 ( ) throws Throwable { Contract contract0 = new Contract ( ) ; Contract contract1 = new Contract ( ) ; UnderComp underComp0 = new UnderComp ( ) ; contract0 . m_underComp = ( com . ib . client . UnderComp ) underComp0 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { Order order0 = new Order ( ) ; boolean boolean0 = order0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { Order order0 = new Order ( ) ; Order order1 = new Order ( ) ; boolean boolean0 = order0 . equals ( ( Object ) order1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { Order order0 = new Order ( ) ; order0 . m_permId = Integer . MAX_VALUE ; Order order1 = new Order ( ) ; boolean boolean0 = order0 . equals ( ( Object ) order1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object p_other ) { if ( this = = p_other ) { return true ; } if ( p_other = = null | | ! ( p_other instanceof Contract ) ) { return false ; } Contract l_theOther = ( Contract ) p_other ; if ( m_conId ! = l_theOther . m_conId ) { return false ; } if ( Util . StringCompare ( m_secType , l_theOther . m_secType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_symbol , l_theOther . m_symbol ) ! = 0 | | Util . StringCompare ( m_exchange , l_theOther . m_exchange ) ! = 0 | | Util . StringCompare ( m_primaryExch , l_theOther . m_primaryExch ) ! = 0 | | Util . StringCompare ( m_currency , l_theOther . m_currency ) ! = 0 ) { return false ; } if ( ! Util . NormalizeString ( m_secType ) . equals ( "BOND" ) ) { if ( m_strike ! = l_theOther . m_strike ) { return false ; } if ( Util . StringCompare ( m_expiry , l_theOther . m_expiry ) ! = 0 | | Util . StringCompare ( m_right , l_theOther . m_right ) ! = 0 | | Util . StringCompare ( m_multiplier , l_theOther . m_multiplier ) ! = 0 | | Util . StringCompare ( m_localSymbol , l_theOther . m_localSymbol ) ! = 0 ) { return false ; } } if ( Util . StringCompare ( m_secIdType , l_theOther . m_secIdType ) ! = 0 ) { return false ; } if ( Util . StringCompare ( m_secId , l_theOther . m_secId ) ! = 0 ) { return false ; } / / compare combo legs if ( ! Util . VectorEqualsUnordered ( m_comboLegs , l_theOther . m_comboLegs ) ) { return false ; } if ( m_underComp ! = l_theOther . m_underComp ) { if ( m_underComp = = null | | l_theOther . m_underComp = = null ) { return false ; } if ( ! m_underComp . equals ( l_theOther . m_underComp ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; int int0 = scannerSubscription0 . averageOptionVolumeAbove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test1 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRows ( ) { return m_numberOfRows ; }
void test2 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . excludeConvertible ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test3 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . maturityDateAbove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateAbove ( ) { return m_couponRateAbove ; }
void test4 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . maturityDateBelow ( "V * x { _dWSu0rBmFfT$#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double belowPrice ( ) { return m_belowPrice ; }
void test5 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; double double0 = scannerSubscription0 . couponRateAbove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test6 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; double double0 = scannerSubscription0 . marketCapBelow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test7 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . moodyRatingBelow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapAbove ( ) { return m_marketCapAbove ; }
void test8 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateAbove ( ) { return m_couponRateAbove ; }
void test9 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . maturityDateBelow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test10 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; double double0 = scannerSubscription0 . belowPrice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test11 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . aboveVolume ( ( - 1795 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double belowPrice ( ) { return m_belowPrice ; }
void test12 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . maturityDateAbove ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double belowPrice ( ) { return m_belowPrice ; }
void test13 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . scannerSettingPairs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int averageOptionVolumeAbove ( ) { return m_averageOptionVolumeAbove ; }
void test14 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . scanCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test15 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . marketCapBelow ( 796 . 073826279912 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test16 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . stockTypeFilter ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRows ( ) { return m_numberOfRows ; }
void test17 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; double double0 = scannerSubscription0 . abovePrice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test18 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . instrument ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test19 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . scanCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test20 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . locationCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double belowPrice ( ) { return m_belowPrice ; }
void test21 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . moodyRatingAbove ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test22 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; double double0 = scannerSubscription0 . marketCapAbove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfRows ( ) { return m_numberOfRows ; }
void test23 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . abovePrice ( 1561 . 0748744037935 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test24 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . numberOfRows ( ( - 125 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test25 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . spRatingBelow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapAbove ( ) { return m_marketCapAbove ; }
void test26 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . instrument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test27 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . belowPrice ( ( double ) Integer . MAX_VALUE ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test28 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int averageOptionVolumeAbove ( ) { return m_averageOptionVolumeAbove ; }
void test29 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . locationCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test30 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . stockTypeFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test31 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . moodyRatingBelow ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test32 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . marketCapAbove ( 92 . 23299081413151 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int aboveVolume ( ) { return m_aboveVolume ; }
void test33 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; int int0 = scannerSubscription0 . aboveVolume ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test34 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . excludeConvertible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int aboveVolume ( ) { return m_aboveVolume ; }
void test35 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . moodyRatingAbove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateAbove ( ) { return m_couponRateAbove ; }
void test36 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . spRatingAbove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateBelow ( ) { return m_couponRateBelow ; }
void test37 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . spRatingAbove ( "%X_# { vd$DVRI ! b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double marketCapBelow ( ) { return m_marketCapBelow ; }
void test38 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; double double0 = scannerSubscription0 . couponRateBelow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double abovePrice ( ) { return m_abovePrice ; }
void test39 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . scannerSettingPairs ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int aboveVolume ( ) { return m_aboveVolume ; }
void test40 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; scannerSubscription0 . spRatingBelow ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int averageOptionVolumeAbove ( ) { return m_averageOptionVolumeAbove ; }
void test41 ( ) throws Throwable { ScannerSubscription scannerSubscription0 = new ScannerSubscription ( ) ; int int0 = scannerSubscription0 . numberOfRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double couponRateAbove ( ) { return m_couponRateAbove ; }
