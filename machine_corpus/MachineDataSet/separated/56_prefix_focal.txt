void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; CommentView commentView0 = new CommentView ( "6 Y" ) ; CommentController commentController0 = new CommentController ( handballModel0 , commentView0 ) ; GapContent gapContent0 = new GapContent ( 51 ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) gapContent0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . REMOVE ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0 . new DefaultDocumentEvent ( 51 , 51 , documentEvent_EventType0 ) ; commentController0 . removeUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeUpdate ( DocumentEvent e ) { updateComment ( ) ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; CommentView commentView0 = new CommentView ( "6 Y" ) ; CommentController commentController0 = new CommentController ( handballModel0 , commentView0 ) ; handballModel0 . setComment ( "6 Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { if ( comment = = null ) { comment = "" ; } return comment ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; CommentView commentView0 = new CommentView ( "6 Y" ) ; CommentController commentController0 = new CommentController ( handballModel0 , commentView0 ) ; GapContent gapContent0 = new GapContent ( 51 ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) gapContent0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . REMOVE ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0 . new DefaultDocumentEvent ( 51 , 51 , documentEvent_EventType0 ) ; commentController0 . changedUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changedUpdate ( DocumentEvent e ) { updateComment ( ) ; }
void test0 ( ) throws Throwable { JMenu jMenu0 = new JMenu ( ( Action ) null ) ; JMenuHelper . addMenuItem ( jMenu0 , "P" , ( Action ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuItem addMenuItem ( JMenu m , String s , char keyChar , Action a , ActionListener al ) { if ( s . startsWith ( " - " ) ) { m . addSeparator ( ) ; return null ; } JMenuItem menuItem = processAction ( a ) ; processMnemonic ( menuItem , s ) ; / / füge den Short - Cut hinzu if ( keyChar ! = 0 ) menuItem . setAccelerator ( KeyStroke . getKeyStroke ( keyChar , InputEvent . CTRL_MASK ) ) ; / / Actionslistener anmelden if ( al ! = null ) menuItem . addActionListener ( al ) ; / / dem Menu hinzufügen m . add ( menuItem ) ; return menuItem ; }
void test1 ( ) throws Throwable { JComboBox jComboBox0 = new JComboBox ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) null ) ; JMenuHelper . addMenuItem ( jMenu0 , "ZNqL [ A8my < vN = e" , ( ActionListener ) jComboBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuItem addMenuItem ( JMenu m , String s , char keyChar , Action a , ActionListener al ) { if ( s . startsWith ( " - " ) ) { m . addSeparator ( ) ; return null ; } JMenuItem menuItem = processAction ( a ) ; processMnemonic ( menuItem , s ) ; / / füge den Short - Cut hinzu if ( keyChar ! = 0 ) menuItem . setAccelerator ( KeyStroke . getKeyStroke ( keyChar , InputEvent . CTRL_MASK ) ) ; / / Actionslistener anmelden if ( al ! = null ) menuItem . addActionListener ( al ) ; / / dem Menu hinzufügen m . add ( menuItem ) ; return menuItem ; }
void test2 ( ) throws Throwable { JMenuHelper jMenuHelper0 = new JMenuHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { JMenuBar jMenuBar0 = new JMenuBar ( ) ; JMenu jMenu0 = JMenuHelper . addMenuBarItem ( jMenuBar0 , "" ) ; JMenuHelper . addMenuItem ( jMenu0 , "" , ' + ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuItem addMenuItem ( JMenu m , String s , char keyChar , Action a , ActionListener al ) { if ( s . startsWith ( " - " ) ) { m . addSeparator ( ) ; return null ; } JMenuItem menuItem = processAction ( a ) ; processMnemonic ( menuItem , s ) ; / / füge den Short - Cut hinzu if ( keyChar ! = 0 ) menuItem . setAccelerator ( KeyStroke . getKeyStroke ( keyChar , InputEvent . CTRL_MASK ) ) ; / / Actionslistener anmelden if ( al ! = null ) menuItem . addActionListener ( al ) ; / / dem Menu hinzufügen m . add ( menuItem ) ; return menuItem ; }
void test5 ( ) throws Throwable { JMenu jMenu0 = new JMenu ( ( Action ) null ) ; JMenuHelper . addMenuItem ( jMenu0 , " - / 7 | 3_Y | s ; Z ( " , ' : ' , ( Action ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuItem addMenuItem ( JMenu m , String s , char keyChar , Action a , ActionListener al ) { if ( s . startsWith ( " - " ) ) { m . addSeparator ( ) ; return null ; } JMenuItem menuItem = processAction ( a ) ; processMnemonic ( menuItem , s ) ; / / füge den Short - Cut hinzu if ( keyChar ! = 0 ) menuItem . setAccelerator ( KeyStroke . getKeyStroke ( keyChar , InputEvent . CTRL_MASK ) ) ; / / Actionslistener anmelden if ( al ! = null ) menuItem . addActionListener ( al ) ; / / dem Menu hinzufügen m . add ( menuItem ) ; return menuItem ; }
void test7 ( ) throws Throwable { JMenuBar jMenuBar0 = new JMenuBar ( ) ; JMenu jMenu0 = JMenuHelper . addMenuBarItem ( jMenuBar0 , "" ) ; DefaultEditorKit . InsertBreakAction defaultEditorKit_InsertBreakAction0 = new DefaultEditorKit . InsertBreakAction ( ) ; JMenuItem jMenuItem0 = JMenuHelper . addMenuItem ( jMenu0 , "" , '0' , ( Action ) defaultEditorKit_InsertBreakAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuItem addMenuItem ( JMenu m , String s , char keyChar , Action a , ActionListener al ) { if ( s . startsWith ( " - " ) ) { m . addSeparator ( ) ; return null ; } JMenuItem menuItem = processAction ( a ) ; processMnemonic ( menuItem , s ) ; / / füge den Short - Cut hinzu if ( keyChar ! = 0 ) menuItem . setAccelerator ( KeyStroke . getKeyStroke ( keyChar , InputEvent . CTRL_MASK ) ) ; / / Actionslistener anmelden if ( al ! = null ) menuItem . addActionListener ( al ) ; / / dem Menu hinzufügen m . add ( menuItem ) ; return menuItem ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; JInternalFrame . JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0 . getDesktopIcon ( ) ; MouseController mouseController0 = new MouseController ( handballModel0 , jInternalFrame0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jInternalFrame_JDesktopIcon0 , 503 , ( long ) 503 , 503 , 503 , 503 , 503 , false , 2009 , 503 , 503 ) ; mouseController0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { actualPlayer = null ; acutalMovePoint = null ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "X | ckB / XFyXA ] \"Ul ) " , true , true , true , true ) ; MouseController mouseController0 = new MouseController ( handballModel0 , jInternalFrame0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jInternalFrame0 , ( - 443 ) , ( long ) ( - 443 ) , ( - 443 ) , ( - 443 ) , 0 , 0 , true , 0 , ( - 443 ) , ( - 443 ) ) ; mouseController0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { State state = model . getState ( ) ; switch ( state ) { case INITIAL : break ; case PLACE_BALL : if ( e . getButton ( ) = = MouseEvent . BUTTON1 ) { Offender ballOwner = model . getNearestOffender ( e . getX ( ) , e . getY ( ) ) ; model . setFirstBallOwner ( ballOwner ) ; } break ; case PLACE_OFFENDERS : if ( e . getButton ( ) = = MouseEvent . BUTTON1 ) { / / linker Mausknopf if ( isInsideSixMeter ( e ) ) { insideSixmeterMessage ( playerInSixMeter ) ; return ; } else model . addOffender ( e . getX ( ) , e . getY ( ) ) ; } else if ( e . getButton ( ) = = MouseEvent . BUTTON3 ) { / / rechter Mausknopf Player player = model . getNearestPlayer ( e . getX ( ) , e . getY ( ) ) ; if ( player instanceof Offender ) { deletePlayer ( player ) ; } } break ; case PLACE_DEFENDERS : if ( e . getButton ( ) = = MouseEvent . BUTTON1 ) { / / linker Mausknopf if ( isInsideSixMeter ( e ) ) { insideSixmeterMessage ( playerInSixMeter ) ; return ; } else model . addDefender ( e . getX ( ) , e . getY ( ) ) ; } else if ( e . getButton ( ) = = MouseEvent . BUTTON3 ) { / / rechter Mausknopf Player player = model . getNearestPlayer ( e . getX ( ) , e . getY ( ) ) ; if ( player instanceof Defender ) { deletePlayer ( player ) ; } } break ; case EDIT : model . setMarkedPlayer ( model . getNearestPlayer ( e . getX ( ) , e . getY ( ) ) ) ; break ; case EDIT_EVENT : MoveEvent event = model . getActualMoveEvent ( ) ; / / PassEvent if ( event instanceof PassEvent ) { PassEvent pass = ( PassEvent ) event ; if ( ! event . isDestinationPointSet ( ) ) { if ( Main . getField ( ) . insideGoal ( e . getX ( ) , e . getY ( ) ) ) { pass . setGoalPass ( true ) ; } else { Player player = model . getNearestPlayer ( e . getX ( ) , e . getY ( ) ) ; if ( player ! = null & & player instanceof Offender ) { pass . setDestinationPlayer ( ( Offender ) player , false ) ; } else { pass . setDestinationPlayer ( null , false ) ; } pass . setGoalPass ( false ) ; } model . setState ( State . EDIT ) ; } } / / MoveEvent else { if ( isInsideSixMeter ( e ) & & ! event . isDestinationPointSet ( ) ) { insideSixmeterMessage ( moveInSixMeter ) ; return ; } if ( ! event . isDestinationPointSet ( ) ) { model . setDestinationPointForEvent ( event , e . getX ( ) , e . getY ( ) , false ) ; } else if ( ! event . isControlPointSet ( ) ) { model . setControlPointForEvent ( event , e . getX ( ) , e . getY ( ) , false ) ; model . setState ( State . EDIT ) ; } } break ; case ANIMATION : break ; default : break ; } }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "WinAnsiEncoding" , true , true , true ) ; MouseController mouseController0 = new MouseController ( handballModel0 , jInternalFrame0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jInternalFrame0 , ( - 1799 ) , 756L , ( - 1799 ) , ( - 1799 ) , 924 , ( - 1799 ) , true , ( - 1799 ) , 924 , ( - 1799 ) ) ; mouseController0 . mouseMoved ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseMoved ( MouseEvent e ) { checkSelectionOfFrame ( ) ; switch ( model . getState ( ) ) { case EDIT_EVENT : MoveEvent event = model . getActualMoveEvent ( ) ; if ( event instanceof PassEvent ) { / / Passereignis if ( ! event . isDestinationPointSet ( ) ) { / / innerhalb des Tores if ( Main . getField ( ) . insideGoal ( e . getX ( ) , e . getY ( ) ) ) { Point middle = Main . getField ( ) . getGoalMiddle ( ) ; model . setDestinationPointForEvent ( event , middle . x , middle . y , true ) ; } else { Player player = model . getNearestPlayer ( e . getX ( ) , e . getY ( ) ) ; if ( player ! = null & & player instanceof Offender ) { model . setDestinationPointForEvent ( event , player . getCurrent_x ( ) , player . getCurrent_y ( ) , true ) ; } else { model . setDestinationPointForEvent ( event , e . getX ( ) , e . getY ( ) , true ) ; } } } } else if ( isInsideSixMeter ( e ) & & ! event . isDestinationPointSet ( ) ) { return ; } else if ( ! event . isDestinationPointSet ( ) ) { model . setDestinationPointForEvent ( event , e . getX ( ) , e . getY ( ) , true ) ; } else if ( ! event . isControlPointSet ( ) ) { model . setControlPointForEvent ( event , e . getX ( ) , e . getY ( ) , true ) ; } break ; default : model . setHighLightedItem ( model . getNearestHighlightableItem ( e . getX ( ) , e . getY ( ) ) ) ; break ; } }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; JInternalFrame . JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0 . getDesktopIcon ( ) ; MouseController mouseController0 = new MouseController ( handballModel0 , jInternalFrame0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jInternalFrame_JDesktopIcon0 , 503 , ( long ) 503 , 503 , 503 , 503 , 503 , false , 2009 , 503 , 503 ) ; mouseController0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { acutalMovePoint = model . getNearestMovePoint ( e . getX ( ) , e . getY ( ) ) ; if ( acutalMovePoint = = null ) { actualPlayer = model . getNearestPlayer ( e . getX ( ) , e . getY ( ) ) ; } }
void test0 ( ) throws Throwable { HandballFileFilter handballFileFilter0 = new HandballFileFilter ( ) ; String string0 = handballFileFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Handball - Dateien" ; }
void test1 ( ) throws Throwable { HandballFileFilter handballFileFilter0 = new HandballFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = handballFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { return f . isDirectory ( ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_SERIALISATION ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_XML ) ; }
void test2 ( ) throws Throwable { HandballFileFilter handballFileFilter0 = new HandballFileFilter ( ) ; File file0 = new File ( " ) Anh1 < Ih + " , " ) Anh1 < Ih + " ) ; boolean boolean0 = handballFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { return f . isDirectory ( ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_SERIALISATION ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_XML ) ; }
void test3 ( ) throws Throwable { HandballFileFilter handballFileFilter0 = new HandballFileFilter ( ) ; File file0 = new File ( " . hbf" ) ; boolean boolean0 = handballFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { return f . isDirectory ( ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_SERIALISATION ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_XML ) ; }
void test4 ( ) throws Throwable { HandballFileFilter handballFileFilter0 = new HandballFileFilter ( ) ; File file0 = new File ( " . xml" , " . xml" ) ; boolean boolean0 = handballFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { return f . isDirectory ( ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_SERIALISATION ) | | f . getName ( ) . toLowerCase ( ) . endsWith ( EXTENSION_XML ) ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDelay ( int eventIndex , int delay ) { getEvents ( ) . get ( eventIndex ) . setDelay ( delay ) ; fireModelChanged ( ) ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrent_y ( ) { return current_y ; }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test5 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test6 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test7 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMovePointTo ( MovePoint point , int x , int y ) { actualEvent . setPoint ( point , x , y ) ; fireModelChanged ( ) ; }
void test8 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test9 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test10 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePlayer ( Player toRemove ) { if ( eventDefinedWithPlayer ( toRemove ) ) { removeEventsOfPlayer ( toRemove ) ; } if ( toRemove instanceof Offender ) { removeOffender ( ( Offender ) toRemove ) ; } else { removeDefender ( ( Defender ) toRemove ) ; } }
void test11 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBall ( ) { return hasBall ; }
void test12 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test13 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test14 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test15 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBall ( ) { return hasBall ; }
void test16 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePlayer ( Player toRemove ) { if ( eventDefinedWithPlayer ( toRemove ) ) { removeEventsOfPlayer ( toRemove ) ; } if ( toRemove instanceof Offender ) { removeOffender ( ( Offender ) toRemove ) ; } else { removeDefender ( ( Defender ) toRemove ) ; } }
void test17 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePlayer ( Player toRemove ) { if ( eventDefinedWithPlayer ( toRemove ) ) { removeEventsOfPlayer ( toRemove ) ; } if ( toRemove instanceof Offender ) { removeOffender ( ( Offender ) toRemove ) ; } else { removeDefender ( ( Defender ) toRemove ) ; } }
void test18 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test19 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setState ( State state ) { if ( state = = State . EDIT ) { if ( getActualMoveEvent ( ) = = null ) { / / Wenn leer , dann Null , sonst letztes Move Event setzen setActualMoveEvent ( getEvents ( ) . isEmpty ( ) ? null : ( getEvents ( ) . get ( getEvents ( ) . size ( ) - 1 ) ) ) ; } else { setActualMoveEvent ( getActualMoveEvent ( ) ) ; } } if ( state = = State . PLACE_DEFENDERS | | state = = State . PLACE_OFFENDERS ) { if ( getFirstBallOwner ( ) ! = null ) { setBallOwner ( getFirstBallOwner ( ) ) ; } setActualMoveEvent ( null ) ; } this . state = state ; fireModelChanged ( ) ; }
void test20 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test21 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test22 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test23 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test24 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test25 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test26 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test27 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test28 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrent_y ( ) { return current_y ; }
void test29 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test30 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test31 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test32 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcutalSequenceNr ( ) { if ( actualEvent = = null ) return 0 ; else { return actualEvent . getSequenceNr ( ) ; } }
void test33 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test34 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test35 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test36 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test37 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test38 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test39 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHighestSequenceNumber ( ) { if ( events . size ( ) = = 0 ) { return 0 ; } else { return events . last ( ) . getSequenceNr ( ) ; } }
void test40 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBallSet ( ) { return ballOwner ! = null ; }
void test41 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test42 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { if ( comment = = null ) { comment = "" ; } return comment ; }
void test43 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test44 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { if ( comment = = null ) { comment = "" ; } return comment ; }
void test45 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test46 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBall ( ) { return hasBall ; }
void test47 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test48 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void pauseAnimation ( boolean pause ) { if ( pause ) { runningAnimator . setPause ( true ) ; } else { runningAnimator . setPause ( false ) ; } }
void test49 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void pauseAnimation ( boolean pause ) { if ( pause ) { runningAnimator . setPause ( true ) ; } else { runningAnimator . setPause ( false ) ; } }
void test50 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nextAnimationStep ( ) { boolean finished = animationModel . nextStep ( ) ; if ( finished ) { if ( animationModel . isOnlyOneSequence ( ) ) { setState ( State . ANIMATION ) ; / / n�chste Sequzenz ausw�hlen ( einfaches sequentielles Anschauen des Spielzugs ) int nextSeq = ( getAcutalSequenceNr ( ) = = getHighestSequenceNumber ( ) ) ? getAcutalSequenceNr ( ) : getAcutalSequenceNr ( ) + 1 ; List < MoveEvent > nextSeqEvents = getMoveEvents ( nextSeq ) ; if ( nextSeqEvents . get ( 0 ) ! = null ) { setActualMoveEvent ( nextSeqEvents . get ( 0 ) ) ; } } else { setState ( State . FULL_ANIMATION_ENDED ) ; } } else { fireModelChanged ( ) ; } return finished ; }
void test51 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nextAnimationStep ( ) { boolean finished = animationModel . nextStep ( ) ; if ( finished ) { if ( animationModel . isOnlyOneSequence ( ) ) { setState ( State . ANIMATION ) ; / / n�chste Sequzenz ausw�hlen ( einfaches sequentielles Anschauen des Spielzugs ) int nextSeq = ( getAcutalSequenceNr ( ) = = getHighestSequenceNumber ( ) ) ? getAcutalSequenceNr ( ) : getAcutalSequenceNr ( ) + 1 ; List < MoveEvent > nextSeqEvents = getMoveEvents ( nextSeq ) ; if ( nextSeqEvents . get ( 0 ) ! = null ) { setActualMoveEvent ( nextSeqEvents . get ( 0 ) ) ; } } else { setState ( State . FULL_ANIMATION_ENDED ) ; } } else { fireModelChanged ( ) ; } return finished ; }
void test52 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarkedPlayerAddable ( ) { int seq = getAcutalSequenceNr ( ) ; return ! events . contains ( new MoveEvent ( markedPlayer , seq ) ) ; }
void test53 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test54 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcutalSequenceNr ( ) { if ( actualEvent = = null ) return 0 ; else { return actualEvent . getSequenceNr ( ) ; } }
void test55 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test56 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test57 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test58 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test59 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test60 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test61 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean passEventDefined ( int seq ) { boolean defined = false ; for ( MoveEvent event : events ) { if ( event . getSequenceNr ( ) = = seq & & event instanceof PassEvent ) { defined = true ; break ; } if ( event . getSequenceNr ( ) > seq ) { break ; } } return defined ; }
void test62 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test63 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test64 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test65 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBallSet ( ) { return ballOwner ! = null ; }
void test66 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test67 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test68 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean passEventDefined ( int seq ) { boolean defined = false ; for ( MoveEvent event : events ) { if ( event . getSequenceNr ( ) = = seq & & event instanceof PassEvent ) { defined = true ; break ; } if ( event . getSequenceNr ( ) > seq ) { break ; } } return defined ; }
void test69 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHighestSequenceNumber ( ) { if ( events . size ( ) = = 0 ) { return 0 ; } else { return events . last ( ) . getSequenceNr ( ) ; } }
void test70 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test71 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test72 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removePlayer ( Player toRemove ) { if ( eventDefinedWithPlayer ( toRemove ) ) { removeEventsOfPlayer ( toRemove ) ; } if ( toRemove instanceof Offender ) { removeOffender ( ( Offender ) toRemove ) ; } else { removeDefender ( ( Defender ) toRemove ) ; } }
void test73 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test74 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test75 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test0 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFieldColor ( Color fieldColor ) { this . fieldColor = fieldColor ; fireModelChanged ( ) ; }
void test1 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test2 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setHightlightColor ( Color hightlightColor ) { this . hightlightColor = hightlightColor ; fireModelChanged ( ) ; }
void test3 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test4 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test5 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelectedPlayerColor ( Color selectedPlayerColor ) { this . selectedPlayerColor = selectedPlayerColor ; fireModelChanged ( ) ; }
void test7 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( " - %c" ) ; Color color0 = jPasswordField0 . getForeground ( ) ; colorModel0 . setEventPointOutlineColor ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEventPointOutlineColor ( Color eventPointOutlineColor ) { this . eventPointOutlineColor = eventPointOutlineColor ; fireModelChanged ( ) ; }
void test8 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; BorderLayout borderLayout0 = new BorderLayout ( ( - 1715 ) , ( - 1715 ) ) ; JPanel jPanel0 = new JPanel ( ( LayoutManager ) borderLayout0 ) ; ColorUIResource colorUIResource0 = ( ColorUIResource ) jPanel0 . getBackground ( ) ; colorModel0 . setLineColor ( ( Color ) colorUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLineColor ( Color lineColor ) { this . lineColor = lineColor ; fireModelChanged ( ) ; }
void test9 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPassColor ( Color passColor ) { this . passColor = passColor ; fireModelChanged ( ) ; }
void test12 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEventPointFillColor ( Color eventPointFillColor ) { this . eventPointFillColor = eventPointFillColor ; fireModelChanged ( ) ; }
void test14 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( " - %c" ) ; Color color0 = jPasswordField0 . getForeground ( ) ; colorModel0 . setDefendersColor ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDefendersColor ( Color defendersColor ) { this . defendersColor = defendersColor ; fireModelChanged ( ) ; }
void test15 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOutlineBallColor ( Color outlineBallColor ) { this . outlineBallColor = outlineBallColor ; fireModelChanged ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" ) ; HandballModelReader handballModelReader0 = HandballModelReader . getInstance ( file0 ) ; InputStream inputStream0 = handballModelReader0 . getInputStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getInputStream ( ) { return inputStream ; }
void test1 ( ) throws Throwable { HandballModelReader handballModelReader0 = HandballModelReader . getInstance ( ( InputStream ) null ) ; File file0 = handballModelReader0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputFile ( ) { return inputFile ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlaceDefenderAction placeDefenderAction0 = new PlaceDefenderAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "caret - previous - word" , ( - 1658 ) , "caret - previous - word" ) ; placeDefenderAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; DeleteEventAction deleteEventAction0 = new DeleteEventAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; Defender defender0 = new Defender ( ( - 1940 ) , ( - 1940 ) ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) defender0 , ( - 1940 ) , 1 ) ; handballModel0 . addMoveEvent ( moveEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMoveName ( ) { return moveName ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewMoveEventAction newMoveEventAction0 = new NewMoveEventAction ( handballModel0 ) ; Integer integer0 = JLayeredPane . PALETTE_LAYER ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) integer0 , ( int ) integer0 , "O15tf`zR } \"% < 5 ; k`" ) ; newMoveEventAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewMoveEventAction newMoveEventAction0 = new NewMoveEventAction ( handballModel0 ) ; Offender offender0 = new Offender ( 0 , 0 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , 1 , 1 ) ; handballModel0 . setActualMoveEvent ( moveEvent0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Unknown keyCode : 0x0" , 1 , "Unknown keyCode : 0x0" ) ; moveEvent0 . setSequenceNr ( 0 ) ; newMoveEventAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarkedPlayerAddable ( ) { int seq = getAcutalSequenceNr ( ) ; return ! events . contains ( new MoveEvent ( markedPlayer , seq ) ) ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewMoveEventAction newMoveEventAction0 = new NewMoveEventAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewMoveEventAction newMoveEventAction0 = new NewMoveEventAction ( handballModel0 ) ; Offender offender0 = new Offender ( 0 , 0 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , 1 , 1 ) ; handballModel0 . setActualMoveEvent ( moveEvent0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Unknown keyCode : 0x0" , 1 , "Unknown keyCode : 0x0" ) ; newMoveEventAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarkedPlayerAddable ( ) { int seq = getAcutalSequenceNr ( ) ; return ! events . contains ( new MoveEvent ( markedPlayer , seq ) ) ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; CreateMovePdfAction createMovePdfAction0 = new CreateMovePdfAction ( handballModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateMovePdfAction ( HandballModel model ) { super ( Resources . getString ( "CreateMovePdfAction . name" ) , Main . createImageIcon ( "images / pdf_export . gif" , / / $NON - NLS - 1$ / / $NON - NLS - 2$ "Pdf" ) , model ) ; / / $NON - NLS - 1$ putValue ( AbstractAction . SHORT_DESCRIPTION , Resources . getString ( "CreateMovePdfAction . description" ) ) ; / / $NON - NLS - 1$ }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PrintActualSequenzAction printActualSequenzAction0 = new PrintActualSequenzAction ( handballModel0 ) ; Book book0 = new Book ( ) ; PageFormat pageFormat0 = new PageFormat ( ) ; printActualSequenzAction0 . fillBook ( book0 , pageFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void fillBook ( Book book , PageFormat format ) ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; AnimationModusAction animationModusAction0 = new AnimationModusAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "fieldDrawer . field" , 598 , "fieldDrawer . field" , ( long ) 598 , 598 ) ; animationModusAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlaceOffenderAction placeOffenderAction0 = new PlaceOffenderAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "caret - previous - word" , ( - 1658 ) , "caret - previous - word" ) ; placeOffenderAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { new ColorSettingsDialog ( ) ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StartOneSequenceAnimationAction startOneSequenceAnimationAction0 = new StartOneSequenceAnimationAction ( handballModel0 ) ; handballModel0 . stopAnimation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMoveName ( ) { return moveName ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; HandballModel . State handballModel_State0 = HandballModel . State . FULL_ANIMATION_ENDED ; handballModel0 . setState ( handballModel_State0 ) ; StartOneSequenceAnimationAction startOneSequenceAnimationAction0 = new StartOneSequenceAnimationAction ( handballModel0 ) ; startOneSequenceAnimationAction0 . modelChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modelChanged ( ) { if ( model ! = null & & view ! = null ) { if ( ! model . getComment ( ) . equals ( view . getCommentText ( ) ) ) { view . setCommentText ( model . getComment ( ) ) ; } } }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StartOneSequenceAnimationAction startOneSequenceAnimationAction0 = new StartOneSequenceAnimationAction ( handballModel0 ) ; startOneSequenceAnimationAction0 . modelChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modelChanged ( ) { if ( model ! = null & & view ! = null ) { if ( ! model . getComment ( ) . equals ( view . getCommentText ( ) ) ) { view . setCommentText ( model . getComment ( ) ) ; } } }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PrintMoveAction printMoveAction0 = new PrintMoveAction ( handballModel0 ) ; Book book0 = new Book ( ) ; PageFormat pageFormat0 = new PageFormat ( ) ; printMoveAction0 . fillBook ( book0 , pageFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void fillBook ( Book book , PageFormat format ) ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewPassEventAction newPassEventAction0 = new NewPassEventAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "top" , ( - 15 ) , "top" , ( long ) ( - 15 ) , ( - 15 ) ) ; newPassEventAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { new ColorSettingsDialog ( ) ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; Offender offender0 = new Offender ( ( - 243 ) , ( - 243 ) ) ; NewPassEventAction newPassEventAction0 = new NewPassEventAction ( handballModel0 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , ( - 243 ) ) ; handballModel0 . addMoveEvent ( moveEvent0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "standard" , ( - 243 ) , "standard" , ( - 243 ) ) ; newPassEventAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHighestSequenceNumber ( ) { if ( events . size ( ) = = 0 ) { return 0 ; } else { return events . last ( ) . getSequenceNr ( ) ; } }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewPassEventAction newPassEventAction0 = new NewPassEventAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; Offender offender0 = new Offender ( ( - 243 ) , ( - 243 ) ) ; NewPassEventAction newPassEventAction0 = new NewPassEventAction ( handballModel0 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , ( - 243 ) ) ; handballModel0 . addMoveEvent ( moveEvent0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; handballModel0 . setBallOwnerSilent ( offender0 ) ; newPassEventAction0 . modelChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modelChanged ( ) { if ( model ! = null & & view ! = null ) { if ( ! model . getComment ( ) . equals ( view . getCommentText ( ) ) ) { view . setCommentText ( model . getComment ( ) ) ; } } }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; Offender offender0 = new Offender ( ( - 243 ) , ( - 243 ) ) ; NewPassEventAction newPassEventAction0 = new NewPassEventAction ( handballModel0 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , ( - 243 ) ) ; handballModel0 . addMoveEvent ( moveEvent0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "standard" , ( - 243 ) , "standard" , ( - 243 ) ) ; handballModel0 . setDestinationPointForEvent ( moveEvent0 , 1 , 1 , false ) ; handballModel0 . setBallOwnerSilent ( offender0 ) ; newPassEventAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean passEventDefined ( int seq ) { boolean defined = false ; for ( MoveEvent event : events ) { if ( event . getSequenceNr ( ) = = seq & & event instanceof PassEvent ) { defined = true ; break ; } if ( event . getSequenceNr ( ) > seq ) { break ; } } return defined ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StartAnimationAction startAnimationAction0 = new StartAnimationAction ( handballModel0 ) ; handballModel0 . stopAnimation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcutalSequenceNr ( ) { if ( actualEvent = = null ) return 0 ; else { return actualEvent . getSequenceNr ( ) ; } }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; HandballModel . State handballModel_State0 = HandballModel . State . FULL_ANIMATION_ENDED ; handballModel0 . setState ( handballModel_State0 ) ; StartAnimationAction startAnimationAction0 = new StartAnimationAction ( handballModel0 ) ; startAnimationAction0 . modelChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modelChanged ( ) { if ( model ! = null & & view ! = null ) { if ( ! model . getComment ( ) . equals ( view . getCommentText ( ) ) ) { view . setCommentText ( model . getComment ( ) ) ; } } }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StartAnimationAction startAnimationAction0 = new StartAnimationAction ( handballModel0 ) ; startAnimationAction0 . modelChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modelChanged ( ) { if ( model ! = null & & view ! = null ) { if ( ! model . getComment ( ) . equals ( view . getCommentText ( ) ) ) { view . setCommentText ( model . getComment ( ) ) ; } } }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; EditModusAction editModusAction0 = new EditModusAction ( handballModel0 ) ; Defender defender0 = new Defender ( 61 , 1 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) defender0 , 0 , 61 ) ; handballModel0 . addMoveEvent ( moveEvent0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "caret - previous - word" , ( - 1658 ) , "caret - previous - word" ) ; editModusAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PauseAnimationAction pauseAnimationAction0 = new PauseAnimationAction ( handballModel0 ) ; pauseAnimationAction0 . modelChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void modelChanged ( ) { if ( model ! = null & & view ! = null ) { if ( ! model . getComment ( ) . equals ( view . getCommentText ( ) ) ) { view . setCommentText ( model . getComment ( ) ) ; } } }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StopAnimationAction stopAnimationAction0 = new StopAnimationAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) " - 1553" , 1918 , " - 1553" ) ; stopAnimationAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StopAnimationAction stopAnimationAction0 = new StopAnimationAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . ANIMATION_RUNNING ; handballModel0 . setState ( handballModel_State0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Name" , 725 , "Name" ) ; stopAnimationAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; OpenAction openAction0 = new OpenAction ( handballModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OpenAction ( HandballModel model ) { super ( model , Resources . getString ( "OpenAction . name" ) , Main . createImageIcon ( "images / load . gif" , / / $NON - NLS - 1$ / / $NON - NLS - 2$ "LOAD" ) , Resources . getString ( "OpenAction . description" ) ) ; / / $NON - NLS - 1$ / / $NON - NLS - 2$ }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlaceBallAction placeBallAction0 = new PlaceBallAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "caret - previous - word" , ( - 1819 ) , "caret - previous - word" ) ; placeBallAction0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlaceBallAction placeBallAction0 = new PlaceBallAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT_EVENT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaved ( ) { boolean changed = false ; if ( lastSavedModel ! = null ) { / / Spielzugnamen vergleichen if ( lastSavedModel . getMoveName ( ) ! = null ) { if ( getMoveName ( ) = = null | | ! lastSavedModel . getMoveName ( ) . equals ( getMoveName ( ) ) ) { return false ; } } else if ( getMoveName ( ) ! = null ) { / / alt : kein Name < - > neu : Name vorhanden return false ; } / / Ueberprüfen ob Angreifer und Verteidiger unterschiedlich / / zuerst Spielerlisten vergleichen if ( changedPlayerList ( getOffenders ( ) . toArray ( new Player [ getOffenders ( ) . size ( ) ] ) , lastSavedModel . getOffenders ( ) . toArray ( new Player [ lastSavedModel . getOffenders ( ) . size ( ) ] ) ) | | changedPlayerList ( getDefenders ( ) . toArray ( new Player [ getDefenders ( ) . size ( ) ] ) , lastSavedModel . getDefenders ( ) . toArray ( new Player [ lastSavedModel . getDefenders ( ) . size ( ) ] ) ) ) { changed = true ; } else { List < MoveEvent > newEvents = getEvents ( ) ; List < MoveEvent > oldEvents = lastSavedModel . getEvents ( ) ; if ( newEvents . size ( ) = = oldEvents . size ( ) ) { for ( int i = 0 ; i < newEvents . size ( ) ; i + + ) { if ( ! newEvents . get ( i ) . equals ( oldEvents . get ( i ) ) ) { changed = true ; break ; } } } else { changed = true ; } } if ( ! changed & & ( getFirstBallOwner ( ) ! = null | | lastSavedModel . getFirstBallOwner ( ) ! = null ) ) { changed = ( getFirstBallOwner ( ) = = null ) ^ ( lastSavedModel . getFirstBallOwner ( ) = = null ) ; if ( ! changed ) { changed = ! getFirstBallOwner ( ) . equals ( lastSavedModel . getFirstBallOwner ( ) ) ; } } / / wurde Kommentar geändert ? if ( ! changed ) { if ( comment = = null | | comment . equals ( "" ) ) { if ( lastSavedModel . getComment ( ) ! = null & & ! lastSavedModel . getComment ( ) . equals ( "" ) ) { changed = true ; } } else if ( lastSavedModel . getComment ( ) ! = null ) { if ( ! lastSavedModel . getComment ( ) . equals ( comment ) ) { changed = true ; } } } } return ! changed ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewSequenceAction newSequenceAction0 = new NewSequenceAction ( handballModel0 ) ; newSequenceAction0 . actionPerformed ( ( ActionEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { new ColorSettingsDialog ( ) ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; Offender offender0 = new Offender ( ( - 198 ) , ( - 198 ) ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , 1 , ( - 198 ) ) ; handballModel0 . setActualMoveEvent ( moveEvent0 ) ; NewSequenceAction newSequenceAction0 = new NewSequenceAction ( handballModel0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "disabledSelectedIcon" , ( - 198 ) , "disabledSelectedIcon" , ( long ) ( - 198 ) , 1 ) ; newSequenceAction0 . actionPerformed ( actionEvent0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarkedPlayerAddable ( ) { int seq = getAcutalSequenceNr ( ) ; return ! events . contains ( new MoveEvent ( markedPlayer , seq ) ) ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; NewSequenceAction newSequenceAction0 = new NewSequenceAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; Offender offender0 = new Offender ( ( - 198 ) , ( - 198 ) ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) offender0 , 1 , ( - 198 ) ) ; handballModel0 . setActualMoveEvent ( moveEvent0 ) ; NewSequenceAction newSequenceAction0 = new NewSequenceAction ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; SetMoveNameAction setMoveNameAction0 = new SetMoveNameAction ( handballModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SetMoveNameAction ( HandballModel model ) { super ( Resources . getString ( "SetMoveNameAction . name" ) , Main . createImageIcon ( / / $NON - NLS - 1$ "images / set_name . gif" , "SetName" ) ) ; / / $NON - NLS - 1$ / / $NON - NLS - 2$ putValue ( AbstractAction . SHORT_DESCRIPTION , Resources . getString ( "SetMoveNameAction . description" ) ) ; / / $NON - NLS - 1$ this . model = model ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; SaveAction saveAction0 = new SaveAction ( handballModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SaveAction ( HandballModel model ) { super ( Resources . getString ( "SaveAction . name" ) , Main . createImageIcon ( "images / save . gif" , / / $NON - NLS - 1$ / / $NON - NLS - 2$ "Add" ) ) ; / / $NON - NLS - 1$ putValue ( AbstractAction . SHORT_DESCRIPTION , Resources . getString ( "SaveAction . description" ) ) ; / / $NON - NLS - 1$ this . model = model ; }
void test0 ( ) throws Throwable { JProgressBar jProgressBar0 = new JProgressBar ( ( - 79 ) , 2045 ) ; Rectangle rectangle0 = jProgressBar0 . getVisibleRect ( ) ; Color color0 = Color . PINK ; ColoredShape coloredShape0 = new ColoredShape ( ( Shape ) rectangle0 , color0 , false , ( BasicStroke ) null ) ; Graphic graphic0 = new Graphic ( ) ; DefaultFontMapper defaultFontMapper0 = new DefaultFontMapper ( ) ; PdfGraphics2D pdfGraphics2D0 = ( PdfGraphics2D ) graphic0 . createGraphics ( 0 . 1192F , ( float ) 0 , ( FontMapper ) defaultFontMapper0 ) ; coloredShape0 . drawShape ( ( Graphics2D ) pdfGraphics2D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test1 ( ) throws Throwable { ColoredShape coloredShape0 = new ColoredShape ( ( Shape ) null , ( Color ) null , true ) ; coloredShape0 . setShape ( ( Shape ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFill ( ) { return fill ; }
void test2 ( ) throws Throwable { ColoredShape coloredShape0 = new ColoredShape ( ( Shape ) null , ( Color ) null , true ) ; Graphic graphic0 = new Graphic ( ) ; PdfGraphics2D pdfGraphics2D0 = ( PdfGraphics2D ) graphic0 . createGraphics ( 0 . 0F , 0 . 0F , true , 0 . 0F ) ; coloredShape0 . drawShape ( ( Graphics2D ) pdfGraphics2D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFill ( ) { return fill ; }
void test3 ( ) throws Throwable { ColoredShape coloredShape0 = new ColoredShape ( ( Shape ) null , ( Color ) null , true ) ; coloredShape0 . setColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFill ( ) { return fill ; }
void test4 ( ) throws Throwable { ColoredShape coloredShape0 = new ColoredShape ( ( Shape ) null , ( Color ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFill ( ) { return fill ; }
void test5 ( ) throws Throwable { ColoredShape coloredShape0 = new ColoredShape ( ( Shape ) null , ( Color ) null , true ) ; Graphic graphic0 = new Graphic ( ) ; BasicStroke basicStroke0 = new BasicStroke ( ) ; coloredShape0 . setStroke ( basicStroke0 ) ; PdfGraphics2D pdfGraphics2D0 = ( PdfGraphics2D ) graphic0 . createGraphics ( 0 . 0F , 0 . 0F , true , 0 . 0F ) ; coloredShape0 . drawShape ( ( Graphics2D ) pdfGraphics2D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFill ( ) { return fill ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; OffenderDrawer offenderDrawer0 = new OffenderDrawer ( handballModel0 , colorModel0 ) ; handballModel0 . removePlayer ( ( Player ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcutalSequenceNr ( ) { if ( actualEvent = = null ) return 0 ; else { return actualEvent . getSequenceNr ( ) ; } }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; OffenderDrawer offenderDrawer0 = new OffenderDrawer ( handballModel0 , colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; DefenderDrawer defenderDrawer0 = new DefenderDrawer ( handballModel0 , colorModel0 ) ; Defender defender0 = new Defender ( 949 , 949 ) ; defenderDrawer0 . defenderRemoved ( defender0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarked ( ) { return marked ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; handballModel0 . addDefender ( 65371 , 65371 ) ; ColorModel colorModel0 = new ColorModel ( ) ; DefenderDrawer defenderDrawer0 = new DefenderDrawer ( handballModel0 , colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; Point point0 = field0 . getGoalMiddle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; Color color0 = Color . pink ; colorModel0 . setLineColor ( color0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLineColor ( Color lineColor ) { this . lineColor = lineColor ; fireModelChanged ( ) ; }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT_EVENT ; handballModel0 . setState ( handballModel_State0 ) ; Graphic graphic0 = new Graphic ( ) ; PdfGraphics2D pdfGraphics2D0 = ( PdfGraphics2D ) graphic0 . createGraphicsShapes ( ( float ) 0 , ( float ) 0 , false , ( float ) 0 ) ; field0 . paintComponent ( ( Graphics ) pdfGraphics2D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; boolean boolean0 = field0 . insideSixMeter ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; boolean boolean0 = field0 . insideGoal ( 250 , 250 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test5 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; Graphic graphic0 = new Graphic ( ) ; DefaultFontMapper defaultFontMapper0 = new DefaultFontMapper ( ) ; PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D ( ( PdfContentByte ) graphic0 , ( - 731 . 1176F ) , ( - 731 . 1176F ) , ( FontMapper ) defaultFontMapper0 , true , true , ( - 731 . 1176F ) , ( PrinterJob ) null ) ; handballModel0 . stopAnimation ( ) ; field0 . paintComponent ( ( Graphics ) pdfPrinterGraphics2D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test6 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; Offender offender0 = new Offender ( ( - 1348 ) , ( - 1348 ) ) ; handballModel0 . setBallOwnerSilent ( offender0 ) ; ColorModel colorModel0 = new ColorModel ( ) ; Field field0 = new Field ( handballModel0 , colorModel0 ) ; Graphic graphic0 = new Graphic ( ) ; DefaultFontMapper defaultFontMapper0 = new DefaultFontMapper ( ) ; PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D ( ( PdfContentByte ) graphic0 , ( - 731 . 1176F ) , ( - 731 . 1176F ) , ( FontMapper ) defaultFontMapper0 , true , true , ( - 731 . 1176F ) , ( PrinterJob ) null ) ; field0 . paintComponent ( ( Graphics ) pdfPrinterGraphics2D0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test0 ( ) throws Throwable { EventTableCellRenderer eventTableCellRenderer0 = new EventTableCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventTableCellRenderer ( ) { super ( ) ; }
void test0 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; BallDrawer ballDrawer0 = new BallDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BallDrawer ( ColorModel colorModel ) { super ( colorModel ) ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlayerToolBar playerToolBar0 = new PlayerToolBar ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; Defender defender0 = new Defender ( ( - 12 ) , ( - 12 ) ) ; handballModel0 . setMarkedPlayer ( ( Player ) defender0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHighestSequenceNumber ( ) { if ( events . size ( ) = = 0 ) { return 0 ; } else { return events . last ( ) . getSequenceNr ( ) ; } }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlayerToolBar playerToolBar0 = new PlayerToolBar ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . PLACE_DEFENDERS ; handballModel0 . setState ( handballModel_State0 ) ; handballModel0 . removePlayer ( ( Player ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHighestSequenceNumber ( ) { if ( events . size ( ) = = 0 ) { return 0 ; } else { return events . last ( ) . getSequenceNr ( ) ; } }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlayerToolBar playerToolBar0 = new PlayerToolBar ( handballModel0 ) ; handballModel0 . stopAnimation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean passEventDefined ( int seq ) { boolean defined = false ; for ( MoveEvent event : events ) { if ( event . getSequenceNr ( ) = = seq & & event instanceof PassEvent ) { defined = true ; break ; } if ( event . getSequenceNr ( ) > seq ) { break ; } } return defined ; }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; PlayerToolBar playerToolBar0 = new PlayerToolBar ( handballModel0 ) ; handballModel0 . addListener ( ( HandballModelListener ) playerToolBar0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . PLACE_BALL ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean passEventDefined ( int seq ) { boolean defined = false ; for ( MoveEvent event : events ) { if ( event . getSequenceNr ( ) = = seq & & event instanceof PassEvent ) { defined = true ; break ; } if ( event . getSequenceNr ( ) > seq ) { break ; } } return defined ; }
void test0 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; FieldDrawer fieldDrawer0 = new FieldDrawer ( colorModel0 ) ; boolean boolean0 = fieldDrawer0 . insideGoal ( ( - 731 ) , ( - 133 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean insideGoal ( int x , int y ) { return goal . contains ( x , y ) ; }
void test1 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; FieldDrawer fieldDrawer0 = new FieldDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test2 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; FieldDrawer fieldDrawer0 = new FieldDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test4 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; FieldDrawer fieldDrawer0 = new FieldDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean insideSixMeter ( int x , int y ) { if ( linkerPfosten . distance ( x , y ) < sixMeterPixel | | rechterPfosten . distance ( x , y ) < sixMeterPixel ) { return true ; } else { return false ; } }
void test5 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; FieldDrawer fieldDrawer0 = new FieldDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean insideSixMeter ( int x , int y ) { if ( linkerPfosten . distance ( x , y ) < sixMeterPixel | | rechterPfosten . distance ( x , y ) < sixMeterPixel ) { return true ; } else { return false ; } }
void test6 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; FieldDrawer fieldDrawer0 = new FieldDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean insideSixMeter ( int x , int y ) { if ( linkerPfosten . distance ( x , y ) < sixMeterPixel | | rechterPfosten . distance ( x , y ) < sixMeterPixel ) { return true ; } else { return false ; } }
void test0 ( ) throws Throwable { EventTableCellDelayEditor eventTableCellDelayEditor0 = new EventTableCellDelayEditor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getCellEditorValue ( ) { return spinner . getValue ( ) ; }
void test0 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test1 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; HandballModel . State handballModel_State0 = HandballModel . State . PLACE_BALL ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAcutalSequenceNr ( ) { if ( actualEvent = = null ) return 0 ; else { return actualEvent . getSequenceNr ( ) ; } }
void test2 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test3 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . INITIAL ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGoalPassSet ( ) { boolean defined = false ; for ( MoveEvent event : getEvents ( ) ) { if ( event instanceof PassEvent ) { PassEvent pass = ( PassEvent ) event ; if ( pass . isGoalPass ( ) ) { defined = true ; break ; } } } return defined ; }
void test4 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . PLACE_DEFENDERS ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test5 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; Defender defender0 = new Defender ( 112 , 112 ) ; PassEvent passEvent0 = new PassEvent ( ( Player ) defender0 , 112 , 1 ) ; handballModel0 . setActualMoveEvent ( ( MoveEvent ) passEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test6 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; handballModel0 . stopAnimation ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; Defender defender0 = new Defender ( 0 , 0 ) ; PassEvent passEvent0 = new PassEvent ( ( Player ) defender0 , 0 , 0 ) ; handballModel0 . setActualMoveEvent ( ( MoveEvent ) passEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMarked ( ) { return marked ; }
void test8 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; Offender offender0 = new Offender ( ( - 1 ) , ( - 1 ) ) ; handballModel0 . setHighLightedItem ( ( HighlightableItem ) offender0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMoveName ( ) { return moveName ; }
void test9 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; Ball ball0 = handballModel0 . getBall ( ) ; handballModel0 . setHighLightedItem ( ( HighlightableItem ) ball0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBallSet ( ) { return ballOwner ! = null ; }
void test10 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; HandballModel . State handballModel_State0 = HandballModel . State . EDIT_EVENT ; handballModel0 . setState ( handballModel_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMoveName ( ) { return moveName ; }
void test11 ( ) throws Throwable { HandballModel handballModel0 = new HandballModel ( ) ; StatusBar statusBar0 = new StatusBar ( handballModel0 ) ; Defender defender0 = new Defender ( 0 , 0 ) ; MoveEvent moveEvent0 = new MoveEvent ( ( Player ) defender0 , 0 ) ; handballModel0 . setActualMoveEvent ( moveEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" State getState ( ) { return state ; }
void test0 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; EventPointDrawer eventPointDrawer0 = new EventPointDrawer ( colorModel0 ) ; Graphic graphic0 = new Graphic ( ) ; PdfGraphics2D pdfGraphics2D0 = ( PdfGraphics2D ) graphic0 . createGraphicsShapes ( 0 . 0F , 0 . 0F ) ; Ball ball0 = new Ball ( 8884 , 8884 ) ; eventPointDrawer0 . drawCircle ( ( Graphics2D ) pdfGraphics2D0 , ( Circle ) ball0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test1 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; EventPointDrawer eventPointDrawer0 = new EventPointDrawer ( colorModel0 ) ; Graphic graphic0 = new Graphic ( ) ; PdfGraphics2D pdfGraphics2D0 = ( PdfGraphics2D ) graphic0 . createGraphicsShapes ( 0 . 0F , 0 . 0F ) ; Ball ball0 = new Ball ( 8884 , 8884 ) ; ball0 . setHighlight ( true ) ; eventPointDrawer0 . drawCircle ( ( Graphics2D ) pdfGraphics2D0 , ( Circle ) ball0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String str = "" ; if ( goalPass ) { str = "Torwurf" ; } else if ( destinationPlayer = = null ) { str = "Passweg nicht definiert" ; } else { str = "Pass zu Spieler \" " + destinationPlayer + "\"" ; } return str ; }
void test0 ( ) throws Throwable { ColorModel colorModel0 = new ColorModel ( ) ; EventPointDrawer eventPointDrawer0 = new EventPointDrawer ( colorModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventPointDrawer ( ColorModel colorModel ) { super ( colorModel ) ; }
void test0 ( ) throws Throwable { CommentView commentView0 = new CommentView ( ( String ) null ) ; String string0 = commentView0 . getCommentText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommentText ( ) { return jep . getText ( ) ; }
void test1 ( ) throws Throwable { CommentView commentView0 = new CommentView ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommentText ( ) { return jep . getText ( ) ; }
void test2 ( ) throws Throwable { CommentView commentView0 = new CommentView ( ( String ) null ) ; JEditorPane jEditorPane0 = commentView0 . getEditorPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JEditorPane getEditorPane ( ) { return jep ; }
