void test1 ( ) throws Throwable { Class < ? > class0 = Class . class ; BeanBinSearcher < Object > beanBinSearcher0 = new BeanBinSearcher < Object > ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BeanBinSearcher ( ) { super ( ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = Transaction . class ; EJB3BeanBinDAO eJB3BeanBinDAO0 = new EJB3BeanBinDAO ( ) ; Transaction transaction0 = new Transaction ( ( BeanBinDAO ) eJB3BeanBinDAO0 , ( Class ) class0 ) ; transaction0 . addCommand ( ( ActiveListCommand ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNotBegun ( ) { return getCommands ( ) = = null ; }
void test1 ( ) throws Throwable { EJB3BeanBinDAO eJB3BeanBinDAO0 = new EJB3BeanBinDAO ( ) ; Class < ? > class0 = Transaction . class ; Transaction transaction0 = new Transaction ( ( BeanBinDAO ) eJB3BeanBinDAO0 , ( Class ) class0 ) ; transaction0 . begin ( ) ; RemoveEntity removeEntity0 = new RemoveEntity ( ( Object ) "DESENDING" ) ; transaction0 . addCommand ( ( ActiveListCommand ) removeEntity0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNotBegun ( ) { return getCommands ( ) = = null ; }
void test4 ( ) throws Throwable { EJB3BeanBinDAO eJB3BeanBinDAO0 = new EJB3BeanBinDAO ( ) ; Class < ? > class0 = Transaction . class ; Transaction transaction0 = new Transaction ( ( BeanBinDAO ) eJB3BeanBinDAO0 , ( Class ) class0 ) ; transaction0 . begin ( ) ; boolean boolean0 = transaction0 . hasNotBegun ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNotBegun ( ) { return getCommands ( ) = = null ; }
void test5 ( ) throws Throwable { EJB3BeanBinDAO eJB3BeanBinDAO0 = new EJB3BeanBinDAO ( ) ; Class < ? > class0 = Transaction . class ; Transaction transaction0 = new Transaction ( ( BeanBinDAO ) eJB3BeanBinDAO0 , ( Class ) class0 ) ; boolean boolean0 = transaction0 . hasNotBegun ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNotBegun ( ) { return getCommands ( ) = = null ; }
void test1 ( ) throws Throwable { Class < ? > class0 = Conditional . class ; BeanBinSearcher < Searcher < String > > beanBinSearcher0 = new BeanBinSearcher < Searcher < String > > ( class0 ) ; List < String > list0 = beanBinSearcher0 . getIndexProperties ( ) ; beanBinSearcher0 . setIndexProperties ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test0 ( ) throws Throwable { ActiveList < Serializable > activeList0 = new ActiveList < Serializable > ( ) ; Class < Object > class0 = activeList0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getClazz ( ) { return clazz ; }
void test2 ( ) throws Throwable { Class < ? > class0 = ActiveListSearcher . class ; ActiveListSearcher < Serializable > activeListSearcher0 = new ActiveListSearcher < Serializable > ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActiveListSearcher ( ) { super ( ) ; }
void test2 ( ) throws Throwable { BeanBinDAOFactory beanBinDAOFactory0 = new BeanBinDAOFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Query query0 = new Query ( ) ; SortBy sortBy0 = query0 . getSortType ( ) ; query0 . setSortBy ( "" , sortBy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test1 ( ) throws Throwable { Query query0 = new Query ( ) ; query0 . setFetchSize ( ( - 1989 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test2 ( ) throws Throwable { Query query0 = new Query ( ) ; int int0 = query0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test3 ( ) throws Throwable { SearchType searchType0 = SearchType . EQUALS ; Criteria criteria0 = new Criteria ( " bd > Za * KVxE - ] " , ( Object ) null , searchType0 ) ; Query query0 = new Query ( criteria0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test4 ( ) throws Throwable { Query query0 = new Query ( ) ; query0 . getSortByProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return position ; }
void test5 ( ) throws Throwable { Query query0 = new Query ( ) ; Conditional conditional0 = Conditional . AND ; query0 . setNextConditional ( conditional0 ) ; query0 . add ( ( Criteria ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test6 ( ) throws Throwable { SearchType searchType0 = SearchType . EQUALS ; Criteria criteria0 = new Criteria ( " bd > Za * KVxE - ] " , ( Object ) null , searchType0 ) ; Query query0 = new Query ( criteria0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean add ( E o ) { init ( ) ; return data . add ( o ) ; }
void test7 ( ) throws Throwable { SearchType searchType0 = SearchType . EQUALS ; Criteria criteria0 = new Criteria ( " bd > Za * KVxE - ] " , ( Object ) null , searchType0 ) ; Query query0 = new Query ( criteria0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof Criteria ) { return toString ( ) . equals ( obj . toString ( ) ) ; } else { return false ; } }
void test8 ( ) throws Throwable { Query query0 = new Query ( ) ; SearchType searchType0 = SearchType . GREATERTHANOREQUALTO ; Criteria criteria0 = new Criteria ( "zdrIX / vB\"mSzh'T$hHb" , ( Object ) "" , searchType0 ) ; query0 . or ( criteria0 ) ; String string0 = query0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return data . toString ( ) ; }
void test9 ( ) throws Throwable { Query query0 = new Query ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = query0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test10 ( ) throws Throwable { Query query0 = new Query ( ) ; boolean boolean0 = query0 . equals ( ( Object ) query0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFetchSize ( ) { return fetchSize ; }
void test11 ( ) throws Throwable { Query query0 = new Query ( ) ; SearchType searchType0 = SearchType . CONTAINS ; Criteria criteria0 = new Criteria ( "" , ( Object ) "DESENDING" , searchType0 ) ; query0 . and ( criteria0 ) ; query0 . or ( criteria0 ) ; int int0 = query0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return data . toString ( ) ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; SearchType searchType0 = SearchType . DOESNOTEQUAL ; Criteria criteria0 = new Criteria ( "" , object0 , searchType0 ) ; Conditional conditional0 = criteria0 . getPreviousCondition ( ) ; criteria0 . setPreviousCondition ( conditional0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test1 ( ) throws Throwable { SearchType searchType0 = SearchType . LESSTHAN ; Criteria criteria0 = new Criteria ( "i2G4^BrQI^ ; " , ( Object ) null , searchType0 ) ; int int0 = criteria0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test2 ( ) throws Throwable { SearchType searchType0 = SearchType . GREATERTHANOREQUALTO ; Criteria criteria0 = new Criteria ( "OR" , ( Object ) null , searchType0 ) ; criteria0 . setType ( searchType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Conditional getPreviousCondition ( ) { return previousCondition ; }
void test3 ( ) throws Throwable { SearchType searchType0 = SearchType . LESSTHAN ; Criteria criteria0 = new Criteria ( "i2G4^BrQI^ ; " , ( Object ) null , searchType0 ) ; criteria0 . setProperty ( "AND" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SearchType getType ( ) { return type ; }
void test4 ( ) throws Throwable { SearchType searchType0 = SearchType . LESSTHAN ; Criteria criteria0 = new Criteria ( "" , ( Object ) "AND" , searchType0 ) ; criteria0 . setTerm ( ( Object ) "OR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test5 ( ) throws Throwable { SearchType searchType0 = SearchType . GREATERTHANOREQUALTO ; Criteria criteria0 = new Criteria ( "" , ( Object ) "" , searchType0 ) ; Object object0 = new Object ( ) ; boolean boolean0 = criteria0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof Criteria ) { return toString ( ) . equals ( obj . toString ( ) ) ; } else { return false ; } }
void test6 ( ) throws Throwable { SearchType searchType0 = SearchType . GREATERTHANOREQUALTO ; Criteria criteria0 = new Criteria ( "" , ( Object ) "" , searchType0 ) ; boolean boolean0 = criteria0 . equals ( ( Object ) criteria0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return data . toString ( ) ; }
void test0 ( ) throws Throwable { Property property0 = new Property ( "" , "" ) ; String string0 = property0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { Property property0 = new Property ( "" , "" ) ; property0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test2 ( ) throws Throwable { Property property0 = new Property ( "" , "" ) ; String string0 = property0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test3 ( ) throws Throwable { Property property0 = new Property ( "" , "" ) ; property0 . setName ( " | Yg < ! ; 2^S ? * Nz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { PropertyManager propertyManager0 = new PropertyManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { init ( ) ; return data . isEmpty ( ) ; }
void test0 ( ) throws Throwable { AddEntity addEntity0 = new AddEntity ( ( Object ) "" ) ; String string0 = ( String ) addEntity0 . getEntity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getEntity ( ) { return entity ; }
void test0 ( ) throws Throwable { Class < ? > class0 = RemoveAll . class ; RemoveAll removeAll0 = new RemoveAll ( class0 ) ; Class < Object > class1 = removeAll0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAnnotation ( ) { return annotation ; }
void test0 ( ) throws Throwable { RemoveEntity removeEntity0 = new RemoveEntity ( ( Object ) "" ) ; String string0 = ( String ) removeEntity0 . getEntity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getEntity ( ) { return entity ; }
void test0 ( ) throws Throwable { ReflectionShelf reflectionShelf0 = ReflectionShelf . getInstance ( ) ; SearchType searchType0 = SearchType . LESSTHANOREQUALTO ; Criteria criteria0 = new Criteria ( "" , ( Object ) "OR" , searchType0 ) ; Query query0 = new Query ( criteria0 ) ; Object object0 = reflectionShelf0 . get ( query0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E get ( int index ) { init ( ) ; if ( getQuery ( ) . getFetchSize ( ) ! = - 1 & & index > = ( getQuery ( ) . getPosition ( ) + getQuery ( ) . getFetchSize ( ) ) ) { getQuery ( ) . setPosition ( getQuery ( ) . getPosition ( ) + getQuery ( ) . getFetchSize ( ) ) ; try { data . addAll ( sendQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "ActiveList . get ( i ) : " + e . getMessage ( ) , e ) ; } } return ( E ) data . get ( index ) ; }
void test1 ( ) throws Throwable { ReflectionShelf reflectionShelf0 = ReflectionShelf . getInstance ( ) ; SearchType searchType0 = SearchType . LESSTHANOREQUALTO ; Criteria criteria0 = new Criteria ( "" , ( Object ) "OR" , searchType0 ) ; Query query0 = new Query ( criteria0 ) ; Object object0 = new Object ( ) ; reflectionShelf0 . put ( query0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return data . toString ( ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = ReflectUtils . class ; boolean boolean0 = ReflectUtils . hasAnnotation ( class0 , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAnnotation ( Class clazz , Class annoClass ) { ReflectionSearch search = new ReflectionSearch ( clazz ) ; return search . hasAnnotation ( "@" + annoClass . getName ( ) ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = ReflectUtils . class ; List < Method > list0 = ReflectUtils . getGetters ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test2 ( ) throws Throwable { ReflectUtils reflectUtils0 = new ReflectUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Class < Object > class0 = ReflectUtils . extractGenericType ( ( Type ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class extractGenericType ( Type type ) throws BeanBinException { if ( type ! = null & & type instanceof ParameterizedType ) { ParameterizedType ptype = ( ParameterizedType ) type ; Type [ ] generics = ptype . getActualTypeArguments ( ) ; if ( generics . length = = 1 & & generics [ 0 ] instanceof Class ) { return ( Class ) generics [ 0 ] ; } else if ( generics . length > 1 ) { throw new BeanBinException ( "extractGenericType does not support 2 generic parameters" ) ; } } return null ; }
void test4 ( ) throws Throwable { Class < ? > class0 = ReflectUtils . class ; Class < Object > class1 = ReflectUtils . extractGenericType ( ( Type ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class extractGenericType ( Type type ) throws BeanBinException { if ( type ! = null & & type instanceof ParameterizedType ) { ParameterizedType ptype = ( ParameterizedType ) type ; Type [ ] generics = ptype . getActualTypeArguments ( ) ; if ( generics . length = = 1 & & generics [ 0 ] instanceof Class ) { return ( Class ) generics [ 0 ] ; } else if ( generics . length > 1 ) { throw new BeanBinException ( "extractGenericType does not support 2 generic parameters" ) ; } } return null ; }
void test0 ( ) throws Throwable { Class < ? > class0 = AccessibleObject . class ; SearchType searchType0 = SearchType . DOESNOTEQUAL ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "k% } * @Y9xT : Fx5 ? Q" , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test1 ( ) throws Throwable { Class < ? > class0 = Method . class ; SearchType searchType0 = SearchType . EQUALS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "equals" , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test2 ( ) throws Throwable { Class < ? > class0 = Conditional . class ; SearchType searchType0 = SearchType . CONTAINS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "notifyAll" , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test4 ( ) throws Throwable { Class < ? > class0 = MethodReflectionCriteria . class ; SearchType searchType0 = SearchType . EQUALS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "@ * " , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test5 ( ) throws Throwable { Class < ? > class0 = MethodReflectionCriteria . class ; SearchType searchType0 = SearchType . EQUALS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "@ * " , searchType0 ) ; SearchType searchType1 = SearchType . CONTAINS ; methodReflectionCriteria0 . setType ( searchType1 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test6 ( ) throws Throwable { Class < ? > class0 = MethodReflectionCriteria . class ; SearchType searchType0 = SearchType . CONTAINS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "Y$@ / , * < BtFfz1VuyrV" , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test7 ( ) throws Throwable { Class < ? > class0 = MethodReflectionCriteria . class ; SearchType searchType0 = SearchType . CONTAINS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , " * " , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test8 ( ) throws Throwable { Class < ? > class0 = Class . class ; SearchType searchType0 = SearchType . DOESNOTEQUAL ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "@ * " , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test9 ( ) throws Throwable { Class < ? > class0 = Class . class ; SearchType searchType0 = SearchType . DOESNOTEQUAL ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , " * " , searchType0 ) ; List < Method > list0 = methodReflectionCriteria0 . getResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test0 ( ) throws Throwable { Class < ? > class0 = ReflectionSearch . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; ReflectionSearch reflectionSearch1 = reflectionSearch0 . and ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActiveList < E > and ( ) throws BeanBinException ; / * * * Insert an implicit AND * @return ActiveList * @throws BeanBinException * / ActiveList < E > or ( ) throws BeanBinException ; / * * * This is an exact match search * @param property of bean * @param searchTerm * @return ActiveList * @throws BeanBinException * / ActiveList < E > matches ( String property , Object term ) throws BeanBinException ; / * * * This is an contains search that automatically puts wild cards on both sides of the term * @param property of bean * @param searchTerm * @return ActiveList * @throws BeanBinException * / ActiveList < E > contains ( String property , Object term ) throws BeanBinException ; / * * * Greater than search on property added to internal { @link Query }
void test1 ( ) throws Throwable { Class < ? > class0 = ReflectionSearch . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; ReflectionSearch reflectionSearch1 = reflectionSearch0 . methodsThatHave ( "$GoTh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReflectionSearch methodsThatHave ( String term ) throws BeanBinException { query . add ( new MethodReflectionCriteria ( clazz , term , SearchType . EQUALS ) ) ; return this ; }
void test2 ( ) throws Throwable { Class < ? > class0 = ReflectionSearch . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; ReflectionSearch reflectionSearch1 = reflectionSearch0 . or ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActiveList < E > or ( ) throws BeanBinException ; / * * * This is an exact match search * @param property of bean * @param searchTerm * @return ActiveList * @throws BeanBinException * / ActiveList < E > matches ( String property , Object term ) throws BeanBinException ; / * * * This is an contains search that automatically puts wild cards on both sides of the term * @param property of bean * @param searchTerm * @return ActiveList * @throws BeanBinException * / ActiveList < E > contains ( String property , Object term ) throws BeanBinException ; / * * * Greater than search on property added to internal { @link Query }
void test3 ( ) throws Throwable { Class < ? > class0 = ReflectionSearch . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; ReflectionSearch reflectionSearch1 = reflectionSearch0 . methodsThatDontHave ( "$GoTh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { init ( ) ; return data . isEmpty ( ) ; }
void test4 ( ) throws Throwable { Class < ? > class0 = Method . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; boolean boolean0 = reflectionSearch0 . hasAnnotation ( "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAnnotation ( Class clazz , Class annoClass ) { ReflectionSearch search = new ReflectionSearch ( clazz ) ; return search . hasAnnotation ( "@" + annoClass . getName ( ) ) ; }
void test5 ( ) throws Throwable { Class < ? > class0 = ReflectionSearch . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; List < Method > list0 = reflectionSearch0 . getMethods ( ) ; reflectionSearch0 . intersect ( list0 , list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test6 ( ) throws Throwable { Class < ? > class0 = ReflectionSearch . class ; ReflectionSearch reflectionSearch0 = new ReflectionSearch ( class0 ) ; ReflectionSearch reflectionSearch1 = reflectionSearch0 . methodsThatDontHave ( "$GoTh" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test0 ( ) throws Throwable { Class < ? > class0 = SearchType . class ; SearchType searchType0 = SearchType . CONTAINS ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "FxCMXn ! e * %5 [ * " , searchType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasWildcard ( String term ) { return term . indexOf ( " * " ) ! = - 1 ; }
void test1 ( ) throws Throwable { Class < ? > class0 = ReflectionCriteria . class ; SearchType searchType0 = SearchType . GREATERTHAN ; MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria ( ( Class ) class0 , "@" , searchType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAnnotation ( ) { return annotation ; }
void test0 ( ) throws Throwable { Resolver resolver0 = new Resolver ( ) ; Class class0 = Resolver . class ; List < Class > list0 = ( List < Class > ) resolver0 . findImplementations ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { init ( ) ; return data . isEmpty ( ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = FileFilter . class ; GetImplementationsFromJar getImplementationsFromJar0 = new GetImplementationsFromJar ( ( Class ) class0 , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GetImplementationsFromJar ( Class parent , File jar ) { super ( parent ) ; this . jar = jar ; }
void test1 ( ) throws Throwable { Class < ? > class0 = GetImplementations . class ; File file0 = new File ( "y% ] f / 3 [ ] " , "y% ] f / 3 [ ] " ) ; GetImplementationsFromJar getImplementationsFromJar0 = new GetImplementationsFromJar ( ( Class ) class0 , file0 ) ; Class < ? > class1 = getImplementationsFromJar0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? > getParent ( ) { return parent ; }
void test0 ( ) throws Throwable { Class < ? > class0 = GetImplementationsFromDir . class ; File file0 = new File ( " . " , " . " ) ; GetImplementationsFromDir getImplementationsFromDir0 = new GetImplementationsFromDir ( ( Class ) class0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelativePath ( File file ) { String path = file . getAbsolutePath ( ) ; String dirName = this . dir . getName ( ) ; int index = path . lastIndexOf ( dirName + " / " ) ; String name = path . substring ( index ) ; return name ; }
void test1 ( ) throws Throwable { Class < ? > class0 = GetImplementationsFromDir . class ; File file0 = new File ( " . " , " . " ) ; GetImplementationsFromDir getImplementationsFromDir0 = new GetImplementationsFromDir ( ( Class ) class0 , file0 ) ; List < Class > list0 = ( List < Class > ) getImplementationsFromDir0 . getImplementations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test0 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( " * 9v : A * : 0PhL$C . . `iv" ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( " * 9v : A * : 0PhL$C . . `iv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test1 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( "" ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test2 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( "P`^'sm~w~YA6m , < BP" ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test3 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( " * " ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( "P`^'sm~w~YA6m , < BP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test4 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( " * 9v : A * : 0PhL$C . . `iv" ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( " , x ? D . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test5 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( "P`^'sm~w~YA6m , < BP" ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test6 ( ) throws Throwable { WildcardSearch wildcardSearch0 = new WildcardSearch ( "P`^'sm~w~YA6m , < BP" ) ; boolean boolean0 = wildcardSearch0 . doesMatch ( "P`^'sm~w~YA6m , < BP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doesMatch ( String value ) { if ( term . equals ( "" ) | | value . equals ( "" ) ) { return false ; } int pos = 0 ; for ( int i = 0 ; i < term . length ( ) ; + + i ) { if ( term . charAt ( i ) = = ' * ' ) { if ( i + 1 = = term . length ( ) ) { return true ; } int nextWildcard = term . indexOf ( " * " , i + 1 ) ; String subterm ; if ( nextWildcard = = - 1 ) { subterm = term . substring ( i + 1 ) ; } else { subterm = term . substring ( i + 1 , nextWildcard ) ; } pos = value . indexOf ( subterm , pos ) ; if ( pos = = - 1 ) { return false ; } } else { if ( term . charAt ( i ) ! = value . charAt ( pos + + ) ) { return false ; } } } int lastIndex = term . lastIndexOf ( " * " ) ; if ( lastIndex ! = - 1 ) { String lastTerm = term . substring ( lastIndex + 1 ) ; return value . lastIndexOf ( lastTerm ) + lastTerm . length ( ) = = value . length ( ) ; } return true ; }
void test0 ( ) throws Throwable { Index index0 = new Index ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Class < ? > class0 = IndexUtils . class ; boolean boolean0 = IndexUtils . hasSettableIndexes ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSettableIndexes ( Class clazz ) throws BeanBinException { return ! getSettableIndexSetters ( clazz ) . isEmpty ( ) ; }
void test1 ( ) throws Throwable { IndexUtils indexUtils0 = new IndexUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Class < ? > class0 = IndexUtils . class ; List < String > list0 = IndexUtils . getIndexProperties ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { init ( ) ; return data . isEmpty ( ) ; }
void test3 ( ) throws Throwable { Class < ? > class0 = IndexUtils . class ; List < String > list0 = IndexUtils . getSettableIndexProperties ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test4 ( ) throws Throwable { Class < ? > class0 = IndexUtils . class ; boolean boolean0 = IndexUtils . hasAnIndexSearch ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAnIndexSearch ( Class clazz ) throws BeanBinException { return ! getIndexGetters ( clazz ) . isEmpty ( ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = RemoveFromIndex . class ; Object object0 = new Object ( ) ; RemoveFromIndex removeFromIndex0 = new RemoveFromIndex ( ( Class ) class0 , object0 ) ; Class < Object > class1 = removeFromIndex0 . getTargetClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTargetClass ( ) { return clazz ; }
void test1 ( ) throws Throwable { Class < ? > class0 = RemoveFromIndex . class ; Object object0 = new Object ( ) ; RemoveFromIndex removeFromIndex0 = new RemoveFromIndex ( ( Class ) class0 , object0 ) ; Object object1 = removeFromIndex0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getKey ( ) { return key ; }
void test0 ( ) throws Throwable { Class < ? > class0 = IndexResult . class ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; IndexResult indexResult0 = new IndexResult ( ( Class ) class0 , "" , ( Object ) null , ( List < String > ) linkedList0 ) ; Class < Object > class1 = indexResult0 . getTargetClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTargetClass ( ) { return clazz ; }
void test1 ( ) throws Throwable { Class < ? > class0 = IndexResult . class ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; IndexResult indexResult0 = new IndexResult ( ( Class ) class0 , "" , ( Object ) null , ( List < String > ) linkedList0 ) ; List < String > list0 = indexResult0 . getValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test2 ( ) throws Throwable { Class < ? > class0 = IndexResult . class ; Object object0 = new Object ( ) ; IndexResult indexResult0 = new IndexResult ( ( Class ) class0 , "" , object0 , ( List < String > ) null ) ; String string0 = indexResult0 . getProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test3 ( ) throws Throwable { Class < ? > class0 = IndexResult . class ; Object object0 = new Object ( ) ; IndexResult indexResult0 = new IndexResult ( ( Class ) class0 , "" , object0 , ( List < String > ) null ) ; Object object1 = indexResult0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getKey ( ) { return key ; }
void test0 ( ) throws Throwable { IndexField indexField0 = new IndexField ( "o`" ) ; indexField0 . addValue ( "o`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test1 ( ) throws Throwable { IndexField indexField0 = new IndexField ( "o`" ) ; List < String > list0 = indexField0 . getValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test2 ( ) throws Throwable { IndexField indexField0 = new IndexField ( "o`" ) ; String string0 = indexField0 . getProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test0 ( ) throws Throwable { Class < ? > class0 = IndexEntry . class ; Object object0 = new Object ( ) ; IndexEntry indexEntry0 = new IndexEntry ( ( Class ) class0 , object0 ) ; List < IndexField > list0 = indexEntry0 . getFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test1 ( ) throws Throwable { Class < ? > class0 = Class . class ; IndexEntry indexEntry0 = new IndexEntry ( ( Class ) class0 , ( Object ) "" ) ; Class < Object > class1 = indexEntry0 . getTargetClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTargetClass ( ) { return clazz ; }
void test2 ( ) throws Throwable { Class < ? > class0 = Class . class ; Object object0 = new Object ( ) ; IndexEntry indexEntry0 = new IndexEntry ( ( Class ) class0 , object0 ) ; Object object1 = indexEntry0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getKey ( ) { return key ; }
void test3 ( ) throws Throwable { Class < ? > class0 = IndexField . class ; IndexEntry indexEntry0 = new IndexEntry ( ( Class ) class0 , ( Object ) null ) ; IndexField indexField0 = new IndexField ( "LlU" ) ; indexEntry0 . addField ( indexField0 ) ; IndexField indexField1 = indexEntry0 . getField ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IndexField getField ( String property ) { for ( IndexField field : fields ) { if ( field . getProperty ( ) . equals ( property ) ) { return field ; } } return null ; }
void test4 ( ) throws Throwable { Class < ? > class0 = IndexEntry . class ; Object object0 = new Object ( ) ; IndexEntry indexEntry0 = new IndexEntry ( ( Class ) class0 , object0 ) ; IndexField indexField0 = new IndexField ( "97 > h ! ; $U" ) ; indexEntry0 . addField ( indexField0 ) ; IndexField indexField1 = indexEntry0 . getField ( "97 > h ! ; $U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IndexField getField ( String property ) { for ( IndexField field : fields ) { if ( field . getProperty ( ) . equals ( property ) ) { return field ; } } return null ; }
void test0 ( ) throws Throwable { Class < ? > class0 = RemoveAllFromIndex . class ; RemoveAllFromIndex removeAllFromIndex0 = new RemoveAllFromIndex ( class0 ) ; Class < Object > class1 = removeAllFromIndex0 . getTargetClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTargetClass ( ) { return clazz ; }
void test0 ( ) throws Throwable { Class < ? > class0 = AddToCache . class ; AddToCache addToCache0 = new AddToCache ( ( Class ) class0 , ( List < Object > ) null ) ; List < Object > list0 = addToCache0 . getKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < Object > getKeys ( ) { return map . keySet ( ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = AddToCache . class ; AddToCache addToCache0 = new AddToCache ( ( Class ) class0 , ( List < Object > ) null ) ; Class < Object > class1 = addToCache0 . getTargetClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTargetClass ( ) { return clazz ; }
void test1 ( ) throws Throwable { IndexCache indexCache0 = new IndexCache ( ) ; Class < ? > class0 = Object . class ; Results results0 = new Results ( ) ; String string0 = "UkY\\u_" ; List < String > list0 = indexCache0 . getValues ( ( Class ) class0 , ( Object ) results0 , string0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > getValues ( Class clazz , String property , Object key ) throws BeanBinException ; }
void test2 ( ) throws Throwable { IndexCache indexCache0 = new IndexCache ( ) ; Class < ? > class0 = Object . class ; Results results0 = new Results ( ) ; String string0 = "UkY\\u_" ; Object object0 = new Object ( ) ; indexCache0 . add ( ( Class ) class0 , results0 ) ; List < String > list0 = indexCache0 . getValues ( ( Class ) class0 , object0 , string0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > getValues ( Class clazz , String property , Object key ) throws BeanBinException ; }
void test3 ( ) throws Throwable { IndexCache indexCache0 = new IndexCache ( ) ; Class < ? > class0 = Properties . class ; Results results0 = new Results ( ) ; indexCache0 . add ( ( Class ) class0 , results0 ) ; Properties properties0 = new Properties ( ) ; results0 . add ( ( Object ) " [ ] " , properties0 ) ; List < String > list0 = indexCache0 . getValues ( ( Class ) class0 , ( Object ) " [ ] " , " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > getValues ( Class clazz , String property , Object key ) throws BeanBinException ; }
void test4 ( ) throws Throwable { IndexCache indexCache0 = new IndexCache ( ) ; Class < ? > class0 = Object . class ; Results results0 = new Results ( ) ; IndexCache indexCache1 = new IndexCache ( ) ; indexCache1 . add ( ( Class ) class0 , results0 ) ; indexCache0 . addCache ( indexCache1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addCache ( IndexCache cache ) { for ( Class clazz : cache . getClasses ( ) ) { Results results = map . get ( clazz ) ; Results toadd = cache . get ( clazz ) ; if ( results ! = null ) { results . add ( toadd ) ; } else { map . put ( clazz , toadd ) ; } } }
void test0 ( ) throws Throwable { IndexCacheSingleton indexCacheSingleton0 = new IndexCacheSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { IndexCache indexCache0 = IndexCacheSingleton . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReflectionShelf getInstance ( ) { if ( shelf = = null ) { shelf = new ReflectionShelf ( ) ; } return shelf ; }
void test3 ( ) throws Throwable { Results results0 = new Results ( ) ; Results results1 = new Results ( ) ; Object object0 = new Object ( ) ; Properties properties0 = new Properties ( ) ; results1 . add ( object0 , properties0 ) ; results0 . add ( results1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof Criteria ) { return toString ( ) . equals ( obj . toString ( ) ) ; } else { return false ; } }
void test0 ( ) throws Throwable { Class < ? > class0 = BlobClassMaker . class ; BlobClassMaker blobClassMaker0 = new BlobClassMaker ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getMixinClass ( ) { return mixinClass ; }
void test1 ( ) throws Throwable { Class < ? > class0 = BlobClassMaker . class ; BlobClassMaker blobClassMaker0 = new BlobClassMaker ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getInterfaceClass ( ) { return interfaceClass ; }
void test0 ( ) throws Throwable { BlobClassTemplate blobClassTemplate0 = new BlobClassTemplate ( ( Object ) "hek~ thod " ) ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) blobClassTemplate0 . getInputStream ( ( Object ) " : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getInputStream ( Object blob ) throws BeanBinException { try { if ( hasInAndOutAnnotations ( blob . getClass ( ) ) ) { Method out = getOutMethod ( blob . getClass ( ) ) ; Object obj = out . invoke ( blob , new Object [ 0 ] ) ; if ( obj instanceof InputStream ) { return ( InputStream ) obj ; } else { throw new BeanBinException ( "The method " + out . getName ( ) + " needs to return an instance of InputStream if it is to be serialized and initialized explicitly . " ) ; } } else { return serialize ( blob ) ; } } catch ( Exception e ) { throw new BeanBinException ( "BlobClassTemplate . getInputStream : " + e . getMessage ( ) , e ) ; } }
void test0 ( ) throws Throwable { InstallBeanBin installBeanBin0 = new InstallBeanBin ( ) ; installBeanBin0 . setDevelopmentMode ( " ? { > qI * H : ! % ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDevelopmentMode ( String developmentMode ) { this . developmentMode = developmentMode ; }
void test1 ( ) throws Throwable { InstallBeanBin installBeanBin0 = new InstallBeanBin ( ) ; installBeanBin0 . setPropertyFile ( " ? { > qI * H : ! % ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPropertyFile ( String propertyFile ) { this . propertyFile = propertyFile ; }
void test3 ( ) throws Throwable { InstallBeanBin installBeanBin0 = new InstallBeanBin ( ) ; String string0 = installBeanBin0 . getRootDir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRootDir ( ) { return rootDir ; }
void test4 ( ) throws Throwable { InstallBeanBin installBeanBin0 = new InstallBeanBin ( ) ; installBeanBin0 . setRootDir ( " ? { > qI * H : ! % ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRootDir ( ) { return rootDir ; }
void test5 ( ) throws Throwable { InstallBeanBin installBeanBin0 = new InstallBeanBin ( ) ; String string0 = installBeanBin0 . getDevelopmentMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDevelopmentMode ( ) { return developmentMode ; }
void test6 ( ) throws Throwable { InstallBeanBin installBeanBin0 = new InstallBeanBin ( ) ; String string0 = installBeanBin0 . getPropertyFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertyFile ( ) { return propertyFile ; }
void test1 ( ) throws Throwable { Class < ? > class0 = EntityUtils . class ; List < Method > list0 = EntityUtils . getSubEntityMethods ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { try { return dao . getSize ( getClazz ( ) , getQuery ( ) ) ; } catch ( BeanBinException e ) { throw new RuntimeException ( "Invalid Query : " + e . getMessage ( ) , e ) ; } }
void test2 ( ) throws Throwable { Class < ? > class0 = EntityUtils . class ; boolean boolean0 = EntityUtils . hasBlobs ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBlobs ( Class clazz ) throws BeanBinException { return ! getBlobGetters ( clazz ) . isEmpty ( ) ; }
void test4 ( ) throws Throwable { Class < ? > class0 = EntityUtils . class ; Method method0 = EntityUtils . getMethod ( ( Class ) class0 , "get * " ) ; Method method1 = EntityUtils . getSetter ( method0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method getSetter ( Method getter ) throws BeanBinException { String setterName = getSetterName ( getter ) ; Class [ ] params = { getter . getReturnType ( ) } ; try { return getter . getDeclaringClass ( ) . getMethod ( setterName , params ) ; } catch ( NoSuchMethodException e ) { return null ; } catch ( Exception e ) { throw new BeanBinException ( "EntityUtils . getSetter : " + e . getMessage ( ) , e ) ; } }
void test5 ( ) throws Throwable { Class < ? > class0 = EntityUtils . class ; boolean boolean0 = EntityUtils . isAbstract ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAbstract ( Class clazz ) { return ReflectUtils . hasAnnotation ( clazz , Inheritance . class ) ; }
void test6 ( ) throws Throwable { EntityUtils entityUtils0 = new EntityUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { EntityManagerFactoryShelf entityManagerFactoryShelf0 = EntityManagerFactoryShelf . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActiveList < E > contains ( String property , Object term ) throws BeanBinException ; / * * * Greater than search on property added to internal { @link Query }
void test0 ( ) throws Throwable { LazyActiveList < Integer > lazyActiveList0 = new LazyActiveList < Integer > ( ) ; lazyActiveList0 . setProperty ( "vFJMpxz [ 5w1gJ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test2 ( ) throws Throwable { LazyActiveList < Object > lazyActiveList0 = new LazyActiveList < Object > ( ) ; boolean boolean0 = lazyActiveList0 . isInitialized ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialized ( ) { return initialized ; }
void test3 ( ) throws Throwable { LazyActiveList < String > lazyActiveList0 = new LazyActiveList < String > ( ) ; String string0 = lazyActiveList0 . getProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test4 ( ) throws Throwable { LazyActiveList < ActiveList < ActiveList < Integer > > > lazyActiveList0 = new LazyActiveList < ActiveList < ActiveList < Integer > > > ( ) ; lazyActiveList0 . setKey ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test5 ( ) throws Throwable { LazyActiveList < Set < Object > > lazyActiveList0 = new LazyActiveList < Set < Object > > ( ) ; Object object0 = lazyActiveList0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getKey ( ) { return key ; }
void test6 ( ) throws Throwable { LazyActiveList < String > lazyActiveList0 = new LazyActiveList < String > ( ) ; lazyActiveList0 . setInitialized ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialized ( ) { return initialized ; }
void test0 ( ) throws Throwable { Parameters parameters0 = new Parameters ( ) ; Object object0 = new Object ( ) ; int int0 = parameters0 . addTerm ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) throws BeanBinException { return dao . getSize ( clazz , new Query ( ) ) ; }
void test1 ( ) throws Throwable { LessThanBuilder lessThanBuilder0 = new LessThanBuilder ( ) ; Object object0 = new Object ( ) ; SearchType searchType0 = SearchType . LESSTHAN ; Criteria criteria0 = new Criteria ( "n`MBt6I9Q = _ ( F * ReA ( " , object0 , searchType0 ) ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; lessThanBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = lessThanBuilder0 . getQueryString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryString ( ) throws BeanBinException { EqualsBuilder builder = new EqualsBuilder ( ) ; Criteria criteria = new Criteria ( getCriteria ( ) . getProperty ( ) , " * " + getCriteria ( ) . getTerm ( ) . toString ( ) + " * " , SearchType . EQUALS ) ; builder . initialize ( criteria , getParameters ( ) ) ; return builder . getJPAQL ( ) ; }
void test2 ( ) throws Throwable { LessThanBuilder lessThanBuilder0 = new LessThanBuilder ( ) ; SearchType searchType0 = SearchType . LESSTHANOREQUALTO ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; Criteria criteria0 = new Criteria ( "" , ( Object ) "LESSTHANOREQUALTO" , searchType0 ) ; lessThanBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = lessThanBuilder0 . getQueryString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryString ( ) throws BeanBinException { EqualsBuilder builder = new EqualsBuilder ( ) ; Criteria criteria = new Criteria ( getCriteria ( ) . getProperty ( ) , " * " + getCriteria ( ) . getTerm ( ) . toString ( ) + " * " , SearchType . EQUALS ) ; builder . initialize ( criteria , getParameters ( ) ) ; return builder . getJPAQL ( ) ; }
void test0 ( ) throws Throwable { GreaterThanBuilder greaterThanBuilder0 = new GreaterThanBuilder ( ) ; SearchType searchType0 = SearchType . GREATERTHAN ; Criteria criteria0 = new Criteria ( " ) o@eiDq'7I { PZ" , ( Object ) "GREATERTHAN" , searchType0 ) ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; greaterThanBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = greaterThanBuilder0 . getQueryString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof Criteria ) { return toString ( ) . equals ( obj . toString ( ) ) ; } else { return false ; } }
void test3 ( ) throws Throwable { SearchType searchType0 = SearchType . GREATERTHAN ; Criteria criteria0 = new Criteria ( " ) o@eiDq'7I { PZ" , ( Object ) "GREATERTHAN" , searchType0 ) ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; ContainsBuilder containsBuilder0 = new ContainsBuilder ( ) ; containsBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = containsBuilder0 . getJPAQL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJPAQL ( ) throws BeanBinException { String queryString = getQueryString ( ) ; if ( queryString . startsWith ( EJB3Searcher . ALIAS ) ) { return queryString ; } else { return EJB3Searcher . ALIAS + " . " + queryString ; } }
void test0 ( ) throws Throwable { GreaterThanBuilder greaterThanBuilder0 = new GreaterThanBuilder ( ) ; SearchType searchType0 = SearchType . GREATERTHANOREQUALTO ; Criteria criteria0 = new Criteria ( ( String ) null , ( Object ) " { } " , searchType0 ) ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; greaterThanBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = greaterThanBuilder0 . getJPAQL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryString ( ) throws BeanBinException { EqualsBuilder builder = new EqualsBuilder ( ) ; Criteria criteria = new Criteria ( getCriteria ( ) . getProperty ( ) , " * " + getCriteria ( ) . getTerm ( ) . toString ( ) + " * " , SearchType . EQUALS ) ; builder . initialize ( criteria , getParameters ( ) ) ; return builder . getJPAQL ( ) ; }
void test0 ( ) throws Throwable { EqualsBuilder equalsBuilder0 = new EqualsBuilder ( ) ; SearchType searchType0 = SearchType . DOESNOTEQUAL ; Criteria criteria0 = new Criteria ( "" , ( Object ) "" , searchType0 ) ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; equalsBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = equalsBuilder0 . getQueryString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJPAQL ( ) throws BeanBinException { String queryString = getQueryString ( ) ; if ( queryString . startsWith ( EJB3Searcher . ALIAS ) ) { return queryString ; } else { return EJB3Searcher . ALIAS + " . " + queryString ; } }
void test1 ( ) throws Throwable { EqualsBuilder equalsBuilder0 = new EqualsBuilder ( ) ; SearchType searchType0 = SearchType . LESSTHAN ; Criteria criteria0 = new Criteria ( " * ~" , ( Object ) " * ~" , searchType0 ) ; HashMap < String , Parameters > hashMap0 = new HashMap < String , Parameters > ( ) ; equalsBuilder0 . initialize ( criteria0 , ( Map < String , Parameters > ) hashMap0 ) ; String string0 = equalsBuilder0 . getQueryString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryString ( ) throws BeanBinException { EqualsBuilder builder = new EqualsBuilder ( ) ; Criteria criteria = new Criteria ( getCriteria ( ) . getProperty ( ) , " * " + getCriteria ( ) . getTerm ( ) . toString ( ) + " * " , SearchType . EQUALS ) ; builder . initialize ( criteria , getParameters ( ) ) ; return builder . getJPAQL ( ) ; }
void test0 ( ) throws Throwable { RemoveEntity removeEntity0 = new RemoveEntity ( ( Object ) null ) ; RemoveAction removeAction0 = new RemoveAction ( removeEntity0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RemoveAction ( RemoveEntity cmd ) { this . entity = cmd . getEntity ( ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = SchemaFinder . class ; SchemaFinder schemaFinder0 = new SchemaFinder ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SchemaFinder ( Class clazz ) throws BeanBinException { this . classes = new ArrayList < Class > ( ) ; addClass ( clazz ) ; }
