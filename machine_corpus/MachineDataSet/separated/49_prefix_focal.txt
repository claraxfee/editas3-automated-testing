void test1 ( ) throws Throwable { Model model0 = new Model ( ) ; DefaultMenuController defaultMenuController0 = new DefaultMenuController ( model0 , ( IDrinkSellView ) null ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "SwingLargeIconKey" , 0 , "SwingLargeIconKey" ) ; defaultMenuController0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( IDrinkSellView . MI_DISPLAY_INFO_VIEW ) ) { showNewInfoView ( ) ; } else if ( e . getActionCommand ( ) . equals ( IDrinkSellView . MI_DISPLAY_SETTINGS_VIEW ) ) { showSettingsView ( ) ; } }
void test0 ( ) throws Throwable { Model model0 = new Model ( ) ; TriggerThread triggerThread0 = new TriggerThread ( " / AJ ) 6 ( JOi ) ow\"N" , model0 ) ; triggerThread0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getText ( ) ; }
void test0 ( ) throws Throwable { Model model0 = new Model ( ) ; DefaultSettingsController defaultSettingsController0 = new DefaultSettingsController ( model0 , ( ISettingsView ) null , ( IDrinkSettingsView ) null ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "VERTICAL_SCROLLBAR" , 167 , "VERTICAL_SCROLLBAR" ) ; defaultSettingsController0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( IDrinkSellView . MI_DISPLAY_INFO_VIEW ) ) { showNewInfoView ( ) ; } else if ( e . getActionCommand ( ) . equals ( IDrinkSellView . MI_DISPLAY_SETTINGS_VIEW ) ) { showSettingsView ( ) ; } }
void test1 ( ) throws Throwable { Model model0 = new Model ( ) ; DrinkSellController drinkSellController0 = new DrinkSellController ( model0 , ( IDrinkSellView ) null ) ; JLabel jLabel0 = new JLabel ( "#g ( Qev# - xw ; k / yf_" ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jLabel0 , 2023 , ( long ) 2023 , 2023 , 2023 , ' ? ' , 0 ) ; drinkSellController0 . keyTyped ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyTyped ( KeyEvent e ) { }
void test2 ( ) throws Throwable { Model model0 = new Model ( ) ; DrinkSellController drinkSellController0 = new DrinkSellController ( model0 , ( IDrinkSellView ) null ) ; JLabel jLabel0 = new JLabel ( "#g ( Qev# - xw ; k / yf_" ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jLabel0 , 2023 , ( long ) 2023 , 2023 , 2023 , ' ? ' , 0 ) ; drinkSellController0 . keyReleased ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getText ( ) ; }
void test6 ( ) throws Throwable { JColorChooser jColorChooser0 = new JColorChooser ( ) ; DefaultInfoViewMouseListener defaultInfoViewMouseListener0 = new DefaultInfoViewMouseListener ( ( JFrame ) null ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jColorChooser0 , ( - 1183 ) , ( long ) ( - 1183 ) , 0 , 0 , 0 , ( - 1200 ) , 0 , 0 , false , 0 , 0 , ( - 1183 ) ) ; defaultInfoViewMouseListener0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) = = 2 ) { if ( defaultInfoFrame . getExtendedState ( ) ! = JFrame . MAXIMIZED_BOTH ) { prevSize = defaultInfoFrame . getSize ( ) ; defaultInfoFrame . setExtendedState ( JFrame . MAXIMIZED_BOTH ) ; } else { defaultInfoFrame . setSize ( prevSize ) ; } } }
void test0 ( ) throws Throwable { KeyMapComboBoxModel keyMapComboBoxModel0 = new KeyMapComboBoxModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeyMapComboBoxModel ( ) { this . addElement ( KM1 ) ; this . addElement ( KM2 ) ; this . addElement ( KM3 ) ; this . addElement ( KM4 ) ; this . addElement ( KM5 ) ; this . addElement ( KM6 ) ; this . addElement ( KM7 ) ; this . addElement ( KM8 ) ; this . addElement ( KM9 ) ; this . addElement ( KM10 ) ; this . addElement ( KM11 ) ; this . addElement ( KM12 ) ; }
void test1 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 112 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return text ; }
void test2 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 114 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
void test3 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getText ( ) ; }
void test4 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 115 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return text ; }
void test5 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 116 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getText ( ) ; }
void test6 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 117 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
void test7 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 118 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return text ; }
void test8 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 119 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getText ( ) ; }
void test9 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 120 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return text ; }
void test10 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 121 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
void test11 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 122 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return text ; }
void test12 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 123 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getText ( ) ; }
void test13 ( ) throws Throwable { MyKeyMap myKeyMap0 = KeyMapComboBoxModel . getMyKeyMapForKeyCode ( 129 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MyKeyMap getMyKeyMapForKeyCode ( int keyCode ) { switch ( keyCode ) { case KeyEvent . VK_F1 : return KM1 ; case KeyEvent . VK_F2 : return KM2 ; case KeyEvent . VK_F3 : return KM3 ; case KeyEvent . VK_F4 : return KM4 ; case KeyEvent . VK_F5 : return KM5 ; case KeyEvent . VK_F6 : return KM6 ; case KeyEvent . VK_F7 : return KM7 ; case KeyEvent . VK_F8 : return KM8 ; case KeyEvent . VK_F9 : return KM9 ; case KeyEvent . VK_F10 : return KM10 ; case KeyEvent . VK_F11 : return KM11 ; case KeyEvent . VK_F12 : return KM12 ; default : return null ; } }
void test0 ( ) throws Throwable { RunningMessagePanel runningMessagePanel0 = new RunningMessagePanel ( "752F1Z'Ywds ) A" , ( - 466 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStringWidth ( ) { return stringWidth ; }
void test1 ( ) throws Throwable { RunningMessagePanel runningMessagePanel0 = new RunningMessagePanel ( "$pPMCITV0dn^Z" , 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStringWidth ( ) { return stringWidth ; }
void test2 ( ) throws Throwable { RunningMessagePanel runningMessagePanel0 = new RunningMessagePanel ( "9" , 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStringHeight ( ) { return stringHeight ; }
void test3 ( ) throws Throwable { RunningMessagePanel runningMessagePanel0 = new RunningMessagePanel ( "$pPMCITV0dn^Z" , 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStringHeight ( ) { return stringHeight ; }
void test4 ( ) throws Throwable { RunningMessagePanel runningMessagePanel0 = new RunningMessagePanel ( "" , ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStringHeight ( ) { return stringHeight ; }
void test0 ( ) throws Throwable { MyKeyMap myKeyMap0 = new MyKeyMap ( "e@ } * " , 1973 ) ; String string0 = myKeyMap0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
void test1 ( ) throws Throwable { MyKeyMap myKeyMap0 = new MyKeyMap ( "e@ } * " , 1973 ) ; int int0 = myKeyMap0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
